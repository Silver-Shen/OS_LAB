diff -r -u -P lab6_original/.badarg.log lab6/.badarg.log
--- lab6_original/.badarg.log	1970-01-01 08:00:00.000000000 +0800
+++ lab6/.badarg.log	2016-04-29 16:22:24.935278116 +0800
@@ -0,0 +1,105 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc010b8fd (phys)
+  edata  0xc01adcdc (phys)
+  end    0xc01b0e58 (phys)
+Kernel executable memory footprint: 708KB
+ebp:0xc012bf48 eip:0xc0100b4f args:0x00010094 0x00010094 0xc012bf78 0xc01000c5 
+    kern/debug/kdebug.c:352: print_stackframe+21
+ebp:0xc012bf58 eip:0xc0100e49 args:0x00000000 0x00000000 0x00000000 0xc012bfc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc012bf78 eip:0xc01000c5 args:0x00000000 0xc012bfa0 0xffff0000 0xc012bfa4 
+    kern/init/init.c:59: grade_backtrace2+19
+ebp:0xc012bf98 eip:0xc01000e7 args:0x00000000 0xffff0000 0xc012bfc4 0x0000002a 
+    kern/init/init.c:64: grade_backtrace1+27
+ebp:0xc012bfb8 eip:0xc0100104 args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:69: grade_backtrace0+19
+ebp:0xc012bfd8 eip:0xc0100125 args:0x00000000 0x00000000 0x00000000 0xc010b900 
+    kern/init/init.c:74: grade_backtrace+26
+ebp:0xc012bff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:33: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31819
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "badarg".
+fork ok.
+badarg pass.
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:476:
+    initproc exit.
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P lab6_original/.badsegment.log lab6/.badsegment.log
--- lab6_original/.badsegment.log	1970-01-01 08:00:00.000000000 +0800
+++ lab6/.badsegment.log	2016-04-29 16:22:09.620459360 +0800
@@ -0,0 +1,123 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc010b8fd (phys)
+  edata  0xc01adcdc (phys)
+  end    0xc01b0e58 (phys)
+Kernel executable memory footprint: 708KB
+ebp:0xc012bf48 eip:0xc0100b4f args:0x00010094 0x00010094 0xc012bf78 0xc01000c5 
+    kern/debug/kdebug.c:352: print_stackframe+21
+ebp:0xc012bf58 eip:0xc0100e49 args:0x00000000 0x00000000 0x00000000 0xc012bfc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc012bf78 eip:0xc01000c5 args:0x00000000 0xc012bfa0 0xffff0000 0xc012bfa4 
+    kern/init/init.c:59: grade_backtrace2+19
+ebp:0xc012bf98 eip:0xc01000e7 args:0x00000000 0xffff0000 0xc012bfc4 0x0000002a 
+    kern/init/init.c:64: grade_backtrace1+27
+ebp:0xc012bfb8 eip:0xc0100104 args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:69: grade_backtrace0+19
+ebp:0xc012bfd8 eip:0xc0100125 args:0x00000000 0x00000000 0x00000000 0xc010b900 
+    kern/init/init.c:74: grade_backtrace+26
+ebp:0xc012bff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:33: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31819
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "badsegment".
+trapframe at 0xc039bfb4
+  edi  0x00000000
+  esi  0x00000000
+  ebp  0xafffffa8
+  oesp 0xc039bfd4
+  ebx  0x00000000
+  edx  0x00000000
+  ecx  0xafffffc0
+  eax  0x00000028
+  ds   0x----0023
+  es   0x----0023
+  fs   0x----0000
+  gs   0x----0000
+  trap 0x0000000d General Protection
+  err  0x00000028
+  eip  0x00800f40
+  cs   0x----001b
+  flag 0x00000286 PF,SF,IF,IOPL=0
+  esp  0xafffffa0
+  ss   0x----0023
+unhandled trap.
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:476:
+    initproc exit.
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
Binary files lab6_original/bin/bootblock and lab6/bin/bootblock differ
Binary files lab6_original/bin/kernel and lab6/bin/kernel differ
Binary files lab6_original/bin/sign and lab6/bin/sign differ
Binary files lab6_original/bin/swap.img and lab6/bin/swap.img differ
Binary files lab6_original/bin/ucore.img and lab6/bin/ucore.img differ
diff -r -u -P lab6_original/.check_output.log lab6/.check_output.log
--- lab6_original/.check_output.log	1970-01-01 08:00:00.000000000 +0800
+++ lab6/.check_output.log	2016-04-25 14:27:20.216670916 +0800
@@ -0,0 +1,49 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0x00100000 (phys)
+  etext  0x0010352b (phys)
+  edata  0x0010ea16 (phys)
+  end    0x0010fd20 (phys)
+Kernel executable memory footprint: 64KB
+ebp:0x00007b38 eip:0x00100a37 args:0x00010094 0x00010094 0x00007b68 0x00100084 
+    kern/debug/kdebug.c:307: print_stackframe+21
+ebp:0x00007b48 eip:0x00100d31 args:0x00000000 0x00000000 0x00000000 0x00007bb8 
+    kern/debug/kmonitor.c:125: mon_backtrace+10
+ebp:0x00007b68 eip:0x00100084 args:0x00000000 0x00007b90 0xffff0000 0x00007b94 
+    kern/init/init.c:48: grade_backtrace2+19
+ebp:0x00007b88 eip:0x001000a6 args:0x00000000 0xffff0000 0x00007bb4 0x00000029 
+    kern/init/init.c:53: grade_backtrace1+27
+ebp:0x00007ba8 eip:0x001000c3 args:0x00000000 0x00100000 0xffff0000 0x00100043 
+    kern/init/init.c:58: grade_backtrace0+19
+ebp:0x00007bc8 eip:0x001000e4 args:0x00000000 0x00000000 0x00000000 0x00103540 
+    kern/init/init.c:63: grade_backtrace+26
+ebp:0x00007be8 eip:0x00100050 args:0x00000000 0x00000000 0x00000000 0x00007c4f 
+    kern/init/init.c:28: kern_init+79
+ebp:0x00007bf8 eip:0x00007d6e args:0xc031fcfa 0xc08ed88e 0x64e4d08e 0xfa7502a8 
+    <unknow>: -- 0x00007d6d --
+++ setup timer interrupts
+0: @ring 0
+0:  cs = 8
+0:  ds = 10
+0:  es = 10
+0:  ss = 10
++++ switch to  user  mode +++
+1: @ring 3
+1:  cs = 1b
+1:  ds = 23
+1:  es = 23
+1:  ss = 23
++++ switch to kernel mode +++
+2: @ring 0
+2:  cs = 8
+2:  ds = 10
+2:  es = 10
+2:  ss = 10
+100 ticks
+End of Test.
+kernel panic at kern/trap/trap.c:18:
+    EOT: kernel seems ok.
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P lab6_original/.check_pmm.log lab6/.check_pmm.log
--- lab6_original/.check_pmm.log	1970-01-01 08:00:00.000000000 +0800
+++ lab6/.check_pmm.log	2016-04-25 14:27:20.216670916 +0800
@@ -0,0 +1,54 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc0105c26 (phys)
+  edata  0xc0117a36 (phys)
+  end    0xc0118968 (phys)
+Kernel executable memory footprint: 99KB
+ebp:0xc0116f48 eip:0xc0100a61 args:0x00010094 0x00010094 0xc0116f78 0xc01000ae 
+    kern/debug/kdebug.c:310: print_stackframe+21
+ebp:0xc0116f58 eip:0xc0100d5b args:0x00000000 0x00000000 0x00000000 0xc0116fc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0116f78 eip:0xc01000ae args:0x00000000 0xc0116fa0 0xffff0000 0xc0116fa4 
+    kern/init/init.c:49: grade_backtrace2+19
+ebp:0xc0116f98 eip:0xc01000d0 args:0x00000000 0xffff0000 0xc0116fc4 0x00000029 
+    kern/init/init.c:54: grade_backtrace1+27
+ebp:0xc0116fb8 eip:0xc01000ed args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:59: grade_backtrace0+19
+ebp:0xc0116fd8 eip:0xc010010e args:0x00000000 0x00000000 0x00000000 0xc0105c40 
+    kern/init/init.c:64: grade_backtrace+26
+ebp:0xc0116ff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:29: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+++ setup timer interrupts
+0: @ring 0
+0:  cs = 8
+0:  ds = 10
+0:  es = 10
+0:  ss = 10
++++ switch to  user  mode +++
+100 ticks
+End of Test.
+kernel panic at kern/trap/trap.c:18:
+    EOT: kernel seems ok.
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P lab6_original/.check_swap.log lab6/.check_swap.log
--- lab6_original/.check_swap.log	1970-01-01 08:00:00.000000000 +0800
+++ lab6/.check_swap.log	2016-04-25 14:27:20.216670916 +0800
@@ -0,0 +1,98 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc0108489 (phys)
+  edata  0xc0120a68 (phys)
+  end    0xc0121b90 (phys)
+Kernel executable memory footprint: 135KB
+ebp:0xc011ff48 eip:0xc0100a6b args:0x00010094 0x00010094 0xc011ff78 0xc01000b8 
+    kern/debug/kdebug.c:310: print_stackframe+21
+ebp:0xc011ff58 eip:0xc0100d65 args:0x00000000 0x00000000 0x00000000 0xc011ffc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc011ff78 eip:0xc01000b8 args:0x00000000 0xc011ffa0 0xffff0000 0xc011ffa4 
+    kern/init/init.c:57: grade_backtrace2+19
+ebp:0xc011ff98 eip:0xc01000da args:0x00000000 0xffff0000 0xc011ffc4 0x0000002a 
+    kern/init/init.c:62: grade_backtrace1+27
+ebp:0xc011ffb8 eip:0xc01000f7 args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:67: grade_backtrace0+19
+ebp:0xc011ffd8 eip:0xc0100118 args:0x00000000 0x00000000 0x00000000 0xc01084a0 
+    kern/init/init.c:72: grade_backtrace+26
+ebp:0xc011fff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:32: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31965
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 7
+check_swap() succeeded!
+++ setup timer interrupts
+100 ticks
+End of Test.
+kernel panic at kern/trap/trap.c:20:
+    EOT: kernel seems ok.
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P lab6_original/.check_vmm.log lab6/.check_vmm.log
--- lab6_original/.check_vmm.log	1970-01-01 08:00:00.000000000 +0800
+++ lab6/.check_vmm.log	2016-04-25 14:27:20.220671136 +0800
@@ -0,0 +1,102 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc01095de (phys)
+  edata  0xc0124a80 (phys)
+  end    0xc0127bd8 (phys)
+Kernel executable memory footprint: 159KB
+ebp:0xc0123f48 eip:0xc0100a73 args:0x00010094 0x00010094 0xc0123f78 0xc01000c0 
+    kern/debug/kdebug.c:310: print_stackframe+21
+ebp:0xc0123f58 eip:0xc0100d6d args:0x00000000 0x00000000 0x00000000 0xc0123fc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0123f78 eip:0xc01000c0 args:0x00000000 0xc0123fa0 0xffff0000 0xc0123fa4 
+    kern/init/init.c:58: grade_backtrace2+19
+ebp:0xc0123f98 eip:0xc01000e2 args:0x00000000 0xffff0000 0xc0123fc4 0x0000002a 
+    kern/init/init.c:63: grade_backtrace1+27
+ebp:0xc0123fb8 eip:0xc01000ff args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:68: grade_backtrace0+19
+ebp:0xc0123fd8 eip:0xc0100120 args:0x00000000 0x00000000 0x00000000 0xc01095e0 
+    kern/init/init.c:73: grade_backtrace+26
+ebp:0xc0123ff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:33: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31956
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+this initproc, pid = 1, name = "init"
+To U: "Hello world!!".
+To U: "en.., Bye, Bye. :)"
+kernel panic at kern/process/proc.c:338:
+    process exit!!.
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P lab6_original/.cproject lab6/.cproject
--- lab6_original/.cproject	1970-01-01 08:00:00.000000000 +0800
+++ lab6/.cproject	2016-04-20 15:29:50.663704472 +0800
@@ -0,0 +1,49 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<?fileVersion 4.0.0?><cproject storage_type_id="org.eclipse.cdt.core.XmlProjectDescriptionStorage">
+	<storageModule moduleId="org.eclipse.cdt.core.settings">
+		<cconfiguration id="0.589401602">
+			<storageModule buildSystemId="org.eclipse.cdt.managedbuilder.core.configurationDataProvider" id="0.589401602" moduleId="org.eclipse.cdt.core.settings" name="Default">
+				<externalSettings/>
+				<extensions>
+					<extension id="org.eclipse.cdt.core.VCErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
+					<extension id="org.eclipse.cdt.core.GmakeErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
+					<extension id="org.eclipse.cdt.core.CWDLocator" point="org.eclipse.cdt.core.ErrorParser"/>
+					<extension id="org.eclipse.cdt.core.GCCErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
+					<extension id="org.eclipse.cdt.core.GASErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
+					<extension id="org.eclipse.cdt.core.GLDErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
+				</extensions>
+			</storageModule>
+			<storageModule moduleId="cdtBuildSystem" version="4.0.0">
+				<configuration buildProperties="" description="" id="0.589401602" name="Default" parent="org.eclipse.cdt.build.core.prefbase.cfg">
+					<folderInfo id="0.589401602." name="/" resourcePath="">
+						<toolChain id="org.eclipse.cdt.build.core.prefbase.toolchain.396088487" name="No ToolChain" resourceTypeBasedDiscovery="false" superClass="org.eclipse.cdt.build.core.prefbase.toolchain">
+							<targetPlatform id="org.eclipse.cdt.build.core.prefbase.toolchain.396088487.2000549878" name=""/>
+							<builder id="org.eclipse.cdt.build.core.settings.default.builder.1296913034" keepEnvironmentInBuildfile="false" managedBuildOn="false" name="Gnu Make Builder" superClass="org.eclipse.cdt.build.core.settings.default.builder"/>
+							<tool id="org.eclipse.cdt.build.core.settings.holder.libs.526786967" name="holder for library settings" superClass="org.eclipse.cdt.build.core.settings.holder.libs"/>
+							<tool id="org.eclipse.cdt.build.core.settings.holder.989335075" name="Assembly" superClass="org.eclipse.cdt.build.core.settings.holder">
+								<inputType id="org.eclipse.cdt.build.core.settings.holder.inType.1103861831" languageId="org.eclipse.cdt.core.assembly" languageName="Assembly" sourceContentType="org.eclipse.cdt.core.asmSource" superClass="org.eclipse.cdt.build.core.settings.holder.inType"/>
+							</tool>
+							<tool id="org.eclipse.cdt.build.core.settings.holder.98450646" name="GNU C++" superClass="org.eclipse.cdt.build.core.settings.holder">
+								<inputType id="org.eclipse.cdt.build.core.settings.holder.inType.2088610522" languageId="org.eclipse.cdt.core.g++" languageName="GNU C++" sourceContentType="org.eclipse.cdt.core.cxxSource,org.eclipse.cdt.core.cxxHeader" superClass="org.eclipse.cdt.build.core.settings.holder.inType"/>
+							</tool>
+							<tool id="org.eclipse.cdt.build.core.settings.holder.1240594554" name="GNU C" superClass="org.eclipse.cdt.build.core.settings.holder">
+								<inputType id="org.eclipse.cdt.build.core.settings.holder.inType.502295541" languageId="org.eclipse.cdt.core.gcc" languageName="GNU C" sourceContentType="org.eclipse.cdt.core.cSource,org.eclipse.cdt.core.cHeader" superClass="org.eclipse.cdt.build.core.settings.holder.inType"/>
+							</tool>
+						</toolChain>
+					</folderInfo>
+				</configuration>
+			</storageModule>
+			<storageModule moduleId="org.eclipse.cdt.core.externalSettings"/>
+		</cconfiguration>
+	</storageModule>
+	<storageModule moduleId="cdtBuildSystem" version="4.0.0">
+		<project id="lab6.null.330695373" name="lab6"/>
+	</storageModule>
+	<storageModule moduleId="scannerConfiguration">
+		<autodiscovery enabled="true" problemReportingEnabled="true" selectedProfileId=""/>
+		<scannerConfigBuildInfo instanceId="0.589401602">
+			<autodiscovery enabled="true" problemReportingEnabled="true" selectedProfileId=""/>
+		</scannerConfigBuildInfo>
+	</storageModule>
+	<storageModule moduleId="org.eclipse.cdt.core.LanguageSettingsProviders"/>
+</cproject>
diff -r -u -P lab6_original/.divzero.log lab6/.divzero.log
--- lab6_original/.divzero.log	1970-01-01 08:00:00.000000000 +0800
+++ lab6/.divzero.log	2016-04-29 16:22:11.254368919 +0800
@@ -0,0 +1,124 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc010b8fd (phys)
+  edata  0xc01adcdc (phys)
+  end    0xc01b0e58 (phys)
+Kernel executable memory footprint: 708KB
+ebp:0xc012bf48 eip:0xc0100b4f args:0x00010094 0x00010094 0xc012bf78 0xc01000c5 
+    kern/debug/kdebug.c:352: print_stackframe+21
+ebp:0xc012bf58 eip:0xc0100e49 args:0x00000000 0x00000000 0x00000000 0xc012bfc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc012bf78 eip:0xc01000c5 args:0x00000000 0xc012bfa0 0xffff0000 0xc012bfa4 
+    kern/init/init.c:59: grade_backtrace2+19
+ebp:0xc012bf98 eip:0xc01000e7 args:0x00000000 0xffff0000 0xc012bfc4 0x0000002a 
+    kern/init/init.c:64: grade_backtrace1+27
+ebp:0xc012bfb8 eip:0xc0100104 args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:69: grade_backtrace0+19
+ebp:0xc012bfd8 eip:0xc0100125 args:0x00000000 0x00000000 0x00000000 0xc010b900 
+    kern/init/init.c:74: grade_backtrace+26
+ebp:0xc012bff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:33: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31819
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "divzero".
+trapframe at 0xc039bfb4
+  edi  0x00000000
+  esi  0x00000000
+  ebp  0xafffffa8
+  oesp 0xc039bfd4
+  ebx  0x00000000
+  edx  0x00000000
+  ecx  0x00000000
+  eax  0x00000001
+  ds   0x----0023
+  es   0x----0023
+  fs   0x----0000
+  gs   0x----0000
+  trap 0x00000000 Divide error
+  err  0x00000000
+  eip  0x00800f48
+  cs   0x----001b
+  flag 0x00000286 PF,SF,IF,IOPL=0
+  esp  0xafffffa0
+  ss   0x----0023
+unhandled trap.
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:476:
+    initproc exit.
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P lab6_original/.exit.log lab6/.exit.log
--- lab6_original/.exit.log	1970-01-01 08:00:00.000000000 +0800
+++ lab6/.exit.log	2016-04-29 16:22:26.675850526 +0800
@@ -0,0 +1,109 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc010b8fd (phys)
+  edata  0xc01adcdc (phys)
+  end    0xc01b0e58 (phys)
+Kernel executable memory footprint: 708KB
+ebp:0xc012bf48 eip:0xc0100b4f args:0x00010094 0x00010094 0xc012bf78 0xc01000c5 
+    kern/debug/kdebug.c:352: print_stackframe+21
+ebp:0xc012bf58 eip:0xc0100e49 args:0x00000000 0x00000000 0x00000000 0xc012bfc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc012bf78 eip:0xc01000c5 args:0x00000000 0xc012bfa0 0xffff0000 0xc012bfa4 
+    kern/init/init.c:59: grade_backtrace2+19
+ebp:0xc012bf98 eip:0xc01000e7 args:0x00000000 0xffff0000 0xc012bfc4 0x0000002a 
+    kern/init/init.c:64: grade_backtrace1+27
+ebp:0xc012bfb8 eip:0xc0100104 args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:69: grade_backtrace0+19
+ebp:0xc012bfd8 eip:0xc0100125 args:0x00000000 0x00000000 0x00000000 0xc010b900 
+    kern/init/init.c:74: grade_backtrace+26
+ebp:0xc012bff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:33: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31819
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "exit".
+I am the parent. Forking the child...
+I am parent, fork a child pid 3
+I am the parent, waiting now..
+I am the child.
+waitpid 3 ok.
+exit pass.
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:476:
+    initproc exit.
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P lab6_original/.faultreadkernel.log lab6/.faultreadkernel.log
--- lab6_original/.faultreadkernel.log	1970-01-01 08:00:00.000000000 +0800
+++ lab6/.faultreadkernel.log	2016-04-29 16:22:16.350891132 +0800
@@ -0,0 +1,123 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc010b8fd (phys)
+  edata  0xc01adcdc (phys)
+  end    0xc01b0e58 (phys)
+Kernel executable memory footprint: 708KB
+ebp:0xc012bf48 eip:0xc0100b4f args:0x00010094 0x00010094 0xc012bf78 0xc01000c5 
+    kern/debug/kdebug.c:352: print_stackframe+21
+ebp:0xc012bf58 eip:0xc0100e49 args:0x00000000 0x00000000 0x00000000 0xc012bfc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc012bf78 eip:0xc01000c5 args:0x00000000 0xc012bfa0 0xffff0000 0xc012bfa4 
+    kern/init/init.c:59: grade_backtrace2+19
+ebp:0xc012bf98 eip:0xc01000e7 args:0x00000000 0xffff0000 0xc012bfc4 0x0000002a 
+    kern/init/init.c:64: grade_backtrace1+27
+ebp:0xc012bfb8 eip:0xc0100104 args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:69: grade_backtrace0+19
+ebp:0xc012bfd8 eip:0xc0100125 args:0x00000000 0x00000000 0x00000000 0xc010b900 
+    kern/init/init.c:74: grade_backtrace+26
+ebp:0xc012bff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:33: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31819
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "faultreadkernel".
+not valid addr fac00000, and  can not find it in vma
+trapframe at 0xc039bfb4
+  edi  0x00000000
+  esi  0x00000000
+  ebp  0xafffffa8
+  oesp 0xc039bfd4
+  ebx  0x00000000
+  edx  0x00000000
+  ecx  0xafffffc0
+  eax  0xfac00000
+  ds   0x----0023
+  es   0x----0023
+  fs   0x----0000
+  gs   0x----0000
+  trap 0x0000000e Page Fault
+  err  0x00000005
+  eip  0x00800f41
+  cs   0x----001b
+  flag 0x00000286 PF,SF,IF,IOPL=0
+  esp  0xafffffa0
+  ss   0x----0023
+killed by kernel.
+kernel panic at kern/trap/trap.c:212:
+    handle user mode pgfault failed. ret=-3
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P lab6_original/.faultread.log lab6/.faultread.log
--- lab6_original/.faultread.log	1970-01-01 08:00:00.000000000 +0800
+++ lab6/.faultread.log	2016-04-29 16:22:14.757672899 +0800
@@ -0,0 +1,123 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc010b8fd (phys)
+  edata  0xc01adcdc (phys)
+  end    0xc01b0e58 (phys)
+Kernel executable memory footprint: 708KB
+ebp:0xc012bf48 eip:0xc0100b4f args:0x00010094 0x00010094 0xc012bf78 0xc01000c5 
+    kern/debug/kdebug.c:352: print_stackframe+21
+ebp:0xc012bf58 eip:0xc0100e49 args:0x00000000 0x00000000 0x00000000 0xc012bfc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc012bf78 eip:0xc01000c5 args:0x00000000 0xc012bfa0 0xffff0000 0xc012bfa4 
+    kern/init/init.c:59: grade_backtrace2+19
+ebp:0xc012bf98 eip:0xc01000e7 args:0x00000000 0xffff0000 0xc012bfc4 0x0000002a 
+    kern/init/init.c:64: grade_backtrace1+27
+ebp:0xc012bfb8 eip:0xc0100104 args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:69: grade_backtrace0+19
+ebp:0xc012bfd8 eip:0xc0100125 args:0x00000000 0x00000000 0x00000000 0xc010b900 
+    kern/init/init.c:74: grade_backtrace+26
+ebp:0xc012bff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:33: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31819
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "faultread".
+not valid addr 0, and  can not find it in vma
+trapframe at 0xc039bfb4
+  edi  0x00000000
+  esi  0x00000000
+  ebp  0xafffffa8
+  oesp 0xc039bfd4
+  ebx  0x00000000
+  edx  0x00000000
+  ecx  0xafffffc0
+  eax  0x00000000
+  ds   0x----0023
+  es   0x----0023
+  fs   0x----0000
+  gs   0x----0000
+  trap 0x0000000e Page Fault
+  err  0x00000004
+  eip  0x00800f41
+  cs   0x----001b
+  flag 0x00000286 PF,SF,IF,IOPL=0
+  esp  0xafffffa0
+  ss   0x----0023
+killed by kernel.
+kernel panic at kern/trap/trap.c:212:
+    handle user mode pgfault failed. ret=-3
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P lab6_original/.forktest.log lab6/.forktest.log
--- lab6_original/.forktest.log	1970-01-01 08:00:00.000000000 +0800
+++ lab6/.forktest.log	2016-04-29 16:22:32.554372063 +0800
@@ -0,0 +1,135 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc010b8fd (phys)
+  edata  0xc01adcdc (phys)
+  end    0xc01b0e58 (phys)
+Kernel executable memory footprint: 708KB
+ebp:0xc012bf48 eip:0xc0100b4f args:0x00010094 0x00010094 0xc012bf78 0xc01000c5 
+    kern/debug/kdebug.c:352: print_stackframe+21
+ebp:0xc012bf58 eip:0xc0100e49 args:0x00000000 0x00000000 0x00000000 0xc012bfc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc012bf78 eip:0xc01000c5 args:0x00000000 0xc012bfa0 0xffff0000 0xc012bfa4 
+    kern/init/init.c:59: grade_backtrace2+19
+ebp:0xc012bf98 eip:0xc01000e7 args:0x00000000 0xffff0000 0xc012bfc4 0x0000002a 
+    kern/init/init.c:64: grade_backtrace1+27
+ebp:0xc012bfb8 eip:0xc0100104 args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:69: grade_backtrace0+19
+ebp:0xc012bfd8 eip:0xc0100125 args:0x00000000 0x00000000 0x00000000 0xc010b900 
+    kern/init/init.c:74: grade_backtrace+26
+ebp:0xc012bff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:33: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31819
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "forktest".
+I am child 31
+I am child 30
+I am child 29
+I am child 28
+I am child 27
+I am child 26
+I am child 25
+I am child 24
+I am child 23
+I am child 22
+I am child 21
+I am child 20
+I am child 19
+I am child 18
+I am child 17
+I am child 16
+I am child 15
+I am child 14
+I am child 13
+I am child 12
+I am child 11
+I am child 10
+I am child 9
+I am child 8
+I am child 7
+I am child 6
+I am child 5
+I am child 4
+I am child 3
+I am child 2
+I am child 1
+I am child 0
+forktest pass.
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:476:
+    initproc exit.
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
diff -r -u -P lab6_original/.forktree.log lab6/.forktree.log
--- lab6_original/.forktree.log	1970-01-01 08:00:00.000000000 +0800
+++ lab6/.forktree.log	2016-04-29 16:22:34.311953570 +0800
@@ -0,0 +1,134 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc010b8fd (phys)
+  edata  0xc01adcdc (phys)
+  end    0xc01b0e58 (phys)
+Kernel executable memory footprint: 708KB
+ebp:0xc012bf48 eip:0xc0100b4f args:0x00010094 0x00010094 0xc012bf78 0xc01000c5 
+    kern/debug/kdebug.c:352: print_stackframe+21
+ebp:0xc012bf58 eip:0xc0100e49 args:0x00000000 0x00000000 0x00000000 0xc012bfc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc012bf78 eip:0xc01000c5 args:0x00000000 0xc012bfa0 0xffff0000 0xc012bfa4 
+    kern/init/init.c:59: grade_backtrace2+19
+ebp:0xc012bf98 eip:0xc01000e7 args:0x00000000 0xffff0000 0xc012bfc4 0x0000002a 
+    kern/init/init.c:64: grade_backtrace1+27
+ebp:0xc012bfb8 eip:0xc0100104 args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:69: grade_backtrace0+19
+ebp:0xc012bfd8 eip:0xc0100125 args:0x00000000 0x00000000 0x00000000 0xc010b900 
+    kern/init/init.c:74: grade_backtrace+26
+ebp:0xc012bff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:33: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31819
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "forktree".
+0002: I am ''
+0004: I am '1'
+0006: I am '11'
+0008: I am '111'
+000a: I am '1111'
+0009: I am '1110'
+0007: I am '110'
+000c: I am '1101'
+000b: I am '1100'
+0005: I am '10'
+000e: I am '101'
+0010: I am '1011'
+000f: I am '1010'
+000d: I am '100'
+0012: I am '1001'
+0011: I am '1000'
+0003: I am '0'
+0014: I am '01'
+0016: I am '011'
+0018: I am '0111'
+0017: I am '0110'
+0015: I am '010'
+001a: I am '0101'
+0019: I am '0100'
+0013: I am '00'
+001c: I am '001'
+001e: I am '0011'
+001d: I am '0010'
+001b: I am '000'
+0020: I am '0001'
+001f: I am '0000'
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:476:
+    initproc exit.
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P lab6_original/.gdb.in lab6/.gdb.in
--- lab6_original/.gdb.in	1970-01-01 08:00:00.000000000 +0800
+++ lab6/.gdb.in	2016-04-29 16:22:47.909882402 +0800
@@ -0,0 +1,4 @@
+target remote localhost:1234
+break *0xc0100332
+break *0x00100332
+continue
diff -r -u -P lab6_original/.hello.log lab6/.hello.log
--- lab6_original/.hello.log	1970-01-01 08:00:00.000000000 +0800
+++ lab6/.hello.log	2016-04-29 16:22:18.077461609 +0800
@@ -0,0 +1,105 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc010b8fd (phys)
+  edata  0xc01adcdc (phys)
+  end    0xc01b0e58 (phys)
+Kernel executable memory footprint: 708KB
+ebp:0xc012bf48 eip:0xc0100b4f args:0x00010094 0x00010094 0xc012bf78 0xc01000c5 
+    kern/debug/kdebug.c:352: print_stackframe+21
+ebp:0xc012bf58 eip:0xc0100e49 args:0x00000000 0x00000000 0x00000000 0xc012bfc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc012bf78 eip:0xc01000c5 args:0x00000000 0xc012bfa0 0xffff0000 0xc012bfa4 
+    kern/init/init.c:59: grade_backtrace2+19
+ebp:0xc012bf98 eip:0xc01000e7 args:0x00000000 0xffff0000 0xc012bfc4 0x0000002a 
+    kern/init/init.c:64: grade_backtrace1+27
+ebp:0xc012bfb8 eip:0xc0100104 args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:69: grade_backtrace0+19
+ebp:0xc012bfd8 eip:0xc0100125 args:0x00000000 0x00000000 0x00000000 0xc010b900 
+    kern/init/init.c:74: grade_backtrace+26
+ebp:0xc012bff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:33: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31819
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "hello".
+Hello world!!.
+I am process 2.
+hello pass.
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:476:
+    initproc exit.
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
diff -r -u -P lab6_original/kern/debug/kdebug.c lab6/kern/debug/kdebug.c
--- lab6_original/kern/debug/kdebug.c	2016-02-22 20:41:06.000000000 +0800
+++ lab6/kern/debug/kdebug.c	2016-04-25 14:27:29.473182717 +0800
@@ -335,7 +335,7 @@
  * */
 void
 print_stackframe(void) {
-     /* LAB1 YOUR CODE : STEP 1 */
+     /* LAB1 2013011371 : STEP 1 */
      /* (1) call read_ebp() to get the value of ebp. the type is (uint32_t);
       * (2) call read_eip() to get the value of eip. the type is (uint32_t);
       * (3) from 0 .. STACKFRAME_DEPTH
@@ -347,5 +347,18 @@
       *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
       *                   the calling funciton's ebp = ss:[ebp]
       */
+
+	uint32_t ebp = read_ebp();
+    uint32_t eip = read_eip();
+    int i = 0;
+    while (ebp && i<STACKFRAME_DEPTH){
+    	cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
+    	for (int j=0; j<4; j++) cprintf("0x%08x ", ((uint32_t *)ebp)[j+2]);
+    	cprintf("\n");
+    	print_debuginfo(eip - 1);
+    	i++;
+    	eip = ((uint32_t *)ebp)[1];
+    	ebp = ((uint32_t *)ebp)[0];
+    }
 }
 
diff -r -u -P lab6_original/kern/init/entry.S~ lab6/kern/init/entry.S~
--- lab6_original/kern/init/entry.S~	1970-01-01 08:00:00.000000000 +0800
+++ lab6/kern/init/entry.S~	2016-04-25 14:27:29.473182717 +0800
@@ -0,0 +1,49 @@
+#include <mmu.h>
+#include <memlayout.h>
+
+#define REALLOC(x) (x - KERNBASE)
+
+.text
+.globl kern_entry
+kern_entry:
+    # reload temperate gdt (second time) to remap all physical memory
+    # virtual_addr 0~4G=linear_addr&physical_addr -KERNBASE~4G-KERNBASE
+    lgdt REALLOC(__gdtdesc)
+    movl $KERNEL_DS, %eax
+    movw %ax, %ds
+    movw %ax, %es
+    movw %ax, %ss
+
+    ljmp $KERNEL_CS, $relocated
+
+relocated:
+
+    # set ebp, esp
+    movl $0x0, %ebp
+    # the kernel stack region is from bootstack -- bootstacktop,
+    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
+    movl $bootstacktop, %esp
+    # now kernel stack is ready , call the first C function
+    call kern_init
+
+# should never get here
+spin:
+    jmp spin
+
+.data
+.align PGSIZE
+    .globl bootstack
+bootstack:
+    .space KSTACKSIZE
+    .globl bootstacktop
+bootstacktop:
+
+.align 4
+__gdt:
+    SEG_NULL
+    SEG_ASM(STA_X | STA_R, - KERNBASE, 0xFFFFFFFF)      # code segment
+    SEG_ASM(STA_W, - KERNBASE, 0xFFFFFFFF)              # data segment
+__gdtdesc:
+    .word 0x17                                          # sizeof(__gdt) - 1
+    .long REALLOC(__gdt)
+
diff -r -u -P lab6_original/kern/init/init.c lab6/kern/init/init.c
--- lab6_original/kern/init/init.c	2016-02-22 20:41:06.000000000 +0800
+++ lab6/kern/init/init.c	2016-04-25 14:27:29.473182717 +0800
@@ -95,11 +95,22 @@
 static void
 lab1_switch_to_user(void) {
     //LAB1 CHALLENGE 1 : TODO
+	asm volatile(
+		"sub $0x8, %%esp \n"
+		"int %0 \n"
+		"movl %%ebp, %%esp"
+		:
+		:"i"(T_SWITCH_TOU));
 }
 
 static void
 lab1_switch_to_kernel(void) {
     //LAB1 CHALLENGE 1 :  TODO
+	asm volatile(
+		"int %0 \n"
+		"movl %%ebp, %%esp"
+		:
+		:"i"(T_SWITCH_TOK));
 }
 
 static void
diff -r -u -P lab6_original/kern/mm/default_pmm.c lab6/kern/mm/default_pmm.c
--- lab6_original/kern/mm/default_pmm.c	2016-02-22 20:41:06.000000000 +0800
+++ lab6/kern/mm/default_pmm.c	2016-04-25 14:27:29.473182717 +0800
@@ -9,7 +9,7 @@
    usually split, and the remainder added to the list as another free block.
    Please see Page 196~198, Section 8.2 of Yan Wei Min's chinese book "Data Structure -- C programming language"
 */
-// LAB2 EXERCISE 1: YOUR CODE
+// LAB2 EXERCISE 1: 2013011371
 // you should rewrite functions: default_init,default_init_memmap,default_alloc_pages, default_free_pages.
 /*
  * Details of FFMA
@@ -77,7 +77,7 @@
     base->property = n;
     SetPageProperty(base);
     nr_free += n;
-    list_add(&free_list, &(base->page_link));
+    list_add_before(&free_list, &(base->page_link));
 }
 
 static struct Page *
@@ -96,12 +96,14 @@
         }
     }
     if (page != NULL) {
+    	list_entry_t *prev =list_prev(&(page->page_link));
         list_del(&(page->page_link));
         if (page->property > n) {
             struct Page *p = page + n;
             p->property = page->property - n;
-            list_add(&free_list, &(p->page_link));
-    }
+            list_add(prev, &(p->page_link));
+            SetPageProperty(p);
+        }
         nr_free -= n;
         ClearPageProperty(page);
     }
@@ -136,7 +138,9 @@
         }
     }
     nr_free += n;
-    list_add(&free_list, &(base->page_link));
+    le = &free_list;
+    while ((le = list_next(le)) != &free_list && le2page(le,page_link)<base);
+    list_add_before(le, &(base->page_link));
 }
 
 static size_t
diff -r -u -P lab6_original/kern/mm/pmm.c lab6/kern/mm/pmm.c
--- lab6_original/kern/mm/pmm.c	2016-02-22 20:41:06.000000000 +0800
+++ lab6/kern/mm/pmm.c	2016-04-25 14:27:29.477182940 +0800
@@ -229,9 +229,9 @@
     for (i = 0; i < npage; i ++) {
         SetPageReserved(pages + i);
     }
-
+    //point the start address of available memory(note: physical address!)
     uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
-
+    //collect all the free memory(aligned with pages)
     for (i = 0; i < memmap->nr_map; i ++) {
         uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
         if (memmap->map[i].type == E820_ARM) {
@@ -363,7 +363,7 @@
 // return vaule: the kernel virtual address of this pte
 pte_t *
 get_pte(pde_t *pgdir, uintptr_t la, bool create) {
-    /* LAB2 EXERCISE 2: YOUR CODE
+    /* LAB2 EXERCISE 2: 2013011371
      *
      * If you need to visit a physical address, please use KADDR()
      * please read pmm.h for useful macros
@@ -384,18 +384,26 @@
      *   PTE_W           0x002                   // page table/directory entry flags bit : Writeable
      *   PTE_U           0x004                   // page table/directory entry flags bit : User can access
      */
-#if 0
-    pde_t *pdep = NULL;   // (1) find page directory entry
-    if (0) {              // (2) check if entry is not present
-                          // (3) check if creating is needed, then alloc page for page table
-                          // CAUTION: this page is used for page table, not for common data page
-                          // (4) set page reference
-        uintptr_t pa = 0; // (5) get linear address of page
-                          // (6) clear page content using memset
-                          // (7) set page directory entry's permission
+
+    pde_t *pdep = NULL;
+    pdep = pgdir + PDX(la);// (1) find page directory entry
+    bool isPresent = (*pdep) & PTE_P;// (2) check if entry is not present
+    if (!isPresent){
+    	if (!create) return NULL; // (3) check if creating is needed, then alloc page for page table
+    	else{
+    		struct Page *pt_page = alloc_page();
+    		uintptr_t pt_p = page2pa(pt_page);
+    		pte_t *pt_k = page2kva(pt_page);// (5) get linear address of page
+    		set_page_ref(pt_page, 1); // (4) set page reference
+    		memset(pt_k, 0, PGSIZE); // (6) clear page content using memset
+    		*pdep = (pt_p & ~0x0FFF) | PTE_U | PTE_W | PTE_P; // (7) set page directory entry's permission
+    		return pt_k + PTX(la); // (8) return page table entry
+    	}
+    }else{// CAUTION: this page is used for page table, not for common data page
+    	pte_t *pt_p = (pte_t *)((*pdep) & ~0x0FFF);
+    	return KADDR((uintptr_t)(pt_p + PTX(la)));
     }
-    return NULL;          // (8) return page table entry
-#endif
+    return NULL;
 }
 
 //get_page - get related Page struct for linear address la using PDT pgdir
@@ -416,7 +424,7 @@
 //note: PT is changed, so the TLB need to be invalidate 
 static inline void
 page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
-    /* LAB2 EXERCISE 3: YOUR CODE
+    /* LAB2 EXERCISE 3: 2013011371
      *
      * Please check if ptep is valid, and tlb must be manually updated if mapping is updated
      *
@@ -432,15 +440,16 @@
      * DEFINEs:
      *   PTE_P           0x001                   // page table/directory entry flags bit : Present
      */
-#if 0
-    if (0) {                      //(1) check if this page table entry is present
-        struct Page *page = NULL; //(2) find corresponding page to pte
-                                  //(3) decrease page reference
-                                  //(4) and free this page when page reference reachs 0
-                                  //(5) clear second page table entry
-                                  //(6) flush tlb
+	bool isPresent = (*ptep) & PTE_P;
+    if (isPresent) {                      		//(1) check if this page table entry is present
+        struct Page *page = pte2page(*ptep); 	//(2) find corresponding page to pte
+        int new_ref = page_ref_dec(page);    	//(3) decrease page reference
+        if (!new_ref){                          //(4) and free this page when page reference reachs 0
+        	free_page(page);    				//(5) clear second page table entry
+        }										//(6) flush tlb
+        *ptep = 0x0;
+        tlb_invalidate(pgdir, la);
     }
-#endif
 }
 
 void
@@ -497,32 +506,37 @@
         }
         //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
         if (*ptep & PTE_P) {
-            if ((nptep = get_pte(to, start, 1)) == NULL) {
-                return -E_NO_MEM;
-            }
-        uint32_t perm = (*ptep & PTE_USER);
-        //get page from ptep
-        struct Page *page = pte2page(*ptep);
-        // alloc a page for process B
-        struct Page *npage=alloc_page();
-        assert(page!=NULL);
-        assert(npage!=NULL);
-        int ret=0;
-        /* LAB5:EXERCISE2 YOUR CODE
-         * replicate content of page to npage, build the map of phy addr of nage with the linear addr start
-         *
-         * Some Useful MACROs and DEFINEs, you can use them in below implementation.
-         * MACROs or Functions:
-         *    page2kva(struct Page *page): return the kernel vritual addr of memory which page managed (SEE pmm.h)
-         *    page_insert: build the map of phy addr of an Page with the linear addr la
-         *    memcpy: typical memory copy function
-         *
-         * (1) find src_kvaddr: the kernel virtual address of page
-         * (2) find dst_kvaddr: the kernel virtual address of npage
-         * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
-         * (4) build the map of phy addr of  nage with the linear addr start
-         */
-        assert(ret == 0);
+        	if ((nptep = get_pte(to, start, 1)) == NULL) {
+        		return -E_NO_MEM;
+        	}
+        	uint32_t perm = (*ptep & PTE_USER);
+        	//get page from ptep
+        	struct Page *page = pte2page(*ptep);
+        	// alloc a page for process B
+        	struct Page *npage=alloc_page();
+        	assert(page!=NULL);
+        	assert(npage!=NULL);
+        	int ret=0;
+        	/* LAB5:EXERCISE2 2013011371
+        	 * replicate content of page to npage, build the map of phy addr of nage with the linear addr start
+        	 *
+        	 * Some Useful MACROs and DEFINEs, you can use them in below implementation.
+        	 * MACROs or Functions:
+        	 *    page2kva(struct Page *page): return the kernel vritual addr of memory which page managed (SEE pmm.h)
+        	 *    page_insert: build the map of phy addr of an Page with the linear addr la
+        	 *    memcpy: typical memory copy function
+        	 *
+        	 * (1) find src_kvaddr: the kernel virtual address of page
+        	 * (2) find dst_kvaddr: the kernel virtual address of npage
+        	 * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
+        	 * (4) build the map of phy addr of  nage with the linear addr start
+        	 */
+
+        	char* src_kvaddr = page2kva(page);
+        	char* dst_kvaddr = page2kva(npage);
+        	memcpy(dst_kvaddr, src_kvaddr, PGSIZE);
+        	ret = page_insert(to, npage, start, perm);
+        	assert(ret == 0);
         }
         start += PGSIZE;
     } while (start != 0 && start < end);
diff -r -u -P lab6_original/kern/mm/swap_fifo.c lab6/kern/mm/swap_fifo.c
--- lab6_original/kern/mm/swap_fifo.c	2016-02-22 20:41:06.000000000 +0800
+++ lab6/kern/mm/swap_fifo.c	2016-04-25 14:27:29.477182940 +0800
@@ -49,8 +49,9 @@
  
     assert(entry != NULL && head != NULL);
     //record the page access situlation
-    /*LAB3 EXERCISE 2: YOUR CODE*/ 
+    /*LAB3 EXERCISE 2: 2013011371*/
     //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
+    list_add_before(head, entry);
     return 0;
 }
 /*
@@ -64,9 +65,12 @@
          assert(head != NULL);
      assert(in_tick==0);
      /* Select the victim */
-     /*LAB3 EXERCISE 2: YOUR CODE*/ 
+     /*LAB3 EXERCISE 2: 2013011371*/
      //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
      //(2)  set the addr of addr of this page to ptr_page
+     list_entry_t* victim = list_next(head);
+     list_del(victim);
+     *ptr_page = le2page(victim, pra_page_link);
      return 0;
 }
 
diff -r -u -P lab6_original/kern/mm/vmm.c lab6/kern/mm/vmm.c
--- lab6_original/kern/mm/vmm.c	2016-02-22 20:41:06.000000000 +0800
+++ lab6/kern/mm/vmm.c	2016-04-25 14:27:29.477182940 +0800
@@ -451,15 +451,14 @@
     *   mm->pgdir : the PDT of these vma
     *
     */
-#if 0
-    /*LAB3 EXERCISE 1: YOUR CODE*/
-    ptep = ???              //(1) try to find a pte, if pte's PT(Page Table) isn't existed, then create a PT.
-    if (*ptep == 0) {
-                            //(2) if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr
 
+    /*LAB3 EXERCISE 1: 2013011371*/
+    ptep = get_pte(mm->pgdir, addr, 1);              //(1) try to find a pte, if pte's PT(Page Table) isn't existed, then create a PT.
+    if (*ptep == 0) {//(2) if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr
+    	pgdir_alloc_page(mm->pgdir, addr, perm);
     }
     else {
-    /*LAB3 EXERCISE 2: YOUR CODE
+    /*LAB3 EXERCISE 2: 2013011371
     * Now we think this pte is a  swap entry, we should load data from disk to a page with phy addr,
     * and map the phy addr with logical addr, trigger swap manager to record the access situation of this page.
     *
@@ -486,13 +485,19 @@
                                     //(2) According to the mm, addr AND page, setup the map of phy addr <---> logical addr
                                     //(3) make the page swappable.
                                     //(4) [NOTICE]: you myabe need to update your lab3's implementation for LAB5's normal execution.
+            if ((ret = swap_in(mm, addr, &page)) != 0) {
+            	cprintf("swap_in in do_pgfault failed\n");
+            	goto failed;
+            }
+            page_insert(mm->pgdir, page, addr, perm);
+            swap_map_swappable(mm, addr, page, 1);
+            page->pra_vaddr = addr;
         }
         else {
             cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
             goto failed;
         }
    }
-#endif
    ret = 0;
 failed:
     return ret;
diff -r -u -P lab6_original/kern/process/proc.c lab6/kern/process/proc.c
--- lab6_original/kern/process/proc.c	2016-02-22 20:41:06.000000000 +0800
+++ lab6/kern/process/proc.c	2016-04-29 16:22:46.726879848 +0800
@@ -85,42 +85,65 @@
 // alloc_proc - alloc a proc_struct and init all fields of proc_struct
 static struct proc_struct *
 alloc_proc(void) {
-    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
-    if (proc != NULL) {
-    //LAB4:EXERCISE1 YOUR CODE
-    /*
-     * below fields in proc_struct need to be initialized
-     *       enum proc_state state;                      // Process state
-     *       int pid;                                    // Process ID
-     *       int runs;                                   // the running times of Proces
-     *       uintptr_t kstack;                           // Process kernel stack
-     *       volatile bool need_resched;                 // bool value: need to be rescheduled to release CPU?
-     *       struct proc_struct *parent;                 // the parent process
-     *       struct mm_struct *mm;                       // Process's memory management field
-     *       struct context context;                     // Switch here to run process
-     *       struct trapframe *tf;                       // Trap frame for current interrupt
-     *       uintptr_t cr3;                              // CR3 register: the base addr of Page Directroy Table(PDT)
-     *       uint32_t flags;                             // Process flag
-     *       char name[PROC_NAME_LEN + 1];               // Process name
-     */
-     //LAB5 YOUR CODE : (update LAB4 steps)
-    /*
-     * below fields(add in LAB5) in proc_struct need to be initialized	
-     *       uint32_t wait_state;                        // waiting state
-     *       struct proc_struct *cptr, *yptr, *optr;     // relations between processes
-	 */
-     //LAB6 YOUR CODE : (update LAB5 steps)
-    /*
-     * below fields(add in LAB6) in proc_struct need to be initialized
-     *     struct run_queue *rq;                       // running queue contains Process
-     *     list_entry_t run_link;                      // the entry linked in run queue
-     *     int time_slice;                             // time slice for occupying the CPU
-     *     skew_heap_entry_t lab6_run_pool;            // FOR LAB6 ONLY: the entry in the run pool
-     *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process
-     *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)
-     */
-    }
-    return proc;
+	struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
+	if (proc != NULL) {
+		//LAB4:EXERCISE1 2013011371
+		/*
+		 * below fields in proc_struct need to be initialized
+		 *       enum proc_state state;                      // Process state
+		 *       int pid;                                    // Process ID
+		 *       int runs;                                   // the running times of Proces
+		 *       uintptr_t kstack;                           // Process kernel stack
+		 *       volatile bool need_resched;                 // bool value: need to be rescheduled to release CPU?
+		 *       struct proc_struct *parent;                 // the parent process
+		 *       struct mm_struct *mm;                       // Process's memory management field
+		 *       struct context context;                     // Switch here to run process
+		 *       struct trapframe *tf;                       // Trap frame for current interrupt
+		 *       uintptr_t cr3;                              // CR3 register: the base addr of Page Directroy Table(PDT)
+		 *       uint32_t flags;                             // Process flag
+		 *       char name[PROC_NAME_LEN + 1];               // Process name
+		 */
+		//LAB5 2013011371 : (update LAB4 steps)
+		/*
+		 * below fields(add in LAB5) in proc_struct need to be initialized
+		 *       uint32_t wait_state;                        // waiting state
+		 *       struct proc_struct *cptr, *yptr, *optr;     // relations between processes
+		 */
+		//LAB6 2013011371 : (update LAB5 steps)
+		/*
+		 * below fields(add in LAB6) in proc_struct need to be initialized
+		 *     struct run_queue *rq;                       // running queue contains Process
+		 *     list_entry_t run_link;                      // the entry linked in run queue
+		 *     int time_slice;                             // time slice for occupying the CPU
+		 *     skew_heap_entry_t lab6_run_pool;            // FOR LAB6 ONLY: the entry in the run pool
+		 *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process
+		 *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)
+		 */
+		proc->state = PROC_UNINIT;
+		proc->pid = -1;
+		proc->runs = 0;
+		proc->kstack = 0;
+		proc->need_resched = 0;
+		proc->parent = NULL;
+		proc->mm = NULL;
+		struct context nullContext;
+		memset(&nullContext, 0, sizeof(struct context));
+		proc->context = nullContext;
+		proc->tf = NULL;
+		proc->cr3 = boot_cr3;
+		proc->flags = 0;
+		memset(proc->name, 0, sizeof(proc->name));
+
+		proc->wait_state = 0;
+		proc->cptr = proc->optr = proc->yptr = NULL;
+
+		proc->rq = NULL;
+		list_init(&(proc->run_link));
+		proc->time_slice = 0;
+		proc->lab6_run_pool.left = proc->lab6_run_pool.right = proc->lab6_run_pool.parent = NULL;
+		proc->lab6_priority = proc->lab6_stride = 0;
+	}
+	return proc;
 }
 
 // set_proc_name - set the name of proc
@@ -380,7 +403,7 @@
         goto fork_out;
     }
     ret = -E_NO_MEM;
-    //LAB4:EXERCISE2 YOUR CODE
+    //LAB4:EXERCISE2 2013011371
     /*
      * Some Useful MACROs, Functions and DEFINEs, you can use them in below implementation.
      * MACROs or Functions:
@@ -406,14 +429,30 @@
     //    6. call wakeup_proc to make the new child process RUNNABLE
     //    7. set ret vaule using child proc's pid
 
-	//LAB5 YOUR CODE : (update LAB4 steps)
+	//LAB5 2013011371 : (update LAB4 steps)
    /* Some Functions
     *    set_links:  set the relation links of process.  ALSO SEE: remove_links:  lean the relation links of process 
     *    -------------------
 	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
 	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
     */
-	
+    if ((proc = alloc_proc()) == NULL) goto fork_out;
+    proc->parent = current;
+    assert(current->wait_state == 0);//step 1
+    if (setup_kstack(proc) != 0) goto bad_fork_cleanup_proc; //step 2
+    if (copy_mm(clone_flags, proc) != 0) goto bad_fork_cleanup_kstack; //step 3
+    copy_thread(proc, stack, tf); //step 4
+    bool intr_flag;
+    //make following process atomic
+    local_intr_save(intr_flag);//step 5
+    {
+        proc->pid = get_pid();
+        hash_proc(proc);
+        set_links(proc);
+    }
+    local_intr_restore(intr_flag);
+    wakeup_proc(proc); //step 6
+    ret = proc->pid; // step 7
 fork_out:
     return ret;
 
@@ -603,7 +642,7 @@
     //(6) setup trapframe for user environment
     struct trapframe *tf = current->tf;
     memset(tf, 0, sizeof(struct trapframe));
-    /* LAB5:EXERCISE1 YOUR CODE
+    /* LAB5:EXERCISE1 2013011371
      * should set tf_cs,tf_ds,tf_es,tf_ss,tf_esp,tf_eip,tf_eflags
      * NOTICE: If we set trapframe correctly, then the user level process can return to USER MODE from kernel. So
      *          tf_cs should be USER_CS segment (see memlayout.h)
@@ -612,6 +651,11 @@
      *          tf_eip should be the entry point of this binary program (elf->e_entry)
      *          tf_eflags should be set to enable computer to produce Interrupt
      */
+    tf->tf_cs = USER_CS;
+    tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
+    tf->tf_esp = USTACKTOP;
+    tf->tf_eip = elf->e_entry;
+    tf->tf_eflags |= FL_IF;
     ret = 0;
 out:
     return ret;
diff -r -u -P lab6_original/kern/schedule/default_sched.c lab6/kern/schedule/default_sched.c
--- lab6_original/kern/schedule/default_sched.c	2016-02-22 20:41:06.000000000 +0800
+++ lab6/kern/schedule/default_sched.c	2016-04-25 16:59:22.823168176 +0800
@@ -4,55 +4,154 @@
 #include <assert.h>
 #include <default_sched.h>
 
-static void
-RR_init(struct run_queue *rq) {
-    list_init(&(rq->run_list));
-    rq->proc_num = 0;
+#define USE_SKEW_HEAP 1
+
+/* You should define the BigStride constant here*/
+/* LAB6: YOUR CODE */
+#define BIG_STRIDE 0x7FFFFFFF   /* you should give a value, and is ??? */
+
+/* The compare function for two skew_heap_node_t's and the
+ * corresponding procs*/
+static int
+proc_stride_comp_f(void *a, void *b)
+{
+     struct proc_struct *p = le2proc(a, lab6_run_pool);
+     struct proc_struct *q = le2proc(b, lab6_run_pool);
+     int32_t c = p->lab6_stride - q->lab6_stride;
+     if (c > 0) return 1;
+     else if (c == 0) return 0;
+     else return -1;
 }
 
+/*
+ * stride_init initializes the run-queue rq with correct assignment for
+ * member variables, including:
+ *
+ *   - run_list: should be a empty list after initialization.
+ *   - lab6_run_pool: NULL
+ *   - proc_num: 0
+ *   - max_time_slice: no need here, the variable would be assigned by the caller.
+ *
+ * hint: see libs/list.h for routines of the list structures.
+ */
 static void
-RR_enqueue(struct run_queue *rq, struct proc_struct *proc) {
-    assert(list_empty(&(proc->run_link)));
-    list_add_before(&(rq->run_list), &(proc->run_link));
-    if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
-        proc->time_slice = rq->max_time_slice;
-    }
-    proc->rq = rq;
-    rq->proc_num ++;
+stride_init(struct run_queue *rq) {
+     /* LAB6: 2103011371
+      * (1) init the ready process list: rq->run_list
+      * (2) init the run pool: rq->lab6_run_pool
+      * (3) set number of process: rq->proc_num to 0       
+      */
+	list_init(&(rq->run_list));
+	rq->lab6_run_pool = NULL;
+	rq->proc_num = 0;
 }
 
+/*
+ * stride_enqueue inserts the process ``proc'' into the run-queue
+ * ``rq''. The procedure should verify/initialize the relevant members
+ * of ``proc'', and then put the ``lab6_run_pool'' node into the
+ * queue(since we use priority queue here). The procedure should also
+ * update the meta date in ``rq'' structure.
+ *
+ * proc->time_slice denotes the time slices allocation for the
+ * process, which should set to rq->max_time_slice.
+ * 
+ * hint: see libs/skew_heap.h for routines of the priority
+ * queue structures.
+ */
 static void
-RR_dequeue(struct run_queue *rq, struct proc_struct *proc) {
-    assert(!list_empty(&(proc->run_link)) && proc->rq == rq);
-    list_del_init(&(proc->run_link));
-    rq->proc_num --;
+stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
+     /* LAB6: 2013011371
+      * (1) insert the proc into rq correctly
+      * NOTICE: you can use skew_heap or list. Important functions
+      *         skew_heap_insert: insert a entry into skew_heap
+      *         list_add_before: insert  a entry into the last of list   
+      * (2) recalculate proc->time_slice
+      * (3) set proc->rq pointer to rq
+      * (4) increase rq->proc_num
+      */
+	rq->lab6_run_pool = skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
+	if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
+		proc->time_slice = rq->max_time_slice;
+	}
+	proc->rq = rq;
+	rq->proc_num++;
 }
 
+/*
+ * stride_dequeue removes the process ``proc'' from the run-queue
+ * ``rq'', the operation would be finished by the skew_heap_remove
+ * operations. Remember to update the ``rq'' structure.
+ *
+ * hint: see libs/skew_heap.h for routines of the priority
+ * queue structures.
+ */
+static void
+stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
+     /* LAB6: 2013011371
+      * (1) remove the proc from rq correctly
+      * NOTICE: you can use skew_heap or list. Important functions
+      *         skew_heap_remove: remove a entry from skew_heap
+      *         list_del_init: remove a entry from the  list
+      */
+	rq->lab6_run_pool = skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
+	rq->proc_num--;
+}
+/*
+ * stride_pick_next pick the element from the ``run-queue'', with the
+ * minimum value of stride, and returns the corresponding process
+ * pointer. The process pointer would be calculated by macro le2proc,
+ * see kern/process/proc.h for definition. Return NULL if
+ * there is no process in the queue.
+ *
+ * When one proc structure is selected, remember to update the stride
+ * property of the proc. (stride += BIG_STRIDE / priority)
+ *
+ * hint: see libs/skew_heap.h for routines of the priority
+ * queue structures.
+ */
 static struct proc_struct *
-RR_pick_next(struct run_queue *rq) {
-    list_entry_t *le = list_next(&(rq->run_list));
-    if (le != &(rq->run_list)) {
-        return le2proc(le, run_link);
-    }
-    return NULL;
+stride_pick_next(struct run_queue *rq) {
+     /* LAB6: 2013011371
+      * (1) get a  proc_struct pointer p  with the minimum value of stride
+             (1.1) If using skew_heap, we can use le2proc get the p from rq->lab6_run_poll
+             (1.2) If using list, we have to search list to find the p with minimum stride value
+      * (2) update p;s stride value: p->lab6_stride
+      * (3) return p
+      */
+	if (rq->lab6_run_pool == NULL) return NULL;
+	struct proc_struct *next_proc = le2proc(rq->lab6_run_pool, lab6_run_pool);
+	if (next_proc->lab6_priority == 0 ) next_proc->lab6_stride += BIG_STRIDE;
+	else{
+		next_proc->lab6_stride += BIG_STRIDE/next_proc->lab6_priority;
+	}
+	return next_proc;
 }
 
+/*
+ * stride_proc_tick works with the tick event of current process. You
+ * should check whether the time slices for current process is
+ * exhausted and update the proc struct ``proc''. proc->time_slice
+ * denotes the time slices left for current
+ * process. proc->need_resched is the flag variable for process
+ * switching.
+ */
 static void
-RR_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
-    if (proc->time_slice > 0) {
-        proc->time_slice --;
-    }
-    if (proc->time_slice == 0) {
-        proc->need_resched = 1;
-    }
+stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
+     /* LAB6: 2013011371 */
+	if (proc->time_slice > 0){
+		proc->time_slice--;
+	}
+	if (proc->time_slice == 0){
+		proc->need_resched = 1;
+	}
 }
 
 struct sched_class default_sched_class = {
-    .name = "RR_scheduler",
-    .init = RR_init,
-    .enqueue = RR_enqueue,
-    .dequeue = RR_dequeue,
-    .pick_next = RR_pick_next,
-    .proc_tick = RR_proc_tick,
+     .name = "stride_scheduler",
+     .init = stride_init,
+     .enqueue = stride_enqueue,
+     .dequeue = stride_dequeue,
+     .pick_next = stride_pick_next,
+     .proc_tick = stride_proc_tick,
 };
-
diff -r -u -P lab6_original/kern/schedule/default_sched_RR_c lab6/kern/schedule/default_sched_RR_c
--- lab6_original/kern/schedule/default_sched_RR_c	1970-01-01 08:00:00.000000000 +0800
+++ lab6/kern/schedule/default_sched_RR_c	2016-02-21 23:21:20.062042303 +0800
@@ -0,0 +1,58 @@
+#include <defs.h>
+#include <list.h>
+#include <proc.h>
+#include <assert.h>
+#include <default_sched.h>
+
+static void
+RR_init(struct run_queue *rq) {
+    list_init(&(rq->run_list));
+    rq->proc_num = 0;
+}
+
+static void
+RR_enqueue(struct run_queue *rq, struct proc_struct *proc) {
+    assert(list_empty(&(proc->run_link)));
+    list_add_before(&(rq->run_list), &(proc->run_link));
+    if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
+        proc->time_slice = rq->max_time_slice;
+    }
+    proc->rq = rq;
+    rq->proc_num ++;
+}
+
+static void
+RR_dequeue(struct run_queue *rq, struct proc_struct *proc) {
+    assert(!list_empty(&(proc->run_link)) && proc->rq == rq);
+    list_del_init(&(proc->run_link));
+    rq->proc_num --;
+}
+
+static struct proc_struct *
+RR_pick_next(struct run_queue *rq) {
+    list_entry_t *le = list_next(&(rq->run_list));
+    if (le != &(rq->run_list)) {
+        return le2proc(le, run_link);
+    }
+    return NULL;
+}
+
+static void
+RR_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
+    if (proc->time_slice > 0) {
+        proc->time_slice --;
+    }
+    if (proc->time_slice == 0) {
+        proc->need_resched = 1;
+    }
+}
+
+struct sched_class default_sched_class = {
+    .name = "RR_scheduler",
+    .init = RR_init,
+    .enqueue = RR_enqueue,
+    .dequeue = RR_dequeue,
+    .pick_next = RR_pick_next,
+    .proc_tick = RR_proc_tick,
+};
+
Only in lab6_original/kern/schedule: default_sched_stride_c
diff -r -u -P lab6_original/kern/schedule/sched.c lab6/kern/schedule/sched.c
--- lab6_original/kern/schedule/sched.c	2016-02-22 20:41:06.000000000 +0800
+++ lab6/kern/schedule/sched.c	2016-04-25 17:00:06.850251241 +0800
@@ -30,7 +30,7 @@
     return sched_class->pick_next(rq);
 }
 
-static void
+extern void
 sched_class_proc_tick(struct proc_struct *proc) {
     if (proc != idleproc) {
         sched_class->proc_tick(rq, proc);
@@ -82,11 +82,13 @@
     local_intr_save(intr_flag);
     {
         current->need_resched = 0;
+        //cprintf("time up: %s %d\n", current->name, current->pid);
         if (current->state == PROC_RUNNABLE) {
             sched_class_enqueue(current);
         }
         if ((next = sched_class_pick_next()) != NULL) {
             sched_class_dequeue(next);
+            //cprintf("next proc: %s %d\n", next->name, next->pid);
         }
         if (next == NULL) {
             next = idleproc;
diff -r -u -P lab6_original/kern/trap/trap.c lab6/kern/trap/trap.c
--- lab6_original/kern/trap/trap.c	2016-02-22 20:41:06.000000000 +0800
+++ lab6/kern/trap/trap.c	2016-04-25 15:56:42.045557040 +0800
@@ -42,7 +42,7 @@
 /* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
 void
 idt_init(void) {
-     /* LAB1 YOUR CODE : STEP 2 */
+     /* LAB1 2013011371 : STEP 2 */
      /* (1) Where are the entry addrs of each Interrupt Service Routine (ISR)?
       *     All ISR's entry addrs are stored in __vectors. where is uintptr_t __vectors[] ?
       *     __vectors[] is in kern/trap/vector.S which is produced by tools/vector.c
@@ -54,9 +54,16 @@
       *     You don't know the meaning of this instruction? just google it! and check the libs/x86.h to know more.
       *     Notice: the argument of lidt is idt_pd. try to find it!
       */
-     /* LAB5 YOUR CODE */ 
+     /* LAB5 2013011371 */
      //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
      //so you should setup the syscall interrupt gate in here
+	extern uintptr_t __vectors[];
+	for (int i=0; i<sizeof(idt)/sizeof(struct gatedesc); i++){
+		SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
+	}
+	SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
+	SETGATE(idt[T_SWITCH_TOK], 1, GD_KTEXT, __vectors[T_SWITCH_TOK], DPL_USER);
+	lidt(&idt_pd);
 }
 
 static const char *
@@ -182,6 +189,7 @@
 
 static volatile int in_swap_tick_event = 0;
 extern struct mm_struct *check_mm_struct;
+extern void sched_class_proc_tick(struct proc_struct *proc);
 
 static void
 trap_dispatch(struct trapframe *tf) {
@@ -214,22 +222,28 @@
     LAB3 : If some page replacement algorithm(such as CLOCK PRA) need tick to change the priority of pages,
     then you can add code here. 
 #endif
-        /* LAB1 YOUR CODE : STEP 3 */
+        /* LAB1 2013011371 : STEP 3 */
         /* handle the timer interrupt */
         /* (1) After a timer interrupt, you should record this event using a global variable (increase it), such as ticks in kern/driver/clock.c
          * (2) Every TICK_NUM cycle, you can print some info using a funciton, such as print_ticks().
          * (3) Too Simple? Yes, I think so!
          */
-        /* LAB5 YOUR CODE */
+        /* LAB5 2013011371 */
         /* you should upate you lab1 code (just add ONE or TWO lines of code):
          *    Every TICK_NUM cycle, you should set current process's current->need_resched = 1
          */
-        /* LAB6 YOUR CODE */
+        /* LAB6 2013011371 */
         /* you should upate you lab5 code
          * IMPORTANT FUNCTIONS:
 	     * sched_class_proc_tick
-         */
-        break;
+	     */
+		ticks++;
+    	sched_class_proc_tick(current);
+//    	if (ticks % TICK_NUM == 0){
+//    		assert(current != NULL);
+//    		sched_class_proc_tick(current);
+//    	}
+    	break;
     case IRQ_OFFSET + IRQ_COM1:
         c = cons_getc();
         cprintf("serial [%03d] %c\n", c, c);
@@ -238,11 +252,19 @@
         c = cons_getc();
         cprintf("kbd [%03d] %c\n", c, c);
         break;
-    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
+    //LAB1 CHALLENGE 1 : 2013011371 you should modify below codes.
     case T_SWITCH_TOU:
+    	tf->tf_cs = USER_CS;
+    	tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
+    	tf->tf_eflags |= (3<<12);
+    	break;
     case T_SWITCH_TOK:
-        panic("T_SWITCH_** ??\n");
-        break;
+    	tf->tf_cs = KERNEL_CS;
+    	tf->tf_ds = tf->tf_es = KERNEL_DS;
+    	tf->tf_ss = KERNEL_DS;
+    	tf->tf_eflags &= ~(3<<12);
+    	//panic("T_SWITCH_** ??\n");
+    	break;
     case IRQ_OFFSET + IRQ_IDE1:
     case IRQ_OFFSET + IRQ_IDE2:
         /* do nothing */
diff -r -u -P lab6_original/kern/trap/trap.c~ lab6/kern/trap/trap.c~
--- lab6_original/kern/trap/trap.c~	1970-01-01 08:00:00.000000000 +0800
+++ lab6/kern/trap/trap.c~	2016-04-25 14:27:29.481183163 +0800
@@ -0,0 +1,206 @@
+#include <defs.h>
+#include <mmu.h>
+#include <memlayout.h>
+#include <clock.h>
+#include <trap.h>
+#include <x86.h>
+#include <stdio.h>
+#include <assert.h>
+#include <console.h>
+#include <kdebug.h>
+
+#define TICK_NUM 100
+
+static void print_ticks() {
+    cprintf("%d ticks\n",TICK_NUM);
+#ifdef DEBUG_GRADE
+    cprintf("End of Test.\n");
+    panic("EOT: kernel seems ok.");
+#endif
+}
+
+/* *
+ * Interrupt descriptor table:
+ *
+ * Must be built at run time because shifted function addresses can't
+ * be represented in relocation records.
+ * */
+static struct gatedesc idt[256] = {{0}};
+
+static struct pseudodesc idt_pd = {
+    sizeof(idt) - 1, (uintptr_t)idt
+};
+
+/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
+void
+idt_init(void) {
+     /* 2013011371 : STEP 2 */
+     /* (1) Where are the entry addrs of each Interrupt Service Routine (ISR)?
+      *     All ISR's entry addrs are stored in __vectors. where is uintptr_t __vectors[] ?
+      *     __vectors[] is in kern/trap/vector.S which is produced by tools/vector.c
+      *     (try "make" command in lab1, then you will find vector.S in kern/trap DIR)
+      *     You can use  "extern uintptr_t __vectors[];" to define this extern variable which will be used later.
+      * (2) Now you should setup the entries of ISR in Interrupt Description Table (IDT).
+      *     Can you see idt[256] in this file? Yes, it's IDT! you can use SETGATE macro to setup each item of IDT
+      * (3) After setup the contents of IDT, you will let CPU know where is the IDT by using 'lidt' instruction.
+      *     You don't know the meaning of this instruction? just google it! and check the libs/x86.h to know more.
+      *     Notice: the argument of lidt is idt_pd. try to find it!
+      */
+	extern uintptr_t __vectors[];
+	for (int i=0; i<sizeof(idt)/sizeof(struct gatedesc); i++){
+		SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
+	}
+	SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
+	SETGATE(idt[T_SWITCH_TOK], 1, GD_KTEXT, __vectors[T_SWITCH_TOK], DPL_USER);
+	lidt(&idt_pd);
+}
+
+static const char *
+trapname(int trapno) {
+    static const char * const excnames[] = {
+        "Divide error",
+        "Debug",
+        "Non-Maskable Interrupt",
+        "Breakpoint",
+        "Overflow",
+        "BOUND Range Exceeded",
+        "Invalid Opcode",
+        "Device Not Available",
+        "Double Fault",
+        "Coprocessor Segment Overrun",
+        "Invalid TSS",
+        "Segment Not Present",
+        "Stack Fault",
+        "General Protection",
+        "Page Fault",
+        "(unknown trap)",
+        "x87 FPU Floating-Point Error",
+        "Alignment Check",
+        "Machine-Check",
+        "SIMD Floating-Point Exception"
+    };
+
+    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
+        return excnames[trapno];
+    }
+    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
+        return "Hardware Interrupt";
+    }
+    return "(unknown trap)";
+}
+
+/* trap_in_kernel - test if trap happened in kernel */
+bool
+trap_in_kernel(struct trapframe *tf) {
+    return (tf->tf_cs == (uint16_t)KERNEL_CS);
+}
+
+static const char *IA32flags[] = {
+    "CF", NULL, "PF", NULL, "AF", NULL, "ZF", "SF",
+    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
+    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
+};
+
+void
+print_trapframe(struct trapframe *tf) {
+    cprintf("trapframe at %p\n", tf);
+    print_regs(&tf->tf_regs);
+    cprintf("  ds   0x----%04x\n", tf->tf_ds);
+    cprintf("  es   0x----%04x\n", tf->tf_es);
+    cprintf("  fs   0x----%04x\n", tf->tf_fs);
+    cprintf("  gs   0x----%04x\n", tf->tf_gs);
+    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
+    cprintf("  err  0x%08x\n", tf->tf_err);
+    cprintf("  eip  0x%08x\n", tf->tf_eip);
+    cprintf("  cs   0x----%04x\n", tf->tf_cs);
+    cprintf("  flag 0x%08x ", tf->tf_eflags);
+
+    int i, j;
+    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
+        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
+            cprintf("%s,", IA32flags[i]);
+        }
+    }
+    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
+
+    if (!trap_in_kernel(tf)) {
+        cprintf("  esp  0x%08x\n", tf->tf_esp);
+        cprintf("  ss   0x----%04x\n", tf->tf_ss);
+    }
+}
+
+void
+print_regs(struct pushregs *regs) {
+    cprintf("  edi  0x%08x\n", regs->reg_edi);
+    cprintf("  esi  0x%08x\n", regs->reg_esi);
+    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
+    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
+    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
+    cprintf("  edx  0x%08x\n", regs->reg_edx);
+    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
+    cprintf("  eax  0x%08x\n", regs->reg_eax);
+}
+
+/* trap_dispatch - dispatch based on what type of trap occurred */
+static void
+trap_dispatch(struct trapframe *tf) {
+    char c;
+
+    switch (tf->tf_trapno) {
+    case IRQ_OFFSET + IRQ_TIMER:
+        /* 2013011371 : STEP 3 */
+        /* handle the timer interrupt */
+        /* (1) After a timer interrupt, you should record this event using a global variable (increase it), such as ticks in kern/driver/clock.c
+         * (2) Every TICK_NUM cycle, you can print some info using a funciton, such as print_ticks().
+         * (3) Too Simple? Yes, I think so!
+         */
+		ticks++;
+		if (ticks % TICK_NUM == 0){
+			print_ticks();
+		}
+        break;
+    case IRQ_OFFSET + IRQ_COM1:
+        c = cons_getc();
+        cprintf("serial [%03d] %c\n", c, c);
+        break;
+    case IRQ_OFFSET + IRQ_KBD:
+        c = cons_getc();
+        cprintf("kbd [%03d] %c\n", c, c);
+        break;
+    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
+    case T_SWITCH_TOU:
+    	tf->tf_cs = USER_CS;
+    	tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
+    	tf->tf_eflags |= (3<<12);
+    	break;
+    case T_SWITCH_TOK:
+    	tf->tf_cs = KERNEL_CS;
+    	tf->tf_ds = tf->tf_es = KERNEL_DS;
+    	tf->tf_ss = KERNEL_DS;
+    	tf->tf_eflags &= ~(3<<12);
+        //panic("T_SWITCH_** ??\n");
+        break;
+    case IRQ_OFFSET + IRQ_IDE1:
+    case IRQ_OFFSET + IRQ_IDE2:
+        /* do nothing */
+        break;
+    default:
+        // in kernel, it must be a mistake
+        if ((tf->tf_cs & 3) == 0) {
+            print_trapframe(tf);
+            panic("unexpected trap in kernel.\n");
+        }
+    }
+}
+
+/* *
+ * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
+ * the code in kern/trap/trapentry.S restores the old CPU state saved in the
+ * trapframe and then uses the iret instruction to return from the exception.
+ * */
+void
+trap(struct trapframe *tf) {
+    // dispatch based on what type of trap occurred
+    trap_dispatch(tf);
+}
+
diff -r -u -P lab6_original/lab6_szy2014.md lab6/lab6_szy2014.md
--- lab6_original/lab6_szy2014.md	1970-01-01 08:00:00.000000000 +0800
+++ lab6/lab6_szy2014.md	2016-04-29 16:13:11.000000000 +0800
@@ -0,0 +1,100 @@
+#OS Lab6 Report
+
+##练习1:使用 Round Robin 调度算法
+####1.请理解并分析sched_calss中各个函数指针的用法，并接合Round Robin 调度算法描ucore的调度执行过程
+>sched_class是一个用C模拟的抽象调度类，它采用函数指针的方式使得调度类的结构和具体实现相分离，类结构如下
+
+```
+struct sched_class {
+    // the name of sched_class
+    const char *name;
+    // Init the run queue
+    void (*init)(struct run_queue *rq);
+    // put the proc into runqueue, and this function must be called with rq_lock
+    void (*enqueue)(struct run_queue *rq, struct proc_struct *proc);
+    // get the proc out runqueue, and this function must be called with rq_lock
+    void (*dequeue)(struct run_queue *rq, struct proc_struct *proc);
+    // choose the next runnable task
+    struct proc_struct *(*pick_next)(struct run_queue *rq);
+    // dealer of the time-tick
+    void (*proc_tick)(struct run_queue *rq, struct proc_struct *proc);
+};
+```
+init函数主要用于调度类的初始化，需要将一个具体实现的调度类赋值给这个统一的接口，在练习一里这个调度类是Round Robin调度类，此外它还需要完成就绪队列的初始化，以及时间片等一些相关参数的设置工作；enqueue函数负责就绪队列的入队，当一个进程因为时间片用完或者其他原因进入就绪队列；dequeue正好相反；pick_next用来在调度的时候从就绪队列中选出下一个应该执行的进程；proc_tick函数用于调度类对时钟中断的响应，有一些算法会根据进程的执行时间来调整参数；
+`对于Round Robin算法，就绪队列是按照FIFO的顺序组织的，enqueue只是简单地将进程加入队列的尾部，每一个进程都维护了一个时间片；RR调度器维护当前runnable进程的有序运行队列。当前进程的时间片用完之后，调度器将当前进程放置到运行队列的尾部(enqueue)，再从其头部取出进程进行调度(pick_next),响应时钟中断的函数proc_tick在每次中断时会将当前进程的时间片减一，如果到0了就会触发调度`
+####2.请在实验报告中简要说明如何设计实现”多级反馈队列调度算法“
+>设置多个就绪队列，并为各个队列赋予不同的优先级。第一个队列的优先级最高，第二队次之，其余队列优先级依次降低。仅当第1～i-1个队列均为空时，操作系统调度器才会调度第i个队列中的进程运行。赋予各个队列中进程执行时间片的大小也各不相同。在优先级越高的队列中，每个进程的执行时间片就越小或越大。
+当一个就绪进程需要链入就绪队列时，操作系统首先将它放入第一队列的末尾，按FCFS的原则排队等待调度。若轮到该进程执行且在一个时间片结束时尚未完成，则操作系统调度器便将该进程转入第二队列的末尾，再同样按先来先服务原则等待调度执行。如此下去，当一个长进程从第一队列降到最后一个队列后，在最后一个队列中，可使用FCFS或RR调度算法来运行处于此队列中的进程。
+如果处理机正在第i（i>1）队列中为某进程服务时，又有新进程进入第k（k<i）的队列，则新进程将抢占正在运行进程的处理机，即由调度程序把正在执行进程放回第i队列末尾，重新将处理机分配给处于第k队列的新进程。
+
+---
+##练习2：实现 Stride Scheduling 调度算法
+####1.设计思路
+>首先为每个进程多维护两个数据域stride和priority，stride可以大致描述为进程当前执行的长度，priority是每个进程的优先级；SS调度器的核心思想就是选取stride最小的进程继续执行，每个执行的进程都会在当前的stride上加上一个步进值pass，pass与priority成反比，也就是说优先级越高的进程它执行的机会就越多，初始化过程和RR基本一致（除了在lab6中使用了斜堆而不是简单的队列），enqueue函数根据当前进程的stride把它插入斜堆，使斜堆保持小根堆的性质（根节点最小），proc_tick函数还是简单的将当前进程的时间片减一，若减为0就触发调度，pick_next简单地将小根堆的堆顶取出作为下一个执行的进程。
+
+####2.实现过程  
+>首先把RR调度器替换为SS调度器，初始化时加入斜堆的初始化
+
+```
+list_init(&(rq->run_list));
+rq->lab6_run_pool = NULL;
+rq->proc_num = 0;
+```
+>入队函数enqueue调用斜堆的插入，把当前的进程插入斜堆之中，并对进程池计数
+
+```
+rq->lab6_run_pool = skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
+rq->proc_num++;
+```
+>出对函数dequeue调用斜堆的删除，把当前进程从斜堆中删除，同样维护进程池计数
+
+```
+rq->lab6_run_pool = skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
+rq->proc_num--;
+```
+>选择下一个运行的进程时，只要从斜堆的顶取出进程即可（由小根堆的性质保证），然后更新进程的stride值
+
+```
+struct proc_struct *next_proc = le2proc(rq->lab6_run_pool, lab6_run_pool);
+if (next_proc->lab6_priority == 0 ) next_proc->lab6_stride += BIG_STRIDE;
+else{
+	next_proc->lab6_stride += BIG_STRIDE/next_proc->lab6_priority;
+}
+```
+>在处理时钟中断时，SS的处理方式与RR是一样的，只是对当前进程的时间片进行修改不再赘述。
+
+---
+##与参考答案实现上的区别
+####练习二
+>没有太大的区别
+
+---
+##实验原理（重要部分简析）
+###实验中涉及的原理
+####1.进程的状态变化
+```
+1.进程首先在 cpu 初始化或者 sys_fork 的时候被创建，当为该进程分配了一个进程控制块之后，该进程进入 uninit态(在proc.c 中 alloc_proc)。
+2.当进程完全完成初始化之后，该进程转为runnable态。
+3.当到达调度点时，由调度器 sched_class 根据运行队列rq的内容来判断一个进程是否应该被运行，即把处于runnable态的进程转换成running状态，从而占用CPU执行。
+4.running态的进程通过wait等系统调用被阻塞，进入sleeping态。
+5.sleeping态的进程被wakeup变成runnable态的进程。
+6.running态的进程主动 exit 变成zombie态，然后由其父进程完成对其资源的最后释放，子进程的进程控制块成为unused。
+7.所有从runnable态变成其他状态的进程都要出运行队列，反之，被放入某个运行队列中。
+```
+####2.进程切换过程
+```
+首先在执行某进程A的用户代码时，出现了一个 trap (例如是一个外设产生的中断)，这个时候就会从进程A的用户态切换到内核态(过程(1))，并且保存好进程A的trapframe；当内核态处理中断时发现需要进行进程切换时，ucore要通过schedule函数选择下一个将占用CPU执行的进程（即进程B），然后会调用proc_run函数，proc_run函数进一步调用switch_to函数，切换到进程B的内核态(过程(2))，继续进程B上一次在内核态的操作，并通过iret指令，最终将执行权转交给进程B的用户空间(过程(3))。
+
+当进程B由于某种原因发生中断之后(过程(4))，会从进程B的用户态切换到内核态，并且保存好进程B的trapframe；当内核态处理中断时发现需要进行进程切换时，即需要切换到进程A，ucore再次切换到进程A(过程(5))，会执行进程A上一次在内核调用schedule (具体还要跟踪到 switch_to 函数)函数返回后的下一行代码，这行代码当然还是在进程A的上一次中断处理流程中。最后当进程A的中断处理完毕的时候，执行权又会反交给进程A的用户代码(过程(6))。这就是在只有两个进程的情况下，进程切换间的大体流程。
+```
+
+####3.进程调度的时机
+```
+正在执行的进程执行完毕，需要选择新的就绪进程执行。
+正在执行的进程调用相关系统调用（包括与I/O操作，同步互斥操作等相关的系统调用）导致需等待某事件发生或等待资源可用，从而将白己阻塞起来进入阻塞状态。
+正在执行的进程主动调用放弃CPU的系统调用，导致自己的状态为就绪态，且把自己重新放到就绪队列中。
+等待事件发生或资源可用的进程等待队列，从而导致进程从阻塞态回到就绪态，并可参与到调度中。
+正在执行的进程的时间片已经用完，致自己的状态为就绪态，且把自己重新放到就绪队列中。
+在执行完系统调用后准备返回用户进程前的时刻，可调度选择一新用户进程执行
+就绪队列中某进程的优先级变得高于当前执行进程的优先级，从而也将引发进程调度。
+```
\ No newline at end of file
diff -r -u -P lab6_original/.matrix.log lab6/.matrix.log
--- lab6_original/.matrix.log	1970-01-01 08:00:00.000000000 +0800
+++ lab6/.matrix.log	2016-04-29 16:22:46.650341085 +0800
@@ -0,0 +1,146 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc010b8fd (phys)
+  edata  0xc01adcdc (phys)
+  end    0xc01b0e58 (phys)
+Kernel executable memory footprint: 708KB
+ebp:0xc012bf48 eip:0xc0100b4f args:0x00010094 0x00010094 0xc012bf78 0xc01000c5 
+    kern/debug/kdebug.c:352: print_stackframe+21
+ebp:0xc012bf58 eip:0xc0100e49 args:0x00000000 0x00000000 0x00000000 0xc012bfc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc012bf78 eip:0xc01000c5 args:0x00000000 0xc012bfa0 0xffff0000 0xc012bfa4 
+    kern/init/init.c:59: grade_backtrace2+19
+ebp:0xc012bf98 eip:0xc01000e7 args:0x00000000 0xffff0000 0xc012bfc4 0x0000002a 
+    kern/init/init.c:64: grade_backtrace1+27
+ebp:0xc012bfb8 eip:0xc0100104 args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:69: grade_backtrace0+19
+ebp:0xc012bfd8 eip:0xc0100125 args:0x00000000 0x00000000 0x00000000 0xc010b900 
+    kern/init/init.c:74: grade_backtrace+26
+ebp:0xc012bff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:33: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31819
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "matrix".
+fork ok.
+pid 3 is running (1000 times)!.
+pid 3 done!.
+pid 5 is running (1100 times)!.
+pid 7 is running (4600 times)!.
+pid 4 is running (1000 times)!.
+pid 4 done!.
+pid 9 is running (20600 times)!.
+pid 11 is running (2600 times)!.
+pid 13 is running (37100 times)!.
+pid 15 is running (23500 times)!.
+pid 17 is running (23500 times)!.
+pid 19 is running (33400 times)!.
+pid 21 is running (2600 times)!.
+pid 22 is running (26600 times)!.
+pid 6 is running (1900 times)!.
+pid 8 is running (11000 times)!.
+pid 10 is running (37100 times)!.
+pid 12 is running (13100 times)!.
+pid 14 is running (4600 times)!.
+pid 16 is running (2600 times)!.
+pid 18 is running (4600 times)!.
+pid 20 is running (13100 times)!.
+pid 23 is running (13100 times)!.
+pid 21 done!.
+pid 6 done!.
+pid 16 done!.
+pid 5 done!.
+pid 11 done!.
+pid 18 done!.
+pid 14 done!.
+pid 7 done!.
+pid 8 done!.
+pid 20 done!.
+pid 12 done!.
+pid 23 done!.
+pid 9 done!.
+pid 15 done!.
+pid 17 done!.
+pid 22 done!.
+pid 19 done!.
+pid 10 done!.
+pid 13 done!.
+matrix pass.
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:476:
+    initproc exit.
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
diff -r -u -P lab6_original/obj/boot/bootasm.d lab6/obj/boot/bootasm.d
--- lab6_original/obj/boot/bootasm.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/boot/bootasm.d	2016-04-29 16:22:06.713112659 +0800
@@ -0,0 +1 @@
+obj/boot/bootasm.o obj/boot/bootasm.d: boot/bootasm.S boot/asm.h
Binary files lab6_original/obj/boot/bootasm.o and lab6/obj/boot/bootasm.o differ
diff -r -u -P lab6_original/obj/boot/bootmain.d lab6/obj/boot/bootmain.d
--- lab6_original/obj/boot/bootmain.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/boot/bootmain.d	2016-04-29 16:22:06.721078588 +0800
@@ -0,0 +1,2 @@
+obj/boot/bootmain.o obj/boot/bootmain.d: boot/bootmain.c libs/defs.h \
+ libs/x86.h libs/elf.h
Binary files lab6_original/obj/boot/bootmain.o and lab6/obj/boot/bootmain.o differ
diff -r -u -P lab6_original/obj/bootblock.asm lab6/obj/bootblock.asm
--- lab6_original/obj/bootblock.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/bootblock.asm	2016-04-29 16:22:07.868135443 +0800
@@ -0,0 +1,402 @@
+
+obj/bootblock.o:     file format elf32-i386
+
+
+Disassembly of section .startup:
+
+00007c00 <start>:
+
+# start address should be 0:7c00, in real mode, the beginning address of the running bootloader
+.globl start
+start:
+.code16                                             # Assemble for 16-bit mode
+    cli                                             # Disable interrupts
+    7c00:	fa                   	cli    
+    cld                                             # String operations increment
+    7c01:	fc                   	cld    
+
+    # Set up the important data segment registers (DS, ES, SS).
+    xorw %ax, %ax                                   # Segment number zero
+    7c02:	31 c0                	xor    %eax,%eax
+    movw %ax, %ds                                   # -> Data Segment
+    7c04:	8e d8                	mov    %eax,%ds
+    movw %ax, %es                                   # -> Extra Segment
+    7c06:	8e c0                	mov    %eax,%es
+    movw %ax, %ss                                   # -> Stack Segment
+    7c08:	8e d0                	mov    %eax,%ss
+
+00007c0a <seta20.1>:
+    # Enable A20:
+    #  For backwards compatibility with the earliest PCs, physical
+    #  address line 20 is tied low, so that addresses higher than
+    #  1MB wrap around to zero by default. This code undoes this.
+seta20.1:
+    inb $0x64, %al                                  # Wait for not busy(8042 input buffer empty).
+    7c0a:	e4 64                	in     $0x64,%al
+    testb $0x2, %al
+    7c0c:	a8 02                	test   $0x2,%al
+    jnz seta20.1
+    7c0e:	75 fa                	jne    7c0a <seta20.1>
+
+    movb $0xd1, %al                                 # 0xd1 -> port 0x64
+    7c10:	b0 d1                	mov    $0xd1,%al
+    outb %al, $0x64                                 # 0xd1 means: write data to 8042's P2 port
+    7c12:	e6 64                	out    %al,$0x64
+
+00007c14 <seta20.2>:
+
+seta20.2:
+    inb $0x64, %al                                  # Wait for not busy(8042 input buffer empty).
+    7c14:	e4 64                	in     $0x64,%al
+    testb $0x2, %al
+    7c16:	a8 02                	test   $0x2,%al
+    jnz seta20.2
+    7c18:	75 fa                	jne    7c14 <seta20.2>
+
+    movb $0xdf, %al                                 # 0xdf -> port 0x60
+    7c1a:	b0 df                	mov    $0xdf,%al
+    outb %al, $0x60                                 # 0xdf = 11011111, means set P2's A20 bit(the 1 bit) to 1
+    7c1c:	e6 60                	out    %al,$0x60
+
+00007c1e <probe_memory>:
+
+probe_memory:
+    movl $0, 0x8000
+    7c1e:	66 c7 06 00 80       	movw   $0x8000,(%esi)
+    7c23:	00 00                	add    %al,(%eax)
+    7c25:	00 00                	add    %al,(%eax)
+    xorl %ebx, %ebx
+    7c27:	66 31 db             	xor    %bx,%bx
+    movw $0x8004, %di
+    7c2a:	bf 04 80 66 b8       	mov    $0xb8668004,%edi
+
+00007c2d <start_probe>:
+start_probe:
+    movl $0xE820, %eax
+    7c2d:	66 b8 20 e8          	mov    $0xe820,%ax
+    7c31:	00 00                	add    %al,(%eax)
+    movl $20, %ecx
+    7c33:	66 b9 14 00          	mov    $0x14,%cx
+    7c37:	00 00                	add    %al,(%eax)
+    movl $SMAP, %edx
+    7c39:	66 ba 50 41          	mov    $0x4150,%dx
+    7c3d:	4d                   	dec    %ebp
+    7c3e:	53                   	push   %ebx
+    int $0x15
+    7c3f:	cd 15                	int    $0x15
+    jnc cont
+    7c41:	73 08                	jae    7c4b <cont>
+    movw $12345, 0x8000
+    7c43:	c7 06 00 80 39 30    	movl   $0x30398000,(%esi)
+    jmp finish_probe
+    7c49:	eb 0e                	jmp    7c59 <finish_probe>
+
+00007c4b <cont>:
+cont:
+    addw $20, %di
+    7c4b:	83 c7 14             	add    $0x14,%edi
+    incl 0x8000
+    7c4e:	66 ff 06             	incw   (%esi)
+    7c51:	00 80 66 83 fb 00    	add    %al,0xfb8366(%eax)
+    cmpl $0, %ebx
+    jnz start_probe
+    7c57:	75 d4                	jne    7c2d <start_probe>
+
+00007c59 <finish_probe>:
+
+    # Switch from real to protected mode, using a bootstrap GDT
+    # and segment translation that makes virtual addresses
+    # identical to physical addresses, so that the
+    # effective memory map does not change during the switch.
+    lgdt gdtdesc
+    7c59:	0f 01 16             	lgdtl  (%esi)
+    7c5c:	b4 7d                	mov    $0x7d,%ah
+    movl %cr0, %eax
+    7c5e:	0f 20 c0             	mov    %cr0,%eax
+    orl $CR0_PE_ON, %eax
+    7c61:	66 83 c8 01          	or     $0x1,%ax
+    movl %eax, %cr0
+    7c65:	0f 22 c0             	mov    %eax,%cr0
+
+    # Jump to next instruction, but in 32-bit code segment.
+    # Switches processor into 32-bit mode.
+    ljmp $PROT_MODE_CSEG, $protcseg
+    7c68:	ea 6d 7c 08 00 66 b8 	ljmp   $0xb866,$0x87c6d
+
+00007c6d <protcseg>:
+
+.code32                                             # Assemble for 32-bit mode
+protcseg:
+    # Set up the protected-mode data segment registers
+    movw $PROT_MODE_DSEG, %ax                       # Our data segment selector
+    7c6d:	66 b8 10 00          	mov    $0x10,%ax
+    movw %ax, %ds                                   # -> DS: Data Segment
+    7c71:	8e d8                	mov    %eax,%ds
+    movw %ax, %es                                   # -> ES: Extra Segment
+    7c73:	8e c0                	mov    %eax,%es
+    movw %ax, %fs                                   # -> FS
+    7c75:	8e e0                	mov    %eax,%fs
+    movw %ax, %gs                                   # -> GS
+    7c77:	8e e8                	mov    %eax,%gs
+    movw %ax, %ss                                   # -> SS: Stack Segment
+    7c79:	8e d0                	mov    %eax,%ss
+
+    # Set up the stack pointer and call into C. The stack region is from 0--start(0x7c00)
+    movl $0x0, %ebp
+    7c7b:	bd 00 00 00 00       	mov    $0x0,%ebp
+    movl $start, %esp
+    7c80:	bc 00 7c 00 00       	mov    $0x7c00,%esp
+    call bootmain
+    7c85:	e8 9d 00 00 00       	call   7d27 <bootmain>
+
+00007c8a <spin>:
+
+    # If bootmain returns (it shouldn't), loop.
+spin:
+    jmp spin
+    7c8a:	eb fe                	jmp    7c8a <spin>
+
+Disassembly of section .text:
+
+00007c8c <readseg>:
+/* *
+ * readseg - read @count bytes at @offset from kernel into virtual address @va,
+ * might copy more than asked.
+ * */
+static void
+readseg(uintptr_t va, uint32_t count, uint32_t offset) {
+    7c8c:	55                   	push   %ebp
+    7c8d:	89 e5                	mov    %esp,%ebp
+    7c8f:	57                   	push   %edi
+    uintptr_t end_va = va + count;
+    7c90:	8d 3c 10             	lea    (%eax,%edx,1),%edi
+
+    // round down to sector boundary
+    va -= offset % SECTSIZE;
+    7c93:	89 ca                	mov    %ecx,%edx
+
+    // translate from bytes to sectors; kernel starts at sector 1
+    uint32_t secno = (offset / SECTSIZE) + 1;
+    7c95:	c1 e9 09             	shr    $0x9,%ecx
+/* *
+ * readseg - read @count bytes at @offset from kernel into virtual address @va,
+ * might copy more than asked.
+ * */
+static void
+readseg(uintptr_t va, uint32_t count, uint32_t offset) {
+    7c98:	56                   	push   %esi
+    uintptr_t end_va = va + count;
+
+    // round down to sector boundary
+    va -= offset % SECTSIZE;
+    7c99:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
+
+    // translate from bytes to sectors; kernel starts at sector 1
+    uint32_t secno = (offset / SECTSIZE) + 1;
+    7c9f:	8d 71 01             	lea    0x1(%ecx),%esi
+/* *
+ * readseg - read @count bytes at @offset from kernel into virtual address @va,
+ * might copy more than asked.
+ * */
+static void
+readseg(uintptr_t va, uint32_t count, uint32_t offset) {
+    7ca2:	53                   	push   %ebx
+    uintptr_t end_va = va + count;
+
+    // round down to sector boundary
+    va -= offset % SECTSIZE;
+    7ca3:	29 d0                	sub    %edx,%eax
+/* *
+ * readseg - read @count bytes at @offset from kernel into virtual address @va,
+ * might copy more than asked.
+ * */
+static void
+readseg(uintptr_t va, uint32_t count, uint32_t offset) {
+    7ca5:	53                   	push   %ebx
+    uintptr_t end_va = va + count;
+    7ca6:	89 7d f0             	mov    %edi,-0x10(%ebp)
+
+    // round down to sector boundary
+    va -= offset % SECTSIZE;
+    7ca9:	89 c3                	mov    %eax,%ebx
+    uint32_t secno = (offset / SECTSIZE) + 1;
+
+    // If this is too slow, we could read lots of sectors at a time.
+    // We'd write more to memory than asked, but it doesn't matter --
+    // we load in increasing order.
+    for (; va < end_va; va += SECTSIZE, secno ++) {
+    7cab:	3b 5d f0             	cmp    -0x10(%ebp),%ebx
+    7cae:	73 71                	jae    7d21 <readseg+0x95>
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+    7cb0:	ba f7 01 00 00       	mov    $0x1f7,%edx
+    7cb5:	ec                   	in     (%dx),%al
+#define ELFHDR          ((struct elfhdr *)0x10000)      // scratch space
+
+/* waitdisk - wait for disk ready */
+static void
+waitdisk(void) {
+    while ((inb(0x1F7) & 0xC0) != 0x40)
+    7cb6:	83 e0 c0             	and    $0xffffffc0,%eax
+    7cb9:	3c 40                	cmp    $0x40,%al
+    7cbb:	75 f3                	jne    7cb0 <readseg+0x24>
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+    7cbd:	ba f2 01 00 00       	mov    $0x1f2,%edx
+    7cc2:	b0 01                	mov    $0x1,%al
+    7cc4:	ee                   	out    %al,(%dx)
+    7cc5:	ba f3 01 00 00       	mov    $0x1f3,%edx
+    7cca:	89 f0                	mov    %esi,%eax
+    7ccc:	ee                   	out    %al,(%dx)
+    7ccd:	89 f0                	mov    %esi,%eax
+    7ccf:	ba f4 01 00 00       	mov    $0x1f4,%edx
+    7cd4:	c1 e8 08             	shr    $0x8,%eax
+    7cd7:	ee                   	out    %al,(%dx)
+    7cd8:	89 f0                	mov    %esi,%eax
+    7cda:	ba f5 01 00 00       	mov    $0x1f5,%edx
+    7cdf:	c1 e8 10             	shr    $0x10,%eax
+    7ce2:	ee                   	out    %al,(%dx)
+    7ce3:	89 f0                	mov    %esi,%eax
+    7ce5:	ba f6 01 00 00       	mov    $0x1f6,%edx
+    7cea:	c1 e8 18             	shr    $0x18,%eax
+    7ced:	83 e0 0f             	and    $0xf,%eax
+    7cf0:	83 c8 e0             	or     $0xffffffe0,%eax
+    7cf3:	ee                   	out    %al,(%dx)
+    7cf4:	b0 20                	mov    $0x20,%al
+    7cf6:	ba f7 01 00 00       	mov    $0x1f7,%edx
+    7cfb:	ee                   	out    %al,(%dx)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+    7cfc:	ba f7 01 00 00       	mov    $0x1f7,%edx
+    7d01:	ec                   	in     (%dx),%al
+    7d02:	83 e0 c0             	and    $0xffffffc0,%eax
+    7d05:	3c 40                	cmp    $0x40,%al
+    7d07:	75 f3                	jne    7cfc <readseg+0x70>
+    return data;
+}
+
+static inline void
+insl(uint32_t port, void *addr, int cnt) {
+    asm volatile (
+    7d09:	89 df                	mov    %ebx,%edi
+    7d0b:	b9 80 00 00 00       	mov    $0x80,%ecx
+    7d10:	ba f0 01 00 00       	mov    $0x1f0,%edx
+    7d15:	fc                   	cld    
+    7d16:	f2 6d                	repnz insl (%dx),%es:(%edi)
+    uint32_t secno = (offset / SECTSIZE) + 1;
+
+    // If this is too slow, we could read lots of sectors at a time.
+    // We'd write more to memory than asked, but it doesn't matter --
+    // we load in increasing order.
+    for (; va < end_va; va += SECTSIZE, secno ++) {
+    7d18:	81 c3 00 02 00 00    	add    $0x200,%ebx
+    7d1e:	46                   	inc    %esi
+    7d1f:	eb 8a                	jmp    7cab <readseg+0x1f>
+        readsect((void *)va, secno);
+    }
+}
+    7d21:	58                   	pop    %eax
+    7d22:	5b                   	pop    %ebx
+    7d23:	5e                   	pop    %esi
+    7d24:	5f                   	pop    %edi
+    7d25:	5d                   	pop    %ebp
+    7d26:	c3                   	ret    
+
+00007d27 <bootmain>:
+
+/* bootmain - the entry of bootloader */
+void
+bootmain(void) {
+    7d27:	55                   	push   %ebp
+    // read the 1st page off disk
+    readseg((uintptr_t)ELFHDR, SECTSIZE * 8, 0);
+    7d28:	31 c9                	xor    %ecx,%ecx
+    7d2a:	ba 00 10 00 00       	mov    $0x1000,%edx
+    7d2f:	b8 00 00 01 00       	mov    $0x10000,%eax
+    }
+}
+
+/* bootmain - the entry of bootloader */
+void
+bootmain(void) {
+    7d34:	89 e5                	mov    %esp,%ebp
+    7d36:	56                   	push   %esi
+    7d37:	53                   	push   %ebx
+    // read the 1st page off disk
+    readseg((uintptr_t)ELFHDR, SECTSIZE * 8, 0);
+    7d38:	e8 4f ff ff ff       	call   7c8c <readseg>
+
+    // is this a valid ELF?
+    if (ELFHDR->e_magic != ELF_MAGIC) {
+    7d3d:	81 3d 00 00 01 00 7f 	cmpl   $0x464c457f,0x10000
+    7d44:	45 4c 46 
+    7d47:	75 3f                	jne    7d88 <bootmain+0x61>
+    }
+
+    struct proghdr *ph, *eph;
+
+    // load each program segment (ignores ph flags)
+    ph = (struct proghdr *)((uintptr_t)ELFHDR + ELFHDR->e_phoff);
+    7d49:	a1 1c 00 01 00       	mov    0x1001c,%eax
+    eph = ph + ELFHDR->e_phnum;
+    7d4e:	0f b7 35 2c 00 01 00 	movzwl 0x1002c,%esi
+    }
+
+    struct proghdr *ph, *eph;
+
+    // load each program segment (ignores ph flags)
+    ph = (struct proghdr *)((uintptr_t)ELFHDR + ELFHDR->e_phoff);
+    7d55:	8d 98 00 00 01 00    	lea    0x10000(%eax),%ebx
+    eph = ph + ELFHDR->e_phnum;
+    7d5b:	c1 e6 05             	shl    $0x5,%esi
+    7d5e:	01 de                	add    %ebx,%esi
+    for (; ph < eph; ph ++) {
+    7d60:	39 f3                	cmp    %esi,%ebx
+    7d62:	73 18                	jae    7d7c <bootmain+0x55>
+        readseg(ph->p_va & 0xFFFFFF, ph->p_memsz, ph->p_offset);
+    7d64:	8b 43 08             	mov    0x8(%ebx),%eax
+    7d67:	8b 4b 04             	mov    0x4(%ebx),%ecx
+    struct proghdr *ph, *eph;
+
+    // load each program segment (ignores ph flags)
+    ph = (struct proghdr *)((uintptr_t)ELFHDR + ELFHDR->e_phoff);
+    eph = ph + ELFHDR->e_phnum;
+    for (; ph < eph; ph ++) {
+    7d6a:	83 c3 20             	add    $0x20,%ebx
+        readseg(ph->p_va & 0xFFFFFF, ph->p_memsz, ph->p_offset);
+    7d6d:	8b 53 f4             	mov    -0xc(%ebx),%edx
+    7d70:	25 ff ff ff 00       	and    $0xffffff,%eax
+    7d75:	e8 12 ff ff ff       	call   7c8c <readseg>
+    7d7a:	eb e4                	jmp    7d60 <bootmain+0x39>
+    }
+
+    // call the entry point from the ELF header
+    // note: does not return
+    ((void (*)(void))(ELFHDR->e_entry & 0xFFFFFF))();
+    7d7c:	a1 18 00 01 00       	mov    0x10018,%eax
+    7d81:	25 ff ff ff 00       	and    $0xffffff,%eax
+    7d86:	ff d0                	call   *%eax
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+}
+
+static inline void
+outw(uint16_t port, uint16_t data) {
+    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
+    7d88:	ba 00 8a ff ff       	mov    $0xffff8a00,%edx
+    7d8d:	89 d0                	mov    %edx,%eax
+    7d8f:	66 ef                	out    %ax,(%dx)
+    7d91:	b8 00 8e ff ff       	mov    $0xffff8e00,%eax
+    7d96:	66 ef                	out    %ax,(%dx)
+    7d98:	eb fe                	jmp    7d98 <bootmain+0x71>
Binary files lab6_original/obj/bootblock.o and lab6/obj/bootblock.o differ
Binary files lab6_original/obj/bootblock.out and lab6/obj/bootblock.out differ
diff -r -u -P lab6_original/obj/kern/debug/kdebug.d lab6/obj/kern/debug/kdebug.d
--- lab6_original/obj/kern/debug/kdebug.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/debug/kdebug.d	2016-04-29 16:22:06.824635672 +0800
@@ -0,0 +1,6 @@
+obj/kern/debug/kdebug.o obj/kern/debug/kdebug.d: kern/debug/kdebug.c \
+ libs/defs.h libs/x86.h kern/debug/stab.h libs/stdio.h libs/stdarg.h \
+ libs/string.h kern/mm/memlayout.h libs/atomic.h libs/list.h \
+ kern/sync/sync.h kern/driver/intr.h kern/mm/mmu.h kern/debug/assert.h \
+ kern/schedule/sched.h libs/skew_heap.h kern/mm/vmm.h kern/process/proc.h \
+ kern/trap/trap.h kern/debug/kdebug.h kern/debug/kmonitor.h
Binary files lab6_original/obj/kern/debug/kdebug.o and lab6/obj/kern/debug/kdebug.o differ
diff -r -u -P lab6_original/obj/kern/debug/kmonitor.d lab6/obj/kern/debug/kmonitor.d
--- lab6_original/obj/kern/debug/kmonitor.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/debug/kmonitor.d	2016-04-29 16:22:06.836584566 +0800
@@ -0,0 +1,4 @@
+obj/kern/debug/kmonitor.o obj/kern/debug/kmonitor.d: \
+ kern/debug/kmonitor.c libs/stdio.h libs/defs.h libs/stdarg.h \
+ libs/string.h kern/mm/mmu.h kern/trap/trap.h kern/debug/kmonitor.h \
+ kern/debug/kdebug.h
Binary files lab6_original/obj/kern/debug/kmonitor.o and lab6/obj/kern/debug/kmonitor.o differ
diff -r -u -P lab6_original/obj/kern/debug/panic.d lab6/obj/kern/debug/panic.d
--- lab6_original/obj/kern/debug/panic.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/debug/panic.d	2016-04-29 16:22:06.812686778 +0800
@@ -0,0 +1,3 @@
+obj/kern/debug/panic.o obj/kern/debug/panic.d: kern/debug/panic.c \
+ libs/defs.h libs/stdio.h libs/stdarg.h kern/driver/intr.h \
+ kern/debug/kmonitor.h kern/trap/trap.h
Binary files lab6_original/obj/kern/debug/panic.o and lab6/obj/kern/debug/panic.o differ
diff -r -u -P lab6_original/obj/kern/driver/clock.d lab6/obj/kern/driver/clock.d
--- lab6_original/obj/kern/driver/clock.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/driver/clock.d	2016-04-29 16:22:06.840567531 +0800
@@ -0,0 +1,3 @@
+obj/kern/driver/clock.o obj/kern/driver/clock.d: kern/driver/clock.c \
+ libs/x86.h libs/defs.h kern/trap/trap.h libs/stdio.h libs/stdarg.h \
+ kern/driver/picirq.h
Binary files lab6_original/obj/kern/driver/clock.o and lab6/obj/kern/driver/clock.o differ
diff -r -u -P lab6_original/obj/kern/driver/console.d lab6/obj/kern/driver/console.d
--- lab6_original/obj/kern/driver/console.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/driver/console.d	2016-04-29 16:22:06.856499390 +0800
@@ -0,0 +1,6 @@
+obj/kern/driver/console.o obj/kern/driver/console.d: \
+ kern/driver/console.c libs/defs.h libs/x86.h libs/stdio.h libs/stdarg.h \
+ libs/string.h kern/driver/kbdreg.h kern/driver/picirq.h kern/trap/trap.h \
+ kern/mm/memlayout.h libs/atomic.h libs/list.h kern/sync/sync.h \
+ kern/driver/intr.h kern/mm/mmu.h kern/debug/assert.h \
+ kern/schedule/sched.h libs/skew_heap.h
Binary files lab6_original/obj/kern/driver/console.o and lab6/obj/kern/driver/console.o differ
diff -r -u -P lab6_original/obj/kern/driver/ide.d lab6/obj/kern/driver/ide.d
--- lab6_original/obj/kern/driver/ide.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/driver/ide.d	2016-04-29 16:22:06.840567531 +0800
@@ -0,0 +1,4 @@
+obj/kern/driver/ide.o obj/kern/driver/ide.d: kern/driver/ide.c \
+ libs/defs.h libs/stdio.h libs/stdarg.h kern/trap/trap.h \
+ kern/driver/picirq.h kern/fs/fs.h kern/mm/mmu.h kern/driver/ide.h \
+ libs/x86.h kern/debug/assert.h
Binary files lab6_original/obj/kern/driver/ide.o and lab6/obj/kern/driver/ide.o differ
diff -r -u -P lab6_original/obj/kern/driver/intr.d lab6/obj/kern/driver/intr.d
--- lab6_original/obj/kern/driver/intr.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/driver/intr.d	2016-04-29 16:22:06.800737884 +0800
@@ -0,0 +1,2 @@
+obj/kern/driver/intr.o obj/kern/driver/intr.d: kern/driver/intr.c \
+ libs/x86.h libs/defs.h kern/driver/intr.h
Binary files lab6_original/obj/kern/driver/intr.o and lab6/obj/kern/driver/intr.o differ
diff -r -u -P lab6_original/obj/kern/driver/picirq.d lab6/obj/kern/driver/picirq.d
--- lab6_original/obj/kern/driver/picirq.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/driver/picirq.d	2016-04-29 16:22:06.832601602 +0800
@@ -0,0 +1,2 @@
+obj/kern/driver/picirq.o obj/kern/driver/picirq.d: kern/driver/picirq.c \
+ libs/defs.h libs/x86.h kern/driver/picirq.h
Binary files lab6_original/obj/kern/driver/picirq.o and lab6/obj/kern/driver/picirq.o differ
diff -r -u -P lab6_original/obj/kern/fs/swapfs.d lab6/obj/kern/fs/swapfs.d
--- lab6_original/obj/kern/fs/swapfs.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/fs/swapfs.d	2016-04-29 16:22:06.856499390 +0800
@@ -0,0 +1,5 @@
+obj/kern/fs/swapfs.o obj/kern/fs/swapfs.d: kern/fs/swapfs.c \
+ kern/mm/swap.h libs/defs.h kern/mm/memlayout.h libs/atomic.h libs/list.h \
+ kern/mm/pmm.h kern/mm/mmu.h kern/debug/assert.h kern/mm/vmm.h \
+ kern/sync/sync.h libs/x86.h kern/driver/intr.h kern/schedule/sched.h \
+ libs/skew_heap.h kern/fs/swapfs.h kern/fs/fs.h kern/driver/ide.h
Binary files lab6_original/obj/kern/fs/swapfs.o and lab6/obj/kern/fs/swapfs.o differ
diff -r -u -P lab6_original/obj/kern/init/entry.d lab6/obj/kern/init/entry.d
--- lab6_original/obj/kern/init/entry.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/init/entry.d	2016-04-29 16:22:06.836584566 +0800
@@ -0,0 +1,2 @@
+obj/kern/init/entry.o obj/kern/init/entry.d: kern/init/entry.S \
+ kern/mm/mmu.h kern/mm/memlayout.h
Binary files lab6_original/obj/kern/init/entry.o and lab6/obj/kern/init/entry.o differ
diff -r -u -P lab6_original/obj/kern/init/init.d lab6/obj/kern/init/init.d
--- lab6_original/obj/kern/init/init.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/init/init.d	2016-04-29 16:22:06.852516425 +0800
@@ -0,0 +1,8 @@
+obj/kern/init/init.o obj/kern/init/init.d: kern/init/init.c libs/defs.h \
+ libs/stdio.h libs/stdarg.h libs/string.h kern/driver/console.h \
+ kern/debug/kdebug.h kern/trap/trap.h kern/driver/picirq.h \
+ kern/driver/clock.h kern/driver/intr.h kern/mm/pmm.h kern/mm/mmu.h \
+ kern/mm/memlayout.h libs/atomic.h libs/list.h kern/debug/assert.h \
+ kern/mm/vmm.h kern/sync/sync.h libs/x86.h kern/schedule/sched.h \
+ libs/skew_heap.h kern/driver/ide.h kern/mm/swap.h kern/process/proc.h \
+ kern/debug/kmonitor.h
Binary files lab6_original/obj/kern/init/init.o and lab6/obj/kern/init/init.o differ
diff -r -u -P lab6_original/obj/kern/libs/readline.d lab6/obj/kern/libs/readline.d
--- lab6_original/obj/kern/libs/readline.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/libs/readline.d	2016-04-29 16:22:06.848533461 +0800
@@ -0,0 +1,2 @@
+obj/kern/libs/readline.o obj/kern/libs/readline.d: kern/libs/readline.c \
+ libs/stdio.h libs/defs.h libs/stdarg.h
Binary files lab6_original/obj/kern/libs/readline.o and lab6/obj/kern/libs/readline.o differ
diff -r -u -P lab6_original/obj/kern/libs/stdio.d lab6/obj/kern/libs/stdio.d
--- lab6_original/obj/kern/libs/stdio.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/libs/stdio.d	2016-04-29 16:22:06.840567531 +0800
@@ -0,0 +1,2 @@
+obj/kern/libs/stdio.o obj/kern/libs/stdio.d: kern/libs/stdio.c \
+ libs/defs.h libs/stdio.h libs/stdarg.h kern/driver/console.h
Binary files lab6_original/obj/kern/libs/stdio.o and lab6/obj/kern/libs/stdio.o differ
diff -r -u -P lab6_original/obj/kern/mm/default_pmm.d lab6/obj/kern/mm/default_pmm.d
--- lab6_original/obj/kern/mm/default_pmm.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/mm/default_pmm.d	2016-04-29 16:22:06.840567531 +0800
@@ -0,0 +1,4 @@
+obj/kern/mm/default_pmm.o obj/kern/mm/default_pmm.d: \
+ kern/mm/default_pmm.c kern/mm/pmm.h libs/defs.h kern/mm/mmu.h \
+ kern/mm/memlayout.h libs/atomic.h libs/list.h kern/debug/assert.h \
+ libs/string.h kern/mm/default_pmm.h
Binary files lab6_original/obj/kern/mm/default_pmm.o and lab6/obj/kern/mm/default_pmm.o differ
diff -r -u -P lab6_original/obj/kern/mm/kmalloc.d lab6/obj/kern/mm/kmalloc.d
--- lab6_original/obj/kern/mm/kmalloc.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/mm/kmalloc.d	2016-04-29 16:22:06.808703813 +0800
@@ -0,0 +1,5 @@
+obj/kern/mm/kmalloc.o obj/kern/mm/kmalloc.d: kern/mm/kmalloc.c \
+ libs/defs.h libs/list.h kern/mm/memlayout.h libs/atomic.h \
+ kern/debug/assert.h kern/mm/kmalloc.h kern/sync/sync.h libs/x86.h \
+ kern/driver/intr.h kern/mm/mmu.h kern/schedule/sched.h libs/skew_heap.h \
+ kern/mm/pmm.h libs/stdio.h libs/stdarg.h
Binary files lab6_original/obj/kern/mm/kmalloc.o and lab6/obj/kern/mm/kmalloc.o differ
diff -r -u -P lab6_original/obj/kern/mm/pmm.d lab6/obj/kern/mm/pmm.d
--- lab6_original/obj/kern/mm/pmm.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/mm/pmm.d	2016-04-29 16:22:06.848533461 +0800
@@ -0,0 +1,6 @@
+obj/kern/mm/pmm.o obj/kern/mm/pmm.d: kern/mm/pmm.c libs/defs.h libs/x86.h \
+ libs/stdio.h libs/stdarg.h libs/string.h kern/mm/mmu.h \
+ kern/mm/memlayout.h libs/atomic.h libs/list.h kern/mm/pmm.h \
+ kern/debug/assert.h kern/mm/default_pmm.h kern/sync/sync.h \
+ kern/driver/intr.h kern/schedule/sched.h libs/skew_heap.h libs/error.h \
+ kern/mm/swap.h kern/mm/vmm.h kern/mm/kmalloc.h
Binary files lab6_original/obj/kern/mm/pmm.o and lab6/obj/kern/mm/pmm.o differ
diff -r -u -P lab6_original/obj/kern/mm/swap.d lab6/obj/kern/mm/swap.d
--- lab6_original/obj/kern/mm/swap.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/mm/swap.d	2016-04-29 16:22:06.828618637 +0800
@@ -0,0 +1,6 @@
+obj/kern/mm/swap.o obj/kern/mm/swap.d: kern/mm/swap.c kern/mm/swap.h \
+ libs/defs.h kern/mm/memlayout.h libs/atomic.h libs/list.h kern/mm/pmm.h \
+ kern/mm/mmu.h kern/debug/assert.h kern/mm/vmm.h kern/sync/sync.h \
+ libs/x86.h kern/driver/intr.h kern/schedule/sched.h libs/skew_heap.h \
+ kern/fs/swapfs.h kern/mm/swap_fifo.h libs/stdio.h libs/stdarg.h \
+ libs/string.h kern/mm/default_pmm.h kern/debug/kdebug.h kern/trap/trap.h
diff -r -u -P lab6_original/obj/kern/mm/swap_fifo.d lab6/obj/kern/mm/swap_fifo.d
--- lab6_original/obj/kern/mm/swap_fifo.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/mm/swap_fifo.d	2016-04-29 16:22:06.836584566 +0800
@@ -0,0 +1,6 @@
+obj/kern/mm/swap_fifo.o obj/kern/mm/swap_fifo.d: kern/mm/swap_fifo.c \
+ libs/defs.h libs/x86.h libs/stdio.h libs/stdarg.h libs/string.h \
+ kern/mm/swap.h kern/mm/memlayout.h libs/atomic.h libs/list.h \
+ kern/mm/pmm.h kern/mm/mmu.h kern/debug/assert.h kern/mm/vmm.h \
+ kern/sync/sync.h kern/driver/intr.h kern/schedule/sched.h \
+ libs/skew_heap.h kern/mm/swap_fifo.h
Binary files lab6_original/obj/kern/mm/swap_fifo.o and lab6/obj/kern/mm/swap_fifo.o differ
Binary files lab6_original/obj/kern/mm/swap.o and lab6/obj/kern/mm/swap.o differ
diff -r -u -P lab6_original/obj/kern/mm/vmm.d lab6/obj/kern/mm/vmm.d
--- lab6_original/obj/kern/mm/vmm.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/mm/vmm.d	2016-04-29 16:22:06.824635672 +0800
@@ -0,0 +1,6 @@
+obj/kern/mm/vmm.o obj/kern/mm/vmm.d: kern/mm/vmm.c kern/mm/vmm.h \
+ libs/defs.h libs/list.h kern/mm/memlayout.h libs/atomic.h \
+ kern/sync/sync.h libs/x86.h kern/driver/intr.h kern/mm/mmu.h \
+ kern/debug/assert.h kern/schedule/sched.h libs/skew_heap.h libs/string.h \
+ libs/stdio.h libs/stdarg.h libs/error.h kern/mm/pmm.h kern/mm/swap.h \
+ kern/mm/kmalloc.h
Binary files lab6_original/obj/kern/mm/vmm.o and lab6/obj/kern/mm/vmm.o differ
diff -r -u -P lab6_original/obj/kern/process/entry.d lab6/obj/kern/process/entry.d
--- lab6_original/obj/kern/process/entry.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/process/entry.d	2016-04-29 16:22:06.836584566 +0800
@@ -0,0 +1 @@
+obj/kern/process/entry.o obj/kern/process/entry.d: kern/process/entry.S
Binary files lab6_original/obj/kern/process/entry.o and lab6/obj/kern/process/entry.o differ
diff -r -u -P lab6_original/obj/kern/process/proc.d lab6/obj/kern/process/proc.d
--- lab6_original/obj/kern/process/proc.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/process/proc.d	2016-04-29 16:22:46.751049984 +0800
@@ -0,0 +1,7 @@
+obj/kern/process/proc.o obj/kern/process/proc.d: kern/process/proc.c \
+ kern/process/proc.h libs/defs.h libs/list.h kern/trap/trap.h \
+ kern/mm/memlayout.h libs/atomic.h libs/skew_heap.h kern/mm/kmalloc.h \
+ libs/string.h kern/sync/sync.h libs/x86.h kern/driver/intr.h \
+ kern/mm/mmu.h kern/debug/assert.h kern/schedule/sched.h kern/mm/pmm.h \
+ libs/error.h libs/elf.h kern/mm/vmm.h libs/stdio.h libs/stdarg.h \
+ libs/stdlib.h libs/unistd.h
Binary files lab6_original/obj/kern/process/proc.o and lab6/obj/kern/process/proc.o differ
diff -r -u -P lab6_original/obj/kern/process/switch.d lab6/obj/kern/process/switch.d
--- lab6_original/obj/kern/process/switch.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/process/switch.d	2016-04-29 16:22:06.820652707 +0800
@@ -0,0 +1,2 @@
+obj/kern/process/switch.o obj/kern/process/switch.d: \
+ kern/process/switch.S
Binary files lab6_original/obj/kern/process/switch.o and lab6/obj/kern/process/switch.o differ
diff -r -u -P lab6_original/obj/kern/schedule/default_sched.d lab6/obj/kern/schedule/default_sched.d
--- lab6_original/obj/kern/schedule/default_sched.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/schedule/default_sched.d	2016-04-29 16:22:06.721078588 +0800
@@ -0,0 +1,5 @@
+obj/kern/schedule/default_sched.o obj/kern/schedule/default_sched.d: \
+ kern/schedule/default_sched.c libs/defs.h libs/list.h \
+ kern/process/proc.h kern/trap/trap.h kern/mm/memlayout.h libs/atomic.h \
+ libs/skew_heap.h kern/debug/assert.h kern/schedule/default_sched.h \
+ kern/schedule/sched.h
Binary files lab6_original/obj/kern/schedule/default_sched.o and lab6/obj/kern/schedule/default_sched.o differ
diff -r -u -P lab6_original/obj/kern/schedule/sched.d lab6/obj/kern/schedule/sched.d
--- lab6_original/obj/kern/schedule/sched.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/schedule/sched.d	2016-04-29 16:22:06.721078588 +0800
@@ -0,0 +1,6 @@
+obj/kern/schedule/sched.o obj/kern/schedule/sched.d: \
+ kern/schedule/sched.c libs/list.h libs/defs.h kern/sync/sync.h \
+ libs/x86.h kern/driver/intr.h kern/mm/mmu.h kern/debug/assert.h \
+ libs/atomic.h kern/schedule/sched.h libs/skew_heap.h kern/process/proc.h \
+ kern/trap/trap.h kern/mm/memlayout.h libs/stdio.h libs/stdarg.h \
+ kern/schedule/default_sched.h
Binary files lab6_original/obj/kern/schedule/sched.o and lab6/obj/kern/schedule/sched.o differ
diff -r -u -P lab6_original/obj/kern/syscall/syscall.d lab6/obj/kern/syscall/syscall.d
--- lab6_original/obj/kern/syscall/syscall.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/syscall/syscall.d	2016-04-29 16:22:06.729044518 +0800
@@ -0,0 +1,5 @@
+obj/kern/syscall/syscall.o obj/kern/syscall/syscall.d: \
+ kern/syscall/syscall.c libs/unistd.h kern/process/proc.h libs/defs.h \
+ libs/list.h kern/trap/trap.h kern/mm/memlayout.h libs/atomic.h \
+ libs/skew_heap.h kern/syscall/syscall.h libs/stdio.h libs/stdarg.h \
+ kern/mm/pmm.h kern/mm/mmu.h kern/debug/assert.h kern/driver/clock.h
Binary files lab6_original/obj/kern/syscall/syscall.o and lab6/obj/kern/syscall/syscall.o differ
diff -r -u -P lab6_original/obj/kern/trap/trap.d lab6/obj/kern/trap/trap.d
--- lab6_original/obj/kern/trap/trap.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/trap/trap.d	2016-04-29 16:22:06.836584566 +0800
@@ -0,0 +1,7 @@
+obj/kern/trap/trap.o obj/kern/trap/trap.d: kern/trap/trap.c libs/defs.h \
+ kern/mm/mmu.h kern/mm/memlayout.h libs/atomic.h libs/list.h \
+ kern/driver/clock.h kern/trap/trap.h libs/x86.h libs/stdio.h \
+ libs/stdarg.h kern/debug/assert.h kern/driver/console.h kern/mm/vmm.h \
+ kern/sync/sync.h kern/driver/intr.h kern/schedule/sched.h \
+ libs/skew_heap.h kern/mm/swap.h kern/mm/pmm.h kern/debug/kdebug.h \
+ libs/unistd.h kern/syscall/syscall.h libs/error.h kern/process/proc.h
diff -r -u -P lab6_original/obj/kern/trap/trapentry.d lab6/obj/kern/trap/trapentry.d
--- lab6_original/obj/kern/trap/trapentry.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/trap/trapentry.d	2016-04-29 16:22:06.800737884 +0800
@@ -0,0 +1,2 @@
+obj/kern/trap/trapentry.o obj/kern/trap/trapentry.d: \
+ kern/trap/trapentry.S kern/mm/memlayout.h
Binary files lab6_original/obj/kern/trap/trapentry.o and lab6/obj/kern/trap/trapentry.o differ
Binary files lab6_original/obj/kern/trap/trap.o and lab6/obj/kern/trap/trap.o differ
diff -r -u -P lab6_original/obj/kern/trap/vectors.d lab6/obj/kern/trap/vectors.d
--- lab6_original/obj/kern/trap/vectors.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kern/trap/vectors.d	2016-04-29 16:22:06.772857130 +0800
@@ -0,0 +1 @@
+obj/kern/trap/vectors.o obj/kern/trap/vectors.d: kern/trap/vectors.S
Binary files lab6_original/obj/kern/trap/vectors.o and lab6/obj/kern/trap/vectors.o differ
diff -r -u -P lab6_original/obj/kernel.asm lab6/obj/kernel.asm
--- lab6_original/obj/kernel.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kernel.asm	2016-04-29 16:22:46.875929019 +0800
@@ -0,0 +1,24374 @@
+
+bin/kernel:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+c0100000 <kern_entry>:
+.text
+.globl kern_entry
+kern_entry:
+    # reload temperate gdt (second time) to remap all physical memory
+    # virtual_addr 0~4G=linear_addr&physical_addr -KERNBASE~4G-KERNBASE 
+    lgdt REALLOC(__gdtdesc)
+c0100000:	0f 01 15 18 c0 12 00 	lgdtl  0x12c018
+    movl $KERNEL_DS, %eax
+c0100007:	b8 10 00 00 00       	mov    $0x10,%eax
+    movw %ax, %ds
+c010000c:	8e d8                	mov    %eax,%ds
+    movw %ax, %es
+c010000e:	8e c0                	mov    %eax,%es
+    movw %ax, %ss
+c0100010:	8e d0                	mov    %eax,%ss
+
+    ljmp $KERNEL_CS, $relocated
+c0100012:	ea 19 00 10 c0 08 00 	ljmp   $0x8,$0xc0100019
+
+c0100019 <relocated>:
+
+relocated:
+
+    # set ebp, esp
+    movl $0x0, %ebp
+c0100019:	bd 00 00 00 00       	mov    $0x0,%ebp
+    # the kernel stack region is from bootstack -- bootstacktop,
+    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
+    movl $bootstacktop, %esp
+c010001e:	bc 00 c0 12 c0       	mov    $0xc012c000,%esp
+    # now kernel stack is ready , call the first C function
+    call kern_init
+c0100023:	e8 02 00 00 00       	call   c010002a <kern_init>
+
+c0100028 <spin>:
+
+# should never get here
+spin:
+    jmp spin
+c0100028:	eb fe                	jmp    c0100028 <spin>
+
+c010002a <kern_init>:
+int kern_init(void) __attribute__((noreturn));
+void grade_backtrace(void);
+static void lab1_switch_test(void);
+
+int
+kern_init(void) {
+c010002a:	55                   	push   %ebp
+c010002b:	89 e5                	mov    %esp,%ebp
+c010002d:	83 ec 18             	sub    $0x18,%esp
+    extern char edata[], end[];
+    memset(edata, 0, end - edata);
+c0100030:	ba 58 0e 1b c0       	mov    $0xc01b0e58,%edx
+c0100035:	b8 dc dc 1a c0       	mov    $0xc01adcdc,%eax
+c010003a:	29 c2                	sub    %eax,%edx
+c010003c:	89 d0                	mov    %edx,%eax
+c010003e:	83 ec 04             	sub    $0x4,%esp
+c0100041:	50                   	push   %eax
+c0100042:	6a 00                	push   $0x0
+c0100044:	68 dc dc 1a c0       	push   $0xc01adcdc
+c0100049:	e8 1b b0 00 00       	call   c010b069 <memset>
+c010004e:	83 c4 10             	add    $0x10,%esp
+
+    cons_init();                // init the console
+c0100051:	e8 85 1e 00 00       	call   c0101edb <cons_init>
+
+    const char *message = "(THU.CST) os is loading ...";
+c0100056:	c7 45 f4 00 b9 10 c0 	movl   $0xc010b900,-0xc(%ebp)
+    cprintf("%s\n\n", message);
+c010005d:	83 ec 08             	sub    $0x8,%esp
+c0100060:	ff 75 f4             	pushl  -0xc(%ebp)
+c0100063:	68 1c b9 10 c0       	push   $0xc010b91c
+c0100068:	e8 21 02 00 00       	call   c010028e <cprintf>
+c010006d:	83 c4 10             	add    $0x10,%esp
+
+    print_kerninfo();
+c0100070:	e8 7a 09 00 00       	call   c01009ef <print_kerninfo>
+
+    grade_backtrace();
+c0100075:	e8 90 00 00 00       	call   c010010a <grade_backtrace>
+
+    pmm_init();                 // init physical memory management
+c010007a:	e8 ce 3d 00 00       	call   c0103e4d <pmm_init>
+
+    pic_init();                 // init interrupt controller
+c010007f:	e8 c9 1f 00 00       	call   c010204d <pic_init>
+    idt_init();                 // init interrupt descriptor table
+c0100084:	e8 4b 21 00 00       	call   c01021d4 <idt_init>
+
+    vmm_init();                 // init virtual memory management
+c0100089:	e8 d4 5c 00 00       	call   c0105d62 <vmm_init>
+    sched_init();               // init scheduler
+c010008e:	e8 97 a5 00 00       	call   c010a62a <sched_init>
+    proc_init();                // init process table
+c0100093:	e8 cb a2 00 00       	call   c010a363 <proc_init>
+    
+    ide_init();                 // init ide devices
+c0100098:	e8 0d 0e 00 00       	call   c0100eaa <ide_init>
+    swap_init();                // init swap
+c010009d:	e8 cd 6d 00 00       	call   c0106e6f <swap_init>
+
+    clock_init();               // init clock interrupt
+c01000a2:	e8 db 15 00 00       	call   c0101682 <clock_init>
+    intr_enable();              // enable irq interrupt
+c01000a7:	e8 de 20 00 00       	call   c010218a <intr_enable>
+
+    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
+    // user/kernel mode switch test
+    //lab1_switch_test();
+    
+    cpu_idle();                 // run idle process
+c01000ac:	e8 4f a4 00 00       	call   c010a500 <cpu_idle>
+
+c01000b1 <grade_backtrace2>:
+}
+
+void __attribute__((noinline))
+grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
+c01000b1:	55                   	push   %ebp
+c01000b2:	89 e5                	mov    %esp,%ebp
+c01000b4:	83 ec 08             	sub    $0x8,%esp
+    mon_backtrace(0, NULL, NULL);
+c01000b7:	83 ec 04             	sub    $0x4,%esp
+c01000ba:	6a 00                	push   $0x0
+c01000bc:	6a 00                	push   $0x0
+c01000be:	6a 00                	push   $0x0
+c01000c0:	e8 79 0d 00 00       	call   c0100e3e <mon_backtrace>
+c01000c5:	83 c4 10             	add    $0x10,%esp
+}
+c01000c8:	90                   	nop
+c01000c9:	c9                   	leave  
+c01000ca:	c3                   	ret    
+
+c01000cb <grade_backtrace1>:
+
+void __attribute__((noinline))
+grade_backtrace1(int arg0, int arg1) {
+c01000cb:	55                   	push   %ebp
+c01000cc:	89 e5                	mov    %esp,%ebp
+c01000ce:	53                   	push   %ebx
+c01000cf:	83 ec 04             	sub    $0x4,%esp
+    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
+c01000d2:	8d 4d 0c             	lea    0xc(%ebp),%ecx
+c01000d5:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01000d8:	8d 5d 08             	lea    0x8(%ebp),%ebx
+c01000db:	8b 45 08             	mov    0x8(%ebp),%eax
+c01000de:	51                   	push   %ecx
+c01000df:	52                   	push   %edx
+c01000e0:	53                   	push   %ebx
+c01000e1:	50                   	push   %eax
+c01000e2:	e8 ca ff ff ff       	call   c01000b1 <grade_backtrace2>
+c01000e7:	83 c4 10             	add    $0x10,%esp
+}
+c01000ea:	90                   	nop
+c01000eb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+c01000ee:	c9                   	leave  
+c01000ef:	c3                   	ret    
+
+c01000f0 <grade_backtrace0>:
+
+void __attribute__((noinline))
+grade_backtrace0(int arg0, int arg1, int arg2) {
+c01000f0:	55                   	push   %ebp
+c01000f1:	89 e5                	mov    %esp,%ebp
+c01000f3:	83 ec 08             	sub    $0x8,%esp
+    grade_backtrace1(arg0, arg2);
+c01000f6:	83 ec 08             	sub    $0x8,%esp
+c01000f9:	ff 75 10             	pushl  0x10(%ebp)
+c01000fc:	ff 75 08             	pushl  0x8(%ebp)
+c01000ff:	e8 c7 ff ff ff       	call   c01000cb <grade_backtrace1>
+c0100104:	83 c4 10             	add    $0x10,%esp
+}
+c0100107:	90                   	nop
+c0100108:	c9                   	leave  
+c0100109:	c3                   	ret    
+
+c010010a <grade_backtrace>:
+
+void
+grade_backtrace(void) {
+c010010a:	55                   	push   %ebp
+c010010b:	89 e5                	mov    %esp,%ebp
+c010010d:	83 ec 08             	sub    $0x8,%esp
+    grade_backtrace0(0, (int)kern_init, 0xffff0000);
+c0100110:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
+c0100115:	83 ec 04             	sub    $0x4,%esp
+c0100118:	68 00 00 ff ff       	push   $0xffff0000
+c010011d:	50                   	push   %eax
+c010011e:	6a 00                	push   $0x0
+c0100120:	e8 cb ff ff ff       	call   c01000f0 <grade_backtrace0>
+c0100125:	83 c4 10             	add    $0x10,%esp
+}
+c0100128:	90                   	nop
+c0100129:	c9                   	leave  
+c010012a:	c3                   	ret    
+
+c010012b <lab1_print_cur_status>:
+
+static void
+lab1_print_cur_status(void) {
+c010012b:	55                   	push   %ebp
+c010012c:	89 e5                	mov    %esp,%ebp
+c010012e:	83 ec 18             	sub    $0x18,%esp
+    static int round = 0;
+    uint16_t reg1, reg2, reg3, reg4;
+    asm volatile (
+c0100131:	8c 4d f6             	mov    %cs,-0xa(%ebp)
+c0100134:	8c 5d f4             	mov    %ds,-0xc(%ebp)
+c0100137:	8c 45 f2             	mov    %es,-0xe(%ebp)
+c010013a:	8c 55 f0             	mov    %ss,-0x10(%ebp)
+            "mov %%cs, %0;"
+            "mov %%ds, %1;"
+            "mov %%es, %2;"
+            "mov %%ss, %3;"
+            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
+    cprintf("%d: @ring %d\n", round, reg1 & 3);
+c010013d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0100141:	0f b7 c0             	movzwl %ax,%eax
+c0100144:	83 e0 03             	and    $0x3,%eax
+c0100147:	89 c2                	mov    %eax,%edx
+c0100149:	a1 e0 dc 1a c0       	mov    0xc01adce0,%eax
+c010014e:	83 ec 04             	sub    $0x4,%esp
+c0100151:	52                   	push   %edx
+c0100152:	50                   	push   %eax
+c0100153:	68 21 b9 10 c0       	push   $0xc010b921
+c0100158:	e8 31 01 00 00       	call   c010028e <cprintf>
+c010015d:	83 c4 10             	add    $0x10,%esp
+    cprintf("%d:  cs = %x\n", round, reg1);
+c0100160:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0100164:	0f b7 d0             	movzwl %ax,%edx
+c0100167:	a1 e0 dc 1a c0       	mov    0xc01adce0,%eax
+c010016c:	83 ec 04             	sub    $0x4,%esp
+c010016f:	52                   	push   %edx
+c0100170:	50                   	push   %eax
+c0100171:	68 2f b9 10 c0       	push   $0xc010b92f
+c0100176:	e8 13 01 00 00       	call   c010028e <cprintf>
+c010017b:	83 c4 10             	add    $0x10,%esp
+    cprintf("%d:  ds = %x\n", round, reg2);
+c010017e:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
+c0100182:	0f b7 d0             	movzwl %ax,%edx
+c0100185:	a1 e0 dc 1a c0       	mov    0xc01adce0,%eax
+c010018a:	83 ec 04             	sub    $0x4,%esp
+c010018d:	52                   	push   %edx
+c010018e:	50                   	push   %eax
+c010018f:	68 3d b9 10 c0       	push   $0xc010b93d
+c0100194:	e8 f5 00 00 00       	call   c010028e <cprintf>
+c0100199:	83 c4 10             	add    $0x10,%esp
+    cprintf("%d:  es = %x\n", round, reg3);
+c010019c:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c01001a0:	0f b7 d0             	movzwl %ax,%edx
+c01001a3:	a1 e0 dc 1a c0       	mov    0xc01adce0,%eax
+c01001a8:	83 ec 04             	sub    $0x4,%esp
+c01001ab:	52                   	push   %edx
+c01001ac:	50                   	push   %eax
+c01001ad:	68 4b b9 10 c0       	push   $0xc010b94b
+c01001b2:	e8 d7 00 00 00       	call   c010028e <cprintf>
+c01001b7:	83 c4 10             	add    $0x10,%esp
+    cprintf("%d:  ss = %x\n", round, reg4);
+c01001ba:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
+c01001be:	0f b7 d0             	movzwl %ax,%edx
+c01001c1:	a1 e0 dc 1a c0       	mov    0xc01adce0,%eax
+c01001c6:	83 ec 04             	sub    $0x4,%esp
+c01001c9:	52                   	push   %edx
+c01001ca:	50                   	push   %eax
+c01001cb:	68 59 b9 10 c0       	push   $0xc010b959
+c01001d0:	e8 b9 00 00 00       	call   c010028e <cprintf>
+c01001d5:	83 c4 10             	add    $0x10,%esp
+    round ++;
+c01001d8:	a1 e0 dc 1a c0       	mov    0xc01adce0,%eax
+c01001dd:	83 c0 01             	add    $0x1,%eax
+c01001e0:	a3 e0 dc 1a c0       	mov    %eax,0xc01adce0
+}
+c01001e5:	90                   	nop
+c01001e6:	c9                   	leave  
+c01001e7:	c3                   	ret    
+
+c01001e8 <lab1_switch_to_user>:
+
+static void
+lab1_switch_to_user(void) {
+c01001e8:	55                   	push   %ebp
+c01001e9:	89 e5                	mov    %esp,%ebp
+    //LAB1 CHALLENGE 1 : TODO
+	asm volatile(
+c01001eb:	83 ec 08             	sub    $0x8,%esp
+c01001ee:	cd 78                	int    $0x78
+c01001f0:	89 ec                	mov    %ebp,%esp
+		"sub $0x8, %%esp \n"
+		"int %0 \n"
+		"movl %%ebp, %%esp"
+		:
+		:"i"(T_SWITCH_TOU));
+}
+c01001f2:	90                   	nop
+c01001f3:	5d                   	pop    %ebp
+c01001f4:	c3                   	ret    
+
+c01001f5 <lab1_switch_to_kernel>:
+
+static void
+lab1_switch_to_kernel(void) {
+c01001f5:	55                   	push   %ebp
+c01001f6:	89 e5                	mov    %esp,%ebp
+    //LAB1 CHALLENGE 1 :  TODO
+	asm volatile(
+c01001f8:	cd 79                	int    $0x79
+c01001fa:	89 ec                	mov    %ebp,%esp
+		"int %0 \n"
+		"movl %%ebp, %%esp"
+		:
+		:"i"(T_SWITCH_TOK));
+}
+c01001fc:	90                   	nop
+c01001fd:	5d                   	pop    %ebp
+c01001fe:	c3                   	ret    
+
+c01001ff <lab1_switch_test>:
+
+static void
+lab1_switch_test(void) {
+c01001ff:	55                   	push   %ebp
+c0100200:	89 e5                	mov    %esp,%ebp
+c0100202:	83 ec 08             	sub    $0x8,%esp
+    lab1_print_cur_status();
+c0100205:	e8 21 ff ff ff       	call   c010012b <lab1_print_cur_status>
+    cprintf("+++ switch to  user  mode +++\n");
+c010020a:	83 ec 0c             	sub    $0xc,%esp
+c010020d:	68 68 b9 10 c0       	push   $0xc010b968
+c0100212:	e8 77 00 00 00       	call   c010028e <cprintf>
+c0100217:	83 c4 10             	add    $0x10,%esp
+    lab1_switch_to_user();
+c010021a:	e8 c9 ff ff ff       	call   c01001e8 <lab1_switch_to_user>
+    lab1_print_cur_status();
+c010021f:	e8 07 ff ff ff       	call   c010012b <lab1_print_cur_status>
+    cprintf("+++ switch to kernel mode +++\n");
+c0100224:	83 ec 0c             	sub    $0xc,%esp
+c0100227:	68 88 b9 10 c0       	push   $0xc010b988
+c010022c:	e8 5d 00 00 00       	call   c010028e <cprintf>
+c0100231:	83 c4 10             	add    $0x10,%esp
+    lab1_switch_to_kernel();
+c0100234:	e8 bc ff ff ff       	call   c01001f5 <lab1_switch_to_kernel>
+    lab1_print_cur_status();
+c0100239:	e8 ed fe ff ff       	call   c010012b <lab1_print_cur_status>
+}
+c010023e:	90                   	nop
+c010023f:	c9                   	leave  
+c0100240:	c3                   	ret    
+
+c0100241 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+c0100241:	55                   	push   %ebp
+c0100242:	89 e5                	mov    %esp,%ebp
+c0100244:	83 ec 08             	sub    $0x8,%esp
+    cons_putc(c);
+c0100247:	83 ec 0c             	sub    $0xc,%esp
+c010024a:	ff 75 08             	pushl  0x8(%ebp)
+c010024d:	e8 ba 1c 00 00       	call   c0101f0c <cons_putc>
+c0100252:	83 c4 10             	add    $0x10,%esp
+    (*cnt) ++;
+c0100255:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100258:	8b 00                	mov    (%eax),%eax
+c010025a:	8d 50 01             	lea    0x1(%eax),%edx
+c010025d:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100260:	89 10                	mov    %edx,(%eax)
+}
+c0100262:	90                   	nop
+c0100263:	c9                   	leave  
+c0100264:	c3                   	ret    
+
+c0100265 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+c0100265:	55                   	push   %ebp
+c0100266:	89 e5                	mov    %esp,%ebp
+c0100268:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+c010026b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+c0100272:	ff 75 0c             	pushl  0xc(%ebp)
+c0100275:	ff 75 08             	pushl  0x8(%ebp)
+c0100278:	8d 45 f4             	lea    -0xc(%ebp),%eax
+c010027b:	50                   	push   %eax
+c010027c:	68 41 02 10 c0       	push   $0xc0100241
+c0100281:	e8 19 b1 00 00       	call   c010b39f <vprintfmt>
+c0100286:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+c0100289:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c010028c:	c9                   	leave  
+c010028d:	c3                   	ret    
+
+c010028e <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+c010028e:	55                   	push   %ebp
+c010028f:	89 e5                	mov    %esp,%ebp
+c0100291:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+c0100294:	8d 45 0c             	lea    0xc(%ebp),%eax
+c0100297:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vcprintf(fmt, ap);
+c010029a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010029d:	83 ec 08             	sub    $0x8,%esp
+c01002a0:	50                   	push   %eax
+c01002a1:	ff 75 08             	pushl  0x8(%ebp)
+c01002a4:	e8 bc ff ff ff       	call   c0100265 <vcprintf>
+c01002a9:	83 c4 10             	add    $0x10,%esp
+c01002ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+c01002af:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c01002b2:	c9                   	leave  
+c01002b3:	c3                   	ret    
+
+c01002b4 <cputchar>:
+
+/* cputchar - writes a single character to stdout */
+void
+cputchar(int c) {
+c01002b4:	55                   	push   %ebp
+c01002b5:	89 e5                	mov    %esp,%ebp
+c01002b7:	83 ec 08             	sub    $0x8,%esp
+    cons_putc(c);
+c01002ba:	83 ec 0c             	sub    $0xc,%esp
+c01002bd:	ff 75 08             	pushl  0x8(%ebp)
+c01002c0:	e8 47 1c 00 00       	call   c0101f0c <cons_putc>
+c01002c5:	83 c4 10             	add    $0x10,%esp
+}
+c01002c8:	90                   	nop
+c01002c9:	c9                   	leave  
+c01002ca:	c3                   	ret    
+
+c01002cb <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+c01002cb:	55                   	push   %ebp
+c01002cc:	89 e5                	mov    %esp,%ebp
+c01002ce:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+c01002d1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+c01002d8:	eb 14                	jmp    c01002ee <cputs+0x23>
+        cputch(c, &cnt);
+c01002da:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+c01002de:	83 ec 08             	sub    $0x8,%esp
+c01002e1:	8d 55 f0             	lea    -0x10(%ebp),%edx
+c01002e4:	52                   	push   %edx
+c01002e5:	50                   	push   %eax
+c01002e6:	e8 56 ff ff ff       	call   c0100241 <cputch>
+c01002eb:	83 c4 10             	add    $0x10,%esp
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+c01002ee:	8b 45 08             	mov    0x8(%ebp),%eax
+c01002f1:	8d 50 01             	lea    0x1(%eax),%edx
+c01002f4:	89 55 08             	mov    %edx,0x8(%ebp)
+c01002f7:	0f b6 00             	movzbl (%eax),%eax
+c01002fa:	88 45 f7             	mov    %al,-0x9(%ebp)
+c01002fd:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+c0100301:	75 d7                	jne    c01002da <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+c0100303:	83 ec 08             	sub    $0x8,%esp
+c0100306:	8d 45 f0             	lea    -0x10(%ebp),%eax
+c0100309:	50                   	push   %eax
+c010030a:	6a 0a                	push   $0xa
+c010030c:	e8 30 ff ff ff       	call   c0100241 <cputch>
+c0100311:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+c0100314:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+c0100317:	c9                   	leave  
+c0100318:	c3                   	ret    
+
+c0100319 <getchar>:
+
+/* getchar - reads a single non-zero character from stdin */
+int
+getchar(void) {
+c0100319:	55                   	push   %ebp
+c010031a:	89 e5                	mov    %esp,%ebp
+c010031c:	83 ec 18             	sub    $0x18,%esp
+    int c;
+    while ((c = cons_getc()) == 0)
+c010031f:	e8 31 1c 00 00       	call   c0101f55 <cons_getc>
+c0100324:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0100327:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010032b:	74 f2                	je     c010031f <getchar+0x6>
+        /* do nothing */;
+    return c;
+c010032d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0100330:	c9                   	leave  
+c0100331:	c3                   	ret    
+
+c0100332 <readline>:
+ * The readline() function returns the text of the line read. If some errors
+ * are happened, NULL is returned. The return value is a global variable,
+ * thus it should be copied before it is used.
+ * */
+char *
+readline(const char *prompt) {
+c0100332:	55                   	push   %ebp
+c0100333:	89 e5                	mov    %esp,%ebp
+c0100335:	83 ec 18             	sub    $0x18,%esp
+    if (prompt != NULL) {
+c0100338:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010033c:	74 13                	je     c0100351 <readline+0x1f>
+        cprintf("%s", prompt);
+c010033e:	83 ec 08             	sub    $0x8,%esp
+c0100341:	ff 75 08             	pushl  0x8(%ebp)
+c0100344:	68 a7 b9 10 c0       	push   $0xc010b9a7
+c0100349:	e8 40 ff ff ff       	call   c010028e <cprintf>
+c010034e:	83 c4 10             	add    $0x10,%esp
+    }
+    int i = 0, c;
+c0100351:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    while (1) {
+        c = getchar();
+c0100358:	e8 bc ff ff ff       	call   c0100319 <getchar>
+c010035d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        if (c < 0) {
+c0100360:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0100364:	79 0a                	jns    c0100370 <readline+0x3e>
+            return NULL;
+c0100366:	b8 00 00 00 00       	mov    $0x0,%eax
+c010036b:	e9 82 00 00 00       	jmp    c01003f2 <readline+0xc0>
+        }
+        else if (c >= ' ' && i < BUFSIZE - 1) {
+c0100370:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
+c0100374:	7e 2b                	jle    c01003a1 <readline+0x6f>
+c0100376:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
+c010037d:	7f 22                	jg     c01003a1 <readline+0x6f>
+            cputchar(c);
+c010037f:	83 ec 0c             	sub    $0xc,%esp
+c0100382:	ff 75 f0             	pushl  -0x10(%ebp)
+c0100385:	e8 2a ff ff ff       	call   c01002b4 <cputchar>
+c010038a:	83 c4 10             	add    $0x10,%esp
+            buf[i ++] = c;
+c010038d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100390:	8d 50 01             	lea    0x1(%eax),%edx
+c0100393:	89 55 f4             	mov    %edx,-0xc(%ebp)
+c0100396:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0100399:	88 90 00 dd 1a c0    	mov    %dl,-0x3fe52300(%eax)
+c010039f:	eb 4c                	jmp    c01003ed <readline+0xbb>
+        }
+        else if (c == '\b' && i > 0) {
+c01003a1:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
+c01003a5:	75 1a                	jne    c01003c1 <readline+0x8f>
+c01003a7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01003ab:	7e 14                	jle    c01003c1 <readline+0x8f>
+            cputchar(c);
+c01003ad:	83 ec 0c             	sub    $0xc,%esp
+c01003b0:	ff 75 f0             	pushl  -0x10(%ebp)
+c01003b3:	e8 fc fe ff ff       	call   c01002b4 <cputchar>
+c01003b8:	83 c4 10             	add    $0x10,%esp
+            i --;
+c01003bb:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+c01003bf:	eb 2c                	jmp    c01003ed <readline+0xbb>
+        }
+        else if (c == '\n' || c == '\r') {
+c01003c1:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
+c01003c5:	74 06                	je     c01003cd <readline+0x9b>
+c01003c7:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
+c01003cb:	75 8b                	jne    c0100358 <readline+0x26>
+            cputchar(c);
+c01003cd:	83 ec 0c             	sub    $0xc,%esp
+c01003d0:	ff 75 f0             	pushl  -0x10(%ebp)
+c01003d3:	e8 dc fe ff ff       	call   c01002b4 <cputchar>
+c01003d8:	83 c4 10             	add    $0x10,%esp
+            buf[i] = '\0';
+c01003db:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01003de:	05 00 dd 1a c0       	add    $0xc01add00,%eax
+c01003e3:	c6 00 00             	movb   $0x0,(%eax)
+            return buf;
+c01003e6:	b8 00 dd 1a c0       	mov    $0xc01add00,%eax
+c01003eb:	eb 05                	jmp    c01003f2 <readline+0xc0>
+        }
+    }
+c01003ed:	e9 66 ff ff ff       	jmp    c0100358 <readline+0x26>
+}
+c01003f2:	c9                   	leave  
+c01003f3:	c3                   	ret    
+
+c01003f4 <__panic>:
+/* *
+ * __panic - __panic is called on unresolvable fatal errors. it prints
+ * "panic: 'message'", and then enters the kernel monitor.
+ * */
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+c01003f4:	55                   	push   %ebp
+c01003f5:	89 e5                	mov    %esp,%ebp
+c01003f7:	83 ec 18             	sub    $0x18,%esp
+    if (is_panic) {
+c01003fa:	a1 00 e1 1a c0       	mov    0xc01ae100,%eax
+c01003ff:	85 c0                	test   %eax,%eax
+c0100401:	75 4a                	jne    c010044d <__panic+0x59>
+        goto panic_dead;
+    }
+    is_panic = 1;
+c0100403:	c7 05 00 e1 1a c0 01 	movl   $0x1,0xc01ae100
+c010040a:	00 00 00 
+
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+c010040d:	8d 45 14             	lea    0x14(%ebp),%eax
+c0100410:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("kernel panic at %s:%d:\n    ", file, line);
+c0100413:	83 ec 04             	sub    $0x4,%esp
+c0100416:	ff 75 0c             	pushl  0xc(%ebp)
+c0100419:	ff 75 08             	pushl  0x8(%ebp)
+c010041c:	68 aa b9 10 c0       	push   $0xc010b9aa
+c0100421:	e8 68 fe ff ff       	call   c010028e <cprintf>
+c0100426:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+c0100429:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010042c:	83 ec 08             	sub    $0x8,%esp
+c010042f:	50                   	push   %eax
+c0100430:	ff 75 10             	pushl  0x10(%ebp)
+c0100433:	e8 2d fe ff ff       	call   c0100265 <vcprintf>
+c0100438:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+c010043b:	83 ec 0c             	sub    $0xc,%esp
+c010043e:	68 c6 b9 10 c0       	push   $0xc010b9c6
+c0100443:	e8 46 fe ff ff       	call   c010028e <cprintf>
+c0100448:	83 c4 10             	add    $0x10,%esp
+c010044b:	eb 01                	jmp    c010044e <__panic+0x5a>
+ * "panic: 'message'", and then enters the kernel monitor.
+ * */
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+    if (is_panic) {
+        goto panic_dead;
+c010044d:	90                   	nop
+    vcprintf(fmt, ap);
+    cprintf("\n");
+    va_end(ap);
+
+panic_dead:
+    intr_disable();
+c010044e:	e8 3e 1d 00 00       	call   c0102191 <intr_disable>
+    while (1) {
+        kmonitor(NULL);
+c0100453:	83 ec 0c             	sub    $0xc,%esp
+c0100456:	6a 00                	push   $0x0
+c0100458:	e8 07 09 00 00       	call   c0100d64 <kmonitor>
+c010045d:	83 c4 10             	add    $0x10,%esp
+    }
+c0100460:	eb f1                	jmp    c0100453 <__panic+0x5f>
+
+c0100462 <__warn>:
+}
+
+/* __warn - like panic, but don't */
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+c0100462:	55                   	push   %ebp
+c0100463:	89 e5                	mov    %esp,%ebp
+c0100465:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    va_start(ap, fmt);
+c0100468:	8d 45 14             	lea    0x14(%ebp),%eax
+c010046b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("kernel warning at %s:%d:\n    ", file, line);
+c010046e:	83 ec 04             	sub    $0x4,%esp
+c0100471:	ff 75 0c             	pushl  0xc(%ebp)
+c0100474:	ff 75 08             	pushl  0x8(%ebp)
+c0100477:	68 c8 b9 10 c0       	push   $0xc010b9c8
+c010047c:	e8 0d fe ff ff       	call   c010028e <cprintf>
+c0100481:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+c0100484:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100487:	83 ec 08             	sub    $0x8,%esp
+c010048a:	50                   	push   %eax
+c010048b:	ff 75 10             	pushl  0x10(%ebp)
+c010048e:	e8 d2 fd ff ff       	call   c0100265 <vcprintf>
+c0100493:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+c0100496:	83 ec 0c             	sub    $0xc,%esp
+c0100499:	68 c6 b9 10 c0       	push   $0xc010b9c6
+c010049e:	e8 eb fd ff ff       	call   c010028e <cprintf>
+c01004a3:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+c01004a6:	90                   	nop
+c01004a7:	c9                   	leave  
+c01004a8:	c3                   	ret    
+
+c01004a9 <is_kernel_panic>:
+
+bool
+is_kernel_panic(void) {
+c01004a9:	55                   	push   %ebp
+c01004aa:	89 e5                	mov    %esp,%ebp
+    return is_panic;
+c01004ac:	a1 00 e1 1a c0       	mov    0xc01ae100,%eax
+}
+c01004b1:	5d                   	pop    %ebp
+c01004b2:	c3                   	ret    
+
+c01004b3 <stab_binsearch>:
+ *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
+ * will exit setting left = 118, right = 554.
+ * */
+static void
+stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
+           int type, uintptr_t addr) {
+c01004b3:	55                   	push   %ebp
+c01004b4:	89 e5                	mov    %esp,%ebp
+c01004b6:	83 ec 20             	sub    $0x20,%esp
+    int l = *region_left, r = *region_right, any_matches = 0;
+c01004b9:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01004bc:	8b 00                	mov    (%eax),%eax
+c01004be:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c01004c1:	8b 45 10             	mov    0x10(%ebp),%eax
+c01004c4:	8b 00                	mov    (%eax),%eax
+c01004c6:	89 45 f8             	mov    %eax,-0x8(%ebp)
+c01004c9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+
+    while (l <= r) {
+c01004d0:	e9 d2 00 00 00       	jmp    c01005a7 <stab_binsearch+0xf4>
+        int true_m = (l + r) / 2, m = true_m;
+c01004d5:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c01004d8:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c01004db:	01 d0                	add    %edx,%eax
+c01004dd:	89 c2                	mov    %eax,%edx
+c01004df:	c1 ea 1f             	shr    $0x1f,%edx
+c01004e2:	01 d0                	add    %edx,%eax
+c01004e4:	d1 f8                	sar    %eax
+c01004e6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c01004e9:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01004ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
+
+        // search for earliest stab with right type
+        while (m >= l && stabs[m].n_type != type) {
+c01004ef:	eb 04                	jmp    c01004f5 <stab_binsearch+0x42>
+            m --;
+c01004f1:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
+
+    while (l <= r) {
+        int true_m = (l + r) / 2, m = true_m;
+
+        // search for earliest stab with right type
+        while (m >= l && stabs[m].n_type != type) {
+c01004f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01004f8:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+c01004fb:	7c 1f                	jl     c010051c <stab_binsearch+0x69>
+c01004fd:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0100500:	89 d0                	mov    %edx,%eax
+c0100502:	01 c0                	add    %eax,%eax
+c0100504:	01 d0                	add    %edx,%eax
+c0100506:	c1 e0 02             	shl    $0x2,%eax
+c0100509:	89 c2                	mov    %eax,%edx
+c010050b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010050e:	01 d0                	add    %edx,%eax
+c0100510:	0f b6 40 04          	movzbl 0x4(%eax),%eax
+c0100514:	0f b6 c0             	movzbl %al,%eax
+c0100517:	3b 45 14             	cmp    0x14(%ebp),%eax
+c010051a:	75 d5                	jne    c01004f1 <stab_binsearch+0x3e>
+            m --;
+        }
+        if (m < l) {    // no match in [l, m]
+c010051c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010051f:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+c0100522:	7d 0b                	jge    c010052f <stab_binsearch+0x7c>
+            l = true_m + 1;
+c0100524:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0100527:	83 c0 01             	add    $0x1,%eax
+c010052a:	89 45 fc             	mov    %eax,-0x4(%ebp)
+            continue;
+c010052d:	eb 78                	jmp    c01005a7 <stab_binsearch+0xf4>
+        }
+
+        // actual binary search
+        any_matches = 1;
+c010052f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
+        if (stabs[m].n_value < addr) {
+c0100536:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0100539:	89 d0                	mov    %edx,%eax
+c010053b:	01 c0                	add    %eax,%eax
+c010053d:	01 d0                	add    %edx,%eax
+c010053f:	c1 e0 02             	shl    $0x2,%eax
+c0100542:	89 c2                	mov    %eax,%edx
+c0100544:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100547:	01 d0                	add    %edx,%eax
+c0100549:	8b 40 08             	mov    0x8(%eax),%eax
+c010054c:	3b 45 18             	cmp    0x18(%ebp),%eax
+c010054f:	73 13                	jae    c0100564 <stab_binsearch+0xb1>
+            *region_left = m;
+c0100551:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100554:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0100557:	89 10                	mov    %edx,(%eax)
+            l = true_m + 1;
+c0100559:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010055c:	83 c0 01             	add    $0x1,%eax
+c010055f:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c0100562:	eb 43                	jmp    c01005a7 <stab_binsearch+0xf4>
+        } else if (stabs[m].n_value > addr) {
+c0100564:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0100567:	89 d0                	mov    %edx,%eax
+c0100569:	01 c0                	add    %eax,%eax
+c010056b:	01 d0                	add    %edx,%eax
+c010056d:	c1 e0 02             	shl    $0x2,%eax
+c0100570:	89 c2                	mov    %eax,%edx
+c0100572:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100575:	01 d0                	add    %edx,%eax
+c0100577:	8b 40 08             	mov    0x8(%eax),%eax
+c010057a:	3b 45 18             	cmp    0x18(%ebp),%eax
+c010057d:	76 16                	jbe    c0100595 <stab_binsearch+0xe2>
+            *region_right = m - 1;
+c010057f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0100582:	8d 50 ff             	lea    -0x1(%eax),%edx
+c0100585:	8b 45 10             	mov    0x10(%ebp),%eax
+c0100588:	89 10                	mov    %edx,(%eax)
+            r = m - 1;
+c010058a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010058d:	83 e8 01             	sub    $0x1,%eax
+c0100590:	89 45 f8             	mov    %eax,-0x8(%ebp)
+c0100593:	eb 12                	jmp    c01005a7 <stab_binsearch+0xf4>
+        } else {
+            // exact match for 'addr', but continue loop to find
+            // *region_right
+            *region_left = m;
+c0100595:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100598:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010059b:	89 10                	mov    %edx,(%eax)
+            l = m;
+c010059d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01005a0:	89 45 fc             	mov    %eax,-0x4(%ebp)
+            addr ++;
+c01005a3:	83 45 18 01          	addl   $0x1,0x18(%ebp)
+static void
+stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
+           int type, uintptr_t addr) {
+    int l = *region_left, r = *region_right, any_matches = 0;
+
+    while (l <= r) {
+c01005a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01005aa:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+c01005ad:	0f 8e 22 ff ff ff    	jle    c01004d5 <stab_binsearch+0x22>
+            l = m;
+            addr ++;
+        }
+    }
+
+    if (!any_matches) {
+c01005b3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01005b7:	75 0f                	jne    c01005c8 <stab_binsearch+0x115>
+        *region_right = *region_left - 1;
+c01005b9:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01005bc:	8b 00                	mov    (%eax),%eax
+c01005be:	8d 50 ff             	lea    -0x1(%eax),%edx
+c01005c1:	8b 45 10             	mov    0x10(%ebp),%eax
+c01005c4:	89 10                	mov    %edx,(%eax)
+        l = *region_right;
+        for (; l > *region_left && stabs[l].n_type != type; l --)
+            /* do nothing */;
+        *region_left = l;
+    }
+}
+c01005c6:	eb 3f                	jmp    c0100607 <stab_binsearch+0x154>
+    if (!any_matches) {
+        *region_right = *region_left - 1;
+    }
+    else {
+        // find rightmost region containing 'addr'
+        l = *region_right;
+c01005c8:	8b 45 10             	mov    0x10(%ebp),%eax
+c01005cb:	8b 00                	mov    (%eax),%eax
+c01005cd:	89 45 fc             	mov    %eax,-0x4(%ebp)
+        for (; l > *region_left && stabs[l].n_type != type; l --)
+c01005d0:	eb 04                	jmp    c01005d6 <stab_binsearch+0x123>
+c01005d2:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
+c01005d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01005d9:	8b 00                	mov    (%eax),%eax
+c01005db:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+c01005de:	7d 1f                	jge    c01005ff <stab_binsearch+0x14c>
+c01005e0:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c01005e3:	89 d0                	mov    %edx,%eax
+c01005e5:	01 c0                	add    %eax,%eax
+c01005e7:	01 d0                	add    %edx,%eax
+c01005e9:	c1 e0 02             	shl    $0x2,%eax
+c01005ec:	89 c2                	mov    %eax,%edx
+c01005ee:	8b 45 08             	mov    0x8(%ebp),%eax
+c01005f1:	01 d0                	add    %edx,%eax
+c01005f3:	0f b6 40 04          	movzbl 0x4(%eax),%eax
+c01005f7:	0f b6 c0             	movzbl %al,%eax
+c01005fa:	3b 45 14             	cmp    0x14(%ebp),%eax
+c01005fd:	75 d3                	jne    c01005d2 <stab_binsearch+0x11f>
+            /* do nothing */;
+        *region_left = l;
+c01005ff:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100602:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c0100605:	89 10                	mov    %edx,(%eax)
+    }
+}
+c0100607:	90                   	nop
+c0100608:	c9                   	leave  
+c0100609:	c3                   	ret    
+
+c010060a <debuginfo_eip>:
+ * the specified instruction address, @addr.  Returns 0 if information
+ * was found, and negative if not.  But even if it returns negative it
+ * has stored some information into '*info'.
+ * */
+int
+debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
+c010060a:	55                   	push   %ebp
+c010060b:	89 e5                	mov    %esp,%ebp
+c010060d:	83 ec 38             	sub    $0x38,%esp
+    const struct stab *stabs, *stab_end;
+    const char *stabstr, *stabstr_end;
+
+    info->eip_file = "<unknown>";
+c0100610:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100613:	c7 00 e8 b9 10 c0    	movl   $0xc010b9e8,(%eax)
+    info->eip_line = 0;
+c0100619:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010061c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
+    info->eip_fn_name = "<unknown>";
+c0100623:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100626:	c7 40 08 e8 b9 10 c0 	movl   $0xc010b9e8,0x8(%eax)
+    info->eip_fn_namelen = 9;
+c010062d:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100630:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
+    info->eip_fn_addr = addr;
+c0100637:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010063a:	8b 55 08             	mov    0x8(%ebp),%edx
+c010063d:	89 50 10             	mov    %edx,0x10(%eax)
+    info->eip_fn_narg = 0;
+c0100640:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100643:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
+
+    // find the relevant set of stabs
+    if (addr >= KERNBASE) {
+c010064a:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
+c0100651:	76 21                	jbe    c0100674 <debuginfo_eip+0x6a>
+        stabs = __STAB_BEGIN__;
+c0100653:	c7 45 f4 a0 e0 10 c0 	movl   $0xc010e0a0,-0xc(%ebp)
+        stab_end = __STAB_END__;
+c010065a:	c7 45 f0 68 35 12 c0 	movl   $0xc0123568,-0x10(%ebp)
+        stabstr = __STABSTR_BEGIN__;
+c0100661:	c7 45 ec 69 35 12 c0 	movl   $0xc0123569,-0x14(%ebp)
+        stabstr_end = __STABSTR_END__;
+c0100668:	c7 45 e8 1b 97 12 c0 	movl   $0xc012971b,-0x18(%ebp)
+c010066f:	e9 c3 00 00 00       	jmp    c0100737 <debuginfo_eip+0x12d>
+    }
+    else {
+        // user-program linker script, tools/user.ld puts the information about the
+        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
+        // and __STABSTR_END__) in a structure located at virtual address USTAB.
+        const struct userstabdata *usd = (struct userstabdata *)USTAB;
+c0100674:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)
+
+        // make sure that debugger (current process) can access this memory
+        struct mm_struct *mm;
+        if (current == NULL || (mm = current->mm) == NULL) {
+c010067b:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c0100680:	85 c0                	test   %eax,%eax
+c0100682:	74 11                	je     c0100695 <debuginfo_eip+0x8b>
+c0100684:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c0100689:	8b 40 18             	mov    0x18(%eax),%eax
+c010068c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c010068f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+c0100693:	75 0a                	jne    c010069f <debuginfo_eip+0x95>
+            return -1;
+c0100695:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c010069a:	e9 4e 03 00 00       	jmp    c01009ed <debuginfo_eip+0x3e3>
+        }
+        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
+c010069f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01006a2:	6a 00                	push   $0x0
+c01006a4:	6a 10                	push   $0x10
+c01006a6:	50                   	push   %eax
+c01006a7:	ff 75 e0             	pushl  -0x20(%ebp)
+c01006aa:	e8 be 5e 00 00       	call   c010656d <user_mem_check>
+c01006af:	83 c4 10             	add    $0x10,%esp
+c01006b2:	85 c0                	test   %eax,%eax
+c01006b4:	75 0a                	jne    c01006c0 <debuginfo_eip+0xb6>
+            return -1;
+c01006b6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c01006bb:	e9 2d 03 00 00       	jmp    c01009ed <debuginfo_eip+0x3e3>
+        }
+
+        stabs = usd->stabs;
+c01006c0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01006c3:	8b 00                	mov    (%eax),%eax
+c01006c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        stab_end = usd->stab_end;
+c01006c8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01006cb:	8b 40 04             	mov    0x4(%eax),%eax
+c01006ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        stabstr = usd->stabstr;
+c01006d1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01006d4:	8b 40 08             	mov    0x8(%eax),%eax
+c01006d7:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        stabstr_end = usd->stabstr_end;
+c01006da:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01006dd:	8b 40 0c             	mov    0xc(%eax),%eax
+c01006e0:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+        // make sure the STABS and string table memory is valid
+        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
+c01006e3:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c01006e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01006e9:	29 c2                	sub    %eax,%edx
+c01006eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01006ee:	6a 00                	push   $0x0
+c01006f0:	52                   	push   %edx
+c01006f1:	50                   	push   %eax
+c01006f2:	ff 75 e0             	pushl  -0x20(%ebp)
+c01006f5:	e8 73 5e 00 00       	call   c010656d <user_mem_check>
+c01006fa:	83 c4 10             	add    $0x10,%esp
+c01006fd:	85 c0                	test   %eax,%eax
+c01006ff:	75 0a                	jne    c010070b <debuginfo_eip+0x101>
+            return -1;
+c0100701:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c0100706:	e9 e2 02 00 00       	jmp    c01009ed <debuginfo_eip+0x3e3>
+        }
+        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
+c010070b:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010070e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0100711:	29 c2                	sub    %eax,%edx
+c0100713:	89 d0                	mov    %edx,%eax
+c0100715:	89 c2                	mov    %eax,%edx
+c0100717:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010071a:	6a 00                	push   $0x0
+c010071c:	52                   	push   %edx
+c010071d:	50                   	push   %eax
+c010071e:	ff 75 e0             	pushl  -0x20(%ebp)
+c0100721:	e8 47 5e 00 00       	call   c010656d <user_mem_check>
+c0100726:	83 c4 10             	add    $0x10,%esp
+c0100729:	85 c0                	test   %eax,%eax
+c010072b:	75 0a                	jne    c0100737 <debuginfo_eip+0x12d>
+            return -1;
+c010072d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c0100732:	e9 b6 02 00 00       	jmp    c01009ed <debuginfo_eip+0x3e3>
+        }
+    }
+
+    // String table validity checks
+    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
+c0100737:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010073a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c010073d:	76 0d                	jbe    c010074c <debuginfo_eip+0x142>
+c010073f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0100742:	83 e8 01             	sub    $0x1,%eax
+c0100745:	0f b6 00             	movzbl (%eax),%eax
+c0100748:	84 c0                	test   %al,%al
+c010074a:	74 0a                	je     c0100756 <debuginfo_eip+0x14c>
+        return -1;
+c010074c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c0100751:	e9 97 02 00 00       	jmp    c01009ed <debuginfo_eip+0x3e3>
+    // 'eip'.  First, we find the basic source file containing 'eip'.
+    // Then, we look in that source file for the function.  Then we look
+    // for the line number.
+
+    // Search the entire set of stabs for the source file (type N_SO).
+    int lfile = 0, rfile = (stab_end - stabs) - 1;
+c0100756:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+c010075d:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0100760:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100763:	29 c2                	sub    %eax,%edx
+c0100765:	89 d0                	mov    %edx,%eax
+c0100767:	c1 f8 02             	sar    $0x2,%eax
+c010076a:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
+c0100770:	83 e8 01             	sub    $0x1,%eax
+c0100773:	89 45 d8             	mov    %eax,-0x28(%ebp)
+    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
+c0100776:	83 ec 0c             	sub    $0xc,%esp
+c0100779:	ff 75 08             	pushl  0x8(%ebp)
+c010077c:	6a 64                	push   $0x64
+c010077e:	8d 45 d8             	lea    -0x28(%ebp),%eax
+c0100781:	50                   	push   %eax
+c0100782:	8d 45 dc             	lea    -0x24(%ebp),%eax
+c0100785:	50                   	push   %eax
+c0100786:	ff 75 f4             	pushl  -0xc(%ebp)
+c0100789:	e8 25 fd ff ff       	call   c01004b3 <stab_binsearch>
+c010078e:	83 c4 20             	add    $0x20,%esp
+    if (lfile == 0)
+c0100791:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0100794:	85 c0                	test   %eax,%eax
+c0100796:	75 0a                	jne    c01007a2 <debuginfo_eip+0x198>
+        return -1;
+c0100798:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c010079d:	e9 4b 02 00 00       	jmp    c01009ed <debuginfo_eip+0x3e3>
+
+    // Search within that file's stabs for the function definition
+    // (N_FUN).
+    int lfun = lfile, rfun = rfile;
+c01007a2:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01007a5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+c01007a8:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c01007ab:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    int lline, rline;
+    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
+c01007ae:	83 ec 0c             	sub    $0xc,%esp
+c01007b1:	ff 75 08             	pushl  0x8(%ebp)
+c01007b4:	6a 24                	push   $0x24
+c01007b6:	8d 45 d0             	lea    -0x30(%ebp),%eax
+c01007b9:	50                   	push   %eax
+c01007ba:	8d 45 d4             	lea    -0x2c(%ebp),%eax
+c01007bd:	50                   	push   %eax
+c01007be:	ff 75 f4             	pushl  -0xc(%ebp)
+c01007c1:	e8 ed fc ff ff       	call   c01004b3 <stab_binsearch>
+c01007c6:	83 c4 20             	add    $0x20,%esp
+
+    if (lfun <= rfun) {
+c01007c9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c01007cc:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c01007cf:	39 c2                	cmp    %eax,%edx
+c01007d1:	7f 7c                	jg     c010084f <debuginfo_eip+0x245>
+        // stabs[lfun] points to the function name
+        // in the string table, but check bounds just in case.
+        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
+c01007d3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c01007d6:	89 c2                	mov    %eax,%edx
+c01007d8:	89 d0                	mov    %edx,%eax
+c01007da:	01 c0                	add    %eax,%eax
+c01007dc:	01 d0                	add    %edx,%eax
+c01007de:	c1 e0 02             	shl    $0x2,%eax
+c01007e1:	89 c2                	mov    %eax,%edx
+c01007e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01007e6:	01 d0                	add    %edx,%eax
+c01007e8:	8b 00                	mov    (%eax),%eax
+c01007ea:	8b 4d e8             	mov    -0x18(%ebp),%ecx
+c01007ed:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c01007f0:	29 d1                	sub    %edx,%ecx
+c01007f2:	89 ca                	mov    %ecx,%edx
+c01007f4:	39 d0                	cmp    %edx,%eax
+c01007f6:	73 22                	jae    c010081a <debuginfo_eip+0x210>
+            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
+c01007f8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c01007fb:	89 c2                	mov    %eax,%edx
+c01007fd:	89 d0                	mov    %edx,%eax
+c01007ff:	01 c0                	add    %eax,%eax
+c0100801:	01 d0                	add    %edx,%eax
+c0100803:	c1 e0 02             	shl    $0x2,%eax
+c0100806:	89 c2                	mov    %eax,%edx
+c0100808:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010080b:	01 d0                	add    %edx,%eax
+c010080d:	8b 10                	mov    (%eax),%edx
+c010080f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0100812:	01 c2                	add    %eax,%edx
+c0100814:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100817:	89 50 08             	mov    %edx,0x8(%eax)
+        }
+        info->eip_fn_addr = stabs[lfun].n_value;
+c010081a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010081d:	89 c2                	mov    %eax,%edx
+c010081f:	89 d0                	mov    %edx,%eax
+c0100821:	01 c0                	add    %eax,%eax
+c0100823:	01 d0                	add    %edx,%eax
+c0100825:	c1 e0 02             	shl    $0x2,%eax
+c0100828:	89 c2                	mov    %eax,%edx
+c010082a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010082d:	01 d0                	add    %edx,%eax
+c010082f:	8b 50 08             	mov    0x8(%eax),%edx
+c0100832:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100835:	89 50 10             	mov    %edx,0x10(%eax)
+        addr -= info->eip_fn_addr;
+c0100838:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010083b:	8b 40 10             	mov    0x10(%eax),%eax
+c010083e:	29 45 08             	sub    %eax,0x8(%ebp)
+        // Search within the function definition for the line number.
+        lline = lfun;
+c0100841:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0100844:	89 45 cc             	mov    %eax,-0x34(%ebp)
+        rline = rfun;
+c0100847:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010084a:	89 45 c8             	mov    %eax,-0x38(%ebp)
+c010084d:	eb 15                	jmp    c0100864 <debuginfo_eip+0x25a>
+    } else {
+        // Couldn't find function stab!  Maybe we're in an assembly
+        // file.  Search the whole file for the line number.
+        info->eip_fn_addr = addr;
+c010084f:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100852:	8b 55 08             	mov    0x8(%ebp),%edx
+c0100855:	89 50 10             	mov    %edx,0x10(%eax)
+        lline = lfile;
+c0100858:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010085b:	89 45 cc             	mov    %eax,-0x34(%ebp)
+        rline = rfile;
+c010085e:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0100861:	89 45 c8             	mov    %eax,-0x38(%ebp)
+    }
+    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
+c0100864:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100867:	8b 40 08             	mov    0x8(%eax),%eax
+c010086a:	83 ec 08             	sub    $0x8,%esp
+c010086d:	6a 3a                	push   $0x3a
+c010086f:	50                   	push   %eax
+c0100870:	e8 68 a6 00 00       	call   c010aedd <strfind>
+c0100875:	83 c4 10             	add    $0x10,%esp
+c0100878:	89 c2                	mov    %eax,%edx
+c010087a:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010087d:	8b 40 08             	mov    0x8(%eax),%eax
+c0100880:	29 c2                	sub    %eax,%edx
+c0100882:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100885:	89 50 0c             	mov    %edx,0xc(%eax)
+
+    // Search within [lline, rline] for the line number stab.
+    // If found, set info->eip_line to the right line number.
+    // If not found, return -1.
+    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
+c0100888:	83 ec 0c             	sub    $0xc,%esp
+c010088b:	ff 75 08             	pushl  0x8(%ebp)
+c010088e:	6a 44                	push   $0x44
+c0100890:	8d 45 c8             	lea    -0x38(%ebp),%eax
+c0100893:	50                   	push   %eax
+c0100894:	8d 45 cc             	lea    -0x34(%ebp),%eax
+c0100897:	50                   	push   %eax
+c0100898:	ff 75 f4             	pushl  -0xc(%ebp)
+c010089b:	e8 13 fc ff ff       	call   c01004b3 <stab_binsearch>
+c01008a0:	83 c4 20             	add    $0x20,%esp
+    if (lline <= rline) {
+c01008a3:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c01008a6:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c01008a9:	39 c2                	cmp    %eax,%edx
+c01008ab:	7f 24                	jg     c01008d1 <debuginfo_eip+0x2c7>
+        info->eip_line = stabs[rline].n_desc;
+c01008ad:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c01008b0:	89 c2                	mov    %eax,%edx
+c01008b2:	89 d0                	mov    %edx,%eax
+c01008b4:	01 c0                	add    %eax,%eax
+c01008b6:	01 d0                	add    %edx,%eax
+c01008b8:	c1 e0 02             	shl    $0x2,%eax
+c01008bb:	89 c2                	mov    %eax,%edx
+c01008bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01008c0:	01 d0                	add    %edx,%eax
+c01008c2:	0f b7 40 06          	movzwl 0x6(%eax),%eax
+c01008c6:	0f b7 d0             	movzwl %ax,%edx
+c01008c9:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01008cc:	89 50 04             	mov    %edx,0x4(%eax)
+
+    // Search backwards from the line number for the relevant filename stab.
+    // We can't just use the "lfile" stab because inlined functions
+    // can interpolate code from a different file!
+    // Such included source files use the N_SOL stab type.
+    while (lline >= lfile
+c01008cf:	eb 13                	jmp    c01008e4 <debuginfo_eip+0x2da>
+    // If not found, return -1.
+    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
+    if (lline <= rline) {
+        info->eip_line = stabs[rline].n_desc;
+    } else {
+        return -1;
+c01008d1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c01008d6:	e9 12 01 00 00       	jmp    c01009ed <debuginfo_eip+0x3e3>
+    // can interpolate code from a different file!
+    // Such included source files use the N_SOL stab type.
+    while (lline >= lfile
+           && stabs[lline].n_type != N_SOL
+           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
+        lline --;
+c01008db:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c01008de:	83 e8 01             	sub    $0x1,%eax
+c01008e1:	89 45 cc             	mov    %eax,-0x34(%ebp)
+
+    // Search backwards from the line number for the relevant filename stab.
+    // We can't just use the "lfile" stab because inlined functions
+    // can interpolate code from a different file!
+    // Such included source files use the N_SOL stab type.
+    while (lline >= lfile
+c01008e4:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c01008e7:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01008ea:	39 c2                	cmp    %eax,%edx
+c01008ec:	7c 56                	jl     c0100944 <debuginfo_eip+0x33a>
+           && stabs[lline].n_type != N_SOL
+c01008ee:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c01008f1:	89 c2                	mov    %eax,%edx
+c01008f3:	89 d0                	mov    %edx,%eax
+c01008f5:	01 c0                	add    %eax,%eax
+c01008f7:	01 d0                	add    %edx,%eax
+c01008f9:	c1 e0 02             	shl    $0x2,%eax
+c01008fc:	89 c2                	mov    %eax,%edx
+c01008fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100901:	01 d0                	add    %edx,%eax
+c0100903:	0f b6 40 04          	movzbl 0x4(%eax),%eax
+c0100907:	3c 84                	cmp    $0x84,%al
+c0100909:	74 39                	je     c0100944 <debuginfo_eip+0x33a>
+           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
+c010090b:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010090e:	89 c2                	mov    %eax,%edx
+c0100910:	89 d0                	mov    %edx,%eax
+c0100912:	01 c0                	add    %eax,%eax
+c0100914:	01 d0                	add    %edx,%eax
+c0100916:	c1 e0 02             	shl    $0x2,%eax
+c0100919:	89 c2                	mov    %eax,%edx
+c010091b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010091e:	01 d0                	add    %edx,%eax
+c0100920:	0f b6 40 04          	movzbl 0x4(%eax),%eax
+c0100924:	3c 64                	cmp    $0x64,%al
+c0100926:	75 b3                	jne    c01008db <debuginfo_eip+0x2d1>
+c0100928:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010092b:	89 c2                	mov    %eax,%edx
+c010092d:	89 d0                	mov    %edx,%eax
+c010092f:	01 c0                	add    %eax,%eax
+c0100931:	01 d0                	add    %edx,%eax
+c0100933:	c1 e0 02             	shl    $0x2,%eax
+c0100936:	89 c2                	mov    %eax,%edx
+c0100938:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010093b:	01 d0                	add    %edx,%eax
+c010093d:	8b 40 08             	mov    0x8(%eax),%eax
+c0100940:	85 c0                	test   %eax,%eax
+c0100942:	74 97                	je     c01008db <debuginfo_eip+0x2d1>
+        lline --;
+    }
+    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
+c0100944:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c0100947:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010094a:	39 c2                	cmp    %eax,%edx
+c010094c:	7c 46                	jl     c0100994 <debuginfo_eip+0x38a>
+c010094e:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0100951:	89 c2                	mov    %eax,%edx
+c0100953:	89 d0                	mov    %edx,%eax
+c0100955:	01 c0                	add    %eax,%eax
+c0100957:	01 d0                	add    %edx,%eax
+c0100959:	c1 e0 02             	shl    $0x2,%eax
+c010095c:	89 c2                	mov    %eax,%edx
+c010095e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100961:	01 d0                	add    %edx,%eax
+c0100963:	8b 00                	mov    (%eax),%eax
+c0100965:	8b 4d e8             	mov    -0x18(%ebp),%ecx
+c0100968:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010096b:	29 d1                	sub    %edx,%ecx
+c010096d:	89 ca                	mov    %ecx,%edx
+c010096f:	39 d0                	cmp    %edx,%eax
+c0100971:	73 21                	jae    c0100994 <debuginfo_eip+0x38a>
+        info->eip_file = stabstr + stabs[lline].n_strx;
+c0100973:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0100976:	89 c2                	mov    %eax,%edx
+c0100978:	89 d0                	mov    %edx,%eax
+c010097a:	01 c0                	add    %eax,%eax
+c010097c:	01 d0                	add    %edx,%eax
+c010097e:	c1 e0 02             	shl    $0x2,%eax
+c0100981:	89 c2                	mov    %eax,%edx
+c0100983:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100986:	01 d0                	add    %edx,%eax
+c0100988:	8b 10                	mov    (%eax),%edx
+c010098a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010098d:	01 c2                	add    %eax,%edx
+c010098f:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100992:	89 10                	mov    %edx,(%eax)
+    }
+
+    // Set eip_fn_narg to the number of arguments taken by the function,
+    // or 0 if there was no containing function.
+    if (lfun < rfun) {
+c0100994:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0100997:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010099a:	39 c2                	cmp    %eax,%edx
+c010099c:	7d 4a                	jge    c01009e8 <debuginfo_eip+0x3de>
+        for (lline = lfun + 1;
+c010099e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c01009a1:	83 c0 01             	add    $0x1,%eax
+c01009a4:	89 45 cc             	mov    %eax,-0x34(%ebp)
+c01009a7:	eb 18                	jmp    c01009c1 <debuginfo_eip+0x3b7>
+             lline < rfun && stabs[lline].n_type == N_PSYM;
+             lline ++) {
+            info->eip_fn_narg ++;
+c01009a9:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01009ac:	8b 40 14             	mov    0x14(%eax),%eax
+c01009af:	8d 50 01             	lea    0x1(%eax),%edx
+c01009b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01009b5:	89 50 14             	mov    %edx,0x14(%eax)
+    // Set eip_fn_narg to the number of arguments taken by the function,
+    // or 0 if there was no containing function.
+    if (lfun < rfun) {
+        for (lline = lfun + 1;
+             lline < rfun && stabs[lline].n_type == N_PSYM;
+             lline ++) {
+c01009b8:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c01009bb:	83 c0 01             	add    $0x1,%eax
+c01009be:	89 45 cc             	mov    %eax,-0x34(%ebp)
+
+    // Set eip_fn_narg to the number of arguments taken by the function,
+    // or 0 if there was no containing function.
+    if (lfun < rfun) {
+        for (lline = lfun + 1;
+             lline < rfun && stabs[lline].n_type == N_PSYM;
+c01009c1:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c01009c4:	8b 45 d0             	mov    -0x30(%ebp),%eax
+    }
+
+    // Set eip_fn_narg to the number of arguments taken by the function,
+    // or 0 if there was no containing function.
+    if (lfun < rfun) {
+        for (lline = lfun + 1;
+c01009c7:	39 c2                	cmp    %eax,%edx
+c01009c9:	7d 1d                	jge    c01009e8 <debuginfo_eip+0x3de>
+             lline < rfun && stabs[lline].n_type == N_PSYM;
+c01009cb:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c01009ce:	89 c2                	mov    %eax,%edx
+c01009d0:	89 d0                	mov    %edx,%eax
+c01009d2:	01 c0                	add    %eax,%eax
+c01009d4:	01 d0                	add    %edx,%eax
+c01009d6:	c1 e0 02             	shl    $0x2,%eax
+c01009d9:	89 c2                	mov    %eax,%edx
+c01009db:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01009de:	01 d0                	add    %edx,%eax
+c01009e0:	0f b6 40 04          	movzbl 0x4(%eax),%eax
+c01009e4:	3c a0                	cmp    $0xa0,%al
+c01009e6:	74 c1                	je     c01009a9 <debuginfo_eip+0x39f>
+             lline ++) {
+            info->eip_fn_narg ++;
+        }
+    }
+    return 0;
+c01009e8:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01009ed:	c9                   	leave  
+c01009ee:	c3                   	ret    
+
+c01009ef <print_kerninfo>:
+ * print_kerninfo - print the information about kernel, including the location
+ * of kernel entry, the start addresses of data and text segements, the start
+ * address of free memory and how many memory that kernel has used.
+ * */
+void
+print_kerninfo(void) {
+c01009ef:	55                   	push   %ebp
+c01009f0:	89 e5                	mov    %esp,%ebp
+c01009f2:	83 ec 08             	sub    $0x8,%esp
+    extern char etext[], edata[], end[], kern_init[];
+    cprintf("Special kernel symbols:\n");
+c01009f5:	83 ec 0c             	sub    $0xc,%esp
+c01009f8:	68 f2 b9 10 c0       	push   $0xc010b9f2
+c01009fd:	e8 8c f8 ff ff       	call   c010028e <cprintf>
+c0100a02:	83 c4 10             	add    $0x10,%esp
+    cprintf("  entry  0x%08x (phys)\n", kern_init);
+c0100a05:	83 ec 08             	sub    $0x8,%esp
+c0100a08:	68 2a 00 10 c0       	push   $0xc010002a
+c0100a0d:	68 0b ba 10 c0       	push   $0xc010ba0b
+c0100a12:	e8 77 f8 ff ff       	call   c010028e <cprintf>
+c0100a17:	83 c4 10             	add    $0x10,%esp
+    cprintf("  etext  0x%08x (phys)\n", etext);
+c0100a1a:	83 ec 08             	sub    $0x8,%esp
+c0100a1d:	68 fd b8 10 c0       	push   $0xc010b8fd
+c0100a22:	68 23 ba 10 c0       	push   $0xc010ba23
+c0100a27:	e8 62 f8 ff ff       	call   c010028e <cprintf>
+c0100a2c:	83 c4 10             	add    $0x10,%esp
+    cprintf("  edata  0x%08x (phys)\n", edata);
+c0100a2f:	83 ec 08             	sub    $0x8,%esp
+c0100a32:	68 dc dc 1a c0       	push   $0xc01adcdc
+c0100a37:	68 3b ba 10 c0       	push   $0xc010ba3b
+c0100a3c:	e8 4d f8 ff ff       	call   c010028e <cprintf>
+c0100a41:	83 c4 10             	add    $0x10,%esp
+    cprintf("  end    0x%08x (phys)\n", end);
+c0100a44:	83 ec 08             	sub    $0x8,%esp
+c0100a47:	68 58 0e 1b c0       	push   $0xc01b0e58
+c0100a4c:	68 53 ba 10 c0       	push   $0xc010ba53
+c0100a51:	e8 38 f8 ff ff       	call   c010028e <cprintf>
+c0100a56:	83 c4 10             	add    $0x10,%esp
+    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
+c0100a59:	b8 58 0e 1b c0       	mov    $0xc01b0e58,%eax
+c0100a5e:	05 ff 03 00 00       	add    $0x3ff,%eax
+c0100a63:	ba 2a 00 10 c0       	mov    $0xc010002a,%edx
+c0100a68:	29 d0                	sub    %edx,%eax
+c0100a6a:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
+c0100a70:	85 c0                	test   %eax,%eax
+c0100a72:	0f 48 c2             	cmovs  %edx,%eax
+c0100a75:	c1 f8 0a             	sar    $0xa,%eax
+c0100a78:	83 ec 08             	sub    $0x8,%esp
+c0100a7b:	50                   	push   %eax
+c0100a7c:	68 6c ba 10 c0       	push   $0xc010ba6c
+c0100a81:	e8 08 f8 ff ff       	call   c010028e <cprintf>
+c0100a86:	83 c4 10             	add    $0x10,%esp
+}
+c0100a89:	90                   	nop
+c0100a8a:	c9                   	leave  
+c0100a8b:	c3                   	ret    
+
+c0100a8c <print_debuginfo>:
+/* *
+ * print_debuginfo - read and print the stat information for the address @eip,
+ * and info.eip_fn_addr should be the first address of the related function.
+ * */
+void
+print_debuginfo(uintptr_t eip) {
+c0100a8c:	55                   	push   %ebp
+c0100a8d:	89 e5                	mov    %esp,%ebp
+c0100a8f:	81 ec 28 01 00 00    	sub    $0x128,%esp
+    struct eipdebuginfo info;
+    if (debuginfo_eip(eip, &info) != 0) {
+c0100a95:	83 ec 08             	sub    $0x8,%esp
+c0100a98:	8d 45 dc             	lea    -0x24(%ebp),%eax
+c0100a9b:	50                   	push   %eax
+c0100a9c:	ff 75 08             	pushl  0x8(%ebp)
+c0100a9f:	e8 66 fb ff ff       	call   c010060a <debuginfo_eip>
+c0100aa4:	83 c4 10             	add    $0x10,%esp
+c0100aa7:	85 c0                	test   %eax,%eax
+c0100aa9:	74 15                	je     c0100ac0 <print_debuginfo+0x34>
+        cprintf("    <unknow>: -- 0x%08x --\n", eip);
+c0100aab:	83 ec 08             	sub    $0x8,%esp
+c0100aae:	ff 75 08             	pushl  0x8(%ebp)
+c0100ab1:	68 96 ba 10 c0       	push   $0xc010ba96
+c0100ab6:	e8 d3 f7 ff ff       	call   c010028e <cprintf>
+c0100abb:	83 c4 10             	add    $0x10,%esp
+        }
+        fnname[j] = '\0';
+        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
+                fnname, eip - info.eip_fn_addr);
+    }
+}
+c0100abe:	eb 65                	jmp    c0100b25 <print_debuginfo+0x99>
+        cprintf("    <unknow>: -- 0x%08x --\n", eip);
+    }
+    else {
+        char fnname[256];
+        int j;
+        for (j = 0; j < info.eip_fn_namelen; j ++) {
+c0100ac0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0100ac7:	eb 1c                	jmp    c0100ae5 <print_debuginfo+0x59>
+            fnname[j] = info.eip_fn_name[j];
+c0100ac9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0100acc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100acf:	01 d0                	add    %edx,%eax
+c0100ad1:	0f b6 00             	movzbl (%eax),%eax
+c0100ad4:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
+c0100ada:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0100add:	01 ca                	add    %ecx,%edx
+c0100adf:	88 02                	mov    %al,(%edx)
+        cprintf("    <unknow>: -- 0x%08x --\n", eip);
+    }
+    else {
+        char fnname[256];
+        int j;
+        for (j = 0; j < info.eip_fn_namelen; j ++) {
+c0100ae1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0100ae5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0100ae8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0100aeb:	7f dc                	jg     c0100ac9 <print_debuginfo+0x3d>
+            fnname[j] = info.eip_fn_name[j];
+        }
+        fnname[j] = '\0';
+c0100aed:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
+c0100af3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100af6:	01 d0                	add    %edx,%eax
+c0100af8:	c6 00 00             	movb   $0x0,(%eax)
+        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
+                fnname, eip - info.eip_fn_addr);
+c0100afb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+        int j;
+        for (j = 0; j < info.eip_fn_namelen; j ++) {
+            fnname[j] = info.eip_fn_name[j];
+        }
+        fnname[j] = '\0';
+        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
+c0100afe:	8b 55 08             	mov    0x8(%ebp),%edx
+c0100b01:	89 d1                	mov    %edx,%ecx
+c0100b03:	29 c1                	sub    %eax,%ecx
+c0100b05:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0100b08:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0100b0b:	83 ec 0c             	sub    $0xc,%esp
+c0100b0e:	51                   	push   %ecx
+c0100b0f:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
+c0100b15:	51                   	push   %ecx
+c0100b16:	52                   	push   %edx
+c0100b17:	50                   	push   %eax
+c0100b18:	68 b2 ba 10 c0       	push   $0xc010bab2
+c0100b1d:	e8 6c f7 ff ff       	call   c010028e <cprintf>
+c0100b22:	83 c4 20             	add    $0x20,%esp
+                fnname, eip - info.eip_fn_addr);
+    }
+}
+c0100b25:	90                   	nop
+c0100b26:	c9                   	leave  
+c0100b27:	c3                   	ret    
+
+c0100b28 <read_eip>:
+
+static __noinline uint32_t
+read_eip(void) {
+c0100b28:	55                   	push   %ebp
+c0100b29:	89 e5                	mov    %esp,%ebp
+c0100b2b:	83 ec 10             	sub    $0x10,%esp
+    uint32_t eip;
+    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
+c0100b2e:	8b 45 04             	mov    0x4(%ebp),%eax
+c0100b31:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return eip;
+c0100b34:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+c0100b37:	c9                   	leave  
+c0100b38:	c3                   	ret    
+
+c0100b39 <print_stackframe>:
+ *
+ * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
+ * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
+ * */
+void
+print_stackframe(void) {
+c0100b39:	55                   	push   %ebp
+c0100b3a:	89 e5                	mov    %esp,%ebp
+c0100b3c:	83 ec 28             	sub    $0x28,%esp
+}
+
+static inline uint32_t
+read_ebp(void) {
+    uint32_t ebp;
+    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
+c0100b3f:	89 e8                	mov    %ebp,%eax
+c0100b41:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    return ebp;
+c0100b44:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+      *    (3.5) popup a calling stackframe
+      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
+      *                   the calling funciton's ebp = ss:[ebp]
+      */
+
+	uint32_t ebp = read_ebp();
+c0100b47:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    uint32_t eip = read_eip();
+c0100b4a:	e8 d9 ff ff ff       	call   c0100b28 <read_eip>
+c0100b4f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int i = 0;
+c0100b52:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+    while (ebp && i<STACKFRAME_DEPTH){
+c0100b59:	e9 87 00 00 00       	jmp    c0100be5 <print_stackframe+0xac>
+    	cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
+c0100b5e:	83 ec 04             	sub    $0x4,%esp
+c0100b61:	ff 75 f0             	pushl  -0x10(%ebp)
+c0100b64:	ff 75 f4             	pushl  -0xc(%ebp)
+c0100b67:	68 c4 ba 10 c0       	push   $0xc010bac4
+c0100b6c:	e8 1d f7 ff ff       	call   c010028e <cprintf>
+c0100b71:	83 c4 10             	add    $0x10,%esp
+    	for (int j=0; j<4; j++) cprintf("0x%08x ", ((uint32_t *)ebp)[j+2]);
+c0100b74:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+c0100b7b:	eb 29                	jmp    c0100ba6 <print_stackframe+0x6d>
+c0100b7d:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0100b80:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0100b87:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100b8a:	01 d0                	add    %edx,%eax
+c0100b8c:	83 c0 08             	add    $0x8,%eax
+c0100b8f:	8b 00                	mov    (%eax),%eax
+c0100b91:	83 ec 08             	sub    $0x8,%esp
+c0100b94:	50                   	push   %eax
+c0100b95:	68 e0 ba 10 c0       	push   $0xc010bae0
+c0100b9a:	e8 ef f6 ff ff       	call   c010028e <cprintf>
+c0100b9f:	83 c4 10             	add    $0x10,%esp
+c0100ba2:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
+c0100ba6:	83 7d e8 03          	cmpl   $0x3,-0x18(%ebp)
+c0100baa:	7e d1                	jle    c0100b7d <print_stackframe+0x44>
+    	cprintf("\n");
+c0100bac:	83 ec 0c             	sub    $0xc,%esp
+c0100baf:	68 e8 ba 10 c0       	push   $0xc010bae8
+c0100bb4:	e8 d5 f6 ff ff       	call   c010028e <cprintf>
+c0100bb9:	83 c4 10             	add    $0x10,%esp
+    	print_debuginfo(eip - 1);
+c0100bbc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0100bbf:	83 e8 01             	sub    $0x1,%eax
+c0100bc2:	83 ec 0c             	sub    $0xc,%esp
+c0100bc5:	50                   	push   %eax
+c0100bc6:	e8 c1 fe ff ff       	call   c0100a8c <print_debuginfo>
+c0100bcb:	83 c4 10             	add    $0x10,%esp
+    	i++;
+c0100bce:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+    	eip = ((uint32_t *)ebp)[1];
+c0100bd2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100bd5:	83 c0 04             	add    $0x4,%eax
+c0100bd8:	8b 00                	mov    (%eax),%eax
+c0100bda:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    	ebp = ((uint32_t *)ebp)[0];
+c0100bdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100be0:	8b 00                	mov    (%eax),%eax
+c0100be2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+      */
+
+	uint32_t ebp = read_ebp();
+    uint32_t eip = read_eip();
+    int i = 0;
+    while (ebp && i<STACKFRAME_DEPTH){
+c0100be5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0100be9:	74 0a                	je     c0100bf5 <print_stackframe+0xbc>
+c0100beb:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
+c0100bef:	0f 8e 69 ff ff ff    	jle    c0100b5e <print_stackframe+0x25>
+    	print_debuginfo(eip - 1);
+    	i++;
+    	eip = ((uint32_t *)ebp)[1];
+    	ebp = ((uint32_t *)ebp)[0];
+    }
+}
+c0100bf5:	90                   	nop
+c0100bf6:	c9                   	leave  
+c0100bf7:	c3                   	ret    
+
+c0100bf8 <parse>:
+#define MAXARGS         16
+#define WHITESPACE      " \t\n\r"
+
+/* parse - parse the command buffer into whitespace-separated arguments */
+static int
+parse(char *buf, char **argv) {
+c0100bf8:	55                   	push   %ebp
+c0100bf9:	89 e5                	mov    %esp,%ebp
+c0100bfb:	83 ec 18             	sub    $0x18,%esp
+    int argc = 0;
+c0100bfe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    while (1) {
+        // find global whitespace
+        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
+c0100c05:	eb 0c                	jmp    c0100c13 <parse+0x1b>
+            *buf ++ = '\0';
+c0100c07:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100c0a:	8d 50 01             	lea    0x1(%eax),%edx
+c0100c0d:	89 55 08             	mov    %edx,0x8(%ebp)
+c0100c10:	c6 00 00             	movb   $0x0,(%eax)
+static int
+parse(char *buf, char **argv) {
+    int argc = 0;
+    while (1) {
+        // find global whitespace
+        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
+c0100c13:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100c16:	0f b6 00             	movzbl (%eax),%eax
+c0100c19:	84 c0                	test   %al,%al
+c0100c1b:	74 1e                	je     c0100c3b <parse+0x43>
+c0100c1d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100c20:	0f b6 00             	movzbl (%eax),%eax
+c0100c23:	0f be c0             	movsbl %al,%eax
+c0100c26:	83 ec 08             	sub    $0x8,%esp
+c0100c29:	50                   	push   %eax
+c0100c2a:	68 6c bb 10 c0       	push   $0xc010bb6c
+c0100c2f:	e8 76 a2 00 00       	call   c010aeaa <strchr>
+c0100c34:	83 c4 10             	add    $0x10,%esp
+c0100c37:	85 c0                	test   %eax,%eax
+c0100c39:	75 cc                	jne    c0100c07 <parse+0xf>
+            *buf ++ = '\0';
+        }
+        if (*buf == '\0') {
+c0100c3b:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100c3e:	0f b6 00             	movzbl (%eax),%eax
+c0100c41:	84 c0                	test   %al,%al
+c0100c43:	74 69                	je     c0100cae <parse+0xb6>
+            break;
+        }
+
+        // save and scan past next arg
+        if (argc == MAXARGS - 1) {
+c0100c45:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+c0100c49:	75 12                	jne    c0100c5d <parse+0x65>
+            cprintf("Too many arguments (max %d).\n", MAXARGS);
+c0100c4b:	83 ec 08             	sub    $0x8,%esp
+c0100c4e:	6a 10                	push   $0x10
+c0100c50:	68 71 bb 10 c0       	push   $0xc010bb71
+c0100c55:	e8 34 f6 ff ff       	call   c010028e <cprintf>
+c0100c5a:	83 c4 10             	add    $0x10,%esp
+        }
+        argv[argc ++] = buf;
+c0100c5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100c60:	8d 50 01             	lea    0x1(%eax),%edx
+c0100c63:	89 55 f4             	mov    %edx,-0xc(%ebp)
+c0100c66:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0100c6d:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100c70:	01 c2                	add    %eax,%edx
+c0100c72:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100c75:	89 02                	mov    %eax,(%edx)
+        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
+c0100c77:	eb 04                	jmp    c0100c7d <parse+0x85>
+            buf ++;
+c0100c79:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+        // save and scan past next arg
+        if (argc == MAXARGS - 1) {
+            cprintf("Too many arguments (max %d).\n", MAXARGS);
+        }
+        argv[argc ++] = buf;
+        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
+c0100c7d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100c80:	0f b6 00             	movzbl (%eax),%eax
+c0100c83:	84 c0                	test   %al,%al
+c0100c85:	0f 84 7a ff ff ff    	je     c0100c05 <parse+0xd>
+c0100c8b:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100c8e:	0f b6 00             	movzbl (%eax),%eax
+c0100c91:	0f be c0             	movsbl %al,%eax
+c0100c94:	83 ec 08             	sub    $0x8,%esp
+c0100c97:	50                   	push   %eax
+c0100c98:	68 6c bb 10 c0       	push   $0xc010bb6c
+c0100c9d:	e8 08 a2 00 00       	call   c010aeaa <strchr>
+c0100ca2:	83 c4 10             	add    $0x10,%esp
+c0100ca5:	85 c0                	test   %eax,%eax
+c0100ca7:	74 d0                	je     c0100c79 <parse+0x81>
+            buf ++;
+        }
+    }
+c0100ca9:	e9 57 ff ff ff       	jmp    c0100c05 <parse+0xd>
+        // find global whitespace
+        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
+            *buf ++ = '\0';
+        }
+        if (*buf == '\0') {
+            break;
+c0100cae:	90                   	nop
+        argv[argc ++] = buf;
+        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
+            buf ++;
+        }
+    }
+    return argc;
+c0100caf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0100cb2:	c9                   	leave  
+c0100cb3:	c3                   	ret    
+
+c0100cb4 <runcmd>:
+/* *
+ * runcmd - parse the input string, split it into separated arguments
+ * and then lookup and invoke some related commands/
+ * */
+static int
+runcmd(char *buf, struct trapframe *tf) {
+c0100cb4:	55                   	push   %ebp
+c0100cb5:	89 e5                	mov    %esp,%ebp
+c0100cb7:	83 ec 58             	sub    $0x58,%esp
+    char *argv[MAXARGS];
+    int argc = parse(buf, argv);
+c0100cba:	83 ec 08             	sub    $0x8,%esp
+c0100cbd:	8d 45 b0             	lea    -0x50(%ebp),%eax
+c0100cc0:	50                   	push   %eax
+c0100cc1:	ff 75 08             	pushl  0x8(%ebp)
+c0100cc4:	e8 2f ff ff ff       	call   c0100bf8 <parse>
+c0100cc9:	83 c4 10             	add    $0x10,%esp
+c0100ccc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if (argc == 0) {
+c0100ccf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0100cd3:	75 0a                	jne    c0100cdf <runcmd+0x2b>
+        return 0;
+c0100cd5:	b8 00 00 00 00       	mov    $0x0,%eax
+c0100cda:	e9 83 00 00 00       	jmp    c0100d62 <runcmd+0xae>
+    }
+    int i;
+    for (i = 0; i < NCOMMANDS; i ++) {
+c0100cdf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0100ce6:	eb 59                	jmp    c0100d41 <runcmd+0x8d>
+        if (strcmp(commands[i].name, argv[0]) == 0) {
+c0100ce8:	8b 4d b0             	mov    -0x50(%ebp),%ecx
+c0100ceb:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0100cee:	89 d0                	mov    %edx,%eax
+c0100cf0:	01 c0                	add    %eax,%eax
+c0100cf2:	01 d0                	add    %edx,%eax
+c0100cf4:	c1 e0 02             	shl    $0x2,%eax
+c0100cf7:	05 20 c0 12 c0       	add    $0xc012c020,%eax
+c0100cfc:	8b 00                	mov    (%eax),%eax
+c0100cfe:	83 ec 08             	sub    $0x8,%esp
+c0100d01:	51                   	push   %ecx
+c0100d02:	50                   	push   %eax
+c0100d03:	e8 02 a1 00 00       	call   c010ae0a <strcmp>
+c0100d08:	83 c4 10             	add    $0x10,%esp
+c0100d0b:	85 c0                	test   %eax,%eax
+c0100d0d:	75 2e                	jne    c0100d3d <runcmd+0x89>
+            return commands[i].func(argc - 1, argv + 1, tf);
+c0100d0f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0100d12:	89 d0                	mov    %edx,%eax
+c0100d14:	01 c0                	add    %eax,%eax
+c0100d16:	01 d0                	add    %edx,%eax
+c0100d18:	c1 e0 02             	shl    $0x2,%eax
+c0100d1b:	05 28 c0 12 c0       	add    $0xc012c028,%eax
+c0100d20:	8b 10                	mov    (%eax),%edx
+c0100d22:	8d 45 b0             	lea    -0x50(%ebp),%eax
+c0100d25:	83 c0 04             	add    $0x4,%eax
+c0100d28:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+c0100d2b:	83 e9 01             	sub    $0x1,%ecx
+c0100d2e:	83 ec 04             	sub    $0x4,%esp
+c0100d31:	ff 75 0c             	pushl  0xc(%ebp)
+c0100d34:	50                   	push   %eax
+c0100d35:	51                   	push   %ecx
+c0100d36:	ff d2                	call   *%edx
+c0100d38:	83 c4 10             	add    $0x10,%esp
+c0100d3b:	eb 25                	jmp    c0100d62 <runcmd+0xae>
+    int argc = parse(buf, argv);
+    if (argc == 0) {
+        return 0;
+    }
+    int i;
+    for (i = 0; i < NCOMMANDS; i ++) {
+c0100d3d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0100d41:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100d44:	83 f8 02             	cmp    $0x2,%eax
+c0100d47:	76 9f                	jbe    c0100ce8 <runcmd+0x34>
+        if (strcmp(commands[i].name, argv[0]) == 0) {
+            return commands[i].func(argc - 1, argv + 1, tf);
+        }
+    }
+    cprintf("Unknown command '%s'\n", argv[0]);
+c0100d49:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c0100d4c:	83 ec 08             	sub    $0x8,%esp
+c0100d4f:	50                   	push   %eax
+c0100d50:	68 8f bb 10 c0       	push   $0xc010bb8f
+c0100d55:	e8 34 f5 ff ff       	call   c010028e <cprintf>
+c0100d5a:	83 c4 10             	add    $0x10,%esp
+    return 0;
+c0100d5d:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0100d62:	c9                   	leave  
+c0100d63:	c3                   	ret    
+
+c0100d64 <kmonitor>:
+
+/***** Implementations of basic kernel monitor commands *****/
+
+void
+kmonitor(struct trapframe *tf) {
+c0100d64:	55                   	push   %ebp
+c0100d65:	89 e5                	mov    %esp,%ebp
+c0100d67:	83 ec 18             	sub    $0x18,%esp
+    cprintf("Welcome to the kernel debug monitor!!\n");
+c0100d6a:	83 ec 0c             	sub    $0xc,%esp
+c0100d6d:	68 a8 bb 10 c0       	push   $0xc010bba8
+c0100d72:	e8 17 f5 ff ff       	call   c010028e <cprintf>
+c0100d77:	83 c4 10             	add    $0x10,%esp
+    cprintf("Type 'help' for a list of commands.\n");
+c0100d7a:	83 ec 0c             	sub    $0xc,%esp
+c0100d7d:	68 d0 bb 10 c0       	push   $0xc010bbd0
+c0100d82:	e8 07 f5 ff ff       	call   c010028e <cprintf>
+c0100d87:	83 c4 10             	add    $0x10,%esp
+
+    if (tf != NULL) {
+c0100d8a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0100d8e:	74 0e                	je     c0100d9e <kmonitor+0x3a>
+        print_trapframe(tf);
+c0100d90:	83 ec 0c             	sub    $0xc,%esp
+c0100d93:	ff 75 08             	pushl  0x8(%ebp)
+c0100d96:	e8 6b 16 00 00       	call   c0102406 <print_trapframe>
+c0100d9b:	83 c4 10             	add    $0x10,%esp
+    }
+
+    char *buf;
+    while (1) {
+        if ((buf = readline("K> ")) != NULL) {
+c0100d9e:	83 ec 0c             	sub    $0xc,%esp
+c0100da1:	68 f5 bb 10 c0       	push   $0xc010bbf5
+c0100da6:	e8 87 f5 ff ff       	call   c0100332 <readline>
+c0100dab:	83 c4 10             	add    $0x10,%esp
+c0100dae:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0100db1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0100db5:	74 e7                	je     c0100d9e <kmonitor+0x3a>
+            if (runcmd(buf, tf) < 0) {
+c0100db7:	83 ec 08             	sub    $0x8,%esp
+c0100dba:	ff 75 08             	pushl  0x8(%ebp)
+c0100dbd:	ff 75 f4             	pushl  -0xc(%ebp)
+c0100dc0:	e8 ef fe ff ff       	call   c0100cb4 <runcmd>
+c0100dc5:	83 c4 10             	add    $0x10,%esp
+c0100dc8:	85 c0                	test   %eax,%eax
+c0100dca:	78 02                	js     c0100dce <kmonitor+0x6a>
+                break;
+            }
+        }
+    }
+c0100dcc:	eb d0                	jmp    c0100d9e <kmonitor+0x3a>
+
+    char *buf;
+    while (1) {
+        if ((buf = readline("K> ")) != NULL) {
+            if (runcmd(buf, tf) < 0) {
+                break;
+c0100dce:	90                   	nop
+            }
+        }
+    }
+}
+c0100dcf:	90                   	nop
+c0100dd0:	c9                   	leave  
+c0100dd1:	c3                   	ret    
+
+c0100dd2 <mon_help>:
+
+/* mon_help - print the information about mon_* functions */
+int
+mon_help(int argc, char **argv, struct trapframe *tf) {
+c0100dd2:	55                   	push   %ebp
+c0100dd3:	89 e5                	mov    %esp,%ebp
+c0100dd5:	83 ec 18             	sub    $0x18,%esp
+    int i;
+    for (i = 0; i < NCOMMANDS; i ++) {
+c0100dd8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0100ddf:	eb 3c                	jmp    c0100e1d <mon_help+0x4b>
+        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
+c0100de1:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0100de4:	89 d0                	mov    %edx,%eax
+c0100de6:	01 c0                	add    %eax,%eax
+c0100de8:	01 d0                	add    %edx,%eax
+c0100dea:	c1 e0 02             	shl    $0x2,%eax
+c0100ded:	05 24 c0 12 c0       	add    $0xc012c024,%eax
+c0100df2:	8b 08                	mov    (%eax),%ecx
+c0100df4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0100df7:	89 d0                	mov    %edx,%eax
+c0100df9:	01 c0                	add    %eax,%eax
+c0100dfb:	01 d0                	add    %edx,%eax
+c0100dfd:	c1 e0 02             	shl    $0x2,%eax
+c0100e00:	05 20 c0 12 c0       	add    $0xc012c020,%eax
+c0100e05:	8b 00                	mov    (%eax),%eax
+c0100e07:	83 ec 04             	sub    $0x4,%esp
+c0100e0a:	51                   	push   %ecx
+c0100e0b:	50                   	push   %eax
+c0100e0c:	68 f9 bb 10 c0       	push   $0xc010bbf9
+c0100e11:	e8 78 f4 ff ff       	call   c010028e <cprintf>
+c0100e16:	83 c4 10             	add    $0x10,%esp
+
+/* mon_help - print the information about mon_* functions */
+int
+mon_help(int argc, char **argv, struct trapframe *tf) {
+    int i;
+    for (i = 0; i < NCOMMANDS; i ++) {
+c0100e19:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0100e1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100e20:	83 f8 02             	cmp    $0x2,%eax
+c0100e23:	76 bc                	jbe    c0100de1 <mon_help+0xf>
+        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
+    }
+    return 0;
+c0100e25:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0100e2a:	c9                   	leave  
+c0100e2b:	c3                   	ret    
+
+c0100e2c <mon_kerninfo>:
+/* *
+ * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
+ * print the memory occupancy in kernel.
+ * */
+int
+mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
+c0100e2c:	55                   	push   %ebp
+c0100e2d:	89 e5                	mov    %esp,%ebp
+c0100e2f:	83 ec 08             	sub    $0x8,%esp
+    print_kerninfo();
+c0100e32:	e8 b8 fb ff ff       	call   c01009ef <print_kerninfo>
+    return 0;
+c0100e37:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0100e3c:	c9                   	leave  
+c0100e3d:	c3                   	ret    
+
+c0100e3e <mon_backtrace>:
+/* *
+ * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
+ * print a backtrace of the stack.
+ * */
+int
+mon_backtrace(int argc, char **argv, struct trapframe *tf) {
+c0100e3e:	55                   	push   %ebp
+c0100e3f:	89 e5                	mov    %esp,%ebp
+c0100e41:	83 ec 08             	sub    $0x8,%esp
+    print_stackframe();
+c0100e44:	e8 f0 fc ff ff       	call   c0100b39 <print_stackframe>
+    return 0;
+c0100e49:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0100e4e:	c9                   	leave  
+c0100e4f:	c3                   	ret    
+
+c0100e50 <ide_wait_ready>:
+    unsigned int size;          // Size in Sectors
+    unsigned char model[41];    // Model in String
+} ide_devices[MAX_IDE];
+
+static int
+ide_wait_ready(unsigned short iobase, bool check_error) {
+c0100e50:	55                   	push   %ebp
+c0100e51:	89 e5                	mov    %esp,%ebp
+c0100e53:	83 ec 14             	sub    $0x14,%esp
+c0100e56:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100e59:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
+    int r;
+    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
+c0100e5d:	90                   	nop
+c0100e5e:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
+c0100e62:	83 c0 07             	add    $0x7,%eax
+c0100e65:	0f b7 c0             	movzwl %ax,%eax
+c0100e68:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0100e6c:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
+c0100e70:	89 c2                	mov    %eax,%edx
+c0100e72:	ec                   	in     (%dx),%al
+c0100e73:	88 45 f9             	mov    %al,-0x7(%ebp)
+    return data;
+c0100e76:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
+c0100e7a:	0f b6 c0             	movzbl %al,%eax
+c0100e7d:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c0100e80:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0100e83:	25 80 00 00 00       	and    $0x80,%eax
+c0100e88:	85 c0                	test   %eax,%eax
+c0100e8a:	75 d2                	jne    c0100e5e <ide_wait_ready+0xe>
+        /* nothing */;
+    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
+c0100e8c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c0100e90:	74 11                	je     c0100ea3 <ide_wait_ready+0x53>
+c0100e92:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0100e95:	83 e0 21             	and    $0x21,%eax
+c0100e98:	85 c0                	test   %eax,%eax
+c0100e9a:	74 07                	je     c0100ea3 <ide_wait_ready+0x53>
+        return -1;
+c0100e9c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c0100ea1:	eb 05                	jmp    c0100ea8 <ide_wait_ready+0x58>
+    }
+    return 0;
+c0100ea3:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0100ea8:	c9                   	leave  
+c0100ea9:	c3                   	ret    
+
+c0100eaa <ide_init>:
+
+void
+ide_init(void) {
+c0100eaa:	55                   	push   %ebp
+c0100eab:	89 e5                	mov    %esp,%ebp
+c0100ead:	57                   	push   %edi
+c0100eae:	53                   	push   %ebx
+c0100eaf:	81 ec 40 02 00 00    	sub    $0x240,%esp
+    static_assert((SECTSIZE % 4) == 0);
+    unsigned short ideno, iobase;
+    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
+c0100eb5:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
+c0100ebb:	e9 c1 02 00 00       	jmp    c0101181 <ide_init+0x2d7>
+        /* assume that no device here */
+        ide_devices[ideno].valid = 0;
+c0100ec0:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0100ec4:	c1 e0 03             	shl    $0x3,%eax
+c0100ec7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0100ece:	29 c2                	sub    %eax,%edx
+c0100ed0:	89 d0                	mov    %edx,%eax
+c0100ed2:	05 20 e1 1a c0       	add    $0xc01ae120,%eax
+c0100ed7:	c6 00 00             	movb   $0x0,(%eax)
+
+        iobase = IO_BASE(ideno);
+c0100eda:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0100ede:	66 d1 e8             	shr    %ax
+c0100ee1:	0f b7 c0             	movzwl %ax,%eax
+c0100ee4:	0f b7 04 85 04 bc 10 	movzwl -0x3fef43fc(,%eax,4),%eax
+c0100eeb:	c0 
+c0100eec:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
+
+        /* wait device ready */
+        ide_wait_ready(iobase, 0);
+c0100ef0:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c0100ef4:	6a 00                	push   $0x0
+c0100ef6:	50                   	push   %eax
+c0100ef7:	e8 54 ff ff ff       	call   c0100e50 <ide_wait_ready>
+c0100efc:	83 c4 08             	add    $0x8,%esp
+
+        /* step1: select drive */
+        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
+c0100eff:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0100f03:	83 e0 01             	and    $0x1,%eax
+c0100f06:	c1 e0 04             	shl    $0x4,%eax
+c0100f09:	83 c8 e0             	or     $0xffffffe0,%eax
+c0100f0c:	0f b6 c0             	movzbl %al,%eax
+c0100f0f:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c0100f13:	83 c2 06             	add    $0x6,%edx
+c0100f16:	0f b7 d2             	movzwl %dx,%edx
+c0100f19:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
+c0100f1d:	88 45 c7             	mov    %al,-0x39(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0100f20:	0f b6 45 c7          	movzbl -0x39(%ebp),%eax
+c0100f24:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
+c0100f28:	ee                   	out    %al,(%dx)
+        ide_wait_ready(iobase, 0);
+c0100f29:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c0100f2d:	6a 00                	push   $0x0
+c0100f2f:	50                   	push   %eax
+c0100f30:	e8 1b ff ff ff       	call   c0100e50 <ide_wait_ready>
+c0100f35:	83 c4 08             	add    $0x8,%esp
+
+        /* step2: send ATA identify command */
+        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
+c0100f38:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c0100f3c:	83 c0 07             	add    $0x7,%eax
+c0100f3f:	0f b7 c0             	movzwl %ax,%eax
+c0100f42:	66 89 45 e0          	mov    %ax,-0x20(%ebp)
+c0100f46:	c6 45 c8 ec          	movb   $0xec,-0x38(%ebp)
+c0100f4a:	0f b6 45 c8          	movzbl -0x38(%ebp),%eax
+c0100f4e:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
+c0100f52:	ee                   	out    %al,(%dx)
+        ide_wait_ready(iobase, 0);
+c0100f53:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c0100f57:	6a 00                	push   $0x0
+c0100f59:	50                   	push   %eax
+c0100f5a:	e8 f1 fe ff ff       	call   c0100e50 <ide_wait_ready>
+c0100f5f:	83 c4 08             	add    $0x8,%esp
+
+        /* step3: polling */
+        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
+c0100f62:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c0100f66:	83 c0 07             	add    $0x7,%eax
+c0100f69:	0f b7 c0             	movzwl %ax,%eax
+c0100f6c:	66 89 45 ca          	mov    %ax,-0x36(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0100f70:	0f b7 45 ca          	movzwl -0x36(%ebp),%eax
+c0100f74:	89 c2                	mov    %eax,%edx
+c0100f76:	ec                   	in     (%dx),%al
+c0100f77:	88 45 c9             	mov    %al,-0x37(%ebp)
+    return data;
+c0100f7a:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
+c0100f7e:	84 c0                	test   %al,%al
+c0100f80:	0f 84 ef 01 00 00    	je     c0101175 <ide_init+0x2cb>
+c0100f86:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c0100f8a:	6a 01                	push   $0x1
+c0100f8c:	50                   	push   %eax
+c0100f8d:	e8 be fe ff ff       	call   c0100e50 <ide_wait_ready>
+c0100f92:	83 c4 08             	add    $0x8,%esp
+c0100f95:	85 c0                	test   %eax,%eax
+c0100f97:	0f 85 d8 01 00 00    	jne    c0101175 <ide_init+0x2cb>
+            continue ;
+        }
+
+        /* device is ok */
+        ide_devices[ideno].valid = 1;
+c0100f9d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0100fa1:	c1 e0 03             	shl    $0x3,%eax
+c0100fa4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0100fab:	29 c2                	sub    %eax,%edx
+c0100fad:	89 d0                	mov    %edx,%eax
+c0100faf:	05 20 e1 1a c0       	add    $0xc01ae120,%eax
+c0100fb4:	c6 00 01             	movb   $0x1,(%eax)
+
+        /* read identification space of the device */
+        unsigned int buffer[128];
+        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
+c0100fb7:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c0100fbb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0100fbe:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
+c0100fc4:	89 45 c0             	mov    %eax,-0x40(%ebp)
+c0100fc7:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
+}
+
+static inline void
+insl(uint32_t port, void *addr, int cnt) {
+    asm volatile (
+c0100fce:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0100fd1:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+c0100fd4:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c0100fd7:	89 cb                	mov    %ecx,%ebx
+c0100fd9:	89 df                	mov    %ebx,%edi
+c0100fdb:	89 c1                	mov    %eax,%ecx
+c0100fdd:	fc                   	cld    
+c0100fde:	f2 6d                	repnz insl (%dx),%es:(%edi)
+c0100fe0:	89 c8                	mov    %ecx,%eax
+c0100fe2:	89 fb                	mov    %edi,%ebx
+c0100fe4:	89 5d c0             	mov    %ebx,-0x40(%ebp)
+c0100fe7:	89 45 bc             	mov    %eax,-0x44(%ebp)
+
+        unsigned char *ident = (unsigned char *)buffer;
+c0100fea:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
+c0100ff0:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        unsigned int sectors;
+        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
+c0100ff3:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0100ff6:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
+c0100ffc:	89 45 d8             	mov    %eax,-0x28(%ebp)
+        /* device use 48-bits or 28-bits addressing */
+        if (cmdsets & (1 << 26)) {
+c0100fff:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0101002:	25 00 00 00 04       	and    $0x4000000,%eax
+c0101007:	85 c0                	test   %eax,%eax
+c0101009:	74 0e                	je     c0101019 <ide_init+0x16f>
+            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
+c010100b:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010100e:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
+c0101014:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0101017:	eb 09                	jmp    c0101022 <ide_init+0x178>
+        }
+        else {
+            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
+c0101019:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010101c:	8b 40 78             	mov    0x78(%eax),%eax
+c010101f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        }
+        ide_devices[ideno].sets = cmdsets;
+c0101022:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0101026:	c1 e0 03             	shl    $0x3,%eax
+c0101029:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0101030:	29 c2                	sub    %eax,%edx
+c0101032:	89 d0                	mov    %edx,%eax
+c0101034:	8d 90 24 e1 1a c0    	lea    -0x3fe51edc(%eax),%edx
+c010103a:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010103d:	89 02                	mov    %eax,(%edx)
+        ide_devices[ideno].size = sectors;
+c010103f:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0101043:	c1 e0 03             	shl    $0x3,%eax
+c0101046:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c010104d:	29 c2                	sub    %eax,%edx
+c010104f:	89 d0                	mov    %edx,%eax
+c0101051:	8d 90 28 e1 1a c0    	lea    -0x3fe51ed8(%eax),%edx
+c0101057:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010105a:	89 02                	mov    %eax,(%edx)
+
+        /* check if supports LBA */
+        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
+c010105c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010105f:	83 c0 62             	add    $0x62,%eax
+c0101062:	0f b7 00             	movzwl (%eax),%eax
+c0101065:	0f b7 c0             	movzwl %ax,%eax
+c0101068:	25 00 02 00 00       	and    $0x200,%eax
+c010106d:	85 c0                	test   %eax,%eax
+c010106f:	75 16                	jne    c0101087 <ide_init+0x1dd>
+c0101071:	68 0c bc 10 c0       	push   $0xc010bc0c
+c0101076:	68 4f bc 10 c0       	push   $0xc010bc4f
+c010107b:	6a 7d                	push   $0x7d
+c010107d:	68 64 bc 10 c0       	push   $0xc010bc64
+c0101082:	e8 6d f3 ff ff       	call   c01003f4 <__panic>
+
+        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
+c0101087:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c010108b:	89 c2                	mov    %eax,%edx
+c010108d:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
+c0101094:	89 c2                	mov    %eax,%edx
+c0101096:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
+c010109d:	29 d0                	sub    %edx,%eax
+c010109f:	05 20 e1 1a c0       	add    $0xc01ae120,%eax
+c01010a4:	83 c0 0c             	add    $0xc,%eax
+c01010a7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+c01010aa:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01010ad:	83 c0 36             	add    $0x36,%eax
+c01010b0:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        unsigned int i, length = 40;
+c01010b3:	c7 45 cc 28 00 00 00 	movl   $0x28,-0x34(%ebp)
+        for (i = 0; i < length; i += 2) {
+c01010ba:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c01010c1:	eb 34                	jmp    c01010f7 <ide_init+0x24d>
+            model[i] = data[i + 1], model[i + 1] = data[i];
+c01010c3:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c01010c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01010c9:	01 c2                	add    %eax,%edx
+c01010cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01010ce:	8d 48 01             	lea    0x1(%eax),%ecx
+c01010d1:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c01010d4:	01 c8                	add    %ecx,%eax
+c01010d6:	0f b6 00             	movzbl (%eax),%eax
+c01010d9:	88 02                	mov    %al,(%edx)
+c01010db:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01010de:	8d 50 01             	lea    0x1(%eax),%edx
+c01010e1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c01010e4:	01 c2                	add    %eax,%edx
+c01010e6:	8b 4d d0             	mov    -0x30(%ebp),%ecx
+c01010e9:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01010ec:	01 c8                	add    %ecx,%eax
+c01010ee:	0f b6 00             	movzbl (%eax),%eax
+c01010f1:	88 02                	mov    %al,(%edx)
+        /* check if supports LBA */
+        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
+
+        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
+        unsigned int i, length = 40;
+        for (i = 0; i < length; i += 2) {
+c01010f3:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
+c01010f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01010fa:	3b 45 cc             	cmp    -0x34(%ebp),%eax
+c01010fd:	72 c4                	jb     c01010c3 <ide_init+0x219>
+            model[i] = data[i + 1], model[i + 1] = data[i];
+        }
+        do {
+            model[i] = '\0';
+c01010ff:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0101102:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0101105:	01 d0                	add    %edx,%eax
+c0101107:	c6 00 00             	movb   $0x0,(%eax)
+        } while (i -- > 0 && model[i] == ' ');
+c010110a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010110d:	8d 50 ff             	lea    -0x1(%eax),%edx
+c0101110:	89 55 ec             	mov    %edx,-0x14(%ebp)
+c0101113:	85 c0                	test   %eax,%eax
+c0101115:	74 0f                	je     c0101126 <ide_init+0x27c>
+c0101117:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c010111a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010111d:	01 d0                	add    %edx,%eax
+c010111f:	0f b6 00             	movzbl (%eax),%eax
+c0101122:	3c 20                	cmp    $0x20,%al
+c0101124:	74 d9                	je     c01010ff <ide_init+0x255>
+
+        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
+c0101126:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c010112a:	89 c2                	mov    %eax,%edx
+c010112c:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
+c0101133:	89 c2                	mov    %eax,%edx
+c0101135:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
+c010113c:	29 d0                	sub    %edx,%eax
+c010113e:	05 20 e1 1a c0       	add    $0xc01ae120,%eax
+c0101143:	8d 48 0c             	lea    0xc(%eax),%ecx
+c0101146:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c010114a:	c1 e0 03             	shl    $0x3,%eax
+c010114d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0101154:	29 c2                	sub    %eax,%edx
+c0101156:	89 d0                	mov    %edx,%eax
+c0101158:	05 28 e1 1a c0       	add    $0xc01ae128,%eax
+c010115d:	8b 10                	mov    (%eax),%edx
+c010115f:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0101163:	51                   	push   %ecx
+c0101164:	52                   	push   %edx
+c0101165:	50                   	push   %eax
+c0101166:	68 76 bc 10 c0       	push   $0xc010bc76
+c010116b:	e8 1e f1 ff ff       	call   c010028e <cprintf>
+c0101170:	83 c4 10             	add    $0x10,%esp
+c0101173:	eb 01                	jmp    c0101176 <ide_init+0x2cc>
+        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
+        ide_wait_ready(iobase, 0);
+
+        /* step3: polling */
+        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
+            continue ;
+c0101175:	90                   	nop
+
+void
+ide_init(void) {
+    static_assert((SECTSIZE % 4) == 0);
+    unsigned short ideno, iobase;
+    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
+c0101176:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c010117a:	83 c0 01             	add    $0x1,%eax
+c010117d:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
+c0101181:	66 83 7d f6 03       	cmpw   $0x3,-0xa(%ebp)
+c0101186:	0f 86 34 fd ff ff    	jbe    c0100ec0 <ide_init+0x16>
+
+        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
+    }
+
+    // enable ide interrupt
+    pic_enable(IRQ_IDE1);
+c010118c:	83 ec 0c             	sub    $0xc,%esp
+c010118f:	6a 0e                	push   $0xe
+c0101191:	e8 8a 0e 00 00       	call   c0102020 <pic_enable>
+c0101196:	83 c4 10             	add    $0x10,%esp
+    pic_enable(IRQ_IDE2);
+c0101199:	83 ec 0c             	sub    $0xc,%esp
+c010119c:	6a 0f                	push   $0xf
+c010119e:	e8 7d 0e 00 00       	call   c0102020 <pic_enable>
+c01011a3:	83 c4 10             	add    $0x10,%esp
+}
+c01011a6:	90                   	nop
+c01011a7:	8d 65 f8             	lea    -0x8(%ebp),%esp
+c01011aa:	5b                   	pop    %ebx
+c01011ab:	5f                   	pop    %edi
+c01011ac:	5d                   	pop    %ebp
+c01011ad:	c3                   	ret    
+
+c01011ae <ide_device_valid>:
+
+bool
+ide_device_valid(unsigned short ideno) {
+c01011ae:	55                   	push   %ebp
+c01011af:	89 e5                	mov    %esp,%ebp
+c01011b1:	83 ec 04             	sub    $0x4,%esp
+c01011b4:	8b 45 08             	mov    0x8(%ebp),%eax
+c01011b7:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
+    return VALID_IDE(ideno);
+c01011bb:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
+c01011c0:	77 25                	ja     c01011e7 <ide_device_valid+0x39>
+c01011c2:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
+c01011c6:	c1 e0 03             	shl    $0x3,%eax
+c01011c9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c01011d0:	29 c2                	sub    %eax,%edx
+c01011d2:	89 d0                	mov    %edx,%eax
+c01011d4:	05 20 e1 1a c0       	add    $0xc01ae120,%eax
+c01011d9:	0f b6 00             	movzbl (%eax),%eax
+c01011dc:	84 c0                	test   %al,%al
+c01011de:	74 07                	je     c01011e7 <ide_device_valid+0x39>
+c01011e0:	b8 01 00 00 00       	mov    $0x1,%eax
+c01011e5:	eb 05                	jmp    c01011ec <ide_device_valid+0x3e>
+c01011e7:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01011ec:	c9                   	leave  
+c01011ed:	c3                   	ret    
+
+c01011ee <ide_device_size>:
+
+size_t
+ide_device_size(unsigned short ideno) {
+c01011ee:	55                   	push   %ebp
+c01011ef:	89 e5                	mov    %esp,%ebp
+c01011f1:	83 ec 04             	sub    $0x4,%esp
+c01011f4:	8b 45 08             	mov    0x8(%ebp),%eax
+c01011f7:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
+    if (ide_device_valid(ideno)) {
+c01011fb:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
+c01011ff:	50                   	push   %eax
+c0101200:	e8 a9 ff ff ff       	call   c01011ae <ide_device_valid>
+c0101205:	83 c4 04             	add    $0x4,%esp
+c0101208:	85 c0                	test   %eax,%eax
+c010120a:	74 1b                	je     c0101227 <ide_device_size+0x39>
+        return ide_devices[ideno].size;
+c010120c:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
+c0101210:	c1 e0 03             	shl    $0x3,%eax
+c0101213:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c010121a:	29 c2                	sub    %eax,%edx
+c010121c:	89 d0                	mov    %edx,%eax
+c010121e:	05 28 e1 1a c0       	add    $0xc01ae128,%eax
+c0101223:	8b 00                	mov    (%eax),%eax
+c0101225:	eb 05                	jmp    c010122c <ide_device_size+0x3e>
+    }
+    return 0;
+c0101227:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010122c:	c9                   	leave  
+c010122d:	c3                   	ret    
+
+c010122e <ide_read_secs>:
+
+int
+ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
+c010122e:	55                   	push   %ebp
+c010122f:	89 e5                	mov    %esp,%ebp
+c0101231:	57                   	push   %edi
+c0101232:	53                   	push   %ebx
+c0101233:	83 ec 40             	sub    $0x40,%esp
+c0101236:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101239:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
+    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
+c010123d:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
+c0101244:	77 25                	ja     c010126b <ide_read_secs+0x3d>
+c0101246:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
+c010124b:	77 1e                	ja     c010126b <ide_read_secs+0x3d>
+c010124d:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c0101251:	c1 e0 03             	shl    $0x3,%eax
+c0101254:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c010125b:	29 c2                	sub    %eax,%edx
+c010125d:	89 d0                	mov    %edx,%eax
+c010125f:	05 20 e1 1a c0       	add    $0xc01ae120,%eax
+c0101264:	0f b6 00             	movzbl (%eax),%eax
+c0101267:	84 c0                	test   %al,%al
+c0101269:	75 19                	jne    c0101284 <ide_read_secs+0x56>
+c010126b:	68 94 bc 10 c0       	push   $0xc010bc94
+c0101270:	68 4f bc 10 c0       	push   $0xc010bc4f
+c0101275:	68 9f 00 00 00       	push   $0x9f
+c010127a:	68 64 bc 10 c0       	push   $0xc010bc64
+c010127f:	e8 70 f1 ff ff       	call   c01003f4 <__panic>
+    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
+c0101284:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
+c010128b:	77 0f                	ja     c010129c <ide_read_secs+0x6e>
+c010128d:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0101290:	8b 45 14             	mov    0x14(%ebp),%eax
+c0101293:	01 d0                	add    %edx,%eax
+c0101295:	3d 00 00 00 10       	cmp    $0x10000000,%eax
+c010129a:	76 19                	jbe    c01012b5 <ide_read_secs+0x87>
+c010129c:	68 bc bc 10 c0       	push   $0xc010bcbc
+c01012a1:	68 4f bc 10 c0       	push   $0xc010bc4f
+c01012a6:	68 a0 00 00 00       	push   $0xa0
+c01012ab:	68 64 bc 10 c0       	push   $0xc010bc64
+c01012b0:	e8 3f f1 ff ff       	call   c01003f4 <__panic>
+    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
+c01012b5:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c01012b9:	66 d1 e8             	shr    %ax
+c01012bc:	0f b7 c0             	movzwl %ax,%eax
+c01012bf:	0f b7 04 85 04 bc 10 	movzwl -0x3fef43fc(,%eax,4),%eax
+c01012c6:	c0 
+c01012c7:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
+c01012cb:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c01012cf:	66 d1 e8             	shr    %ax
+c01012d2:	0f b7 c0             	movzwl %ax,%eax
+c01012d5:	0f b7 04 85 06 bc 10 	movzwl -0x3fef43fa(,%eax,4),%eax
+c01012dc:	c0 
+c01012dd:	66 89 45 f0          	mov    %ax,-0x10(%ebp)
+
+    ide_wait_ready(iobase, 0);
+c01012e1:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c01012e5:	83 ec 08             	sub    $0x8,%esp
+c01012e8:	6a 00                	push   $0x0
+c01012ea:	50                   	push   %eax
+c01012eb:	e8 60 fb ff ff       	call   c0100e50 <ide_wait_ready>
+c01012f0:	83 c4 10             	add    $0x10,%esp
+
+    // generate interrupt
+    outb(ioctrl + ISA_CTRL, 0);
+c01012f3:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
+c01012f7:	83 c0 02             	add    $0x2,%eax
+c01012fa:	0f b7 c0             	movzwl %ax,%eax
+c01012fd:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
+c0101301:	c6 45 d7 00          	movb   $0x0,-0x29(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0101305:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
+c0101309:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c010130d:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SECCNT, nsecs);
+c010130e:	8b 45 14             	mov    0x14(%ebp),%eax
+c0101311:	0f b6 c0             	movzbl %al,%eax
+c0101314:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101318:	83 c2 02             	add    $0x2,%edx
+c010131b:	0f b7 d2             	movzwl %dx,%edx
+c010131e:	66 89 55 e8          	mov    %dx,-0x18(%ebp)
+c0101322:	88 45 d8             	mov    %al,-0x28(%ebp)
+c0101325:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
+c0101329:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
+c010132d:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SECTOR, secno & 0xFF);
+c010132e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0101331:	0f b6 c0             	movzbl %al,%eax
+c0101334:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101338:	83 c2 03             	add    $0x3,%edx
+c010133b:	0f b7 d2             	movzwl %dx,%edx
+c010133e:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
+c0101342:	88 45 d9             	mov    %al,-0x27(%ebp)
+c0101345:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
+c0101349:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
+c010134d:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
+c010134e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0101351:	c1 e8 08             	shr    $0x8,%eax
+c0101354:	0f b6 c0             	movzbl %al,%eax
+c0101357:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c010135b:	83 c2 04             	add    $0x4,%edx
+c010135e:	0f b7 d2             	movzwl %dx,%edx
+c0101361:	66 89 55 e4          	mov    %dx,-0x1c(%ebp)
+c0101365:	88 45 da             	mov    %al,-0x26(%ebp)
+c0101368:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
+c010136c:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
+c0101370:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
+c0101371:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0101374:	c1 e8 10             	shr    $0x10,%eax
+c0101377:	0f b6 c0             	movzbl %al,%eax
+c010137a:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c010137e:	83 c2 05             	add    $0x5,%edx
+c0101381:	0f b7 d2             	movzwl %dx,%edx
+c0101384:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
+c0101388:	88 45 db             	mov    %al,-0x25(%ebp)
+c010138b:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
+c010138f:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
+c0101393:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
+c0101394:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c0101398:	83 e0 01             	and    $0x1,%eax
+c010139b:	c1 e0 04             	shl    $0x4,%eax
+c010139e:	89 c2                	mov    %eax,%edx
+c01013a0:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01013a3:	c1 e8 18             	shr    $0x18,%eax
+c01013a6:	83 e0 0f             	and    $0xf,%eax
+c01013a9:	09 d0                	or     %edx,%eax
+c01013ab:	83 c8 e0             	or     $0xffffffe0,%eax
+c01013ae:	0f b6 c0             	movzbl %al,%eax
+c01013b1:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c01013b5:	83 c2 06             	add    $0x6,%edx
+c01013b8:	0f b7 d2             	movzwl %dx,%edx
+c01013bb:	66 89 55 e0          	mov    %dx,-0x20(%ebp)
+c01013bf:	88 45 dc             	mov    %al,-0x24(%ebp)
+c01013c2:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
+c01013c6:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
+c01013ca:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
+c01013cb:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c01013cf:	83 c0 07             	add    $0x7,%eax
+c01013d2:	0f b7 c0             	movzwl %ax,%eax
+c01013d5:	66 89 45 de          	mov    %ax,-0x22(%ebp)
+c01013d9:	c6 45 dd 20          	movb   $0x20,-0x23(%ebp)
+c01013dd:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
+c01013e1:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
+c01013e5:	ee                   	out    %al,(%dx)
+
+    int ret = 0;
+c01013e6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
+c01013ed:	eb 56                	jmp    c0101445 <ide_read_secs+0x217>
+        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
+c01013ef:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c01013f3:	83 ec 08             	sub    $0x8,%esp
+c01013f6:	6a 01                	push   $0x1
+c01013f8:	50                   	push   %eax
+c01013f9:	e8 52 fa ff ff       	call   c0100e50 <ide_wait_ready>
+c01013fe:	83 c4 10             	add    $0x10,%esp
+c0101401:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0101404:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0101408:	75 43                	jne    c010144d <ide_read_secs+0x21f>
+            goto out;
+        }
+        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
+c010140a:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c010140e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0101411:	8b 45 10             	mov    0x10(%ebp),%eax
+c0101414:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c0101417:	c7 45 cc 80 00 00 00 	movl   $0x80,-0x34(%ebp)
+    return data;
+}
+
+static inline void
+insl(uint32_t port, void *addr, int cnt) {
+    asm volatile (
+c010141e:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0101421:	8b 4d d0             	mov    -0x30(%ebp),%ecx
+c0101424:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0101427:	89 cb                	mov    %ecx,%ebx
+c0101429:	89 df                	mov    %ebx,%edi
+c010142b:	89 c1                	mov    %eax,%ecx
+c010142d:	fc                   	cld    
+c010142e:	f2 6d                	repnz insl (%dx),%es:(%edi)
+c0101430:	89 c8                	mov    %ecx,%eax
+c0101432:	89 fb                	mov    %edi,%ebx
+c0101434:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+c0101437:	89 45 cc             	mov    %eax,-0x34(%ebp)
+    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
+    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
+    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
+
+    int ret = 0;
+    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
+c010143a:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
+c010143e:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
+c0101445:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+c0101449:	75 a4                	jne    c01013ef <ide_read_secs+0x1c1>
+c010144b:	eb 01                	jmp    c010144e <ide_read_secs+0x220>
+        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
+            goto out;
+c010144d:	90                   	nop
+        }
+        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
+    }
+
+out:
+    return ret;
+c010144e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0101451:	8d 65 f8             	lea    -0x8(%ebp),%esp
+c0101454:	5b                   	pop    %ebx
+c0101455:	5f                   	pop    %edi
+c0101456:	5d                   	pop    %ebp
+c0101457:	c3                   	ret    
+
+c0101458 <ide_write_secs>:
+
+int
+ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
+c0101458:	55                   	push   %ebp
+c0101459:	89 e5                	mov    %esp,%ebp
+c010145b:	56                   	push   %esi
+c010145c:	53                   	push   %ebx
+c010145d:	83 ec 40             	sub    $0x40,%esp
+c0101460:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101463:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
+    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
+c0101467:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
+c010146e:	77 25                	ja     c0101495 <ide_write_secs+0x3d>
+c0101470:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
+c0101475:	77 1e                	ja     c0101495 <ide_write_secs+0x3d>
+c0101477:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c010147b:	c1 e0 03             	shl    $0x3,%eax
+c010147e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0101485:	29 c2                	sub    %eax,%edx
+c0101487:	89 d0                	mov    %edx,%eax
+c0101489:	05 20 e1 1a c0       	add    $0xc01ae120,%eax
+c010148e:	0f b6 00             	movzbl (%eax),%eax
+c0101491:	84 c0                	test   %al,%al
+c0101493:	75 19                	jne    c01014ae <ide_write_secs+0x56>
+c0101495:	68 94 bc 10 c0       	push   $0xc010bc94
+c010149a:	68 4f bc 10 c0       	push   $0xc010bc4f
+c010149f:	68 bc 00 00 00       	push   $0xbc
+c01014a4:	68 64 bc 10 c0       	push   $0xc010bc64
+c01014a9:	e8 46 ef ff ff       	call   c01003f4 <__panic>
+    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
+c01014ae:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
+c01014b5:	77 0f                	ja     c01014c6 <ide_write_secs+0x6e>
+c01014b7:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01014ba:	8b 45 14             	mov    0x14(%ebp),%eax
+c01014bd:	01 d0                	add    %edx,%eax
+c01014bf:	3d 00 00 00 10       	cmp    $0x10000000,%eax
+c01014c4:	76 19                	jbe    c01014df <ide_write_secs+0x87>
+c01014c6:	68 bc bc 10 c0       	push   $0xc010bcbc
+c01014cb:	68 4f bc 10 c0       	push   $0xc010bc4f
+c01014d0:	68 bd 00 00 00       	push   $0xbd
+c01014d5:	68 64 bc 10 c0       	push   $0xc010bc64
+c01014da:	e8 15 ef ff ff       	call   c01003f4 <__panic>
+    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
+c01014df:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c01014e3:	66 d1 e8             	shr    %ax
+c01014e6:	0f b7 c0             	movzwl %ax,%eax
+c01014e9:	0f b7 04 85 04 bc 10 	movzwl -0x3fef43fc(,%eax,4),%eax
+c01014f0:	c0 
+c01014f1:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
+c01014f5:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c01014f9:	66 d1 e8             	shr    %ax
+c01014fc:	0f b7 c0             	movzwl %ax,%eax
+c01014ff:	0f b7 04 85 06 bc 10 	movzwl -0x3fef43fa(,%eax,4),%eax
+c0101506:	c0 
+c0101507:	66 89 45 f0          	mov    %ax,-0x10(%ebp)
+
+    ide_wait_ready(iobase, 0);
+c010150b:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c010150f:	83 ec 08             	sub    $0x8,%esp
+c0101512:	6a 00                	push   $0x0
+c0101514:	50                   	push   %eax
+c0101515:	e8 36 f9 ff ff       	call   c0100e50 <ide_wait_ready>
+c010151a:	83 c4 10             	add    $0x10,%esp
+
+    // generate interrupt
+    outb(ioctrl + ISA_CTRL, 0);
+c010151d:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
+c0101521:	83 c0 02             	add    $0x2,%eax
+c0101524:	0f b7 c0             	movzwl %ax,%eax
+c0101527:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
+c010152b:	c6 45 d7 00          	movb   $0x0,-0x29(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c010152f:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
+c0101533:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c0101537:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SECCNT, nsecs);
+c0101538:	8b 45 14             	mov    0x14(%ebp),%eax
+c010153b:	0f b6 c0             	movzbl %al,%eax
+c010153e:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101542:	83 c2 02             	add    $0x2,%edx
+c0101545:	0f b7 d2             	movzwl %dx,%edx
+c0101548:	66 89 55 e8          	mov    %dx,-0x18(%ebp)
+c010154c:	88 45 d8             	mov    %al,-0x28(%ebp)
+c010154f:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
+c0101553:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
+c0101557:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SECTOR, secno & 0xFF);
+c0101558:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010155b:	0f b6 c0             	movzbl %al,%eax
+c010155e:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101562:	83 c2 03             	add    $0x3,%edx
+c0101565:	0f b7 d2             	movzwl %dx,%edx
+c0101568:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
+c010156c:	88 45 d9             	mov    %al,-0x27(%ebp)
+c010156f:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
+c0101573:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
+c0101577:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
+c0101578:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010157b:	c1 e8 08             	shr    $0x8,%eax
+c010157e:	0f b6 c0             	movzbl %al,%eax
+c0101581:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101585:	83 c2 04             	add    $0x4,%edx
+c0101588:	0f b7 d2             	movzwl %dx,%edx
+c010158b:	66 89 55 e4          	mov    %dx,-0x1c(%ebp)
+c010158f:	88 45 da             	mov    %al,-0x26(%ebp)
+c0101592:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
+c0101596:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
+c010159a:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
+c010159b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010159e:	c1 e8 10             	shr    $0x10,%eax
+c01015a1:	0f b6 c0             	movzbl %al,%eax
+c01015a4:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c01015a8:	83 c2 05             	add    $0x5,%edx
+c01015ab:	0f b7 d2             	movzwl %dx,%edx
+c01015ae:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
+c01015b2:	88 45 db             	mov    %al,-0x25(%ebp)
+c01015b5:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
+c01015b9:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
+c01015bd:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
+c01015be:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c01015c2:	83 e0 01             	and    $0x1,%eax
+c01015c5:	c1 e0 04             	shl    $0x4,%eax
+c01015c8:	89 c2                	mov    %eax,%edx
+c01015ca:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01015cd:	c1 e8 18             	shr    $0x18,%eax
+c01015d0:	83 e0 0f             	and    $0xf,%eax
+c01015d3:	09 d0                	or     %edx,%eax
+c01015d5:	83 c8 e0             	or     $0xffffffe0,%eax
+c01015d8:	0f b6 c0             	movzbl %al,%eax
+c01015db:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c01015df:	83 c2 06             	add    $0x6,%edx
+c01015e2:	0f b7 d2             	movzwl %dx,%edx
+c01015e5:	66 89 55 e0          	mov    %dx,-0x20(%ebp)
+c01015e9:	88 45 dc             	mov    %al,-0x24(%ebp)
+c01015ec:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
+c01015f0:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
+c01015f4:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
+c01015f5:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c01015f9:	83 c0 07             	add    $0x7,%eax
+c01015fc:	0f b7 c0             	movzwl %ax,%eax
+c01015ff:	66 89 45 de          	mov    %ax,-0x22(%ebp)
+c0101603:	c6 45 dd 30          	movb   $0x30,-0x23(%ebp)
+c0101607:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
+c010160b:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
+c010160f:	ee                   	out    %al,(%dx)
+
+    int ret = 0;
+c0101610:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
+c0101617:	eb 56                	jmp    c010166f <ide_write_secs+0x217>
+        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
+c0101619:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c010161d:	83 ec 08             	sub    $0x8,%esp
+c0101620:	6a 01                	push   $0x1
+c0101622:	50                   	push   %eax
+c0101623:	e8 28 f8 ff ff       	call   c0100e50 <ide_wait_ready>
+c0101628:	83 c4 10             	add    $0x10,%esp
+c010162b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010162e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0101632:	75 43                	jne    c0101677 <ide_write_secs+0x21f>
+            goto out;
+        }
+        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
+c0101634:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c0101638:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010163b:	8b 45 10             	mov    0x10(%ebp),%eax
+c010163e:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c0101641:	c7 45 cc 80 00 00 00 	movl   $0x80,-0x34(%ebp)
+    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
+}
+
+static inline void
+outsl(uint32_t port, const void *addr, int cnt) {
+    asm volatile (
+c0101648:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010164b:	8b 4d d0             	mov    -0x30(%ebp),%ecx
+c010164e:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0101651:	89 cb                	mov    %ecx,%ebx
+c0101653:	89 de                	mov    %ebx,%esi
+c0101655:	89 c1                	mov    %eax,%ecx
+c0101657:	fc                   	cld    
+c0101658:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
+c010165a:	89 c8                	mov    %ecx,%eax
+c010165c:	89 f3                	mov    %esi,%ebx
+c010165e:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+c0101661:	89 45 cc             	mov    %eax,-0x34(%ebp)
+    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
+    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
+    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
+
+    int ret = 0;
+    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
+c0101664:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
+c0101668:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
+c010166f:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+c0101673:	75 a4                	jne    c0101619 <ide_write_secs+0x1c1>
+c0101675:	eb 01                	jmp    c0101678 <ide_write_secs+0x220>
+        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
+            goto out;
+c0101677:	90                   	nop
+        }
+        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
+    }
+
+out:
+    return ret;
+c0101678:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c010167b:	8d 65 f8             	lea    -0x8(%ebp),%esp
+c010167e:	5b                   	pop    %ebx
+c010167f:	5e                   	pop    %esi
+c0101680:	5d                   	pop    %ebp
+c0101681:	c3                   	ret    
+
+c0101682 <clock_init>:
+/* *
+ * clock_init - initialize 8253 clock to interrupt 100 times per second,
+ * and then enable IRQ_TIMER.
+ * */
+void
+clock_init(void) {
+c0101682:	55                   	push   %ebp
+c0101683:	89 e5                	mov    %esp,%ebp
+c0101685:	83 ec 18             	sub    $0x18,%esp
+c0101688:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
+c010168e:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0101692:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+c0101696:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
+c010169a:	ee                   	out    %al,(%dx)
+c010169b:	66 c7 45 f4 40 00    	movw   $0x40,-0xc(%ebp)
+c01016a1:	c6 45 f0 9c          	movb   $0x9c,-0x10(%ebp)
+c01016a5:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
+c01016a9:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
+c01016ad:	ee                   	out    %al,(%dx)
+c01016ae:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
+c01016b4:	c6 45 f1 2e          	movb   $0x2e,-0xf(%ebp)
+c01016b8:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
+c01016bc:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c01016c0:	ee                   	out    %al,(%dx)
+    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
+    outb(IO_TIMER1, TIMER_DIV(100) % 256);
+    outb(IO_TIMER1, TIMER_DIV(100) / 256);
+
+    // initialize time counter 'ticks' to zero
+    ticks = 0;
+c01016c1:	c7 05 58 0d 1b c0 00 	movl   $0x0,0xc01b0d58
+c01016c8:	00 00 00 
+
+    cprintf("++ setup timer interrupts\n");
+c01016cb:	83 ec 0c             	sub    $0xc,%esp
+c01016ce:	68 f6 bc 10 c0       	push   $0xc010bcf6
+c01016d3:	e8 b6 eb ff ff       	call   c010028e <cprintf>
+c01016d8:	83 c4 10             	add    $0x10,%esp
+    pic_enable(IRQ_TIMER);
+c01016db:	83 ec 0c             	sub    $0xc,%esp
+c01016de:	6a 00                	push   $0x0
+c01016e0:	e8 3b 09 00 00       	call   c0102020 <pic_enable>
+c01016e5:	83 c4 10             	add    $0x10,%esp
+}
+c01016e8:	90                   	nop
+c01016e9:	c9                   	leave  
+c01016ea:	c3                   	ret    
+
+c01016eb <__intr_save>:
+#include <assert.h>
+#include <atomic.h>
+#include <sched.h>
+
+static inline bool
+__intr_save(void) {
+c01016eb:	55                   	push   %ebp
+c01016ec:	89 e5                	mov    %esp,%ebp
+c01016ee:	83 ec 18             	sub    $0x18,%esp
+}
+
+static inline uint32_t
+read_eflags(void) {
+    uint32_t eflags;
+    asm volatile ("pushfl; popl %0" : "=r" (eflags));
+c01016f1:	9c                   	pushf  
+c01016f2:	58                   	pop    %eax
+c01016f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return eflags;
+c01016f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    if (read_eflags() & FL_IF) {
+c01016f9:	25 00 02 00 00       	and    $0x200,%eax
+c01016fe:	85 c0                	test   %eax,%eax
+c0101700:	74 0c                	je     c010170e <__intr_save+0x23>
+        intr_disable();
+c0101702:	e8 8a 0a 00 00       	call   c0102191 <intr_disable>
+        return 1;
+c0101707:	b8 01 00 00 00       	mov    $0x1,%eax
+c010170c:	eb 05                	jmp    c0101713 <__intr_save+0x28>
+    }
+    return 0;
+c010170e:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0101713:	c9                   	leave  
+c0101714:	c3                   	ret    
+
+c0101715 <__intr_restore>:
+
+static inline void
+__intr_restore(bool flag) {
+c0101715:	55                   	push   %ebp
+c0101716:	89 e5                	mov    %esp,%ebp
+c0101718:	83 ec 08             	sub    $0x8,%esp
+    if (flag) {
+c010171b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010171f:	74 05                	je     c0101726 <__intr_restore+0x11>
+        intr_enable();
+c0101721:	e8 64 0a 00 00       	call   c010218a <intr_enable>
+    }
+}
+c0101726:	90                   	nop
+c0101727:	c9                   	leave  
+c0101728:	c3                   	ret    
+
+c0101729 <delay>:
+#include <memlayout.h>
+#include <sync.h>
+
+/* stupid I/O delay routine necessitated by historical PC design flaws */
+static void
+delay(void) {
+c0101729:	55                   	push   %ebp
+c010172a:	89 e5                	mov    %esp,%ebp
+c010172c:	83 ec 10             	sub    $0x10,%esp
+c010172f:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0101735:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
+c0101739:	89 c2                	mov    %eax,%edx
+c010173b:	ec                   	in     (%dx),%al
+c010173c:	88 45 f4             	mov    %al,-0xc(%ebp)
+c010173f:	66 c7 45 fc 84 00    	movw   $0x84,-0x4(%ebp)
+c0101745:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
+c0101749:	89 c2                	mov    %eax,%edx
+c010174b:	ec                   	in     (%dx),%al
+c010174c:	88 45 f5             	mov    %al,-0xb(%ebp)
+c010174f:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
+c0101755:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
+c0101759:	89 c2                	mov    %eax,%edx
+c010175b:	ec                   	in     (%dx),%al
+c010175c:	88 45 f6             	mov    %al,-0xa(%ebp)
+c010175f:	66 c7 45 f8 84 00    	movw   $0x84,-0x8(%ebp)
+c0101765:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
+c0101769:	89 c2                	mov    %eax,%edx
+c010176b:	ec                   	in     (%dx),%al
+c010176c:	88 45 f7             	mov    %al,-0x9(%ebp)
+    inb(0x84);
+    inb(0x84);
+    inb(0x84);
+    inb(0x84);
+}
+c010176f:	90                   	nop
+c0101770:	c9                   	leave  
+c0101771:	c3                   	ret    
+
+c0101772 <cga_init>:
+static uint16_t addr_6845;
+
+/* TEXT-mode CGA/VGA display output */
+
+static void
+cga_init(void) {
+c0101772:	55                   	push   %ebp
+c0101773:	89 e5                	mov    %esp,%ebp
+c0101775:	83 ec 20             	sub    $0x20,%esp
+    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
+c0101778:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
+    uint16_t was = *cp;
+c010177f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0101782:	0f b7 00             	movzwl (%eax),%eax
+c0101785:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
+    *cp = (uint16_t) 0xA55A;
+c0101789:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010178c:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
+    if (*cp != 0xA55A) {
+c0101791:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0101794:	0f b7 00             	movzwl (%eax),%eax
+c0101797:	66 3d 5a a5          	cmp    $0xa55a,%ax
+c010179b:	74 12                	je     c01017af <cga_init+0x3d>
+        cp = (uint16_t*)(MONO_BUF + KERNBASE);
+c010179d:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
+        addr_6845 = MONO_BASE;
+c01017a4:	66 c7 05 06 e2 1a c0 	movw   $0x3b4,0xc01ae206
+c01017ab:	b4 03 
+c01017ad:	eb 13                	jmp    c01017c2 <cga_init+0x50>
+    } else {
+        *cp = was;
+c01017af:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01017b2:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
+c01017b6:	66 89 10             	mov    %dx,(%eax)
+        addr_6845 = CGA_BASE;
+c01017b9:	66 c7 05 06 e2 1a c0 	movw   $0x3d4,0xc01ae206
+c01017c0:	d4 03 
+    }
+
+    // Extract cursor location
+    uint32_t pos;
+    outb(addr_6845, 14);
+c01017c2:	0f b7 05 06 e2 1a c0 	movzwl 0xc01ae206,%eax
+c01017c9:	0f b7 c0             	movzwl %ax,%eax
+c01017cc:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
+c01017d0:	c6 45 ea 0e          	movb   $0xe,-0x16(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c01017d4:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
+c01017d8:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
+c01017dc:	ee                   	out    %al,(%dx)
+    pos = inb(addr_6845 + 1) << 8;
+c01017dd:	0f b7 05 06 e2 1a c0 	movzwl 0xc01ae206,%eax
+c01017e4:	83 c0 01             	add    $0x1,%eax
+c01017e7:	0f b7 c0             	movzwl %ax,%eax
+c01017ea:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c01017ee:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c01017f2:	89 c2                	mov    %eax,%edx
+c01017f4:	ec                   	in     (%dx),%al
+c01017f5:	88 45 eb             	mov    %al,-0x15(%ebp)
+    return data;
+c01017f8:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
+c01017fc:	0f b6 c0             	movzbl %al,%eax
+c01017ff:	c1 e0 08             	shl    $0x8,%eax
+c0101802:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    outb(addr_6845, 15);
+c0101805:	0f b7 05 06 e2 1a c0 	movzwl 0xc01ae206,%eax
+c010180c:	0f b7 c0             	movzwl %ax,%eax
+c010180f:	66 89 45 f0          	mov    %ax,-0x10(%ebp)
+c0101813:	c6 45 ec 0f          	movb   $0xf,-0x14(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0101817:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
+c010181b:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
+c010181f:	ee                   	out    %al,(%dx)
+    pos |= inb(addr_6845 + 1);
+c0101820:	0f b7 05 06 e2 1a c0 	movzwl 0xc01ae206,%eax
+c0101827:	83 c0 01             	add    $0x1,%eax
+c010182a:	0f b7 c0             	movzwl %ax,%eax
+c010182d:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0101831:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
+c0101835:	89 c2                	mov    %eax,%edx
+c0101837:	ec                   	in     (%dx),%al
+c0101838:	88 45 ed             	mov    %al,-0x13(%ebp)
+    return data;
+c010183b:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
+c010183f:	0f b6 c0             	movzbl %al,%eax
+c0101842:	09 45 f4             	or     %eax,-0xc(%ebp)
+
+    crt_buf = (uint16_t*) cp;
+c0101845:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0101848:	a3 00 e2 1a c0       	mov    %eax,0xc01ae200
+    crt_pos = pos;
+c010184d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0101850:	66 a3 04 e2 1a c0    	mov    %ax,0xc01ae204
+}
+c0101856:	90                   	nop
+c0101857:	c9                   	leave  
+c0101858:	c3                   	ret    
+
+c0101859 <serial_init>:
+
+static bool serial_exists = 0;
+
+static void
+serial_init(void) {
+c0101859:	55                   	push   %ebp
+c010185a:	89 e5                	mov    %esp,%ebp
+c010185c:	83 ec 28             	sub    $0x28,%esp
+c010185f:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
+c0101865:	c6 45 da 00          	movb   $0x0,-0x26(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0101869:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
+c010186d:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
+c0101871:	ee                   	out    %al,(%dx)
+c0101872:	66 c7 45 f4 fb 03    	movw   $0x3fb,-0xc(%ebp)
+c0101878:	c6 45 db 80          	movb   $0x80,-0x25(%ebp)
+c010187c:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
+c0101880:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
+c0101884:	ee                   	out    %al,(%dx)
+c0101885:	66 c7 45 f2 f8 03    	movw   $0x3f8,-0xe(%ebp)
+c010188b:	c6 45 dc 0c          	movb   $0xc,-0x24(%ebp)
+c010188f:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
+c0101893:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101897:	ee                   	out    %al,(%dx)
+c0101898:	66 c7 45 f0 f9 03    	movw   $0x3f9,-0x10(%ebp)
+c010189e:	c6 45 dd 00          	movb   $0x0,-0x23(%ebp)
+c01018a2:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
+c01018a6:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
+c01018aa:	ee                   	out    %al,(%dx)
+c01018ab:	66 c7 45 ee fb 03    	movw   $0x3fb,-0x12(%ebp)
+c01018b1:	c6 45 de 03          	movb   $0x3,-0x22(%ebp)
+c01018b5:	0f b6 45 de          	movzbl -0x22(%ebp),%eax
+c01018b9:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
+c01018bd:	ee                   	out    %al,(%dx)
+c01018be:	66 c7 45 ec fc 03    	movw   $0x3fc,-0x14(%ebp)
+c01018c4:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
+c01018c8:	0f b6 45 df          	movzbl -0x21(%ebp),%eax
+c01018cc:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
+c01018d0:	ee                   	out    %al,(%dx)
+c01018d1:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
+c01018d7:	c6 45 e0 01          	movb   $0x1,-0x20(%ebp)
+c01018db:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
+c01018df:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c01018e3:	ee                   	out    %al,(%dx)
+c01018e4:	66 c7 45 e8 fd 03    	movw   $0x3fd,-0x18(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c01018ea:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
+c01018ee:	89 c2                	mov    %eax,%edx
+c01018f0:	ec                   	in     (%dx),%al
+c01018f1:	88 45 e1             	mov    %al,-0x1f(%ebp)
+    return data;
+c01018f4:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
+    // Enable rcv interrupts
+    outb(COM1 + COM_IER, COM_IER_RDI);
+
+    // Clear any preexisting overrun indications and interrupts
+    // Serial port doesn't exist if COM_LSR returns 0xFF
+    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
+c01018f8:	3c ff                	cmp    $0xff,%al
+c01018fa:	0f 95 c0             	setne  %al
+c01018fd:	0f b6 c0             	movzbl %al,%eax
+c0101900:	a3 08 e2 1a c0       	mov    %eax,0xc01ae208
+c0101905:	66 c7 45 e6 fa 03    	movw   $0x3fa,-0x1a(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c010190b:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
+c010190f:	89 c2                	mov    %eax,%edx
+c0101911:	ec                   	in     (%dx),%al
+c0101912:	88 45 e2             	mov    %al,-0x1e(%ebp)
+c0101915:	66 c7 45 e4 f8 03    	movw   $0x3f8,-0x1c(%ebp)
+c010191b:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
+c010191f:	89 c2                	mov    %eax,%edx
+c0101921:	ec                   	in     (%dx),%al
+c0101922:	88 45 e3             	mov    %al,-0x1d(%ebp)
+    (void) inb(COM1+COM_IIR);
+    (void) inb(COM1+COM_RX);
+
+    if (serial_exists) {
+c0101925:	a1 08 e2 1a c0       	mov    0xc01ae208,%eax
+c010192a:	85 c0                	test   %eax,%eax
+c010192c:	74 0d                	je     c010193b <serial_init+0xe2>
+        pic_enable(IRQ_COM1);
+c010192e:	83 ec 0c             	sub    $0xc,%esp
+c0101931:	6a 04                	push   $0x4
+c0101933:	e8 e8 06 00 00       	call   c0102020 <pic_enable>
+c0101938:	83 c4 10             	add    $0x10,%esp
+    }
+}
+c010193b:	90                   	nop
+c010193c:	c9                   	leave  
+c010193d:	c3                   	ret    
+
+c010193e <lpt_putc_sub>:
+
+static void
+lpt_putc_sub(int c) {
+c010193e:	55                   	push   %ebp
+c010193f:	89 e5                	mov    %esp,%ebp
+c0101941:	83 ec 10             	sub    $0x10,%esp
+    int i;
+    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
+c0101944:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+c010194b:	eb 09                	jmp    c0101956 <lpt_putc_sub+0x18>
+        delay();
+c010194d:	e8 d7 fd ff ff       	call   c0101729 <delay>
+}
+
+static void
+lpt_putc_sub(int c) {
+    int i;
+    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
+c0101952:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+c0101956:	66 c7 45 f4 79 03    	movw   $0x379,-0xc(%ebp)
+c010195c:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
+c0101960:	89 c2                	mov    %eax,%edx
+c0101962:	ec                   	in     (%dx),%al
+c0101963:	88 45 f3             	mov    %al,-0xd(%ebp)
+    return data;
+c0101966:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c010196a:	84 c0                	test   %al,%al
+c010196c:	78 09                	js     c0101977 <lpt_putc_sub+0x39>
+c010196e:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
+c0101975:	7e d6                	jle    c010194d <lpt_putc_sub+0xf>
+        delay();
+    }
+    outb(LPTPORT + 0, c);
+c0101977:	8b 45 08             	mov    0x8(%ebp),%eax
+c010197a:	0f b6 c0             	movzbl %al,%eax
+c010197d:	66 c7 45 f8 78 03    	movw   $0x378,-0x8(%ebp)
+c0101983:	88 45 f0             	mov    %al,-0x10(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0101986:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
+c010198a:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
+c010198e:	ee                   	out    %al,(%dx)
+c010198f:	66 c7 45 f6 7a 03    	movw   $0x37a,-0xa(%ebp)
+c0101995:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
+c0101999:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
+c010199d:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
+c01019a1:	ee                   	out    %al,(%dx)
+c01019a2:	66 c7 45 fa 7a 03    	movw   $0x37a,-0x6(%ebp)
+c01019a8:	c6 45 f2 08          	movb   $0x8,-0xe(%ebp)
+c01019ac:	0f b6 45 f2          	movzbl -0xe(%ebp),%eax
+c01019b0:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
+c01019b4:	ee                   	out    %al,(%dx)
+    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
+    outb(LPTPORT + 2, 0x08);
+}
+c01019b5:	90                   	nop
+c01019b6:	c9                   	leave  
+c01019b7:	c3                   	ret    
+
+c01019b8 <lpt_putc>:
+
+/* lpt_putc - copy console output to parallel port */
+static void
+lpt_putc(int c) {
+c01019b8:	55                   	push   %ebp
+c01019b9:	89 e5                	mov    %esp,%ebp
+    if (c != '\b') {
+c01019bb:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
+c01019bf:	74 0d                	je     c01019ce <lpt_putc+0x16>
+        lpt_putc_sub(c);
+c01019c1:	ff 75 08             	pushl  0x8(%ebp)
+c01019c4:	e8 75 ff ff ff       	call   c010193e <lpt_putc_sub>
+c01019c9:	83 c4 04             	add    $0x4,%esp
+    else {
+        lpt_putc_sub('\b');
+        lpt_putc_sub(' ');
+        lpt_putc_sub('\b');
+    }
+}
+c01019cc:	eb 1e                	jmp    c01019ec <lpt_putc+0x34>
+lpt_putc(int c) {
+    if (c != '\b') {
+        lpt_putc_sub(c);
+    }
+    else {
+        lpt_putc_sub('\b');
+c01019ce:	6a 08                	push   $0x8
+c01019d0:	e8 69 ff ff ff       	call   c010193e <lpt_putc_sub>
+c01019d5:	83 c4 04             	add    $0x4,%esp
+        lpt_putc_sub(' ');
+c01019d8:	6a 20                	push   $0x20
+c01019da:	e8 5f ff ff ff       	call   c010193e <lpt_putc_sub>
+c01019df:	83 c4 04             	add    $0x4,%esp
+        lpt_putc_sub('\b');
+c01019e2:	6a 08                	push   $0x8
+c01019e4:	e8 55 ff ff ff       	call   c010193e <lpt_putc_sub>
+c01019e9:	83 c4 04             	add    $0x4,%esp
+    }
+}
+c01019ec:	90                   	nop
+c01019ed:	c9                   	leave  
+c01019ee:	c3                   	ret    
+
+c01019ef <cga_putc>:
+
+/* cga_putc - print character to console */
+static void
+cga_putc(int c) {
+c01019ef:	55                   	push   %ebp
+c01019f0:	89 e5                	mov    %esp,%ebp
+c01019f2:	53                   	push   %ebx
+c01019f3:	83 ec 14             	sub    $0x14,%esp
+    // set black on white
+    if (!(c & ~0xFF)) {
+c01019f6:	8b 45 08             	mov    0x8(%ebp),%eax
+c01019f9:	b0 00                	mov    $0x0,%al
+c01019fb:	85 c0                	test   %eax,%eax
+c01019fd:	75 07                	jne    c0101a06 <cga_putc+0x17>
+        c |= 0x0700;
+c01019ff:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
+    }
+
+    switch (c & 0xff) {
+c0101a06:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101a09:	0f b6 c0             	movzbl %al,%eax
+c0101a0c:	83 f8 0a             	cmp    $0xa,%eax
+c0101a0f:	74 4e                	je     c0101a5f <cga_putc+0x70>
+c0101a11:	83 f8 0d             	cmp    $0xd,%eax
+c0101a14:	74 59                	je     c0101a6f <cga_putc+0x80>
+c0101a16:	83 f8 08             	cmp    $0x8,%eax
+c0101a19:	0f 85 8a 00 00 00    	jne    c0101aa9 <cga_putc+0xba>
+    case '\b':
+        if (crt_pos > 0) {
+c0101a1f:	0f b7 05 04 e2 1a c0 	movzwl 0xc01ae204,%eax
+c0101a26:	66 85 c0             	test   %ax,%ax
+c0101a29:	0f 84 a0 00 00 00    	je     c0101acf <cga_putc+0xe0>
+            crt_pos --;
+c0101a2f:	0f b7 05 04 e2 1a c0 	movzwl 0xc01ae204,%eax
+c0101a36:	83 e8 01             	sub    $0x1,%eax
+c0101a39:	66 a3 04 e2 1a c0    	mov    %ax,0xc01ae204
+            crt_buf[crt_pos] = (c & ~0xff) | ' ';
+c0101a3f:	a1 00 e2 1a c0       	mov    0xc01ae200,%eax
+c0101a44:	0f b7 15 04 e2 1a c0 	movzwl 0xc01ae204,%edx
+c0101a4b:	0f b7 d2             	movzwl %dx,%edx
+c0101a4e:	01 d2                	add    %edx,%edx
+c0101a50:	01 d0                	add    %edx,%eax
+c0101a52:	8b 55 08             	mov    0x8(%ebp),%edx
+c0101a55:	b2 00                	mov    $0x0,%dl
+c0101a57:	83 ca 20             	or     $0x20,%edx
+c0101a5a:	66 89 10             	mov    %dx,(%eax)
+        }
+        break;
+c0101a5d:	eb 70                	jmp    c0101acf <cga_putc+0xe0>
+    case '\n':
+        crt_pos += CRT_COLS;
+c0101a5f:	0f b7 05 04 e2 1a c0 	movzwl 0xc01ae204,%eax
+c0101a66:	83 c0 50             	add    $0x50,%eax
+c0101a69:	66 a3 04 e2 1a c0    	mov    %ax,0xc01ae204
+    case '\r':
+        crt_pos -= (crt_pos % CRT_COLS);
+c0101a6f:	0f b7 1d 04 e2 1a c0 	movzwl 0xc01ae204,%ebx
+c0101a76:	0f b7 0d 04 e2 1a c0 	movzwl 0xc01ae204,%ecx
+c0101a7d:	0f b7 c1             	movzwl %cx,%eax
+c0101a80:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
+c0101a86:	c1 e8 10             	shr    $0x10,%eax
+c0101a89:	89 c2                	mov    %eax,%edx
+c0101a8b:	66 c1 ea 06          	shr    $0x6,%dx
+c0101a8f:	89 d0                	mov    %edx,%eax
+c0101a91:	c1 e0 02             	shl    $0x2,%eax
+c0101a94:	01 d0                	add    %edx,%eax
+c0101a96:	c1 e0 04             	shl    $0x4,%eax
+c0101a99:	29 c1                	sub    %eax,%ecx
+c0101a9b:	89 ca                	mov    %ecx,%edx
+c0101a9d:	89 d8                	mov    %ebx,%eax
+c0101a9f:	29 d0                	sub    %edx,%eax
+c0101aa1:	66 a3 04 e2 1a c0    	mov    %ax,0xc01ae204
+        break;
+c0101aa7:	eb 27                	jmp    c0101ad0 <cga_putc+0xe1>
+    default:
+        crt_buf[crt_pos ++] = c;     // write the character
+c0101aa9:	8b 0d 00 e2 1a c0    	mov    0xc01ae200,%ecx
+c0101aaf:	0f b7 05 04 e2 1a c0 	movzwl 0xc01ae204,%eax
+c0101ab6:	8d 50 01             	lea    0x1(%eax),%edx
+c0101ab9:	66 89 15 04 e2 1a c0 	mov    %dx,0xc01ae204
+c0101ac0:	0f b7 c0             	movzwl %ax,%eax
+c0101ac3:	01 c0                	add    %eax,%eax
+c0101ac5:	01 c8                	add    %ecx,%eax
+c0101ac7:	8b 55 08             	mov    0x8(%ebp),%edx
+c0101aca:	66 89 10             	mov    %dx,(%eax)
+        break;
+c0101acd:	eb 01                	jmp    c0101ad0 <cga_putc+0xe1>
+    case '\b':
+        if (crt_pos > 0) {
+            crt_pos --;
+            crt_buf[crt_pos] = (c & ~0xff) | ' ';
+        }
+        break;
+c0101acf:	90                   	nop
+        crt_buf[crt_pos ++] = c;     // write the character
+        break;
+    }
+
+    // What is the purpose of this?
+    if (crt_pos >= CRT_SIZE) {
+c0101ad0:	0f b7 05 04 e2 1a c0 	movzwl 0xc01ae204,%eax
+c0101ad7:	66 3d cf 07          	cmp    $0x7cf,%ax
+c0101adb:	76 59                	jbe    c0101b36 <cga_putc+0x147>
+        int i;
+        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
+c0101add:	a1 00 e2 1a c0       	mov    0xc01ae200,%eax
+c0101ae2:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
+c0101ae8:	a1 00 e2 1a c0       	mov    0xc01ae200,%eax
+c0101aed:	83 ec 04             	sub    $0x4,%esp
+c0101af0:	68 00 0f 00 00       	push   $0xf00
+c0101af5:	52                   	push   %edx
+c0101af6:	50                   	push   %eax
+c0101af7:	e8 ad 95 00 00       	call   c010b0a9 <memmove>
+c0101afc:	83 c4 10             	add    $0x10,%esp
+        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
+c0101aff:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
+c0101b06:	eb 15                	jmp    c0101b1d <cga_putc+0x12e>
+            crt_buf[i] = 0x0700 | ' ';
+c0101b08:	a1 00 e2 1a c0       	mov    0xc01ae200,%eax
+c0101b0d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0101b10:	01 d2                	add    %edx,%edx
+c0101b12:	01 d0                	add    %edx,%eax
+c0101b14:	66 c7 00 20 07       	movw   $0x720,(%eax)
+
+    // What is the purpose of this?
+    if (crt_pos >= CRT_SIZE) {
+        int i;
+        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
+        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
+c0101b19:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0101b1d:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
+c0101b24:	7e e2                	jle    c0101b08 <cga_putc+0x119>
+            crt_buf[i] = 0x0700 | ' ';
+        }
+        crt_pos -= CRT_COLS;
+c0101b26:	0f b7 05 04 e2 1a c0 	movzwl 0xc01ae204,%eax
+c0101b2d:	83 e8 50             	sub    $0x50,%eax
+c0101b30:	66 a3 04 e2 1a c0    	mov    %ax,0xc01ae204
+    }
+
+    // move that little blinky thing
+    outb(addr_6845, 14);
+c0101b36:	0f b7 05 06 e2 1a c0 	movzwl 0xc01ae206,%eax
+c0101b3d:	0f b7 c0             	movzwl %ax,%eax
+c0101b40:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
+c0101b44:	c6 45 e8 0e          	movb   $0xe,-0x18(%ebp)
+c0101b48:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
+c0101b4c:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101b50:	ee                   	out    %al,(%dx)
+    outb(addr_6845 + 1, crt_pos >> 8);
+c0101b51:	0f b7 05 04 e2 1a c0 	movzwl 0xc01ae204,%eax
+c0101b58:	66 c1 e8 08          	shr    $0x8,%ax
+c0101b5c:	0f b6 c0             	movzbl %al,%eax
+c0101b5f:	0f b7 15 06 e2 1a c0 	movzwl 0xc01ae206,%edx
+c0101b66:	83 c2 01             	add    $0x1,%edx
+c0101b69:	0f b7 d2             	movzwl %dx,%edx
+c0101b6c:	66 89 55 f0          	mov    %dx,-0x10(%ebp)
+c0101b70:	88 45 e9             	mov    %al,-0x17(%ebp)
+c0101b73:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
+c0101b77:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
+c0101b7b:	ee                   	out    %al,(%dx)
+    outb(addr_6845, 15);
+c0101b7c:	0f b7 05 06 e2 1a c0 	movzwl 0xc01ae206,%eax
+c0101b83:	0f b7 c0             	movzwl %ax,%eax
+c0101b86:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
+c0101b8a:	c6 45 ea 0f          	movb   $0xf,-0x16(%ebp)
+c0101b8e:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
+c0101b92:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
+c0101b96:	ee                   	out    %al,(%dx)
+    outb(addr_6845 + 1, crt_pos);
+c0101b97:	0f b7 05 04 e2 1a c0 	movzwl 0xc01ae204,%eax
+c0101b9e:	0f b6 c0             	movzbl %al,%eax
+c0101ba1:	0f b7 15 06 e2 1a c0 	movzwl 0xc01ae206,%edx
+c0101ba8:	83 c2 01             	add    $0x1,%edx
+c0101bab:	0f b7 d2             	movzwl %dx,%edx
+c0101bae:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
+c0101bb2:	88 45 eb             	mov    %al,-0x15(%ebp)
+c0101bb5:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
+c0101bb9:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
+c0101bbd:	ee                   	out    %al,(%dx)
+}
+c0101bbe:	90                   	nop
+c0101bbf:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+c0101bc2:	c9                   	leave  
+c0101bc3:	c3                   	ret    
+
+c0101bc4 <serial_putc_sub>:
+
+static void
+serial_putc_sub(int c) {
+c0101bc4:	55                   	push   %ebp
+c0101bc5:	89 e5                	mov    %esp,%ebp
+c0101bc7:	83 ec 10             	sub    $0x10,%esp
+    int i;
+    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
+c0101bca:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+c0101bd1:	eb 09                	jmp    c0101bdc <serial_putc_sub+0x18>
+        delay();
+c0101bd3:	e8 51 fb ff ff       	call   c0101729 <delay>
+}
+
+static void
+serial_putc_sub(int c) {
+    int i;
+    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
+c0101bd8:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+c0101bdc:	66 c7 45 f8 fd 03    	movw   $0x3fd,-0x8(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0101be2:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
+c0101be6:	89 c2                	mov    %eax,%edx
+c0101be8:	ec                   	in     (%dx),%al
+c0101be9:	88 45 f7             	mov    %al,-0x9(%ebp)
+    return data;
+c0101bec:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+c0101bf0:	0f b6 c0             	movzbl %al,%eax
+c0101bf3:	83 e0 20             	and    $0x20,%eax
+c0101bf6:	85 c0                	test   %eax,%eax
+c0101bf8:	75 09                	jne    c0101c03 <serial_putc_sub+0x3f>
+c0101bfa:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
+c0101c01:	7e d0                	jle    c0101bd3 <serial_putc_sub+0xf>
+        delay();
+    }
+    outb(COM1 + COM_TX, c);
+c0101c03:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101c06:	0f b6 c0             	movzbl %al,%eax
+c0101c09:	66 c7 45 fa f8 03    	movw   $0x3f8,-0x6(%ebp)
+c0101c0f:	88 45 f6             	mov    %al,-0xa(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0101c12:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
+c0101c16:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
+c0101c1a:	ee                   	out    %al,(%dx)
+}
+c0101c1b:	90                   	nop
+c0101c1c:	c9                   	leave  
+c0101c1d:	c3                   	ret    
+
+c0101c1e <serial_putc>:
+
+/* serial_putc - print character to serial port */
+static void
+serial_putc(int c) {
+c0101c1e:	55                   	push   %ebp
+c0101c1f:	89 e5                	mov    %esp,%ebp
+    if (c != '\b') {
+c0101c21:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
+c0101c25:	74 0d                	je     c0101c34 <serial_putc+0x16>
+        serial_putc_sub(c);
+c0101c27:	ff 75 08             	pushl  0x8(%ebp)
+c0101c2a:	e8 95 ff ff ff       	call   c0101bc4 <serial_putc_sub>
+c0101c2f:	83 c4 04             	add    $0x4,%esp
+    else {
+        serial_putc_sub('\b');
+        serial_putc_sub(' ');
+        serial_putc_sub('\b');
+    }
+}
+c0101c32:	eb 1e                	jmp    c0101c52 <serial_putc+0x34>
+serial_putc(int c) {
+    if (c != '\b') {
+        serial_putc_sub(c);
+    }
+    else {
+        serial_putc_sub('\b');
+c0101c34:	6a 08                	push   $0x8
+c0101c36:	e8 89 ff ff ff       	call   c0101bc4 <serial_putc_sub>
+c0101c3b:	83 c4 04             	add    $0x4,%esp
+        serial_putc_sub(' ');
+c0101c3e:	6a 20                	push   $0x20
+c0101c40:	e8 7f ff ff ff       	call   c0101bc4 <serial_putc_sub>
+c0101c45:	83 c4 04             	add    $0x4,%esp
+        serial_putc_sub('\b');
+c0101c48:	6a 08                	push   $0x8
+c0101c4a:	e8 75 ff ff ff       	call   c0101bc4 <serial_putc_sub>
+c0101c4f:	83 c4 04             	add    $0x4,%esp
+    }
+}
+c0101c52:	90                   	nop
+c0101c53:	c9                   	leave  
+c0101c54:	c3                   	ret    
+
+c0101c55 <cons_intr>:
+/* *
+ * cons_intr - called by device interrupt routines to feed input
+ * characters into the circular console input buffer.
+ * */
+static void
+cons_intr(int (*proc)(void)) {
+c0101c55:	55                   	push   %ebp
+c0101c56:	89 e5                	mov    %esp,%ebp
+c0101c58:	83 ec 18             	sub    $0x18,%esp
+    int c;
+    while ((c = (*proc)()) != -1) {
+c0101c5b:	eb 33                	jmp    c0101c90 <cons_intr+0x3b>
+        if (c != 0) {
+c0101c5d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0101c61:	74 2d                	je     c0101c90 <cons_intr+0x3b>
+            cons.buf[cons.wpos ++] = c;
+c0101c63:	a1 24 e4 1a c0       	mov    0xc01ae424,%eax
+c0101c68:	8d 50 01             	lea    0x1(%eax),%edx
+c0101c6b:	89 15 24 e4 1a c0    	mov    %edx,0xc01ae424
+c0101c71:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0101c74:	88 90 20 e2 1a c0    	mov    %dl,-0x3fe51de0(%eax)
+            if (cons.wpos == CONSBUFSIZE) {
+c0101c7a:	a1 24 e4 1a c0       	mov    0xc01ae424,%eax
+c0101c7f:	3d 00 02 00 00       	cmp    $0x200,%eax
+c0101c84:	75 0a                	jne    c0101c90 <cons_intr+0x3b>
+                cons.wpos = 0;
+c0101c86:	c7 05 24 e4 1a c0 00 	movl   $0x0,0xc01ae424
+c0101c8d:	00 00 00 
+ * characters into the circular console input buffer.
+ * */
+static void
+cons_intr(int (*proc)(void)) {
+    int c;
+    while ((c = (*proc)()) != -1) {
+c0101c90:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101c93:	ff d0                	call   *%eax
+c0101c95:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0101c98:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
+c0101c9c:	75 bf                	jne    c0101c5d <cons_intr+0x8>
+            if (cons.wpos == CONSBUFSIZE) {
+                cons.wpos = 0;
+            }
+        }
+    }
+}
+c0101c9e:	90                   	nop
+c0101c9f:	c9                   	leave  
+c0101ca0:	c3                   	ret    
+
+c0101ca1 <serial_proc_data>:
+
+/* serial_proc_data - get data from serial port */
+static int
+serial_proc_data(void) {
+c0101ca1:	55                   	push   %ebp
+c0101ca2:	89 e5                	mov    %esp,%ebp
+c0101ca4:	83 ec 10             	sub    $0x10,%esp
+c0101ca7:	66 c7 45 f8 fd 03    	movw   $0x3fd,-0x8(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0101cad:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
+c0101cb1:	89 c2                	mov    %eax,%edx
+c0101cb3:	ec                   	in     (%dx),%al
+c0101cb4:	88 45 f7             	mov    %al,-0x9(%ebp)
+    return data;
+c0101cb7:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
+c0101cbb:	0f b6 c0             	movzbl %al,%eax
+c0101cbe:	83 e0 01             	and    $0x1,%eax
+c0101cc1:	85 c0                	test   %eax,%eax
+c0101cc3:	75 07                	jne    c0101ccc <serial_proc_data+0x2b>
+        return -1;
+c0101cc5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c0101cca:	eb 2a                	jmp    c0101cf6 <serial_proc_data+0x55>
+c0101ccc:	66 c7 45 fa f8 03    	movw   $0x3f8,-0x6(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0101cd2:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
+c0101cd6:	89 c2                	mov    %eax,%edx
+c0101cd8:	ec                   	in     (%dx),%al
+c0101cd9:	88 45 f6             	mov    %al,-0xa(%ebp)
+    return data;
+c0101cdc:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
+    }
+    int c = inb(COM1 + COM_RX);
+c0101ce0:	0f b6 c0             	movzbl %al,%eax
+c0101ce3:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    if (c == 127) {
+c0101ce6:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
+c0101cea:	75 07                	jne    c0101cf3 <serial_proc_data+0x52>
+        c = '\b';
+c0101cec:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
+    }
+    return c;
+c0101cf3:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+c0101cf6:	c9                   	leave  
+c0101cf7:	c3                   	ret    
+
+c0101cf8 <serial_intr>:
+
+/* serial_intr - try to feed input characters from serial port */
+void
+serial_intr(void) {
+c0101cf8:	55                   	push   %ebp
+c0101cf9:	89 e5                	mov    %esp,%ebp
+c0101cfb:	83 ec 08             	sub    $0x8,%esp
+    if (serial_exists) {
+c0101cfe:	a1 08 e2 1a c0       	mov    0xc01ae208,%eax
+c0101d03:	85 c0                	test   %eax,%eax
+c0101d05:	74 10                	je     c0101d17 <serial_intr+0x1f>
+        cons_intr(serial_proc_data);
+c0101d07:	83 ec 0c             	sub    $0xc,%esp
+c0101d0a:	68 a1 1c 10 c0       	push   $0xc0101ca1
+c0101d0f:	e8 41 ff ff ff       	call   c0101c55 <cons_intr>
+c0101d14:	83 c4 10             	add    $0x10,%esp
+    }
+}
+c0101d17:	90                   	nop
+c0101d18:	c9                   	leave  
+c0101d19:	c3                   	ret    
+
+c0101d1a <kbd_proc_data>:
+ *
+ * The kbd_proc_data() function gets data from the keyboard.
+ * If we finish a character, return it, else 0. And return -1 if no data.
+ * */
+static int
+kbd_proc_data(void) {
+c0101d1a:	55                   	push   %ebp
+c0101d1b:	89 e5                	mov    %esp,%ebp
+c0101d1d:	83 ec 18             	sub    $0x18,%esp
+c0101d20:	66 c7 45 ec 64 00    	movw   $0x64,-0x14(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0101d26:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
+c0101d2a:	89 c2                	mov    %eax,%edx
+c0101d2c:	ec                   	in     (%dx),%al
+c0101d2d:	88 45 eb             	mov    %al,-0x15(%ebp)
+    return data;
+c0101d30:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
+    int c;
+    uint8_t data;
+    static uint32_t shift;
+
+    if ((inb(KBSTATP) & KBS_DIB) == 0) {
+c0101d34:	0f b6 c0             	movzbl %al,%eax
+c0101d37:	83 e0 01             	and    $0x1,%eax
+c0101d3a:	85 c0                	test   %eax,%eax
+c0101d3c:	75 0a                	jne    c0101d48 <kbd_proc_data+0x2e>
+        return -1;
+c0101d3e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c0101d43:	e9 5d 01 00 00       	jmp    c0101ea5 <kbd_proc_data+0x18b>
+c0101d48:	66 c7 45 f0 60 00    	movw   $0x60,-0x10(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0101d4e:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
+c0101d52:	89 c2                	mov    %eax,%edx
+c0101d54:	ec                   	in     (%dx),%al
+c0101d55:	88 45 ea             	mov    %al,-0x16(%ebp)
+    return data;
+c0101d58:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
+    }
+
+    data = inb(KBDATAP);
+c0101d5c:	88 45 f3             	mov    %al,-0xd(%ebp)
+
+    if (data == 0xE0) {
+c0101d5f:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
+c0101d63:	75 17                	jne    c0101d7c <kbd_proc_data+0x62>
+        // E0 escape character
+        shift |= E0ESC;
+c0101d65:	a1 28 e4 1a c0       	mov    0xc01ae428,%eax
+c0101d6a:	83 c8 40             	or     $0x40,%eax
+c0101d6d:	a3 28 e4 1a c0       	mov    %eax,0xc01ae428
+        return 0;
+c0101d72:	b8 00 00 00 00       	mov    $0x0,%eax
+c0101d77:	e9 29 01 00 00       	jmp    c0101ea5 <kbd_proc_data+0x18b>
+    } else if (data & 0x80) {
+c0101d7c:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c0101d80:	84 c0                	test   %al,%al
+c0101d82:	79 47                	jns    c0101dcb <kbd_proc_data+0xb1>
+        // Key released
+        data = (shift & E0ESC ? data : data & 0x7F);
+c0101d84:	a1 28 e4 1a c0       	mov    0xc01ae428,%eax
+c0101d89:	83 e0 40             	and    $0x40,%eax
+c0101d8c:	85 c0                	test   %eax,%eax
+c0101d8e:	75 09                	jne    c0101d99 <kbd_proc_data+0x7f>
+c0101d90:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c0101d94:	83 e0 7f             	and    $0x7f,%eax
+c0101d97:	eb 04                	jmp    c0101d9d <kbd_proc_data+0x83>
+c0101d99:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c0101d9d:	88 45 f3             	mov    %al,-0xd(%ebp)
+        shift &= ~(shiftcode[data] | E0ESC);
+c0101da0:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c0101da4:	0f b6 80 60 c0 12 c0 	movzbl -0x3fed3fa0(%eax),%eax
+c0101dab:	83 c8 40             	or     $0x40,%eax
+c0101dae:	0f b6 c0             	movzbl %al,%eax
+c0101db1:	f7 d0                	not    %eax
+c0101db3:	89 c2                	mov    %eax,%edx
+c0101db5:	a1 28 e4 1a c0       	mov    0xc01ae428,%eax
+c0101dba:	21 d0                	and    %edx,%eax
+c0101dbc:	a3 28 e4 1a c0       	mov    %eax,0xc01ae428
+        return 0;
+c0101dc1:	b8 00 00 00 00       	mov    $0x0,%eax
+c0101dc6:	e9 da 00 00 00       	jmp    c0101ea5 <kbd_proc_data+0x18b>
+    } else if (shift & E0ESC) {
+c0101dcb:	a1 28 e4 1a c0       	mov    0xc01ae428,%eax
+c0101dd0:	83 e0 40             	and    $0x40,%eax
+c0101dd3:	85 c0                	test   %eax,%eax
+c0101dd5:	74 11                	je     c0101de8 <kbd_proc_data+0xce>
+        // Last character was an E0 escape; or with 0x80
+        data |= 0x80;
+c0101dd7:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
+        shift &= ~E0ESC;
+c0101ddb:	a1 28 e4 1a c0       	mov    0xc01ae428,%eax
+c0101de0:	83 e0 bf             	and    $0xffffffbf,%eax
+c0101de3:	a3 28 e4 1a c0       	mov    %eax,0xc01ae428
+    }
+
+    shift |= shiftcode[data];
+c0101de8:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c0101dec:	0f b6 80 60 c0 12 c0 	movzbl -0x3fed3fa0(%eax),%eax
+c0101df3:	0f b6 d0             	movzbl %al,%edx
+c0101df6:	a1 28 e4 1a c0       	mov    0xc01ae428,%eax
+c0101dfb:	09 d0                	or     %edx,%eax
+c0101dfd:	a3 28 e4 1a c0       	mov    %eax,0xc01ae428
+    shift ^= togglecode[data];
+c0101e02:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c0101e06:	0f b6 80 60 c1 12 c0 	movzbl -0x3fed3ea0(%eax),%eax
+c0101e0d:	0f b6 d0             	movzbl %al,%edx
+c0101e10:	a1 28 e4 1a c0       	mov    0xc01ae428,%eax
+c0101e15:	31 d0                	xor    %edx,%eax
+c0101e17:	a3 28 e4 1a c0       	mov    %eax,0xc01ae428
+
+    c = charcode[shift & (CTL | SHIFT)][data];
+c0101e1c:	a1 28 e4 1a c0       	mov    0xc01ae428,%eax
+c0101e21:	83 e0 03             	and    $0x3,%eax
+c0101e24:	8b 14 85 60 c5 12 c0 	mov    -0x3fed3aa0(,%eax,4),%edx
+c0101e2b:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c0101e2f:	01 d0                	add    %edx,%eax
+c0101e31:	0f b6 00             	movzbl (%eax),%eax
+c0101e34:	0f b6 c0             	movzbl %al,%eax
+c0101e37:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (shift & CAPSLOCK) {
+c0101e3a:	a1 28 e4 1a c0       	mov    0xc01ae428,%eax
+c0101e3f:	83 e0 08             	and    $0x8,%eax
+c0101e42:	85 c0                	test   %eax,%eax
+c0101e44:	74 22                	je     c0101e68 <kbd_proc_data+0x14e>
+        if ('a' <= c && c <= 'z')
+c0101e46:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
+c0101e4a:	7e 0c                	jle    c0101e58 <kbd_proc_data+0x13e>
+c0101e4c:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
+c0101e50:	7f 06                	jg     c0101e58 <kbd_proc_data+0x13e>
+            c += 'A' - 'a';
+c0101e52:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
+c0101e56:	eb 10                	jmp    c0101e68 <kbd_proc_data+0x14e>
+        else if ('A' <= c && c <= 'Z')
+c0101e58:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
+c0101e5c:	7e 0a                	jle    c0101e68 <kbd_proc_data+0x14e>
+c0101e5e:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
+c0101e62:	7f 04                	jg     c0101e68 <kbd_proc_data+0x14e>
+            c += 'a' - 'A';
+c0101e64:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
+    }
+
+    // Process special keys
+    // Ctrl-Alt-Del: reboot
+    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
+c0101e68:	a1 28 e4 1a c0       	mov    0xc01ae428,%eax
+c0101e6d:	f7 d0                	not    %eax
+c0101e6f:	83 e0 06             	and    $0x6,%eax
+c0101e72:	85 c0                	test   %eax,%eax
+c0101e74:	75 2c                	jne    c0101ea2 <kbd_proc_data+0x188>
+c0101e76:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
+c0101e7d:	75 23                	jne    c0101ea2 <kbd_proc_data+0x188>
+        cprintf("Rebooting!\n");
+c0101e7f:	83 ec 0c             	sub    $0xc,%esp
+c0101e82:	68 11 bd 10 c0       	push   $0xc010bd11
+c0101e87:	e8 02 e4 ff ff       	call   c010028e <cprintf>
+c0101e8c:	83 c4 10             	add    $0x10,%esp
+c0101e8f:	66 c7 45 ee 92 00    	movw   $0x92,-0x12(%ebp)
+c0101e95:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0101e99:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
+c0101e9d:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
+c0101ea1:	ee                   	out    %al,(%dx)
+        outb(0x92, 0x3); // courtesy of Chris Frost
+    }
+    return c;
+c0101ea2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0101ea5:	c9                   	leave  
+c0101ea6:	c3                   	ret    
+
+c0101ea7 <kbd_intr>:
+
+/* kbd_intr - try to feed input characters from keyboard */
+static void
+kbd_intr(void) {
+c0101ea7:	55                   	push   %ebp
+c0101ea8:	89 e5                	mov    %esp,%ebp
+c0101eaa:	83 ec 08             	sub    $0x8,%esp
+    cons_intr(kbd_proc_data);
+c0101ead:	83 ec 0c             	sub    $0xc,%esp
+c0101eb0:	68 1a 1d 10 c0       	push   $0xc0101d1a
+c0101eb5:	e8 9b fd ff ff       	call   c0101c55 <cons_intr>
+c0101eba:	83 c4 10             	add    $0x10,%esp
+}
+c0101ebd:	90                   	nop
+c0101ebe:	c9                   	leave  
+c0101ebf:	c3                   	ret    
+
+c0101ec0 <kbd_init>:
+
+static void
+kbd_init(void) {
+c0101ec0:	55                   	push   %ebp
+c0101ec1:	89 e5                	mov    %esp,%ebp
+c0101ec3:	83 ec 08             	sub    $0x8,%esp
+    // drain the kbd buffer
+    kbd_intr();
+c0101ec6:	e8 dc ff ff ff       	call   c0101ea7 <kbd_intr>
+    pic_enable(IRQ_KBD);
+c0101ecb:	83 ec 0c             	sub    $0xc,%esp
+c0101ece:	6a 01                	push   $0x1
+c0101ed0:	e8 4b 01 00 00       	call   c0102020 <pic_enable>
+c0101ed5:	83 c4 10             	add    $0x10,%esp
+}
+c0101ed8:	90                   	nop
+c0101ed9:	c9                   	leave  
+c0101eda:	c3                   	ret    
+
+c0101edb <cons_init>:
+
+/* cons_init - initializes the console devices */
+void
+cons_init(void) {
+c0101edb:	55                   	push   %ebp
+c0101edc:	89 e5                	mov    %esp,%ebp
+c0101ede:	83 ec 08             	sub    $0x8,%esp
+    cga_init();
+c0101ee1:	e8 8c f8 ff ff       	call   c0101772 <cga_init>
+    serial_init();
+c0101ee6:	e8 6e f9 ff ff       	call   c0101859 <serial_init>
+    kbd_init();
+c0101eeb:	e8 d0 ff ff ff       	call   c0101ec0 <kbd_init>
+    if (!serial_exists) {
+c0101ef0:	a1 08 e2 1a c0       	mov    0xc01ae208,%eax
+c0101ef5:	85 c0                	test   %eax,%eax
+c0101ef7:	75 10                	jne    c0101f09 <cons_init+0x2e>
+        cprintf("serial port does not exist!!\n");
+c0101ef9:	83 ec 0c             	sub    $0xc,%esp
+c0101efc:	68 1d bd 10 c0       	push   $0xc010bd1d
+c0101f01:	e8 88 e3 ff ff       	call   c010028e <cprintf>
+c0101f06:	83 c4 10             	add    $0x10,%esp
+    }
+}
+c0101f09:	90                   	nop
+c0101f0a:	c9                   	leave  
+c0101f0b:	c3                   	ret    
+
+c0101f0c <cons_putc>:
+
+/* cons_putc - print a single character @c to console devices */
+void
+cons_putc(int c) {
+c0101f0c:	55                   	push   %ebp
+c0101f0d:	89 e5                	mov    %esp,%ebp
+c0101f0f:	83 ec 18             	sub    $0x18,%esp
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c0101f12:	e8 d4 f7 ff ff       	call   c01016eb <__intr_save>
+c0101f17:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    {
+        lpt_putc(c);
+c0101f1a:	83 ec 0c             	sub    $0xc,%esp
+c0101f1d:	ff 75 08             	pushl  0x8(%ebp)
+c0101f20:	e8 93 fa ff ff       	call   c01019b8 <lpt_putc>
+c0101f25:	83 c4 10             	add    $0x10,%esp
+        cga_putc(c);
+c0101f28:	83 ec 0c             	sub    $0xc,%esp
+c0101f2b:	ff 75 08             	pushl  0x8(%ebp)
+c0101f2e:	e8 bc fa ff ff       	call   c01019ef <cga_putc>
+c0101f33:	83 c4 10             	add    $0x10,%esp
+        serial_putc(c);
+c0101f36:	83 ec 0c             	sub    $0xc,%esp
+c0101f39:	ff 75 08             	pushl  0x8(%ebp)
+c0101f3c:	e8 dd fc ff ff       	call   c0101c1e <serial_putc>
+c0101f41:	83 c4 10             	add    $0x10,%esp
+    }
+    local_intr_restore(intr_flag);
+c0101f44:	83 ec 0c             	sub    $0xc,%esp
+c0101f47:	ff 75 f4             	pushl  -0xc(%ebp)
+c0101f4a:	e8 c6 f7 ff ff       	call   c0101715 <__intr_restore>
+c0101f4f:	83 c4 10             	add    $0x10,%esp
+}
+c0101f52:	90                   	nop
+c0101f53:	c9                   	leave  
+c0101f54:	c3                   	ret    
+
+c0101f55 <cons_getc>:
+/* *
+ * cons_getc - return the next input character from console,
+ * or 0 if none waiting.
+ * */
+int
+cons_getc(void) {
+c0101f55:	55                   	push   %ebp
+c0101f56:	89 e5                	mov    %esp,%ebp
+c0101f58:	83 ec 18             	sub    $0x18,%esp
+    int c = 0;
+c0101f5b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c0101f62:	e8 84 f7 ff ff       	call   c01016eb <__intr_save>
+c0101f67:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    {
+        // poll for any pending input characters,
+        // so that this function works even when interrupts are disabled
+        // (e.g., when called from the kernel monitor).
+        serial_intr();
+c0101f6a:	e8 89 fd ff ff       	call   c0101cf8 <serial_intr>
+        kbd_intr();
+c0101f6f:	e8 33 ff ff ff       	call   c0101ea7 <kbd_intr>
+
+        // grab the next character from the input buffer.
+        if (cons.rpos != cons.wpos) {
+c0101f74:	8b 15 20 e4 1a c0    	mov    0xc01ae420,%edx
+c0101f7a:	a1 24 e4 1a c0       	mov    0xc01ae424,%eax
+c0101f7f:	39 c2                	cmp    %eax,%edx
+c0101f81:	74 31                	je     c0101fb4 <cons_getc+0x5f>
+            c = cons.buf[cons.rpos ++];
+c0101f83:	a1 20 e4 1a c0       	mov    0xc01ae420,%eax
+c0101f88:	8d 50 01             	lea    0x1(%eax),%edx
+c0101f8b:	89 15 20 e4 1a c0    	mov    %edx,0xc01ae420
+c0101f91:	0f b6 80 20 e2 1a c0 	movzbl -0x3fe51de0(%eax),%eax
+c0101f98:	0f b6 c0             	movzbl %al,%eax
+c0101f9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+            if (cons.rpos == CONSBUFSIZE) {
+c0101f9e:	a1 20 e4 1a c0       	mov    0xc01ae420,%eax
+c0101fa3:	3d 00 02 00 00       	cmp    $0x200,%eax
+c0101fa8:	75 0a                	jne    c0101fb4 <cons_getc+0x5f>
+                cons.rpos = 0;
+c0101faa:	c7 05 20 e4 1a c0 00 	movl   $0x0,0xc01ae420
+c0101fb1:	00 00 00 
+            }
+        }
+    }
+    local_intr_restore(intr_flag);
+c0101fb4:	83 ec 0c             	sub    $0xc,%esp
+c0101fb7:	ff 75 f0             	pushl  -0x10(%ebp)
+c0101fba:	e8 56 f7 ff ff       	call   c0101715 <__intr_restore>
+c0101fbf:	83 c4 10             	add    $0x10,%esp
+    return c;
+c0101fc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0101fc5:	c9                   	leave  
+c0101fc6:	c3                   	ret    
+
+c0101fc7 <pic_setmask>:
+// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
+static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
+static bool did_init = 0;
+
+static void
+pic_setmask(uint16_t mask) {
+c0101fc7:	55                   	push   %ebp
+c0101fc8:	89 e5                	mov    %esp,%ebp
+c0101fca:	83 ec 14             	sub    $0x14,%esp
+c0101fcd:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101fd0:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
+    irq_mask = mask;
+c0101fd4:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
+c0101fd8:	66 a3 70 c5 12 c0    	mov    %ax,0xc012c570
+    if (did_init) {
+c0101fde:	a1 2c e4 1a c0       	mov    0xc01ae42c,%eax
+c0101fe3:	85 c0                	test   %eax,%eax
+c0101fe5:	74 36                	je     c010201d <pic_setmask+0x56>
+        outb(IO_PIC1 + 1, mask);
+c0101fe7:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
+c0101feb:	0f b6 c0             	movzbl %al,%eax
+c0101fee:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
+c0101ff4:	88 45 fa             	mov    %al,-0x6(%ebp)
+c0101ff7:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
+c0101ffb:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
+c0101fff:	ee                   	out    %al,(%dx)
+        outb(IO_PIC2 + 1, mask >> 8);
+c0102000:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
+c0102004:	66 c1 e8 08          	shr    $0x8,%ax
+c0102008:	0f b6 c0             	movzbl %al,%eax
+c010200b:	66 c7 45 fc a1 00    	movw   $0xa1,-0x4(%ebp)
+c0102011:	88 45 fb             	mov    %al,-0x5(%ebp)
+c0102014:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
+c0102018:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
+c010201c:	ee                   	out    %al,(%dx)
+    }
+}
+c010201d:	90                   	nop
+c010201e:	c9                   	leave  
+c010201f:	c3                   	ret    
+
+c0102020 <pic_enable>:
+
+void
+pic_enable(unsigned int irq) {
+c0102020:	55                   	push   %ebp
+c0102021:	89 e5                	mov    %esp,%ebp
+    pic_setmask(irq_mask & ~(1 << irq));
+c0102023:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102026:	ba 01 00 00 00       	mov    $0x1,%edx
+c010202b:	89 c1                	mov    %eax,%ecx
+c010202d:	d3 e2                	shl    %cl,%edx
+c010202f:	89 d0                	mov    %edx,%eax
+c0102031:	f7 d0                	not    %eax
+c0102033:	89 c2                	mov    %eax,%edx
+c0102035:	0f b7 05 70 c5 12 c0 	movzwl 0xc012c570,%eax
+c010203c:	21 d0                	and    %edx,%eax
+c010203e:	0f b7 c0             	movzwl %ax,%eax
+c0102041:	50                   	push   %eax
+c0102042:	e8 80 ff ff ff       	call   c0101fc7 <pic_setmask>
+c0102047:	83 c4 04             	add    $0x4,%esp
+}
+c010204a:	90                   	nop
+c010204b:	c9                   	leave  
+c010204c:	c3                   	ret    
+
+c010204d <pic_init>:
+
+/* pic_init - initialize the 8259A interrupt controllers */
+void
+pic_init(void) {
+c010204d:	55                   	push   %ebp
+c010204e:	89 e5                	mov    %esp,%ebp
+c0102050:	83 ec 30             	sub    $0x30,%esp
+    did_init = 1;
+c0102053:	c7 05 2c e4 1a c0 01 	movl   $0x1,0xc01ae42c
+c010205a:	00 00 00 
+c010205d:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
+c0102063:	c6 45 d6 ff          	movb   $0xff,-0x2a(%ebp)
+c0102067:	0f b6 45 d6          	movzbl -0x2a(%ebp),%eax
+c010206b:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
+c010206f:	ee                   	out    %al,(%dx)
+c0102070:	66 c7 45 fc a1 00    	movw   $0xa1,-0x4(%ebp)
+c0102076:	c6 45 d7 ff          	movb   $0xff,-0x29(%ebp)
+c010207a:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
+c010207e:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
+c0102082:	ee                   	out    %al,(%dx)
+c0102083:	66 c7 45 fa 20 00    	movw   $0x20,-0x6(%ebp)
+c0102089:	c6 45 d8 11          	movb   $0x11,-0x28(%ebp)
+c010208d:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
+c0102091:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
+c0102095:	ee                   	out    %al,(%dx)
+c0102096:	66 c7 45 f8 21 00    	movw   $0x21,-0x8(%ebp)
+c010209c:	c6 45 d9 20          	movb   $0x20,-0x27(%ebp)
+c01020a0:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
+c01020a4:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
+c01020a8:	ee                   	out    %al,(%dx)
+c01020a9:	66 c7 45 f6 21 00    	movw   $0x21,-0xa(%ebp)
+c01020af:	c6 45 da 04          	movb   $0x4,-0x26(%ebp)
+c01020b3:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
+c01020b7:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
+c01020bb:	ee                   	out    %al,(%dx)
+c01020bc:	66 c7 45 f4 21 00    	movw   $0x21,-0xc(%ebp)
+c01020c2:	c6 45 db 03          	movb   $0x3,-0x25(%ebp)
+c01020c6:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
+c01020ca:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
+c01020ce:	ee                   	out    %al,(%dx)
+c01020cf:	66 c7 45 f2 a0 00    	movw   $0xa0,-0xe(%ebp)
+c01020d5:	c6 45 dc 11          	movb   $0x11,-0x24(%ebp)
+c01020d9:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
+c01020dd:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c01020e1:	ee                   	out    %al,(%dx)
+c01020e2:	66 c7 45 f0 a1 00    	movw   $0xa1,-0x10(%ebp)
+c01020e8:	c6 45 dd 28          	movb   $0x28,-0x23(%ebp)
+c01020ec:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
+c01020f0:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
+c01020f4:	ee                   	out    %al,(%dx)
+c01020f5:	66 c7 45 ee a1 00    	movw   $0xa1,-0x12(%ebp)
+c01020fb:	c6 45 de 02          	movb   $0x2,-0x22(%ebp)
+c01020ff:	0f b6 45 de          	movzbl -0x22(%ebp),%eax
+c0102103:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
+c0102107:	ee                   	out    %al,(%dx)
+c0102108:	66 c7 45 ec a1 00    	movw   $0xa1,-0x14(%ebp)
+c010210e:	c6 45 df 03          	movb   $0x3,-0x21(%ebp)
+c0102112:	0f b6 45 df          	movzbl -0x21(%ebp),%eax
+c0102116:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
+c010211a:	ee                   	out    %al,(%dx)
+c010211b:	66 c7 45 ea 20 00    	movw   $0x20,-0x16(%ebp)
+c0102121:	c6 45 e0 68          	movb   $0x68,-0x20(%ebp)
+c0102125:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
+c0102129:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c010212d:	ee                   	out    %al,(%dx)
+c010212e:	66 c7 45 e8 20 00    	movw   $0x20,-0x18(%ebp)
+c0102134:	c6 45 e1 0a          	movb   $0xa,-0x1f(%ebp)
+c0102138:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
+c010213c:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
+c0102140:	ee                   	out    %al,(%dx)
+c0102141:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
+c0102147:	c6 45 e2 68          	movb   $0x68,-0x1e(%ebp)
+c010214b:	0f b6 45 e2          	movzbl -0x1e(%ebp),%eax
+c010214f:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
+c0102153:	ee                   	out    %al,(%dx)
+c0102154:	66 c7 45 e4 a0 00    	movw   $0xa0,-0x1c(%ebp)
+c010215a:	c6 45 e3 0a          	movb   $0xa,-0x1d(%ebp)
+c010215e:	0f b6 45 e3          	movzbl -0x1d(%ebp),%eax
+c0102162:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
+c0102166:	ee                   	out    %al,(%dx)
+    outb(IO_PIC1, 0x0a);    // read IRR by default
+
+    outb(IO_PIC2, 0x68);    // OCW3
+    outb(IO_PIC2, 0x0a);    // OCW3
+
+    if (irq_mask != 0xFFFF) {
+c0102167:	0f b7 05 70 c5 12 c0 	movzwl 0xc012c570,%eax
+c010216e:	66 83 f8 ff          	cmp    $0xffff,%ax
+c0102172:	74 13                	je     c0102187 <pic_init+0x13a>
+        pic_setmask(irq_mask);
+c0102174:	0f b7 05 70 c5 12 c0 	movzwl 0xc012c570,%eax
+c010217b:	0f b7 c0             	movzwl %ax,%eax
+c010217e:	50                   	push   %eax
+c010217f:	e8 43 fe ff ff       	call   c0101fc7 <pic_setmask>
+c0102184:	83 c4 04             	add    $0x4,%esp
+    }
+}
+c0102187:	90                   	nop
+c0102188:	c9                   	leave  
+c0102189:	c3                   	ret    
+
+c010218a <intr_enable>:
+#include <x86.h>
+#include <intr.h>
+
+/* intr_enable - enable irq interrupt */
+void
+intr_enable(void) {
+c010218a:	55                   	push   %ebp
+c010218b:	89 e5                	mov    %esp,%ebp
+    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
+}
+
+static inline void
+sti(void) {
+    asm volatile ("sti");
+c010218d:	fb                   	sti    
+    sti();
+}
+c010218e:	90                   	nop
+c010218f:	5d                   	pop    %ebp
+c0102190:	c3                   	ret    
+
+c0102191 <intr_disable>:
+
+/* intr_disable - disable irq interrupt */
+void
+intr_disable(void) {
+c0102191:	55                   	push   %ebp
+c0102192:	89 e5                	mov    %esp,%ebp
+}
+
+static inline void
+cli(void) {
+    asm volatile ("cli" ::: "memory");
+c0102194:	fa                   	cli    
+    cli();
+}
+c0102195:	90                   	nop
+c0102196:	5d                   	pop    %ebp
+c0102197:	c3                   	ret    
+
+c0102198 <print_ticks>:
+#include <sync.h>
+#include <proc.h>
+
+#define TICK_NUM 100
+
+static void print_ticks() {
+c0102198:	55                   	push   %ebp
+c0102199:	89 e5                	mov    %esp,%ebp
+c010219b:	83 ec 08             	sub    $0x8,%esp
+    cprintf("%d ticks\n",TICK_NUM);
+c010219e:	83 ec 08             	sub    $0x8,%esp
+c01021a1:	6a 64                	push   $0x64
+c01021a3:	68 40 bd 10 c0       	push   $0xc010bd40
+c01021a8:	e8 e1 e0 ff ff       	call   c010028e <cprintf>
+c01021ad:	83 c4 10             	add    $0x10,%esp
+#ifdef DEBUG_GRADE
+    cprintf("End of Test.\n");
+c01021b0:	83 ec 0c             	sub    $0xc,%esp
+c01021b3:	68 4a bd 10 c0       	push   $0xc010bd4a
+c01021b8:	e8 d1 e0 ff ff       	call   c010028e <cprintf>
+c01021bd:	83 c4 10             	add    $0x10,%esp
+    panic("EOT: kernel seems ok.");
+c01021c0:	83 ec 04             	sub    $0x4,%esp
+c01021c3:	68 58 bd 10 c0       	push   $0xc010bd58
+c01021c8:	6a 1a                	push   $0x1a
+c01021ca:	68 6e bd 10 c0       	push   $0xc010bd6e
+c01021cf:	e8 20 e2 ff ff       	call   c01003f4 <__panic>
+
+c01021d4 <idt_init>:
+    sizeof(idt) - 1, (uintptr_t)idt
+};
+
+/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
+void
+idt_init(void) {
+c01021d4:	55                   	push   %ebp
+c01021d5:	89 e5                	mov    %esp,%ebp
+c01021d7:	83 ec 10             	sub    $0x10,%esp
+      */
+     /* LAB5 2013011371 */
+     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
+     //so you should setup the syscall interrupt gate in here
+	extern uintptr_t __vectors[];
+	for (int i=0; i<sizeof(idt)/sizeof(struct gatedesc); i++){
+c01021da:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+c01021e1:	e9 c3 00 00 00       	jmp    c01022a9 <idt_init+0xd5>
+		SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
+c01021e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01021e9:	8b 04 85 00 c6 12 c0 	mov    -0x3fed3a00(,%eax,4),%eax
+c01021f0:	89 c2                	mov    %eax,%edx
+c01021f2:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01021f5:	66 89 14 c5 40 e4 1a 	mov    %dx,-0x3fe51bc0(,%eax,8)
+c01021fc:	c0 
+c01021fd:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0102200:	66 c7 04 c5 42 e4 1a 	movw   $0x8,-0x3fe51bbe(,%eax,8)
+c0102207:	c0 08 00 
+c010220a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010220d:	0f b6 14 c5 44 e4 1a 	movzbl -0x3fe51bbc(,%eax,8),%edx
+c0102214:	c0 
+c0102215:	83 e2 e0             	and    $0xffffffe0,%edx
+c0102218:	88 14 c5 44 e4 1a c0 	mov    %dl,-0x3fe51bbc(,%eax,8)
+c010221f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0102222:	0f b6 14 c5 44 e4 1a 	movzbl -0x3fe51bbc(,%eax,8),%edx
+c0102229:	c0 
+c010222a:	83 e2 1f             	and    $0x1f,%edx
+c010222d:	88 14 c5 44 e4 1a c0 	mov    %dl,-0x3fe51bbc(,%eax,8)
+c0102234:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0102237:	0f b6 14 c5 45 e4 1a 	movzbl -0x3fe51bbb(,%eax,8),%edx
+c010223e:	c0 
+c010223f:	83 e2 f0             	and    $0xfffffff0,%edx
+c0102242:	83 ca 0e             	or     $0xe,%edx
+c0102245:	88 14 c5 45 e4 1a c0 	mov    %dl,-0x3fe51bbb(,%eax,8)
+c010224c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010224f:	0f b6 14 c5 45 e4 1a 	movzbl -0x3fe51bbb(,%eax,8),%edx
+c0102256:	c0 
+c0102257:	83 e2 ef             	and    $0xffffffef,%edx
+c010225a:	88 14 c5 45 e4 1a c0 	mov    %dl,-0x3fe51bbb(,%eax,8)
+c0102261:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0102264:	0f b6 14 c5 45 e4 1a 	movzbl -0x3fe51bbb(,%eax,8),%edx
+c010226b:	c0 
+c010226c:	83 e2 9f             	and    $0xffffff9f,%edx
+c010226f:	88 14 c5 45 e4 1a c0 	mov    %dl,-0x3fe51bbb(,%eax,8)
+c0102276:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0102279:	0f b6 14 c5 45 e4 1a 	movzbl -0x3fe51bbb(,%eax,8),%edx
+c0102280:	c0 
+c0102281:	83 ca 80             	or     $0xffffff80,%edx
+c0102284:	88 14 c5 45 e4 1a c0 	mov    %dl,-0x3fe51bbb(,%eax,8)
+c010228b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010228e:	8b 04 85 00 c6 12 c0 	mov    -0x3fed3a00(,%eax,4),%eax
+c0102295:	c1 e8 10             	shr    $0x10,%eax
+c0102298:	89 c2                	mov    %eax,%edx
+c010229a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010229d:	66 89 14 c5 46 e4 1a 	mov    %dx,-0x3fe51bba(,%eax,8)
+c01022a4:	c0 
+      */
+     /* LAB5 2013011371 */
+     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
+     //so you should setup the syscall interrupt gate in here
+	extern uintptr_t __vectors[];
+	for (int i=0; i<sizeof(idt)/sizeof(struct gatedesc); i++){
+c01022a5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+c01022a9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01022ac:	3d ff 00 00 00       	cmp    $0xff,%eax
+c01022b1:	0f 86 2f ff ff ff    	jbe    c01021e6 <idt_init+0x12>
+		SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
+	}
+	SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
+c01022b7:	a1 00 c8 12 c0       	mov    0xc012c800,%eax
+c01022bc:	66 a3 40 e8 1a c0    	mov    %ax,0xc01ae840
+c01022c2:	66 c7 05 42 e8 1a c0 	movw   $0x8,0xc01ae842
+c01022c9:	08 00 
+c01022cb:	0f b6 05 44 e8 1a c0 	movzbl 0xc01ae844,%eax
+c01022d2:	83 e0 e0             	and    $0xffffffe0,%eax
+c01022d5:	a2 44 e8 1a c0       	mov    %al,0xc01ae844
+c01022da:	0f b6 05 44 e8 1a c0 	movzbl 0xc01ae844,%eax
+c01022e1:	83 e0 1f             	and    $0x1f,%eax
+c01022e4:	a2 44 e8 1a c0       	mov    %al,0xc01ae844
+c01022e9:	0f b6 05 45 e8 1a c0 	movzbl 0xc01ae845,%eax
+c01022f0:	83 c8 0f             	or     $0xf,%eax
+c01022f3:	a2 45 e8 1a c0       	mov    %al,0xc01ae845
+c01022f8:	0f b6 05 45 e8 1a c0 	movzbl 0xc01ae845,%eax
+c01022ff:	83 e0 ef             	and    $0xffffffef,%eax
+c0102302:	a2 45 e8 1a c0       	mov    %al,0xc01ae845
+c0102307:	0f b6 05 45 e8 1a c0 	movzbl 0xc01ae845,%eax
+c010230e:	83 c8 60             	or     $0x60,%eax
+c0102311:	a2 45 e8 1a c0       	mov    %al,0xc01ae845
+c0102316:	0f b6 05 45 e8 1a c0 	movzbl 0xc01ae845,%eax
+c010231d:	83 c8 80             	or     $0xffffff80,%eax
+c0102320:	a2 45 e8 1a c0       	mov    %al,0xc01ae845
+c0102325:	a1 00 c8 12 c0       	mov    0xc012c800,%eax
+c010232a:	c1 e8 10             	shr    $0x10,%eax
+c010232d:	66 a3 46 e8 1a c0    	mov    %ax,0xc01ae846
+	SETGATE(idt[T_SWITCH_TOK], 1, GD_KTEXT, __vectors[T_SWITCH_TOK], DPL_USER);
+c0102333:	a1 e4 c7 12 c0       	mov    0xc012c7e4,%eax
+c0102338:	66 a3 08 e8 1a c0    	mov    %ax,0xc01ae808
+c010233e:	66 c7 05 0a e8 1a c0 	movw   $0x8,0xc01ae80a
+c0102345:	08 00 
+c0102347:	0f b6 05 0c e8 1a c0 	movzbl 0xc01ae80c,%eax
+c010234e:	83 e0 e0             	and    $0xffffffe0,%eax
+c0102351:	a2 0c e8 1a c0       	mov    %al,0xc01ae80c
+c0102356:	0f b6 05 0c e8 1a c0 	movzbl 0xc01ae80c,%eax
+c010235d:	83 e0 1f             	and    $0x1f,%eax
+c0102360:	a2 0c e8 1a c0       	mov    %al,0xc01ae80c
+c0102365:	0f b6 05 0d e8 1a c0 	movzbl 0xc01ae80d,%eax
+c010236c:	83 c8 0f             	or     $0xf,%eax
+c010236f:	a2 0d e8 1a c0       	mov    %al,0xc01ae80d
+c0102374:	0f b6 05 0d e8 1a c0 	movzbl 0xc01ae80d,%eax
+c010237b:	83 e0 ef             	and    $0xffffffef,%eax
+c010237e:	a2 0d e8 1a c0       	mov    %al,0xc01ae80d
+c0102383:	0f b6 05 0d e8 1a c0 	movzbl 0xc01ae80d,%eax
+c010238a:	83 c8 60             	or     $0x60,%eax
+c010238d:	a2 0d e8 1a c0       	mov    %al,0xc01ae80d
+c0102392:	0f b6 05 0d e8 1a c0 	movzbl 0xc01ae80d,%eax
+c0102399:	83 c8 80             	or     $0xffffff80,%eax
+c010239c:	a2 0d e8 1a c0       	mov    %al,0xc01ae80d
+c01023a1:	a1 e4 c7 12 c0       	mov    0xc012c7e4,%eax
+c01023a6:	c1 e8 10             	shr    $0x10,%eax
+c01023a9:	66 a3 0e e8 1a c0    	mov    %ax,0xc01ae80e
+c01023af:	c7 45 f8 80 c5 12 c0 	movl   $0xc012c580,-0x8(%ebp)
+    }
+}
+
+static inline void
+lidt(struct pseudodesc *pd) {
+    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
+c01023b6:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c01023b9:	0f 01 18             	lidtl  (%eax)
+	lidt(&idt_pd);
+}
+c01023bc:	90                   	nop
+c01023bd:	c9                   	leave  
+c01023be:	c3                   	ret    
+
+c01023bf <trapname>:
+
+static const char *
+trapname(int trapno) {
+c01023bf:	55                   	push   %ebp
+c01023c0:	89 e5                	mov    %esp,%ebp
+        "Alignment Check",
+        "Machine-Check",
+        "SIMD Floating-Point Exception"
+    };
+
+    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
+c01023c2:	8b 45 08             	mov    0x8(%ebp),%eax
+c01023c5:	83 f8 13             	cmp    $0x13,%eax
+c01023c8:	77 0c                	ja     c01023d6 <trapname+0x17>
+        return excnames[trapno];
+c01023ca:	8b 45 08             	mov    0x8(%ebp),%eax
+c01023cd:	8b 04 85 e0 c1 10 c0 	mov    -0x3fef3e20(,%eax,4),%eax
+c01023d4:	eb 18                	jmp    c01023ee <trapname+0x2f>
+    }
+    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
+c01023d6:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
+c01023da:	7e 0d                	jle    c01023e9 <trapname+0x2a>
+c01023dc:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
+c01023e0:	7f 07                	jg     c01023e9 <trapname+0x2a>
+        return "Hardware Interrupt";
+c01023e2:	b8 7f bd 10 c0       	mov    $0xc010bd7f,%eax
+c01023e7:	eb 05                	jmp    c01023ee <trapname+0x2f>
+    }
+    return "(unknown trap)";
+c01023e9:	b8 92 bd 10 c0       	mov    $0xc010bd92,%eax
+}
+c01023ee:	5d                   	pop    %ebp
+c01023ef:	c3                   	ret    
+
+c01023f0 <trap_in_kernel>:
+
+/* trap_in_kernel - test if trap happened in kernel */
+bool
+trap_in_kernel(struct trapframe *tf) {
+c01023f0:	55                   	push   %ebp
+c01023f1:	89 e5                	mov    %esp,%ebp
+    return (tf->tf_cs == (uint16_t)KERNEL_CS);
+c01023f3:	8b 45 08             	mov    0x8(%ebp),%eax
+c01023f6:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
+c01023fa:	66 83 f8 08          	cmp    $0x8,%ax
+c01023fe:	0f 94 c0             	sete   %al
+c0102401:	0f b6 c0             	movzbl %al,%eax
+}
+c0102404:	5d                   	pop    %ebp
+c0102405:	c3                   	ret    
+
+c0102406 <print_trapframe>:
+    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
+    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
+};
+
+void
+print_trapframe(struct trapframe *tf) {
+c0102406:	55                   	push   %ebp
+c0102407:	89 e5                	mov    %esp,%ebp
+c0102409:	83 ec 18             	sub    $0x18,%esp
+    cprintf("trapframe at %p\n", tf);
+c010240c:	83 ec 08             	sub    $0x8,%esp
+c010240f:	ff 75 08             	pushl  0x8(%ebp)
+c0102412:	68 d3 bd 10 c0       	push   $0xc010bdd3
+c0102417:	e8 72 de ff ff       	call   c010028e <cprintf>
+c010241c:	83 c4 10             	add    $0x10,%esp
+    print_regs(&tf->tf_regs);
+c010241f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102422:	83 ec 0c             	sub    $0xc,%esp
+c0102425:	50                   	push   %eax
+c0102426:	e8 b8 01 00 00       	call   c01025e3 <print_regs>
+c010242b:	83 c4 10             	add    $0x10,%esp
+    cprintf("  ds   0x----%04x\n", tf->tf_ds);
+c010242e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102431:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
+c0102435:	0f b7 c0             	movzwl %ax,%eax
+c0102438:	83 ec 08             	sub    $0x8,%esp
+c010243b:	50                   	push   %eax
+c010243c:	68 e4 bd 10 c0       	push   $0xc010bde4
+c0102441:	e8 48 de ff ff       	call   c010028e <cprintf>
+c0102446:	83 c4 10             	add    $0x10,%esp
+    cprintf("  es   0x----%04x\n", tf->tf_es);
+c0102449:	8b 45 08             	mov    0x8(%ebp),%eax
+c010244c:	0f b7 40 28          	movzwl 0x28(%eax),%eax
+c0102450:	0f b7 c0             	movzwl %ax,%eax
+c0102453:	83 ec 08             	sub    $0x8,%esp
+c0102456:	50                   	push   %eax
+c0102457:	68 f7 bd 10 c0       	push   $0xc010bdf7
+c010245c:	e8 2d de ff ff       	call   c010028e <cprintf>
+c0102461:	83 c4 10             	add    $0x10,%esp
+    cprintf("  fs   0x----%04x\n", tf->tf_fs);
+c0102464:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102467:	0f b7 40 24          	movzwl 0x24(%eax),%eax
+c010246b:	0f b7 c0             	movzwl %ax,%eax
+c010246e:	83 ec 08             	sub    $0x8,%esp
+c0102471:	50                   	push   %eax
+c0102472:	68 0a be 10 c0       	push   $0xc010be0a
+c0102477:	e8 12 de ff ff       	call   c010028e <cprintf>
+c010247c:	83 c4 10             	add    $0x10,%esp
+    cprintf("  gs   0x----%04x\n", tf->tf_gs);
+c010247f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102482:	0f b7 40 20          	movzwl 0x20(%eax),%eax
+c0102486:	0f b7 c0             	movzwl %ax,%eax
+c0102489:	83 ec 08             	sub    $0x8,%esp
+c010248c:	50                   	push   %eax
+c010248d:	68 1d be 10 c0       	push   $0xc010be1d
+c0102492:	e8 f7 dd ff ff       	call   c010028e <cprintf>
+c0102497:	83 c4 10             	add    $0x10,%esp
+    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
+c010249a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010249d:	8b 40 30             	mov    0x30(%eax),%eax
+c01024a0:	83 ec 0c             	sub    $0xc,%esp
+c01024a3:	50                   	push   %eax
+c01024a4:	e8 16 ff ff ff       	call   c01023bf <trapname>
+c01024a9:	83 c4 10             	add    $0x10,%esp
+c01024ac:	89 c2                	mov    %eax,%edx
+c01024ae:	8b 45 08             	mov    0x8(%ebp),%eax
+c01024b1:	8b 40 30             	mov    0x30(%eax),%eax
+c01024b4:	83 ec 04             	sub    $0x4,%esp
+c01024b7:	52                   	push   %edx
+c01024b8:	50                   	push   %eax
+c01024b9:	68 30 be 10 c0       	push   $0xc010be30
+c01024be:	e8 cb dd ff ff       	call   c010028e <cprintf>
+c01024c3:	83 c4 10             	add    $0x10,%esp
+    cprintf("  err  0x%08x\n", tf->tf_err);
+c01024c6:	8b 45 08             	mov    0x8(%ebp),%eax
+c01024c9:	8b 40 34             	mov    0x34(%eax),%eax
+c01024cc:	83 ec 08             	sub    $0x8,%esp
+c01024cf:	50                   	push   %eax
+c01024d0:	68 42 be 10 c0       	push   $0xc010be42
+c01024d5:	e8 b4 dd ff ff       	call   c010028e <cprintf>
+c01024da:	83 c4 10             	add    $0x10,%esp
+    cprintf("  eip  0x%08x\n", tf->tf_eip);
+c01024dd:	8b 45 08             	mov    0x8(%ebp),%eax
+c01024e0:	8b 40 38             	mov    0x38(%eax),%eax
+c01024e3:	83 ec 08             	sub    $0x8,%esp
+c01024e6:	50                   	push   %eax
+c01024e7:	68 51 be 10 c0       	push   $0xc010be51
+c01024ec:	e8 9d dd ff ff       	call   c010028e <cprintf>
+c01024f1:	83 c4 10             	add    $0x10,%esp
+    cprintf("  cs   0x----%04x\n", tf->tf_cs);
+c01024f4:	8b 45 08             	mov    0x8(%ebp),%eax
+c01024f7:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
+c01024fb:	0f b7 c0             	movzwl %ax,%eax
+c01024fe:	83 ec 08             	sub    $0x8,%esp
+c0102501:	50                   	push   %eax
+c0102502:	68 60 be 10 c0       	push   $0xc010be60
+c0102507:	e8 82 dd ff ff       	call   c010028e <cprintf>
+c010250c:	83 c4 10             	add    $0x10,%esp
+    cprintf("  flag 0x%08x ", tf->tf_eflags);
+c010250f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102512:	8b 40 40             	mov    0x40(%eax),%eax
+c0102515:	83 ec 08             	sub    $0x8,%esp
+c0102518:	50                   	push   %eax
+c0102519:	68 73 be 10 c0       	push   $0xc010be73
+c010251e:	e8 6b dd ff ff       	call   c010028e <cprintf>
+c0102523:	83 c4 10             	add    $0x10,%esp
+
+    int i, j;
+    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
+c0102526:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c010252d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
+c0102534:	eb 3f                	jmp    c0102575 <print_trapframe+0x16f>
+        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
+c0102536:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102539:	8b 50 40             	mov    0x40(%eax),%edx
+c010253c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010253f:	21 d0                	and    %edx,%eax
+c0102541:	85 c0                	test   %eax,%eax
+c0102543:	74 29                	je     c010256e <print_trapframe+0x168>
+c0102545:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0102548:	8b 04 85 a0 c5 12 c0 	mov    -0x3fed3a60(,%eax,4),%eax
+c010254f:	85 c0                	test   %eax,%eax
+c0102551:	74 1b                	je     c010256e <print_trapframe+0x168>
+            cprintf("%s,", IA32flags[i]);
+c0102553:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0102556:	8b 04 85 a0 c5 12 c0 	mov    -0x3fed3a60(,%eax,4),%eax
+c010255d:	83 ec 08             	sub    $0x8,%esp
+c0102560:	50                   	push   %eax
+c0102561:	68 82 be 10 c0       	push   $0xc010be82
+c0102566:	e8 23 dd ff ff       	call   c010028e <cprintf>
+c010256b:	83 c4 10             	add    $0x10,%esp
+    cprintf("  eip  0x%08x\n", tf->tf_eip);
+    cprintf("  cs   0x----%04x\n", tf->tf_cs);
+    cprintf("  flag 0x%08x ", tf->tf_eflags);
+
+    int i, j;
+    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
+c010256e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0102572:	d1 65 f0             	shll   -0x10(%ebp)
+c0102575:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0102578:	83 f8 17             	cmp    $0x17,%eax
+c010257b:	76 b9                	jbe    c0102536 <print_trapframe+0x130>
+        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
+            cprintf("%s,", IA32flags[i]);
+        }
+    }
+    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
+c010257d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102580:	8b 40 40             	mov    0x40(%eax),%eax
+c0102583:	25 00 30 00 00       	and    $0x3000,%eax
+c0102588:	c1 e8 0c             	shr    $0xc,%eax
+c010258b:	83 ec 08             	sub    $0x8,%esp
+c010258e:	50                   	push   %eax
+c010258f:	68 86 be 10 c0       	push   $0xc010be86
+c0102594:	e8 f5 dc ff ff       	call   c010028e <cprintf>
+c0102599:	83 c4 10             	add    $0x10,%esp
+
+    if (!trap_in_kernel(tf)) {
+c010259c:	83 ec 0c             	sub    $0xc,%esp
+c010259f:	ff 75 08             	pushl  0x8(%ebp)
+c01025a2:	e8 49 fe ff ff       	call   c01023f0 <trap_in_kernel>
+c01025a7:	83 c4 10             	add    $0x10,%esp
+c01025aa:	85 c0                	test   %eax,%eax
+c01025ac:	75 32                	jne    c01025e0 <print_trapframe+0x1da>
+        cprintf("  esp  0x%08x\n", tf->tf_esp);
+c01025ae:	8b 45 08             	mov    0x8(%ebp),%eax
+c01025b1:	8b 40 44             	mov    0x44(%eax),%eax
+c01025b4:	83 ec 08             	sub    $0x8,%esp
+c01025b7:	50                   	push   %eax
+c01025b8:	68 8f be 10 c0       	push   $0xc010be8f
+c01025bd:	e8 cc dc ff ff       	call   c010028e <cprintf>
+c01025c2:	83 c4 10             	add    $0x10,%esp
+        cprintf("  ss   0x----%04x\n", tf->tf_ss);
+c01025c5:	8b 45 08             	mov    0x8(%ebp),%eax
+c01025c8:	0f b7 40 48          	movzwl 0x48(%eax),%eax
+c01025cc:	0f b7 c0             	movzwl %ax,%eax
+c01025cf:	83 ec 08             	sub    $0x8,%esp
+c01025d2:	50                   	push   %eax
+c01025d3:	68 9e be 10 c0       	push   $0xc010be9e
+c01025d8:	e8 b1 dc ff ff       	call   c010028e <cprintf>
+c01025dd:	83 c4 10             	add    $0x10,%esp
+    }
+}
+c01025e0:	90                   	nop
+c01025e1:	c9                   	leave  
+c01025e2:	c3                   	ret    
+
+c01025e3 <print_regs>:
+
+void
+print_regs(struct pushregs *regs) {
+c01025e3:	55                   	push   %ebp
+c01025e4:	89 e5                	mov    %esp,%ebp
+c01025e6:	83 ec 08             	sub    $0x8,%esp
+    cprintf("  edi  0x%08x\n", regs->reg_edi);
+c01025e9:	8b 45 08             	mov    0x8(%ebp),%eax
+c01025ec:	8b 00                	mov    (%eax),%eax
+c01025ee:	83 ec 08             	sub    $0x8,%esp
+c01025f1:	50                   	push   %eax
+c01025f2:	68 b1 be 10 c0       	push   $0xc010beb1
+c01025f7:	e8 92 dc ff ff       	call   c010028e <cprintf>
+c01025fc:	83 c4 10             	add    $0x10,%esp
+    cprintf("  esi  0x%08x\n", regs->reg_esi);
+c01025ff:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102602:	8b 40 04             	mov    0x4(%eax),%eax
+c0102605:	83 ec 08             	sub    $0x8,%esp
+c0102608:	50                   	push   %eax
+c0102609:	68 c0 be 10 c0       	push   $0xc010bec0
+c010260e:	e8 7b dc ff ff       	call   c010028e <cprintf>
+c0102613:	83 c4 10             	add    $0x10,%esp
+    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
+c0102616:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102619:	8b 40 08             	mov    0x8(%eax),%eax
+c010261c:	83 ec 08             	sub    $0x8,%esp
+c010261f:	50                   	push   %eax
+c0102620:	68 cf be 10 c0       	push   $0xc010becf
+c0102625:	e8 64 dc ff ff       	call   c010028e <cprintf>
+c010262a:	83 c4 10             	add    $0x10,%esp
+    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
+c010262d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102630:	8b 40 0c             	mov    0xc(%eax),%eax
+c0102633:	83 ec 08             	sub    $0x8,%esp
+c0102636:	50                   	push   %eax
+c0102637:	68 de be 10 c0       	push   $0xc010bede
+c010263c:	e8 4d dc ff ff       	call   c010028e <cprintf>
+c0102641:	83 c4 10             	add    $0x10,%esp
+    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
+c0102644:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102647:	8b 40 10             	mov    0x10(%eax),%eax
+c010264a:	83 ec 08             	sub    $0x8,%esp
+c010264d:	50                   	push   %eax
+c010264e:	68 ed be 10 c0       	push   $0xc010beed
+c0102653:	e8 36 dc ff ff       	call   c010028e <cprintf>
+c0102658:	83 c4 10             	add    $0x10,%esp
+    cprintf("  edx  0x%08x\n", regs->reg_edx);
+c010265b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010265e:	8b 40 14             	mov    0x14(%eax),%eax
+c0102661:	83 ec 08             	sub    $0x8,%esp
+c0102664:	50                   	push   %eax
+c0102665:	68 fc be 10 c0       	push   $0xc010befc
+c010266a:	e8 1f dc ff ff       	call   c010028e <cprintf>
+c010266f:	83 c4 10             	add    $0x10,%esp
+    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
+c0102672:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102675:	8b 40 18             	mov    0x18(%eax),%eax
+c0102678:	83 ec 08             	sub    $0x8,%esp
+c010267b:	50                   	push   %eax
+c010267c:	68 0b bf 10 c0       	push   $0xc010bf0b
+c0102681:	e8 08 dc ff ff       	call   c010028e <cprintf>
+c0102686:	83 c4 10             	add    $0x10,%esp
+    cprintf("  eax  0x%08x\n", regs->reg_eax);
+c0102689:	8b 45 08             	mov    0x8(%ebp),%eax
+c010268c:	8b 40 1c             	mov    0x1c(%eax),%eax
+c010268f:	83 ec 08             	sub    $0x8,%esp
+c0102692:	50                   	push   %eax
+c0102693:	68 1a bf 10 c0       	push   $0xc010bf1a
+c0102698:	e8 f1 db ff ff       	call   c010028e <cprintf>
+c010269d:	83 c4 10             	add    $0x10,%esp
+}
+c01026a0:	90                   	nop
+c01026a1:	c9                   	leave  
+c01026a2:	c3                   	ret    
+
+c01026a3 <print_pgfault>:
+
+static inline void
+print_pgfault(struct trapframe *tf) {
+c01026a3:	55                   	push   %ebp
+c01026a4:	89 e5                	mov    %esp,%ebp
+c01026a6:	53                   	push   %ebx
+c01026a7:	83 ec 14             	sub    $0x14,%esp
+     * bit 2 == 0 means kernel, 1 means user
+     * */
+    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
+            (tf->tf_err & 4) ? 'U' : 'K',
+            (tf->tf_err & 2) ? 'W' : 'R',
+            (tf->tf_err & 1) ? "protection fault" : "no page found");
+c01026aa:	8b 45 08             	mov    0x8(%ebp),%eax
+c01026ad:	8b 40 34             	mov    0x34(%eax),%eax
+c01026b0:	83 e0 01             	and    $0x1,%eax
+    /* error_code:
+     * bit 0 == 0 means no page found, 1 means protection fault
+     * bit 1 == 0 means read, 1 means write
+     * bit 2 == 0 means kernel, 1 means user
+     * */
+    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
+c01026b3:	85 c0                	test   %eax,%eax
+c01026b5:	74 07                	je     c01026be <print_pgfault+0x1b>
+c01026b7:	bb 29 bf 10 c0       	mov    $0xc010bf29,%ebx
+c01026bc:	eb 05                	jmp    c01026c3 <print_pgfault+0x20>
+c01026be:	bb 3a bf 10 c0       	mov    $0xc010bf3a,%ebx
+            (tf->tf_err & 4) ? 'U' : 'K',
+            (tf->tf_err & 2) ? 'W' : 'R',
+c01026c3:	8b 45 08             	mov    0x8(%ebp),%eax
+c01026c6:	8b 40 34             	mov    0x34(%eax),%eax
+c01026c9:	83 e0 02             	and    $0x2,%eax
+    /* error_code:
+     * bit 0 == 0 means no page found, 1 means protection fault
+     * bit 1 == 0 means read, 1 means write
+     * bit 2 == 0 means kernel, 1 means user
+     * */
+    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
+c01026cc:	85 c0                	test   %eax,%eax
+c01026ce:	74 07                	je     c01026d7 <print_pgfault+0x34>
+c01026d0:	b9 57 00 00 00       	mov    $0x57,%ecx
+c01026d5:	eb 05                	jmp    c01026dc <print_pgfault+0x39>
+c01026d7:	b9 52 00 00 00       	mov    $0x52,%ecx
+            (tf->tf_err & 4) ? 'U' : 'K',
+c01026dc:	8b 45 08             	mov    0x8(%ebp),%eax
+c01026df:	8b 40 34             	mov    0x34(%eax),%eax
+c01026e2:	83 e0 04             	and    $0x4,%eax
+    /* error_code:
+     * bit 0 == 0 means no page found, 1 means protection fault
+     * bit 1 == 0 means read, 1 means write
+     * bit 2 == 0 means kernel, 1 means user
+     * */
+    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
+c01026e5:	85 c0                	test   %eax,%eax
+c01026e7:	74 07                	je     c01026f0 <print_pgfault+0x4d>
+c01026e9:	ba 55 00 00 00       	mov    $0x55,%edx
+c01026ee:	eb 05                	jmp    c01026f5 <print_pgfault+0x52>
+c01026f0:	ba 4b 00 00 00       	mov    $0x4b,%edx
+}
+
+static inline uintptr_t
+rcr2(void) {
+    uintptr_t cr2;
+    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
+c01026f5:	0f 20 d0             	mov    %cr2,%eax
+c01026f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return cr2;
+c01026fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01026fe:	83 ec 0c             	sub    $0xc,%esp
+c0102701:	53                   	push   %ebx
+c0102702:	51                   	push   %ecx
+c0102703:	52                   	push   %edx
+c0102704:	50                   	push   %eax
+c0102705:	68 48 bf 10 c0       	push   $0xc010bf48
+c010270a:	e8 7f db ff ff       	call   c010028e <cprintf>
+c010270f:	83 c4 20             	add    $0x20,%esp
+            (tf->tf_err & 4) ? 'U' : 'K',
+            (tf->tf_err & 2) ? 'W' : 'R',
+            (tf->tf_err & 1) ? "protection fault" : "no page found");
+}
+c0102712:	90                   	nop
+c0102713:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+c0102716:	c9                   	leave  
+c0102717:	c3                   	ret    
+
+c0102718 <pgfault_handler>:
+
+static int
+pgfault_handler(struct trapframe *tf) {
+c0102718:	55                   	push   %ebp
+c0102719:	89 e5                	mov    %esp,%ebp
+c010271b:	83 ec 18             	sub    $0x18,%esp
+    extern struct mm_struct *check_mm_struct;
+    if(check_mm_struct !=NULL) { //used for test check_swap
+c010271e:	a1 70 0d 1b c0       	mov    0xc01b0d70,%eax
+c0102723:	85 c0                	test   %eax,%eax
+c0102725:	74 0e                	je     c0102735 <pgfault_handler+0x1d>
+            print_pgfault(tf);
+c0102727:	83 ec 0c             	sub    $0xc,%esp
+c010272a:	ff 75 08             	pushl  0x8(%ebp)
+c010272d:	e8 71 ff ff ff       	call   c01026a3 <print_pgfault>
+c0102732:	83 c4 10             	add    $0x10,%esp
+        }
+    struct mm_struct *mm;
+    if (check_mm_struct != NULL) {
+c0102735:	a1 70 0d 1b c0       	mov    0xc01b0d70,%eax
+c010273a:	85 c0                	test   %eax,%eax
+c010273c:	74 32                	je     c0102770 <pgfault_handler+0x58>
+        assert(current == idleproc);
+c010273e:	8b 15 08 ed 1a c0    	mov    0xc01aed08,%edx
+c0102744:	a1 00 ed 1a c0       	mov    0xc01aed00,%eax
+c0102749:	39 c2                	cmp    %eax,%edx
+c010274b:	74 19                	je     c0102766 <pgfault_handler+0x4e>
+c010274d:	68 6b bf 10 c0       	push   $0xc010bf6b
+c0102752:	68 7f bf 10 c0       	push   $0xc010bf7f
+c0102757:	68 b0 00 00 00       	push   $0xb0
+c010275c:	68 6e bd 10 c0       	push   $0xc010bd6e
+c0102761:	e8 8e dc ff ff       	call   c01003f4 <__panic>
+        mm = check_mm_struct;
+c0102766:	a1 70 0d 1b c0       	mov    0xc01b0d70,%eax
+c010276b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010276e:	eb 47                	jmp    c01027b7 <pgfault_handler+0x9f>
+    }
+    else {
+        if (current == NULL) {
+c0102770:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c0102775:	85 c0                	test   %eax,%eax
+c0102777:	75 33                	jne    c01027ac <pgfault_handler+0x94>
+            print_trapframe(tf);
+c0102779:	83 ec 0c             	sub    $0xc,%esp
+c010277c:	ff 75 08             	pushl  0x8(%ebp)
+c010277f:	e8 82 fc ff ff       	call   c0102406 <print_trapframe>
+c0102784:	83 c4 10             	add    $0x10,%esp
+            print_pgfault(tf);
+c0102787:	83 ec 0c             	sub    $0xc,%esp
+c010278a:	ff 75 08             	pushl  0x8(%ebp)
+c010278d:	e8 11 ff ff ff       	call   c01026a3 <print_pgfault>
+c0102792:	83 c4 10             	add    $0x10,%esp
+            panic("unhandled page fault.\n");
+c0102795:	83 ec 04             	sub    $0x4,%esp
+c0102798:	68 94 bf 10 c0       	push   $0xc010bf94
+c010279d:	68 b7 00 00 00       	push   $0xb7
+c01027a2:	68 6e bd 10 c0       	push   $0xc010bd6e
+c01027a7:	e8 48 dc ff ff       	call   c01003f4 <__panic>
+        }
+        mm = current->mm;
+c01027ac:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c01027b1:	8b 40 18             	mov    0x18(%eax),%eax
+c01027b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+}
+
+static inline uintptr_t
+rcr2(void) {
+    uintptr_t cr2;
+    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
+c01027b7:	0f 20 d0             	mov    %cr2,%eax
+c01027ba:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    return cr2;
+c01027bd:	8b 55 f0             	mov    -0x10(%ebp),%edx
+    }
+    return do_pgfault(mm, tf->tf_err, rcr2());
+c01027c0:	8b 45 08             	mov    0x8(%ebp),%eax
+c01027c3:	8b 40 34             	mov    0x34(%eax),%eax
+c01027c6:	83 ec 04             	sub    $0x4,%esp
+c01027c9:	52                   	push   %edx
+c01027ca:	50                   	push   %eax
+c01027cb:	ff 75 f4             	pushl  -0xc(%ebp)
+c01027ce:	e8 ca 3b 00 00       	call   c010639d <do_pgfault>
+c01027d3:	83 c4 10             	add    $0x10,%esp
+}
+c01027d6:	c9                   	leave  
+c01027d7:	c3                   	ret    
+
+c01027d8 <trap_dispatch>:
+static volatile int in_swap_tick_event = 0;
+extern struct mm_struct *check_mm_struct;
+extern void sched_class_proc_tick(struct proc_struct *proc);
+
+static void
+trap_dispatch(struct trapframe *tf) {
+c01027d8:	55                   	push   %ebp
+c01027d9:	89 e5                	mov    %esp,%ebp
+c01027db:	83 ec 18             	sub    $0x18,%esp
+    char c;
+
+    int ret=0;
+c01027de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+
+    switch (tf->tf_trapno) {
+c01027e5:	8b 45 08             	mov    0x8(%ebp),%eax
+c01027e8:	8b 40 30             	mov    0x30(%eax),%eax
+c01027eb:	83 f8 2f             	cmp    $0x2f,%eax
+c01027ee:	77 38                	ja     c0102828 <trap_dispatch+0x50>
+c01027f0:	83 f8 2e             	cmp    $0x2e,%eax
+c01027f3:	0f 83 30 02 00 00    	jae    c0102a29 <trap_dispatch+0x251>
+c01027f9:	83 f8 20             	cmp    $0x20,%eax
+c01027fc:	0f 84 eb 00 00 00    	je     c01028ed <trap_dispatch+0x115>
+c0102802:	83 f8 20             	cmp    $0x20,%eax
+c0102805:	77 0a                	ja     c0102811 <trap_dispatch+0x39>
+c0102807:	83 f8 0e             	cmp    $0xe,%eax
+c010280a:	74 3e                	je     c010284a <trap_dispatch+0x72>
+c010280c:	e9 cd 01 00 00       	jmp    c01029de <trap_dispatch+0x206>
+c0102811:	83 f8 21             	cmp    $0x21,%eax
+c0102814:	0f 84 1d 01 00 00    	je     c0102937 <trap_dispatch+0x15f>
+c010281a:	83 f8 24             	cmp    $0x24,%eax
+c010281d:	0f 84 ed 00 00 00    	je     c0102910 <trap_dispatch+0x138>
+c0102823:	e9 b6 01 00 00       	jmp    c01029de <trap_dispatch+0x206>
+c0102828:	83 f8 79             	cmp    $0x79,%eax
+c010282b:	0f 84 71 01 00 00    	je     c01029a2 <trap_dispatch+0x1ca>
+c0102831:	3d 80 00 00 00       	cmp    $0x80,%eax
+c0102836:	0f 84 a7 00 00 00    	je     c01028e3 <trap_dispatch+0x10b>
+c010283c:	83 f8 78             	cmp    $0x78,%eax
+c010283f:	0f 84 19 01 00 00    	je     c010295e <trap_dispatch+0x186>
+c0102845:	e9 94 01 00 00       	jmp    c01029de <trap_dispatch+0x206>
+    case T_PGFLT:  //page fault
+        if ((ret = pgfault_handler(tf)) != 0) {
+c010284a:	83 ec 0c             	sub    $0xc,%esp
+c010284d:	ff 75 08             	pushl  0x8(%ebp)
+c0102850:	e8 c3 fe ff ff       	call   c0102718 <pgfault_handler>
+c0102855:	83 c4 10             	add    $0x10,%esp
+c0102858:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010285b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010285f:	0f 84 c7 01 00 00    	je     c0102a2c <trap_dispatch+0x254>
+            print_trapframe(tf);
+c0102865:	83 ec 0c             	sub    $0xc,%esp
+c0102868:	ff 75 08             	pushl  0x8(%ebp)
+c010286b:	e8 96 fb ff ff       	call   c0102406 <print_trapframe>
+c0102870:	83 c4 10             	add    $0x10,%esp
+            if (current == NULL) {
+c0102873:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c0102878:	85 c0                	test   %eax,%eax
+c010287a:	75 17                	jne    c0102893 <trap_dispatch+0xbb>
+                panic("handle pgfault failed. ret=%d\n", ret);
+c010287c:	ff 75 f4             	pushl  -0xc(%ebp)
+c010287f:	68 ac bf 10 c0       	push   $0xc010bfac
+c0102884:	68 cd 00 00 00       	push   $0xcd
+c0102889:	68 6e bd 10 c0       	push   $0xc010bd6e
+c010288e:	e8 61 db ff ff       	call   c01003f4 <__panic>
+            }
+            else {
+                if (trap_in_kernel(tf)) {
+c0102893:	83 ec 0c             	sub    $0xc,%esp
+c0102896:	ff 75 08             	pushl  0x8(%ebp)
+c0102899:	e8 52 fb ff ff       	call   c01023f0 <trap_in_kernel>
+c010289e:	83 c4 10             	add    $0x10,%esp
+c01028a1:	85 c0                	test   %eax,%eax
+c01028a3:	74 17                	je     c01028bc <trap_dispatch+0xe4>
+                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
+c01028a5:	ff 75 f4             	pushl  -0xc(%ebp)
+c01028a8:	68 cc bf 10 c0       	push   $0xc010bfcc
+c01028ad:	68 d1 00 00 00       	push   $0xd1
+c01028b2:	68 6e bd 10 c0       	push   $0xc010bd6e
+c01028b7:	e8 38 db ff ff       	call   c01003f4 <__panic>
+                }
+                cprintf("killed by kernel.\n");
+c01028bc:	83 ec 0c             	sub    $0xc,%esp
+c01028bf:	68 fa bf 10 c0       	push   $0xc010bffa
+c01028c4:	e8 c5 d9 ff ff       	call   c010028e <cprintf>
+c01028c9:	83 c4 10             	add    $0x10,%esp
+                panic("handle user mode pgfault failed. ret=%d\n", ret); 
+c01028cc:	ff 75 f4             	pushl  -0xc(%ebp)
+c01028cf:	68 10 c0 10 c0       	push   $0xc010c010
+c01028d4:	68 d4 00 00 00       	push   $0xd4
+c01028d9:	68 6e bd 10 c0       	push   $0xc010bd6e
+c01028de:	e8 11 db ff ff       	call   c01003f4 <__panic>
+                do_exit(-E_KILLED);
+            }
+        }
+        break;
+    case T_SYSCALL:
+        syscall();
+c01028e3:	e8 93 83 00 00       	call   c010ac7b <syscall>
+        break;
+c01028e8:	e9 40 01 00 00       	jmp    c0102a2d <trap_dispatch+0x255>
+        /* LAB6 2013011371 */
+        /* you should upate you lab5 code
+         * IMPORTANT FUNCTIONS:
+	     * sched_class_proc_tick
+	     */
+		ticks++;
+c01028ed:	a1 58 0d 1b c0       	mov    0xc01b0d58,%eax
+c01028f2:	83 c0 01             	add    $0x1,%eax
+c01028f5:	a3 58 0d 1b c0       	mov    %eax,0xc01b0d58
+    	sched_class_proc_tick(current);
+c01028fa:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c01028ff:	83 ec 0c             	sub    $0xc,%esp
+c0102902:	50                   	push   %eax
+c0102903:	e8 e9 7c 00 00       	call   c010a5f1 <sched_class_proc_tick>
+c0102908:	83 c4 10             	add    $0x10,%esp
+//    	if (ticks % TICK_NUM == 0){
+//    		assert(current != NULL);
+//    		sched_class_proc_tick(current);
+//    	}
+    	break;
+c010290b:	e9 1d 01 00 00       	jmp    c0102a2d <trap_dispatch+0x255>
+    case IRQ_OFFSET + IRQ_COM1:
+        c = cons_getc();
+c0102910:	e8 40 f6 ff ff       	call   c0101f55 <cons_getc>
+c0102915:	88 45 f3             	mov    %al,-0xd(%ebp)
+        cprintf("serial [%03d] %c\n", c, c);
+c0102918:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
+c010291c:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
+c0102920:	83 ec 04             	sub    $0x4,%esp
+c0102923:	52                   	push   %edx
+c0102924:	50                   	push   %eax
+c0102925:	68 39 c0 10 c0       	push   $0xc010c039
+c010292a:	e8 5f d9 ff ff       	call   c010028e <cprintf>
+c010292f:	83 c4 10             	add    $0x10,%esp
+        break;
+c0102932:	e9 f6 00 00 00       	jmp    c0102a2d <trap_dispatch+0x255>
+    case IRQ_OFFSET + IRQ_KBD:
+        c = cons_getc();
+c0102937:	e8 19 f6 ff ff       	call   c0101f55 <cons_getc>
+c010293c:	88 45 f3             	mov    %al,-0xd(%ebp)
+        cprintf("kbd [%03d] %c\n", c, c);
+c010293f:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
+c0102943:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
+c0102947:	83 ec 04             	sub    $0x4,%esp
+c010294a:	52                   	push   %edx
+c010294b:	50                   	push   %eax
+c010294c:	68 4b c0 10 c0       	push   $0xc010c04b
+c0102951:	e8 38 d9 ff ff       	call   c010028e <cprintf>
+c0102956:	83 c4 10             	add    $0x10,%esp
+        break;
+c0102959:	e9 cf 00 00 00       	jmp    c0102a2d <trap_dispatch+0x255>
+    //LAB1 CHALLENGE 1 : 2013011371 you should modify below codes.
+    case T_SWITCH_TOU:
+    	tf->tf_cs = USER_CS;
+c010295e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102961:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
+    	tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
+c0102967:	8b 45 08             	mov    0x8(%ebp),%eax
+c010296a:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
+c0102970:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102973:	0f b7 50 48          	movzwl 0x48(%eax),%edx
+c0102977:	8b 45 08             	mov    0x8(%ebp),%eax
+c010297a:	66 89 50 28          	mov    %dx,0x28(%eax)
+c010297e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102981:	0f b7 50 28          	movzwl 0x28(%eax),%edx
+c0102985:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102988:	66 89 50 2c          	mov    %dx,0x2c(%eax)
+    	tf->tf_eflags |= (3<<12);
+c010298c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010298f:	8b 40 40             	mov    0x40(%eax),%eax
+c0102992:	80 cc 30             	or     $0x30,%ah
+c0102995:	89 c2                	mov    %eax,%edx
+c0102997:	8b 45 08             	mov    0x8(%ebp),%eax
+c010299a:	89 50 40             	mov    %edx,0x40(%eax)
+    	break;
+c010299d:	e9 8b 00 00 00       	jmp    c0102a2d <trap_dispatch+0x255>
+    case T_SWITCH_TOK:
+    	tf->tf_cs = KERNEL_CS;
+c01029a2:	8b 45 08             	mov    0x8(%ebp),%eax
+c01029a5:	66 c7 40 3c 08 00    	movw   $0x8,0x3c(%eax)
+    	tf->tf_ds = tf->tf_es = KERNEL_DS;
+c01029ab:	8b 45 08             	mov    0x8(%ebp),%eax
+c01029ae:	66 c7 40 28 10 00    	movw   $0x10,0x28(%eax)
+c01029b4:	8b 45 08             	mov    0x8(%ebp),%eax
+c01029b7:	0f b7 50 28          	movzwl 0x28(%eax),%edx
+c01029bb:	8b 45 08             	mov    0x8(%ebp),%eax
+c01029be:	66 89 50 2c          	mov    %dx,0x2c(%eax)
+    	tf->tf_ss = KERNEL_DS;
+c01029c2:	8b 45 08             	mov    0x8(%ebp),%eax
+c01029c5:	66 c7 40 48 10 00    	movw   $0x10,0x48(%eax)
+    	tf->tf_eflags &= ~(3<<12);
+c01029cb:	8b 45 08             	mov    0x8(%ebp),%eax
+c01029ce:	8b 40 40             	mov    0x40(%eax),%eax
+c01029d1:	80 e4 cf             	and    $0xcf,%ah
+c01029d4:	89 c2                	mov    %eax,%edx
+c01029d6:	8b 45 08             	mov    0x8(%ebp),%eax
+c01029d9:	89 50 40             	mov    %edx,0x40(%eax)
+    	//panic("T_SWITCH_** ??\n");
+    	break;
+c01029dc:	eb 4f                	jmp    c0102a2d <trap_dispatch+0x255>
+    case IRQ_OFFSET + IRQ_IDE1:
+    case IRQ_OFFSET + IRQ_IDE2:
+        /* do nothing */
+        break;
+    default:
+        print_trapframe(tf);
+c01029de:	83 ec 0c             	sub    $0xc,%esp
+c01029e1:	ff 75 08             	pushl  0x8(%ebp)
+c01029e4:	e8 1d fa ff ff       	call   c0102406 <print_trapframe>
+c01029e9:	83 c4 10             	add    $0x10,%esp
+        if (current != NULL) {
+c01029ec:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c01029f1:	85 c0                	test   %eax,%eax
+c01029f3:	74 1d                	je     c0102a12 <trap_dispatch+0x23a>
+            cprintf("unhandled trap.\n");
+c01029f5:	83 ec 0c             	sub    $0xc,%esp
+c01029f8:	68 5a c0 10 c0       	push   $0xc010c05a
+c01029fd:	e8 8c d8 ff ff       	call   c010028e <cprintf>
+c0102a02:	83 c4 10             	add    $0x10,%esp
+            do_exit(-E_KILLED);
+c0102a05:	83 ec 0c             	sub    $0xc,%esp
+c0102a08:	6a f7                	push   $0xfffffff7
+c0102a0a:	e8 97 6c 00 00       	call   c01096a6 <do_exit>
+c0102a0f:	83 c4 10             	add    $0x10,%esp
+        }
+        // in kernel, it must be a mistake
+        panic("unexpected trap in kernel.\n");
+c0102a12:	83 ec 04             	sub    $0x4,%esp
+c0102a15:	68 6b c0 10 c0       	push   $0xc010c06b
+c0102a1a:	68 17 01 00 00       	push   $0x117
+c0102a1f:	68 6e bd 10 c0       	push   $0xc010bd6e
+c0102a24:	e8 cb d9 ff ff       	call   c01003f4 <__panic>
+    	//panic("T_SWITCH_** ??\n");
+    	break;
+    case IRQ_OFFSET + IRQ_IDE1:
+    case IRQ_OFFSET + IRQ_IDE2:
+        /* do nothing */
+        break;
+c0102a29:	90                   	nop
+c0102a2a:	eb 01                	jmp    c0102a2d <trap_dispatch+0x255>
+                cprintf("killed by kernel.\n");
+                panic("handle user mode pgfault failed. ret=%d\n", ret); 
+                do_exit(-E_KILLED);
+            }
+        }
+        break;
+c0102a2c:	90                   	nop
+        }
+        // in kernel, it must be a mistake
+        panic("unexpected trap in kernel.\n");
+
+    }
+}
+c0102a2d:	90                   	nop
+c0102a2e:	c9                   	leave  
+c0102a2f:	c3                   	ret    
+
+c0102a30 <trap>:
+ * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
+ * the code in kern/trap/trapentry.S restores the old CPU state saved in the
+ * trapframe and then uses the iret instruction to return from the exception.
+ * */
+void
+trap(struct trapframe *tf) {
+c0102a30:	55                   	push   %ebp
+c0102a31:	89 e5                	mov    %esp,%ebp
+c0102a33:	83 ec 18             	sub    $0x18,%esp
+    // dispatch based on what type of trap occurred
+    // used for previous projects
+    if (current == NULL) {
+c0102a36:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c0102a3b:	85 c0                	test   %eax,%eax
+c0102a3d:	75 10                	jne    c0102a4f <trap+0x1f>
+        trap_dispatch(tf);
+c0102a3f:	83 ec 0c             	sub    $0xc,%esp
+c0102a42:	ff 75 08             	pushl  0x8(%ebp)
+c0102a45:	e8 8e fd ff ff       	call   c01027d8 <trap_dispatch>
+c0102a4a:	83 c4 10             	add    $0x10,%esp
+            if (current->need_resched) {
+                schedule();
+            }
+        }
+    }
+}
+c0102a4d:	eb 73                	jmp    c0102ac2 <trap+0x92>
+    if (current == NULL) {
+        trap_dispatch(tf);
+    }
+    else {
+        // keep a trapframe chain in stack
+        struct trapframe *otf = current->tf;
+c0102a4f:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c0102a54:	8b 40 3c             	mov    0x3c(%eax),%eax
+c0102a57:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        current->tf = tf;
+c0102a5a:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c0102a5f:	8b 55 08             	mov    0x8(%ebp),%edx
+c0102a62:	89 50 3c             	mov    %edx,0x3c(%eax)
+    
+        bool in_kernel = trap_in_kernel(tf);
+c0102a65:	83 ec 0c             	sub    $0xc,%esp
+c0102a68:	ff 75 08             	pushl  0x8(%ebp)
+c0102a6b:	e8 80 f9 ff ff       	call   c01023f0 <trap_in_kernel>
+c0102a70:	83 c4 10             	add    $0x10,%esp
+c0102a73:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    
+        trap_dispatch(tf);
+c0102a76:	83 ec 0c             	sub    $0xc,%esp
+c0102a79:	ff 75 08             	pushl  0x8(%ebp)
+c0102a7c:	e8 57 fd ff ff       	call   c01027d8 <trap_dispatch>
+c0102a81:	83 c4 10             	add    $0x10,%esp
+    
+        current->tf = otf;
+c0102a84:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c0102a89:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0102a8c:	89 50 3c             	mov    %edx,0x3c(%eax)
+        if (!in_kernel) {
+c0102a8f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0102a93:	75 2d                	jne    c0102ac2 <trap+0x92>
+            if (current->flags & PF_EXITING) {
+c0102a95:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c0102a9a:	8b 40 44             	mov    0x44(%eax),%eax
+c0102a9d:	83 e0 01             	and    $0x1,%eax
+c0102aa0:	85 c0                	test   %eax,%eax
+c0102aa2:	74 0d                	je     c0102ab1 <trap+0x81>
+                do_exit(-E_KILLED);
+c0102aa4:	83 ec 0c             	sub    $0xc,%esp
+c0102aa7:	6a f7                	push   $0xfffffff7
+c0102aa9:	e8 f8 6b 00 00       	call   c01096a6 <do_exit>
+c0102aae:	83 c4 10             	add    $0x10,%esp
+            }
+            if (current->need_resched) {
+c0102ab1:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c0102ab6:	8b 40 10             	mov    0x10(%eax),%eax
+c0102ab9:	85 c0                	test   %eax,%eax
+c0102abb:	74 05                	je     c0102ac2 <trap+0x92>
+                schedule();
+c0102abd:	e8 68 7c 00 00       	call   c010a72a <schedule>
+            }
+        }
+    }
+}
+c0102ac2:	90                   	nop
+c0102ac3:	c9                   	leave  
+c0102ac4:	c3                   	ret    
+
+c0102ac5 <vector0>:
+# handler
+.text
+.globl __alltraps
+.globl vector0
+vector0:
+  pushl $0
+c0102ac5:	6a 00                	push   $0x0
+  pushl $0
+c0102ac7:	6a 00                	push   $0x0
+  jmp __alltraps
+c0102ac9:	e9 67 0a 00 00       	jmp    c0103535 <__alltraps>
+
+c0102ace <vector1>:
+.globl vector1
+vector1:
+  pushl $0
+c0102ace:	6a 00                	push   $0x0
+  pushl $1
+c0102ad0:	6a 01                	push   $0x1
+  jmp __alltraps
+c0102ad2:	e9 5e 0a 00 00       	jmp    c0103535 <__alltraps>
+
+c0102ad7 <vector2>:
+.globl vector2
+vector2:
+  pushl $0
+c0102ad7:	6a 00                	push   $0x0
+  pushl $2
+c0102ad9:	6a 02                	push   $0x2
+  jmp __alltraps
+c0102adb:	e9 55 0a 00 00       	jmp    c0103535 <__alltraps>
+
+c0102ae0 <vector3>:
+.globl vector3
+vector3:
+  pushl $0
+c0102ae0:	6a 00                	push   $0x0
+  pushl $3
+c0102ae2:	6a 03                	push   $0x3
+  jmp __alltraps
+c0102ae4:	e9 4c 0a 00 00       	jmp    c0103535 <__alltraps>
+
+c0102ae9 <vector4>:
+.globl vector4
+vector4:
+  pushl $0
+c0102ae9:	6a 00                	push   $0x0
+  pushl $4
+c0102aeb:	6a 04                	push   $0x4
+  jmp __alltraps
+c0102aed:	e9 43 0a 00 00       	jmp    c0103535 <__alltraps>
+
+c0102af2 <vector5>:
+.globl vector5
+vector5:
+  pushl $0
+c0102af2:	6a 00                	push   $0x0
+  pushl $5
+c0102af4:	6a 05                	push   $0x5
+  jmp __alltraps
+c0102af6:	e9 3a 0a 00 00       	jmp    c0103535 <__alltraps>
+
+c0102afb <vector6>:
+.globl vector6
+vector6:
+  pushl $0
+c0102afb:	6a 00                	push   $0x0
+  pushl $6
+c0102afd:	6a 06                	push   $0x6
+  jmp __alltraps
+c0102aff:	e9 31 0a 00 00       	jmp    c0103535 <__alltraps>
+
+c0102b04 <vector7>:
+.globl vector7
+vector7:
+  pushl $0
+c0102b04:	6a 00                	push   $0x0
+  pushl $7
+c0102b06:	6a 07                	push   $0x7
+  jmp __alltraps
+c0102b08:	e9 28 0a 00 00       	jmp    c0103535 <__alltraps>
+
+c0102b0d <vector8>:
+.globl vector8
+vector8:
+  pushl $8
+c0102b0d:	6a 08                	push   $0x8
+  jmp __alltraps
+c0102b0f:	e9 21 0a 00 00       	jmp    c0103535 <__alltraps>
+
+c0102b14 <vector9>:
+.globl vector9
+vector9:
+  pushl $9
+c0102b14:	6a 09                	push   $0x9
+  jmp __alltraps
+c0102b16:	e9 1a 0a 00 00       	jmp    c0103535 <__alltraps>
+
+c0102b1b <vector10>:
+.globl vector10
+vector10:
+  pushl $10
+c0102b1b:	6a 0a                	push   $0xa
+  jmp __alltraps
+c0102b1d:	e9 13 0a 00 00       	jmp    c0103535 <__alltraps>
+
+c0102b22 <vector11>:
+.globl vector11
+vector11:
+  pushl $11
+c0102b22:	6a 0b                	push   $0xb
+  jmp __alltraps
+c0102b24:	e9 0c 0a 00 00       	jmp    c0103535 <__alltraps>
+
+c0102b29 <vector12>:
+.globl vector12
+vector12:
+  pushl $12
+c0102b29:	6a 0c                	push   $0xc
+  jmp __alltraps
+c0102b2b:	e9 05 0a 00 00       	jmp    c0103535 <__alltraps>
+
+c0102b30 <vector13>:
+.globl vector13
+vector13:
+  pushl $13
+c0102b30:	6a 0d                	push   $0xd
+  jmp __alltraps
+c0102b32:	e9 fe 09 00 00       	jmp    c0103535 <__alltraps>
+
+c0102b37 <vector14>:
+.globl vector14
+vector14:
+  pushl $14
+c0102b37:	6a 0e                	push   $0xe
+  jmp __alltraps
+c0102b39:	e9 f7 09 00 00       	jmp    c0103535 <__alltraps>
+
+c0102b3e <vector15>:
+.globl vector15
+vector15:
+  pushl $0
+c0102b3e:	6a 00                	push   $0x0
+  pushl $15
+c0102b40:	6a 0f                	push   $0xf
+  jmp __alltraps
+c0102b42:	e9 ee 09 00 00       	jmp    c0103535 <__alltraps>
+
+c0102b47 <vector16>:
+.globl vector16
+vector16:
+  pushl $0
+c0102b47:	6a 00                	push   $0x0
+  pushl $16
+c0102b49:	6a 10                	push   $0x10
+  jmp __alltraps
+c0102b4b:	e9 e5 09 00 00       	jmp    c0103535 <__alltraps>
+
+c0102b50 <vector17>:
+.globl vector17
+vector17:
+  pushl $17
+c0102b50:	6a 11                	push   $0x11
+  jmp __alltraps
+c0102b52:	e9 de 09 00 00       	jmp    c0103535 <__alltraps>
+
+c0102b57 <vector18>:
+.globl vector18
+vector18:
+  pushl $0
+c0102b57:	6a 00                	push   $0x0
+  pushl $18
+c0102b59:	6a 12                	push   $0x12
+  jmp __alltraps
+c0102b5b:	e9 d5 09 00 00       	jmp    c0103535 <__alltraps>
+
+c0102b60 <vector19>:
+.globl vector19
+vector19:
+  pushl $0
+c0102b60:	6a 00                	push   $0x0
+  pushl $19
+c0102b62:	6a 13                	push   $0x13
+  jmp __alltraps
+c0102b64:	e9 cc 09 00 00       	jmp    c0103535 <__alltraps>
+
+c0102b69 <vector20>:
+.globl vector20
+vector20:
+  pushl $0
+c0102b69:	6a 00                	push   $0x0
+  pushl $20
+c0102b6b:	6a 14                	push   $0x14
+  jmp __alltraps
+c0102b6d:	e9 c3 09 00 00       	jmp    c0103535 <__alltraps>
+
+c0102b72 <vector21>:
+.globl vector21
+vector21:
+  pushl $0
+c0102b72:	6a 00                	push   $0x0
+  pushl $21
+c0102b74:	6a 15                	push   $0x15
+  jmp __alltraps
+c0102b76:	e9 ba 09 00 00       	jmp    c0103535 <__alltraps>
+
+c0102b7b <vector22>:
+.globl vector22
+vector22:
+  pushl $0
+c0102b7b:	6a 00                	push   $0x0
+  pushl $22
+c0102b7d:	6a 16                	push   $0x16
+  jmp __alltraps
+c0102b7f:	e9 b1 09 00 00       	jmp    c0103535 <__alltraps>
+
+c0102b84 <vector23>:
+.globl vector23
+vector23:
+  pushl $0
+c0102b84:	6a 00                	push   $0x0
+  pushl $23
+c0102b86:	6a 17                	push   $0x17
+  jmp __alltraps
+c0102b88:	e9 a8 09 00 00       	jmp    c0103535 <__alltraps>
+
+c0102b8d <vector24>:
+.globl vector24
+vector24:
+  pushl $0
+c0102b8d:	6a 00                	push   $0x0
+  pushl $24
+c0102b8f:	6a 18                	push   $0x18
+  jmp __alltraps
+c0102b91:	e9 9f 09 00 00       	jmp    c0103535 <__alltraps>
+
+c0102b96 <vector25>:
+.globl vector25
+vector25:
+  pushl $0
+c0102b96:	6a 00                	push   $0x0
+  pushl $25
+c0102b98:	6a 19                	push   $0x19
+  jmp __alltraps
+c0102b9a:	e9 96 09 00 00       	jmp    c0103535 <__alltraps>
+
+c0102b9f <vector26>:
+.globl vector26
+vector26:
+  pushl $0
+c0102b9f:	6a 00                	push   $0x0
+  pushl $26
+c0102ba1:	6a 1a                	push   $0x1a
+  jmp __alltraps
+c0102ba3:	e9 8d 09 00 00       	jmp    c0103535 <__alltraps>
+
+c0102ba8 <vector27>:
+.globl vector27
+vector27:
+  pushl $0
+c0102ba8:	6a 00                	push   $0x0
+  pushl $27
+c0102baa:	6a 1b                	push   $0x1b
+  jmp __alltraps
+c0102bac:	e9 84 09 00 00       	jmp    c0103535 <__alltraps>
+
+c0102bb1 <vector28>:
+.globl vector28
+vector28:
+  pushl $0
+c0102bb1:	6a 00                	push   $0x0
+  pushl $28
+c0102bb3:	6a 1c                	push   $0x1c
+  jmp __alltraps
+c0102bb5:	e9 7b 09 00 00       	jmp    c0103535 <__alltraps>
+
+c0102bba <vector29>:
+.globl vector29
+vector29:
+  pushl $0
+c0102bba:	6a 00                	push   $0x0
+  pushl $29
+c0102bbc:	6a 1d                	push   $0x1d
+  jmp __alltraps
+c0102bbe:	e9 72 09 00 00       	jmp    c0103535 <__alltraps>
+
+c0102bc3 <vector30>:
+.globl vector30
+vector30:
+  pushl $0
+c0102bc3:	6a 00                	push   $0x0
+  pushl $30
+c0102bc5:	6a 1e                	push   $0x1e
+  jmp __alltraps
+c0102bc7:	e9 69 09 00 00       	jmp    c0103535 <__alltraps>
+
+c0102bcc <vector31>:
+.globl vector31
+vector31:
+  pushl $0
+c0102bcc:	6a 00                	push   $0x0
+  pushl $31
+c0102bce:	6a 1f                	push   $0x1f
+  jmp __alltraps
+c0102bd0:	e9 60 09 00 00       	jmp    c0103535 <__alltraps>
+
+c0102bd5 <vector32>:
+.globl vector32
+vector32:
+  pushl $0
+c0102bd5:	6a 00                	push   $0x0
+  pushl $32
+c0102bd7:	6a 20                	push   $0x20
+  jmp __alltraps
+c0102bd9:	e9 57 09 00 00       	jmp    c0103535 <__alltraps>
+
+c0102bde <vector33>:
+.globl vector33
+vector33:
+  pushl $0
+c0102bde:	6a 00                	push   $0x0
+  pushl $33
+c0102be0:	6a 21                	push   $0x21
+  jmp __alltraps
+c0102be2:	e9 4e 09 00 00       	jmp    c0103535 <__alltraps>
+
+c0102be7 <vector34>:
+.globl vector34
+vector34:
+  pushl $0
+c0102be7:	6a 00                	push   $0x0
+  pushl $34
+c0102be9:	6a 22                	push   $0x22
+  jmp __alltraps
+c0102beb:	e9 45 09 00 00       	jmp    c0103535 <__alltraps>
+
+c0102bf0 <vector35>:
+.globl vector35
+vector35:
+  pushl $0
+c0102bf0:	6a 00                	push   $0x0
+  pushl $35
+c0102bf2:	6a 23                	push   $0x23
+  jmp __alltraps
+c0102bf4:	e9 3c 09 00 00       	jmp    c0103535 <__alltraps>
+
+c0102bf9 <vector36>:
+.globl vector36
+vector36:
+  pushl $0
+c0102bf9:	6a 00                	push   $0x0
+  pushl $36
+c0102bfb:	6a 24                	push   $0x24
+  jmp __alltraps
+c0102bfd:	e9 33 09 00 00       	jmp    c0103535 <__alltraps>
+
+c0102c02 <vector37>:
+.globl vector37
+vector37:
+  pushl $0
+c0102c02:	6a 00                	push   $0x0
+  pushl $37
+c0102c04:	6a 25                	push   $0x25
+  jmp __alltraps
+c0102c06:	e9 2a 09 00 00       	jmp    c0103535 <__alltraps>
+
+c0102c0b <vector38>:
+.globl vector38
+vector38:
+  pushl $0
+c0102c0b:	6a 00                	push   $0x0
+  pushl $38
+c0102c0d:	6a 26                	push   $0x26
+  jmp __alltraps
+c0102c0f:	e9 21 09 00 00       	jmp    c0103535 <__alltraps>
+
+c0102c14 <vector39>:
+.globl vector39
+vector39:
+  pushl $0
+c0102c14:	6a 00                	push   $0x0
+  pushl $39
+c0102c16:	6a 27                	push   $0x27
+  jmp __alltraps
+c0102c18:	e9 18 09 00 00       	jmp    c0103535 <__alltraps>
+
+c0102c1d <vector40>:
+.globl vector40
+vector40:
+  pushl $0
+c0102c1d:	6a 00                	push   $0x0
+  pushl $40
+c0102c1f:	6a 28                	push   $0x28
+  jmp __alltraps
+c0102c21:	e9 0f 09 00 00       	jmp    c0103535 <__alltraps>
+
+c0102c26 <vector41>:
+.globl vector41
+vector41:
+  pushl $0
+c0102c26:	6a 00                	push   $0x0
+  pushl $41
+c0102c28:	6a 29                	push   $0x29
+  jmp __alltraps
+c0102c2a:	e9 06 09 00 00       	jmp    c0103535 <__alltraps>
+
+c0102c2f <vector42>:
+.globl vector42
+vector42:
+  pushl $0
+c0102c2f:	6a 00                	push   $0x0
+  pushl $42
+c0102c31:	6a 2a                	push   $0x2a
+  jmp __alltraps
+c0102c33:	e9 fd 08 00 00       	jmp    c0103535 <__alltraps>
+
+c0102c38 <vector43>:
+.globl vector43
+vector43:
+  pushl $0
+c0102c38:	6a 00                	push   $0x0
+  pushl $43
+c0102c3a:	6a 2b                	push   $0x2b
+  jmp __alltraps
+c0102c3c:	e9 f4 08 00 00       	jmp    c0103535 <__alltraps>
+
+c0102c41 <vector44>:
+.globl vector44
+vector44:
+  pushl $0
+c0102c41:	6a 00                	push   $0x0
+  pushl $44
+c0102c43:	6a 2c                	push   $0x2c
+  jmp __alltraps
+c0102c45:	e9 eb 08 00 00       	jmp    c0103535 <__alltraps>
+
+c0102c4a <vector45>:
+.globl vector45
+vector45:
+  pushl $0
+c0102c4a:	6a 00                	push   $0x0
+  pushl $45
+c0102c4c:	6a 2d                	push   $0x2d
+  jmp __alltraps
+c0102c4e:	e9 e2 08 00 00       	jmp    c0103535 <__alltraps>
+
+c0102c53 <vector46>:
+.globl vector46
+vector46:
+  pushl $0
+c0102c53:	6a 00                	push   $0x0
+  pushl $46
+c0102c55:	6a 2e                	push   $0x2e
+  jmp __alltraps
+c0102c57:	e9 d9 08 00 00       	jmp    c0103535 <__alltraps>
+
+c0102c5c <vector47>:
+.globl vector47
+vector47:
+  pushl $0
+c0102c5c:	6a 00                	push   $0x0
+  pushl $47
+c0102c5e:	6a 2f                	push   $0x2f
+  jmp __alltraps
+c0102c60:	e9 d0 08 00 00       	jmp    c0103535 <__alltraps>
+
+c0102c65 <vector48>:
+.globl vector48
+vector48:
+  pushl $0
+c0102c65:	6a 00                	push   $0x0
+  pushl $48
+c0102c67:	6a 30                	push   $0x30
+  jmp __alltraps
+c0102c69:	e9 c7 08 00 00       	jmp    c0103535 <__alltraps>
+
+c0102c6e <vector49>:
+.globl vector49
+vector49:
+  pushl $0
+c0102c6e:	6a 00                	push   $0x0
+  pushl $49
+c0102c70:	6a 31                	push   $0x31
+  jmp __alltraps
+c0102c72:	e9 be 08 00 00       	jmp    c0103535 <__alltraps>
+
+c0102c77 <vector50>:
+.globl vector50
+vector50:
+  pushl $0
+c0102c77:	6a 00                	push   $0x0
+  pushl $50
+c0102c79:	6a 32                	push   $0x32
+  jmp __alltraps
+c0102c7b:	e9 b5 08 00 00       	jmp    c0103535 <__alltraps>
+
+c0102c80 <vector51>:
+.globl vector51
+vector51:
+  pushl $0
+c0102c80:	6a 00                	push   $0x0
+  pushl $51
+c0102c82:	6a 33                	push   $0x33
+  jmp __alltraps
+c0102c84:	e9 ac 08 00 00       	jmp    c0103535 <__alltraps>
+
+c0102c89 <vector52>:
+.globl vector52
+vector52:
+  pushl $0
+c0102c89:	6a 00                	push   $0x0
+  pushl $52
+c0102c8b:	6a 34                	push   $0x34
+  jmp __alltraps
+c0102c8d:	e9 a3 08 00 00       	jmp    c0103535 <__alltraps>
+
+c0102c92 <vector53>:
+.globl vector53
+vector53:
+  pushl $0
+c0102c92:	6a 00                	push   $0x0
+  pushl $53
+c0102c94:	6a 35                	push   $0x35
+  jmp __alltraps
+c0102c96:	e9 9a 08 00 00       	jmp    c0103535 <__alltraps>
+
+c0102c9b <vector54>:
+.globl vector54
+vector54:
+  pushl $0
+c0102c9b:	6a 00                	push   $0x0
+  pushl $54
+c0102c9d:	6a 36                	push   $0x36
+  jmp __alltraps
+c0102c9f:	e9 91 08 00 00       	jmp    c0103535 <__alltraps>
+
+c0102ca4 <vector55>:
+.globl vector55
+vector55:
+  pushl $0
+c0102ca4:	6a 00                	push   $0x0
+  pushl $55
+c0102ca6:	6a 37                	push   $0x37
+  jmp __alltraps
+c0102ca8:	e9 88 08 00 00       	jmp    c0103535 <__alltraps>
+
+c0102cad <vector56>:
+.globl vector56
+vector56:
+  pushl $0
+c0102cad:	6a 00                	push   $0x0
+  pushl $56
+c0102caf:	6a 38                	push   $0x38
+  jmp __alltraps
+c0102cb1:	e9 7f 08 00 00       	jmp    c0103535 <__alltraps>
+
+c0102cb6 <vector57>:
+.globl vector57
+vector57:
+  pushl $0
+c0102cb6:	6a 00                	push   $0x0
+  pushl $57
+c0102cb8:	6a 39                	push   $0x39
+  jmp __alltraps
+c0102cba:	e9 76 08 00 00       	jmp    c0103535 <__alltraps>
+
+c0102cbf <vector58>:
+.globl vector58
+vector58:
+  pushl $0
+c0102cbf:	6a 00                	push   $0x0
+  pushl $58
+c0102cc1:	6a 3a                	push   $0x3a
+  jmp __alltraps
+c0102cc3:	e9 6d 08 00 00       	jmp    c0103535 <__alltraps>
+
+c0102cc8 <vector59>:
+.globl vector59
+vector59:
+  pushl $0
+c0102cc8:	6a 00                	push   $0x0
+  pushl $59
+c0102cca:	6a 3b                	push   $0x3b
+  jmp __alltraps
+c0102ccc:	e9 64 08 00 00       	jmp    c0103535 <__alltraps>
+
+c0102cd1 <vector60>:
+.globl vector60
+vector60:
+  pushl $0
+c0102cd1:	6a 00                	push   $0x0
+  pushl $60
+c0102cd3:	6a 3c                	push   $0x3c
+  jmp __alltraps
+c0102cd5:	e9 5b 08 00 00       	jmp    c0103535 <__alltraps>
+
+c0102cda <vector61>:
+.globl vector61
+vector61:
+  pushl $0
+c0102cda:	6a 00                	push   $0x0
+  pushl $61
+c0102cdc:	6a 3d                	push   $0x3d
+  jmp __alltraps
+c0102cde:	e9 52 08 00 00       	jmp    c0103535 <__alltraps>
+
+c0102ce3 <vector62>:
+.globl vector62
+vector62:
+  pushl $0
+c0102ce3:	6a 00                	push   $0x0
+  pushl $62
+c0102ce5:	6a 3e                	push   $0x3e
+  jmp __alltraps
+c0102ce7:	e9 49 08 00 00       	jmp    c0103535 <__alltraps>
+
+c0102cec <vector63>:
+.globl vector63
+vector63:
+  pushl $0
+c0102cec:	6a 00                	push   $0x0
+  pushl $63
+c0102cee:	6a 3f                	push   $0x3f
+  jmp __alltraps
+c0102cf0:	e9 40 08 00 00       	jmp    c0103535 <__alltraps>
+
+c0102cf5 <vector64>:
+.globl vector64
+vector64:
+  pushl $0
+c0102cf5:	6a 00                	push   $0x0
+  pushl $64
+c0102cf7:	6a 40                	push   $0x40
+  jmp __alltraps
+c0102cf9:	e9 37 08 00 00       	jmp    c0103535 <__alltraps>
+
+c0102cfe <vector65>:
+.globl vector65
+vector65:
+  pushl $0
+c0102cfe:	6a 00                	push   $0x0
+  pushl $65
+c0102d00:	6a 41                	push   $0x41
+  jmp __alltraps
+c0102d02:	e9 2e 08 00 00       	jmp    c0103535 <__alltraps>
+
+c0102d07 <vector66>:
+.globl vector66
+vector66:
+  pushl $0
+c0102d07:	6a 00                	push   $0x0
+  pushl $66
+c0102d09:	6a 42                	push   $0x42
+  jmp __alltraps
+c0102d0b:	e9 25 08 00 00       	jmp    c0103535 <__alltraps>
+
+c0102d10 <vector67>:
+.globl vector67
+vector67:
+  pushl $0
+c0102d10:	6a 00                	push   $0x0
+  pushl $67
+c0102d12:	6a 43                	push   $0x43
+  jmp __alltraps
+c0102d14:	e9 1c 08 00 00       	jmp    c0103535 <__alltraps>
+
+c0102d19 <vector68>:
+.globl vector68
+vector68:
+  pushl $0
+c0102d19:	6a 00                	push   $0x0
+  pushl $68
+c0102d1b:	6a 44                	push   $0x44
+  jmp __alltraps
+c0102d1d:	e9 13 08 00 00       	jmp    c0103535 <__alltraps>
+
+c0102d22 <vector69>:
+.globl vector69
+vector69:
+  pushl $0
+c0102d22:	6a 00                	push   $0x0
+  pushl $69
+c0102d24:	6a 45                	push   $0x45
+  jmp __alltraps
+c0102d26:	e9 0a 08 00 00       	jmp    c0103535 <__alltraps>
+
+c0102d2b <vector70>:
+.globl vector70
+vector70:
+  pushl $0
+c0102d2b:	6a 00                	push   $0x0
+  pushl $70
+c0102d2d:	6a 46                	push   $0x46
+  jmp __alltraps
+c0102d2f:	e9 01 08 00 00       	jmp    c0103535 <__alltraps>
+
+c0102d34 <vector71>:
+.globl vector71
+vector71:
+  pushl $0
+c0102d34:	6a 00                	push   $0x0
+  pushl $71
+c0102d36:	6a 47                	push   $0x47
+  jmp __alltraps
+c0102d38:	e9 f8 07 00 00       	jmp    c0103535 <__alltraps>
+
+c0102d3d <vector72>:
+.globl vector72
+vector72:
+  pushl $0
+c0102d3d:	6a 00                	push   $0x0
+  pushl $72
+c0102d3f:	6a 48                	push   $0x48
+  jmp __alltraps
+c0102d41:	e9 ef 07 00 00       	jmp    c0103535 <__alltraps>
+
+c0102d46 <vector73>:
+.globl vector73
+vector73:
+  pushl $0
+c0102d46:	6a 00                	push   $0x0
+  pushl $73
+c0102d48:	6a 49                	push   $0x49
+  jmp __alltraps
+c0102d4a:	e9 e6 07 00 00       	jmp    c0103535 <__alltraps>
+
+c0102d4f <vector74>:
+.globl vector74
+vector74:
+  pushl $0
+c0102d4f:	6a 00                	push   $0x0
+  pushl $74
+c0102d51:	6a 4a                	push   $0x4a
+  jmp __alltraps
+c0102d53:	e9 dd 07 00 00       	jmp    c0103535 <__alltraps>
+
+c0102d58 <vector75>:
+.globl vector75
+vector75:
+  pushl $0
+c0102d58:	6a 00                	push   $0x0
+  pushl $75
+c0102d5a:	6a 4b                	push   $0x4b
+  jmp __alltraps
+c0102d5c:	e9 d4 07 00 00       	jmp    c0103535 <__alltraps>
+
+c0102d61 <vector76>:
+.globl vector76
+vector76:
+  pushl $0
+c0102d61:	6a 00                	push   $0x0
+  pushl $76
+c0102d63:	6a 4c                	push   $0x4c
+  jmp __alltraps
+c0102d65:	e9 cb 07 00 00       	jmp    c0103535 <__alltraps>
+
+c0102d6a <vector77>:
+.globl vector77
+vector77:
+  pushl $0
+c0102d6a:	6a 00                	push   $0x0
+  pushl $77
+c0102d6c:	6a 4d                	push   $0x4d
+  jmp __alltraps
+c0102d6e:	e9 c2 07 00 00       	jmp    c0103535 <__alltraps>
+
+c0102d73 <vector78>:
+.globl vector78
+vector78:
+  pushl $0
+c0102d73:	6a 00                	push   $0x0
+  pushl $78
+c0102d75:	6a 4e                	push   $0x4e
+  jmp __alltraps
+c0102d77:	e9 b9 07 00 00       	jmp    c0103535 <__alltraps>
+
+c0102d7c <vector79>:
+.globl vector79
+vector79:
+  pushl $0
+c0102d7c:	6a 00                	push   $0x0
+  pushl $79
+c0102d7e:	6a 4f                	push   $0x4f
+  jmp __alltraps
+c0102d80:	e9 b0 07 00 00       	jmp    c0103535 <__alltraps>
+
+c0102d85 <vector80>:
+.globl vector80
+vector80:
+  pushl $0
+c0102d85:	6a 00                	push   $0x0
+  pushl $80
+c0102d87:	6a 50                	push   $0x50
+  jmp __alltraps
+c0102d89:	e9 a7 07 00 00       	jmp    c0103535 <__alltraps>
+
+c0102d8e <vector81>:
+.globl vector81
+vector81:
+  pushl $0
+c0102d8e:	6a 00                	push   $0x0
+  pushl $81
+c0102d90:	6a 51                	push   $0x51
+  jmp __alltraps
+c0102d92:	e9 9e 07 00 00       	jmp    c0103535 <__alltraps>
+
+c0102d97 <vector82>:
+.globl vector82
+vector82:
+  pushl $0
+c0102d97:	6a 00                	push   $0x0
+  pushl $82
+c0102d99:	6a 52                	push   $0x52
+  jmp __alltraps
+c0102d9b:	e9 95 07 00 00       	jmp    c0103535 <__alltraps>
+
+c0102da0 <vector83>:
+.globl vector83
+vector83:
+  pushl $0
+c0102da0:	6a 00                	push   $0x0
+  pushl $83
+c0102da2:	6a 53                	push   $0x53
+  jmp __alltraps
+c0102da4:	e9 8c 07 00 00       	jmp    c0103535 <__alltraps>
+
+c0102da9 <vector84>:
+.globl vector84
+vector84:
+  pushl $0
+c0102da9:	6a 00                	push   $0x0
+  pushl $84
+c0102dab:	6a 54                	push   $0x54
+  jmp __alltraps
+c0102dad:	e9 83 07 00 00       	jmp    c0103535 <__alltraps>
+
+c0102db2 <vector85>:
+.globl vector85
+vector85:
+  pushl $0
+c0102db2:	6a 00                	push   $0x0
+  pushl $85
+c0102db4:	6a 55                	push   $0x55
+  jmp __alltraps
+c0102db6:	e9 7a 07 00 00       	jmp    c0103535 <__alltraps>
+
+c0102dbb <vector86>:
+.globl vector86
+vector86:
+  pushl $0
+c0102dbb:	6a 00                	push   $0x0
+  pushl $86
+c0102dbd:	6a 56                	push   $0x56
+  jmp __alltraps
+c0102dbf:	e9 71 07 00 00       	jmp    c0103535 <__alltraps>
+
+c0102dc4 <vector87>:
+.globl vector87
+vector87:
+  pushl $0
+c0102dc4:	6a 00                	push   $0x0
+  pushl $87
+c0102dc6:	6a 57                	push   $0x57
+  jmp __alltraps
+c0102dc8:	e9 68 07 00 00       	jmp    c0103535 <__alltraps>
+
+c0102dcd <vector88>:
+.globl vector88
+vector88:
+  pushl $0
+c0102dcd:	6a 00                	push   $0x0
+  pushl $88
+c0102dcf:	6a 58                	push   $0x58
+  jmp __alltraps
+c0102dd1:	e9 5f 07 00 00       	jmp    c0103535 <__alltraps>
+
+c0102dd6 <vector89>:
+.globl vector89
+vector89:
+  pushl $0
+c0102dd6:	6a 00                	push   $0x0
+  pushl $89
+c0102dd8:	6a 59                	push   $0x59
+  jmp __alltraps
+c0102dda:	e9 56 07 00 00       	jmp    c0103535 <__alltraps>
+
+c0102ddf <vector90>:
+.globl vector90
+vector90:
+  pushl $0
+c0102ddf:	6a 00                	push   $0x0
+  pushl $90
+c0102de1:	6a 5a                	push   $0x5a
+  jmp __alltraps
+c0102de3:	e9 4d 07 00 00       	jmp    c0103535 <__alltraps>
+
+c0102de8 <vector91>:
+.globl vector91
+vector91:
+  pushl $0
+c0102de8:	6a 00                	push   $0x0
+  pushl $91
+c0102dea:	6a 5b                	push   $0x5b
+  jmp __alltraps
+c0102dec:	e9 44 07 00 00       	jmp    c0103535 <__alltraps>
+
+c0102df1 <vector92>:
+.globl vector92
+vector92:
+  pushl $0
+c0102df1:	6a 00                	push   $0x0
+  pushl $92
+c0102df3:	6a 5c                	push   $0x5c
+  jmp __alltraps
+c0102df5:	e9 3b 07 00 00       	jmp    c0103535 <__alltraps>
+
+c0102dfa <vector93>:
+.globl vector93
+vector93:
+  pushl $0
+c0102dfa:	6a 00                	push   $0x0
+  pushl $93
+c0102dfc:	6a 5d                	push   $0x5d
+  jmp __alltraps
+c0102dfe:	e9 32 07 00 00       	jmp    c0103535 <__alltraps>
+
+c0102e03 <vector94>:
+.globl vector94
+vector94:
+  pushl $0
+c0102e03:	6a 00                	push   $0x0
+  pushl $94
+c0102e05:	6a 5e                	push   $0x5e
+  jmp __alltraps
+c0102e07:	e9 29 07 00 00       	jmp    c0103535 <__alltraps>
+
+c0102e0c <vector95>:
+.globl vector95
+vector95:
+  pushl $0
+c0102e0c:	6a 00                	push   $0x0
+  pushl $95
+c0102e0e:	6a 5f                	push   $0x5f
+  jmp __alltraps
+c0102e10:	e9 20 07 00 00       	jmp    c0103535 <__alltraps>
+
+c0102e15 <vector96>:
+.globl vector96
+vector96:
+  pushl $0
+c0102e15:	6a 00                	push   $0x0
+  pushl $96
+c0102e17:	6a 60                	push   $0x60
+  jmp __alltraps
+c0102e19:	e9 17 07 00 00       	jmp    c0103535 <__alltraps>
+
+c0102e1e <vector97>:
+.globl vector97
+vector97:
+  pushl $0
+c0102e1e:	6a 00                	push   $0x0
+  pushl $97
+c0102e20:	6a 61                	push   $0x61
+  jmp __alltraps
+c0102e22:	e9 0e 07 00 00       	jmp    c0103535 <__alltraps>
+
+c0102e27 <vector98>:
+.globl vector98
+vector98:
+  pushl $0
+c0102e27:	6a 00                	push   $0x0
+  pushl $98
+c0102e29:	6a 62                	push   $0x62
+  jmp __alltraps
+c0102e2b:	e9 05 07 00 00       	jmp    c0103535 <__alltraps>
+
+c0102e30 <vector99>:
+.globl vector99
+vector99:
+  pushl $0
+c0102e30:	6a 00                	push   $0x0
+  pushl $99
+c0102e32:	6a 63                	push   $0x63
+  jmp __alltraps
+c0102e34:	e9 fc 06 00 00       	jmp    c0103535 <__alltraps>
+
+c0102e39 <vector100>:
+.globl vector100
+vector100:
+  pushl $0
+c0102e39:	6a 00                	push   $0x0
+  pushl $100
+c0102e3b:	6a 64                	push   $0x64
+  jmp __alltraps
+c0102e3d:	e9 f3 06 00 00       	jmp    c0103535 <__alltraps>
+
+c0102e42 <vector101>:
+.globl vector101
+vector101:
+  pushl $0
+c0102e42:	6a 00                	push   $0x0
+  pushl $101
+c0102e44:	6a 65                	push   $0x65
+  jmp __alltraps
+c0102e46:	e9 ea 06 00 00       	jmp    c0103535 <__alltraps>
+
+c0102e4b <vector102>:
+.globl vector102
+vector102:
+  pushl $0
+c0102e4b:	6a 00                	push   $0x0
+  pushl $102
+c0102e4d:	6a 66                	push   $0x66
+  jmp __alltraps
+c0102e4f:	e9 e1 06 00 00       	jmp    c0103535 <__alltraps>
+
+c0102e54 <vector103>:
+.globl vector103
+vector103:
+  pushl $0
+c0102e54:	6a 00                	push   $0x0
+  pushl $103
+c0102e56:	6a 67                	push   $0x67
+  jmp __alltraps
+c0102e58:	e9 d8 06 00 00       	jmp    c0103535 <__alltraps>
+
+c0102e5d <vector104>:
+.globl vector104
+vector104:
+  pushl $0
+c0102e5d:	6a 00                	push   $0x0
+  pushl $104
+c0102e5f:	6a 68                	push   $0x68
+  jmp __alltraps
+c0102e61:	e9 cf 06 00 00       	jmp    c0103535 <__alltraps>
+
+c0102e66 <vector105>:
+.globl vector105
+vector105:
+  pushl $0
+c0102e66:	6a 00                	push   $0x0
+  pushl $105
+c0102e68:	6a 69                	push   $0x69
+  jmp __alltraps
+c0102e6a:	e9 c6 06 00 00       	jmp    c0103535 <__alltraps>
+
+c0102e6f <vector106>:
+.globl vector106
+vector106:
+  pushl $0
+c0102e6f:	6a 00                	push   $0x0
+  pushl $106
+c0102e71:	6a 6a                	push   $0x6a
+  jmp __alltraps
+c0102e73:	e9 bd 06 00 00       	jmp    c0103535 <__alltraps>
+
+c0102e78 <vector107>:
+.globl vector107
+vector107:
+  pushl $0
+c0102e78:	6a 00                	push   $0x0
+  pushl $107
+c0102e7a:	6a 6b                	push   $0x6b
+  jmp __alltraps
+c0102e7c:	e9 b4 06 00 00       	jmp    c0103535 <__alltraps>
+
+c0102e81 <vector108>:
+.globl vector108
+vector108:
+  pushl $0
+c0102e81:	6a 00                	push   $0x0
+  pushl $108
+c0102e83:	6a 6c                	push   $0x6c
+  jmp __alltraps
+c0102e85:	e9 ab 06 00 00       	jmp    c0103535 <__alltraps>
+
+c0102e8a <vector109>:
+.globl vector109
+vector109:
+  pushl $0
+c0102e8a:	6a 00                	push   $0x0
+  pushl $109
+c0102e8c:	6a 6d                	push   $0x6d
+  jmp __alltraps
+c0102e8e:	e9 a2 06 00 00       	jmp    c0103535 <__alltraps>
+
+c0102e93 <vector110>:
+.globl vector110
+vector110:
+  pushl $0
+c0102e93:	6a 00                	push   $0x0
+  pushl $110
+c0102e95:	6a 6e                	push   $0x6e
+  jmp __alltraps
+c0102e97:	e9 99 06 00 00       	jmp    c0103535 <__alltraps>
+
+c0102e9c <vector111>:
+.globl vector111
+vector111:
+  pushl $0
+c0102e9c:	6a 00                	push   $0x0
+  pushl $111
+c0102e9e:	6a 6f                	push   $0x6f
+  jmp __alltraps
+c0102ea0:	e9 90 06 00 00       	jmp    c0103535 <__alltraps>
+
+c0102ea5 <vector112>:
+.globl vector112
+vector112:
+  pushl $0
+c0102ea5:	6a 00                	push   $0x0
+  pushl $112
+c0102ea7:	6a 70                	push   $0x70
+  jmp __alltraps
+c0102ea9:	e9 87 06 00 00       	jmp    c0103535 <__alltraps>
+
+c0102eae <vector113>:
+.globl vector113
+vector113:
+  pushl $0
+c0102eae:	6a 00                	push   $0x0
+  pushl $113
+c0102eb0:	6a 71                	push   $0x71
+  jmp __alltraps
+c0102eb2:	e9 7e 06 00 00       	jmp    c0103535 <__alltraps>
+
+c0102eb7 <vector114>:
+.globl vector114
+vector114:
+  pushl $0
+c0102eb7:	6a 00                	push   $0x0
+  pushl $114
+c0102eb9:	6a 72                	push   $0x72
+  jmp __alltraps
+c0102ebb:	e9 75 06 00 00       	jmp    c0103535 <__alltraps>
+
+c0102ec0 <vector115>:
+.globl vector115
+vector115:
+  pushl $0
+c0102ec0:	6a 00                	push   $0x0
+  pushl $115
+c0102ec2:	6a 73                	push   $0x73
+  jmp __alltraps
+c0102ec4:	e9 6c 06 00 00       	jmp    c0103535 <__alltraps>
+
+c0102ec9 <vector116>:
+.globl vector116
+vector116:
+  pushl $0
+c0102ec9:	6a 00                	push   $0x0
+  pushl $116
+c0102ecb:	6a 74                	push   $0x74
+  jmp __alltraps
+c0102ecd:	e9 63 06 00 00       	jmp    c0103535 <__alltraps>
+
+c0102ed2 <vector117>:
+.globl vector117
+vector117:
+  pushl $0
+c0102ed2:	6a 00                	push   $0x0
+  pushl $117
+c0102ed4:	6a 75                	push   $0x75
+  jmp __alltraps
+c0102ed6:	e9 5a 06 00 00       	jmp    c0103535 <__alltraps>
+
+c0102edb <vector118>:
+.globl vector118
+vector118:
+  pushl $0
+c0102edb:	6a 00                	push   $0x0
+  pushl $118
+c0102edd:	6a 76                	push   $0x76
+  jmp __alltraps
+c0102edf:	e9 51 06 00 00       	jmp    c0103535 <__alltraps>
+
+c0102ee4 <vector119>:
+.globl vector119
+vector119:
+  pushl $0
+c0102ee4:	6a 00                	push   $0x0
+  pushl $119
+c0102ee6:	6a 77                	push   $0x77
+  jmp __alltraps
+c0102ee8:	e9 48 06 00 00       	jmp    c0103535 <__alltraps>
+
+c0102eed <vector120>:
+.globl vector120
+vector120:
+  pushl $0
+c0102eed:	6a 00                	push   $0x0
+  pushl $120
+c0102eef:	6a 78                	push   $0x78
+  jmp __alltraps
+c0102ef1:	e9 3f 06 00 00       	jmp    c0103535 <__alltraps>
+
+c0102ef6 <vector121>:
+.globl vector121
+vector121:
+  pushl $0
+c0102ef6:	6a 00                	push   $0x0
+  pushl $121
+c0102ef8:	6a 79                	push   $0x79
+  jmp __alltraps
+c0102efa:	e9 36 06 00 00       	jmp    c0103535 <__alltraps>
+
+c0102eff <vector122>:
+.globl vector122
+vector122:
+  pushl $0
+c0102eff:	6a 00                	push   $0x0
+  pushl $122
+c0102f01:	6a 7a                	push   $0x7a
+  jmp __alltraps
+c0102f03:	e9 2d 06 00 00       	jmp    c0103535 <__alltraps>
+
+c0102f08 <vector123>:
+.globl vector123
+vector123:
+  pushl $0
+c0102f08:	6a 00                	push   $0x0
+  pushl $123
+c0102f0a:	6a 7b                	push   $0x7b
+  jmp __alltraps
+c0102f0c:	e9 24 06 00 00       	jmp    c0103535 <__alltraps>
+
+c0102f11 <vector124>:
+.globl vector124
+vector124:
+  pushl $0
+c0102f11:	6a 00                	push   $0x0
+  pushl $124
+c0102f13:	6a 7c                	push   $0x7c
+  jmp __alltraps
+c0102f15:	e9 1b 06 00 00       	jmp    c0103535 <__alltraps>
+
+c0102f1a <vector125>:
+.globl vector125
+vector125:
+  pushl $0
+c0102f1a:	6a 00                	push   $0x0
+  pushl $125
+c0102f1c:	6a 7d                	push   $0x7d
+  jmp __alltraps
+c0102f1e:	e9 12 06 00 00       	jmp    c0103535 <__alltraps>
+
+c0102f23 <vector126>:
+.globl vector126
+vector126:
+  pushl $0
+c0102f23:	6a 00                	push   $0x0
+  pushl $126
+c0102f25:	6a 7e                	push   $0x7e
+  jmp __alltraps
+c0102f27:	e9 09 06 00 00       	jmp    c0103535 <__alltraps>
+
+c0102f2c <vector127>:
+.globl vector127
+vector127:
+  pushl $0
+c0102f2c:	6a 00                	push   $0x0
+  pushl $127
+c0102f2e:	6a 7f                	push   $0x7f
+  jmp __alltraps
+c0102f30:	e9 00 06 00 00       	jmp    c0103535 <__alltraps>
+
+c0102f35 <vector128>:
+.globl vector128
+vector128:
+  pushl $0
+c0102f35:	6a 00                	push   $0x0
+  pushl $128
+c0102f37:	68 80 00 00 00       	push   $0x80
+  jmp __alltraps
+c0102f3c:	e9 f4 05 00 00       	jmp    c0103535 <__alltraps>
+
+c0102f41 <vector129>:
+.globl vector129
+vector129:
+  pushl $0
+c0102f41:	6a 00                	push   $0x0
+  pushl $129
+c0102f43:	68 81 00 00 00       	push   $0x81
+  jmp __alltraps
+c0102f48:	e9 e8 05 00 00       	jmp    c0103535 <__alltraps>
+
+c0102f4d <vector130>:
+.globl vector130
+vector130:
+  pushl $0
+c0102f4d:	6a 00                	push   $0x0
+  pushl $130
+c0102f4f:	68 82 00 00 00       	push   $0x82
+  jmp __alltraps
+c0102f54:	e9 dc 05 00 00       	jmp    c0103535 <__alltraps>
+
+c0102f59 <vector131>:
+.globl vector131
+vector131:
+  pushl $0
+c0102f59:	6a 00                	push   $0x0
+  pushl $131
+c0102f5b:	68 83 00 00 00       	push   $0x83
+  jmp __alltraps
+c0102f60:	e9 d0 05 00 00       	jmp    c0103535 <__alltraps>
+
+c0102f65 <vector132>:
+.globl vector132
+vector132:
+  pushl $0
+c0102f65:	6a 00                	push   $0x0
+  pushl $132
+c0102f67:	68 84 00 00 00       	push   $0x84
+  jmp __alltraps
+c0102f6c:	e9 c4 05 00 00       	jmp    c0103535 <__alltraps>
+
+c0102f71 <vector133>:
+.globl vector133
+vector133:
+  pushl $0
+c0102f71:	6a 00                	push   $0x0
+  pushl $133
+c0102f73:	68 85 00 00 00       	push   $0x85
+  jmp __alltraps
+c0102f78:	e9 b8 05 00 00       	jmp    c0103535 <__alltraps>
+
+c0102f7d <vector134>:
+.globl vector134
+vector134:
+  pushl $0
+c0102f7d:	6a 00                	push   $0x0
+  pushl $134
+c0102f7f:	68 86 00 00 00       	push   $0x86
+  jmp __alltraps
+c0102f84:	e9 ac 05 00 00       	jmp    c0103535 <__alltraps>
+
+c0102f89 <vector135>:
+.globl vector135
+vector135:
+  pushl $0
+c0102f89:	6a 00                	push   $0x0
+  pushl $135
+c0102f8b:	68 87 00 00 00       	push   $0x87
+  jmp __alltraps
+c0102f90:	e9 a0 05 00 00       	jmp    c0103535 <__alltraps>
+
+c0102f95 <vector136>:
+.globl vector136
+vector136:
+  pushl $0
+c0102f95:	6a 00                	push   $0x0
+  pushl $136
+c0102f97:	68 88 00 00 00       	push   $0x88
+  jmp __alltraps
+c0102f9c:	e9 94 05 00 00       	jmp    c0103535 <__alltraps>
+
+c0102fa1 <vector137>:
+.globl vector137
+vector137:
+  pushl $0
+c0102fa1:	6a 00                	push   $0x0
+  pushl $137
+c0102fa3:	68 89 00 00 00       	push   $0x89
+  jmp __alltraps
+c0102fa8:	e9 88 05 00 00       	jmp    c0103535 <__alltraps>
+
+c0102fad <vector138>:
+.globl vector138
+vector138:
+  pushl $0
+c0102fad:	6a 00                	push   $0x0
+  pushl $138
+c0102faf:	68 8a 00 00 00       	push   $0x8a
+  jmp __alltraps
+c0102fb4:	e9 7c 05 00 00       	jmp    c0103535 <__alltraps>
+
+c0102fb9 <vector139>:
+.globl vector139
+vector139:
+  pushl $0
+c0102fb9:	6a 00                	push   $0x0
+  pushl $139
+c0102fbb:	68 8b 00 00 00       	push   $0x8b
+  jmp __alltraps
+c0102fc0:	e9 70 05 00 00       	jmp    c0103535 <__alltraps>
+
+c0102fc5 <vector140>:
+.globl vector140
+vector140:
+  pushl $0
+c0102fc5:	6a 00                	push   $0x0
+  pushl $140
+c0102fc7:	68 8c 00 00 00       	push   $0x8c
+  jmp __alltraps
+c0102fcc:	e9 64 05 00 00       	jmp    c0103535 <__alltraps>
+
+c0102fd1 <vector141>:
+.globl vector141
+vector141:
+  pushl $0
+c0102fd1:	6a 00                	push   $0x0
+  pushl $141
+c0102fd3:	68 8d 00 00 00       	push   $0x8d
+  jmp __alltraps
+c0102fd8:	e9 58 05 00 00       	jmp    c0103535 <__alltraps>
+
+c0102fdd <vector142>:
+.globl vector142
+vector142:
+  pushl $0
+c0102fdd:	6a 00                	push   $0x0
+  pushl $142
+c0102fdf:	68 8e 00 00 00       	push   $0x8e
+  jmp __alltraps
+c0102fe4:	e9 4c 05 00 00       	jmp    c0103535 <__alltraps>
+
+c0102fe9 <vector143>:
+.globl vector143
+vector143:
+  pushl $0
+c0102fe9:	6a 00                	push   $0x0
+  pushl $143
+c0102feb:	68 8f 00 00 00       	push   $0x8f
+  jmp __alltraps
+c0102ff0:	e9 40 05 00 00       	jmp    c0103535 <__alltraps>
+
+c0102ff5 <vector144>:
+.globl vector144
+vector144:
+  pushl $0
+c0102ff5:	6a 00                	push   $0x0
+  pushl $144
+c0102ff7:	68 90 00 00 00       	push   $0x90
+  jmp __alltraps
+c0102ffc:	e9 34 05 00 00       	jmp    c0103535 <__alltraps>
+
+c0103001 <vector145>:
+.globl vector145
+vector145:
+  pushl $0
+c0103001:	6a 00                	push   $0x0
+  pushl $145
+c0103003:	68 91 00 00 00       	push   $0x91
+  jmp __alltraps
+c0103008:	e9 28 05 00 00       	jmp    c0103535 <__alltraps>
+
+c010300d <vector146>:
+.globl vector146
+vector146:
+  pushl $0
+c010300d:	6a 00                	push   $0x0
+  pushl $146
+c010300f:	68 92 00 00 00       	push   $0x92
+  jmp __alltraps
+c0103014:	e9 1c 05 00 00       	jmp    c0103535 <__alltraps>
+
+c0103019 <vector147>:
+.globl vector147
+vector147:
+  pushl $0
+c0103019:	6a 00                	push   $0x0
+  pushl $147
+c010301b:	68 93 00 00 00       	push   $0x93
+  jmp __alltraps
+c0103020:	e9 10 05 00 00       	jmp    c0103535 <__alltraps>
+
+c0103025 <vector148>:
+.globl vector148
+vector148:
+  pushl $0
+c0103025:	6a 00                	push   $0x0
+  pushl $148
+c0103027:	68 94 00 00 00       	push   $0x94
+  jmp __alltraps
+c010302c:	e9 04 05 00 00       	jmp    c0103535 <__alltraps>
+
+c0103031 <vector149>:
+.globl vector149
+vector149:
+  pushl $0
+c0103031:	6a 00                	push   $0x0
+  pushl $149
+c0103033:	68 95 00 00 00       	push   $0x95
+  jmp __alltraps
+c0103038:	e9 f8 04 00 00       	jmp    c0103535 <__alltraps>
+
+c010303d <vector150>:
+.globl vector150
+vector150:
+  pushl $0
+c010303d:	6a 00                	push   $0x0
+  pushl $150
+c010303f:	68 96 00 00 00       	push   $0x96
+  jmp __alltraps
+c0103044:	e9 ec 04 00 00       	jmp    c0103535 <__alltraps>
+
+c0103049 <vector151>:
+.globl vector151
+vector151:
+  pushl $0
+c0103049:	6a 00                	push   $0x0
+  pushl $151
+c010304b:	68 97 00 00 00       	push   $0x97
+  jmp __alltraps
+c0103050:	e9 e0 04 00 00       	jmp    c0103535 <__alltraps>
+
+c0103055 <vector152>:
+.globl vector152
+vector152:
+  pushl $0
+c0103055:	6a 00                	push   $0x0
+  pushl $152
+c0103057:	68 98 00 00 00       	push   $0x98
+  jmp __alltraps
+c010305c:	e9 d4 04 00 00       	jmp    c0103535 <__alltraps>
+
+c0103061 <vector153>:
+.globl vector153
+vector153:
+  pushl $0
+c0103061:	6a 00                	push   $0x0
+  pushl $153
+c0103063:	68 99 00 00 00       	push   $0x99
+  jmp __alltraps
+c0103068:	e9 c8 04 00 00       	jmp    c0103535 <__alltraps>
+
+c010306d <vector154>:
+.globl vector154
+vector154:
+  pushl $0
+c010306d:	6a 00                	push   $0x0
+  pushl $154
+c010306f:	68 9a 00 00 00       	push   $0x9a
+  jmp __alltraps
+c0103074:	e9 bc 04 00 00       	jmp    c0103535 <__alltraps>
+
+c0103079 <vector155>:
+.globl vector155
+vector155:
+  pushl $0
+c0103079:	6a 00                	push   $0x0
+  pushl $155
+c010307b:	68 9b 00 00 00       	push   $0x9b
+  jmp __alltraps
+c0103080:	e9 b0 04 00 00       	jmp    c0103535 <__alltraps>
+
+c0103085 <vector156>:
+.globl vector156
+vector156:
+  pushl $0
+c0103085:	6a 00                	push   $0x0
+  pushl $156
+c0103087:	68 9c 00 00 00       	push   $0x9c
+  jmp __alltraps
+c010308c:	e9 a4 04 00 00       	jmp    c0103535 <__alltraps>
+
+c0103091 <vector157>:
+.globl vector157
+vector157:
+  pushl $0
+c0103091:	6a 00                	push   $0x0
+  pushl $157
+c0103093:	68 9d 00 00 00       	push   $0x9d
+  jmp __alltraps
+c0103098:	e9 98 04 00 00       	jmp    c0103535 <__alltraps>
+
+c010309d <vector158>:
+.globl vector158
+vector158:
+  pushl $0
+c010309d:	6a 00                	push   $0x0
+  pushl $158
+c010309f:	68 9e 00 00 00       	push   $0x9e
+  jmp __alltraps
+c01030a4:	e9 8c 04 00 00       	jmp    c0103535 <__alltraps>
+
+c01030a9 <vector159>:
+.globl vector159
+vector159:
+  pushl $0
+c01030a9:	6a 00                	push   $0x0
+  pushl $159
+c01030ab:	68 9f 00 00 00       	push   $0x9f
+  jmp __alltraps
+c01030b0:	e9 80 04 00 00       	jmp    c0103535 <__alltraps>
+
+c01030b5 <vector160>:
+.globl vector160
+vector160:
+  pushl $0
+c01030b5:	6a 00                	push   $0x0
+  pushl $160
+c01030b7:	68 a0 00 00 00       	push   $0xa0
+  jmp __alltraps
+c01030bc:	e9 74 04 00 00       	jmp    c0103535 <__alltraps>
+
+c01030c1 <vector161>:
+.globl vector161
+vector161:
+  pushl $0
+c01030c1:	6a 00                	push   $0x0
+  pushl $161
+c01030c3:	68 a1 00 00 00       	push   $0xa1
+  jmp __alltraps
+c01030c8:	e9 68 04 00 00       	jmp    c0103535 <__alltraps>
+
+c01030cd <vector162>:
+.globl vector162
+vector162:
+  pushl $0
+c01030cd:	6a 00                	push   $0x0
+  pushl $162
+c01030cf:	68 a2 00 00 00       	push   $0xa2
+  jmp __alltraps
+c01030d4:	e9 5c 04 00 00       	jmp    c0103535 <__alltraps>
+
+c01030d9 <vector163>:
+.globl vector163
+vector163:
+  pushl $0
+c01030d9:	6a 00                	push   $0x0
+  pushl $163
+c01030db:	68 a3 00 00 00       	push   $0xa3
+  jmp __alltraps
+c01030e0:	e9 50 04 00 00       	jmp    c0103535 <__alltraps>
+
+c01030e5 <vector164>:
+.globl vector164
+vector164:
+  pushl $0
+c01030e5:	6a 00                	push   $0x0
+  pushl $164
+c01030e7:	68 a4 00 00 00       	push   $0xa4
+  jmp __alltraps
+c01030ec:	e9 44 04 00 00       	jmp    c0103535 <__alltraps>
+
+c01030f1 <vector165>:
+.globl vector165
+vector165:
+  pushl $0
+c01030f1:	6a 00                	push   $0x0
+  pushl $165
+c01030f3:	68 a5 00 00 00       	push   $0xa5
+  jmp __alltraps
+c01030f8:	e9 38 04 00 00       	jmp    c0103535 <__alltraps>
+
+c01030fd <vector166>:
+.globl vector166
+vector166:
+  pushl $0
+c01030fd:	6a 00                	push   $0x0
+  pushl $166
+c01030ff:	68 a6 00 00 00       	push   $0xa6
+  jmp __alltraps
+c0103104:	e9 2c 04 00 00       	jmp    c0103535 <__alltraps>
+
+c0103109 <vector167>:
+.globl vector167
+vector167:
+  pushl $0
+c0103109:	6a 00                	push   $0x0
+  pushl $167
+c010310b:	68 a7 00 00 00       	push   $0xa7
+  jmp __alltraps
+c0103110:	e9 20 04 00 00       	jmp    c0103535 <__alltraps>
+
+c0103115 <vector168>:
+.globl vector168
+vector168:
+  pushl $0
+c0103115:	6a 00                	push   $0x0
+  pushl $168
+c0103117:	68 a8 00 00 00       	push   $0xa8
+  jmp __alltraps
+c010311c:	e9 14 04 00 00       	jmp    c0103535 <__alltraps>
+
+c0103121 <vector169>:
+.globl vector169
+vector169:
+  pushl $0
+c0103121:	6a 00                	push   $0x0
+  pushl $169
+c0103123:	68 a9 00 00 00       	push   $0xa9
+  jmp __alltraps
+c0103128:	e9 08 04 00 00       	jmp    c0103535 <__alltraps>
+
+c010312d <vector170>:
+.globl vector170
+vector170:
+  pushl $0
+c010312d:	6a 00                	push   $0x0
+  pushl $170
+c010312f:	68 aa 00 00 00       	push   $0xaa
+  jmp __alltraps
+c0103134:	e9 fc 03 00 00       	jmp    c0103535 <__alltraps>
+
+c0103139 <vector171>:
+.globl vector171
+vector171:
+  pushl $0
+c0103139:	6a 00                	push   $0x0
+  pushl $171
+c010313b:	68 ab 00 00 00       	push   $0xab
+  jmp __alltraps
+c0103140:	e9 f0 03 00 00       	jmp    c0103535 <__alltraps>
+
+c0103145 <vector172>:
+.globl vector172
+vector172:
+  pushl $0
+c0103145:	6a 00                	push   $0x0
+  pushl $172
+c0103147:	68 ac 00 00 00       	push   $0xac
+  jmp __alltraps
+c010314c:	e9 e4 03 00 00       	jmp    c0103535 <__alltraps>
+
+c0103151 <vector173>:
+.globl vector173
+vector173:
+  pushl $0
+c0103151:	6a 00                	push   $0x0
+  pushl $173
+c0103153:	68 ad 00 00 00       	push   $0xad
+  jmp __alltraps
+c0103158:	e9 d8 03 00 00       	jmp    c0103535 <__alltraps>
+
+c010315d <vector174>:
+.globl vector174
+vector174:
+  pushl $0
+c010315d:	6a 00                	push   $0x0
+  pushl $174
+c010315f:	68 ae 00 00 00       	push   $0xae
+  jmp __alltraps
+c0103164:	e9 cc 03 00 00       	jmp    c0103535 <__alltraps>
+
+c0103169 <vector175>:
+.globl vector175
+vector175:
+  pushl $0
+c0103169:	6a 00                	push   $0x0
+  pushl $175
+c010316b:	68 af 00 00 00       	push   $0xaf
+  jmp __alltraps
+c0103170:	e9 c0 03 00 00       	jmp    c0103535 <__alltraps>
+
+c0103175 <vector176>:
+.globl vector176
+vector176:
+  pushl $0
+c0103175:	6a 00                	push   $0x0
+  pushl $176
+c0103177:	68 b0 00 00 00       	push   $0xb0
+  jmp __alltraps
+c010317c:	e9 b4 03 00 00       	jmp    c0103535 <__alltraps>
+
+c0103181 <vector177>:
+.globl vector177
+vector177:
+  pushl $0
+c0103181:	6a 00                	push   $0x0
+  pushl $177
+c0103183:	68 b1 00 00 00       	push   $0xb1
+  jmp __alltraps
+c0103188:	e9 a8 03 00 00       	jmp    c0103535 <__alltraps>
+
+c010318d <vector178>:
+.globl vector178
+vector178:
+  pushl $0
+c010318d:	6a 00                	push   $0x0
+  pushl $178
+c010318f:	68 b2 00 00 00       	push   $0xb2
+  jmp __alltraps
+c0103194:	e9 9c 03 00 00       	jmp    c0103535 <__alltraps>
+
+c0103199 <vector179>:
+.globl vector179
+vector179:
+  pushl $0
+c0103199:	6a 00                	push   $0x0
+  pushl $179
+c010319b:	68 b3 00 00 00       	push   $0xb3
+  jmp __alltraps
+c01031a0:	e9 90 03 00 00       	jmp    c0103535 <__alltraps>
+
+c01031a5 <vector180>:
+.globl vector180
+vector180:
+  pushl $0
+c01031a5:	6a 00                	push   $0x0
+  pushl $180
+c01031a7:	68 b4 00 00 00       	push   $0xb4
+  jmp __alltraps
+c01031ac:	e9 84 03 00 00       	jmp    c0103535 <__alltraps>
+
+c01031b1 <vector181>:
+.globl vector181
+vector181:
+  pushl $0
+c01031b1:	6a 00                	push   $0x0
+  pushl $181
+c01031b3:	68 b5 00 00 00       	push   $0xb5
+  jmp __alltraps
+c01031b8:	e9 78 03 00 00       	jmp    c0103535 <__alltraps>
+
+c01031bd <vector182>:
+.globl vector182
+vector182:
+  pushl $0
+c01031bd:	6a 00                	push   $0x0
+  pushl $182
+c01031bf:	68 b6 00 00 00       	push   $0xb6
+  jmp __alltraps
+c01031c4:	e9 6c 03 00 00       	jmp    c0103535 <__alltraps>
+
+c01031c9 <vector183>:
+.globl vector183
+vector183:
+  pushl $0
+c01031c9:	6a 00                	push   $0x0
+  pushl $183
+c01031cb:	68 b7 00 00 00       	push   $0xb7
+  jmp __alltraps
+c01031d0:	e9 60 03 00 00       	jmp    c0103535 <__alltraps>
+
+c01031d5 <vector184>:
+.globl vector184
+vector184:
+  pushl $0
+c01031d5:	6a 00                	push   $0x0
+  pushl $184
+c01031d7:	68 b8 00 00 00       	push   $0xb8
+  jmp __alltraps
+c01031dc:	e9 54 03 00 00       	jmp    c0103535 <__alltraps>
+
+c01031e1 <vector185>:
+.globl vector185
+vector185:
+  pushl $0
+c01031e1:	6a 00                	push   $0x0
+  pushl $185
+c01031e3:	68 b9 00 00 00       	push   $0xb9
+  jmp __alltraps
+c01031e8:	e9 48 03 00 00       	jmp    c0103535 <__alltraps>
+
+c01031ed <vector186>:
+.globl vector186
+vector186:
+  pushl $0
+c01031ed:	6a 00                	push   $0x0
+  pushl $186
+c01031ef:	68 ba 00 00 00       	push   $0xba
+  jmp __alltraps
+c01031f4:	e9 3c 03 00 00       	jmp    c0103535 <__alltraps>
+
+c01031f9 <vector187>:
+.globl vector187
+vector187:
+  pushl $0
+c01031f9:	6a 00                	push   $0x0
+  pushl $187
+c01031fb:	68 bb 00 00 00       	push   $0xbb
+  jmp __alltraps
+c0103200:	e9 30 03 00 00       	jmp    c0103535 <__alltraps>
+
+c0103205 <vector188>:
+.globl vector188
+vector188:
+  pushl $0
+c0103205:	6a 00                	push   $0x0
+  pushl $188
+c0103207:	68 bc 00 00 00       	push   $0xbc
+  jmp __alltraps
+c010320c:	e9 24 03 00 00       	jmp    c0103535 <__alltraps>
+
+c0103211 <vector189>:
+.globl vector189
+vector189:
+  pushl $0
+c0103211:	6a 00                	push   $0x0
+  pushl $189
+c0103213:	68 bd 00 00 00       	push   $0xbd
+  jmp __alltraps
+c0103218:	e9 18 03 00 00       	jmp    c0103535 <__alltraps>
+
+c010321d <vector190>:
+.globl vector190
+vector190:
+  pushl $0
+c010321d:	6a 00                	push   $0x0
+  pushl $190
+c010321f:	68 be 00 00 00       	push   $0xbe
+  jmp __alltraps
+c0103224:	e9 0c 03 00 00       	jmp    c0103535 <__alltraps>
+
+c0103229 <vector191>:
+.globl vector191
+vector191:
+  pushl $0
+c0103229:	6a 00                	push   $0x0
+  pushl $191
+c010322b:	68 bf 00 00 00       	push   $0xbf
+  jmp __alltraps
+c0103230:	e9 00 03 00 00       	jmp    c0103535 <__alltraps>
+
+c0103235 <vector192>:
+.globl vector192
+vector192:
+  pushl $0
+c0103235:	6a 00                	push   $0x0
+  pushl $192
+c0103237:	68 c0 00 00 00       	push   $0xc0
+  jmp __alltraps
+c010323c:	e9 f4 02 00 00       	jmp    c0103535 <__alltraps>
+
+c0103241 <vector193>:
+.globl vector193
+vector193:
+  pushl $0
+c0103241:	6a 00                	push   $0x0
+  pushl $193
+c0103243:	68 c1 00 00 00       	push   $0xc1
+  jmp __alltraps
+c0103248:	e9 e8 02 00 00       	jmp    c0103535 <__alltraps>
+
+c010324d <vector194>:
+.globl vector194
+vector194:
+  pushl $0
+c010324d:	6a 00                	push   $0x0
+  pushl $194
+c010324f:	68 c2 00 00 00       	push   $0xc2
+  jmp __alltraps
+c0103254:	e9 dc 02 00 00       	jmp    c0103535 <__alltraps>
+
+c0103259 <vector195>:
+.globl vector195
+vector195:
+  pushl $0
+c0103259:	6a 00                	push   $0x0
+  pushl $195
+c010325b:	68 c3 00 00 00       	push   $0xc3
+  jmp __alltraps
+c0103260:	e9 d0 02 00 00       	jmp    c0103535 <__alltraps>
+
+c0103265 <vector196>:
+.globl vector196
+vector196:
+  pushl $0
+c0103265:	6a 00                	push   $0x0
+  pushl $196
+c0103267:	68 c4 00 00 00       	push   $0xc4
+  jmp __alltraps
+c010326c:	e9 c4 02 00 00       	jmp    c0103535 <__alltraps>
+
+c0103271 <vector197>:
+.globl vector197
+vector197:
+  pushl $0
+c0103271:	6a 00                	push   $0x0
+  pushl $197
+c0103273:	68 c5 00 00 00       	push   $0xc5
+  jmp __alltraps
+c0103278:	e9 b8 02 00 00       	jmp    c0103535 <__alltraps>
+
+c010327d <vector198>:
+.globl vector198
+vector198:
+  pushl $0
+c010327d:	6a 00                	push   $0x0
+  pushl $198
+c010327f:	68 c6 00 00 00       	push   $0xc6
+  jmp __alltraps
+c0103284:	e9 ac 02 00 00       	jmp    c0103535 <__alltraps>
+
+c0103289 <vector199>:
+.globl vector199
+vector199:
+  pushl $0
+c0103289:	6a 00                	push   $0x0
+  pushl $199
+c010328b:	68 c7 00 00 00       	push   $0xc7
+  jmp __alltraps
+c0103290:	e9 a0 02 00 00       	jmp    c0103535 <__alltraps>
+
+c0103295 <vector200>:
+.globl vector200
+vector200:
+  pushl $0
+c0103295:	6a 00                	push   $0x0
+  pushl $200
+c0103297:	68 c8 00 00 00       	push   $0xc8
+  jmp __alltraps
+c010329c:	e9 94 02 00 00       	jmp    c0103535 <__alltraps>
+
+c01032a1 <vector201>:
+.globl vector201
+vector201:
+  pushl $0
+c01032a1:	6a 00                	push   $0x0
+  pushl $201
+c01032a3:	68 c9 00 00 00       	push   $0xc9
+  jmp __alltraps
+c01032a8:	e9 88 02 00 00       	jmp    c0103535 <__alltraps>
+
+c01032ad <vector202>:
+.globl vector202
+vector202:
+  pushl $0
+c01032ad:	6a 00                	push   $0x0
+  pushl $202
+c01032af:	68 ca 00 00 00       	push   $0xca
+  jmp __alltraps
+c01032b4:	e9 7c 02 00 00       	jmp    c0103535 <__alltraps>
+
+c01032b9 <vector203>:
+.globl vector203
+vector203:
+  pushl $0
+c01032b9:	6a 00                	push   $0x0
+  pushl $203
+c01032bb:	68 cb 00 00 00       	push   $0xcb
+  jmp __alltraps
+c01032c0:	e9 70 02 00 00       	jmp    c0103535 <__alltraps>
+
+c01032c5 <vector204>:
+.globl vector204
+vector204:
+  pushl $0
+c01032c5:	6a 00                	push   $0x0
+  pushl $204
+c01032c7:	68 cc 00 00 00       	push   $0xcc
+  jmp __alltraps
+c01032cc:	e9 64 02 00 00       	jmp    c0103535 <__alltraps>
+
+c01032d1 <vector205>:
+.globl vector205
+vector205:
+  pushl $0
+c01032d1:	6a 00                	push   $0x0
+  pushl $205
+c01032d3:	68 cd 00 00 00       	push   $0xcd
+  jmp __alltraps
+c01032d8:	e9 58 02 00 00       	jmp    c0103535 <__alltraps>
+
+c01032dd <vector206>:
+.globl vector206
+vector206:
+  pushl $0
+c01032dd:	6a 00                	push   $0x0
+  pushl $206
+c01032df:	68 ce 00 00 00       	push   $0xce
+  jmp __alltraps
+c01032e4:	e9 4c 02 00 00       	jmp    c0103535 <__alltraps>
+
+c01032e9 <vector207>:
+.globl vector207
+vector207:
+  pushl $0
+c01032e9:	6a 00                	push   $0x0
+  pushl $207
+c01032eb:	68 cf 00 00 00       	push   $0xcf
+  jmp __alltraps
+c01032f0:	e9 40 02 00 00       	jmp    c0103535 <__alltraps>
+
+c01032f5 <vector208>:
+.globl vector208
+vector208:
+  pushl $0
+c01032f5:	6a 00                	push   $0x0
+  pushl $208
+c01032f7:	68 d0 00 00 00       	push   $0xd0
+  jmp __alltraps
+c01032fc:	e9 34 02 00 00       	jmp    c0103535 <__alltraps>
+
+c0103301 <vector209>:
+.globl vector209
+vector209:
+  pushl $0
+c0103301:	6a 00                	push   $0x0
+  pushl $209
+c0103303:	68 d1 00 00 00       	push   $0xd1
+  jmp __alltraps
+c0103308:	e9 28 02 00 00       	jmp    c0103535 <__alltraps>
+
+c010330d <vector210>:
+.globl vector210
+vector210:
+  pushl $0
+c010330d:	6a 00                	push   $0x0
+  pushl $210
+c010330f:	68 d2 00 00 00       	push   $0xd2
+  jmp __alltraps
+c0103314:	e9 1c 02 00 00       	jmp    c0103535 <__alltraps>
+
+c0103319 <vector211>:
+.globl vector211
+vector211:
+  pushl $0
+c0103319:	6a 00                	push   $0x0
+  pushl $211
+c010331b:	68 d3 00 00 00       	push   $0xd3
+  jmp __alltraps
+c0103320:	e9 10 02 00 00       	jmp    c0103535 <__alltraps>
+
+c0103325 <vector212>:
+.globl vector212
+vector212:
+  pushl $0
+c0103325:	6a 00                	push   $0x0
+  pushl $212
+c0103327:	68 d4 00 00 00       	push   $0xd4
+  jmp __alltraps
+c010332c:	e9 04 02 00 00       	jmp    c0103535 <__alltraps>
+
+c0103331 <vector213>:
+.globl vector213
+vector213:
+  pushl $0
+c0103331:	6a 00                	push   $0x0
+  pushl $213
+c0103333:	68 d5 00 00 00       	push   $0xd5
+  jmp __alltraps
+c0103338:	e9 f8 01 00 00       	jmp    c0103535 <__alltraps>
+
+c010333d <vector214>:
+.globl vector214
+vector214:
+  pushl $0
+c010333d:	6a 00                	push   $0x0
+  pushl $214
+c010333f:	68 d6 00 00 00       	push   $0xd6
+  jmp __alltraps
+c0103344:	e9 ec 01 00 00       	jmp    c0103535 <__alltraps>
+
+c0103349 <vector215>:
+.globl vector215
+vector215:
+  pushl $0
+c0103349:	6a 00                	push   $0x0
+  pushl $215
+c010334b:	68 d7 00 00 00       	push   $0xd7
+  jmp __alltraps
+c0103350:	e9 e0 01 00 00       	jmp    c0103535 <__alltraps>
+
+c0103355 <vector216>:
+.globl vector216
+vector216:
+  pushl $0
+c0103355:	6a 00                	push   $0x0
+  pushl $216
+c0103357:	68 d8 00 00 00       	push   $0xd8
+  jmp __alltraps
+c010335c:	e9 d4 01 00 00       	jmp    c0103535 <__alltraps>
+
+c0103361 <vector217>:
+.globl vector217
+vector217:
+  pushl $0
+c0103361:	6a 00                	push   $0x0
+  pushl $217
+c0103363:	68 d9 00 00 00       	push   $0xd9
+  jmp __alltraps
+c0103368:	e9 c8 01 00 00       	jmp    c0103535 <__alltraps>
+
+c010336d <vector218>:
+.globl vector218
+vector218:
+  pushl $0
+c010336d:	6a 00                	push   $0x0
+  pushl $218
+c010336f:	68 da 00 00 00       	push   $0xda
+  jmp __alltraps
+c0103374:	e9 bc 01 00 00       	jmp    c0103535 <__alltraps>
+
+c0103379 <vector219>:
+.globl vector219
+vector219:
+  pushl $0
+c0103379:	6a 00                	push   $0x0
+  pushl $219
+c010337b:	68 db 00 00 00       	push   $0xdb
+  jmp __alltraps
+c0103380:	e9 b0 01 00 00       	jmp    c0103535 <__alltraps>
+
+c0103385 <vector220>:
+.globl vector220
+vector220:
+  pushl $0
+c0103385:	6a 00                	push   $0x0
+  pushl $220
+c0103387:	68 dc 00 00 00       	push   $0xdc
+  jmp __alltraps
+c010338c:	e9 a4 01 00 00       	jmp    c0103535 <__alltraps>
+
+c0103391 <vector221>:
+.globl vector221
+vector221:
+  pushl $0
+c0103391:	6a 00                	push   $0x0
+  pushl $221
+c0103393:	68 dd 00 00 00       	push   $0xdd
+  jmp __alltraps
+c0103398:	e9 98 01 00 00       	jmp    c0103535 <__alltraps>
+
+c010339d <vector222>:
+.globl vector222
+vector222:
+  pushl $0
+c010339d:	6a 00                	push   $0x0
+  pushl $222
+c010339f:	68 de 00 00 00       	push   $0xde
+  jmp __alltraps
+c01033a4:	e9 8c 01 00 00       	jmp    c0103535 <__alltraps>
+
+c01033a9 <vector223>:
+.globl vector223
+vector223:
+  pushl $0
+c01033a9:	6a 00                	push   $0x0
+  pushl $223
+c01033ab:	68 df 00 00 00       	push   $0xdf
+  jmp __alltraps
+c01033b0:	e9 80 01 00 00       	jmp    c0103535 <__alltraps>
+
+c01033b5 <vector224>:
+.globl vector224
+vector224:
+  pushl $0
+c01033b5:	6a 00                	push   $0x0
+  pushl $224
+c01033b7:	68 e0 00 00 00       	push   $0xe0
+  jmp __alltraps
+c01033bc:	e9 74 01 00 00       	jmp    c0103535 <__alltraps>
+
+c01033c1 <vector225>:
+.globl vector225
+vector225:
+  pushl $0
+c01033c1:	6a 00                	push   $0x0
+  pushl $225
+c01033c3:	68 e1 00 00 00       	push   $0xe1
+  jmp __alltraps
+c01033c8:	e9 68 01 00 00       	jmp    c0103535 <__alltraps>
+
+c01033cd <vector226>:
+.globl vector226
+vector226:
+  pushl $0
+c01033cd:	6a 00                	push   $0x0
+  pushl $226
+c01033cf:	68 e2 00 00 00       	push   $0xe2
+  jmp __alltraps
+c01033d4:	e9 5c 01 00 00       	jmp    c0103535 <__alltraps>
+
+c01033d9 <vector227>:
+.globl vector227
+vector227:
+  pushl $0
+c01033d9:	6a 00                	push   $0x0
+  pushl $227
+c01033db:	68 e3 00 00 00       	push   $0xe3
+  jmp __alltraps
+c01033e0:	e9 50 01 00 00       	jmp    c0103535 <__alltraps>
+
+c01033e5 <vector228>:
+.globl vector228
+vector228:
+  pushl $0
+c01033e5:	6a 00                	push   $0x0
+  pushl $228
+c01033e7:	68 e4 00 00 00       	push   $0xe4
+  jmp __alltraps
+c01033ec:	e9 44 01 00 00       	jmp    c0103535 <__alltraps>
+
+c01033f1 <vector229>:
+.globl vector229
+vector229:
+  pushl $0
+c01033f1:	6a 00                	push   $0x0
+  pushl $229
+c01033f3:	68 e5 00 00 00       	push   $0xe5
+  jmp __alltraps
+c01033f8:	e9 38 01 00 00       	jmp    c0103535 <__alltraps>
+
+c01033fd <vector230>:
+.globl vector230
+vector230:
+  pushl $0
+c01033fd:	6a 00                	push   $0x0
+  pushl $230
+c01033ff:	68 e6 00 00 00       	push   $0xe6
+  jmp __alltraps
+c0103404:	e9 2c 01 00 00       	jmp    c0103535 <__alltraps>
+
+c0103409 <vector231>:
+.globl vector231
+vector231:
+  pushl $0
+c0103409:	6a 00                	push   $0x0
+  pushl $231
+c010340b:	68 e7 00 00 00       	push   $0xe7
+  jmp __alltraps
+c0103410:	e9 20 01 00 00       	jmp    c0103535 <__alltraps>
+
+c0103415 <vector232>:
+.globl vector232
+vector232:
+  pushl $0
+c0103415:	6a 00                	push   $0x0
+  pushl $232
+c0103417:	68 e8 00 00 00       	push   $0xe8
+  jmp __alltraps
+c010341c:	e9 14 01 00 00       	jmp    c0103535 <__alltraps>
+
+c0103421 <vector233>:
+.globl vector233
+vector233:
+  pushl $0
+c0103421:	6a 00                	push   $0x0
+  pushl $233
+c0103423:	68 e9 00 00 00       	push   $0xe9
+  jmp __alltraps
+c0103428:	e9 08 01 00 00       	jmp    c0103535 <__alltraps>
+
+c010342d <vector234>:
+.globl vector234
+vector234:
+  pushl $0
+c010342d:	6a 00                	push   $0x0
+  pushl $234
+c010342f:	68 ea 00 00 00       	push   $0xea
+  jmp __alltraps
+c0103434:	e9 fc 00 00 00       	jmp    c0103535 <__alltraps>
+
+c0103439 <vector235>:
+.globl vector235
+vector235:
+  pushl $0
+c0103439:	6a 00                	push   $0x0
+  pushl $235
+c010343b:	68 eb 00 00 00       	push   $0xeb
+  jmp __alltraps
+c0103440:	e9 f0 00 00 00       	jmp    c0103535 <__alltraps>
+
+c0103445 <vector236>:
+.globl vector236
+vector236:
+  pushl $0
+c0103445:	6a 00                	push   $0x0
+  pushl $236
+c0103447:	68 ec 00 00 00       	push   $0xec
+  jmp __alltraps
+c010344c:	e9 e4 00 00 00       	jmp    c0103535 <__alltraps>
+
+c0103451 <vector237>:
+.globl vector237
+vector237:
+  pushl $0
+c0103451:	6a 00                	push   $0x0
+  pushl $237
+c0103453:	68 ed 00 00 00       	push   $0xed
+  jmp __alltraps
+c0103458:	e9 d8 00 00 00       	jmp    c0103535 <__alltraps>
+
+c010345d <vector238>:
+.globl vector238
+vector238:
+  pushl $0
+c010345d:	6a 00                	push   $0x0
+  pushl $238
+c010345f:	68 ee 00 00 00       	push   $0xee
+  jmp __alltraps
+c0103464:	e9 cc 00 00 00       	jmp    c0103535 <__alltraps>
+
+c0103469 <vector239>:
+.globl vector239
+vector239:
+  pushl $0
+c0103469:	6a 00                	push   $0x0
+  pushl $239
+c010346b:	68 ef 00 00 00       	push   $0xef
+  jmp __alltraps
+c0103470:	e9 c0 00 00 00       	jmp    c0103535 <__alltraps>
+
+c0103475 <vector240>:
+.globl vector240
+vector240:
+  pushl $0
+c0103475:	6a 00                	push   $0x0
+  pushl $240
+c0103477:	68 f0 00 00 00       	push   $0xf0
+  jmp __alltraps
+c010347c:	e9 b4 00 00 00       	jmp    c0103535 <__alltraps>
+
+c0103481 <vector241>:
+.globl vector241
+vector241:
+  pushl $0
+c0103481:	6a 00                	push   $0x0
+  pushl $241
+c0103483:	68 f1 00 00 00       	push   $0xf1
+  jmp __alltraps
+c0103488:	e9 a8 00 00 00       	jmp    c0103535 <__alltraps>
+
+c010348d <vector242>:
+.globl vector242
+vector242:
+  pushl $0
+c010348d:	6a 00                	push   $0x0
+  pushl $242
+c010348f:	68 f2 00 00 00       	push   $0xf2
+  jmp __alltraps
+c0103494:	e9 9c 00 00 00       	jmp    c0103535 <__alltraps>
+
+c0103499 <vector243>:
+.globl vector243
+vector243:
+  pushl $0
+c0103499:	6a 00                	push   $0x0
+  pushl $243
+c010349b:	68 f3 00 00 00       	push   $0xf3
+  jmp __alltraps
+c01034a0:	e9 90 00 00 00       	jmp    c0103535 <__alltraps>
+
+c01034a5 <vector244>:
+.globl vector244
+vector244:
+  pushl $0
+c01034a5:	6a 00                	push   $0x0
+  pushl $244
+c01034a7:	68 f4 00 00 00       	push   $0xf4
+  jmp __alltraps
+c01034ac:	e9 84 00 00 00       	jmp    c0103535 <__alltraps>
+
+c01034b1 <vector245>:
+.globl vector245
+vector245:
+  pushl $0
+c01034b1:	6a 00                	push   $0x0
+  pushl $245
+c01034b3:	68 f5 00 00 00       	push   $0xf5
+  jmp __alltraps
+c01034b8:	e9 78 00 00 00       	jmp    c0103535 <__alltraps>
+
+c01034bd <vector246>:
+.globl vector246
+vector246:
+  pushl $0
+c01034bd:	6a 00                	push   $0x0
+  pushl $246
+c01034bf:	68 f6 00 00 00       	push   $0xf6
+  jmp __alltraps
+c01034c4:	e9 6c 00 00 00       	jmp    c0103535 <__alltraps>
+
+c01034c9 <vector247>:
+.globl vector247
+vector247:
+  pushl $0
+c01034c9:	6a 00                	push   $0x0
+  pushl $247
+c01034cb:	68 f7 00 00 00       	push   $0xf7
+  jmp __alltraps
+c01034d0:	e9 60 00 00 00       	jmp    c0103535 <__alltraps>
+
+c01034d5 <vector248>:
+.globl vector248
+vector248:
+  pushl $0
+c01034d5:	6a 00                	push   $0x0
+  pushl $248
+c01034d7:	68 f8 00 00 00       	push   $0xf8
+  jmp __alltraps
+c01034dc:	e9 54 00 00 00       	jmp    c0103535 <__alltraps>
+
+c01034e1 <vector249>:
+.globl vector249
+vector249:
+  pushl $0
+c01034e1:	6a 00                	push   $0x0
+  pushl $249
+c01034e3:	68 f9 00 00 00       	push   $0xf9
+  jmp __alltraps
+c01034e8:	e9 48 00 00 00       	jmp    c0103535 <__alltraps>
+
+c01034ed <vector250>:
+.globl vector250
+vector250:
+  pushl $0
+c01034ed:	6a 00                	push   $0x0
+  pushl $250
+c01034ef:	68 fa 00 00 00       	push   $0xfa
+  jmp __alltraps
+c01034f4:	e9 3c 00 00 00       	jmp    c0103535 <__alltraps>
+
+c01034f9 <vector251>:
+.globl vector251
+vector251:
+  pushl $0
+c01034f9:	6a 00                	push   $0x0
+  pushl $251
+c01034fb:	68 fb 00 00 00       	push   $0xfb
+  jmp __alltraps
+c0103500:	e9 30 00 00 00       	jmp    c0103535 <__alltraps>
+
+c0103505 <vector252>:
+.globl vector252
+vector252:
+  pushl $0
+c0103505:	6a 00                	push   $0x0
+  pushl $252
+c0103507:	68 fc 00 00 00       	push   $0xfc
+  jmp __alltraps
+c010350c:	e9 24 00 00 00       	jmp    c0103535 <__alltraps>
+
+c0103511 <vector253>:
+.globl vector253
+vector253:
+  pushl $0
+c0103511:	6a 00                	push   $0x0
+  pushl $253
+c0103513:	68 fd 00 00 00       	push   $0xfd
+  jmp __alltraps
+c0103518:	e9 18 00 00 00       	jmp    c0103535 <__alltraps>
+
+c010351d <vector254>:
+.globl vector254
+vector254:
+  pushl $0
+c010351d:	6a 00                	push   $0x0
+  pushl $254
+c010351f:	68 fe 00 00 00       	push   $0xfe
+  jmp __alltraps
+c0103524:	e9 0c 00 00 00       	jmp    c0103535 <__alltraps>
+
+c0103529 <vector255>:
+.globl vector255
+vector255:
+  pushl $0
+c0103529:	6a 00                	push   $0x0
+  pushl $255
+c010352b:	68 ff 00 00 00       	push   $0xff
+  jmp __alltraps
+c0103530:	e9 00 00 00 00       	jmp    c0103535 <__alltraps>
+
+c0103535 <__alltraps>:
+.text
+.globl __alltraps
+__alltraps:
+    # push registers to build a trap frame
+    # therefore make the stack look like a struct trapframe
+    pushl %ds
+c0103535:	1e                   	push   %ds
+    pushl %es
+c0103536:	06                   	push   %es
+    pushl %fs
+c0103537:	0f a0                	push   %fs
+    pushl %gs
+c0103539:	0f a8                	push   %gs
+    pushal
+c010353b:	60                   	pusha  
+
+    # load GD_KDATA into %ds and %es to set up data segments for kernel
+    movl $GD_KDATA, %eax
+c010353c:	b8 10 00 00 00       	mov    $0x10,%eax
+    movw %ax, %ds
+c0103541:	8e d8                	mov    %eax,%ds
+    movw %ax, %es
+c0103543:	8e c0                	mov    %eax,%es
+
+    # push %esp to pass a pointer to the trapframe as an argument to trap()
+    pushl %esp
+c0103545:	54                   	push   %esp
+
+    # call trap(tf), where tf=%esp
+    call trap
+c0103546:	e8 e5 f4 ff ff       	call   c0102a30 <trap>
+
+    # pop the pushed stack pointer
+    popl %esp
+c010354b:	5c                   	pop    %esp
+
+c010354c <__trapret>:
+
+    # return falls through to trapret...
+.globl __trapret
+__trapret:
+    # restore registers from stack
+    popal
+c010354c:	61                   	popa   
+
+    # restore %ds, %es, %fs and %gs
+    popl %gs
+c010354d:	0f a9                	pop    %gs
+    popl %fs
+c010354f:	0f a1                	pop    %fs
+    popl %es
+c0103551:	07                   	pop    %es
+    popl %ds
+c0103552:	1f                   	pop    %ds
+
+    # get rid of the trap number and error code
+    addl $0x8, %esp
+c0103553:	83 c4 08             	add    $0x8,%esp
+    iret
+c0103556:	cf                   	iret   
+
+c0103557 <forkrets>:
+
+.globl forkrets
+forkrets:
+    # set stack to this new process's trapframe
+    movl 4(%esp), %esp
+c0103557:	8b 64 24 04          	mov    0x4(%esp),%esp
+    jmp __trapret
+c010355b:	e9 ec ff ff ff       	jmp    c010354c <__trapret>
+
+c0103560 <page2ppn>:
+
+extern struct Page *pages;
+extern size_t npage;
+
+static inline ppn_t
+page2ppn(struct Page *page) {
+c0103560:	55                   	push   %ebp
+c0103561:	89 e5                	mov    %esp,%ebp
+    return page - pages;
+c0103563:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103566:	8b 15 64 0d 1b c0    	mov    0xc01b0d64,%edx
+c010356c:	29 d0                	sub    %edx,%eax
+c010356e:	c1 f8 05             	sar    $0x5,%eax
+}
+c0103571:	5d                   	pop    %ebp
+c0103572:	c3                   	ret    
+
+c0103573 <page2pa>:
+
+static inline uintptr_t
+page2pa(struct Page *page) {
+c0103573:	55                   	push   %ebp
+c0103574:	89 e5                	mov    %esp,%ebp
+    return page2ppn(page) << PGSHIFT;
+c0103576:	ff 75 08             	pushl  0x8(%ebp)
+c0103579:	e8 e2 ff ff ff       	call   c0103560 <page2ppn>
+c010357e:	83 c4 04             	add    $0x4,%esp
+c0103581:	c1 e0 0c             	shl    $0xc,%eax
+}
+c0103584:	c9                   	leave  
+c0103585:	c3                   	ret    
+
+c0103586 <pa2page>:
+
+static inline struct Page *
+pa2page(uintptr_t pa) {
+c0103586:	55                   	push   %ebp
+c0103587:	89 e5                	mov    %esp,%ebp
+c0103589:	83 ec 08             	sub    $0x8,%esp
+    if (PPN(pa) >= npage) {
+c010358c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010358f:	c1 e8 0c             	shr    $0xc,%eax
+c0103592:	89 c2                	mov    %eax,%edx
+c0103594:	a1 60 ec 1a c0       	mov    0xc01aec60,%eax
+c0103599:	39 c2                	cmp    %eax,%edx
+c010359b:	72 14                	jb     c01035b1 <pa2page+0x2b>
+        panic("pa2page called with invalid pa");
+c010359d:	83 ec 04             	sub    $0x4,%esp
+c01035a0:	68 30 c2 10 c0       	push   $0xc010c230
+c01035a5:	6a 5e                	push   $0x5e
+c01035a7:	68 4f c2 10 c0       	push   $0xc010c24f
+c01035ac:	e8 43 ce ff ff       	call   c01003f4 <__panic>
+    }
+    return &pages[PPN(pa)];
+c01035b1:	a1 64 0d 1b c0       	mov    0xc01b0d64,%eax
+c01035b6:	8b 55 08             	mov    0x8(%ebp),%edx
+c01035b9:	c1 ea 0c             	shr    $0xc,%edx
+c01035bc:	c1 e2 05             	shl    $0x5,%edx
+c01035bf:	01 d0                	add    %edx,%eax
+}
+c01035c1:	c9                   	leave  
+c01035c2:	c3                   	ret    
+
+c01035c3 <page2kva>:
+
+static inline void *
+page2kva(struct Page *page) {
+c01035c3:	55                   	push   %ebp
+c01035c4:	89 e5                	mov    %esp,%ebp
+c01035c6:	83 ec 18             	sub    $0x18,%esp
+    return KADDR(page2pa(page));
+c01035c9:	ff 75 08             	pushl  0x8(%ebp)
+c01035cc:	e8 a2 ff ff ff       	call   c0103573 <page2pa>
+c01035d1:	83 c4 04             	add    $0x4,%esp
+c01035d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01035d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01035da:	c1 e8 0c             	shr    $0xc,%eax
+c01035dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01035e0:	a1 60 ec 1a c0       	mov    0xc01aec60,%eax
+c01035e5:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c01035e8:	72 14                	jb     c01035fe <page2kva+0x3b>
+c01035ea:	ff 75 f4             	pushl  -0xc(%ebp)
+c01035ed:	68 60 c2 10 c0       	push   $0xc010c260
+c01035f2:	6a 65                	push   $0x65
+c01035f4:	68 4f c2 10 c0       	push   $0xc010c24f
+c01035f9:	e8 f6 cd ff ff       	call   c01003f4 <__panic>
+c01035fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103601:	2d 00 00 00 40       	sub    $0x40000000,%eax
+}
+c0103606:	c9                   	leave  
+c0103607:	c3                   	ret    
+
+c0103608 <pte2page>:
+kva2page(void *kva) {
+    return pa2page(PADDR(kva));
+}
+
+static inline struct Page *
+pte2page(pte_t pte) {
+c0103608:	55                   	push   %ebp
+c0103609:	89 e5                	mov    %esp,%ebp
+c010360b:	83 ec 08             	sub    $0x8,%esp
+    if (!(pte & PTE_P)) {
+c010360e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103611:	83 e0 01             	and    $0x1,%eax
+c0103614:	85 c0                	test   %eax,%eax
+c0103616:	75 14                	jne    c010362c <pte2page+0x24>
+        panic("pte2page called with invalid pte");
+c0103618:	83 ec 04             	sub    $0x4,%esp
+c010361b:	68 84 c2 10 c0       	push   $0xc010c284
+c0103620:	6a 70                	push   $0x70
+c0103622:	68 4f c2 10 c0       	push   $0xc010c24f
+c0103627:	e8 c8 cd ff ff       	call   c01003f4 <__panic>
+    }
+    return pa2page(PTE_ADDR(pte));
+c010362c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010362f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0103634:	83 ec 0c             	sub    $0xc,%esp
+c0103637:	50                   	push   %eax
+c0103638:	e8 49 ff ff ff       	call   c0103586 <pa2page>
+c010363d:	83 c4 10             	add    $0x10,%esp
+}
+c0103640:	c9                   	leave  
+c0103641:	c3                   	ret    
+
+c0103642 <pde2page>:
+
+static inline struct Page *
+pde2page(pde_t pde) {
+c0103642:	55                   	push   %ebp
+c0103643:	89 e5                	mov    %esp,%ebp
+c0103645:	83 ec 08             	sub    $0x8,%esp
+    return pa2page(PDE_ADDR(pde));
+c0103648:	8b 45 08             	mov    0x8(%ebp),%eax
+c010364b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0103650:	83 ec 0c             	sub    $0xc,%esp
+c0103653:	50                   	push   %eax
+c0103654:	e8 2d ff ff ff       	call   c0103586 <pa2page>
+c0103659:	83 c4 10             	add    $0x10,%esp
+}
+c010365c:	c9                   	leave  
+c010365d:	c3                   	ret    
+
+c010365e <page_ref>:
+
+static inline int
+page_ref(struct Page *page) {
+c010365e:	55                   	push   %ebp
+c010365f:	89 e5                	mov    %esp,%ebp
+    return page->ref;
+c0103661:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103664:	8b 00                	mov    (%eax),%eax
+}
+c0103666:	5d                   	pop    %ebp
+c0103667:	c3                   	ret    
+
+c0103668 <set_page_ref>:
+
+static inline void
+set_page_ref(struct Page *page, int val) {
+c0103668:	55                   	push   %ebp
+c0103669:	89 e5                	mov    %esp,%ebp
+    page->ref = val;
+c010366b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010366e:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0103671:	89 10                	mov    %edx,(%eax)
+}
+c0103673:	90                   	nop
+c0103674:	5d                   	pop    %ebp
+c0103675:	c3                   	ret    
+
+c0103676 <page_ref_inc>:
+
+static inline int
+page_ref_inc(struct Page *page) {
+c0103676:	55                   	push   %ebp
+c0103677:	89 e5                	mov    %esp,%ebp
+    page->ref += 1;
+c0103679:	8b 45 08             	mov    0x8(%ebp),%eax
+c010367c:	8b 00                	mov    (%eax),%eax
+c010367e:	8d 50 01             	lea    0x1(%eax),%edx
+c0103681:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103684:	89 10                	mov    %edx,(%eax)
+    return page->ref;
+c0103686:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103689:	8b 00                	mov    (%eax),%eax
+}
+c010368b:	5d                   	pop    %ebp
+c010368c:	c3                   	ret    
+
+c010368d <page_ref_dec>:
+
+static inline int
+page_ref_dec(struct Page *page) {
+c010368d:	55                   	push   %ebp
+c010368e:	89 e5                	mov    %esp,%ebp
+    page->ref -= 1;
+c0103690:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103693:	8b 00                	mov    (%eax),%eax
+c0103695:	8d 50 ff             	lea    -0x1(%eax),%edx
+c0103698:	8b 45 08             	mov    0x8(%ebp),%eax
+c010369b:	89 10                	mov    %edx,(%eax)
+    return page->ref;
+c010369d:	8b 45 08             	mov    0x8(%ebp),%eax
+c01036a0:	8b 00                	mov    (%eax),%eax
+}
+c01036a2:	5d                   	pop    %ebp
+c01036a3:	c3                   	ret    
+
+c01036a4 <__intr_save>:
+#include <assert.h>
+#include <atomic.h>
+#include <sched.h>
+
+static inline bool
+__intr_save(void) {
+c01036a4:	55                   	push   %ebp
+c01036a5:	89 e5                	mov    %esp,%ebp
+c01036a7:	83 ec 18             	sub    $0x18,%esp
+}
+
+static inline uint32_t
+read_eflags(void) {
+    uint32_t eflags;
+    asm volatile ("pushfl; popl %0" : "=r" (eflags));
+c01036aa:	9c                   	pushf  
+c01036ab:	58                   	pop    %eax
+c01036ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return eflags;
+c01036af:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    if (read_eflags() & FL_IF) {
+c01036b2:	25 00 02 00 00       	and    $0x200,%eax
+c01036b7:	85 c0                	test   %eax,%eax
+c01036b9:	74 0c                	je     c01036c7 <__intr_save+0x23>
+        intr_disable();
+c01036bb:	e8 d1 ea ff ff       	call   c0102191 <intr_disable>
+        return 1;
+c01036c0:	b8 01 00 00 00       	mov    $0x1,%eax
+c01036c5:	eb 05                	jmp    c01036cc <__intr_save+0x28>
+    }
+    return 0;
+c01036c7:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01036cc:	c9                   	leave  
+c01036cd:	c3                   	ret    
+
+c01036ce <__intr_restore>:
+
+static inline void
+__intr_restore(bool flag) {
+c01036ce:	55                   	push   %ebp
+c01036cf:	89 e5                	mov    %esp,%ebp
+c01036d1:	83 ec 08             	sub    $0x8,%esp
+    if (flag) {
+c01036d4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c01036d8:	74 05                	je     c01036df <__intr_restore+0x11>
+        intr_enable();
+c01036da:	e8 ab ea ff ff       	call   c010218a <intr_enable>
+    }
+}
+c01036df:	90                   	nop
+c01036e0:	c9                   	leave  
+c01036e1:	c3                   	ret    
+
+c01036e2 <lgdt>:
+/* *
+ * lgdt - load the global descriptor table register and reset the
+ * data/code segement registers for kernel.
+ * */
+static inline void
+lgdt(struct pseudodesc *pd) {
+c01036e2:	55                   	push   %ebp
+c01036e3:	89 e5                	mov    %esp,%ebp
+    asm volatile ("lgdt (%0)" :: "r" (pd));
+c01036e5:	8b 45 08             	mov    0x8(%ebp),%eax
+c01036e8:	0f 01 10             	lgdtl  (%eax)
+    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
+c01036eb:	b8 23 00 00 00       	mov    $0x23,%eax
+c01036f0:	8e e8                	mov    %eax,%gs
+    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
+c01036f2:	b8 23 00 00 00       	mov    $0x23,%eax
+c01036f7:	8e e0                	mov    %eax,%fs
+    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
+c01036f9:	b8 10 00 00 00       	mov    $0x10,%eax
+c01036fe:	8e c0                	mov    %eax,%es
+    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
+c0103700:	b8 10 00 00 00       	mov    $0x10,%eax
+c0103705:	8e d8                	mov    %eax,%ds
+    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
+c0103707:	b8 10 00 00 00       	mov    $0x10,%eax
+c010370c:	8e d0                	mov    %eax,%ss
+    // reload cs
+    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
+c010370e:	ea 15 37 10 c0 08 00 	ljmp   $0x8,$0xc0103715
+}
+c0103715:	90                   	nop
+c0103716:	5d                   	pop    %ebp
+c0103717:	c3                   	ret    
+
+c0103718 <load_esp0>:
+ * load_esp0 - change the ESP0 in default task state segment,
+ * so that we can use different kernel stack when we trap frame
+ * user to kernel.
+ * */
+void
+load_esp0(uintptr_t esp0) {
+c0103718:	55                   	push   %ebp
+c0103719:	89 e5                	mov    %esp,%ebp
+    ts.ts_esp0 = esp0;
+c010371b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010371e:	a3 84 ec 1a c0       	mov    %eax,0xc01aec84
+}
+c0103723:	90                   	nop
+c0103724:	5d                   	pop    %ebp
+c0103725:	c3                   	ret    
+
+c0103726 <gdt_init>:
+
+/* gdt_init - initialize the default GDT and TSS */
+static void
+gdt_init(void) {
+c0103726:	55                   	push   %ebp
+c0103727:	89 e5                	mov    %esp,%ebp
+c0103729:	83 ec 10             	sub    $0x10,%esp
+    // set boot kernel stack and default SS0
+    load_esp0((uintptr_t)bootstacktop);
+c010372c:	b8 00 c0 12 c0       	mov    $0xc012c000,%eax
+c0103731:	50                   	push   %eax
+c0103732:	e8 e1 ff ff ff       	call   c0103718 <load_esp0>
+c0103737:	83 c4 04             	add    $0x4,%esp
+    ts.ts_ss0 = KERNEL_DS;
+c010373a:	66 c7 05 88 ec 1a c0 	movw   $0x10,0xc01aec88
+c0103741:	10 00 
+
+    // initialize the TSS filed of the gdt
+    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
+c0103743:	66 c7 05 28 ca 12 c0 	movw   $0x68,0xc012ca28
+c010374a:	68 00 
+c010374c:	b8 80 ec 1a c0       	mov    $0xc01aec80,%eax
+c0103751:	66 a3 2a ca 12 c0    	mov    %ax,0xc012ca2a
+c0103757:	b8 80 ec 1a c0       	mov    $0xc01aec80,%eax
+c010375c:	c1 e8 10             	shr    $0x10,%eax
+c010375f:	a2 2c ca 12 c0       	mov    %al,0xc012ca2c
+c0103764:	0f b6 05 2d ca 12 c0 	movzbl 0xc012ca2d,%eax
+c010376b:	83 e0 f0             	and    $0xfffffff0,%eax
+c010376e:	83 c8 09             	or     $0x9,%eax
+c0103771:	a2 2d ca 12 c0       	mov    %al,0xc012ca2d
+c0103776:	0f b6 05 2d ca 12 c0 	movzbl 0xc012ca2d,%eax
+c010377d:	83 e0 ef             	and    $0xffffffef,%eax
+c0103780:	a2 2d ca 12 c0       	mov    %al,0xc012ca2d
+c0103785:	0f b6 05 2d ca 12 c0 	movzbl 0xc012ca2d,%eax
+c010378c:	83 e0 9f             	and    $0xffffff9f,%eax
+c010378f:	a2 2d ca 12 c0       	mov    %al,0xc012ca2d
+c0103794:	0f b6 05 2d ca 12 c0 	movzbl 0xc012ca2d,%eax
+c010379b:	83 c8 80             	or     $0xffffff80,%eax
+c010379e:	a2 2d ca 12 c0       	mov    %al,0xc012ca2d
+c01037a3:	0f b6 05 2e ca 12 c0 	movzbl 0xc012ca2e,%eax
+c01037aa:	83 e0 f0             	and    $0xfffffff0,%eax
+c01037ad:	a2 2e ca 12 c0       	mov    %al,0xc012ca2e
+c01037b2:	0f b6 05 2e ca 12 c0 	movzbl 0xc012ca2e,%eax
+c01037b9:	83 e0 ef             	and    $0xffffffef,%eax
+c01037bc:	a2 2e ca 12 c0       	mov    %al,0xc012ca2e
+c01037c1:	0f b6 05 2e ca 12 c0 	movzbl 0xc012ca2e,%eax
+c01037c8:	83 e0 df             	and    $0xffffffdf,%eax
+c01037cb:	a2 2e ca 12 c0       	mov    %al,0xc012ca2e
+c01037d0:	0f b6 05 2e ca 12 c0 	movzbl 0xc012ca2e,%eax
+c01037d7:	83 c8 40             	or     $0x40,%eax
+c01037da:	a2 2e ca 12 c0       	mov    %al,0xc012ca2e
+c01037df:	0f b6 05 2e ca 12 c0 	movzbl 0xc012ca2e,%eax
+c01037e6:	83 e0 7f             	and    $0x7f,%eax
+c01037e9:	a2 2e ca 12 c0       	mov    %al,0xc012ca2e
+c01037ee:	b8 80 ec 1a c0       	mov    $0xc01aec80,%eax
+c01037f3:	c1 e8 18             	shr    $0x18,%eax
+c01037f6:	a2 2f ca 12 c0       	mov    %al,0xc012ca2f
+
+    // reload all segment registers
+    lgdt(&gdt_pd);
+c01037fb:	68 30 ca 12 c0       	push   $0xc012ca30
+c0103800:	e8 dd fe ff ff       	call   c01036e2 <lgdt>
+c0103805:	83 c4 04             	add    $0x4,%esp
+c0103808:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
+    asm volatile ("cli" ::: "memory");
+}
+
+static inline void
+ltr(uint16_t sel) {
+    asm volatile ("ltr %0" :: "r" (sel) : "memory");
+c010380e:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
+c0103812:	0f 00 d8             	ltr    %ax
+
+    // load the TSS
+    ltr(GD_TSS);
+}
+c0103815:	90                   	nop
+c0103816:	c9                   	leave  
+c0103817:	c3                   	ret    
+
+c0103818 <init_pmm_manager>:
+
+//init_pmm_manager - initialize a pmm_manager instance
+static void
+init_pmm_manager(void) {
+c0103818:	55                   	push   %ebp
+c0103819:	89 e5                	mov    %esp,%ebp
+c010381b:	83 ec 08             	sub    $0x8,%esp
+    pmm_manager = &default_pmm_manager;
+c010381e:	c7 05 5c 0d 1b c0 08 	movl   $0xc010d808,0xc01b0d5c
+c0103825:	d8 10 c0 
+    cprintf("memory management: %s\n", pmm_manager->name);
+c0103828:	a1 5c 0d 1b c0       	mov    0xc01b0d5c,%eax
+c010382d:	8b 00                	mov    (%eax),%eax
+c010382f:	83 ec 08             	sub    $0x8,%esp
+c0103832:	50                   	push   %eax
+c0103833:	68 b0 c2 10 c0       	push   $0xc010c2b0
+c0103838:	e8 51 ca ff ff       	call   c010028e <cprintf>
+c010383d:	83 c4 10             	add    $0x10,%esp
+    pmm_manager->init();
+c0103840:	a1 5c 0d 1b c0       	mov    0xc01b0d5c,%eax
+c0103845:	8b 40 04             	mov    0x4(%eax),%eax
+c0103848:	ff d0                	call   *%eax
+}
+c010384a:	90                   	nop
+c010384b:	c9                   	leave  
+c010384c:	c3                   	ret    
+
+c010384d <init_memmap>:
+
+//init_memmap - call pmm->init_memmap to build Page struct for free memory  
+static void
+init_memmap(struct Page *base, size_t n) {
+c010384d:	55                   	push   %ebp
+c010384e:	89 e5                	mov    %esp,%ebp
+c0103850:	83 ec 08             	sub    $0x8,%esp
+    pmm_manager->init_memmap(base, n);
+c0103853:	a1 5c 0d 1b c0       	mov    0xc01b0d5c,%eax
+c0103858:	8b 40 08             	mov    0x8(%eax),%eax
+c010385b:	83 ec 08             	sub    $0x8,%esp
+c010385e:	ff 75 0c             	pushl  0xc(%ebp)
+c0103861:	ff 75 08             	pushl  0x8(%ebp)
+c0103864:	ff d0                	call   *%eax
+c0103866:	83 c4 10             	add    $0x10,%esp
+}
+c0103869:	90                   	nop
+c010386a:	c9                   	leave  
+c010386b:	c3                   	ret    
+
+c010386c <alloc_pages>:
+
+//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
+struct Page *
+alloc_pages(size_t n) {
+c010386c:	55                   	push   %ebp
+c010386d:	89 e5                	mov    %esp,%ebp
+c010386f:	83 ec 18             	sub    $0x18,%esp
+    struct Page *page=NULL;
+c0103872:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    bool intr_flag;
+    
+    while (1)
+    {
+         local_intr_save(intr_flag);
+c0103879:	e8 26 fe ff ff       	call   c01036a4 <__intr_save>
+c010387e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+         {
+              page = pmm_manager->alloc_pages(n);
+c0103881:	a1 5c 0d 1b c0       	mov    0xc01b0d5c,%eax
+c0103886:	8b 40 0c             	mov    0xc(%eax),%eax
+c0103889:	83 ec 0c             	sub    $0xc,%esp
+c010388c:	ff 75 08             	pushl  0x8(%ebp)
+c010388f:	ff d0                	call   *%eax
+c0103891:	83 c4 10             	add    $0x10,%esp
+c0103894:	89 45 f4             	mov    %eax,-0xc(%ebp)
+         }
+         local_intr_restore(intr_flag);
+c0103897:	83 ec 0c             	sub    $0xc,%esp
+c010389a:	ff 75 f0             	pushl  -0x10(%ebp)
+c010389d:	e8 2c fe ff ff       	call   c01036ce <__intr_restore>
+c01038a2:	83 c4 10             	add    $0x10,%esp
+
+         if (page != NULL || n > 1 || swap_init_ok == 0) break;
+c01038a5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01038a9:	75 28                	jne    c01038d3 <alloc_pages+0x67>
+c01038ab:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
+c01038af:	77 22                	ja     c01038d3 <alloc_pages+0x67>
+c01038b1:	a1 f4 ec 1a c0       	mov    0xc01aecf4,%eax
+c01038b6:	85 c0                	test   %eax,%eax
+c01038b8:	74 19                	je     c01038d3 <alloc_pages+0x67>
+         
+         extern struct mm_struct *check_mm_struct;
+         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
+         swap_out(check_mm_struct, n, 0);
+c01038ba:	8b 55 08             	mov    0x8(%ebp),%edx
+c01038bd:	a1 70 0d 1b c0       	mov    0xc01b0d70,%eax
+c01038c2:	83 ec 04             	sub    $0x4,%esp
+c01038c5:	6a 00                	push   $0x0
+c01038c7:	52                   	push   %edx
+c01038c8:	50                   	push   %eax
+c01038c9:	e8 99 36 00 00       	call   c0106f67 <swap_out>
+c01038ce:	83 c4 10             	add    $0x10,%esp
+    }
+c01038d1:	eb a6                	jmp    c0103879 <alloc_pages+0xd>
+    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
+    return page;
+c01038d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c01038d6:	c9                   	leave  
+c01038d7:	c3                   	ret    
+
+c01038d8 <free_pages>:
+
+//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
+void
+free_pages(struct Page *base, size_t n) {
+c01038d8:	55                   	push   %ebp
+c01038d9:	89 e5                	mov    %esp,%ebp
+c01038db:	83 ec 18             	sub    $0x18,%esp
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c01038de:	e8 c1 fd ff ff       	call   c01036a4 <__intr_save>
+c01038e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    {
+        pmm_manager->free_pages(base, n);
+c01038e6:	a1 5c 0d 1b c0       	mov    0xc01b0d5c,%eax
+c01038eb:	8b 40 10             	mov    0x10(%eax),%eax
+c01038ee:	83 ec 08             	sub    $0x8,%esp
+c01038f1:	ff 75 0c             	pushl  0xc(%ebp)
+c01038f4:	ff 75 08             	pushl  0x8(%ebp)
+c01038f7:	ff d0                	call   *%eax
+c01038f9:	83 c4 10             	add    $0x10,%esp
+    }
+    local_intr_restore(intr_flag);
+c01038fc:	83 ec 0c             	sub    $0xc,%esp
+c01038ff:	ff 75 f4             	pushl  -0xc(%ebp)
+c0103902:	e8 c7 fd ff ff       	call   c01036ce <__intr_restore>
+c0103907:	83 c4 10             	add    $0x10,%esp
+}
+c010390a:	90                   	nop
+c010390b:	c9                   	leave  
+c010390c:	c3                   	ret    
+
+c010390d <nr_free_pages>:
+
+//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
+//of current free memory
+size_t
+nr_free_pages(void) {
+c010390d:	55                   	push   %ebp
+c010390e:	89 e5                	mov    %esp,%ebp
+c0103910:	83 ec 18             	sub    $0x18,%esp
+    size_t ret;
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c0103913:	e8 8c fd ff ff       	call   c01036a4 <__intr_save>
+c0103918:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    {
+        ret = pmm_manager->nr_free_pages();
+c010391b:	a1 5c 0d 1b c0       	mov    0xc01b0d5c,%eax
+c0103920:	8b 40 14             	mov    0x14(%eax),%eax
+c0103923:	ff d0                	call   *%eax
+c0103925:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    }
+    local_intr_restore(intr_flag);
+c0103928:	83 ec 0c             	sub    $0xc,%esp
+c010392b:	ff 75 f4             	pushl  -0xc(%ebp)
+c010392e:	e8 9b fd ff ff       	call   c01036ce <__intr_restore>
+c0103933:	83 c4 10             	add    $0x10,%esp
+    return ret;
+c0103936:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+c0103939:	c9                   	leave  
+c010393a:	c3                   	ret    
+
+c010393b <page_init>:
+
+/* pmm_init - initialize the physical memory management */
+static void
+page_init(void) {
+c010393b:	55                   	push   %ebp
+c010393c:	89 e5                	mov    %esp,%ebp
+c010393e:	57                   	push   %edi
+c010393f:	56                   	push   %esi
+c0103940:	53                   	push   %ebx
+c0103941:	83 ec 7c             	sub    $0x7c,%esp
+    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
+c0103944:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
+    uint64_t maxpa = 0;
+c010394b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+c0103952:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+
+    cprintf("e820map:\n");
+c0103959:	83 ec 0c             	sub    $0xc,%esp
+c010395c:	68 c7 c2 10 c0       	push   $0xc010c2c7
+c0103961:	e8 28 c9 ff ff       	call   c010028e <cprintf>
+c0103966:	83 c4 10             	add    $0x10,%esp
+    int i;
+    for (i = 0; i < memmap->nr_map; i ++) {
+c0103969:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+c0103970:	e9 fc 00 00 00       	jmp    c0103a71 <page_init+0x136>
+        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
+c0103975:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c0103978:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c010397b:	89 d0                	mov    %edx,%eax
+c010397d:	c1 e0 02             	shl    $0x2,%eax
+c0103980:	01 d0                	add    %edx,%eax
+c0103982:	c1 e0 02             	shl    $0x2,%eax
+c0103985:	01 c8                	add    %ecx,%eax
+c0103987:	8b 50 08             	mov    0x8(%eax),%edx
+c010398a:	8b 40 04             	mov    0x4(%eax),%eax
+c010398d:	89 45 b8             	mov    %eax,-0x48(%ebp)
+c0103990:	89 55 bc             	mov    %edx,-0x44(%ebp)
+c0103993:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c0103996:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0103999:	89 d0                	mov    %edx,%eax
+c010399b:	c1 e0 02             	shl    $0x2,%eax
+c010399e:	01 d0                	add    %edx,%eax
+c01039a0:	c1 e0 02             	shl    $0x2,%eax
+c01039a3:	01 c8                	add    %ecx,%eax
+c01039a5:	8b 48 0c             	mov    0xc(%eax),%ecx
+c01039a8:	8b 58 10             	mov    0x10(%eax),%ebx
+c01039ab:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c01039ae:	8b 55 bc             	mov    -0x44(%ebp),%edx
+c01039b1:	01 c8                	add    %ecx,%eax
+c01039b3:	11 da                	adc    %ebx,%edx
+c01039b5:	89 45 b0             	mov    %eax,-0x50(%ebp)
+c01039b8:	89 55 b4             	mov    %edx,-0x4c(%ebp)
+        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
+c01039bb:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c01039be:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c01039c1:	89 d0                	mov    %edx,%eax
+c01039c3:	c1 e0 02             	shl    $0x2,%eax
+c01039c6:	01 d0                	add    %edx,%eax
+c01039c8:	c1 e0 02             	shl    $0x2,%eax
+c01039cb:	01 c8                	add    %ecx,%eax
+c01039cd:	83 c0 14             	add    $0x14,%eax
+c01039d0:	8b 00                	mov    (%eax),%eax
+c01039d2:	89 45 84             	mov    %eax,-0x7c(%ebp)
+c01039d5:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c01039d8:	8b 55 b4             	mov    -0x4c(%ebp),%edx
+c01039db:	83 c0 ff             	add    $0xffffffff,%eax
+c01039de:	83 d2 ff             	adc    $0xffffffff,%edx
+c01039e1:	89 c1                	mov    %eax,%ecx
+c01039e3:	89 d3                	mov    %edx,%ebx
+c01039e5:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+c01039e8:	89 55 80             	mov    %edx,-0x80(%ebp)
+c01039eb:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c01039ee:	89 d0                	mov    %edx,%eax
+c01039f0:	c1 e0 02             	shl    $0x2,%eax
+c01039f3:	01 d0                	add    %edx,%eax
+c01039f5:	c1 e0 02             	shl    $0x2,%eax
+c01039f8:	03 45 80             	add    -0x80(%ebp),%eax
+c01039fb:	8b 50 10             	mov    0x10(%eax),%edx
+c01039fe:	8b 40 0c             	mov    0xc(%eax),%eax
+c0103a01:	ff 75 84             	pushl  -0x7c(%ebp)
+c0103a04:	53                   	push   %ebx
+c0103a05:	51                   	push   %ecx
+c0103a06:	ff 75 bc             	pushl  -0x44(%ebp)
+c0103a09:	ff 75 b8             	pushl  -0x48(%ebp)
+c0103a0c:	52                   	push   %edx
+c0103a0d:	50                   	push   %eax
+c0103a0e:	68 d4 c2 10 c0       	push   $0xc010c2d4
+c0103a13:	e8 76 c8 ff ff       	call   c010028e <cprintf>
+c0103a18:	83 c4 20             	add    $0x20,%esp
+                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
+        if (memmap->map[i].type == E820_ARM) {
+c0103a1b:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c0103a1e:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0103a21:	89 d0                	mov    %edx,%eax
+c0103a23:	c1 e0 02             	shl    $0x2,%eax
+c0103a26:	01 d0                	add    %edx,%eax
+c0103a28:	c1 e0 02             	shl    $0x2,%eax
+c0103a2b:	01 c8                	add    %ecx,%eax
+c0103a2d:	83 c0 14             	add    $0x14,%eax
+c0103a30:	8b 00                	mov    (%eax),%eax
+c0103a32:	83 f8 01             	cmp    $0x1,%eax
+c0103a35:	75 36                	jne    c0103a6d <page_init+0x132>
+            if (maxpa < end && begin < KMEMSIZE) {
+c0103a37:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0103a3a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0103a3d:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
+c0103a40:	77 2b                	ja     c0103a6d <page_init+0x132>
+c0103a42:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
+c0103a45:	72 05                	jb     c0103a4c <page_init+0x111>
+c0103a47:	3b 45 b0             	cmp    -0x50(%ebp),%eax
+c0103a4a:	73 21                	jae    c0103a6d <page_init+0x132>
+c0103a4c:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
+c0103a50:	77 1b                	ja     c0103a6d <page_init+0x132>
+c0103a52:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
+c0103a56:	72 09                	jb     c0103a61 <page_init+0x126>
+c0103a58:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
+c0103a5f:	77 0c                	ja     c0103a6d <page_init+0x132>
+                maxpa = end;
+c0103a61:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c0103a64:	8b 55 b4             	mov    -0x4c(%ebp),%edx
+c0103a67:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c0103a6a:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
+    uint64_t maxpa = 0;
+
+    cprintf("e820map:\n");
+    int i;
+    for (i = 0; i < memmap->nr_map; i ++) {
+c0103a6d:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
+c0103a71:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c0103a74:	8b 00                	mov    (%eax),%eax
+c0103a76:	3b 45 dc             	cmp    -0x24(%ebp),%eax
+c0103a79:	0f 8f f6 fe ff ff    	jg     c0103975 <page_init+0x3a>
+            if (maxpa < end && begin < KMEMSIZE) {
+                maxpa = end;
+            }
+        }
+    }
+    if (maxpa > KMEMSIZE) {
+c0103a7f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c0103a83:	72 1d                	jb     c0103aa2 <page_init+0x167>
+c0103a85:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c0103a89:	77 09                	ja     c0103a94 <page_init+0x159>
+c0103a8b:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
+c0103a92:	76 0e                	jbe    c0103aa2 <page_init+0x167>
+        maxpa = KMEMSIZE;
+c0103a94:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
+c0103a9b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+    }
+
+    extern char end[];
+
+    npage = maxpa / PGSIZE;
+c0103aa2:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0103aa5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0103aa8:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+c0103aac:	c1 ea 0c             	shr    $0xc,%edx
+c0103aaf:	a3 60 ec 1a c0       	mov    %eax,0xc01aec60
+    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
+c0103ab4:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
+c0103abb:	b8 58 0e 1b c0       	mov    $0xc01b0e58,%eax
+c0103ac0:	8d 50 ff             	lea    -0x1(%eax),%edx
+c0103ac3:	8b 45 ac             	mov    -0x54(%ebp),%eax
+c0103ac6:	01 d0                	add    %edx,%eax
+c0103ac8:	89 45 a8             	mov    %eax,-0x58(%ebp)
+c0103acb:	8b 45 a8             	mov    -0x58(%ebp),%eax
+c0103ace:	ba 00 00 00 00       	mov    $0x0,%edx
+c0103ad3:	f7 75 ac             	divl   -0x54(%ebp)
+c0103ad6:	8b 45 a8             	mov    -0x58(%ebp),%eax
+c0103ad9:	29 d0                	sub    %edx,%eax
+c0103adb:	a3 64 0d 1b c0       	mov    %eax,0xc01b0d64
+
+    for (i = 0; i < npage; i ++) {
+c0103ae0:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+c0103ae7:	eb 27                	jmp    c0103b10 <page_init+0x1d5>
+        SetPageReserved(pages + i);
+c0103ae9:	a1 64 0d 1b c0       	mov    0xc01b0d64,%eax
+c0103aee:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0103af1:	c1 e2 05             	shl    $0x5,%edx
+c0103af4:	01 d0                	add    %edx,%eax
+c0103af6:	83 c0 04             	add    $0x4,%eax
+c0103af9:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
+c0103b00:	89 45 8c             	mov    %eax,-0x74(%ebp)
+ * Note that @nr may be almost arbitrarily large; this function is not
+ * restricted to acting on a single-word quantity.
+ * */
+static inline void
+set_bit(int nr, volatile void *addr) {
+    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
+c0103b03:	8b 45 8c             	mov    -0x74(%ebp),%eax
+c0103b06:	8b 55 90             	mov    -0x70(%ebp),%edx
+c0103b09:	0f ab 10             	bts    %edx,(%eax)
+    extern char end[];
+
+    npage = maxpa / PGSIZE;
+    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
+
+    for (i = 0; i < npage; i ++) {
+c0103b0c:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
+c0103b10:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0103b13:	a1 60 ec 1a c0       	mov    0xc01aec60,%eax
+c0103b18:	39 c2                	cmp    %eax,%edx
+c0103b1a:	72 cd                	jb     c0103ae9 <page_init+0x1ae>
+        SetPageReserved(pages + i);
+    }
+    //point the start address of available memory(note: physical address!)
+    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
+c0103b1c:	a1 60 ec 1a c0       	mov    0xc01aec60,%eax
+c0103b21:	c1 e0 05             	shl    $0x5,%eax
+c0103b24:	89 c2                	mov    %eax,%edx
+c0103b26:	a1 64 0d 1b c0       	mov    0xc01b0d64,%eax
+c0103b2b:	01 d0                	add    %edx,%eax
+c0103b2d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
+c0103b30:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
+c0103b37:	77 17                	ja     c0103b50 <page_init+0x215>
+c0103b39:	ff 75 a4             	pushl  -0x5c(%ebp)
+c0103b3c:	68 04 c3 10 c0       	push   $0xc010c304
+c0103b41:	68 e9 00 00 00       	push   $0xe9
+c0103b46:	68 28 c3 10 c0       	push   $0xc010c328
+c0103b4b:	e8 a4 c8 ff ff       	call   c01003f4 <__panic>
+c0103b50:	8b 45 a4             	mov    -0x5c(%ebp),%eax
+c0103b53:	05 00 00 00 40       	add    $0x40000000,%eax
+c0103b58:	89 45 a0             	mov    %eax,-0x60(%ebp)
+    //collect all the free memory(aligned with pages)
+    for (i = 0; i < memmap->nr_map; i ++) {
+c0103b5b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+c0103b62:	e9 69 01 00 00       	jmp    c0103cd0 <page_init+0x395>
+        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
+c0103b67:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c0103b6a:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0103b6d:	89 d0                	mov    %edx,%eax
+c0103b6f:	c1 e0 02             	shl    $0x2,%eax
+c0103b72:	01 d0                	add    %edx,%eax
+c0103b74:	c1 e0 02             	shl    $0x2,%eax
+c0103b77:	01 c8                	add    %ecx,%eax
+c0103b79:	8b 50 08             	mov    0x8(%eax),%edx
+c0103b7c:	8b 40 04             	mov    0x4(%eax),%eax
+c0103b7f:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c0103b82:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+c0103b85:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c0103b88:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0103b8b:	89 d0                	mov    %edx,%eax
+c0103b8d:	c1 e0 02             	shl    $0x2,%eax
+c0103b90:	01 d0                	add    %edx,%eax
+c0103b92:	c1 e0 02             	shl    $0x2,%eax
+c0103b95:	01 c8                	add    %ecx,%eax
+c0103b97:	8b 48 0c             	mov    0xc(%eax),%ecx
+c0103b9a:	8b 58 10             	mov    0x10(%eax),%ebx
+c0103b9d:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0103ba0:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0103ba3:	01 c8                	add    %ecx,%eax
+c0103ba5:	11 da                	adc    %ebx,%edx
+c0103ba7:	89 45 c8             	mov    %eax,-0x38(%ebp)
+c0103baa:	89 55 cc             	mov    %edx,-0x34(%ebp)
+        if (memmap->map[i].type == E820_ARM) {
+c0103bad:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c0103bb0:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0103bb3:	89 d0                	mov    %edx,%eax
+c0103bb5:	c1 e0 02             	shl    $0x2,%eax
+c0103bb8:	01 d0                	add    %edx,%eax
+c0103bba:	c1 e0 02             	shl    $0x2,%eax
+c0103bbd:	01 c8                	add    %ecx,%eax
+c0103bbf:	83 c0 14             	add    $0x14,%eax
+c0103bc2:	8b 00                	mov    (%eax),%eax
+c0103bc4:	83 f8 01             	cmp    $0x1,%eax
+c0103bc7:	0f 85 ff 00 00 00    	jne    c0103ccc <page_init+0x391>
+            if (begin < freemem) {
+c0103bcd:	8b 45 a0             	mov    -0x60(%ebp),%eax
+c0103bd0:	ba 00 00 00 00       	mov    $0x0,%edx
+c0103bd5:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+c0103bd8:	72 17                	jb     c0103bf1 <page_init+0x2b6>
+c0103bda:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+c0103bdd:	77 05                	ja     c0103be4 <page_init+0x2a9>
+c0103bdf:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+c0103be2:	76 0d                	jbe    c0103bf1 <page_init+0x2b6>
+                begin = freemem;
+c0103be4:	8b 45 a0             	mov    -0x60(%ebp),%eax
+c0103be7:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c0103bea:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
+            }
+            if (end > KMEMSIZE) {
+c0103bf1:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
+c0103bf5:	72 1d                	jb     c0103c14 <page_init+0x2d9>
+c0103bf7:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
+c0103bfb:	77 09                	ja     c0103c06 <page_init+0x2cb>
+c0103bfd:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
+c0103c04:	76 0e                	jbe    c0103c14 <page_init+0x2d9>
+                end = KMEMSIZE;
+c0103c06:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
+c0103c0d:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
+            }
+            if (begin < end) {
+c0103c14:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0103c17:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0103c1a:	3b 55 cc             	cmp    -0x34(%ebp),%edx
+c0103c1d:	0f 87 a9 00 00 00    	ja     c0103ccc <page_init+0x391>
+c0103c23:	3b 55 cc             	cmp    -0x34(%ebp),%edx
+c0103c26:	72 09                	jb     c0103c31 <page_init+0x2f6>
+c0103c28:	3b 45 c8             	cmp    -0x38(%ebp),%eax
+c0103c2b:	0f 83 9b 00 00 00    	jae    c0103ccc <page_init+0x391>
+                begin = ROUNDUP(begin, PGSIZE);
+c0103c31:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
+c0103c38:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c0103c3b:	8b 45 9c             	mov    -0x64(%ebp),%eax
+c0103c3e:	01 d0                	add    %edx,%eax
+c0103c40:	83 e8 01             	sub    $0x1,%eax
+c0103c43:	89 45 98             	mov    %eax,-0x68(%ebp)
+c0103c46:	8b 45 98             	mov    -0x68(%ebp),%eax
+c0103c49:	ba 00 00 00 00       	mov    $0x0,%edx
+c0103c4e:	f7 75 9c             	divl   -0x64(%ebp)
+c0103c51:	8b 45 98             	mov    -0x68(%ebp),%eax
+c0103c54:	29 d0                	sub    %edx,%eax
+c0103c56:	ba 00 00 00 00       	mov    $0x0,%edx
+c0103c5b:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c0103c5e:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+                end = ROUNDDOWN(end, PGSIZE);
+c0103c61:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0103c64:	89 45 94             	mov    %eax,-0x6c(%ebp)
+c0103c67:	8b 45 94             	mov    -0x6c(%ebp),%eax
+c0103c6a:	ba 00 00 00 00       	mov    $0x0,%edx
+c0103c6f:	89 c3                	mov    %eax,%ebx
+c0103c71:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+c0103c77:	89 de                	mov    %ebx,%esi
+c0103c79:	89 d0                	mov    %edx,%eax
+c0103c7b:	83 e0 00             	and    $0x0,%eax
+c0103c7e:	89 c7                	mov    %eax,%edi
+c0103c80:	89 75 c8             	mov    %esi,-0x38(%ebp)
+c0103c83:	89 7d cc             	mov    %edi,-0x34(%ebp)
+                if (begin < end) {
+c0103c86:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0103c89:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0103c8c:	3b 55 cc             	cmp    -0x34(%ebp),%edx
+c0103c8f:	77 3b                	ja     c0103ccc <page_init+0x391>
+c0103c91:	3b 55 cc             	cmp    -0x34(%ebp),%edx
+c0103c94:	72 05                	jb     c0103c9b <page_init+0x360>
+c0103c96:	3b 45 c8             	cmp    -0x38(%ebp),%eax
+c0103c99:	73 31                	jae    c0103ccc <page_init+0x391>
+                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
+c0103c9b:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0103c9e:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c0103ca1:	2b 45 d0             	sub    -0x30(%ebp),%eax
+c0103ca4:	1b 55 d4             	sbb    -0x2c(%ebp),%edx
+c0103ca7:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+c0103cab:	c1 ea 0c             	shr    $0xc,%edx
+c0103cae:	89 c3                	mov    %eax,%ebx
+c0103cb0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0103cb3:	83 ec 0c             	sub    $0xc,%esp
+c0103cb6:	50                   	push   %eax
+c0103cb7:	e8 ca f8 ff ff       	call   c0103586 <pa2page>
+c0103cbc:	83 c4 10             	add    $0x10,%esp
+c0103cbf:	83 ec 08             	sub    $0x8,%esp
+c0103cc2:	53                   	push   %ebx
+c0103cc3:	50                   	push   %eax
+c0103cc4:	e8 84 fb ff ff       	call   c010384d <init_memmap>
+c0103cc9:	83 c4 10             	add    $0x10,%esp
+        SetPageReserved(pages + i);
+    }
+    //point the start address of available memory(note: physical address!)
+    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
+    //collect all the free memory(aligned with pages)
+    for (i = 0; i < memmap->nr_map; i ++) {
+c0103ccc:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
+c0103cd0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c0103cd3:	8b 00                	mov    (%eax),%eax
+c0103cd5:	3b 45 dc             	cmp    -0x24(%ebp),%eax
+c0103cd8:	0f 8f 89 fe ff ff    	jg     c0103b67 <page_init+0x22c>
+                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
+                }
+            }
+        }
+    }
+}
+c0103cde:	90                   	nop
+c0103cdf:	8d 65 f4             	lea    -0xc(%ebp),%esp
+c0103ce2:	5b                   	pop    %ebx
+c0103ce3:	5e                   	pop    %esi
+c0103ce4:	5f                   	pop    %edi
+c0103ce5:	5d                   	pop    %ebp
+c0103ce6:	c3                   	ret    
+
+c0103ce7 <enable_paging>:
+
+static void
+enable_paging(void) {
+c0103ce7:	55                   	push   %ebp
+c0103ce8:	89 e5                	mov    %esp,%ebp
+c0103cea:	83 ec 10             	sub    $0x10,%esp
+    lcr3(boot_cr3);
+c0103ced:	a1 60 0d 1b c0       	mov    0xc01b0d60,%eax
+c0103cf2:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
+}
+
+static inline void
+lcr3(uintptr_t cr3) {
+    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
+c0103cf5:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0103cf8:	0f 22 d8             	mov    %eax,%cr3
+}
+
+static inline uintptr_t
+rcr0(void) {
+    uintptr_t cr0;
+    asm volatile ("mov %%cr0, %0" : "=r" (cr0) :: "memory");
+c0103cfb:	0f 20 c0             	mov    %cr0,%eax
+c0103cfe:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return cr0;
+c0103d01:	8b 45 f4             	mov    -0xc(%ebp),%eax
+
+    // turn on paging
+    uint32_t cr0 = rcr0();
+c0103d04:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    cr0 |= CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP;
+c0103d07:	81 4d f8 2f 00 05 80 	orl    $0x8005002f,-0x8(%ebp)
+    cr0 &= ~(CR0_TS | CR0_EM);
+c0103d0e:	83 65 f8 f3          	andl   $0xfffffff3,-0x8(%ebp)
+c0103d12:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c0103d15:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    asm volatile ("pushl %0; popfl" :: "r" (eflags));
+}
+
+static inline void
+lcr0(uintptr_t cr0) {
+    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
+c0103d18:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103d1b:	0f 22 c0             	mov    %eax,%cr0
+    lcr0(cr0);
+}
+c0103d1e:	90                   	nop
+c0103d1f:	c9                   	leave  
+c0103d20:	c3                   	ret    
+
+c0103d21 <boot_map_segment>:
+//  la:   linear address of this memory need to map (after x86 segment map)
+//  size: memory size
+//  pa:   physical address of this memory
+//  perm: permission of this memory  
+static void
+boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
+c0103d21:	55                   	push   %ebp
+c0103d22:	89 e5                	mov    %esp,%ebp
+c0103d24:	83 ec 28             	sub    $0x28,%esp
+    assert(PGOFF(la) == PGOFF(pa));
+c0103d27:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0103d2a:	33 45 14             	xor    0x14(%ebp),%eax
+c0103d2d:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0103d32:	85 c0                	test   %eax,%eax
+c0103d34:	74 19                	je     c0103d4f <boot_map_segment+0x2e>
+c0103d36:	68 36 c3 10 c0       	push   $0xc010c336
+c0103d3b:	68 4d c3 10 c0       	push   $0xc010c34d
+c0103d40:	68 12 01 00 00       	push   $0x112
+c0103d45:	68 28 c3 10 c0       	push   $0xc010c328
+c0103d4a:	e8 a5 c6 ff ff       	call   c01003f4 <__panic>
+    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
+c0103d4f:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
+c0103d56:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0103d59:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0103d5e:	89 c2                	mov    %eax,%edx
+c0103d60:	8b 45 10             	mov    0x10(%ebp),%eax
+c0103d63:	01 c2                	add    %eax,%edx
+c0103d65:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103d68:	01 d0                	add    %edx,%eax
+c0103d6a:	83 e8 01             	sub    $0x1,%eax
+c0103d6d:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0103d70:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0103d73:	ba 00 00 00 00       	mov    $0x0,%edx
+c0103d78:	f7 75 f0             	divl   -0x10(%ebp)
+c0103d7b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0103d7e:	29 d0                	sub    %edx,%eax
+c0103d80:	c1 e8 0c             	shr    $0xc,%eax
+c0103d83:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    la = ROUNDDOWN(la, PGSIZE);
+c0103d86:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0103d89:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0103d8c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0103d8f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0103d94:	89 45 0c             	mov    %eax,0xc(%ebp)
+    pa = ROUNDDOWN(pa, PGSIZE);
+c0103d97:	8b 45 14             	mov    0x14(%ebp),%eax
+c0103d9a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0103d9d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0103da0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0103da5:	89 45 14             	mov    %eax,0x14(%ebp)
+    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
+c0103da8:	eb 57                	jmp    c0103e01 <boot_map_segment+0xe0>
+        pte_t *ptep = get_pte(pgdir, la, 1);
+c0103daa:	83 ec 04             	sub    $0x4,%esp
+c0103dad:	6a 01                	push   $0x1
+c0103daf:	ff 75 0c             	pushl  0xc(%ebp)
+c0103db2:	ff 75 08             	pushl  0x8(%ebp)
+c0103db5:	e8 9d 01 00 00       	call   c0103f57 <get_pte>
+c0103dba:	83 c4 10             	add    $0x10,%esp
+c0103dbd:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        assert(ptep != NULL);
+c0103dc0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+c0103dc4:	75 19                	jne    c0103ddf <boot_map_segment+0xbe>
+c0103dc6:	68 62 c3 10 c0       	push   $0xc010c362
+c0103dcb:	68 4d c3 10 c0       	push   $0xc010c34d
+c0103dd0:	68 18 01 00 00       	push   $0x118
+c0103dd5:	68 28 c3 10 c0       	push   $0xc010c328
+c0103dda:	e8 15 c6 ff ff       	call   c01003f4 <__panic>
+        *ptep = pa | PTE_P | perm;
+c0103ddf:	8b 45 14             	mov    0x14(%ebp),%eax
+c0103de2:	0b 45 18             	or     0x18(%ebp),%eax
+c0103de5:	83 c8 01             	or     $0x1,%eax
+c0103de8:	89 c2                	mov    %eax,%edx
+c0103dea:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0103ded:	89 10                	mov    %edx,(%eax)
+boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
+    assert(PGOFF(la) == PGOFF(pa));
+    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
+    la = ROUNDDOWN(la, PGSIZE);
+    pa = ROUNDDOWN(pa, PGSIZE);
+    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
+c0103def:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+c0103df3:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
+c0103dfa:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
+c0103e01:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0103e05:	75 a3                	jne    c0103daa <boot_map_segment+0x89>
+        pte_t *ptep = get_pte(pgdir, la, 1);
+        assert(ptep != NULL);
+        *ptep = pa | PTE_P | perm;
+    }
+}
+c0103e07:	90                   	nop
+c0103e08:	c9                   	leave  
+c0103e09:	c3                   	ret    
+
+c0103e0a <boot_alloc_page>:
+
+//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
+// return value: the kernel virtual address of this allocated page
+//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
+static void *
+boot_alloc_page(void) {
+c0103e0a:	55                   	push   %ebp
+c0103e0b:	89 e5                	mov    %esp,%ebp
+c0103e0d:	83 ec 18             	sub    $0x18,%esp
+    struct Page *p = alloc_page();
+c0103e10:	83 ec 0c             	sub    $0xc,%esp
+c0103e13:	6a 01                	push   $0x1
+c0103e15:	e8 52 fa ff ff       	call   c010386c <alloc_pages>
+c0103e1a:	83 c4 10             	add    $0x10,%esp
+c0103e1d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (p == NULL) {
+c0103e20:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0103e24:	75 17                	jne    c0103e3d <boot_alloc_page+0x33>
+        panic("boot_alloc_page failed.\n");
+c0103e26:	83 ec 04             	sub    $0x4,%esp
+c0103e29:	68 6f c3 10 c0       	push   $0xc010c36f
+c0103e2e:	68 24 01 00 00       	push   $0x124
+c0103e33:	68 28 c3 10 c0       	push   $0xc010c328
+c0103e38:	e8 b7 c5 ff ff       	call   c01003f4 <__panic>
+    }
+    return page2kva(p);
+c0103e3d:	83 ec 0c             	sub    $0xc,%esp
+c0103e40:	ff 75 f4             	pushl  -0xc(%ebp)
+c0103e43:	e8 7b f7 ff ff       	call   c01035c3 <page2kva>
+c0103e48:	83 c4 10             	add    $0x10,%esp
+}
+c0103e4b:	c9                   	leave  
+c0103e4c:	c3                   	ret    
+
+c0103e4d <pmm_init>:
+
+//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
+//         - check the correctness of pmm & paging mechanism, print PDT&PT
+void
+pmm_init(void) {
+c0103e4d:	55                   	push   %ebp
+c0103e4e:	89 e5                	mov    %esp,%ebp
+c0103e50:	83 ec 18             	sub    $0x18,%esp
+    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
+    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
+    //First we should init a physical memory manager(pmm) based on the framework.
+    //Then pmm can alloc/free the physical memory. 
+    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
+    init_pmm_manager();
+c0103e53:	e8 c0 f9 ff ff       	call   c0103818 <init_pmm_manager>
+
+    // detect physical memory space, reserve already used memory,
+    // then use pmm->init_memmap to create free page list
+    page_init();
+c0103e58:	e8 de fa ff ff       	call   c010393b <page_init>
+
+    //use pmm->check to verify the correctness of the alloc/free function in a pmm
+    check_alloc_page();
+c0103e5d:	e8 71 08 00 00       	call   c01046d3 <check_alloc_page>
+
+    // create boot_pgdir, an initial page directory(Page Directory Table, PDT)
+    boot_pgdir = boot_alloc_page();
+c0103e62:	e8 a3 ff ff ff       	call   c0103e0a <boot_alloc_page>
+c0103e67:	a3 64 ec 1a c0       	mov    %eax,0xc01aec64
+    memset(boot_pgdir, 0, PGSIZE);
+c0103e6c:	a1 64 ec 1a c0       	mov    0xc01aec64,%eax
+c0103e71:	83 ec 04             	sub    $0x4,%esp
+c0103e74:	68 00 10 00 00       	push   $0x1000
+c0103e79:	6a 00                	push   $0x0
+c0103e7b:	50                   	push   %eax
+c0103e7c:	e8 e8 71 00 00       	call   c010b069 <memset>
+c0103e81:	83 c4 10             	add    $0x10,%esp
+    boot_cr3 = PADDR(boot_pgdir);
+c0103e84:	a1 64 ec 1a c0       	mov    0xc01aec64,%eax
+c0103e89:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0103e8c:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
+c0103e93:	77 17                	ja     c0103eac <pmm_init+0x5f>
+c0103e95:	ff 75 f4             	pushl  -0xc(%ebp)
+c0103e98:	68 04 c3 10 c0       	push   $0xc010c304
+c0103e9d:	68 3e 01 00 00       	push   $0x13e
+c0103ea2:	68 28 c3 10 c0       	push   $0xc010c328
+c0103ea7:	e8 48 c5 ff ff       	call   c01003f4 <__panic>
+c0103eac:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103eaf:	05 00 00 00 40       	add    $0x40000000,%eax
+c0103eb4:	a3 60 0d 1b c0       	mov    %eax,0xc01b0d60
+
+    check_pgdir();
+c0103eb9:	e8 38 08 00 00       	call   c01046f6 <check_pgdir>
+
+    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);
+
+    // recursively insert boot_pgdir in itself
+    // to form a virtual page table at virtual address VPT
+    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
+c0103ebe:	a1 64 ec 1a c0       	mov    0xc01aec64,%eax
+c0103ec3:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
+c0103ec9:	a1 64 ec 1a c0       	mov    0xc01aec64,%eax
+c0103ece:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0103ed1:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
+c0103ed8:	77 17                	ja     c0103ef1 <pmm_init+0xa4>
+c0103eda:	ff 75 f0             	pushl  -0x10(%ebp)
+c0103edd:	68 04 c3 10 c0       	push   $0xc010c304
+c0103ee2:	68 46 01 00 00       	push   $0x146
+c0103ee7:	68 28 c3 10 c0       	push   $0xc010c328
+c0103eec:	e8 03 c5 ff ff       	call   c01003f4 <__panic>
+c0103ef1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103ef4:	05 00 00 00 40       	add    $0x40000000,%eax
+c0103ef9:	83 c8 03             	or     $0x3,%eax
+c0103efc:	89 02                	mov    %eax,(%edx)
+
+    // map all physical memory to linear memory with base linear addr KERNBASE
+    //linear_addr KERNBASE~KERNBASE+KMEMSIZE = phy_addr 0~KMEMSIZE
+    //But shouldn't use this map until enable_paging() & gdt_init() finished.
+    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
+c0103efe:	a1 64 ec 1a c0       	mov    0xc01aec64,%eax
+c0103f03:	83 ec 0c             	sub    $0xc,%esp
+c0103f06:	6a 02                	push   $0x2
+c0103f08:	6a 00                	push   $0x0
+c0103f0a:	68 00 00 00 38       	push   $0x38000000
+c0103f0f:	68 00 00 00 c0       	push   $0xc0000000
+c0103f14:	50                   	push   %eax
+c0103f15:	e8 07 fe ff ff       	call   c0103d21 <boot_map_segment>
+c0103f1a:	83 c4 20             	add    $0x20,%esp
+
+    //temporary map: 
+    //virtual_addr 3G~3G+4M = linear_addr 0~4M = linear_addr 3G~3G+4M = phy_addr 0~4M     
+    boot_pgdir[0] = boot_pgdir[PDX(KERNBASE)];
+c0103f1d:	a1 64 ec 1a c0       	mov    0xc01aec64,%eax
+c0103f22:	8b 15 64 ec 1a c0    	mov    0xc01aec64,%edx
+c0103f28:	8b 92 00 0c 00 00    	mov    0xc00(%edx),%edx
+c0103f2e:	89 10                	mov    %edx,(%eax)
+
+    enable_paging();
+c0103f30:	e8 b2 fd ff ff       	call   c0103ce7 <enable_paging>
+
+    //reload gdt(third time,the last time) to map all physical memory
+    //virtual_addr 0~4G=liear_addr 0~4G
+    //then set kernel stack(ss:esp) in TSS, setup TSS in gdt, load TSS
+    gdt_init();
+c0103f35:	e8 ec f7 ff ff       	call   c0103726 <gdt_init>
+
+    //disable the map of virtual_addr 0~4M
+    boot_pgdir[0] = 0;
+c0103f3a:	a1 64 ec 1a c0       	mov    0xc01aec64,%eax
+c0103f3f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+
+    //now the basic virtual memory map(see memalyout.h) is established.
+    //check the correctness of the basic virtual memory map.
+    check_boot_pgdir();
+c0103f45:	e8 12 0d 00 00       	call   c0104c5c <check_boot_pgdir>
+
+    print_pgdir();
+c0103f4a:	e8 08 11 00 00       	call   c0105057 <print_pgdir>
+    
+    kmalloc_init();
+c0103f4f:	e8 dd 2b 00 00       	call   c0106b31 <kmalloc_init>
+
+}
+c0103f54:	90                   	nop
+c0103f55:	c9                   	leave  
+c0103f56:	c3                   	ret    
+
+c0103f57 <get_pte>:
+//  pgdir:  the kernel virtual base address of PDT
+//  la:     the linear address need to map
+//  create: a logical value to decide if alloc a page for PT
+// return vaule: the kernel virtual address of this pte
+pte_t *
+get_pte(pde_t *pgdir, uintptr_t la, bool create) {
+c0103f57:	55                   	push   %ebp
+c0103f58:	89 e5                	mov    %esp,%ebp
+c0103f5a:	83 ec 28             	sub    $0x28,%esp
+     *   PTE_P           0x001                   // page table/directory entry flags bit : Present
+     *   PTE_W           0x002                   // page table/directory entry flags bit : Writeable
+     *   PTE_U           0x004                   // page table/directory entry flags bit : User can access
+     */
+
+    pde_t *pdep = NULL;
+c0103f5d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    pdep = pgdir + PDX(la);// (1) find page directory entry
+c0103f64:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0103f67:	c1 e8 16             	shr    $0x16,%eax
+c0103f6a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0103f71:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103f74:	01 d0                	add    %edx,%eax
+c0103f76:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    bool isPresent = (*pdep) & PTE_P;// (2) check if entry is not present
+c0103f79:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103f7c:	8b 00                	mov    (%eax),%eax
+c0103f7e:	83 e0 01             	and    $0x1,%eax
+c0103f81:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if (!isPresent){
+c0103f84:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0103f88:	0f 85 92 00 00 00    	jne    c0104020 <get_pte+0xc9>
+    	if (!create) return NULL; // (3) check if creating is needed, then alloc page for page table
+c0103f8e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c0103f92:	75 0a                	jne    c0103f9e <get_pte+0x47>
+c0103f94:	b8 00 00 00 00       	mov    $0x0,%eax
+c0103f99:	e9 db 00 00 00       	jmp    c0104079 <get_pte+0x122>
+    	else{
+    		struct Page *pt_page = alloc_page();
+c0103f9e:	83 ec 0c             	sub    $0xc,%esp
+c0103fa1:	6a 01                	push   $0x1
+c0103fa3:	e8 c4 f8 ff ff       	call   c010386c <alloc_pages>
+c0103fa8:	83 c4 10             	add    $0x10,%esp
+c0103fab:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    		uintptr_t pt_p = page2pa(pt_page);
+c0103fae:	83 ec 0c             	sub    $0xc,%esp
+c0103fb1:	ff 75 ec             	pushl  -0x14(%ebp)
+c0103fb4:	e8 ba f5 ff ff       	call   c0103573 <page2pa>
+c0103fb9:	83 c4 10             	add    $0x10,%esp
+c0103fbc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    		pte_t *pt_k = page2kva(pt_page);// (5) get linear address of page
+c0103fbf:	83 ec 0c             	sub    $0xc,%esp
+c0103fc2:	ff 75 ec             	pushl  -0x14(%ebp)
+c0103fc5:	e8 f9 f5 ff ff       	call   c01035c3 <page2kva>
+c0103fca:	83 c4 10             	add    $0x10,%esp
+c0103fcd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    		set_page_ref(pt_page, 1); // (4) set page reference
+c0103fd0:	83 ec 08             	sub    $0x8,%esp
+c0103fd3:	6a 01                	push   $0x1
+c0103fd5:	ff 75 ec             	pushl  -0x14(%ebp)
+c0103fd8:	e8 8b f6 ff ff       	call   c0103668 <set_page_ref>
+c0103fdd:	83 c4 10             	add    $0x10,%esp
+    		memset(pt_k, 0, PGSIZE); // (6) clear page content using memset
+c0103fe0:	83 ec 04             	sub    $0x4,%esp
+c0103fe3:	68 00 10 00 00       	push   $0x1000
+c0103fe8:	6a 00                	push   $0x0
+c0103fea:	ff 75 e4             	pushl  -0x1c(%ebp)
+c0103fed:	e8 77 70 00 00       	call   c010b069 <memset>
+c0103ff2:	83 c4 10             	add    $0x10,%esp
+    		*pdep = (pt_p & ~0x0FFF) | PTE_U | PTE_W | PTE_P; // (7) set page directory entry's permission
+c0103ff5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0103ff8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0103ffd:	83 c8 07             	or     $0x7,%eax
+c0104000:	89 c2                	mov    %eax,%edx
+c0104002:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104005:	89 10                	mov    %edx,(%eax)
+    		return pt_k + PTX(la); // (8) return page table entry
+c0104007:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010400a:	c1 e8 0c             	shr    $0xc,%eax
+c010400d:	25 ff 03 00 00       	and    $0x3ff,%eax
+c0104012:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0104019:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010401c:	01 d0                	add    %edx,%eax
+c010401e:	eb 59                	jmp    c0104079 <get_pte+0x122>
+    	}
+    }else{// CAUTION: this page is used for page table, not for common data page
+    	pte_t *pt_p = (pte_t *)((*pdep) & ~0x0FFF);
+c0104020:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104023:	8b 00                	mov    (%eax),%eax
+c0104025:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c010402a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    	return KADDR((uintptr_t)(pt_p + PTX(la)));
+c010402d:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0104030:	c1 e8 0c             	shr    $0xc,%eax
+c0104033:	25 ff 03 00 00       	and    $0x3ff,%eax
+c0104038:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c010403f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0104042:	01 d0                	add    %edx,%eax
+c0104044:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c0104047:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010404a:	c1 e8 0c             	shr    $0xc,%eax
+c010404d:	89 45 d8             	mov    %eax,-0x28(%ebp)
+c0104050:	a1 60 ec 1a c0       	mov    0xc01aec60,%eax
+c0104055:	39 45 d8             	cmp    %eax,-0x28(%ebp)
+c0104058:	72 17                	jb     c0104071 <get_pte+0x11a>
+c010405a:	ff 75 dc             	pushl  -0x24(%ebp)
+c010405d:	68 60 c2 10 c0       	push   $0xc010c260
+c0104062:	68 94 01 00 00       	push   $0x194
+c0104067:	68 28 c3 10 c0       	push   $0xc010c328
+c010406c:	e8 83 c3 ff ff       	call   c01003f4 <__panic>
+c0104071:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0104074:	2d 00 00 00 40       	sub    $0x40000000,%eax
+    }
+    return NULL;
+}
+c0104079:	c9                   	leave  
+c010407a:	c3                   	ret    
+
+c010407b <get_page>:
+
+//get_page - get related Page struct for linear address la using PDT pgdir
+struct Page *
+get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
+c010407b:	55                   	push   %ebp
+c010407c:	89 e5                	mov    %esp,%ebp
+c010407e:	83 ec 18             	sub    $0x18,%esp
+    pte_t *ptep = get_pte(pgdir, la, 0);
+c0104081:	83 ec 04             	sub    $0x4,%esp
+c0104084:	6a 00                	push   $0x0
+c0104086:	ff 75 0c             	pushl  0xc(%ebp)
+c0104089:	ff 75 08             	pushl  0x8(%ebp)
+c010408c:	e8 c6 fe ff ff       	call   c0103f57 <get_pte>
+c0104091:	83 c4 10             	add    $0x10,%esp
+c0104094:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (ptep_store != NULL) {
+c0104097:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010409b:	74 08                	je     c01040a5 <get_page+0x2a>
+        *ptep_store = ptep;
+c010409d:	8b 45 10             	mov    0x10(%ebp),%eax
+c01040a0:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01040a3:	89 10                	mov    %edx,(%eax)
+    }
+    if (ptep != NULL && *ptep & PTE_P) {
+c01040a5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01040a9:	74 1f                	je     c01040ca <get_page+0x4f>
+c01040ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01040ae:	8b 00                	mov    (%eax),%eax
+c01040b0:	83 e0 01             	and    $0x1,%eax
+c01040b3:	85 c0                	test   %eax,%eax
+c01040b5:	74 13                	je     c01040ca <get_page+0x4f>
+        return pte2page(*ptep);
+c01040b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01040ba:	8b 00                	mov    (%eax),%eax
+c01040bc:	83 ec 0c             	sub    $0xc,%esp
+c01040bf:	50                   	push   %eax
+c01040c0:	e8 43 f5 ff ff       	call   c0103608 <pte2page>
+c01040c5:	83 c4 10             	add    $0x10,%esp
+c01040c8:	eb 05                	jmp    c01040cf <get_page+0x54>
+    }
+    return NULL;
+c01040ca:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01040cf:	c9                   	leave  
+c01040d0:	c3                   	ret    
+
+c01040d1 <page_remove_pte>:
+
+//page_remove_pte - free an Page sturct which is related linear address la
+//                - and clean(invalidate) pte which is related linear address la
+//note: PT is changed, so the TLB need to be invalidate 
+static inline void
+page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
+c01040d1:	55                   	push   %ebp
+c01040d2:	89 e5                	mov    %esp,%ebp
+c01040d4:	83 ec 18             	sub    $0x18,%esp
+     *   tlb_invalidate(pde_t *pgdir, uintptr_t la) : Invalidate a TLB entry, but only if the page tables being
+     *                        edited are the ones currently in use by the processor.
+     * DEFINEs:
+     *   PTE_P           0x001                   // page table/directory entry flags bit : Present
+     */
+	bool isPresent = (*ptep) & PTE_P;
+c01040d7:	8b 45 10             	mov    0x10(%ebp),%eax
+c01040da:	8b 00                	mov    (%eax),%eax
+c01040dc:	83 e0 01             	and    $0x1,%eax
+c01040df:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (isPresent) {                      		//(1) check if this page table entry is present
+c01040e2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01040e6:	74 55                	je     c010413d <page_remove_pte+0x6c>
+        struct Page *page = pte2page(*ptep); 	//(2) find corresponding page to pte
+c01040e8:	8b 45 10             	mov    0x10(%ebp),%eax
+c01040eb:	8b 00                	mov    (%eax),%eax
+c01040ed:	83 ec 0c             	sub    $0xc,%esp
+c01040f0:	50                   	push   %eax
+c01040f1:	e8 12 f5 ff ff       	call   c0103608 <pte2page>
+c01040f6:	83 c4 10             	add    $0x10,%esp
+c01040f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        int new_ref = page_ref_dec(page);    	//(3) decrease page reference
+c01040fc:	83 ec 0c             	sub    $0xc,%esp
+c01040ff:	ff 75 f0             	pushl  -0x10(%ebp)
+c0104102:	e8 86 f5 ff ff       	call   c010368d <page_ref_dec>
+c0104107:	83 c4 10             	add    $0x10,%esp
+c010410a:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        if (!new_ref){                          //(4) and free this page when page reference reachs 0
+c010410d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c0104111:	75 10                	jne    c0104123 <page_remove_pte+0x52>
+        	free_page(page);    				//(5) clear second page table entry
+c0104113:	83 ec 08             	sub    $0x8,%esp
+c0104116:	6a 01                	push   $0x1
+c0104118:	ff 75 f0             	pushl  -0x10(%ebp)
+c010411b:	e8 b8 f7 ff ff       	call   c01038d8 <free_pages>
+c0104120:	83 c4 10             	add    $0x10,%esp
+        }										//(6) flush tlb
+        *ptep = 0x0;
+c0104123:	8b 45 10             	mov    0x10(%ebp),%eax
+c0104126:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+        tlb_invalidate(pgdir, la);
+c010412c:	83 ec 08             	sub    $0x8,%esp
+c010412f:	ff 75 0c             	pushl  0xc(%ebp)
+c0104132:	ff 75 08             	pushl  0x8(%ebp)
+c0104135:	e8 98 04 00 00       	call   c01045d2 <tlb_invalidate>
+c010413a:	83 c4 10             	add    $0x10,%esp
+    }
+}
+c010413d:	90                   	nop
+c010413e:	c9                   	leave  
+c010413f:	c3                   	ret    
+
+c0104140 <unmap_range>:
+
+void
+unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
+c0104140:	55                   	push   %ebp
+c0104141:	89 e5                	mov    %esp,%ebp
+c0104143:	83 ec 18             	sub    $0x18,%esp
+    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
+c0104146:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0104149:	25 ff 0f 00 00       	and    $0xfff,%eax
+c010414e:	85 c0                	test   %eax,%eax
+c0104150:	75 0c                	jne    c010415e <unmap_range+0x1e>
+c0104152:	8b 45 10             	mov    0x10(%ebp),%eax
+c0104155:	25 ff 0f 00 00       	and    $0xfff,%eax
+c010415a:	85 c0                	test   %eax,%eax
+c010415c:	74 19                	je     c0104177 <unmap_range+0x37>
+c010415e:	68 88 c3 10 c0       	push   $0xc010c388
+c0104163:	68 4d c3 10 c0       	push   $0xc010c34d
+c0104168:	68 c9 01 00 00       	push   $0x1c9
+c010416d:	68 28 c3 10 c0       	push   $0xc010c328
+c0104172:	e8 7d c2 ff ff       	call   c01003f4 <__panic>
+    assert(USER_ACCESS(start, end));
+c0104177:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
+c010417e:	76 11                	jbe    c0104191 <unmap_range+0x51>
+c0104180:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0104183:	3b 45 10             	cmp    0x10(%ebp),%eax
+c0104186:	73 09                	jae    c0104191 <unmap_range+0x51>
+c0104188:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
+c010418f:	76 19                	jbe    c01041aa <unmap_range+0x6a>
+c0104191:	68 b1 c3 10 c0       	push   $0xc010c3b1
+c0104196:	68 4d c3 10 c0       	push   $0xc010c34d
+c010419b:	68 ca 01 00 00       	push   $0x1ca
+c01041a0:	68 28 c3 10 c0       	push   $0xc010c328
+c01041a5:	e8 4a c2 ff ff       	call   c01003f4 <__panic>
+
+    do {
+        pte_t *ptep = get_pte(pgdir, start, 0);
+c01041aa:	83 ec 04             	sub    $0x4,%esp
+c01041ad:	6a 00                	push   $0x0
+c01041af:	ff 75 0c             	pushl  0xc(%ebp)
+c01041b2:	ff 75 08             	pushl  0x8(%ebp)
+c01041b5:	e8 9d fd ff ff       	call   c0103f57 <get_pte>
+c01041ba:	83 c4 10             	add    $0x10,%esp
+c01041bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        if (ptep == NULL) {
+c01041c0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01041c4:	75 18                	jne    c01041de <unmap_range+0x9e>
+            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
+c01041c6:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01041c9:	05 00 00 40 00       	add    $0x400000,%eax
+c01041ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01041d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01041d4:	25 00 00 c0 ff       	and    $0xffc00000,%eax
+c01041d9:	89 45 0c             	mov    %eax,0xc(%ebp)
+            continue ;
+c01041dc:	eb 24                	jmp    c0104202 <unmap_range+0xc2>
+        }
+        if (*ptep != 0) {
+c01041de:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01041e1:	8b 00                	mov    (%eax),%eax
+c01041e3:	85 c0                	test   %eax,%eax
+c01041e5:	74 14                	je     c01041fb <unmap_range+0xbb>
+            page_remove_pte(pgdir, start, ptep);
+c01041e7:	83 ec 04             	sub    $0x4,%esp
+c01041ea:	ff 75 f4             	pushl  -0xc(%ebp)
+c01041ed:	ff 75 0c             	pushl  0xc(%ebp)
+c01041f0:	ff 75 08             	pushl  0x8(%ebp)
+c01041f3:	e8 d9 fe ff ff       	call   c01040d1 <page_remove_pte>
+c01041f8:	83 c4 10             	add    $0x10,%esp
+        }
+        start += PGSIZE;
+c01041fb:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
+    } while (start != 0 && start < end);
+c0104202:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c0104206:	74 08                	je     c0104210 <unmap_range+0xd0>
+c0104208:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010420b:	3b 45 10             	cmp    0x10(%ebp),%eax
+c010420e:	72 9a                	jb     c01041aa <unmap_range+0x6a>
+}
+c0104210:	90                   	nop
+c0104211:	c9                   	leave  
+c0104212:	c3                   	ret    
+
+c0104213 <exit_range>:
+
+void
+exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
+c0104213:	55                   	push   %ebp
+c0104214:	89 e5                	mov    %esp,%ebp
+c0104216:	83 ec 18             	sub    $0x18,%esp
+    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
+c0104219:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010421c:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0104221:	85 c0                	test   %eax,%eax
+c0104223:	75 0c                	jne    c0104231 <exit_range+0x1e>
+c0104225:	8b 45 10             	mov    0x10(%ebp),%eax
+c0104228:	25 ff 0f 00 00       	and    $0xfff,%eax
+c010422d:	85 c0                	test   %eax,%eax
+c010422f:	74 19                	je     c010424a <exit_range+0x37>
+c0104231:	68 88 c3 10 c0       	push   $0xc010c388
+c0104236:	68 4d c3 10 c0       	push   $0xc010c34d
+c010423b:	68 db 01 00 00       	push   $0x1db
+c0104240:	68 28 c3 10 c0       	push   $0xc010c328
+c0104245:	e8 aa c1 ff ff       	call   c01003f4 <__panic>
+    assert(USER_ACCESS(start, end));
+c010424a:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
+c0104251:	76 11                	jbe    c0104264 <exit_range+0x51>
+c0104253:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0104256:	3b 45 10             	cmp    0x10(%ebp),%eax
+c0104259:	73 09                	jae    c0104264 <exit_range+0x51>
+c010425b:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
+c0104262:	76 19                	jbe    c010427d <exit_range+0x6a>
+c0104264:	68 b1 c3 10 c0       	push   $0xc010c3b1
+c0104269:	68 4d c3 10 c0       	push   $0xc010c34d
+c010426e:	68 dc 01 00 00       	push   $0x1dc
+c0104273:	68 28 c3 10 c0       	push   $0xc010c328
+c0104278:	e8 77 c1 ff ff       	call   c01003f4 <__panic>
+
+    start = ROUNDDOWN(start, PTSIZE);
+c010427d:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0104280:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0104283:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104286:	25 00 00 c0 ff       	and    $0xffc00000,%eax
+c010428b:	89 45 0c             	mov    %eax,0xc(%ebp)
+    do {
+        int pde_idx = PDX(start);
+c010428e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0104291:	c1 e8 16             	shr    $0x16,%eax
+c0104294:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        if (pgdir[pde_idx] & PTE_P) {
+c0104297:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010429a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c01042a1:	8b 45 08             	mov    0x8(%ebp),%eax
+c01042a4:	01 d0                	add    %edx,%eax
+c01042a6:	8b 00                	mov    (%eax),%eax
+c01042a8:	83 e0 01             	and    $0x1,%eax
+c01042ab:	85 c0                	test   %eax,%eax
+c01042ad:	74 40                	je     c01042ef <exit_range+0xdc>
+            free_page(pde2page(pgdir[pde_idx]));
+c01042af:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01042b2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c01042b9:	8b 45 08             	mov    0x8(%ebp),%eax
+c01042bc:	01 d0                	add    %edx,%eax
+c01042be:	8b 00                	mov    (%eax),%eax
+c01042c0:	83 ec 0c             	sub    $0xc,%esp
+c01042c3:	50                   	push   %eax
+c01042c4:	e8 79 f3 ff ff       	call   c0103642 <pde2page>
+c01042c9:	83 c4 10             	add    $0x10,%esp
+c01042cc:	83 ec 08             	sub    $0x8,%esp
+c01042cf:	6a 01                	push   $0x1
+c01042d1:	50                   	push   %eax
+c01042d2:	e8 01 f6 ff ff       	call   c01038d8 <free_pages>
+c01042d7:	83 c4 10             	add    $0x10,%esp
+            pgdir[pde_idx] = 0;
+c01042da:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01042dd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c01042e4:	8b 45 08             	mov    0x8(%ebp),%eax
+c01042e7:	01 d0                	add    %edx,%eax
+c01042e9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+        }
+        start += PTSIZE;
+c01042ef:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
+    } while (start != 0 && start < end);
+c01042f6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c01042fa:	74 08                	je     c0104304 <exit_range+0xf1>
+c01042fc:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01042ff:	3b 45 10             	cmp    0x10(%ebp),%eax
+c0104302:	72 8a                	jb     c010428e <exit_range+0x7b>
+}
+c0104304:	90                   	nop
+c0104305:	c9                   	leave  
+c0104306:	c3                   	ret    
+
+c0104307 <copy_range>:
+ * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
+ *
+ * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
+ */
+int
+copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
+c0104307:	55                   	push   %ebp
+c0104308:	89 e5                	mov    %esp,%ebp
+c010430a:	83 ec 38             	sub    $0x38,%esp
+    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
+c010430d:	8b 45 10             	mov    0x10(%ebp),%eax
+c0104310:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0104315:	85 c0                	test   %eax,%eax
+c0104317:	75 0c                	jne    c0104325 <copy_range+0x1e>
+c0104319:	8b 45 14             	mov    0x14(%ebp),%eax
+c010431c:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0104321:	85 c0                	test   %eax,%eax
+c0104323:	74 19                	je     c010433e <copy_range+0x37>
+c0104325:	68 88 c3 10 c0       	push   $0xc010c388
+c010432a:	68 4d c3 10 c0       	push   $0xc010c34d
+c010432f:	68 f1 01 00 00       	push   $0x1f1
+c0104334:	68 28 c3 10 c0       	push   $0xc010c328
+c0104339:	e8 b6 c0 ff ff       	call   c01003f4 <__panic>
+    assert(USER_ACCESS(start, end));
+c010433e:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
+c0104345:	76 11                	jbe    c0104358 <copy_range+0x51>
+c0104347:	8b 45 10             	mov    0x10(%ebp),%eax
+c010434a:	3b 45 14             	cmp    0x14(%ebp),%eax
+c010434d:	73 09                	jae    c0104358 <copy_range+0x51>
+c010434f:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
+c0104356:	76 19                	jbe    c0104371 <copy_range+0x6a>
+c0104358:	68 b1 c3 10 c0       	push   $0xc010c3b1
+c010435d:	68 4d c3 10 c0       	push   $0xc010c34d
+c0104362:	68 f2 01 00 00       	push   $0x1f2
+c0104367:	68 28 c3 10 c0       	push   $0xc010c328
+c010436c:	e8 83 c0 ff ff       	call   c01003f4 <__panic>
+    // copy content by page unit.
+    do {
+        //call get_pte to find process A's pte according to the addr start
+        pte_t *ptep = get_pte(from, start, 0), *nptep;
+c0104371:	83 ec 04             	sub    $0x4,%esp
+c0104374:	6a 00                	push   $0x0
+c0104376:	ff 75 10             	pushl  0x10(%ebp)
+c0104379:	ff 75 0c             	pushl  0xc(%ebp)
+c010437c:	e8 d6 fb ff ff       	call   c0103f57 <get_pte>
+c0104381:	83 c4 10             	add    $0x10,%esp
+c0104384:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        if (ptep == NULL) {
+c0104387:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010438b:	75 1b                	jne    c01043a8 <copy_range+0xa1>
+            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
+c010438d:	8b 45 10             	mov    0x10(%ebp),%eax
+c0104390:	05 00 00 40 00       	add    $0x400000,%eax
+c0104395:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0104398:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010439b:	25 00 00 c0 ff       	and    $0xffc00000,%eax
+c01043a0:	89 45 10             	mov    %eax,0x10(%ebp)
+            continue ;
+c01043a3:	e9 1f 01 00 00       	jmp    c01044c7 <copy_range+0x1c0>
+        }
+        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
+        if (*ptep & PTE_P) {
+c01043a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01043ab:	8b 00                	mov    (%eax),%eax
+c01043ad:	83 e0 01             	and    $0x1,%eax
+c01043b0:	85 c0                	test   %eax,%eax
+c01043b2:	0f 84 08 01 00 00    	je     c01044c0 <copy_range+0x1b9>
+        	if ((nptep = get_pte(to, start, 1)) == NULL) {
+c01043b8:	83 ec 04             	sub    $0x4,%esp
+c01043bb:	6a 01                	push   $0x1
+c01043bd:	ff 75 10             	pushl  0x10(%ebp)
+c01043c0:	ff 75 08             	pushl  0x8(%ebp)
+c01043c3:	e8 8f fb ff ff       	call   c0103f57 <get_pte>
+c01043c8:	83 c4 10             	add    $0x10,%esp
+c01043cb:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c01043ce:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c01043d2:	75 0a                	jne    c01043de <copy_range+0xd7>
+        		return -E_NO_MEM;
+c01043d4:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
+c01043d9:	e9 00 01 00 00       	jmp    c01044de <copy_range+0x1d7>
+        	}
+        	uint32_t perm = (*ptep & PTE_USER);
+c01043de:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01043e1:	8b 00                	mov    (%eax),%eax
+c01043e3:	83 e0 07             	and    $0x7,%eax
+c01043e6:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        	//get page from ptep
+        	struct Page *page = pte2page(*ptep);
+c01043e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01043ec:	8b 00                	mov    (%eax),%eax
+c01043ee:	83 ec 0c             	sub    $0xc,%esp
+c01043f1:	50                   	push   %eax
+c01043f2:	e8 11 f2 ff ff       	call   c0103608 <pte2page>
+c01043f7:	83 c4 10             	add    $0x10,%esp
+c01043fa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        	// alloc a page for process B
+        	struct Page *npage=alloc_page();
+c01043fd:	83 ec 0c             	sub    $0xc,%esp
+c0104400:	6a 01                	push   $0x1
+c0104402:	e8 65 f4 ff ff       	call   c010386c <alloc_pages>
+c0104407:	83 c4 10             	add    $0x10,%esp
+c010440a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        	assert(page!=NULL);
+c010440d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c0104411:	75 19                	jne    c010442c <copy_range+0x125>
+c0104413:	68 c9 c3 10 c0       	push   $0xc010c3c9
+c0104418:	68 4d c3 10 c0       	push   $0xc010c34d
+c010441d:	68 05 02 00 00       	push   $0x205
+c0104422:	68 28 c3 10 c0       	push   $0xc010c328
+c0104427:	e8 c8 bf ff ff       	call   c01003f4 <__panic>
+        	assert(npage!=NULL);
+c010442c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+c0104430:	75 19                	jne    c010444b <copy_range+0x144>
+c0104432:	68 d4 c3 10 c0       	push   $0xc010c3d4
+c0104437:	68 4d c3 10 c0       	push   $0xc010c34d
+c010443c:	68 06 02 00 00       	push   $0x206
+c0104441:	68 28 c3 10 c0       	push   $0xc010c328
+c0104446:	e8 a9 bf ff ff       	call   c01003f4 <__panic>
+        	int ret=0;
+c010444b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+        	 * (2) find dst_kvaddr: the kernel virtual address of npage
+        	 * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
+        	 * (4) build the map of phy addr of  nage with the linear addr start
+        	 */
+
+        	char* src_kvaddr = page2kva(page);
+c0104452:	83 ec 0c             	sub    $0xc,%esp
+c0104455:	ff 75 e4             	pushl  -0x1c(%ebp)
+c0104458:	e8 66 f1 ff ff       	call   c01035c3 <page2kva>
+c010445d:	83 c4 10             	add    $0x10,%esp
+c0104460:	89 45 d8             	mov    %eax,-0x28(%ebp)
+        	char* dst_kvaddr = page2kva(npage);
+c0104463:	83 ec 0c             	sub    $0xc,%esp
+c0104466:	ff 75 e0             	pushl  -0x20(%ebp)
+c0104469:	e8 55 f1 ff ff       	call   c01035c3 <page2kva>
+c010446e:	83 c4 10             	add    $0x10,%esp
+c0104471:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        	memcpy(dst_kvaddr, src_kvaddr, PGSIZE);
+c0104474:	83 ec 04             	sub    $0x4,%esp
+c0104477:	68 00 10 00 00       	push   $0x1000
+c010447c:	ff 75 d8             	pushl  -0x28(%ebp)
+c010447f:	ff 75 d4             	pushl  -0x2c(%ebp)
+c0104482:	e8 c5 6c 00 00       	call   c010b14c <memcpy>
+c0104487:	83 c4 10             	add    $0x10,%esp
+        	ret = page_insert(to, npage, start, perm);
+c010448a:	ff 75 e8             	pushl  -0x18(%ebp)
+c010448d:	ff 75 10             	pushl  0x10(%ebp)
+c0104490:	ff 75 e0             	pushl  -0x20(%ebp)
+c0104493:	ff 75 08             	pushl  0x8(%ebp)
+c0104496:	e8 7e 00 00 00       	call   c0104519 <page_insert>
+c010449b:	83 c4 10             	add    $0x10,%esp
+c010449e:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        	assert(ret == 0);
+c01044a1:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c01044a5:	74 19                	je     c01044c0 <copy_range+0x1b9>
+c01044a7:	68 e0 c3 10 c0       	push   $0xc010c3e0
+c01044ac:	68 4d c3 10 c0       	push   $0xc010c34d
+c01044b1:	68 1b 02 00 00       	push   $0x21b
+c01044b6:	68 28 c3 10 c0       	push   $0xc010c328
+c01044bb:	e8 34 bf ff ff       	call   c01003f4 <__panic>
+        }
+        start += PGSIZE;
+c01044c0:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
+    } while (start != 0 && start < end);
+c01044c7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c01044cb:	74 0c                	je     c01044d9 <copy_range+0x1d2>
+c01044cd:	8b 45 10             	mov    0x10(%ebp),%eax
+c01044d0:	3b 45 14             	cmp    0x14(%ebp),%eax
+c01044d3:	0f 82 98 fe ff ff    	jb     c0104371 <copy_range+0x6a>
+    return 0;
+c01044d9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01044de:	c9                   	leave  
+c01044df:	c3                   	ret    
+
+c01044e0 <page_remove>:
+
+//page_remove - free an Page which is related linear address la and has an validated pte
+void
+page_remove(pde_t *pgdir, uintptr_t la) {
+c01044e0:	55                   	push   %ebp
+c01044e1:	89 e5                	mov    %esp,%ebp
+c01044e3:	83 ec 18             	sub    $0x18,%esp
+    pte_t *ptep = get_pte(pgdir, la, 0);
+c01044e6:	83 ec 04             	sub    $0x4,%esp
+c01044e9:	6a 00                	push   $0x0
+c01044eb:	ff 75 0c             	pushl  0xc(%ebp)
+c01044ee:	ff 75 08             	pushl  0x8(%ebp)
+c01044f1:	e8 61 fa ff ff       	call   c0103f57 <get_pte>
+c01044f6:	83 c4 10             	add    $0x10,%esp
+c01044f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (ptep != NULL) {
+c01044fc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0104500:	74 14                	je     c0104516 <page_remove+0x36>
+        page_remove_pte(pgdir, la, ptep);
+c0104502:	83 ec 04             	sub    $0x4,%esp
+c0104505:	ff 75 f4             	pushl  -0xc(%ebp)
+c0104508:	ff 75 0c             	pushl  0xc(%ebp)
+c010450b:	ff 75 08             	pushl  0x8(%ebp)
+c010450e:	e8 be fb ff ff       	call   c01040d1 <page_remove_pte>
+c0104513:	83 c4 10             	add    $0x10,%esp
+    }
+}
+c0104516:	90                   	nop
+c0104517:	c9                   	leave  
+c0104518:	c3                   	ret    
+
+c0104519 <page_insert>:
+//  la:    the linear address need to map
+//  perm:  the permission of this Page which is setted in related pte
+// return value: always 0
+//note: PT is changed, so the TLB need to be invalidate 
+int
+page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
+c0104519:	55                   	push   %ebp
+c010451a:	89 e5                	mov    %esp,%ebp
+c010451c:	83 ec 18             	sub    $0x18,%esp
+    pte_t *ptep = get_pte(pgdir, la, 1);
+c010451f:	83 ec 04             	sub    $0x4,%esp
+c0104522:	6a 01                	push   $0x1
+c0104524:	ff 75 10             	pushl  0x10(%ebp)
+c0104527:	ff 75 08             	pushl  0x8(%ebp)
+c010452a:	e8 28 fa ff ff       	call   c0103f57 <get_pte>
+c010452f:	83 c4 10             	add    $0x10,%esp
+c0104532:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (ptep == NULL) {
+c0104535:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0104539:	75 0a                	jne    c0104545 <page_insert+0x2c>
+        return -E_NO_MEM;
+c010453b:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
+c0104540:	e9 8b 00 00 00       	jmp    c01045d0 <page_insert+0xb7>
+    }
+    page_ref_inc(page);
+c0104545:	83 ec 0c             	sub    $0xc,%esp
+c0104548:	ff 75 0c             	pushl  0xc(%ebp)
+c010454b:	e8 26 f1 ff ff       	call   c0103676 <page_ref_inc>
+c0104550:	83 c4 10             	add    $0x10,%esp
+    if (*ptep & PTE_P) {
+c0104553:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104556:	8b 00                	mov    (%eax),%eax
+c0104558:	83 e0 01             	and    $0x1,%eax
+c010455b:	85 c0                	test   %eax,%eax
+c010455d:	74 40                	je     c010459f <page_insert+0x86>
+        struct Page *p = pte2page(*ptep);
+c010455f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104562:	8b 00                	mov    (%eax),%eax
+c0104564:	83 ec 0c             	sub    $0xc,%esp
+c0104567:	50                   	push   %eax
+c0104568:	e8 9b f0 ff ff       	call   c0103608 <pte2page>
+c010456d:	83 c4 10             	add    $0x10,%esp
+c0104570:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        if (p == page) {
+c0104573:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104576:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0104579:	75 10                	jne    c010458b <page_insert+0x72>
+            page_ref_dec(page);
+c010457b:	83 ec 0c             	sub    $0xc,%esp
+c010457e:	ff 75 0c             	pushl  0xc(%ebp)
+c0104581:	e8 07 f1 ff ff       	call   c010368d <page_ref_dec>
+c0104586:	83 c4 10             	add    $0x10,%esp
+c0104589:	eb 14                	jmp    c010459f <page_insert+0x86>
+        }
+        else {
+            page_remove_pte(pgdir, la, ptep);
+c010458b:	83 ec 04             	sub    $0x4,%esp
+c010458e:	ff 75 f4             	pushl  -0xc(%ebp)
+c0104591:	ff 75 10             	pushl  0x10(%ebp)
+c0104594:	ff 75 08             	pushl  0x8(%ebp)
+c0104597:	e8 35 fb ff ff       	call   c01040d1 <page_remove_pte>
+c010459c:	83 c4 10             	add    $0x10,%esp
+        }
+    }
+    *ptep = page2pa(page) | PTE_P | perm;
+c010459f:	83 ec 0c             	sub    $0xc,%esp
+c01045a2:	ff 75 0c             	pushl  0xc(%ebp)
+c01045a5:	e8 c9 ef ff ff       	call   c0103573 <page2pa>
+c01045aa:	83 c4 10             	add    $0x10,%esp
+c01045ad:	0b 45 14             	or     0x14(%ebp),%eax
+c01045b0:	83 c8 01             	or     $0x1,%eax
+c01045b3:	89 c2                	mov    %eax,%edx
+c01045b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01045b8:	89 10                	mov    %edx,(%eax)
+    tlb_invalidate(pgdir, la);
+c01045ba:	83 ec 08             	sub    $0x8,%esp
+c01045bd:	ff 75 10             	pushl  0x10(%ebp)
+c01045c0:	ff 75 08             	pushl  0x8(%ebp)
+c01045c3:	e8 0a 00 00 00       	call   c01045d2 <tlb_invalidate>
+c01045c8:	83 c4 10             	add    $0x10,%esp
+    return 0;
+c01045cb:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01045d0:	c9                   	leave  
+c01045d1:	c3                   	ret    
+
+c01045d2 <tlb_invalidate>:
+
+// invalidate a TLB entry, but only if the page tables being
+// edited are the ones currently in use by the processor.
+void
+tlb_invalidate(pde_t *pgdir, uintptr_t la) {
+c01045d2:	55                   	push   %ebp
+c01045d3:	89 e5                	mov    %esp,%ebp
+c01045d5:	83 ec 18             	sub    $0x18,%esp
+}
+
+static inline uintptr_t
+rcr3(void) {
+    uintptr_t cr3;
+    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
+c01045d8:	0f 20 d8             	mov    %cr3,%eax
+c01045db:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    return cr3;
+c01045de:	8b 55 ec             	mov    -0x14(%ebp),%edx
+    if (rcr3() == PADDR(pgdir)) {
+c01045e1:	8b 45 08             	mov    0x8(%ebp),%eax
+c01045e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01045e7:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
+c01045ee:	77 17                	ja     c0104607 <tlb_invalidate+0x35>
+c01045f0:	ff 75 f0             	pushl  -0x10(%ebp)
+c01045f3:	68 04 c3 10 c0       	push   $0xc010c304
+c01045f8:	68 4c 02 00 00       	push   $0x24c
+c01045fd:	68 28 c3 10 c0       	push   $0xc010c328
+c0104602:	e8 ed bd ff ff       	call   c01003f4 <__panic>
+c0104607:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010460a:	05 00 00 00 40       	add    $0x40000000,%eax
+c010460f:	39 c2                	cmp    %eax,%edx
+c0104611:	75 0c                	jne    c010461f <tlb_invalidate+0x4d>
+        invlpg((void *)la);
+c0104613:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0104616:	89 45 f4             	mov    %eax,-0xc(%ebp)
+}
+
+static inline void
+invlpg(void *addr) {
+    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
+c0104619:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010461c:	0f 01 38             	invlpg (%eax)
+    }
+}
+c010461f:	90                   	nop
+c0104620:	c9                   	leave  
+c0104621:	c3                   	ret    
+
+c0104622 <pgdir_alloc_page>:
+
+// pgdir_alloc_page - call alloc_page & page_insert functions to 
+//                  - allocate a page size memory & setup an addr map
+//                  - pa<->la with linear address la and the PDT pgdir
+struct Page *
+pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
+c0104622:	55                   	push   %ebp
+c0104623:	89 e5                	mov    %esp,%ebp
+c0104625:	83 ec 18             	sub    $0x18,%esp
+    struct Page *page = alloc_page();
+c0104628:	83 ec 0c             	sub    $0xc,%esp
+c010462b:	6a 01                	push   $0x1
+c010462d:	e8 3a f2 ff ff       	call   c010386c <alloc_pages>
+c0104632:	83 c4 10             	add    $0x10,%esp
+c0104635:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (page != NULL) {
+c0104638:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010463c:	0f 84 8c 00 00 00    	je     c01046ce <pgdir_alloc_page+0xac>
+        if (page_insert(pgdir, page, la, perm) != 0) {
+c0104642:	ff 75 10             	pushl  0x10(%ebp)
+c0104645:	ff 75 0c             	pushl  0xc(%ebp)
+c0104648:	ff 75 f4             	pushl  -0xc(%ebp)
+c010464b:	ff 75 08             	pushl  0x8(%ebp)
+c010464e:	e8 c6 fe ff ff       	call   c0104519 <page_insert>
+c0104653:	83 c4 10             	add    $0x10,%esp
+c0104656:	85 c0                	test   %eax,%eax
+c0104658:	74 17                	je     c0104671 <pgdir_alloc_page+0x4f>
+            free_page(page);
+c010465a:	83 ec 08             	sub    $0x8,%esp
+c010465d:	6a 01                	push   $0x1
+c010465f:	ff 75 f4             	pushl  -0xc(%ebp)
+c0104662:	e8 71 f2 ff ff       	call   c01038d8 <free_pages>
+c0104667:	83 c4 10             	add    $0x10,%esp
+            return NULL;
+c010466a:	b8 00 00 00 00       	mov    $0x0,%eax
+c010466f:	eb 60                	jmp    c01046d1 <pgdir_alloc_page+0xaf>
+        }
+        if (swap_init_ok){
+c0104671:	a1 f4 ec 1a c0       	mov    0xc01aecf4,%eax
+c0104676:	85 c0                	test   %eax,%eax
+c0104678:	74 54                	je     c01046ce <pgdir_alloc_page+0xac>
+            if(check_mm_struct!=NULL) {
+c010467a:	a1 70 0d 1b c0       	mov    0xc01b0d70,%eax
+c010467f:	85 c0                	test   %eax,%eax
+c0104681:	74 4b                	je     c01046ce <pgdir_alloc_page+0xac>
+                swap_map_swappable(check_mm_struct, la, page, 0);
+c0104683:	a1 70 0d 1b c0       	mov    0xc01b0d70,%eax
+c0104688:	6a 00                	push   $0x0
+c010468a:	ff 75 f4             	pushl  -0xc(%ebp)
+c010468d:	ff 75 0c             	pushl  0xc(%ebp)
+c0104690:	50                   	push   %eax
+c0104691:	e8 92 28 00 00       	call   c0106f28 <swap_map_swappable>
+c0104696:	83 c4 10             	add    $0x10,%esp
+                page->pra_vaddr=la;
+c0104699:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010469c:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010469f:	89 50 1c             	mov    %edx,0x1c(%eax)
+                assert(page_ref(page) == 1);
+c01046a2:	83 ec 0c             	sub    $0xc,%esp
+c01046a5:	ff 75 f4             	pushl  -0xc(%ebp)
+c01046a8:	e8 b1 ef ff ff       	call   c010365e <page_ref>
+c01046ad:	83 c4 10             	add    $0x10,%esp
+c01046b0:	83 f8 01             	cmp    $0x1,%eax
+c01046b3:	74 19                	je     c01046ce <pgdir_alloc_page+0xac>
+c01046b5:	68 e9 c3 10 c0       	push   $0xc010c3e9
+c01046ba:	68 4d c3 10 c0       	push   $0xc010c34d
+c01046bf:	68 60 02 00 00       	push   $0x260
+c01046c4:	68 28 c3 10 c0       	push   $0xc010c328
+c01046c9:	e8 26 bd ff ff       	call   c01003f4 <__panic>
+            }
+        }
+
+    }
+
+    return page;
+c01046ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c01046d1:	c9                   	leave  
+c01046d2:	c3                   	ret    
+
+c01046d3 <check_alloc_page>:
+
+static void
+check_alloc_page(void) {
+c01046d3:	55                   	push   %ebp
+c01046d4:	89 e5                	mov    %esp,%ebp
+c01046d6:	83 ec 08             	sub    $0x8,%esp
+    pmm_manager->check();
+c01046d9:	a1 5c 0d 1b c0       	mov    0xc01b0d5c,%eax
+c01046de:	8b 40 18             	mov    0x18(%eax),%eax
+c01046e1:	ff d0                	call   *%eax
+    cprintf("check_alloc_page() succeeded!\n");
+c01046e3:	83 ec 0c             	sub    $0xc,%esp
+c01046e6:	68 00 c4 10 c0       	push   $0xc010c400
+c01046eb:	e8 9e bb ff ff       	call   c010028e <cprintf>
+c01046f0:	83 c4 10             	add    $0x10,%esp
+}
+c01046f3:	90                   	nop
+c01046f4:	c9                   	leave  
+c01046f5:	c3                   	ret    
+
+c01046f6 <check_pgdir>:
+
+static void
+check_pgdir(void) {
+c01046f6:	55                   	push   %ebp
+c01046f7:	89 e5                	mov    %esp,%ebp
+c01046f9:	83 ec 28             	sub    $0x28,%esp
+    assert(npage <= KMEMSIZE / PGSIZE);
+c01046fc:	a1 60 ec 1a c0       	mov    0xc01aec60,%eax
+c0104701:	3d 00 80 03 00       	cmp    $0x38000,%eax
+c0104706:	76 19                	jbe    c0104721 <check_pgdir+0x2b>
+c0104708:	68 1f c4 10 c0       	push   $0xc010c41f
+c010470d:	68 4d c3 10 c0       	push   $0xc010c34d
+c0104712:	68 78 02 00 00       	push   $0x278
+c0104717:	68 28 c3 10 c0       	push   $0xc010c328
+c010471c:	e8 d3 bc ff ff       	call   c01003f4 <__panic>
+    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
+c0104721:	a1 64 ec 1a c0       	mov    0xc01aec64,%eax
+c0104726:	85 c0                	test   %eax,%eax
+c0104728:	74 0e                	je     c0104738 <check_pgdir+0x42>
+c010472a:	a1 64 ec 1a c0       	mov    0xc01aec64,%eax
+c010472f:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0104734:	85 c0                	test   %eax,%eax
+c0104736:	74 19                	je     c0104751 <check_pgdir+0x5b>
+c0104738:	68 3c c4 10 c0       	push   $0xc010c43c
+c010473d:	68 4d c3 10 c0       	push   $0xc010c34d
+c0104742:	68 79 02 00 00       	push   $0x279
+c0104747:	68 28 c3 10 c0       	push   $0xc010c328
+c010474c:	e8 a3 bc ff ff       	call   c01003f4 <__panic>
+    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
+c0104751:	a1 64 ec 1a c0       	mov    0xc01aec64,%eax
+c0104756:	83 ec 04             	sub    $0x4,%esp
+c0104759:	6a 00                	push   $0x0
+c010475b:	6a 00                	push   $0x0
+c010475d:	50                   	push   %eax
+c010475e:	e8 18 f9 ff ff       	call   c010407b <get_page>
+c0104763:	83 c4 10             	add    $0x10,%esp
+c0104766:	85 c0                	test   %eax,%eax
+c0104768:	74 19                	je     c0104783 <check_pgdir+0x8d>
+c010476a:	68 74 c4 10 c0       	push   $0xc010c474
+c010476f:	68 4d c3 10 c0       	push   $0xc010c34d
+c0104774:	68 7a 02 00 00       	push   $0x27a
+c0104779:	68 28 c3 10 c0       	push   $0xc010c328
+c010477e:	e8 71 bc ff ff       	call   c01003f4 <__panic>
+
+    struct Page *p1, *p2;
+    p1 = alloc_page();
+c0104783:	83 ec 0c             	sub    $0xc,%esp
+c0104786:	6a 01                	push   $0x1
+c0104788:	e8 df f0 ff ff       	call   c010386c <alloc_pages>
+c010478d:	83 c4 10             	add    $0x10,%esp
+c0104790:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
+c0104793:	a1 64 ec 1a c0       	mov    0xc01aec64,%eax
+c0104798:	6a 00                	push   $0x0
+c010479a:	6a 00                	push   $0x0
+c010479c:	ff 75 f4             	pushl  -0xc(%ebp)
+c010479f:	50                   	push   %eax
+c01047a0:	e8 74 fd ff ff       	call   c0104519 <page_insert>
+c01047a5:	83 c4 10             	add    $0x10,%esp
+c01047a8:	85 c0                	test   %eax,%eax
+c01047aa:	74 19                	je     c01047c5 <check_pgdir+0xcf>
+c01047ac:	68 9c c4 10 c0       	push   $0xc010c49c
+c01047b1:	68 4d c3 10 c0       	push   $0xc010c34d
+c01047b6:	68 7e 02 00 00       	push   $0x27e
+c01047bb:	68 28 c3 10 c0       	push   $0xc010c328
+c01047c0:	e8 2f bc ff ff       	call   c01003f4 <__panic>
+
+    pte_t *ptep;
+    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
+c01047c5:	a1 64 ec 1a c0       	mov    0xc01aec64,%eax
+c01047ca:	83 ec 04             	sub    $0x4,%esp
+c01047cd:	6a 00                	push   $0x0
+c01047cf:	6a 00                	push   $0x0
+c01047d1:	50                   	push   %eax
+c01047d2:	e8 80 f7 ff ff       	call   c0103f57 <get_pte>
+c01047d7:	83 c4 10             	add    $0x10,%esp
+c01047da:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01047dd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c01047e1:	75 19                	jne    c01047fc <check_pgdir+0x106>
+c01047e3:	68 c8 c4 10 c0       	push   $0xc010c4c8
+c01047e8:	68 4d c3 10 c0       	push   $0xc010c34d
+c01047ed:	68 81 02 00 00       	push   $0x281
+c01047f2:	68 28 c3 10 c0       	push   $0xc010c328
+c01047f7:	e8 f8 bb ff ff       	call   c01003f4 <__panic>
+    assert(pte2page(*ptep) == p1);
+c01047fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01047ff:	8b 00                	mov    (%eax),%eax
+c0104801:	83 ec 0c             	sub    $0xc,%esp
+c0104804:	50                   	push   %eax
+c0104805:	e8 fe ed ff ff       	call   c0103608 <pte2page>
+c010480a:	83 c4 10             	add    $0x10,%esp
+c010480d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0104810:	74 19                	je     c010482b <check_pgdir+0x135>
+c0104812:	68 f5 c4 10 c0       	push   $0xc010c4f5
+c0104817:	68 4d c3 10 c0       	push   $0xc010c34d
+c010481c:	68 82 02 00 00       	push   $0x282
+c0104821:	68 28 c3 10 c0       	push   $0xc010c328
+c0104826:	e8 c9 bb ff ff       	call   c01003f4 <__panic>
+    assert(page_ref(p1) == 1);
+c010482b:	83 ec 0c             	sub    $0xc,%esp
+c010482e:	ff 75 f4             	pushl  -0xc(%ebp)
+c0104831:	e8 28 ee ff ff       	call   c010365e <page_ref>
+c0104836:	83 c4 10             	add    $0x10,%esp
+c0104839:	83 f8 01             	cmp    $0x1,%eax
+c010483c:	74 19                	je     c0104857 <check_pgdir+0x161>
+c010483e:	68 0b c5 10 c0       	push   $0xc010c50b
+c0104843:	68 4d c3 10 c0       	push   $0xc010c34d
+c0104848:	68 83 02 00 00       	push   $0x283
+c010484d:	68 28 c3 10 c0       	push   $0xc010c328
+c0104852:	e8 9d bb ff ff       	call   c01003f4 <__panic>
+
+    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
+c0104857:	a1 64 ec 1a c0       	mov    0xc01aec64,%eax
+c010485c:	8b 00                	mov    (%eax),%eax
+c010485e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0104863:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0104866:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0104869:	c1 e8 0c             	shr    $0xc,%eax
+c010486c:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010486f:	a1 60 ec 1a c0       	mov    0xc01aec60,%eax
+c0104874:	39 45 e8             	cmp    %eax,-0x18(%ebp)
+c0104877:	72 17                	jb     c0104890 <check_pgdir+0x19a>
+c0104879:	ff 75 ec             	pushl  -0x14(%ebp)
+c010487c:	68 60 c2 10 c0       	push   $0xc010c260
+c0104881:	68 85 02 00 00       	push   $0x285
+c0104886:	68 28 c3 10 c0       	push   $0xc010c328
+c010488b:	e8 64 bb ff ff       	call   c01003f4 <__panic>
+c0104890:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0104893:	2d 00 00 00 40       	sub    $0x40000000,%eax
+c0104898:	83 c0 04             	add    $0x4,%eax
+c010489b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
+c010489e:	a1 64 ec 1a c0       	mov    0xc01aec64,%eax
+c01048a3:	83 ec 04             	sub    $0x4,%esp
+c01048a6:	6a 00                	push   $0x0
+c01048a8:	68 00 10 00 00       	push   $0x1000
+c01048ad:	50                   	push   %eax
+c01048ae:	e8 a4 f6 ff ff       	call   c0103f57 <get_pte>
+c01048b3:	83 c4 10             	add    $0x10,%esp
+c01048b6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c01048b9:	74 19                	je     c01048d4 <check_pgdir+0x1de>
+c01048bb:	68 20 c5 10 c0       	push   $0xc010c520
+c01048c0:	68 4d c3 10 c0       	push   $0xc010c34d
+c01048c5:	68 86 02 00 00       	push   $0x286
+c01048ca:	68 28 c3 10 c0       	push   $0xc010c328
+c01048cf:	e8 20 bb ff ff       	call   c01003f4 <__panic>
+
+    p2 = alloc_page();
+c01048d4:	83 ec 0c             	sub    $0xc,%esp
+c01048d7:	6a 01                	push   $0x1
+c01048d9:	e8 8e ef ff ff       	call   c010386c <alloc_pages>
+c01048de:	83 c4 10             	add    $0x10,%esp
+c01048e1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
+c01048e4:	a1 64 ec 1a c0       	mov    0xc01aec64,%eax
+c01048e9:	6a 06                	push   $0x6
+c01048eb:	68 00 10 00 00       	push   $0x1000
+c01048f0:	ff 75 e4             	pushl  -0x1c(%ebp)
+c01048f3:	50                   	push   %eax
+c01048f4:	e8 20 fc ff ff       	call   c0104519 <page_insert>
+c01048f9:	83 c4 10             	add    $0x10,%esp
+c01048fc:	85 c0                	test   %eax,%eax
+c01048fe:	74 19                	je     c0104919 <check_pgdir+0x223>
+c0104900:	68 48 c5 10 c0       	push   $0xc010c548
+c0104905:	68 4d c3 10 c0       	push   $0xc010c34d
+c010490a:	68 89 02 00 00       	push   $0x289
+c010490f:	68 28 c3 10 c0       	push   $0xc010c328
+c0104914:	e8 db ba ff ff       	call   c01003f4 <__panic>
+    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
+c0104919:	a1 64 ec 1a c0       	mov    0xc01aec64,%eax
+c010491e:	83 ec 04             	sub    $0x4,%esp
+c0104921:	6a 00                	push   $0x0
+c0104923:	68 00 10 00 00       	push   $0x1000
+c0104928:	50                   	push   %eax
+c0104929:	e8 29 f6 ff ff       	call   c0103f57 <get_pte>
+c010492e:	83 c4 10             	add    $0x10,%esp
+c0104931:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0104934:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0104938:	75 19                	jne    c0104953 <check_pgdir+0x25d>
+c010493a:	68 80 c5 10 c0       	push   $0xc010c580
+c010493f:	68 4d c3 10 c0       	push   $0xc010c34d
+c0104944:	68 8a 02 00 00       	push   $0x28a
+c0104949:	68 28 c3 10 c0       	push   $0xc010c328
+c010494e:	e8 a1 ba ff ff       	call   c01003f4 <__panic>
+    assert(*ptep & PTE_U);
+c0104953:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104956:	8b 00                	mov    (%eax),%eax
+c0104958:	83 e0 04             	and    $0x4,%eax
+c010495b:	85 c0                	test   %eax,%eax
+c010495d:	75 19                	jne    c0104978 <check_pgdir+0x282>
+c010495f:	68 b0 c5 10 c0       	push   $0xc010c5b0
+c0104964:	68 4d c3 10 c0       	push   $0xc010c34d
+c0104969:	68 8b 02 00 00       	push   $0x28b
+c010496e:	68 28 c3 10 c0       	push   $0xc010c328
+c0104973:	e8 7c ba ff ff       	call   c01003f4 <__panic>
+    assert(*ptep & PTE_W);
+c0104978:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010497b:	8b 00                	mov    (%eax),%eax
+c010497d:	83 e0 02             	and    $0x2,%eax
+c0104980:	85 c0                	test   %eax,%eax
+c0104982:	75 19                	jne    c010499d <check_pgdir+0x2a7>
+c0104984:	68 be c5 10 c0       	push   $0xc010c5be
+c0104989:	68 4d c3 10 c0       	push   $0xc010c34d
+c010498e:	68 8c 02 00 00       	push   $0x28c
+c0104993:	68 28 c3 10 c0       	push   $0xc010c328
+c0104998:	e8 57 ba ff ff       	call   c01003f4 <__panic>
+    assert(boot_pgdir[0] & PTE_U);
+c010499d:	a1 64 ec 1a c0       	mov    0xc01aec64,%eax
+c01049a2:	8b 00                	mov    (%eax),%eax
+c01049a4:	83 e0 04             	and    $0x4,%eax
+c01049a7:	85 c0                	test   %eax,%eax
+c01049a9:	75 19                	jne    c01049c4 <check_pgdir+0x2ce>
+c01049ab:	68 cc c5 10 c0       	push   $0xc010c5cc
+c01049b0:	68 4d c3 10 c0       	push   $0xc010c34d
+c01049b5:	68 8d 02 00 00       	push   $0x28d
+c01049ba:	68 28 c3 10 c0       	push   $0xc010c328
+c01049bf:	e8 30 ba ff ff       	call   c01003f4 <__panic>
+    assert(page_ref(p2) == 1);
+c01049c4:	83 ec 0c             	sub    $0xc,%esp
+c01049c7:	ff 75 e4             	pushl  -0x1c(%ebp)
+c01049ca:	e8 8f ec ff ff       	call   c010365e <page_ref>
+c01049cf:	83 c4 10             	add    $0x10,%esp
+c01049d2:	83 f8 01             	cmp    $0x1,%eax
+c01049d5:	74 19                	je     c01049f0 <check_pgdir+0x2fa>
+c01049d7:	68 e2 c5 10 c0       	push   $0xc010c5e2
+c01049dc:	68 4d c3 10 c0       	push   $0xc010c34d
+c01049e1:	68 8e 02 00 00       	push   $0x28e
+c01049e6:	68 28 c3 10 c0       	push   $0xc010c328
+c01049eb:	e8 04 ba ff ff       	call   c01003f4 <__panic>
+
+    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
+c01049f0:	a1 64 ec 1a c0       	mov    0xc01aec64,%eax
+c01049f5:	6a 00                	push   $0x0
+c01049f7:	68 00 10 00 00       	push   $0x1000
+c01049fc:	ff 75 f4             	pushl  -0xc(%ebp)
+c01049ff:	50                   	push   %eax
+c0104a00:	e8 14 fb ff ff       	call   c0104519 <page_insert>
+c0104a05:	83 c4 10             	add    $0x10,%esp
+c0104a08:	85 c0                	test   %eax,%eax
+c0104a0a:	74 19                	je     c0104a25 <check_pgdir+0x32f>
+c0104a0c:	68 f4 c5 10 c0       	push   $0xc010c5f4
+c0104a11:	68 4d c3 10 c0       	push   $0xc010c34d
+c0104a16:	68 90 02 00 00       	push   $0x290
+c0104a1b:	68 28 c3 10 c0       	push   $0xc010c328
+c0104a20:	e8 cf b9 ff ff       	call   c01003f4 <__panic>
+    assert(page_ref(p1) == 2);
+c0104a25:	83 ec 0c             	sub    $0xc,%esp
+c0104a28:	ff 75 f4             	pushl  -0xc(%ebp)
+c0104a2b:	e8 2e ec ff ff       	call   c010365e <page_ref>
+c0104a30:	83 c4 10             	add    $0x10,%esp
+c0104a33:	83 f8 02             	cmp    $0x2,%eax
+c0104a36:	74 19                	je     c0104a51 <check_pgdir+0x35b>
+c0104a38:	68 20 c6 10 c0       	push   $0xc010c620
+c0104a3d:	68 4d c3 10 c0       	push   $0xc010c34d
+c0104a42:	68 91 02 00 00       	push   $0x291
+c0104a47:	68 28 c3 10 c0       	push   $0xc010c328
+c0104a4c:	e8 a3 b9 ff ff       	call   c01003f4 <__panic>
+    assert(page_ref(p2) == 0);
+c0104a51:	83 ec 0c             	sub    $0xc,%esp
+c0104a54:	ff 75 e4             	pushl  -0x1c(%ebp)
+c0104a57:	e8 02 ec ff ff       	call   c010365e <page_ref>
+c0104a5c:	83 c4 10             	add    $0x10,%esp
+c0104a5f:	85 c0                	test   %eax,%eax
+c0104a61:	74 19                	je     c0104a7c <check_pgdir+0x386>
+c0104a63:	68 32 c6 10 c0       	push   $0xc010c632
+c0104a68:	68 4d c3 10 c0       	push   $0xc010c34d
+c0104a6d:	68 92 02 00 00       	push   $0x292
+c0104a72:	68 28 c3 10 c0       	push   $0xc010c328
+c0104a77:	e8 78 b9 ff ff       	call   c01003f4 <__panic>
+    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
+c0104a7c:	a1 64 ec 1a c0       	mov    0xc01aec64,%eax
+c0104a81:	83 ec 04             	sub    $0x4,%esp
+c0104a84:	6a 00                	push   $0x0
+c0104a86:	68 00 10 00 00       	push   $0x1000
+c0104a8b:	50                   	push   %eax
+c0104a8c:	e8 c6 f4 ff ff       	call   c0103f57 <get_pte>
+c0104a91:	83 c4 10             	add    $0x10,%esp
+c0104a94:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0104a97:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0104a9b:	75 19                	jne    c0104ab6 <check_pgdir+0x3c0>
+c0104a9d:	68 80 c5 10 c0       	push   $0xc010c580
+c0104aa2:	68 4d c3 10 c0       	push   $0xc010c34d
+c0104aa7:	68 93 02 00 00       	push   $0x293
+c0104aac:	68 28 c3 10 c0       	push   $0xc010c328
+c0104ab1:	e8 3e b9 ff ff       	call   c01003f4 <__panic>
+    assert(pte2page(*ptep) == p1);
+c0104ab6:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104ab9:	8b 00                	mov    (%eax),%eax
+c0104abb:	83 ec 0c             	sub    $0xc,%esp
+c0104abe:	50                   	push   %eax
+c0104abf:	e8 44 eb ff ff       	call   c0103608 <pte2page>
+c0104ac4:	83 c4 10             	add    $0x10,%esp
+c0104ac7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0104aca:	74 19                	je     c0104ae5 <check_pgdir+0x3ef>
+c0104acc:	68 f5 c4 10 c0       	push   $0xc010c4f5
+c0104ad1:	68 4d c3 10 c0       	push   $0xc010c34d
+c0104ad6:	68 94 02 00 00       	push   $0x294
+c0104adb:	68 28 c3 10 c0       	push   $0xc010c328
+c0104ae0:	e8 0f b9 ff ff       	call   c01003f4 <__panic>
+    assert((*ptep & PTE_U) == 0);
+c0104ae5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104ae8:	8b 00                	mov    (%eax),%eax
+c0104aea:	83 e0 04             	and    $0x4,%eax
+c0104aed:	85 c0                	test   %eax,%eax
+c0104aef:	74 19                	je     c0104b0a <check_pgdir+0x414>
+c0104af1:	68 44 c6 10 c0       	push   $0xc010c644
+c0104af6:	68 4d c3 10 c0       	push   $0xc010c34d
+c0104afb:	68 95 02 00 00       	push   $0x295
+c0104b00:	68 28 c3 10 c0       	push   $0xc010c328
+c0104b05:	e8 ea b8 ff ff       	call   c01003f4 <__panic>
+
+    page_remove(boot_pgdir, 0x0);
+c0104b0a:	a1 64 ec 1a c0       	mov    0xc01aec64,%eax
+c0104b0f:	83 ec 08             	sub    $0x8,%esp
+c0104b12:	6a 00                	push   $0x0
+c0104b14:	50                   	push   %eax
+c0104b15:	e8 c6 f9 ff ff       	call   c01044e0 <page_remove>
+c0104b1a:	83 c4 10             	add    $0x10,%esp
+    assert(page_ref(p1) == 1);
+c0104b1d:	83 ec 0c             	sub    $0xc,%esp
+c0104b20:	ff 75 f4             	pushl  -0xc(%ebp)
+c0104b23:	e8 36 eb ff ff       	call   c010365e <page_ref>
+c0104b28:	83 c4 10             	add    $0x10,%esp
+c0104b2b:	83 f8 01             	cmp    $0x1,%eax
+c0104b2e:	74 19                	je     c0104b49 <check_pgdir+0x453>
+c0104b30:	68 0b c5 10 c0       	push   $0xc010c50b
+c0104b35:	68 4d c3 10 c0       	push   $0xc010c34d
+c0104b3a:	68 98 02 00 00       	push   $0x298
+c0104b3f:	68 28 c3 10 c0       	push   $0xc010c328
+c0104b44:	e8 ab b8 ff ff       	call   c01003f4 <__panic>
+    assert(page_ref(p2) == 0);
+c0104b49:	83 ec 0c             	sub    $0xc,%esp
+c0104b4c:	ff 75 e4             	pushl  -0x1c(%ebp)
+c0104b4f:	e8 0a eb ff ff       	call   c010365e <page_ref>
+c0104b54:	83 c4 10             	add    $0x10,%esp
+c0104b57:	85 c0                	test   %eax,%eax
+c0104b59:	74 19                	je     c0104b74 <check_pgdir+0x47e>
+c0104b5b:	68 32 c6 10 c0       	push   $0xc010c632
+c0104b60:	68 4d c3 10 c0       	push   $0xc010c34d
+c0104b65:	68 99 02 00 00       	push   $0x299
+c0104b6a:	68 28 c3 10 c0       	push   $0xc010c328
+c0104b6f:	e8 80 b8 ff ff       	call   c01003f4 <__panic>
+
+    page_remove(boot_pgdir, PGSIZE);
+c0104b74:	a1 64 ec 1a c0       	mov    0xc01aec64,%eax
+c0104b79:	83 ec 08             	sub    $0x8,%esp
+c0104b7c:	68 00 10 00 00       	push   $0x1000
+c0104b81:	50                   	push   %eax
+c0104b82:	e8 59 f9 ff ff       	call   c01044e0 <page_remove>
+c0104b87:	83 c4 10             	add    $0x10,%esp
+    assert(page_ref(p1) == 0);
+c0104b8a:	83 ec 0c             	sub    $0xc,%esp
+c0104b8d:	ff 75 f4             	pushl  -0xc(%ebp)
+c0104b90:	e8 c9 ea ff ff       	call   c010365e <page_ref>
+c0104b95:	83 c4 10             	add    $0x10,%esp
+c0104b98:	85 c0                	test   %eax,%eax
+c0104b9a:	74 19                	je     c0104bb5 <check_pgdir+0x4bf>
+c0104b9c:	68 59 c6 10 c0       	push   $0xc010c659
+c0104ba1:	68 4d c3 10 c0       	push   $0xc010c34d
+c0104ba6:	68 9c 02 00 00       	push   $0x29c
+c0104bab:	68 28 c3 10 c0       	push   $0xc010c328
+c0104bb0:	e8 3f b8 ff ff       	call   c01003f4 <__panic>
+    assert(page_ref(p2) == 0);
+c0104bb5:	83 ec 0c             	sub    $0xc,%esp
+c0104bb8:	ff 75 e4             	pushl  -0x1c(%ebp)
+c0104bbb:	e8 9e ea ff ff       	call   c010365e <page_ref>
+c0104bc0:	83 c4 10             	add    $0x10,%esp
+c0104bc3:	85 c0                	test   %eax,%eax
+c0104bc5:	74 19                	je     c0104be0 <check_pgdir+0x4ea>
+c0104bc7:	68 32 c6 10 c0       	push   $0xc010c632
+c0104bcc:	68 4d c3 10 c0       	push   $0xc010c34d
+c0104bd1:	68 9d 02 00 00       	push   $0x29d
+c0104bd6:	68 28 c3 10 c0       	push   $0xc010c328
+c0104bdb:	e8 14 b8 ff ff       	call   c01003f4 <__panic>
+
+    assert(page_ref(pde2page(boot_pgdir[0])) == 1);
+c0104be0:	a1 64 ec 1a c0       	mov    0xc01aec64,%eax
+c0104be5:	8b 00                	mov    (%eax),%eax
+c0104be7:	83 ec 0c             	sub    $0xc,%esp
+c0104bea:	50                   	push   %eax
+c0104beb:	e8 52 ea ff ff       	call   c0103642 <pde2page>
+c0104bf0:	83 c4 10             	add    $0x10,%esp
+c0104bf3:	83 ec 0c             	sub    $0xc,%esp
+c0104bf6:	50                   	push   %eax
+c0104bf7:	e8 62 ea ff ff       	call   c010365e <page_ref>
+c0104bfc:	83 c4 10             	add    $0x10,%esp
+c0104bff:	83 f8 01             	cmp    $0x1,%eax
+c0104c02:	74 19                	je     c0104c1d <check_pgdir+0x527>
+c0104c04:	68 6c c6 10 c0       	push   $0xc010c66c
+c0104c09:	68 4d c3 10 c0       	push   $0xc010c34d
+c0104c0e:	68 9f 02 00 00       	push   $0x29f
+c0104c13:	68 28 c3 10 c0       	push   $0xc010c328
+c0104c18:	e8 d7 b7 ff ff       	call   c01003f4 <__panic>
+    free_page(pde2page(boot_pgdir[0]));
+c0104c1d:	a1 64 ec 1a c0       	mov    0xc01aec64,%eax
+c0104c22:	8b 00                	mov    (%eax),%eax
+c0104c24:	83 ec 0c             	sub    $0xc,%esp
+c0104c27:	50                   	push   %eax
+c0104c28:	e8 15 ea ff ff       	call   c0103642 <pde2page>
+c0104c2d:	83 c4 10             	add    $0x10,%esp
+c0104c30:	83 ec 08             	sub    $0x8,%esp
+c0104c33:	6a 01                	push   $0x1
+c0104c35:	50                   	push   %eax
+c0104c36:	e8 9d ec ff ff       	call   c01038d8 <free_pages>
+c0104c3b:	83 c4 10             	add    $0x10,%esp
+    boot_pgdir[0] = 0;
+c0104c3e:	a1 64 ec 1a c0       	mov    0xc01aec64,%eax
+c0104c43:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+
+    cprintf("check_pgdir() succeeded!\n");
+c0104c49:	83 ec 0c             	sub    $0xc,%esp
+c0104c4c:	68 93 c6 10 c0       	push   $0xc010c693
+c0104c51:	e8 38 b6 ff ff       	call   c010028e <cprintf>
+c0104c56:	83 c4 10             	add    $0x10,%esp
+}
+c0104c59:	90                   	nop
+c0104c5a:	c9                   	leave  
+c0104c5b:	c3                   	ret    
+
+c0104c5c <check_boot_pgdir>:
+
+static void
+check_boot_pgdir(void) {
+c0104c5c:	55                   	push   %ebp
+c0104c5d:	89 e5                	mov    %esp,%ebp
+c0104c5f:	83 ec 28             	sub    $0x28,%esp
+    pte_t *ptep;
+    int i;
+    for (i = 0; i < npage; i += PGSIZE) {
+c0104c62:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0104c69:	e9 a3 00 00 00       	jmp    c0104d11 <check_boot_pgdir+0xb5>
+        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
+c0104c6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104c71:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0104c74:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104c77:	c1 e8 0c             	shr    $0xc,%eax
+c0104c7a:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0104c7d:	a1 60 ec 1a c0       	mov    0xc01aec60,%eax
+c0104c82:	39 45 ec             	cmp    %eax,-0x14(%ebp)
+c0104c85:	72 17                	jb     c0104c9e <check_boot_pgdir+0x42>
+c0104c87:	ff 75 f0             	pushl  -0x10(%ebp)
+c0104c8a:	68 60 c2 10 c0       	push   $0xc010c260
+c0104c8f:	68 ab 02 00 00       	push   $0x2ab
+c0104c94:	68 28 c3 10 c0       	push   $0xc010c328
+c0104c99:	e8 56 b7 ff ff       	call   c01003f4 <__panic>
+c0104c9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104ca1:	2d 00 00 00 40       	sub    $0x40000000,%eax
+c0104ca6:	89 c2                	mov    %eax,%edx
+c0104ca8:	a1 64 ec 1a c0       	mov    0xc01aec64,%eax
+c0104cad:	83 ec 04             	sub    $0x4,%esp
+c0104cb0:	6a 00                	push   $0x0
+c0104cb2:	52                   	push   %edx
+c0104cb3:	50                   	push   %eax
+c0104cb4:	e8 9e f2 ff ff       	call   c0103f57 <get_pte>
+c0104cb9:	83 c4 10             	add    $0x10,%esp
+c0104cbc:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0104cbf:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c0104cc3:	75 19                	jne    c0104cde <check_boot_pgdir+0x82>
+c0104cc5:	68 b0 c6 10 c0       	push   $0xc010c6b0
+c0104cca:	68 4d c3 10 c0       	push   $0xc010c34d
+c0104ccf:	68 ab 02 00 00       	push   $0x2ab
+c0104cd4:	68 28 c3 10 c0       	push   $0xc010c328
+c0104cd9:	e8 16 b7 ff ff       	call   c01003f4 <__panic>
+        assert(PTE_ADDR(*ptep) == i);
+c0104cde:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0104ce1:	8b 00                	mov    (%eax),%eax
+c0104ce3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0104ce8:	89 c2                	mov    %eax,%edx
+c0104cea:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104ced:	39 c2                	cmp    %eax,%edx
+c0104cef:	74 19                	je     c0104d0a <check_boot_pgdir+0xae>
+c0104cf1:	68 ed c6 10 c0       	push   $0xc010c6ed
+c0104cf6:	68 4d c3 10 c0       	push   $0xc010c34d
+c0104cfb:	68 ac 02 00 00       	push   $0x2ac
+c0104d00:	68 28 c3 10 c0       	push   $0xc010c328
+c0104d05:	e8 ea b6 ff ff       	call   c01003f4 <__panic>
+
+static void
+check_boot_pgdir(void) {
+    pte_t *ptep;
+    int i;
+    for (i = 0; i < npage; i += PGSIZE) {
+c0104d0a:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
+c0104d11:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0104d14:	a1 60 ec 1a c0       	mov    0xc01aec60,%eax
+c0104d19:	39 c2                	cmp    %eax,%edx
+c0104d1b:	0f 82 4d ff ff ff    	jb     c0104c6e <check_boot_pgdir+0x12>
+        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
+        assert(PTE_ADDR(*ptep) == i);
+    }
+
+    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
+c0104d21:	a1 64 ec 1a c0       	mov    0xc01aec64,%eax
+c0104d26:	05 ac 0f 00 00       	add    $0xfac,%eax
+c0104d2b:	8b 00                	mov    (%eax),%eax
+c0104d2d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0104d32:	89 c2                	mov    %eax,%edx
+c0104d34:	a1 64 ec 1a c0       	mov    0xc01aec64,%eax
+c0104d39:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0104d3c:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
+c0104d43:	77 17                	ja     c0104d5c <check_boot_pgdir+0x100>
+c0104d45:	ff 75 e4             	pushl  -0x1c(%ebp)
+c0104d48:	68 04 c3 10 c0       	push   $0xc010c304
+c0104d4d:	68 af 02 00 00       	push   $0x2af
+c0104d52:	68 28 c3 10 c0       	push   $0xc010c328
+c0104d57:	e8 98 b6 ff ff       	call   c01003f4 <__panic>
+c0104d5c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0104d5f:	05 00 00 00 40       	add    $0x40000000,%eax
+c0104d64:	39 c2                	cmp    %eax,%edx
+c0104d66:	74 19                	je     c0104d81 <check_boot_pgdir+0x125>
+c0104d68:	68 04 c7 10 c0       	push   $0xc010c704
+c0104d6d:	68 4d c3 10 c0       	push   $0xc010c34d
+c0104d72:	68 af 02 00 00       	push   $0x2af
+c0104d77:	68 28 c3 10 c0       	push   $0xc010c328
+c0104d7c:	e8 73 b6 ff ff       	call   c01003f4 <__panic>
+
+    assert(boot_pgdir[0] == 0);
+c0104d81:	a1 64 ec 1a c0       	mov    0xc01aec64,%eax
+c0104d86:	8b 00                	mov    (%eax),%eax
+c0104d88:	85 c0                	test   %eax,%eax
+c0104d8a:	74 19                	je     c0104da5 <check_boot_pgdir+0x149>
+c0104d8c:	68 38 c7 10 c0       	push   $0xc010c738
+c0104d91:	68 4d c3 10 c0       	push   $0xc010c34d
+c0104d96:	68 b1 02 00 00       	push   $0x2b1
+c0104d9b:	68 28 c3 10 c0       	push   $0xc010c328
+c0104da0:	e8 4f b6 ff ff       	call   c01003f4 <__panic>
+
+    struct Page *p;
+    p = alloc_page();
+c0104da5:	83 ec 0c             	sub    $0xc,%esp
+c0104da8:	6a 01                	push   $0x1
+c0104daa:	e8 bd ea ff ff       	call   c010386c <alloc_pages>
+c0104daf:	83 c4 10             	add    $0x10,%esp
+c0104db2:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
+c0104db5:	a1 64 ec 1a c0       	mov    0xc01aec64,%eax
+c0104dba:	6a 02                	push   $0x2
+c0104dbc:	68 00 01 00 00       	push   $0x100
+c0104dc1:	ff 75 e0             	pushl  -0x20(%ebp)
+c0104dc4:	50                   	push   %eax
+c0104dc5:	e8 4f f7 ff ff       	call   c0104519 <page_insert>
+c0104dca:	83 c4 10             	add    $0x10,%esp
+c0104dcd:	85 c0                	test   %eax,%eax
+c0104dcf:	74 19                	je     c0104dea <check_boot_pgdir+0x18e>
+c0104dd1:	68 4c c7 10 c0       	push   $0xc010c74c
+c0104dd6:	68 4d c3 10 c0       	push   $0xc010c34d
+c0104ddb:	68 b5 02 00 00       	push   $0x2b5
+c0104de0:	68 28 c3 10 c0       	push   $0xc010c328
+c0104de5:	e8 0a b6 ff ff       	call   c01003f4 <__panic>
+    assert(page_ref(p) == 1);
+c0104dea:	83 ec 0c             	sub    $0xc,%esp
+c0104ded:	ff 75 e0             	pushl  -0x20(%ebp)
+c0104df0:	e8 69 e8 ff ff       	call   c010365e <page_ref>
+c0104df5:	83 c4 10             	add    $0x10,%esp
+c0104df8:	83 f8 01             	cmp    $0x1,%eax
+c0104dfb:	74 19                	je     c0104e16 <check_boot_pgdir+0x1ba>
+c0104dfd:	68 7a c7 10 c0       	push   $0xc010c77a
+c0104e02:	68 4d c3 10 c0       	push   $0xc010c34d
+c0104e07:	68 b6 02 00 00       	push   $0x2b6
+c0104e0c:	68 28 c3 10 c0       	push   $0xc010c328
+c0104e11:	e8 de b5 ff ff       	call   c01003f4 <__panic>
+    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
+c0104e16:	a1 64 ec 1a c0       	mov    0xc01aec64,%eax
+c0104e1b:	6a 02                	push   $0x2
+c0104e1d:	68 00 11 00 00       	push   $0x1100
+c0104e22:	ff 75 e0             	pushl  -0x20(%ebp)
+c0104e25:	50                   	push   %eax
+c0104e26:	e8 ee f6 ff ff       	call   c0104519 <page_insert>
+c0104e2b:	83 c4 10             	add    $0x10,%esp
+c0104e2e:	85 c0                	test   %eax,%eax
+c0104e30:	74 19                	je     c0104e4b <check_boot_pgdir+0x1ef>
+c0104e32:	68 8c c7 10 c0       	push   $0xc010c78c
+c0104e37:	68 4d c3 10 c0       	push   $0xc010c34d
+c0104e3c:	68 b7 02 00 00       	push   $0x2b7
+c0104e41:	68 28 c3 10 c0       	push   $0xc010c328
+c0104e46:	e8 a9 b5 ff ff       	call   c01003f4 <__panic>
+    assert(page_ref(p) == 2);
+c0104e4b:	83 ec 0c             	sub    $0xc,%esp
+c0104e4e:	ff 75 e0             	pushl  -0x20(%ebp)
+c0104e51:	e8 08 e8 ff ff       	call   c010365e <page_ref>
+c0104e56:	83 c4 10             	add    $0x10,%esp
+c0104e59:	83 f8 02             	cmp    $0x2,%eax
+c0104e5c:	74 19                	je     c0104e77 <check_boot_pgdir+0x21b>
+c0104e5e:	68 c3 c7 10 c0       	push   $0xc010c7c3
+c0104e63:	68 4d c3 10 c0       	push   $0xc010c34d
+c0104e68:	68 b8 02 00 00       	push   $0x2b8
+c0104e6d:	68 28 c3 10 c0       	push   $0xc010c328
+c0104e72:	e8 7d b5 ff ff       	call   c01003f4 <__panic>
+
+    const char *str = "ucore: Hello world!!";
+c0104e77:	c7 45 dc d4 c7 10 c0 	movl   $0xc010c7d4,-0x24(%ebp)
+    strcpy((void *)0x100, str);
+c0104e7e:	83 ec 08             	sub    $0x8,%esp
+c0104e81:	ff 75 dc             	pushl  -0x24(%ebp)
+c0104e84:	68 00 01 00 00       	push   $0x100
+c0104e89:	e8 02 5f 00 00       	call   c010ad90 <strcpy>
+c0104e8e:	83 c4 10             	add    $0x10,%esp
+    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
+c0104e91:	83 ec 08             	sub    $0x8,%esp
+c0104e94:	68 00 11 00 00       	push   $0x1100
+c0104e99:	68 00 01 00 00       	push   $0x100
+c0104e9e:	e8 67 5f 00 00       	call   c010ae0a <strcmp>
+c0104ea3:	83 c4 10             	add    $0x10,%esp
+c0104ea6:	85 c0                	test   %eax,%eax
+c0104ea8:	74 19                	je     c0104ec3 <check_boot_pgdir+0x267>
+c0104eaa:	68 ec c7 10 c0       	push   $0xc010c7ec
+c0104eaf:	68 4d c3 10 c0       	push   $0xc010c34d
+c0104eb4:	68 bc 02 00 00       	push   $0x2bc
+c0104eb9:	68 28 c3 10 c0       	push   $0xc010c328
+c0104ebe:	e8 31 b5 ff ff       	call   c01003f4 <__panic>
+
+    *(char *)(page2kva(p) + 0x100) = '\0';
+c0104ec3:	83 ec 0c             	sub    $0xc,%esp
+c0104ec6:	ff 75 e0             	pushl  -0x20(%ebp)
+c0104ec9:	e8 f5 e6 ff ff       	call   c01035c3 <page2kva>
+c0104ece:	83 c4 10             	add    $0x10,%esp
+c0104ed1:	05 00 01 00 00       	add    $0x100,%eax
+c0104ed6:	c6 00 00             	movb   $0x0,(%eax)
+    assert(strlen((const char *)0x100) == 0);
+c0104ed9:	83 ec 0c             	sub    $0xc,%esp
+c0104edc:	68 00 01 00 00       	push   $0x100
+c0104ee1:	e8 52 5e 00 00       	call   c010ad38 <strlen>
+c0104ee6:	83 c4 10             	add    $0x10,%esp
+c0104ee9:	85 c0                	test   %eax,%eax
+c0104eeb:	74 19                	je     c0104f06 <check_boot_pgdir+0x2aa>
+c0104eed:	68 24 c8 10 c0       	push   $0xc010c824
+c0104ef2:	68 4d c3 10 c0       	push   $0xc010c34d
+c0104ef7:	68 bf 02 00 00       	push   $0x2bf
+c0104efc:	68 28 c3 10 c0       	push   $0xc010c328
+c0104f01:	e8 ee b4 ff ff       	call   c01003f4 <__panic>
+
+    free_page(p);
+c0104f06:	83 ec 08             	sub    $0x8,%esp
+c0104f09:	6a 01                	push   $0x1
+c0104f0b:	ff 75 e0             	pushl  -0x20(%ebp)
+c0104f0e:	e8 c5 e9 ff ff       	call   c01038d8 <free_pages>
+c0104f13:	83 c4 10             	add    $0x10,%esp
+    free_page(pde2page(boot_pgdir[0]));
+c0104f16:	a1 64 ec 1a c0       	mov    0xc01aec64,%eax
+c0104f1b:	8b 00                	mov    (%eax),%eax
+c0104f1d:	83 ec 0c             	sub    $0xc,%esp
+c0104f20:	50                   	push   %eax
+c0104f21:	e8 1c e7 ff ff       	call   c0103642 <pde2page>
+c0104f26:	83 c4 10             	add    $0x10,%esp
+c0104f29:	83 ec 08             	sub    $0x8,%esp
+c0104f2c:	6a 01                	push   $0x1
+c0104f2e:	50                   	push   %eax
+c0104f2f:	e8 a4 e9 ff ff       	call   c01038d8 <free_pages>
+c0104f34:	83 c4 10             	add    $0x10,%esp
+    boot_pgdir[0] = 0;
+c0104f37:	a1 64 ec 1a c0       	mov    0xc01aec64,%eax
+c0104f3c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+
+    cprintf("check_boot_pgdir() succeeded!\n");
+c0104f42:	83 ec 0c             	sub    $0xc,%esp
+c0104f45:	68 48 c8 10 c0       	push   $0xc010c848
+c0104f4a:	e8 3f b3 ff ff       	call   c010028e <cprintf>
+c0104f4f:	83 c4 10             	add    $0x10,%esp
+}
+c0104f52:	90                   	nop
+c0104f53:	c9                   	leave  
+c0104f54:	c3                   	ret    
+
+c0104f55 <perm2str>:
+
+//perm2str - use string 'u,r,w,-' to present the permission
+static const char *
+perm2str(int perm) {
+c0104f55:	55                   	push   %ebp
+c0104f56:	89 e5                	mov    %esp,%ebp
+    static char str[4];
+    str[0] = (perm & PTE_U) ? 'u' : '-';
+c0104f58:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104f5b:	83 e0 04             	and    $0x4,%eax
+c0104f5e:	85 c0                	test   %eax,%eax
+c0104f60:	74 07                	je     c0104f69 <perm2str+0x14>
+c0104f62:	b8 75 00 00 00       	mov    $0x75,%eax
+c0104f67:	eb 05                	jmp    c0104f6e <perm2str+0x19>
+c0104f69:	b8 2d 00 00 00       	mov    $0x2d,%eax
+c0104f6e:	a2 e8 ec 1a c0       	mov    %al,0xc01aece8
+    str[1] = 'r';
+c0104f73:	c6 05 e9 ec 1a c0 72 	movb   $0x72,0xc01aece9
+    str[2] = (perm & PTE_W) ? 'w' : '-';
+c0104f7a:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104f7d:	83 e0 02             	and    $0x2,%eax
+c0104f80:	85 c0                	test   %eax,%eax
+c0104f82:	74 07                	je     c0104f8b <perm2str+0x36>
+c0104f84:	b8 77 00 00 00       	mov    $0x77,%eax
+c0104f89:	eb 05                	jmp    c0104f90 <perm2str+0x3b>
+c0104f8b:	b8 2d 00 00 00       	mov    $0x2d,%eax
+c0104f90:	a2 ea ec 1a c0       	mov    %al,0xc01aecea
+    str[3] = '\0';
+c0104f95:	c6 05 eb ec 1a c0 00 	movb   $0x0,0xc01aeceb
+    return str;
+c0104f9c:	b8 e8 ec 1a c0       	mov    $0xc01aece8,%eax
+}
+c0104fa1:	5d                   	pop    %ebp
+c0104fa2:	c3                   	ret    
+
+c0104fa3 <get_pgtable_items>:
+//  table:       the beginning addr of table
+//  left_store:  the pointer of the high side of table's next range
+//  right_store: the pointer of the low side of table's next range
+// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
+static int
+get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
+c0104fa3:	55                   	push   %ebp
+c0104fa4:	89 e5                	mov    %esp,%ebp
+c0104fa6:	83 ec 10             	sub    $0x10,%esp
+    if (start >= right) {
+c0104fa9:	8b 45 10             	mov    0x10(%ebp),%eax
+c0104fac:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0104faf:	72 0e                	jb     c0104fbf <get_pgtable_items+0x1c>
+        return 0;
+c0104fb1:	b8 00 00 00 00       	mov    $0x0,%eax
+c0104fb6:	e9 9a 00 00 00       	jmp    c0105055 <get_pgtable_items+0xb2>
+    }
+    while (start < right && !(table[start] & PTE_P)) {
+        start ++;
+c0104fbb:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+static int
+get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
+    if (start >= right) {
+        return 0;
+    }
+    while (start < right && !(table[start] & PTE_P)) {
+c0104fbf:	8b 45 10             	mov    0x10(%ebp),%eax
+c0104fc2:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0104fc5:	73 18                	jae    c0104fdf <get_pgtable_items+0x3c>
+c0104fc7:	8b 45 10             	mov    0x10(%ebp),%eax
+c0104fca:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0104fd1:	8b 45 14             	mov    0x14(%ebp),%eax
+c0104fd4:	01 d0                	add    %edx,%eax
+c0104fd6:	8b 00                	mov    (%eax),%eax
+c0104fd8:	83 e0 01             	and    $0x1,%eax
+c0104fdb:	85 c0                	test   %eax,%eax
+c0104fdd:	74 dc                	je     c0104fbb <get_pgtable_items+0x18>
+        start ++;
+    }
+    if (start < right) {
+c0104fdf:	8b 45 10             	mov    0x10(%ebp),%eax
+c0104fe2:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0104fe5:	73 69                	jae    c0105050 <get_pgtable_items+0xad>
+        if (left_store != NULL) {
+c0104fe7:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
+c0104feb:	74 08                	je     c0104ff5 <get_pgtable_items+0x52>
+            *left_store = start;
+c0104fed:	8b 45 18             	mov    0x18(%ebp),%eax
+c0104ff0:	8b 55 10             	mov    0x10(%ebp),%edx
+c0104ff3:	89 10                	mov    %edx,(%eax)
+        }
+        int perm = (table[start ++] & PTE_USER);
+c0104ff5:	8b 45 10             	mov    0x10(%ebp),%eax
+c0104ff8:	8d 50 01             	lea    0x1(%eax),%edx
+c0104ffb:	89 55 10             	mov    %edx,0x10(%ebp)
+c0104ffe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0105005:	8b 45 14             	mov    0x14(%ebp),%eax
+c0105008:	01 d0                	add    %edx,%eax
+c010500a:	8b 00                	mov    (%eax),%eax
+c010500c:	83 e0 07             	and    $0x7,%eax
+c010500f:	89 45 fc             	mov    %eax,-0x4(%ebp)
+        while (start < right && (table[start] & PTE_USER) == perm) {
+c0105012:	eb 04                	jmp    c0105018 <get_pgtable_items+0x75>
+            start ++;
+c0105014:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+    if (start < right) {
+        if (left_store != NULL) {
+            *left_store = start;
+        }
+        int perm = (table[start ++] & PTE_USER);
+        while (start < right && (table[start] & PTE_USER) == perm) {
+c0105018:	8b 45 10             	mov    0x10(%ebp),%eax
+c010501b:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c010501e:	73 1d                	jae    c010503d <get_pgtable_items+0x9a>
+c0105020:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105023:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c010502a:	8b 45 14             	mov    0x14(%ebp),%eax
+c010502d:	01 d0                	add    %edx,%eax
+c010502f:	8b 00                	mov    (%eax),%eax
+c0105031:	83 e0 07             	and    $0x7,%eax
+c0105034:	89 c2                	mov    %eax,%edx
+c0105036:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0105039:	39 c2                	cmp    %eax,%edx
+c010503b:	74 d7                	je     c0105014 <get_pgtable_items+0x71>
+            start ++;
+        }
+        if (right_store != NULL) {
+c010503d:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+c0105041:	74 08                	je     c010504b <get_pgtable_items+0xa8>
+            *right_store = start;
+c0105043:	8b 45 1c             	mov    0x1c(%ebp),%eax
+c0105046:	8b 55 10             	mov    0x10(%ebp),%edx
+c0105049:	89 10                	mov    %edx,(%eax)
+        }
+        return perm;
+c010504b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010504e:	eb 05                	jmp    c0105055 <get_pgtable_items+0xb2>
+    }
+    return 0;
+c0105050:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0105055:	c9                   	leave  
+c0105056:	c3                   	ret    
+
+c0105057 <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+c0105057:	55                   	push   %ebp
+c0105058:	89 e5                	mov    %esp,%ebp
+c010505a:	57                   	push   %edi
+c010505b:	56                   	push   %esi
+c010505c:	53                   	push   %ebx
+c010505d:	83 ec 2c             	sub    $0x2c,%esp
+    cprintf("-------------------- BEGIN --------------------\n");
+c0105060:	83 ec 0c             	sub    $0xc,%esp
+c0105063:	68 68 c8 10 c0       	push   $0xc010c868
+c0105068:	e8 21 b2 ff ff       	call   c010028e <cprintf>
+c010506d:	83 c4 10             	add    $0x10,%esp
+    size_t left, right = 0, perm;
+c0105070:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
+c0105077:	e9 e5 00 00 00       	jmp    c0105161 <print_pgdir+0x10a>
+        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
+c010507c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010507f:	83 ec 0c             	sub    $0xc,%esp
+c0105082:	50                   	push   %eax
+c0105083:	e8 cd fe ff ff       	call   c0104f55 <perm2str>
+c0105088:	83 c4 10             	add    $0x10,%esp
+c010508b:	89 c7                	mov    %eax,%edi
+                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
+c010508d:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0105090:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0105093:	29 c2                	sub    %eax,%edx
+c0105095:	89 d0                	mov    %edx,%eax
+void
+print_pgdir(void) {
+    cprintf("-------------------- BEGIN --------------------\n");
+    size_t left, right = 0, perm;
+    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
+        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
+c0105097:	c1 e0 16             	shl    $0x16,%eax
+c010509a:	89 c3                	mov    %eax,%ebx
+c010509c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010509f:	c1 e0 16             	shl    $0x16,%eax
+c01050a2:	89 c1                	mov    %eax,%ecx
+c01050a4:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01050a7:	c1 e0 16             	shl    $0x16,%eax
+c01050aa:	89 c2                	mov    %eax,%edx
+c01050ac:	8b 75 dc             	mov    -0x24(%ebp),%esi
+c01050af:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01050b2:	29 c6                	sub    %eax,%esi
+c01050b4:	89 f0                	mov    %esi,%eax
+c01050b6:	83 ec 08             	sub    $0x8,%esp
+c01050b9:	57                   	push   %edi
+c01050ba:	53                   	push   %ebx
+c01050bb:	51                   	push   %ecx
+c01050bc:	52                   	push   %edx
+c01050bd:	50                   	push   %eax
+c01050be:	68 99 c8 10 c0       	push   $0xc010c899
+c01050c3:	e8 c6 b1 ff ff       	call   c010028e <cprintf>
+c01050c8:	83 c4 20             	add    $0x20,%esp
+                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
+        size_t l, r = left * NPTEENTRY;
+c01050cb:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01050ce:	c1 e0 0a             	shl    $0xa,%eax
+c01050d1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
+c01050d4:	eb 4f                	jmp    c0105125 <print_pgdir+0xce>
+            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
+c01050d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01050d9:	83 ec 0c             	sub    $0xc,%esp
+c01050dc:	50                   	push   %eax
+c01050dd:	e8 73 fe ff ff       	call   c0104f55 <perm2str>
+c01050e2:	83 c4 10             	add    $0x10,%esp
+c01050e5:	89 c7                	mov    %eax,%edi
+                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
+c01050e7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c01050ea:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c01050ed:	29 c2                	sub    %eax,%edx
+c01050ef:	89 d0                	mov    %edx,%eax
+    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
+        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
+                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
+        size_t l, r = left * NPTEENTRY;
+        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
+            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
+c01050f1:	c1 e0 0c             	shl    $0xc,%eax
+c01050f4:	89 c3                	mov    %eax,%ebx
+c01050f6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c01050f9:	c1 e0 0c             	shl    $0xc,%eax
+c01050fc:	89 c1                	mov    %eax,%ecx
+c01050fe:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0105101:	c1 e0 0c             	shl    $0xc,%eax
+c0105104:	89 c2                	mov    %eax,%edx
+c0105106:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+c0105109:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010510c:	29 c6                	sub    %eax,%esi
+c010510e:	89 f0                	mov    %esi,%eax
+c0105110:	83 ec 08             	sub    $0x8,%esp
+c0105113:	57                   	push   %edi
+c0105114:	53                   	push   %ebx
+c0105115:	51                   	push   %ecx
+c0105116:	52                   	push   %edx
+c0105117:	50                   	push   %eax
+c0105118:	68 b8 c8 10 c0       	push   $0xc010c8b8
+c010511d:	e8 6c b1 ff ff       	call   c010028e <cprintf>
+c0105122:	83 c4 20             	add    $0x20,%esp
+    size_t left, right = 0, perm;
+    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
+        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
+                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
+        size_t l, r = left * NPTEENTRY;
+        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
+c0105125:	be 00 00 c0 fa       	mov    $0xfac00000,%esi
+c010512a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010512d:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0105130:	89 d3                	mov    %edx,%ebx
+c0105132:	c1 e3 0a             	shl    $0xa,%ebx
+c0105135:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0105138:	89 d1                	mov    %edx,%ecx
+c010513a:	c1 e1 0a             	shl    $0xa,%ecx
+c010513d:	83 ec 08             	sub    $0x8,%esp
+c0105140:	8d 55 d4             	lea    -0x2c(%ebp),%edx
+c0105143:	52                   	push   %edx
+c0105144:	8d 55 d8             	lea    -0x28(%ebp),%edx
+c0105147:	52                   	push   %edx
+c0105148:	56                   	push   %esi
+c0105149:	50                   	push   %eax
+c010514a:	53                   	push   %ebx
+c010514b:	51                   	push   %ecx
+c010514c:	e8 52 fe ff ff       	call   c0104fa3 <get_pgtable_items>
+c0105151:	83 c4 20             	add    $0x20,%esp
+c0105154:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0105157:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c010515b:	0f 85 75 ff ff ff    	jne    c01050d6 <print_pgdir+0x7f>
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+    cprintf("-------------------- BEGIN --------------------\n");
+    size_t left, right = 0, perm;
+    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
+c0105161:	b9 00 b0 fe fa       	mov    $0xfafeb000,%ecx
+c0105166:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0105169:	83 ec 08             	sub    $0x8,%esp
+c010516c:	8d 55 dc             	lea    -0x24(%ebp),%edx
+c010516f:	52                   	push   %edx
+c0105170:	8d 55 e0             	lea    -0x20(%ebp),%edx
+c0105173:	52                   	push   %edx
+c0105174:	51                   	push   %ecx
+c0105175:	50                   	push   %eax
+c0105176:	68 00 04 00 00       	push   $0x400
+c010517b:	6a 00                	push   $0x0
+c010517d:	e8 21 fe ff ff       	call   c0104fa3 <get_pgtable_items>
+c0105182:	83 c4 20             	add    $0x20,%esp
+c0105185:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0105188:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c010518c:	0f 85 ea fe ff ff    	jne    c010507c <print_pgdir+0x25>
+        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
+            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
+                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
+        }
+    }
+    cprintf("--------------------- END ---------------------\n");
+c0105192:	83 ec 0c             	sub    $0xc,%esp
+c0105195:	68 dc c8 10 c0       	push   $0xc010c8dc
+c010519a:	e8 ef b0 ff ff       	call   c010028e <cprintf>
+c010519f:	83 c4 10             	add    $0x10,%esp
+}
+c01051a2:	90                   	nop
+c01051a3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+c01051a6:	5b                   	pop    %ebx
+c01051a7:	5e                   	pop    %esi
+c01051a8:	5f                   	pop    %edi
+c01051a9:	5d                   	pop    %ebp
+c01051aa:	c3                   	ret    
+
+c01051ab <_fifo_init_mm>:
+ * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
+ *              Now, From the memory control struct mm_struct, we can access FIFO PRA
+ */
+static int
+_fifo_init_mm(struct mm_struct *mm)
+{     
+c01051ab:	55                   	push   %ebp
+c01051ac:	89 e5                	mov    %esp,%ebp
+c01051ae:	83 ec 10             	sub    $0x10,%esp
+c01051b1:	c7 45 fc 68 0d 1b c0 	movl   $0xc01b0d68,-0x4(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c01051b8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01051bb:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c01051be:	89 50 04             	mov    %edx,0x4(%eax)
+c01051c1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01051c4:	8b 50 04             	mov    0x4(%eax),%edx
+c01051c7:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01051ca:	89 10                	mov    %edx,(%eax)
+     list_init(&pra_list_head);
+     mm->sm_priv = &pra_list_head;
+c01051cc:	8b 45 08             	mov    0x8(%ebp),%eax
+c01051cf:	c7 40 14 68 0d 1b c0 	movl   $0xc01b0d68,0x14(%eax)
+     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
+     return 0;
+c01051d6:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01051db:	c9                   	leave  
+c01051dc:	c3                   	ret    
+
+c01051dd <_fifo_map_swappable>:
+/*
+ * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
+ */
+static int
+_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
+{
+c01051dd:	55                   	push   %ebp
+c01051de:	89 e5                	mov    %esp,%ebp
+c01051e0:	83 ec 28             	sub    $0x28,%esp
+    list_entry_t *head=(list_entry_t*) mm->sm_priv;
+c01051e3:	8b 45 08             	mov    0x8(%ebp),%eax
+c01051e6:	8b 40 14             	mov    0x14(%eax),%eax
+c01051e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    list_entry_t *entry=&(page->pra_page_link);
+c01051ec:	8b 45 10             	mov    0x10(%ebp),%eax
+c01051ef:	83 c0 14             	add    $0x14,%eax
+c01051f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ 
+    assert(entry != NULL && head != NULL);
+c01051f5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c01051f9:	74 06                	je     c0105201 <_fifo_map_swappable+0x24>
+c01051fb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01051ff:	75 16                	jne    c0105217 <_fifo_map_swappable+0x3a>
+c0105201:	68 10 c9 10 c0       	push   $0xc010c910
+c0105206:	68 2e c9 10 c0       	push   $0xc010c92e
+c010520b:	6a 32                	push   $0x32
+c010520d:	68 43 c9 10 c0       	push   $0xc010c943
+c0105212:	e8 dd b1 ff ff       	call   c01003f4 <__panic>
+c0105217:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010521a:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010521d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105220:	89 45 e8             	mov    %eax,-0x18(%ebp)
+ * Insert the new element @elm *before* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_before(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm->prev, listelm);
+c0105223:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0105226:	8b 00                	mov    (%eax),%eax
+c0105228:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010522b:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+c010522e:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c0105231:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0105234:	89 45 dc             	mov    %eax,-0x24(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c0105237:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010523a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010523d:	89 10                	mov    %edx,(%eax)
+c010523f:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0105242:	8b 10                	mov    (%eax),%edx
+c0105244:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0105247:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c010524a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010524d:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0105250:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c0105253:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0105256:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0105259:	89 10                	mov    %edx,(%eax)
+    //record the page access situlation
+    /*LAB3 EXERCISE 2: 2013011371*/
+    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
+    list_add_before(head, entry);
+    return 0;
+c010525b:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0105260:	c9                   	leave  
+c0105261:	c3                   	ret    
+
+c0105262 <_fifo_swap_out_victim>:
+ *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
+ *                            then set the addr of addr of this page to ptr_page.
+ */
+static int
+_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
+{
+c0105262:	55                   	push   %ebp
+c0105263:	89 e5                	mov    %esp,%ebp
+c0105265:	83 ec 28             	sub    $0x28,%esp
+     list_entry_t *head=(list_entry_t*) mm->sm_priv;
+c0105268:	8b 45 08             	mov    0x8(%ebp),%eax
+c010526b:	8b 40 14             	mov    0x14(%eax),%eax
+c010526e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+         assert(head != NULL);
+c0105271:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0105275:	75 16                	jne    c010528d <_fifo_swap_out_victim+0x2b>
+c0105277:	68 57 c9 10 c0       	push   $0xc010c957
+c010527c:	68 2e c9 10 c0       	push   $0xc010c92e
+c0105281:	6a 41                	push   $0x41
+c0105283:	68 43 c9 10 c0       	push   $0xc010c943
+c0105288:	e8 67 b1 ff ff       	call   c01003f4 <__panic>
+     assert(in_tick==0);
+c010528d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c0105291:	74 16                	je     c01052a9 <_fifo_swap_out_victim+0x47>
+c0105293:	68 64 c9 10 c0       	push   $0xc010c964
+c0105298:	68 2e c9 10 c0       	push   $0xc010c92e
+c010529d:	6a 42                	push   $0x42
+c010529f:	68 43 c9 10 c0       	push   $0xc010c943
+c01052a4:	e8 4b b1 ff ff       	call   c01003f4 <__panic>
+c01052a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01052ac:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c01052af:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01052b2:	8b 40 04             	mov    0x4(%eax),%eax
+     /* Select the victim */
+     /*LAB3 EXERCISE 2: 2013011371*/
+     //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
+     //(2)  set the addr of addr of this page to ptr_page
+     list_entry_t* victim = list_next(head);
+c01052b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01052b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01052bb:	89 45 e8             	mov    %eax,-0x18(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c01052be:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01052c1:	8b 40 04             	mov    0x4(%eax),%eax
+c01052c4:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c01052c7:	8b 12                	mov    (%edx),%edx
+c01052c9:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+c01052cc:	89 45 e0             	mov    %eax,-0x20(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c01052cf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01052d2:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c01052d5:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c01052d8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01052db:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c01052de:	89 10                	mov    %edx,(%eax)
+     list_del(victim);
+     *ptr_page = le2page(victim, pra_page_link);
+c01052e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01052e3:	8d 50 ec             	lea    -0x14(%eax),%edx
+c01052e6:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01052e9:	89 10                	mov    %edx,(%eax)
+     return 0;
+c01052eb:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01052f0:	c9                   	leave  
+c01052f1:	c3                   	ret    
+
+c01052f2 <_fifo_check_swap>:
+
+static int
+_fifo_check_swap(void) {
+c01052f2:	55                   	push   %ebp
+c01052f3:	89 e5                	mov    %esp,%ebp
+c01052f5:	83 ec 08             	sub    $0x8,%esp
+    cprintf("write Virt Page c in fifo_check_swap\n");
+c01052f8:	83 ec 0c             	sub    $0xc,%esp
+c01052fb:	68 70 c9 10 c0       	push   $0xc010c970
+c0105300:	e8 89 af ff ff       	call   c010028e <cprintf>
+c0105305:	83 c4 10             	add    $0x10,%esp
+    *(unsigned char *)0x3000 = 0x0c;
+c0105308:	b8 00 30 00 00       	mov    $0x3000,%eax
+c010530d:	c6 00 0c             	movb   $0xc,(%eax)
+    assert(pgfault_num==4);
+c0105310:	a1 ec ec 1a c0       	mov    0xc01aecec,%eax
+c0105315:	83 f8 04             	cmp    $0x4,%eax
+c0105318:	74 16                	je     c0105330 <_fifo_check_swap+0x3e>
+c010531a:	68 96 c9 10 c0       	push   $0xc010c996
+c010531f:	68 2e c9 10 c0       	push   $0xc010c92e
+c0105324:	6a 51                	push   $0x51
+c0105326:	68 43 c9 10 c0       	push   $0xc010c943
+c010532b:	e8 c4 b0 ff ff       	call   c01003f4 <__panic>
+    cprintf("write Virt Page a in fifo_check_swap\n");
+c0105330:	83 ec 0c             	sub    $0xc,%esp
+c0105333:	68 a8 c9 10 c0       	push   $0xc010c9a8
+c0105338:	e8 51 af ff ff       	call   c010028e <cprintf>
+c010533d:	83 c4 10             	add    $0x10,%esp
+    *(unsigned char *)0x1000 = 0x0a;
+c0105340:	b8 00 10 00 00       	mov    $0x1000,%eax
+c0105345:	c6 00 0a             	movb   $0xa,(%eax)
+    assert(pgfault_num==4);
+c0105348:	a1 ec ec 1a c0       	mov    0xc01aecec,%eax
+c010534d:	83 f8 04             	cmp    $0x4,%eax
+c0105350:	74 16                	je     c0105368 <_fifo_check_swap+0x76>
+c0105352:	68 96 c9 10 c0       	push   $0xc010c996
+c0105357:	68 2e c9 10 c0       	push   $0xc010c92e
+c010535c:	6a 54                	push   $0x54
+c010535e:	68 43 c9 10 c0       	push   $0xc010c943
+c0105363:	e8 8c b0 ff ff       	call   c01003f4 <__panic>
+    cprintf("write Virt Page d in fifo_check_swap\n");
+c0105368:	83 ec 0c             	sub    $0xc,%esp
+c010536b:	68 d0 c9 10 c0       	push   $0xc010c9d0
+c0105370:	e8 19 af ff ff       	call   c010028e <cprintf>
+c0105375:	83 c4 10             	add    $0x10,%esp
+    *(unsigned char *)0x4000 = 0x0d;
+c0105378:	b8 00 40 00 00       	mov    $0x4000,%eax
+c010537d:	c6 00 0d             	movb   $0xd,(%eax)
+    assert(pgfault_num==4);
+c0105380:	a1 ec ec 1a c0       	mov    0xc01aecec,%eax
+c0105385:	83 f8 04             	cmp    $0x4,%eax
+c0105388:	74 16                	je     c01053a0 <_fifo_check_swap+0xae>
+c010538a:	68 96 c9 10 c0       	push   $0xc010c996
+c010538f:	68 2e c9 10 c0       	push   $0xc010c92e
+c0105394:	6a 57                	push   $0x57
+c0105396:	68 43 c9 10 c0       	push   $0xc010c943
+c010539b:	e8 54 b0 ff ff       	call   c01003f4 <__panic>
+    cprintf("write Virt Page b in fifo_check_swap\n");
+c01053a0:	83 ec 0c             	sub    $0xc,%esp
+c01053a3:	68 f8 c9 10 c0       	push   $0xc010c9f8
+c01053a8:	e8 e1 ae ff ff       	call   c010028e <cprintf>
+c01053ad:	83 c4 10             	add    $0x10,%esp
+    *(unsigned char *)0x2000 = 0x0b;
+c01053b0:	b8 00 20 00 00       	mov    $0x2000,%eax
+c01053b5:	c6 00 0b             	movb   $0xb,(%eax)
+    assert(pgfault_num==4);
+c01053b8:	a1 ec ec 1a c0       	mov    0xc01aecec,%eax
+c01053bd:	83 f8 04             	cmp    $0x4,%eax
+c01053c0:	74 16                	je     c01053d8 <_fifo_check_swap+0xe6>
+c01053c2:	68 96 c9 10 c0       	push   $0xc010c996
+c01053c7:	68 2e c9 10 c0       	push   $0xc010c92e
+c01053cc:	6a 5a                	push   $0x5a
+c01053ce:	68 43 c9 10 c0       	push   $0xc010c943
+c01053d3:	e8 1c b0 ff ff       	call   c01003f4 <__panic>
+    cprintf("write Virt Page e in fifo_check_swap\n");
+c01053d8:	83 ec 0c             	sub    $0xc,%esp
+c01053db:	68 20 ca 10 c0       	push   $0xc010ca20
+c01053e0:	e8 a9 ae ff ff       	call   c010028e <cprintf>
+c01053e5:	83 c4 10             	add    $0x10,%esp
+    *(unsigned char *)0x5000 = 0x0e;
+c01053e8:	b8 00 50 00 00       	mov    $0x5000,%eax
+c01053ed:	c6 00 0e             	movb   $0xe,(%eax)
+    assert(pgfault_num==5);
+c01053f0:	a1 ec ec 1a c0       	mov    0xc01aecec,%eax
+c01053f5:	83 f8 05             	cmp    $0x5,%eax
+c01053f8:	74 16                	je     c0105410 <_fifo_check_swap+0x11e>
+c01053fa:	68 46 ca 10 c0       	push   $0xc010ca46
+c01053ff:	68 2e c9 10 c0       	push   $0xc010c92e
+c0105404:	6a 5d                	push   $0x5d
+c0105406:	68 43 c9 10 c0       	push   $0xc010c943
+c010540b:	e8 e4 af ff ff       	call   c01003f4 <__panic>
+    cprintf("write Virt Page b in fifo_check_swap\n");
+c0105410:	83 ec 0c             	sub    $0xc,%esp
+c0105413:	68 f8 c9 10 c0       	push   $0xc010c9f8
+c0105418:	e8 71 ae ff ff       	call   c010028e <cprintf>
+c010541d:	83 c4 10             	add    $0x10,%esp
+    *(unsigned char *)0x2000 = 0x0b;
+c0105420:	b8 00 20 00 00       	mov    $0x2000,%eax
+c0105425:	c6 00 0b             	movb   $0xb,(%eax)
+    assert(pgfault_num==5);
+c0105428:	a1 ec ec 1a c0       	mov    0xc01aecec,%eax
+c010542d:	83 f8 05             	cmp    $0x5,%eax
+c0105430:	74 16                	je     c0105448 <_fifo_check_swap+0x156>
+c0105432:	68 46 ca 10 c0       	push   $0xc010ca46
+c0105437:	68 2e c9 10 c0       	push   $0xc010c92e
+c010543c:	6a 60                	push   $0x60
+c010543e:	68 43 c9 10 c0       	push   $0xc010c943
+c0105443:	e8 ac af ff ff       	call   c01003f4 <__panic>
+    cprintf("write Virt Page a in fifo_check_swap\n");
+c0105448:	83 ec 0c             	sub    $0xc,%esp
+c010544b:	68 a8 c9 10 c0       	push   $0xc010c9a8
+c0105450:	e8 39 ae ff ff       	call   c010028e <cprintf>
+c0105455:	83 c4 10             	add    $0x10,%esp
+    *(unsigned char *)0x1000 = 0x0a;
+c0105458:	b8 00 10 00 00       	mov    $0x1000,%eax
+c010545d:	c6 00 0a             	movb   $0xa,(%eax)
+    assert(pgfault_num==6);
+c0105460:	a1 ec ec 1a c0       	mov    0xc01aecec,%eax
+c0105465:	83 f8 06             	cmp    $0x6,%eax
+c0105468:	74 16                	je     c0105480 <_fifo_check_swap+0x18e>
+c010546a:	68 55 ca 10 c0       	push   $0xc010ca55
+c010546f:	68 2e c9 10 c0       	push   $0xc010c92e
+c0105474:	6a 63                	push   $0x63
+c0105476:	68 43 c9 10 c0       	push   $0xc010c943
+c010547b:	e8 74 af ff ff       	call   c01003f4 <__panic>
+    cprintf("write Virt Page b in fifo_check_swap\n");
+c0105480:	83 ec 0c             	sub    $0xc,%esp
+c0105483:	68 f8 c9 10 c0       	push   $0xc010c9f8
+c0105488:	e8 01 ae ff ff       	call   c010028e <cprintf>
+c010548d:	83 c4 10             	add    $0x10,%esp
+    *(unsigned char *)0x2000 = 0x0b;
+c0105490:	b8 00 20 00 00       	mov    $0x2000,%eax
+c0105495:	c6 00 0b             	movb   $0xb,(%eax)
+    assert(pgfault_num==7);
+c0105498:	a1 ec ec 1a c0       	mov    0xc01aecec,%eax
+c010549d:	83 f8 07             	cmp    $0x7,%eax
+c01054a0:	74 16                	je     c01054b8 <_fifo_check_swap+0x1c6>
+c01054a2:	68 64 ca 10 c0       	push   $0xc010ca64
+c01054a7:	68 2e c9 10 c0       	push   $0xc010c92e
+c01054ac:	6a 66                	push   $0x66
+c01054ae:	68 43 c9 10 c0       	push   $0xc010c943
+c01054b3:	e8 3c af ff ff       	call   c01003f4 <__panic>
+    cprintf("write Virt Page c in fifo_check_swap\n");
+c01054b8:	83 ec 0c             	sub    $0xc,%esp
+c01054bb:	68 70 c9 10 c0       	push   $0xc010c970
+c01054c0:	e8 c9 ad ff ff       	call   c010028e <cprintf>
+c01054c5:	83 c4 10             	add    $0x10,%esp
+    *(unsigned char *)0x3000 = 0x0c;
+c01054c8:	b8 00 30 00 00       	mov    $0x3000,%eax
+c01054cd:	c6 00 0c             	movb   $0xc,(%eax)
+    assert(pgfault_num==8);
+c01054d0:	a1 ec ec 1a c0       	mov    0xc01aecec,%eax
+c01054d5:	83 f8 08             	cmp    $0x8,%eax
+c01054d8:	74 16                	je     c01054f0 <_fifo_check_swap+0x1fe>
+c01054da:	68 73 ca 10 c0       	push   $0xc010ca73
+c01054df:	68 2e c9 10 c0       	push   $0xc010c92e
+c01054e4:	6a 69                	push   $0x69
+c01054e6:	68 43 c9 10 c0       	push   $0xc010c943
+c01054eb:	e8 04 af ff ff       	call   c01003f4 <__panic>
+    cprintf("write Virt Page d in fifo_check_swap\n");
+c01054f0:	83 ec 0c             	sub    $0xc,%esp
+c01054f3:	68 d0 c9 10 c0       	push   $0xc010c9d0
+c01054f8:	e8 91 ad ff ff       	call   c010028e <cprintf>
+c01054fd:	83 c4 10             	add    $0x10,%esp
+    *(unsigned char *)0x4000 = 0x0d;
+c0105500:	b8 00 40 00 00       	mov    $0x4000,%eax
+c0105505:	c6 00 0d             	movb   $0xd,(%eax)
+    assert(pgfault_num==9);
+c0105508:	a1 ec ec 1a c0       	mov    0xc01aecec,%eax
+c010550d:	83 f8 09             	cmp    $0x9,%eax
+c0105510:	74 16                	je     c0105528 <_fifo_check_swap+0x236>
+c0105512:	68 82 ca 10 c0       	push   $0xc010ca82
+c0105517:	68 2e c9 10 c0       	push   $0xc010c92e
+c010551c:	6a 6c                	push   $0x6c
+c010551e:	68 43 c9 10 c0       	push   $0xc010c943
+c0105523:	e8 cc ae ff ff       	call   c01003f4 <__panic>
+    cprintf("write Virt Page e in fifo_check_swap\n");
+c0105528:	83 ec 0c             	sub    $0xc,%esp
+c010552b:	68 20 ca 10 c0       	push   $0xc010ca20
+c0105530:	e8 59 ad ff ff       	call   c010028e <cprintf>
+c0105535:	83 c4 10             	add    $0x10,%esp
+    *(unsigned char *)0x5000 = 0x0e;
+c0105538:	b8 00 50 00 00       	mov    $0x5000,%eax
+c010553d:	c6 00 0e             	movb   $0xe,(%eax)
+    assert(pgfault_num==10);
+c0105540:	a1 ec ec 1a c0       	mov    0xc01aecec,%eax
+c0105545:	83 f8 0a             	cmp    $0xa,%eax
+c0105548:	74 16                	je     c0105560 <_fifo_check_swap+0x26e>
+c010554a:	68 91 ca 10 c0       	push   $0xc010ca91
+c010554f:	68 2e c9 10 c0       	push   $0xc010c92e
+c0105554:	6a 6f                	push   $0x6f
+c0105556:	68 43 c9 10 c0       	push   $0xc010c943
+c010555b:	e8 94 ae ff ff       	call   c01003f4 <__panic>
+    cprintf("write Virt Page a in fifo_check_swap\n");
+c0105560:	83 ec 0c             	sub    $0xc,%esp
+c0105563:	68 a8 c9 10 c0       	push   $0xc010c9a8
+c0105568:	e8 21 ad ff ff       	call   c010028e <cprintf>
+c010556d:	83 c4 10             	add    $0x10,%esp
+    assert(*(unsigned char *)0x1000 == 0x0a);
+c0105570:	b8 00 10 00 00       	mov    $0x1000,%eax
+c0105575:	0f b6 00             	movzbl (%eax),%eax
+c0105578:	3c 0a                	cmp    $0xa,%al
+c010557a:	74 16                	je     c0105592 <_fifo_check_swap+0x2a0>
+c010557c:	68 a4 ca 10 c0       	push   $0xc010caa4
+c0105581:	68 2e c9 10 c0       	push   $0xc010c92e
+c0105586:	6a 71                	push   $0x71
+c0105588:	68 43 c9 10 c0       	push   $0xc010c943
+c010558d:	e8 62 ae ff ff       	call   c01003f4 <__panic>
+    *(unsigned char *)0x1000 = 0x0a;
+c0105592:	b8 00 10 00 00       	mov    $0x1000,%eax
+c0105597:	c6 00 0a             	movb   $0xa,(%eax)
+    assert(pgfault_num==11);
+c010559a:	a1 ec ec 1a c0       	mov    0xc01aecec,%eax
+c010559f:	83 f8 0b             	cmp    $0xb,%eax
+c01055a2:	74 16                	je     c01055ba <_fifo_check_swap+0x2c8>
+c01055a4:	68 c5 ca 10 c0       	push   $0xc010cac5
+c01055a9:	68 2e c9 10 c0       	push   $0xc010c92e
+c01055ae:	6a 73                	push   $0x73
+c01055b0:	68 43 c9 10 c0       	push   $0xc010c943
+c01055b5:	e8 3a ae ff ff       	call   c01003f4 <__panic>
+    return 0;
+c01055ba:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01055bf:	c9                   	leave  
+c01055c0:	c3                   	ret    
+
+c01055c1 <_fifo_init>:
+
+
+static int
+_fifo_init(void)
+{
+c01055c1:	55                   	push   %ebp
+c01055c2:	89 e5                	mov    %esp,%ebp
+    return 0;
+c01055c4:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01055c9:	5d                   	pop    %ebp
+c01055ca:	c3                   	ret    
+
+c01055cb <_fifo_set_unswappable>:
+
+static int
+_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
+{
+c01055cb:	55                   	push   %ebp
+c01055cc:	89 e5                	mov    %esp,%ebp
+    return 0;
+c01055ce:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01055d3:	5d                   	pop    %ebp
+c01055d4:	c3                   	ret    
+
+c01055d5 <_fifo_tick_event>:
+
+static int
+_fifo_tick_event(struct mm_struct *mm)
+{ return 0; }
+c01055d5:	55                   	push   %ebp
+c01055d6:	89 e5                	mov    %esp,%ebp
+c01055d8:	b8 00 00 00 00       	mov    $0x0,%eax
+c01055dd:	5d                   	pop    %ebp
+c01055de:	c3                   	ret    
+
+c01055df <lock_init>:
+#define local_intr_restore(x)   __intr_restore(x);
+
+typedef volatile bool lock_t;
+
+static inline void
+lock_init(lock_t *lock) {
+c01055df:	55                   	push   %ebp
+c01055e0:	89 e5                	mov    %esp,%ebp
+    *lock = 0;
+c01055e2:	8b 45 08             	mov    0x8(%ebp),%eax
+c01055e5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+}
+c01055eb:	90                   	nop
+c01055ec:	5d                   	pop    %ebp
+c01055ed:	c3                   	ret    
+
+c01055ee <mm_count>:
+bool user_mem_check(struct mm_struct *mm, uintptr_t start, size_t len, bool write);
+bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
+bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);
+
+static inline int
+mm_count(struct mm_struct *mm) {
+c01055ee:	55                   	push   %ebp
+c01055ef:	89 e5                	mov    %esp,%ebp
+    return mm->mm_count;
+c01055f1:	8b 45 08             	mov    0x8(%ebp),%eax
+c01055f4:	8b 40 18             	mov    0x18(%eax),%eax
+}
+c01055f7:	5d                   	pop    %ebp
+c01055f8:	c3                   	ret    
+
+c01055f9 <set_mm_count>:
+
+static inline void
+set_mm_count(struct mm_struct *mm, int val) {
+c01055f9:	55                   	push   %ebp
+c01055fa:	89 e5                	mov    %esp,%ebp
+    mm->mm_count = val;
+c01055fc:	8b 45 08             	mov    0x8(%ebp),%eax
+c01055ff:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0105602:	89 50 18             	mov    %edx,0x18(%eax)
+}
+c0105605:	90                   	nop
+c0105606:	5d                   	pop    %ebp
+c0105607:	c3                   	ret    
+
+c0105608 <pa2page>:
+page2pa(struct Page *page) {
+    return page2ppn(page) << PGSHIFT;
+}
+
+static inline struct Page *
+pa2page(uintptr_t pa) {
+c0105608:	55                   	push   %ebp
+c0105609:	89 e5                	mov    %esp,%ebp
+c010560b:	83 ec 08             	sub    $0x8,%esp
+    if (PPN(pa) >= npage) {
+c010560e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105611:	c1 e8 0c             	shr    $0xc,%eax
+c0105614:	89 c2                	mov    %eax,%edx
+c0105616:	a1 60 ec 1a c0       	mov    0xc01aec60,%eax
+c010561b:	39 c2                	cmp    %eax,%edx
+c010561d:	72 14                	jb     c0105633 <pa2page+0x2b>
+        panic("pa2page called with invalid pa");
+c010561f:	83 ec 04             	sub    $0x4,%esp
+c0105622:	68 e8 ca 10 c0       	push   $0xc010cae8
+c0105627:	6a 5e                	push   $0x5e
+c0105629:	68 07 cb 10 c0       	push   $0xc010cb07
+c010562e:	e8 c1 ad ff ff       	call   c01003f4 <__panic>
+    }
+    return &pages[PPN(pa)];
+c0105633:	a1 64 0d 1b c0       	mov    0xc01b0d64,%eax
+c0105638:	8b 55 08             	mov    0x8(%ebp),%edx
+c010563b:	c1 ea 0c             	shr    $0xc,%edx
+c010563e:	c1 e2 05             	shl    $0x5,%edx
+c0105641:	01 d0                	add    %edx,%eax
+}
+c0105643:	c9                   	leave  
+c0105644:	c3                   	ret    
+
+c0105645 <pde2page>:
+    }
+    return pa2page(PTE_ADDR(pte));
+}
+
+static inline struct Page *
+pde2page(pde_t pde) {
+c0105645:	55                   	push   %ebp
+c0105646:	89 e5                	mov    %esp,%ebp
+c0105648:	83 ec 08             	sub    $0x8,%esp
+    return pa2page(PDE_ADDR(pde));
+c010564b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010564e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0105653:	83 ec 0c             	sub    $0xc,%esp
+c0105656:	50                   	push   %eax
+c0105657:	e8 ac ff ff ff       	call   c0105608 <pa2page>
+c010565c:	83 c4 10             	add    $0x10,%esp
+}
+c010565f:	c9                   	leave  
+c0105660:	c3                   	ret    
+
+c0105661 <mm_create>:
+static void check_vma_struct(void);
+static void check_pgfault(void);
+
+// mm_create -  alloc a mm_struct & initialize it.
+struct mm_struct *
+mm_create(void) {
+c0105661:	55                   	push   %ebp
+c0105662:	89 e5                	mov    %esp,%ebp
+c0105664:	83 ec 18             	sub    $0x18,%esp
+    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
+c0105667:	83 ec 0c             	sub    $0xc,%esp
+c010566a:	6a 20                	push   $0x20
+c010566c:	e8 05 16 00 00       	call   c0106c76 <kmalloc>
+c0105671:	83 c4 10             	add    $0x10,%esp
+c0105674:	89 45 f4             	mov    %eax,-0xc(%ebp)
+
+    if (mm != NULL) {
+c0105677:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010567b:	74 7d                	je     c01056fa <mm_create+0x99>
+        list_init(&(mm->mmap_list));
+c010567d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105680:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c0105683:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105686:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0105689:	89 50 04             	mov    %edx,0x4(%eax)
+c010568c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010568f:	8b 50 04             	mov    0x4(%eax),%edx
+c0105692:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105695:	89 10                	mov    %edx,(%eax)
+        mm->mmap_cache = NULL;
+c0105697:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010569a:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+        mm->pgdir = NULL;
+c01056a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01056a4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
+        mm->map_count = 0;
+c01056ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01056ae:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
+
+        if (swap_init_ok) swap_init_mm(mm);
+c01056b5:	a1 f4 ec 1a c0       	mov    0xc01aecf4,%eax
+c01056ba:	85 c0                	test   %eax,%eax
+c01056bc:	74 10                	je     c01056ce <mm_create+0x6d>
+c01056be:	83 ec 0c             	sub    $0xc,%esp
+c01056c1:	ff 75 f4             	pushl  -0xc(%ebp)
+c01056c4:	e8 29 18 00 00       	call   c0106ef2 <swap_init_mm>
+c01056c9:	83 c4 10             	add    $0x10,%esp
+c01056cc:	eb 0a                	jmp    c01056d8 <mm_create+0x77>
+        else mm->sm_priv = NULL;
+c01056ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01056d1:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
+        
+        set_mm_count(mm, 0);
+c01056d8:	83 ec 08             	sub    $0x8,%esp
+c01056db:	6a 00                	push   $0x0
+c01056dd:	ff 75 f4             	pushl  -0xc(%ebp)
+c01056e0:	e8 14 ff ff ff       	call   c01055f9 <set_mm_count>
+c01056e5:	83 c4 10             	add    $0x10,%esp
+        lock_init(&(mm->mm_lock));
+c01056e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01056eb:	83 c0 1c             	add    $0x1c,%eax
+c01056ee:	83 ec 0c             	sub    $0xc,%esp
+c01056f1:	50                   	push   %eax
+c01056f2:	e8 e8 fe ff ff       	call   c01055df <lock_init>
+c01056f7:	83 c4 10             	add    $0x10,%esp
+    }    
+    return mm;
+c01056fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c01056fd:	c9                   	leave  
+c01056fe:	c3                   	ret    
+
+c01056ff <vma_create>:
+
+// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
+struct vma_struct *
+vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
+c01056ff:	55                   	push   %ebp
+c0105700:	89 e5                	mov    %esp,%ebp
+c0105702:	83 ec 18             	sub    $0x18,%esp
+    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
+c0105705:	83 ec 0c             	sub    $0xc,%esp
+c0105708:	6a 18                	push   $0x18
+c010570a:	e8 67 15 00 00       	call   c0106c76 <kmalloc>
+c010570f:	83 c4 10             	add    $0x10,%esp
+c0105712:	89 45 f4             	mov    %eax,-0xc(%ebp)
+
+    if (vma != NULL) {
+c0105715:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0105719:	74 1b                	je     c0105736 <vma_create+0x37>
+        vma->vm_start = vm_start;
+c010571b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010571e:	8b 55 08             	mov    0x8(%ebp),%edx
+c0105721:	89 50 04             	mov    %edx,0x4(%eax)
+        vma->vm_end = vm_end;
+c0105724:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105727:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010572a:	89 50 08             	mov    %edx,0x8(%eax)
+        vma->vm_flags = vm_flags;
+c010572d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105730:	8b 55 10             	mov    0x10(%ebp),%edx
+c0105733:	89 50 0c             	mov    %edx,0xc(%eax)
+    }
+    return vma;
+c0105736:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0105739:	c9                   	leave  
+c010573a:	c3                   	ret    
+
+c010573b <find_vma>:
+
+
+// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
+struct vma_struct *
+find_vma(struct mm_struct *mm, uintptr_t addr) {
+c010573b:	55                   	push   %ebp
+c010573c:	89 e5                	mov    %esp,%ebp
+c010573e:	83 ec 20             	sub    $0x20,%esp
+    struct vma_struct *vma = NULL;
+c0105741:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    if (mm != NULL) {
+c0105748:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010574c:	0f 84 95 00 00 00    	je     c01057e7 <find_vma+0xac>
+        vma = mm->mmap_cache;
+c0105752:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105755:	8b 40 08             	mov    0x8(%eax),%eax
+c0105758:	89 45 fc             	mov    %eax,-0x4(%ebp)
+        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
+c010575b:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+c010575f:	74 16                	je     c0105777 <find_vma+0x3c>
+c0105761:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0105764:	8b 40 04             	mov    0x4(%eax),%eax
+c0105767:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c010576a:	77 0b                	ja     c0105777 <find_vma+0x3c>
+c010576c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010576f:	8b 40 08             	mov    0x8(%eax),%eax
+c0105772:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0105775:	77 61                	ja     c01057d8 <find_vma+0x9d>
+                bool found = 0;
+c0105777:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+                list_entry_t *list = &(mm->mmap_list), *le = list;
+c010577e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105781:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0105784:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105787:	89 45 f4             	mov    %eax,-0xc(%ebp)
+                while ((le = list_next(le)) != list) {
+c010578a:	eb 28                	jmp    c01057b4 <find_vma+0x79>
+                    vma = le2vma(le, list_link);
+c010578c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010578f:	83 e8 10             	sub    $0x10,%eax
+c0105792:	89 45 fc             	mov    %eax,-0x4(%ebp)
+                    if (vma->vm_start<=addr && addr < vma->vm_end) {
+c0105795:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0105798:	8b 40 04             	mov    0x4(%eax),%eax
+c010579b:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c010579e:	77 14                	ja     c01057b4 <find_vma+0x79>
+c01057a0:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01057a3:	8b 40 08             	mov    0x8(%eax),%eax
+c01057a6:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c01057a9:	76 09                	jbe    c01057b4 <find_vma+0x79>
+                        found = 1;
+c01057ab:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
+                        break;
+c01057b2:	eb 17                	jmp    c01057cb <find_vma+0x90>
+c01057b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01057b7:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c01057ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01057bd:	8b 40 04             	mov    0x4(%eax),%eax
+    if (mm != NULL) {
+        vma = mm->mmap_cache;
+        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
+                bool found = 0;
+                list_entry_t *list = &(mm->mmap_list), *le = list;
+                while ((le = list_next(le)) != list) {
+c01057c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01057c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01057c6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c01057c9:	75 c1                	jne    c010578c <find_vma+0x51>
+                    if (vma->vm_start<=addr && addr < vma->vm_end) {
+                        found = 1;
+                        break;
+                    }
+                }
+                if (!found) {
+c01057cb:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
+c01057cf:	75 07                	jne    c01057d8 <find_vma+0x9d>
+                    vma = NULL;
+c01057d1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+                }
+        }
+        if (vma != NULL) {
+c01057d8:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+c01057dc:	74 09                	je     c01057e7 <find_vma+0xac>
+            mm->mmap_cache = vma;
+c01057de:	8b 45 08             	mov    0x8(%ebp),%eax
+c01057e1:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c01057e4:	89 50 08             	mov    %edx,0x8(%eax)
+        }
+    }
+    return vma;
+c01057e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+c01057ea:	c9                   	leave  
+c01057eb:	c3                   	ret    
+
+c01057ec <check_vma_overlap>:
+
+
+// check_vma_overlap - check if vma1 overlaps vma2 ?
+static inline void
+check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
+c01057ec:	55                   	push   %ebp
+c01057ed:	89 e5                	mov    %esp,%ebp
+c01057ef:	83 ec 08             	sub    $0x8,%esp
+    assert(prev->vm_start < prev->vm_end);
+c01057f2:	8b 45 08             	mov    0x8(%ebp),%eax
+c01057f5:	8b 50 04             	mov    0x4(%eax),%edx
+c01057f8:	8b 45 08             	mov    0x8(%ebp),%eax
+c01057fb:	8b 40 08             	mov    0x8(%eax),%eax
+c01057fe:	39 c2                	cmp    %eax,%edx
+c0105800:	72 16                	jb     c0105818 <check_vma_overlap+0x2c>
+c0105802:	68 15 cb 10 c0       	push   $0xc010cb15
+c0105807:	68 33 cb 10 c0       	push   $0xc010cb33
+c010580c:	6a 6b                	push   $0x6b
+c010580e:	68 48 cb 10 c0       	push   $0xc010cb48
+c0105813:	e8 dc ab ff ff       	call   c01003f4 <__panic>
+    assert(prev->vm_end <= next->vm_start);
+c0105818:	8b 45 08             	mov    0x8(%ebp),%eax
+c010581b:	8b 50 08             	mov    0x8(%eax),%edx
+c010581e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105821:	8b 40 04             	mov    0x4(%eax),%eax
+c0105824:	39 c2                	cmp    %eax,%edx
+c0105826:	76 16                	jbe    c010583e <check_vma_overlap+0x52>
+c0105828:	68 58 cb 10 c0       	push   $0xc010cb58
+c010582d:	68 33 cb 10 c0       	push   $0xc010cb33
+c0105832:	6a 6c                	push   $0x6c
+c0105834:	68 48 cb 10 c0       	push   $0xc010cb48
+c0105839:	e8 b6 ab ff ff       	call   c01003f4 <__panic>
+    assert(next->vm_start < next->vm_end);
+c010583e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105841:	8b 50 04             	mov    0x4(%eax),%edx
+c0105844:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105847:	8b 40 08             	mov    0x8(%eax),%eax
+c010584a:	39 c2                	cmp    %eax,%edx
+c010584c:	72 16                	jb     c0105864 <check_vma_overlap+0x78>
+c010584e:	68 77 cb 10 c0       	push   $0xc010cb77
+c0105853:	68 33 cb 10 c0       	push   $0xc010cb33
+c0105858:	6a 6d                	push   $0x6d
+c010585a:	68 48 cb 10 c0       	push   $0xc010cb48
+c010585f:	e8 90 ab ff ff       	call   c01003f4 <__panic>
+}
+c0105864:	90                   	nop
+c0105865:	c9                   	leave  
+c0105866:	c3                   	ret    
+
+c0105867 <insert_vma_struct>:
+
+
+// insert_vma_struct -insert vma in mm's list link
+void
+insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
+c0105867:	55                   	push   %ebp
+c0105868:	89 e5                	mov    %esp,%ebp
+c010586a:	83 ec 38             	sub    $0x38,%esp
+    assert(vma->vm_start < vma->vm_end);
+c010586d:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105870:	8b 50 04             	mov    0x4(%eax),%edx
+c0105873:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105876:	8b 40 08             	mov    0x8(%eax),%eax
+c0105879:	39 c2                	cmp    %eax,%edx
+c010587b:	72 16                	jb     c0105893 <insert_vma_struct+0x2c>
+c010587d:	68 95 cb 10 c0       	push   $0xc010cb95
+c0105882:	68 33 cb 10 c0       	push   $0xc010cb33
+c0105887:	6a 74                	push   $0x74
+c0105889:	68 48 cb 10 c0       	push   $0xc010cb48
+c010588e:	e8 61 ab ff ff       	call   c01003f4 <__panic>
+    list_entry_t *list = &(mm->mmap_list);
+c0105893:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105896:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    list_entry_t *le_prev = list, *le_next;
+c0105899:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010589c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+
+        list_entry_t *le = list;
+c010589f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01058a2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        while ((le = list_next(le)) != list) {
+c01058a5:	eb 1f                	jmp    c01058c6 <insert_vma_struct+0x5f>
+            struct vma_struct *mmap_prev = le2vma(le, list_link);
+c01058a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01058aa:	83 e8 10             	sub    $0x10,%eax
+c01058ad:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            if (mmap_prev->vm_start > vma->vm_start) {
+c01058b0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01058b3:	8b 50 04             	mov    0x4(%eax),%edx
+c01058b6:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01058b9:	8b 40 04             	mov    0x4(%eax),%eax
+c01058bc:	39 c2                	cmp    %eax,%edx
+c01058be:	77 1f                	ja     c01058df <insert_vma_struct+0x78>
+                break;
+            }
+            le_prev = le;
+c01058c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01058c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01058c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01058c9:	89 45 d8             	mov    %eax,-0x28(%ebp)
+c01058cc:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c01058cf:	8b 40 04             	mov    0x4(%eax),%eax
+    assert(vma->vm_start < vma->vm_end);
+    list_entry_t *list = &(mm->mmap_list);
+    list_entry_t *le_prev = list, *le_next;
+
+        list_entry_t *le = list;
+        while ((le = list_next(le)) != list) {
+c01058d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01058d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01058d8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c01058db:	75 ca                	jne    c01058a7 <insert_vma_struct+0x40>
+c01058dd:	eb 01                	jmp    c01058e0 <insert_vma_struct+0x79>
+            struct vma_struct *mmap_prev = le2vma(le, list_link);
+            if (mmap_prev->vm_start > vma->vm_start) {
+                break;
+c01058df:	90                   	nop
+c01058e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01058e3:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c01058e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01058e9:	8b 40 04             	mov    0x4(%eax),%eax
+            }
+            le_prev = le;
+        }
+
+    le_next = list_next(le_prev);
+c01058ec:	89 45 dc             	mov    %eax,-0x24(%ebp)
+
+    /* check overlap */
+    if (le_prev != list) {
+c01058ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01058f2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c01058f5:	74 15                	je     c010590c <insert_vma_struct+0xa5>
+        check_vma_overlap(le2vma(le_prev, list_link), vma);
+c01058f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01058fa:	83 e8 10             	sub    $0x10,%eax
+c01058fd:	83 ec 08             	sub    $0x8,%esp
+c0105900:	ff 75 0c             	pushl  0xc(%ebp)
+c0105903:	50                   	push   %eax
+c0105904:	e8 e3 fe ff ff       	call   c01057ec <check_vma_overlap>
+c0105909:	83 c4 10             	add    $0x10,%esp
+    }
+    if (le_next != list) {
+c010590c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010590f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c0105912:	74 15                	je     c0105929 <insert_vma_struct+0xc2>
+        check_vma_overlap(vma, le2vma(le_next, list_link));
+c0105914:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0105917:	83 e8 10             	sub    $0x10,%eax
+c010591a:	83 ec 08             	sub    $0x8,%esp
+c010591d:	50                   	push   %eax
+c010591e:	ff 75 0c             	pushl  0xc(%ebp)
+c0105921:	e8 c6 fe ff ff       	call   c01057ec <check_vma_overlap>
+c0105926:	83 c4 10             	add    $0x10,%esp
+    }
+
+    vma->vm_mm = mm;
+c0105929:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010592c:	8b 55 08             	mov    0x8(%ebp),%edx
+c010592f:	89 10                	mov    %edx,(%eax)
+    list_add_after(le_prev, &(vma->list_link));
+c0105931:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105934:	8d 50 10             	lea    0x10(%eax),%edx
+c0105937:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010593a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c010593d:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+ * Insert the new element @elm *after* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_after(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm, listelm->next);
+c0105940:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0105943:	8b 40 04             	mov    0x4(%eax),%eax
+c0105946:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0105949:	89 55 d0             	mov    %edx,-0x30(%ebp)
+c010594c:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c010594f:	89 55 cc             	mov    %edx,-0x34(%ebp)
+c0105952:	89 45 c8             	mov    %eax,-0x38(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c0105955:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0105958:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c010595b:	89 10                	mov    %edx,(%eax)
+c010595d:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0105960:	8b 10                	mov    (%eax),%edx
+c0105962:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0105965:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c0105968:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010596b:	8b 55 c8             	mov    -0x38(%ebp),%edx
+c010596e:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c0105971:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0105974:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c0105977:	89 10                	mov    %edx,(%eax)
+
+    mm->map_count ++;
+c0105979:	8b 45 08             	mov    0x8(%ebp),%eax
+c010597c:	8b 40 10             	mov    0x10(%eax),%eax
+c010597f:	8d 50 01             	lea    0x1(%eax),%edx
+c0105982:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105985:	89 50 10             	mov    %edx,0x10(%eax)
+}
+c0105988:	90                   	nop
+c0105989:	c9                   	leave  
+c010598a:	c3                   	ret    
+
+c010598b <mm_destroy>:
+
+// mm_destroy - free mm and mm internal fields
+void
+mm_destroy(struct mm_struct *mm) {
+c010598b:	55                   	push   %ebp
+c010598c:	89 e5                	mov    %esp,%ebp
+c010598e:	83 ec 28             	sub    $0x28,%esp
+    assert(mm_count(mm) == 0);
+c0105991:	ff 75 08             	pushl  0x8(%ebp)
+c0105994:	e8 55 fc ff ff       	call   c01055ee <mm_count>
+c0105999:	83 c4 04             	add    $0x4,%esp
+c010599c:	85 c0                	test   %eax,%eax
+c010599e:	74 19                	je     c01059b9 <mm_destroy+0x2e>
+c01059a0:	68 b1 cb 10 c0       	push   $0xc010cbb1
+c01059a5:	68 33 cb 10 c0       	push   $0xc010cb33
+c01059aa:	68 94 00 00 00       	push   $0x94
+c01059af:	68 48 cb 10 c0       	push   $0xc010cb48
+c01059b4:	e8 3b aa ff ff       	call   c01003f4 <__panic>
+
+    list_entry_t *list = &(mm->mmap_list), *le;
+c01059b9:	8b 45 08             	mov    0x8(%ebp),%eax
+c01059bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    while ((le = list_next(list)) != list) {
+c01059bf:	eb 3a                	jmp    c01059fb <mm_destroy+0x70>
+c01059c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01059c4:	89 45 e8             	mov    %eax,-0x18(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c01059c7:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01059ca:	8b 40 04             	mov    0x4(%eax),%eax
+c01059cd:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c01059d0:	8b 12                	mov    (%edx),%edx
+c01059d2:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+c01059d5:	89 45 e0             	mov    %eax,-0x20(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c01059d8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01059db:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c01059de:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c01059e1:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01059e4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c01059e7:	89 10                	mov    %edx,(%eax)
+        list_del(le);
+        kfree(le2vma(le, list_link));  //kfree vma        
+c01059e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01059ec:	83 e8 10             	sub    $0x10,%eax
+c01059ef:	83 ec 0c             	sub    $0xc,%esp
+c01059f2:	50                   	push   %eax
+c01059f3:	e8 96 12 00 00       	call   c0106c8e <kfree>
+c01059f8:	83 c4 10             	add    $0x10,%esp
+c01059fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01059fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c0105a01:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0105a04:	8b 40 04             	mov    0x4(%eax),%eax
+void
+mm_destroy(struct mm_struct *mm) {
+    assert(mm_count(mm) == 0);
+
+    list_entry_t *list = &(mm->mmap_list), *le;
+    while ((le = list_next(list)) != list) {
+c0105a07:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0105a0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105a0d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0105a10:	75 af                	jne    c01059c1 <mm_destroy+0x36>
+        list_del(le);
+        kfree(le2vma(le, list_link));  //kfree vma        
+    }
+    kfree(mm); //kfree mm
+c0105a12:	83 ec 0c             	sub    $0xc,%esp
+c0105a15:	ff 75 08             	pushl  0x8(%ebp)
+c0105a18:	e8 71 12 00 00       	call   c0106c8e <kfree>
+c0105a1d:	83 c4 10             	add    $0x10,%esp
+    mm=NULL;
+c0105a20:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
+}
+c0105a27:	90                   	nop
+c0105a28:	c9                   	leave  
+c0105a29:	c3                   	ret    
+
+c0105a2a <mm_map>:
+
+int
+mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
+       struct vma_struct **vma_store) {
+c0105a2a:	55                   	push   %ebp
+c0105a2b:	89 e5                	mov    %esp,%ebp
+c0105a2d:	83 ec 28             	sub    $0x28,%esp
+    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
+c0105a30:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105a33:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0105a36:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105a39:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0105a3e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0105a41:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
+c0105a48:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0105a4b:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105a4e:	01 c2                	add    %eax,%edx
+c0105a50:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0105a53:	01 d0                	add    %edx,%eax
+c0105a55:	83 e8 01             	sub    $0x1,%eax
+c0105a58:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0105a5b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0105a5e:	ba 00 00 00 00       	mov    $0x0,%edx
+c0105a63:	f7 75 e8             	divl   -0x18(%ebp)
+c0105a66:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0105a69:	29 d0                	sub    %edx,%eax
+c0105a6b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    if (!USER_ACCESS(start, end)) {
+c0105a6e:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
+c0105a75:	76 11                	jbe    c0105a88 <mm_map+0x5e>
+c0105a77:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0105a7a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
+c0105a7d:	73 09                	jae    c0105a88 <mm_map+0x5e>
+c0105a7f:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
+c0105a86:	76 0a                	jbe    c0105a92 <mm_map+0x68>
+        return -E_INVAL;
+c0105a88:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+c0105a8d:	e9 9e 00 00 00       	jmp    c0105b30 <mm_map+0x106>
+    }
+
+    assert(mm != NULL);
+c0105a92:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0105a96:	75 19                	jne    c0105ab1 <mm_map+0x87>
+c0105a98:	68 c3 cb 10 c0       	push   $0xc010cbc3
+c0105a9d:	68 33 cb 10 c0       	push   $0xc010cb33
+c0105aa2:	68 a7 00 00 00       	push   $0xa7
+c0105aa7:	68 48 cb 10 c0       	push   $0xc010cb48
+c0105aac:	e8 43 a9 ff ff       	call   c01003f4 <__panic>
+
+    int ret = -E_INVAL;
+c0105ab1:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
+
+    struct vma_struct *vma;
+    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
+c0105ab8:	83 ec 08             	sub    $0x8,%esp
+c0105abb:	ff 75 ec             	pushl  -0x14(%ebp)
+c0105abe:	ff 75 08             	pushl  0x8(%ebp)
+c0105ac1:	e8 75 fc ff ff       	call   c010573b <find_vma>
+c0105ac6:	83 c4 10             	add    $0x10,%esp
+c0105ac9:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c0105acc:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c0105ad0:	74 0b                	je     c0105add <mm_map+0xb3>
+c0105ad2:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0105ad5:	8b 40 04             	mov    0x4(%eax),%eax
+c0105ad8:	3b 45 e0             	cmp    -0x20(%ebp),%eax
+c0105adb:	72 4c                	jb     c0105b29 <mm_map+0xff>
+        goto out;
+    }
+    ret = -E_NO_MEM;
+c0105add:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
+
+    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
+c0105ae4:	83 ec 04             	sub    $0x4,%esp
+c0105ae7:	ff 75 14             	pushl  0x14(%ebp)
+c0105aea:	ff 75 e0             	pushl  -0x20(%ebp)
+c0105aed:	ff 75 ec             	pushl  -0x14(%ebp)
+c0105af0:	e8 0a fc ff ff       	call   c01056ff <vma_create>
+c0105af5:	83 c4 10             	add    $0x10,%esp
+c0105af8:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c0105afb:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c0105aff:	74 2b                	je     c0105b2c <mm_map+0x102>
+        goto out;
+    }
+    insert_vma_struct(mm, vma);
+c0105b01:	83 ec 08             	sub    $0x8,%esp
+c0105b04:	ff 75 dc             	pushl  -0x24(%ebp)
+c0105b07:	ff 75 08             	pushl  0x8(%ebp)
+c0105b0a:	e8 58 fd ff ff       	call   c0105867 <insert_vma_struct>
+c0105b0f:	83 c4 10             	add    $0x10,%esp
+    if (vma_store != NULL) {
+c0105b12:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
+c0105b16:	74 08                	je     c0105b20 <mm_map+0xf6>
+        *vma_store = vma;
+c0105b18:	8b 45 18             	mov    0x18(%ebp),%eax
+c0105b1b:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0105b1e:	89 10                	mov    %edx,(%eax)
+    }
+    ret = 0;
+c0105b20:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0105b27:	eb 04                	jmp    c0105b2d <mm_map+0x103>
+
+    int ret = -E_INVAL;
+
+    struct vma_struct *vma;
+    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
+        goto out;
+c0105b29:	90                   	nop
+c0105b2a:	eb 01                	jmp    c0105b2d <mm_map+0x103>
+    }
+    ret = -E_NO_MEM;
+
+    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
+        goto out;
+c0105b2c:	90                   	nop
+        *vma_store = vma;
+    }
+    ret = 0;
+
+out:
+    return ret;
+c0105b2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0105b30:	c9                   	leave  
+c0105b31:	c3                   	ret    
+
+c0105b32 <dup_mmap>:
+
+int
+dup_mmap(struct mm_struct *to, struct mm_struct *from) {
+c0105b32:	55                   	push   %ebp
+c0105b33:	89 e5                	mov    %esp,%ebp
+c0105b35:	53                   	push   %ebx
+c0105b36:	83 ec 24             	sub    $0x24,%esp
+    assert(to != NULL && from != NULL);
+c0105b39:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0105b3d:	74 06                	je     c0105b45 <dup_mmap+0x13>
+c0105b3f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c0105b43:	75 19                	jne    c0105b5e <dup_mmap+0x2c>
+c0105b45:	68 ce cb 10 c0       	push   $0xc010cbce
+c0105b4a:	68 33 cb 10 c0       	push   $0xc010cb33
+c0105b4f:	68 c0 00 00 00       	push   $0xc0
+c0105b54:	68 48 cb 10 c0       	push   $0xc010cb48
+c0105b59:	e8 96 a8 ff ff       	call   c01003f4 <__panic>
+    list_entry_t *list = &(from->mmap_list), *le = list;
+c0105b5e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105b61:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0105b64:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105b67:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    while ((le = list_prev(le)) != list) {
+c0105b6a:	e9 86 00 00 00       	jmp    c0105bf5 <dup_mmap+0xc3>
+        struct vma_struct *vma, *nvma;
+        vma = le2vma(le, list_link);
+c0105b6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105b72:	83 e8 10             	sub    $0x10,%eax
+c0105b75:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
+c0105b78:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0105b7b:	8b 48 0c             	mov    0xc(%eax),%ecx
+c0105b7e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0105b81:	8b 50 08             	mov    0x8(%eax),%edx
+c0105b84:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0105b87:	8b 40 04             	mov    0x4(%eax),%eax
+c0105b8a:	83 ec 04             	sub    $0x4,%esp
+c0105b8d:	51                   	push   %ecx
+c0105b8e:	52                   	push   %edx
+c0105b8f:	50                   	push   %eax
+c0105b90:	e8 6a fb ff ff       	call   c01056ff <vma_create>
+c0105b95:	83 c4 10             	add    $0x10,%esp
+c0105b98:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        if (nvma == NULL) {
+c0105b9b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c0105b9f:	75 07                	jne    c0105ba8 <dup_mmap+0x76>
+            return -E_NO_MEM;
+c0105ba1:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
+c0105ba6:	eb 6c                	jmp    c0105c14 <dup_mmap+0xe2>
+        }
+
+        insert_vma_struct(to, nvma);
+c0105ba8:	83 ec 08             	sub    $0x8,%esp
+c0105bab:	ff 75 e8             	pushl  -0x18(%ebp)
+c0105bae:	ff 75 08             	pushl  0x8(%ebp)
+c0105bb1:	e8 b1 fc ff ff       	call   c0105867 <insert_vma_struct>
+c0105bb6:	83 c4 10             	add    $0x10,%esp
+
+        bool share = 0;
+c0105bb9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
+c0105bc0:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0105bc3:	8b 58 08             	mov    0x8(%eax),%ebx
+c0105bc6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0105bc9:	8b 48 04             	mov    0x4(%eax),%ecx
+c0105bcc:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105bcf:	8b 50 0c             	mov    0xc(%eax),%edx
+c0105bd2:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105bd5:	8b 40 0c             	mov    0xc(%eax),%eax
+c0105bd8:	83 ec 0c             	sub    $0xc,%esp
+c0105bdb:	ff 75 e4             	pushl  -0x1c(%ebp)
+c0105bde:	53                   	push   %ebx
+c0105bdf:	51                   	push   %ecx
+c0105be0:	52                   	push   %edx
+c0105be1:	50                   	push   %eax
+c0105be2:	e8 20 e7 ff ff       	call   c0104307 <copy_range>
+c0105be7:	83 c4 20             	add    $0x20,%esp
+c0105bea:	85 c0                	test   %eax,%eax
+c0105bec:	74 07                	je     c0105bf5 <dup_mmap+0xc3>
+            return -E_NO_MEM;
+c0105bee:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
+c0105bf3:	eb 1f                	jmp    c0105c14 <dup_mmap+0xe2>
+c0105bf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105bf8:	89 45 e0             	mov    %eax,-0x20(%ebp)
+ * list_prev - get the previous entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_prev(list_entry_t *listelm) {
+    return listelm->prev;
+c0105bfb:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0105bfe:	8b 00                	mov    (%eax),%eax
+
+int
+dup_mmap(struct mm_struct *to, struct mm_struct *from) {
+    assert(to != NULL && from != NULL);
+    list_entry_t *list = &(from->mmap_list), *le = list;
+    while ((le = list_prev(le)) != list) {
+c0105c00:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0105c03:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105c06:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c0105c09:	0f 85 60 ff ff ff    	jne    c0105b6f <dup_mmap+0x3d>
+        bool share = 0;
+        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
+            return -E_NO_MEM;
+        }
+    }
+    return 0;
+c0105c0f:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0105c14:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+c0105c17:	c9                   	leave  
+c0105c18:	c3                   	ret    
+
+c0105c19 <exit_mmap>:
+
+void
+exit_mmap(struct mm_struct *mm) {
+c0105c19:	55                   	push   %ebp
+c0105c1a:	89 e5                	mov    %esp,%ebp
+c0105c1c:	83 ec 28             	sub    $0x28,%esp
+    assert(mm != NULL && mm_count(mm) == 0);
+c0105c1f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0105c23:	74 0f                	je     c0105c34 <exit_mmap+0x1b>
+c0105c25:	ff 75 08             	pushl  0x8(%ebp)
+c0105c28:	e8 c1 f9 ff ff       	call   c01055ee <mm_count>
+c0105c2d:	83 c4 04             	add    $0x4,%esp
+c0105c30:	85 c0                	test   %eax,%eax
+c0105c32:	74 19                	je     c0105c4d <exit_mmap+0x34>
+c0105c34:	68 ec cb 10 c0       	push   $0xc010cbec
+c0105c39:	68 33 cb 10 c0       	push   $0xc010cb33
+c0105c3e:	68 d6 00 00 00       	push   $0xd6
+c0105c43:	68 48 cb 10 c0       	push   $0xc010cb48
+c0105c48:	e8 a7 a7 ff ff       	call   c01003f4 <__panic>
+    pde_t *pgdir = mm->pgdir;
+c0105c4d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105c50:	8b 40 0c             	mov    0xc(%eax),%eax
+c0105c53:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    list_entry_t *list = &(mm->mmap_list), *le = list;
+c0105c56:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105c59:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0105c5c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0105c5f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    while ((le = list_next(le)) != list) {
+c0105c62:	eb 25                	jmp    c0105c89 <exit_mmap+0x70>
+        struct vma_struct *vma = le2vma(le, list_link);
+c0105c64:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105c67:	83 e8 10             	sub    $0x10,%eax
+c0105c6a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        unmap_range(pgdir, vma->vm_start, vma->vm_end);
+c0105c6d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0105c70:	8b 50 08             	mov    0x8(%eax),%edx
+c0105c73:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0105c76:	8b 40 04             	mov    0x4(%eax),%eax
+c0105c79:	83 ec 04             	sub    $0x4,%esp
+c0105c7c:	52                   	push   %edx
+c0105c7d:	50                   	push   %eax
+c0105c7e:	ff 75 f0             	pushl  -0x10(%ebp)
+c0105c81:	e8 ba e4 ff ff       	call   c0104140 <unmap_range>
+c0105c86:	83 c4 10             	add    $0x10,%esp
+c0105c89:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105c8c:	89 45 dc             	mov    %eax,-0x24(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c0105c8f:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0105c92:	8b 40 04             	mov    0x4(%eax),%eax
+void
+exit_mmap(struct mm_struct *mm) {
+    assert(mm != NULL && mm_count(mm) == 0);
+    pde_t *pgdir = mm->pgdir;
+    list_entry_t *list = &(mm->mmap_list), *le = list;
+    while ((le = list_next(le)) != list) {
+c0105c95:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0105c98:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105c9b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c0105c9e:	75 c4                	jne    c0105c64 <exit_mmap+0x4b>
+        struct vma_struct *vma = le2vma(le, list_link);
+        unmap_range(pgdir, vma->vm_start, vma->vm_end);
+    }
+    while ((le = list_next(le)) != list) {
+c0105ca0:	eb 25                	jmp    c0105cc7 <exit_mmap+0xae>
+        struct vma_struct *vma = le2vma(le, list_link);
+c0105ca2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105ca5:	83 e8 10             	sub    $0x10,%eax
+c0105ca8:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        exit_range(pgdir, vma->vm_start, vma->vm_end);
+c0105cab:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0105cae:	8b 50 08             	mov    0x8(%eax),%edx
+c0105cb1:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0105cb4:	8b 40 04             	mov    0x4(%eax),%eax
+c0105cb7:	83 ec 04             	sub    $0x4,%esp
+c0105cba:	52                   	push   %edx
+c0105cbb:	50                   	push   %eax
+c0105cbc:	ff 75 f0             	pushl  -0x10(%ebp)
+c0105cbf:	e8 4f e5 ff ff       	call   c0104213 <exit_range>
+c0105cc4:	83 c4 10             	add    $0x10,%esp
+c0105cc7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105cca:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0105ccd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0105cd0:	8b 40 04             	mov    0x4(%eax),%eax
+    list_entry_t *list = &(mm->mmap_list), *le = list;
+    while ((le = list_next(le)) != list) {
+        struct vma_struct *vma = le2vma(le, list_link);
+        unmap_range(pgdir, vma->vm_start, vma->vm_end);
+    }
+    while ((le = list_next(le)) != list) {
+c0105cd3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0105cd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105cd9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c0105cdc:	75 c4                	jne    c0105ca2 <exit_mmap+0x89>
+        struct vma_struct *vma = le2vma(le, list_link);
+        exit_range(pgdir, vma->vm_start, vma->vm_end);
+    }
+}
+c0105cde:	90                   	nop
+c0105cdf:	c9                   	leave  
+c0105ce0:	c3                   	ret    
+
+c0105ce1 <copy_from_user>:
+
+bool
+copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
+c0105ce1:	55                   	push   %ebp
+c0105ce2:	89 e5                	mov    %esp,%ebp
+c0105ce4:	83 ec 08             	sub    $0x8,%esp
+    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
+c0105ce7:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105cea:	ff 75 18             	pushl  0x18(%ebp)
+c0105ced:	ff 75 14             	pushl  0x14(%ebp)
+c0105cf0:	50                   	push   %eax
+c0105cf1:	ff 75 08             	pushl  0x8(%ebp)
+c0105cf4:	e8 74 08 00 00       	call   c010656d <user_mem_check>
+c0105cf9:	83 c4 10             	add    $0x10,%esp
+c0105cfc:	85 c0                	test   %eax,%eax
+c0105cfe:	75 07                	jne    c0105d07 <copy_from_user+0x26>
+        return 0;
+c0105d00:	b8 00 00 00 00       	mov    $0x0,%eax
+c0105d05:	eb 19                	jmp    c0105d20 <copy_from_user+0x3f>
+    }
+    memcpy(dst, src, len);
+c0105d07:	83 ec 04             	sub    $0x4,%esp
+c0105d0a:	ff 75 14             	pushl  0x14(%ebp)
+c0105d0d:	ff 75 10             	pushl  0x10(%ebp)
+c0105d10:	ff 75 0c             	pushl  0xc(%ebp)
+c0105d13:	e8 34 54 00 00       	call   c010b14c <memcpy>
+c0105d18:	83 c4 10             	add    $0x10,%esp
+    return 1;
+c0105d1b:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+c0105d20:	c9                   	leave  
+c0105d21:	c3                   	ret    
+
+c0105d22 <copy_to_user>:
+
+bool
+copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
+c0105d22:	55                   	push   %ebp
+c0105d23:	89 e5                	mov    %esp,%ebp
+c0105d25:	83 ec 08             	sub    $0x8,%esp
+    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
+c0105d28:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105d2b:	6a 01                	push   $0x1
+c0105d2d:	ff 75 14             	pushl  0x14(%ebp)
+c0105d30:	50                   	push   %eax
+c0105d31:	ff 75 08             	pushl  0x8(%ebp)
+c0105d34:	e8 34 08 00 00       	call   c010656d <user_mem_check>
+c0105d39:	83 c4 10             	add    $0x10,%esp
+c0105d3c:	85 c0                	test   %eax,%eax
+c0105d3e:	75 07                	jne    c0105d47 <copy_to_user+0x25>
+        return 0;
+c0105d40:	b8 00 00 00 00       	mov    $0x0,%eax
+c0105d45:	eb 19                	jmp    c0105d60 <copy_to_user+0x3e>
+    }
+    memcpy(dst, src, len);
+c0105d47:	83 ec 04             	sub    $0x4,%esp
+c0105d4a:	ff 75 14             	pushl  0x14(%ebp)
+c0105d4d:	ff 75 10             	pushl  0x10(%ebp)
+c0105d50:	ff 75 0c             	pushl  0xc(%ebp)
+c0105d53:	e8 f4 53 00 00       	call   c010b14c <memcpy>
+c0105d58:	83 c4 10             	add    $0x10,%esp
+    return 1;
+c0105d5b:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+c0105d60:	c9                   	leave  
+c0105d61:	c3                   	ret    
+
+c0105d62 <vmm_init>:
+
+// vmm_init - initialize virtual memory management
+//          - now just call check_vmm to check correctness of vmm
+void
+vmm_init(void) {
+c0105d62:	55                   	push   %ebp
+c0105d63:	89 e5                	mov    %esp,%ebp
+c0105d65:	83 ec 08             	sub    $0x8,%esp
+    check_vmm();
+c0105d68:	e8 03 00 00 00       	call   c0105d70 <check_vmm>
+}
+c0105d6d:	90                   	nop
+c0105d6e:	c9                   	leave  
+c0105d6f:	c3                   	ret    
+
+c0105d70 <check_vmm>:
+
+// check_vmm - check correctness of vmm
+static void
+check_vmm(void) {
+c0105d70:	55                   	push   %ebp
+c0105d71:	89 e5                	mov    %esp,%ebp
+c0105d73:	83 ec 18             	sub    $0x18,%esp
+    size_t nr_free_pages_store = nr_free_pages();
+c0105d76:	e8 92 db ff ff       	call   c010390d <nr_free_pages>
+c0105d7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    
+    check_vma_struct();
+c0105d7e:	e8 18 00 00 00       	call   c0105d9b <check_vma_struct>
+    check_pgfault();
+c0105d83:	e8 10 04 00 00       	call   c0106198 <check_pgfault>
+
+    cprintf("check_vmm() succeeded.\n");
+c0105d88:	83 ec 0c             	sub    $0xc,%esp
+c0105d8b:	68 0c cc 10 c0       	push   $0xc010cc0c
+c0105d90:	e8 f9 a4 ff ff       	call   c010028e <cprintf>
+c0105d95:	83 c4 10             	add    $0x10,%esp
+}
+c0105d98:	90                   	nop
+c0105d99:	c9                   	leave  
+c0105d9a:	c3                   	ret    
+
+c0105d9b <check_vma_struct>:
+
+static void
+check_vma_struct(void) {
+c0105d9b:	55                   	push   %ebp
+c0105d9c:	89 e5                	mov    %esp,%ebp
+c0105d9e:	83 ec 58             	sub    $0x58,%esp
+    size_t nr_free_pages_store = nr_free_pages();
+c0105da1:	e8 67 db ff ff       	call   c010390d <nr_free_pages>
+c0105da6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+
+    struct mm_struct *mm = mm_create();
+c0105da9:	e8 b3 f8 ff ff       	call   c0105661 <mm_create>
+c0105dae:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    assert(mm != NULL);
+c0105db1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c0105db5:	75 19                	jne    c0105dd0 <check_vma_struct+0x35>
+c0105db7:	68 c3 cb 10 c0       	push   $0xc010cbc3
+c0105dbc:	68 33 cb 10 c0       	push   $0xc010cb33
+c0105dc1:	68 0c 01 00 00       	push   $0x10c
+c0105dc6:	68 48 cb 10 c0       	push   $0xc010cb48
+c0105dcb:	e8 24 a6 ff ff       	call   c01003f4 <__panic>
+
+    int step1 = 10, step2 = step1 * 10;
+c0105dd0:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
+c0105dd7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0105dda:	89 d0                	mov    %edx,%eax
+c0105ddc:	c1 e0 02             	shl    $0x2,%eax
+c0105ddf:	01 d0                	add    %edx,%eax
+c0105de1:	01 c0                	add    %eax,%eax
+c0105de3:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    int i;
+    for (i = step1; i >= 1; i --) {
+c0105de6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0105de9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0105dec:	eb 5f                	jmp    c0105e4d <check_vma_struct+0xb2>
+        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
+c0105dee:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0105df1:	89 d0                	mov    %edx,%eax
+c0105df3:	c1 e0 02             	shl    $0x2,%eax
+c0105df6:	01 d0                	add    %edx,%eax
+c0105df8:	83 c0 02             	add    $0x2,%eax
+c0105dfb:	89 c1                	mov    %eax,%ecx
+c0105dfd:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0105e00:	89 d0                	mov    %edx,%eax
+c0105e02:	c1 e0 02             	shl    $0x2,%eax
+c0105e05:	01 d0                	add    %edx,%eax
+c0105e07:	83 ec 04             	sub    $0x4,%esp
+c0105e0a:	6a 00                	push   $0x0
+c0105e0c:	51                   	push   %ecx
+c0105e0d:	50                   	push   %eax
+c0105e0e:	e8 ec f8 ff ff       	call   c01056ff <vma_create>
+c0105e13:	83 c4 10             	add    $0x10,%esp
+c0105e16:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        assert(vma != NULL);
+c0105e19:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c0105e1d:	75 19                	jne    c0105e38 <check_vma_struct+0x9d>
+c0105e1f:	68 24 cc 10 c0       	push   $0xc010cc24
+c0105e24:	68 33 cb 10 c0       	push   $0xc010cb33
+c0105e29:	68 13 01 00 00       	push   $0x113
+c0105e2e:	68 48 cb 10 c0       	push   $0xc010cb48
+c0105e33:	e8 bc a5 ff ff       	call   c01003f4 <__panic>
+        insert_vma_struct(mm, vma);
+c0105e38:	83 ec 08             	sub    $0x8,%esp
+c0105e3b:	ff 75 dc             	pushl  -0x24(%ebp)
+c0105e3e:	ff 75 e8             	pushl  -0x18(%ebp)
+c0105e41:	e8 21 fa ff ff       	call   c0105867 <insert_vma_struct>
+c0105e46:	83 c4 10             	add    $0x10,%esp
+    assert(mm != NULL);
+
+    int step1 = 10, step2 = step1 * 10;
+
+    int i;
+    for (i = step1; i >= 1; i --) {
+c0105e49:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+c0105e4d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0105e51:	7f 9b                	jg     c0105dee <check_vma_struct+0x53>
+        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
+        assert(vma != NULL);
+        insert_vma_struct(mm, vma);
+    }
+
+    for (i = step1 + 1; i <= step2; i ++) {
+c0105e53:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0105e56:	83 c0 01             	add    $0x1,%eax
+c0105e59:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0105e5c:	eb 5f                	jmp    c0105ebd <check_vma_struct+0x122>
+        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
+c0105e5e:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0105e61:	89 d0                	mov    %edx,%eax
+c0105e63:	c1 e0 02             	shl    $0x2,%eax
+c0105e66:	01 d0                	add    %edx,%eax
+c0105e68:	83 c0 02             	add    $0x2,%eax
+c0105e6b:	89 c1                	mov    %eax,%ecx
+c0105e6d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0105e70:	89 d0                	mov    %edx,%eax
+c0105e72:	c1 e0 02             	shl    $0x2,%eax
+c0105e75:	01 d0                	add    %edx,%eax
+c0105e77:	83 ec 04             	sub    $0x4,%esp
+c0105e7a:	6a 00                	push   $0x0
+c0105e7c:	51                   	push   %ecx
+c0105e7d:	50                   	push   %eax
+c0105e7e:	e8 7c f8 ff ff       	call   c01056ff <vma_create>
+c0105e83:	83 c4 10             	add    $0x10,%esp
+c0105e86:	89 45 d8             	mov    %eax,-0x28(%ebp)
+        assert(vma != NULL);
+c0105e89:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
+c0105e8d:	75 19                	jne    c0105ea8 <check_vma_struct+0x10d>
+c0105e8f:	68 24 cc 10 c0       	push   $0xc010cc24
+c0105e94:	68 33 cb 10 c0       	push   $0xc010cb33
+c0105e99:	68 19 01 00 00       	push   $0x119
+c0105e9e:	68 48 cb 10 c0       	push   $0xc010cb48
+c0105ea3:	e8 4c a5 ff ff       	call   c01003f4 <__panic>
+        insert_vma_struct(mm, vma);
+c0105ea8:	83 ec 08             	sub    $0x8,%esp
+c0105eab:	ff 75 d8             	pushl  -0x28(%ebp)
+c0105eae:	ff 75 e8             	pushl  -0x18(%ebp)
+c0105eb1:	e8 b1 f9 ff ff       	call   c0105867 <insert_vma_struct>
+c0105eb6:	83 c4 10             	add    $0x10,%esp
+        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
+        assert(vma != NULL);
+        insert_vma_struct(mm, vma);
+    }
+
+    for (i = step1 + 1; i <= step2; i ++) {
+c0105eb9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0105ebd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105ec0:	3b 45 e0             	cmp    -0x20(%ebp),%eax
+c0105ec3:	7e 99                	jle    c0105e5e <check_vma_struct+0xc3>
+        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
+        assert(vma != NULL);
+        insert_vma_struct(mm, vma);
+    }
+
+    list_entry_t *le = list_next(&(mm->mmap_list));
+c0105ec5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0105ec8:	89 45 b4             	mov    %eax,-0x4c(%ebp)
+c0105ecb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c0105ece:	8b 40 04             	mov    0x4(%eax),%eax
+c0105ed1:	89 45 f0             	mov    %eax,-0x10(%ebp)
+
+    for (i = 1; i <= step2; i ++) {
+c0105ed4:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
+c0105edb:	e9 81 00 00 00       	jmp    c0105f61 <check_vma_struct+0x1c6>
+        assert(le != &(mm->mmap_list));
+c0105ee0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0105ee3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c0105ee6:	75 19                	jne    c0105f01 <check_vma_struct+0x166>
+c0105ee8:	68 30 cc 10 c0       	push   $0xc010cc30
+c0105eed:	68 33 cb 10 c0       	push   $0xc010cb33
+c0105ef2:	68 20 01 00 00       	push   $0x120
+c0105ef7:	68 48 cb 10 c0       	push   $0xc010cb48
+c0105efc:	e8 f3 a4 ff ff       	call   c01003f4 <__panic>
+        struct vma_struct *mmap = le2vma(le, list_link);
+c0105f01:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105f04:	83 e8 10             	sub    $0x10,%eax
+c0105f07:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
+c0105f0a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0105f0d:	8b 48 04             	mov    0x4(%eax),%ecx
+c0105f10:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0105f13:	89 d0                	mov    %edx,%eax
+c0105f15:	c1 e0 02             	shl    $0x2,%eax
+c0105f18:	01 d0                	add    %edx,%eax
+c0105f1a:	39 c1                	cmp    %eax,%ecx
+c0105f1c:	75 17                	jne    c0105f35 <check_vma_struct+0x19a>
+c0105f1e:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0105f21:	8b 48 08             	mov    0x8(%eax),%ecx
+c0105f24:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0105f27:	89 d0                	mov    %edx,%eax
+c0105f29:	c1 e0 02             	shl    $0x2,%eax
+c0105f2c:	01 d0                	add    %edx,%eax
+c0105f2e:	83 c0 02             	add    $0x2,%eax
+c0105f31:	39 c1                	cmp    %eax,%ecx
+c0105f33:	74 19                	je     c0105f4e <check_vma_struct+0x1b3>
+c0105f35:	68 48 cc 10 c0       	push   $0xc010cc48
+c0105f3a:	68 33 cb 10 c0       	push   $0xc010cb33
+c0105f3f:	68 22 01 00 00       	push   $0x122
+c0105f44:	68 48 cb 10 c0       	push   $0xc010cb48
+c0105f49:	e8 a6 a4 ff ff       	call   c01003f4 <__panic>
+c0105f4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105f51:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+c0105f54:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0105f57:	8b 40 04             	mov    0x4(%eax),%eax
+        le = list_next(le);
+c0105f5a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        insert_vma_struct(mm, vma);
+    }
+
+    list_entry_t *le = list_next(&(mm->mmap_list));
+
+    for (i = 1; i <= step2; i ++) {
+c0105f5d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0105f61:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105f64:	3b 45 e0             	cmp    -0x20(%ebp),%eax
+c0105f67:	0f 8e 73 ff ff ff    	jle    c0105ee0 <check_vma_struct+0x145>
+        struct vma_struct *mmap = le2vma(le, list_link);
+        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
+        le = list_next(le);
+    }
+
+    for (i = 5; i <= 5 * step2; i +=5) {
+c0105f6d:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
+c0105f74:	e9 80 01 00 00       	jmp    c01060f9 <check_vma_struct+0x35e>
+        struct vma_struct *vma1 = find_vma(mm, i);
+c0105f79:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105f7c:	83 ec 08             	sub    $0x8,%esp
+c0105f7f:	50                   	push   %eax
+c0105f80:	ff 75 e8             	pushl  -0x18(%ebp)
+c0105f83:	e8 b3 f7 ff ff       	call   c010573b <find_vma>
+c0105f88:	83 c4 10             	add    $0x10,%esp
+c0105f8b:	89 45 cc             	mov    %eax,-0x34(%ebp)
+        assert(vma1 != NULL);
+c0105f8e:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
+c0105f92:	75 19                	jne    c0105fad <check_vma_struct+0x212>
+c0105f94:	68 7d cc 10 c0       	push   $0xc010cc7d
+c0105f99:	68 33 cb 10 c0       	push   $0xc010cb33
+c0105f9e:	68 28 01 00 00       	push   $0x128
+c0105fa3:	68 48 cb 10 c0       	push   $0xc010cb48
+c0105fa8:	e8 47 a4 ff ff       	call   c01003f4 <__panic>
+        struct vma_struct *vma2 = find_vma(mm, i+1);
+c0105fad:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105fb0:	83 c0 01             	add    $0x1,%eax
+c0105fb3:	83 ec 08             	sub    $0x8,%esp
+c0105fb6:	50                   	push   %eax
+c0105fb7:	ff 75 e8             	pushl  -0x18(%ebp)
+c0105fba:	e8 7c f7 ff ff       	call   c010573b <find_vma>
+c0105fbf:	83 c4 10             	add    $0x10,%esp
+c0105fc2:	89 45 c8             	mov    %eax,-0x38(%ebp)
+        assert(vma2 != NULL);
+c0105fc5:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
+c0105fc9:	75 19                	jne    c0105fe4 <check_vma_struct+0x249>
+c0105fcb:	68 8a cc 10 c0       	push   $0xc010cc8a
+c0105fd0:	68 33 cb 10 c0       	push   $0xc010cb33
+c0105fd5:	68 2a 01 00 00       	push   $0x12a
+c0105fda:	68 48 cb 10 c0       	push   $0xc010cb48
+c0105fdf:	e8 10 a4 ff ff       	call   c01003f4 <__panic>
+        struct vma_struct *vma3 = find_vma(mm, i+2);
+c0105fe4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105fe7:	83 c0 02             	add    $0x2,%eax
+c0105fea:	83 ec 08             	sub    $0x8,%esp
+c0105fed:	50                   	push   %eax
+c0105fee:	ff 75 e8             	pushl  -0x18(%ebp)
+c0105ff1:	e8 45 f7 ff ff       	call   c010573b <find_vma>
+c0105ff6:	83 c4 10             	add    $0x10,%esp
+c0105ff9:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        assert(vma3 == NULL);
+c0105ffc:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
+c0106000:	74 19                	je     c010601b <check_vma_struct+0x280>
+c0106002:	68 97 cc 10 c0       	push   $0xc010cc97
+c0106007:	68 33 cb 10 c0       	push   $0xc010cb33
+c010600c:	68 2c 01 00 00       	push   $0x12c
+c0106011:	68 48 cb 10 c0       	push   $0xc010cb48
+c0106016:	e8 d9 a3 ff ff       	call   c01003f4 <__panic>
+        struct vma_struct *vma4 = find_vma(mm, i+3);
+c010601b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010601e:	83 c0 03             	add    $0x3,%eax
+c0106021:	83 ec 08             	sub    $0x8,%esp
+c0106024:	50                   	push   %eax
+c0106025:	ff 75 e8             	pushl  -0x18(%ebp)
+c0106028:	e8 0e f7 ff ff       	call   c010573b <find_vma>
+c010602d:	83 c4 10             	add    $0x10,%esp
+c0106030:	89 45 c0             	mov    %eax,-0x40(%ebp)
+        assert(vma4 == NULL);
+c0106033:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
+c0106037:	74 19                	je     c0106052 <check_vma_struct+0x2b7>
+c0106039:	68 a4 cc 10 c0       	push   $0xc010cca4
+c010603e:	68 33 cb 10 c0       	push   $0xc010cb33
+c0106043:	68 2e 01 00 00       	push   $0x12e
+c0106048:	68 48 cb 10 c0       	push   $0xc010cb48
+c010604d:	e8 a2 a3 ff ff       	call   c01003f4 <__panic>
+        struct vma_struct *vma5 = find_vma(mm, i+4);
+c0106052:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106055:	83 c0 04             	add    $0x4,%eax
+c0106058:	83 ec 08             	sub    $0x8,%esp
+c010605b:	50                   	push   %eax
+c010605c:	ff 75 e8             	pushl  -0x18(%ebp)
+c010605f:	e8 d7 f6 ff ff       	call   c010573b <find_vma>
+c0106064:	83 c4 10             	add    $0x10,%esp
+c0106067:	89 45 bc             	mov    %eax,-0x44(%ebp)
+        assert(vma5 == NULL);
+c010606a:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
+c010606e:	74 19                	je     c0106089 <check_vma_struct+0x2ee>
+c0106070:	68 b1 cc 10 c0       	push   $0xc010ccb1
+c0106075:	68 33 cb 10 c0       	push   $0xc010cb33
+c010607a:	68 30 01 00 00       	push   $0x130
+c010607f:	68 48 cb 10 c0       	push   $0xc010cb48
+c0106084:	e8 6b a3 ff ff       	call   c01003f4 <__panic>
+
+        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
+c0106089:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010608c:	8b 50 04             	mov    0x4(%eax),%edx
+c010608f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106092:	39 c2                	cmp    %eax,%edx
+c0106094:	75 10                	jne    c01060a6 <check_vma_struct+0x30b>
+c0106096:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0106099:	8b 40 08             	mov    0x8(%eax),%eax
+c010609c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010609f:	83 c2 02             	add    $0x2,%edx
+c01060a2:	39 d0                	cmp    %edx,%eax
+c01060a4:	74 19                	je     c01060bf <check_vma_struct+0x324>
+c01060a6:	68 c0 cc 10 c0       	push   $0xc010ccc0
+c01060ab:	68 33 cb 10 c0       	push   $0xc010cb33
+c01060b0:	68 32 01 00 00       	push   $0x132
+c01060b5:	68 48 cb 10 c0       	push   $0xc010cb48
+c01060ba:	e8 35 a3 ff ff       	call   c01003f4 <__panic>
+        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
+c01060bf:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c01060c2:	8b 50 04             	mov    0x4(%eax),%edx
+c01060c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01060c8:	39 c2                	cmp    %eax,%edx
+c01060ca:	75 10                	jne    c01060dc <check_vma_struct+0x341>
+c01060cc:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c01060cf:	8b 40 08             	mov    0x8(%eax),%eax
+c01060d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01060d5:	83 c2 02             	add    $0x2,%edx
+c01060d8:	39 d0                	cmp    %edx,%eax
+c01060da:	74 19                	je     c01060f5 <check_vma_struct+0x35a>
+c01060dc:	68 f0 cc 10 c0       	push   $0xc010ccf0
+c01060e1:	68 33 cb 10 c0       	push   $0xc010cb33
+c01060e6:	68 33 01 00 00       	push   $0x133
+c01060eb:	68 48 cb 10 c0       	push   $0xc010cb48
+c01060f0:	e8 ff a2 ff ff       	call   c01003f4 <__panic>
+        struct vma_struct *mmap = le2vma(le, list_link);
+        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
+        le = list_next(le);
+    }
+
+    for (i = 5; i <= 5 * step2; i +=5) {
+c01060f5:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
+c01060f9:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c01060fc:	89 d0                	mov    %edx,%eax
+c01060fe:	c1 e0 02             	shl    $0x2,%eax
+c0106101:	01 d0                	add    %edx,%eax
+c0106103:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0106106:	0f 8d 6d fe ff ff    	jge    c0105f79 <check_vma_struct+0x1de>
+
+        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
+        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
+    }
+
+    for (i =4; i>=0; i--) {
+c010610c:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
+c0106113:	eb 5c                	jmp    c0106171 <check_vma_struct+0x3d6>
+        struct vma_struct *vma_below_5= find_vma(mm,i);
+c0106115:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106118:	83 ec 08             	sub    $0x8,%esp
+c010611b:	50                   	push   %eax
+c010611c:	ff 75 e8             	pushl  -0x18(%ebp)
+c010611f:	e8 17 f6 ff ff       	call   c010573b <find_vma>
+c0106124:	83 c4 10             	add    $0x10,%esp
+c0106127:	89 45 b8             	mov    %eax,-0x48(%ebp)
+        if (vma_below_5 != NULL ) {
+c010612a:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
+c010612e:	74 1e                	je     c010614e <check_vma_struct+0x3b3>
+           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
+c0106130:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c0106133:	8b 50 08             	mov    0x8(%eax),%edx
+c0106136:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c0106139:	8b 40 04             	mov    0x4(%eax),%eax
+c010613c:	52                   	push   %edx
+c010613d:	50                   	push   %eax
+c010613e:	ff 75 f4             	pushl  -0xc(%ebp)
+c0106141:	68 20 cd 10 c0       	push   $0xc010cd20
+c0106146:	e8 43 a1 ff ff       	call   c010028e <cprintf>
+c010614b:	83 c4 10             	add    $0x10,%esp
+        }
+        assert(vma_below_5 == NULL);
+c010614e:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
+c0106152:	74 19                	je     c010616d <check_vma_struct+0x3d2>
+c0106154:	68 45 cd 10 c0       	push   $0xc010cd45
+c0106159:	68 33 cb 10 c0       	push   $0xc010cb33
+c010615e:	68 3b 01 00 00       	push   $0x13b
+c0106163:	68 48 cb 10 c0       	push   $0xc010cb48
+c0106168:	e8 87 a2 ff ff       	call   c01003f4 <__panic>
+
+        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
+        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
+    }
+
+    for (i =4; i>=0; i--) {
+c010616d:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+c0106171:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0106175:	79 9e                	jns    c0106115 <check_vma_struct+0x37a>
+           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
+        }
+        assert(vma_below_5 == NULL);
+    }
+
+    mm_destroy(mm);
+c0106177:	83 ec 0c             	sub    $0xc,%esp
+c010617a:	ff 75 e8             	pushl  -0x18(%ebp)
+c010617d:	e8 09 f8 ff ff       	call   c010598b <mm_destroy>
+c0106182:	83 c4 10             	add    $0x10,%esp
+
+    cprintf("check_vma_struct() succeeded!\n");
+c0106185:	83 ec 0c             	sub    $0xc,%esp
+c0106188:	68 5c cd 10 c0       	push   $0xc010cd5c
+c010618d:	e8 fc a0 ff ff       	call   c010028e <cprintf>
+c0106192:	83 c4 10             	add    $0x10,%esp
+}
+c0106195:	90                   	nop
+c0106196:	c9                   	leave  
+c0106197:	c3                   	ret    
+
+c0106198 <check_pgfault>:
+
+struct mm_struct *check_mm_struct;
+
+// check_pgfault - check correctness of pgfault handler
+static void
+check_pgfault(void) {
+c0106198:	55                   	push   %ebp
+c0106199:	89 e5                	mov    %esp,%ebp
+c010619b:	83 ec 28             	sub    $0x28,%esp
+    size_t nr_free_pages_store = nr_free_pages();
+c010619e:	e8 6a d7 ff ff       	call   c010390d <nr_free_pages>
+c01061a3:	89 45 ec             	mov    %eax,-0x14(%ebp)
+
+    check_mm_struct = mm_create();
+c01061a6:	e8 b6 f4 ff ff       	call   c0105661 <mm_create>
+c01061ab:	a3 70 0d 1b c0       	mov    %eax,0xc01b0d70
+    assert(check_mm_struct != NULL);
+c01061b0:	a1 70 0d 1b c0       	mov    0xc01b0d70,%eax
+c01061b5:	85 c0                	test   %eax,%eax
+c01061b7:	75 19                	jne    c01061d2 <check_pgfault+0x3a>
+c01061b9:	68 7b cd 10 c0       	push   $0xc010cd7b
+c01061be:	68 33 cb 10 c0       	push   $0xc010cb33
+c01061c3:	68 4b 01 00 00       	push   $0x14b
+c01061c8:	68 48 cb 10 c0       	push   $0xc010cb48
+c01061cd:	e8 22 a2 ff ff       	call   c01003f4 <__panic>
+
+    struct mm_struct *mm = check_mm_struct;
+c01061d2:	a1 70 0d 1b c0       	mov    0xc01b0d70,%eax
+c01061d7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    pde_t *pgdir = mm->pgdir = boot_pgdir;
+c01061da:	8b 15 64 ec 1a c0    	mov    0xc01aec64,%edx
+c01061e0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01061e3:	89 50 0c             	mov    %edx,0xc(%eax)
+c01061e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01061e9:	8b 40 0c             	mov    0xc(%eax),%eax
+c01061ec:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    assert(pgdir[0] == 0);
+c01061ef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01061f2:	8b 00                	mov    (%eax),%eax
+c01061f4:	85 c0                	test   %eax,%eax
+c01061f6:	74 19                	je     c0106211 <check_pgfault+0x79>
+c01061f8:	68 93 cd 10 c0       	push   $0xc010cd93
+c01061fd:	68 33 cb 10 c0       	push   $0xc010cb33
+c0106202:	68 4f 01 00 00       	push   $0x14f
+c0106207:	68 48 cb 10 c0       	push   $0xc010cb48
+c010620c:	e8 e3 a1 ff ff       	call   c01003f4 <__panic>
+
+    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
+c0106211:	83 ec 04             	sub    $0x4,%esp
+c0106214:	6a 02                	push   $0x2
+c0106216:	68 00 00 40 00       	push   $0x400000
+c010621b:	6a 00                	push   $0x0
+c010621d:	e8 dd f4 ff ff       	call   c01056ff <vma_create>
+c0106222:	83 c4 10             	add    $0x10,%esp
+c0106225:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    assert(vma != NULL);
+c0106228:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+c010622c:	75 19                	jne    c0106247 <check_pgfault+0xaf>
+c010622e:	68 24 cc 10 c0       	push   $0xc010cc24
+c0106233:	68 33 cb 10 c0       	push   $0xc010cb33
+c0106238:	68 52 01 00 00       	push   $0x152
+c010623d:	68 48 cb 10 c0       	push   $0xc010cb48
+c0106242:	e8 ad a1 ff ff       	call   c01003f4 <__panic>
+
+    insert_vma_struct(mm, vma);
+c0106247:	83 ec 08             	sub    $0x8,%esp
+c010624a:	ff 75 e0             	pushl  -0x20(%ebp)
+c010624d:	ff 75 e8             	pushl  -0x18(%ebp)
+c0106250:	e8 12 f6 ff ff       	call   c0105867 <insert_vma_struct>
+c0106255:	83 c4 10             	add    $0x10,%esp
+
+    uintptr_t addr = 0x100;
+c0106258:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
+    assert(find_vma(mm, addr) == vma);
+c010625f:	83 ec 08             	sub    $0x8,%esp
+c0106262:	ff 75 dc             	pushl  -0x24(%ebp)
+c0106265:	ff 75 e8             	pushl  -0x18(%ebp)
+c0106268:	e8 ce f4 ff ff       	call   c010573b <find_vma>
+c010626d:	83 c4 10             	add    $0x10,%esp
+c0106270:	3b 45 e0             	cmp    -0x20(%ebp),%eax
+c0106273:	74 19                	je     c010628e <check_pgfault+0xf6>
+c0106275:	68 a1 cd 10 c0       	push   $0xc010cda1
+c010627a:	68 33 cb 10 c0       	push   $0xc010cb33
+c010627f:	68 57 01 00 00       	push   $0x157
+c0106284:	68 48 cb 10 c0       	push   $0xc010cb48
+c0106289:	e8 66 a1 ff ff       	call   c01003f4 <__panic>
+
+    int i, sum = 0;
+c010628e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    for (i = 0; i < 100; i ++) {
+c0106295:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c010629c:	eb 19                	jmp    c01062b7 <check_pgfault+0x11f>
+        *(char *)(addr + i) = i;
+c010629e:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01062a1:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01062a4:	01 d0                	add    %edx,%eax
+c01062a6:	89 c2                	mov    %eax,%edx
+c01062a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01062ab:	88 02                	mov    %al,(%edx)
+        sum += i;
+c01062ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01062b0:	01 45 f0             	add    %eax,-0x10(%ebp)
+
+    uintptr_t addr = 0x100;
+    assert(find_vma(mm, addr) == vma);
+
+    int i, sum = 0;
+    for (i = 0; i < 100; i ++) {
+c01062b3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c01062b7:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
+c01062bb:	7e e1                	jle    c010629e <check_pgfault+0x106>
+        *(char *)(addr + i) = i;
+        sum += i;
+    }
+    for (i = 0; i < 100; i ++) {
+c01062bd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c01062c4:	eb 15                	jmp    c01062db <check_pgfault+0x143>
+        sum -= *(char *)(addr + i);
+c01062c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01062c9:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01062cc:	01 d0                	add    %edx,%eax
+c01062ce:	0f b6 00             	movzbl (%eax),%eax
+c01062d1:	0f be c0             	movsbl %al,%eax
+c01062d4:	29 45 f0             	sub    %eax,-0x10(%ebp)
+    int i, sum = 0;
+    for (i = 0; i < 100; i ++) {
+        *(char *)(addr + i) = i;
+        sum += i;
+    }
+    for (i = 0; i < 100; i ++) {
+c01062d7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c01062db:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
+c01062df:	7e e5                	jle    c01062c6 <check_pgfault+0x12e>
+        sum -= *(char *)(addr + i);
+    }
+    assert(sum == 0);
+c01062e1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c01062e5:	74 19                	je     c0106300 <check_pgfault+0x168>
+c01062e7:	68 bb cd 10 c0       	push   $0xc010cdbb
+c01062ec:	68 33 cb 10 c0       	push   $0xc010cb33
+c01062f1:	68 61 01 00 00       	push   $0x161
+c01062f6:	68 48 cb 10 c0       	push   $0xc010cb48
+c01062fb:	e8 f4 a0 ff ff       	call   c01003f4 <__panic>
+
+    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
+c0106300:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0106303:	89 45 d8             	mov    %eax,-0x28(%ebp)
+c0106306:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0106309:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c010630e:	83 ec 08             	sub    $0x8,%esp
+c0106311:	50                   	push   %eax
+c0106312:	ff 75 e4             	pushl  -0x1c(%ebp)
+c0106315:	e8 c6 e1 ff ff       	call   c01044e0 <page_remove>
+c010631a:	83 c4 10             	add    $0x10,%esp
+    free_page(pde2page(pgdir[0]));
+c010631d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0106320:	8b 00                	mov    (%eax),%eax
+c0106322:	83 ec 0c             	sub    $0xc,%esp
+c0106325:	50                   	push   %eax
+c0106326:	e8 1a f3 ff ff       	call   c0105645 <pde2page>
+c010632b:	83 c4 10             	add    $0x10,%esp
+c010632e:	83 ec 08             	sub    $0x8,%esp
+c0106331:	6a 01                	push   $0x1
+c0106333:	50                   	push   %eax
+c0106334:	e8 9f d5 ff ff       	call   c01038d8 <free_pages>
+c0106339:	83 c4 10             	add    $0x10,%esp
+    pgdir[0] = 0;
+c010633c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010633f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+
+    mm->pgdir = NULL;
+c0106345:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0106348:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
+    mm_destroy(mm);
+c010634f:	83 ec 0c             	sub    $0xc,%esp
+c0106352:	ff 75 e8             	pushl  -0x18(%ebp)
+c0106355:	e8 31 f6 ff ff       	call   c010598b <mm_destroy>
+c010635a:	83 c4 10             	add    $0x10,%esp
+    check_mm_struct = NULL;
+c010635d:	c7 05 70 0d 1b c0 00 	movl   $0x0,0xc01b0d70
+c0106364:	00 00 00 
+
+    assert(nr_free_pages_store == nr_free_pages());
+c0106367:	e8 a1 d5 ff ff       	call   c010390d <nr_free_pages>
+c010636c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c010636f:	74 19                	je     c010638a <check_pgfault+0x1f2>
+c0106371:	68 c4 cd 10 c0       	push   $0xc010cdc4
+c0106376:	68 33 cb 10 c0       	push   $0xc010cb33
+c010637b:	68 6b 01 00 00       	push   $0x16b
+c0106380:	68 48 cb 10 c0       	push   $0xc010cb48
+c0106385:	e8 6a a0 ff ff       	call   c01003f4 <__panic>
+
+    cprintf("check_pgfault() succeeded!\n");
+c010638a:	83 ec 0c             	sub    $0xc,%esp
+c010638d:	68 eb cd 10 c0       	push   $0xc010cdeb
+c0106392:	e8 f7 9e ff ff       	call   c010028e <cprintf>
+c0106397:	83 c4 10             	add    $0x10,%esp
+}
+c010639a:	90                   	nop
+c010639b:	c9                   	leave  
+c010639c:	c3                   	ret    
+
+c010639d <do_pgfault>:
+ *            was a read (0) or write (1).
+ *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
+ *            or supervisor mode (0) at the time of the exception.
+ */
+int
+do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
+c010639d:	55                   	push   %ebp
+c010639e:	89 e5                	mov    %esp,%ebp
+c01063a0:	83 ec 28             	sub    $0x28,%esp
+    int ret = -E_INVAL;
+c01063a3:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
+    //try to find a vma which include addr
+    struct vma_struct *vma = find_vma(mm, addr);
+c01063aa:	ff 75 10             	pushl  0x10(%ebp)
+c01063ad:	ff 75 08             	pushl  0x8(%ebp)
+c01063b0:	e8 86 f3 ff ff       	call   c010573b <find_vma>
+c01063b5:	83 c4 08             	add    $0x8,%esp
+c01063b8:	89 45 ec             	mov    %eax,-0x14(%ebp)
+
+    pgfault_num++;
+c01063bb:	a1 ec ec 1a c0       	mov    0xc01aecec,%eax
+c01063c0:	83 c0 01             	add    $0x1,%eax
+c01063c3:	a3 ec ec 1a c0       	mov    %eax,0xc01aecec
+    //If the addr is in the range of a mm's vma?
+    if (vma == NULL || vma->vm_start > addr) {
+c01063c8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c01063cc:	74 0b                	je     c01063d9 <do_pgfault+0x3c>
+c01063ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01063d1:	8b 40 04             	mov    0x4(%eax),%eax
+c01063d4:	3b 45 10             	cmp    0x10(%ebp),%eax
+c01063d7:	76 18                	jbe    c01063f1 <do_pgfault+0x54>
+        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
+c01063d9:	83 ec 08             	sub    $0x8,%esp
+c01063dc:	ff 75 10             	pushl  0x10(%ebp)
+c01063df:	68 08 ce 10 c0       	push   $0xc010ce08
+c01063e4:	e8 a5 9e ff ff       	call   c010028e <cprintf>
+c01063e9:	83 c4 10             	add    $0x10,%esp
+        goto failed;
+c01063ec:	e9 77 01 00 00       	jmp    c0106568 <do_pgfault+0x1cb>
+    }
+    //check the error_code
+    switch (error_code & 3) {
+c01063f1:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01063f4:	83 e0 03             	and    $0x3,%eax
+c01063f7:	85 c0                	test   %eax,%eax
+c01063f9:	74 3c                	je     c0106437 <do_pgfault+0x9a>
+c01063fb:	83 f8 01             	cmp    $0x1,%eax
+c01063fe:	74 22                	je     c0106422 <do_pgfault+0x85>
+    default:
+            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
+    case 2: /* error code flag : (W/R=1, P=0): write, not present */
+        if (!(vma->vm_flags & VM_WRITE)) {
+c0106400:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0106403:	8b 40 0c             	mov    0xc(%eax),%eax
+c0106406:	83 e0 02             	and    $0x2,%eax
+c0106409:	85 c0                	test   %eax,%eax
+c010640b:	75 4c                	jne    c0106459 <do_pgfault+0xbc>
+            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
+c010640d:	83 ec 0c             	sub    $0xc,%esp
+c0106410:	68 38 ce 10 c0       	push   $0xc010ce38
+c0106415:	e8 74 9e ff ff       	call   c010028e <cprintf>
+c010641a:	83 c4 10             	add    $0x10,%esp
+            goto failed;
+c010641d:	e9 46 01 00 00       	jmp    c0106568 <do_pgfault+0x1cb>
+        }
+        break;
+    case 1: /* error code flag : (W/R=0, P=1): read, present */
+        cprintf("do_pgfault failed: error code flag = read AND present\n");
+c0106422:	83 ec 0c             	sub    $0xc,%esp
+c0106425:	68 98 ce 10 c0       	push   $0xc010ce98
+c010642a:	e8 5f 9e ff ff       	call   c010028e <cprintf>
+c010642f:	83 c4 10             	add    $0x10,%esp
+        goto failed;
+c0106432:	e9 31 01 00 00       	jmp    c0106568 <do_pgfault+0x1cb>
+    case 0: /* error code flag : (W/R=0, P=0): read, not present */
+        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
+c0106437:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010643a:	8b 40 0c             	mov    0xc(%eax),%eax
+c010643d:	83 e0 05             	and    $0x5,%eax
+c0106440:	85 c0                	test   %eax,%eax
+c0106442:	75 16                	jne    c010645a <do_pgfault+0xbd>
+            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
+c0106444:	83 ec 0c             	sub    $0xc,%esp
+c0106447:	68 d0 ce 10 c0       	push   $0xc010ced0
+c010644c:	e8 3d 9e ff ff       	call   c010028e <cprintf>
+c0106451:	83 c4 10             	add    $0x10,%esp
+            goto failed;
+c0106454:	e9 0f 01 00 00       	jmp    c0106568 <do_pgfault+0x1cb>
+    case 2: /* error code flag : (W/R=1, P=0): write, not present */
+        if (!(vma->vm_flags & VM_WRITE)) {
+            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
+            goto failed;
+        }
+        break;
+c0106459:	90                   	nop
+     *    (write an non_existed addr && addr is writable) OR
+     *    (read  an non_existed addr && addr is readable)
+     * THEN
+     *    continue process
+     */
+    uint32_t perm = PTE_U;
+c010645a:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
+    if (vma->vm_flags & VM_WRITE) {
+c0106461:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0106464:	8b 40 0c             	mov    0xc(%eax),%eax
+c0106467:	83 e0 02             	and    $0x2,%eax
+c010646a:	85 c0                	test   %eax,%eax
+c010646c:	74 04                	je     c0106472 <do_pgfault+0xd5>
+        perm |= PTE_W;
+c010646e:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
+    }
+    addr = ROUNDDOWN(addr, PGSIZE);
+c0106472:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106475:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0106478:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010647b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0106480:	89 45 10             	mov    %eax,0x10(%ebp)
+
+    ret = -E_NO_MEM;
+c0106483:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
+
+    pte_t *ptep=NULL;
+c010648a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+    *   mm->pgdir : the PDT of these vma
+    *
+    */
+
+    /*LAB3 EXERCISE 1: 2013011371*/
+    ptep = get_pte(mm->pgdir, addr, 1);              //(1) try to find a pte, if pte's PT(Page Table) isn't existed, then create a PT.
+c0106491:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106494:	8b 40 0c             	mov    0xc(%eax),%eax
+c0106497:	83 ec 04             	sub    $0x4,%esp
+c010649a:	6a 01                	push   $0x1
+c010649c:	ff 75 10             	pushl  0x10(%ebp)
+c010649f:	50                   	push   %eax
+c01064a0:	e8 b2 da ff ff       	call   c0103f57 <get_pte>
+c01064a5:	83 c4 10             	add    $0x10,%esp
+c01064a8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    if (*ptep == 0) {//(2) if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr
+c01064ab:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01064ae:	8b 00                	mov    (%eax),%eax
+c01064b0:	85 c0                	test   %eax,%eax
+c01064b2:	75 1d                	jne    c01064d1 <do_pgfault+0x134>
+    	pgdir_alloc_page(mm->pgdir, addr, perm);
+c01064b4:	8b 45 08             	mov    0x8(%ebp),%eax
+c01064b7:	8b 40 0c             	mov    0xc(%eax),%eax
+c01064ba:	83 ec 04             	sub    $0x4,%esp
+c01064bd:	ff 75 f0             	pushl  -0x10(%ebp)
+c01064c0:	ff 75 10             	pushl  0x10(%ebp)
+c01064c3:	50                   	push   %eax
+c01064c4:	e8 59 e1 ff ff       	call   c0104622 <pgdir_alloc_page>
+c01064c9:	83 c4 10             	add    $0x10,%esp
+c01064cc:	e9 90 00 00 00       	jmp    c0106561 <do_pgfault+0x1c4>
+		     If the vma includes this addr is writable, then we can set the page writable by rewrite the *ptep.
+		     This method could be used to implement the Copy on Write (COW) thchnology(a fast fork process method).
+		  2) *ptep & PTE_P == 0 & but *ptep!=0, it means this pte is a  swap entry.
+		     We should add the LAB3's results here.
+     */
+        if(swap_init_ok) {
+c01064d1:	a1 f4 ec 1a c0       	mov    0xc01aecf4,%eax
+c01064d6:	85 c0                	test   %eax,%eax
+c01064d8:	74 6f                	je     c0106549 <do_pgfault+0x1ac>
+            struct Page *page=NULL;
+c01064da:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+                                    //(1）According to the mm AND addr, try to load the content of right disk page
+                                    //    into the memory which page managed.
+                                    //(2) According to the mm, addr AND page, setup the map of phy addr <---> logical addr
+                                    //(3) make the page swappable.
+                                    //(4) [NOTICE]: you myabe need to update your lab3's implementation for LAB5's normal execution.
+            if ((ret = swap_in(mm, addr, &page)) != 0) {
+c01064e1:	83 ec 04             	sub    $0x4,%esp
+c01064e4:	8d 45 e0             	lea    -0x20(%ebp),%eax
+c01064e7:	50                   	push   %eax
+c01064e8:	ff 75 10             	pushl  0x10(%ebp)
+c01064eb:	ff 75 08             	pushl  0x8(%ebp)
+c01064ee:	e8 c5 0b 00 00       	call   c01070b8 <swap_in>
+c01064f3:	83 c4 10             	add    $0x10,%esp
+c01064f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01064f9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01064fd:	74 12                	je     c0106511 <do_pgfault+0x174>
+            	cprintf("swap_in in do_pgfault failed\n");
+c01064ff:	83 ec 0c             	sub    $0xc,%esp
+c0106502:	68 33 cf 10 c0       	push   $0xc010cf33
+c0106507:	e8 82 9d ff ff       	call   c010028e <cprintf>
+c010650c:	83 c4 10             	add    $0x10,%esp
+c010650f:	eb 57                	jmp    c0106568 <do_pgfault+0x1cb>
+            	goto failed;
+            }
+            page_insert(mm->pgdir, page, addr, perm);
+c0106511:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0106514:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106517:	8b 40 0c             	mov    0xc(%eax),%eax
+c010651a:	ff 75 f0             	pushl  -0x10(%ebp)
+c010651d:	ff 75 10             	pushl  0x10(%ebp)
+c0106520:	52                   	push   %edx
+c0106521:	50                   	push   %eax
+c0106522:	e8 f2 df ff ff       	call   c0104519 <page_insert>
+c0106527:	83 c4 10             	add    $0x10,%esp
+            swap_map_swappable(mm, addr, page, 1);
+c010652a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010652d:	6a 01                	push   $0x1
+c010652f:	50                   	push   %eax
+c0106530:	ff 75 10             	pushl  0x10(%ebp)
+c0106533:	ff 75 08             	pushl  0x8(%ebp)
+c0106536:	e8 ed 09 00 00       	call   c0106f28 <swap_map_swappable>
+c010653b:	83 c4 10             	add    $0x10,%esp
+            page->pra_vaddr = addr;
+c010653e:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0106541:	8b 55 10             	mov    0x10(%ebp),%edx
+c0106544:	89 50 1c             	mov    %edx,0x1c(%eax)
+c0106547:	eb 18                	jmp    c0106561 <do_pgfault+0x1c4>
+        }
+        else {
+            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
+c0106549:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010654c:	8b 00                	mov    (%eax),%eax
+c010654e:	83 ec 08             	sub    $0x8,%esp
+c0106551:	50                   	push   %eax
+c0106552:	68 54 cf 10 c0       	push   $0xc010cf54
+c0106557:	e8 32 9d ff ff       	call   c010028e <cprintf>
+c010655c:	83 c4 10             	add    $0x10,%esp
+            goto failed;
+c010655f:	eb 07                	jmp    c0106568 <do_pgfault+0x1cb>
+        }
+   }
+   ret = 0;
+c0106561:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+failed:
+    return ret;
+c0106568:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c010656b:	c9                   	leave  
+c010656c:	c3                   	ret    
+
+c010656d <user_mem_check>:
+
+bool
+user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
+c010656d:	55                   	push   %ebp
+c010656e:	89 e5                	mov    %esp,%ebp
+c0106570:	83 ec 10             	sub    $0x10,%esp
+    if (mm != NULL) {
+c0106573:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0106577:	0f 84 dc 00 00 00    	je     c0106659 <user_mem_check+0xec>
+        if (!USER_ACCESS(addr, addr + len)) {
+c010657d:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
+c0106584:	76 1c                	jbe    c01065a2 <user_mem_check+0x35>
+c0106586:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0106589:	8b 45 10             	mov    0x10(%ebp),%eax
+c010658c:	01 d0                	add    %edx,%eax
+c010658e:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0106591:	76 0f                	jbe    c01065a2 <user_mem_check+0x35>
+c0106593:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0106596:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106599:	01 d0                	add    %edx,%eax
+c010659b:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
+c01065a0:	76 0a                	jbe    c01065ac <user_mem_check+0x3f>
+            return 0;
+c01065a2:	b8 00 00 00 00       	mov    $0x0,%eax
+c01065a7:	e9 df 00 00 00       	jmp    c010668b <user_mem_check+0x11e>
+        }
+        struct vma_struct *vma;
+        uintptr_t start = addr, end = addr + len;
+c01065ac:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01065af:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c01065b2:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01065b5:	8b 45 10             	mov    0x10(%ebp),%eax
+c01065b8:	01 d0                	add    %edx,%eax
+c01065ba:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        while (start < end) {
+c01065bd:	e9 84 00 00 00       	jmp    c0106646 <user_mem_check+0xd9>
+            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
+c01065c2:	ff 75 fc             	pushl  -0x4(%ebp)
+c01065c5:	ff 75 08             	pushl  0x8(%ebp)
+c01065c8:	e8 6e f1 ff ff       	call   c010573b <find_vma>
+c01065cd:	83 c4 08             	add    $0x8,%esp
+c01065d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01065d3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01065d7:	74 0b                	je     c01065e4 <user_mem_check+0x77>
+c01065d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01065dc:	8b 40 04             	mov    0x4(%eax),%eax
+c01065df:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+c01065e2:	76 0a                	jbe    c01065ee <user_mem_check+0x81>
+                return 0;
+c01065e4:	b8 00 00 00 00       	mov    $0x0,%eax
+c01065e9:	e9 9d 00 00 00       	jmp    c010668b <user_mem_check+0x11e>
+            }
+            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
+c01065ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01065f1:	8b 40 0c             	mov    0xc(%eax),%eax
+c01065f4:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+c01065f8:	74 07                	je     c0106601 <user_mem_check+0x94>
+c01065fa:	ba 02 00 00 00       	mov    $0x2,%edx
+c01065ff:	eb 05                	jmp    c0106606 <user_mem_check+0x99>
+c0106601:	ba 01 00 00 00       	mov    $0x1,%edx
+c0106606:	21 d0                	and    %edx,%eax
+c0106608:	85 c0                	test   %eax,%eax
+c010660a:	75 07                	jne    c0106613 <user_mem_check+0xa6>
+                return 0;
+c010660c:	b8 00 00 00 00       	mov    $0x0,%eax
+c0106611:	eb 78                	jmp    c010668b <user_mem_check+0x11e>
+            }
+            if (write && (vma->vm_flags & VM_STACK)) {
+c0106613:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+c0106617:	74 24                	je     c010663d <user_mem_check+0xd0>
+c0106619:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010661c:	8b 40 0c             	mov    0xc(%eax),%eax
+c010661f:	83 e0 08             	and    $0x8,%eax
+c0106622:	85 c0                	test   %eax,%eax
+c0106624:	74 17                	je     c010663d <user_mem_check+0xd0>
+                if (start < vma->vm_start + PGSIZE) { //check stack start & size
+c0106626:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106629:	8b 40 04             	mov    0x4(%eax),%eax
+c010662c:	05 00 10 00 00       	add    $0x1000,%eax
+c0106631:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+c0106634:	76 07                	jbe    c010663d <user_mem_check+0xd0>
+                    return 0;
+c0106636:	b8 00 00 00 00       	mov    $0x0,%eax
+c010663b:	eb 4e                	jmp    c010668b <user_mem_check+0x11e>
+                }
+            }
+            start = vma->vm_end;
+c010663d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106640:	8b 40 08             	mov    0x8(%eax),%eax
+c0106643:	89 45 fc             	mov    %eax,-0x4(%ebp)
+        if (!USER_ACCESS(addr, addr + len)) {
+            return 0;
+        }
+        struct vma_struct *vma;
+        uintptr_t start = addr, end = addr + len;
+        while (start < end) {
+c0106646:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0106649:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+c010664c:	0f 82 70 ff ff ff    	jb     c01065c2 <user_mem_check+0x55>
+                    return 0;
+                }
+            }
+            start = vma->vm_end;
+        }
+        return 1;
+c0106652:	b8 01 00 00 00       	mov    $0x1,%eax
+c0106657:	eb 32                	jmp    c010668b <user_mem_check+0x11e>
+    }
+    return KERN_ACCESS(addr, addr + len);
+c0106659:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
+c0106660:	76 23                	jbe    c0106685 <user_mem_check+0x118>
+c0106662:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0106665:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106668:	01 d0                	add    %edx,%eax
+c010666a:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c010666d:	76 16                	jbe    c0106685 <user_mem_check+0x118>
+c010666f:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0106672:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106675:	01 d0                	add    %edx,%eax
+c0106677:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
+c010667c:	77 07                	ja     c0106685 <user_mem_check+0x118>
+c010667e:	b8 01 00 00 00       	mov    $0x1,%eax
+c0106683:	eb 05                	jmp    c010668a <user_mem_check+0x11d>
+c0106685:	b8 00 00 00 00       	mov    $0x0,%eax
+c010668a:	90                   	nop
+}
+c010668b:	c9                   	leave  
+c010668c:	c3                   	ret    
+
+c010668d <__intr_save>:
+#include <assert.h>
+#include <atomic.h>
+#include <sched.h>
+
+static inline bool
+__intr_save(void) {
+c010668d:	55                   	push   %ebp
+c010668e:	89 e5                	mov    %esp,%ebp
+c0106690:	83 ec 18             	sub    $0x18,%esp
+}
+
+static inline uint32_t
+read_eflags(void) {
+    uint32_t eflags;
+    asm volatile ("pushfl; popl %0" : "=r" (eflags));
+c0106693:	9c                   	pushf  
+c0106694:	58                   	pop    %eax
+c0106695:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return eflags;
+c0106698:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    if (read_eflags() & FL_IF) {
+c010669b:	25 00 02 00 00       	and    $0x200,%eax
+c01066a0:	85 c0                	test   %eax,%eax
+c01066a2:	74 0c                	je     c01066b0 <__intr_save+0x23>
+        intr_disable();
+c01066a4:	e8 e8 ba ff ff       	call   c0102191 <intr_disable>
+        return 1;
+c01066a9:	b8 01 00 00 00       	mov    $0x1,%eax
+c01066ae:	eb 05                	jmp    c01066b5 <__intr_save+0x28>
+    }
+    return 0;
+c01066b0:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01066b5:	c9                   	leave  
+c01066b6:	c3                   	ret    
+
+c01066b7 <__intr_restore>:
+
+static inline void
+__intr_restore(bool flag) {
+c01066b7:	55                   	push   %ebp
+c01066b8:	89 e5                	mov    %esp,%ebp
+c01066ba:	83 ec 08             	sub    $0x8,%esp
+    if (flag) {
+c01066bd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c01066c1:	74 05                	je     c01066c8 <__intr_restore+0x11>
+        intr_enable();
+c01066c3:	e8 c2 ba ff ff       	call   c010218a <intr_enable>
+    }
+}
+c01066c8:	90                   	nop
+c01066c9:	c9                   	leave  
+c01066ca:	c3                   	ret    
+
+c01066cb <page2ppn>:
+
+extern struct Page *pages;
+extern size_t npage;
+
+static inline ppn_t
+page2ppn(struct Page *page) {
+c01066cb:	55                   	push   %ebp
+c01066cc:	89 e5                	mov    %esp,%ebp
+    return page - pages;
+c01066ce:	8b 45 08             	mov    0x8(%ebp),%eax
+c01066d1:	8b 15 64 0d 1b c0    	mov    0xc01b0d64,%edx
+c01066d7:	29 d0                	sub    %edx,%eax
+c01066d9:	c1 f8 05             	sar    $0x5,%eax
+}
+c01066dc:	5d                   	pop    %ebp
+c01066dd:	c3                   	ret    
+
+c01066de <page2pa>:
+
+static inline uintptr_t
+page2pa(struct Page *page) {
+c01066de:	55                   	push   %ebp
+c01066df:	89 e5                	mov    %esp,%ebp
+    return page2ppn(page) << PGSHIFT;
+c01066e1:	ff 75 08             	pushl  0x8(%ebp)
+c01066e4:	e8 e2 ff ff ff       	call   c01066cb <page2ppn>
+c01066e9:	83 c4 04             	add    $0x4,%esp
+c01066ec:	c1 e0 0c             	shl    $0xc,%eax
+}
+c01066ef:	c9                   	leave  
+c01066f0:	c3                   	ret    
+
+c01066f1 <pa2page>:
+
+static inline struct Page *
+pa2page(uintptr_t pa) {
+c01066f1:	55                   	push   %ebp
+c01066f2:	89 e5                	mov    %esp,%ebp
+c01066f4:	83 ec 08             	sub    $0x8,%esp
+    if (PPN(pa) >= npage) {
+c01066f7:	8b 45 08             	mov    0x8(%ebp),%eax
+c01066fa:	c1 e8 0c             	shr    $0xc,%eax
+c01066fd:	89 c2                	mov    %eax,%edx
+c01066ff:	a1 60 ec 1a c0       	mov    0xc01aec60,%eax
+c0106704:	39 c2                	cmp    %eax,%edx
+c0106706:	72 14                	jb     c010671c <pa2page+0x2b>
+        panic("pa2page called with invalid pa");
+c0106708:	83 ec 04             	sub    $0x4,%esp
+c010670b:	68 7c cf 10 c0       	push   $0xc010cf7c
+c0106710:	6a 5e                	push   $0x5e
+c0106712:	68 9b cf 10 c0       	push   $0xc010cf9b
+c0106717:	e8 d8 9c ff ff       	call   c01003f4 <__panic>
+    }
+    return &pages[PPN(pa)];
+c010671c:	a1 64 0d 1b c0       	mov    0xc01b0d64,%eax
+c0106721:	8b 55 08             	mov    0x8(%ebp),%edx
+c0106724:	c1 ea 0c             	shr    $0xc,%edx
+c0106727:	c1 e2 05             	shl    $0x5,%edx
+c010672a:	01 d0                	add    %edx,%eax
+}
+c010672c:	c9                   	leave  
+c010672d:	c3                   	ret    
+
+c010672e <page2kva>:
+
+static inline void *
+page2kva(struct Page *page) {
+c010672e:	55                   	push   %ebp
+c010672f:	89 e5                	mov    %esp,%ebp
+c0106731:	83 ec 18             	sub    $0x18,%esp
+    return KADDR(page2pa(page));
+c0106734:	ff 75 08             	pushl  0x8(%ebp)
+c0106737:	e8 a2 ff ff ff       	call   c01066de <page2pa>
+c010673c:	83 c4 04             	add    $0x4,%esp
+c010673f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0106742:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106745:	c1 e8 0c             	shr    $0xc,%eax
+c0106748:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010674b:	a1 60 ec 1a c0       	mov    0xc01aec60,%eax
+c0106750:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c0106753:	72 14                	jb     c0106769 <page2kva+0x3b>
+c0106755:	ff 75 f4             	pushl  -0xc(%ebp)
+c0106758:	68 ac cf 10 c0       	push   $0xc010cfac
+c010675d:	6a 65                	push   $0x65
+c010675f:	68 9b cf 10 c0       	push   $0xc010cf9b
+c0106764:	e8 8b 9c ff ff       	call   c01003f4 <__panic>
+c0106769:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010676c:	2d 00 00 00 40       	sub    $0x40000000,%eax
+}
+c0106771:	c9                   	leave  
+c0106772:	c3                   	ret    
+
+c0106773 <kva2page>:
+
+static inline struct Page *
+kva2page(void *kva) {
+c0106773:	55                   	push   %ebp
+c0106774:	89 e5                	mov    %esp,%ebp
+c0106776:	83 ec 18             	sub    $0x18,%esp
+    return pa2page(PADDR(kva));
+c0106779:	8b 45 08             	mov    0x8(%ebp),%eax
+c010677c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010677f:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
+c0106786:	77 14                	ja     c010679c <kva2page+0x29>
+c0106788:	ff 75 f4             	pushl  -0xc(%ebp)
+c010678b:	68 d0 cf 10 c0       	push   $0xc010cfd0
+c0106790:	6a 6a                	push   $0x6a
+c0106792:	68 9b cf 10 c0       	push   $0xc010cf9b
+c0106797:	e8 58 9c ff ff       	call   c01003f4 <__panic>
+c010679c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010679f:	05 00 00 00 40       	add    $0x40000000,%eax
+c01067a4:	83 ec 0c             	sub    $0xc,%esp
+c01067a7:	50                   	push   %eax
+c01067a8:	e8 44 ff ff ff       	call   c01066f1 <pa2page>
+c01067ad:	83 c4 10             	add    $0x10,%esp
+}
+c01067b0:	c9                   	leave  
+c01067b1:	c3                   	ret    
+
+c01067b2 <__slob_get_free_pages>:
+static slob_t *slobfree = &arena;
+static bigblock_t *bigblocks;
+
+
+static void* __slob_get_free_pages(gfp_t gfp, int order)
+{
+c01067b2:	55                   	push   %ebp
+c01067b3:	89 e5                	mov    %esp,%ebp
+c01067b5:	83 ec 18             	sub    $0x18,%esp
+  struct Page * page = alloc_pages(1 << order);
+c01067b8:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01067bb:	ba 01 00 00 00       	mov    $0x1,%edx
+c01067c0:	89 c1                	mov    %eax,%ecx
+c01067c2:	d3 e2                	shl    %cl,%edx
+c01067c4:	89 d0                	mov    %edx,%eax
+c01067c6:	83 ec 0c             	sub    $0xc,%esp
+c01067c9:	50                   	push   %eax
+c01067ca:	e8 9d d0 ff ff       	call   c010386c <alloc_pages>
+c01067cf:	83 c4 10             	add    $0x10,%esp
+c01067d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(!page)
+c01067d5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01067d9:	75 07                	jne    c01067e2 <__slob_get_free_pages+0x30>
+    return NULL;
+c01067db:	b8 00 00 00 00       	mov    $0x0,%eax
+c01067e0:	eb 0e                	jmp    c01067f0 <__slob_get_free_pages+0x3e>
+  return page2kva(page);
+c01067e2:	83 ec 0c             	sub    $0xc,%esp
+c01067e5:	ff 75 f4             	pushl  -0xc(%ebp)
+c01067e8:	e8 41 ff ff ff       	call   c010672e <page2kva>
+c01067ed:	83 c4 10             	add    $0x10,%esp
+}
+c01067f0:	c9                   	leave  
+c01067f1:	c3                   	ret    
+
+c01067f2 <__slob_free_pages>:
+
+#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)
+
+static inline void __slob_free_pages(unsigned long kva, int order)
+{
+c01067f2:	55                   	push   %ebp
+c01067f3:	89 e5                	mov    %esp,%ebp
+c01067f5:	53                   	push   %ebx
+c01067f6:	83 ec 04             	sub    $0x4,%esp
+  free_pages(kva2page(kva), 1 << order);
+c01067f9:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01067fc:	ba 01 00 00 00       	mov    $0x1,%edx
+c0106801:	89 c1                	mov    %eax,%ecx
+c0106803:	d3 e2                	shl    %cl,%edx
+c0106805:	89 d0                	mov    %edx,%eax
+c0106807:	89 c3                	mov    %eax,%ebx
+c0106809:	8b 45 08             	mov    0x8(%ebp),%eax
+c010680c:	83 ec 0c             	sub    $0xc,%esp
+c010680f:	50                   	push   %eax
+c0106810:	e8 5e ff ff ff       	call   c0106773 <kva2page>
+c0106815:	83 c4 10             	add    $0x10,%esp
+c0106818:	83 ec 08             	sub    $0x8,%esp
+c010681b:	53                   	push   %ebx
+c010681c:	50                   	push   %eax
+c010681d:	e8 b6 d0 ff ff       	call   c01038d8 <free_pages>
+c0106822:	83 c4 10             	add    $0x10,%esp
+}
+c0106825:	90                   	nop
+c0106826:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+c0106829:	c9                   	leave  
+c010682a:	c3                   	ret    
+
+c010682b <slob_alloc>:
+
+static void slob_free(void *b, int size);
+
+static void *slob_alloc(size_t size, gfp_t gfp, int align)
+{
+c010682b:	55                   	push   %ebp
+c010682c:	89 e5                	mov    %esp,%ebp
+c010682e:	83 ec 28             	sub    $0x28,%esp
+  assert( (size + SLOB_UNIT) < PAGE_SIZE );
+c0106831:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106834:	83 c0 08             	add    $0x8,%eax
+c0106837:	3d ff 0f 00 00       	cmp    $0xfff,%eax
+c010683c:	76 16                	jbe    c0106854 <slob_alloc+0x29>
+c010683e:	68 f4 cf 10 c0       	push   $0xc010cff4
+c0106843:	68 13 d0 10 c0       	push   $0xc010d013
+c0106848:	6a 64                	push   $0x64
+c010684a:	68 28 d0 10 c0       	push   $0xc010d028
+c010684f:	e8 a0 9b ff ff       	call   c01003f4 <__panic>
+
+	slob_t *prev, *cur, *aligned = 0;
+c0106854:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+	int delta = 0, units = SLOB_UNITS(size);
+c010685b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+c0106862:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106865:	83 c0 07             	add    $0x7,%eax
+c0106868:	c1 e8 03             	shr    $0x3,%eax
+c010686b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+	unsigned long flags;
+
+	spin_lock_irqsave(&slob_lock, flags);
+c010686e:	e8 1a fe ff ff       	call   c010668d <__intr_save>
+c0106873:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+	prev = slobfree;
+c0106876:	a1 68 ca 12 c0       	mov    0xc012ca68,%eax
+c010687b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+	for (cur = prev->next; ; prev = cur, cur = cur->next) {
+c010687e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106881:	8b 40 04             	mov    0x4(%eax),%eax
+c0106884:	89 45 f0             	mov    %eax,-0x10(%ebp)
+		if (align) {
+c0106887:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010688b:	74 25                	je     c01068b2 <slob_alloc+0x87>
+			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
+c010688d:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0106890:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106893:	01 d0                	add    %edx,%eax
+c0106895:	8d 50 ff             	lea    -0x1(%eax),%edx
+c0106898:	8b 45 10             	mov    0x10(%ebp),%eax
+c010689b:	f7 d8                	neg    %eax
+c010689d:	21 d0                	and    %edx,%eax
+c010689f:	89 45 ec             	mov    %eax,-0x14(%ebp)
+			delta = aligned - cur;
+c01068a2:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c01068a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01068a8:	29 c2                	sub    %eax,%edx
+c01068aa:	89 d0                	mov    %edx,%eax
+c01068ac:	c1 f8 03             	sar    $0x3,%eax
+c01068af:	89 45 e8             	mov    %eax,-0x18(%ebp)
+		}
+		if (cur->units >= units + delta) { /* room enough? */
+c01068b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01068b5:	8b 00                	mov    (%eax),%eax
+c01068b7:	8b 4d e0             	mov    -0x20(%ebp),%ecx
+c01068ba:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c01068bd:	01 ca                	add    %ecx,%edx
+c01068bf:	39 d0                	cmp    %edx,%eax
+c01068c1:	0f 8c b1 00 00 00    	jl     c0106978 <slob_alloc+0x14d>
+			if (delta) { /* need to fragment head to align? */
+c01068c7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c01068cb:	74 38                	je     c0106905 <slob_alloc+0xda>
+				aligned->units = cur->units - delta;
+c01068cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01068d0:	8b 00                	mov    (%eax),%eax
+c01068d2:	2b 45 e8             	sub    -0x18(%ebp),%eax
+c01068d5:	89 c2                	mov    %eax,%edx
+c01068d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01068da:	89 10                	mov    %edx,(%eax)
+				aligned->next = cur->next;
+c01068dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01068df:	8b 50 04             	mov    0x4(%eax),%edx
+c01068e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01068e5:	89 50 04             	mov    %edx,0x4(%eax)
+				cur->next = aligned;
+c01068e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01068eb:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c01068ee:	89 50 04             	mov    %edx,0x4(%eax)
+				cur->units = delta;
+c01068f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01068f4:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c01068f7:	89 10                	mov    %edx,(%eax)
+				prev = cur;
+c01068f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01068fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+				cur = aligned;
+c01068ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0106902:	89 45 f0             	mov    %eax,-0x10(%ebp)
+			}
+
+			if (cur->units == units) /* exact fit? */
+c0106905:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106908:	8b 00                	mov    (%eax),%eax
+c010690a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
+c010690d:	75 0e                	jne    c010691d <slob_alloc+0xf2>
+				prev->next = cur->next; /* unlink */
+c010690f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106912:	8b 50 04             	mov    0x4(%eax),%edx
+c0106915:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106918:	89 50 04             	mov    %edx,0x4(%eax)
+c010691b:	eb 3c                	jmp    c0106959 <slob_alloc+0x12e>
+			else { /* fragment */
+				prev->next = cur + units;
+c010691d:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0106920:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0106927:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010692a:	01 c2                	add    %eax,%edx
+c010692c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010692f:	89 50 04             	mov    %edx,0x4(%eax)
+				prev->next->units = cur->units - units;
+c0106932:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106935:	8b 40 04             	mov    0x4(%eax),%eax
+c0106938:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010693b:	8b 12                	mov    (%edx),%edx
+c010693d:	2b 55 e0             	sub    -0x20(%ebp),%edx
+c0106940:	89 10                	mov    %edx,(%eax)
+				prev->next->next = cur->next;
+c0106942:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106945:	8b 40 04             	mov    0x4(%eax),%eax
+c0106948:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010694b:	8b 52 04             	mov    0x4(%edx),%edx
+c010694e:	89 50 04             	mov    %edx,0x4(%eax)
+				cur->units = units;
+c0106951:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106954:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0106957:	89 10                	mov    %edx,(%eax)
+			}
+
+			slobfree = prev;
+c0106959:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010695c:	a3 68 ca 12 c0       	mov    %eax,0xc012ca68
+			spin_unlock_irqrestore(&slob_lock, flags);
+c0106961:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0106964:	83 ec 0c             	sub    $0xc,%esp
+c0106967:	50                   	push   %eax
+c0106968:	e8 4a fd ff ff       	call   c01066b7 <__intr_restore>
+c010696d:	83 c4 10             	add    $0x10,%esp
+			return cur;
+c0106970:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106973:	e9 80 00 00 00       	jmp    c01069f8 <slob_alloc+0x1cd>
+		}
+		if (cur == slobfree) {
+c0106978:	a1 68 ca 12 c0       	mov    0xc012ca68,%eax
+c010697d:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c0106980:	75 62                	jne    c01069e4 <slob_alloc+0x1b9>
+			spin_unlock_irqrestore(&slob_lock, flags);
+c0106982:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0106985:	83 ec 0c             	sub    $0xc,%esp
+c0106988:	50                   	push   %eax
+c0106989:	e8 29 fd ff ff       	call   c01066b7 <__intr_restore>
+c010698e:	83 c4 10             	add    $0x10,%esp
+
+			if (size == PAGE_SIZE) /* trying to shrink arena? */
+c0106991:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
+c0106998:	75 07                	jne    c01069a1 <slob_alloc+0x176>
+				return 0;
+c010699a:	b8 00 00 00 00       	mov    $0x0,%eax
+c010699f:	eb 57                	jmp    c01069f8 <slob_alloc+0x1cd>
+
+			cur = (slob_t *)__slob_get_free_page(gfp);
+c01069a1:	83 ec 08             	sub    $0x8,%esp
+c01069a4:	6a 00                	push   $0x0
+c01069a6:	ff 75 0c             	pushl  0xc(%ebp)
+c01069a9:	e8 04 fe ff ff       	call   c01067b2 <__slob_get_free_pages>
+c01069ae:	83 c4 10             	add    $0x10,%esp
+c01069b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
+			if (!cur)
+c01069b4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c01069b8:	75 07                	jne    c01069c1 <slob_alloc+0x196>
+				return 0;
+c01069ba:	b8 00 00 00 00       	mov    $0x0,%eax
+c01069bf:	eb 37                	jmp    c01069f8 <slob_alloc+0x1cd>
+
+			slob_free(cur, PAGE_SIZE);
+c01069c1:	83 ec 08             	sub    $0x8,%esp
+c01069c4:	68 00 10 00 00       	push   $0x1000
+c01069c9:	ff 75 f0             	pushl  -0x10(%ebp)
+c01069cc:	e8 29 00 00 00       	call   c01069fa <slob_free>
+c01069d1:	83 c4 10             	add    $0x10,%esp
+			spin_lock_irqsave(&slob_lock, flags);
+c01069d4:	e8 b4 fc ff ff       	call   c010668d <__intr_save>
+c01069d9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+			cur = slobfree;
+c01069dc:	a1 68 ca 12 c0       	mov    0xc012ca68,%eax
+c01069e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
+	int delta = 0, units = SLOB_UNITS(size);
+	unsigned long flags;
+
+	spin_lock_irqsave(&slob_lock, flags);
+	prev = slobfree;
+	for (cur = prev->next; ; prev = cur, cur = cur->next) {
+c01069e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01069e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01069ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01069ed:	8b 40 04             	mov    0x4(%eax),%eax
+c01069f0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+
+			slob_free(cur, PAGE_SIZE);
+			spin_lock_irqsave(&slob_lock, flags);
+			cur = slobfree;
+		}
+	}
+c01069f3:	e9 8f fe ff ff       	jmp    c0106887 <slob_alloc+0x5c>
+}
+c01069f8:	c9                   	leave  
+c01069f9:	c3                   	ret    
+
+c01069fa <slob_free>:
+
+static void slob_free(void *block, int size)
+{
+c01069fa:	55                   	push   %ebp
+c01069fb:	89 e5                	mov    %esp,%ebp
+c01069fd:	83 ec 18             	sub    $0x18,%esp
+	slob_t *cur, *b = (slob_t *)block;
+c0106a00:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106a03:	89 45 f0             	mov    %eax,-0x10(%ebp)
+	unsigned long flags;
+
+	if (!block)
+c0106a06:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0106a0a:	0f 84 05 01 00 00    	je     c0106b15 <slob_free+0x11b>
+		return;
+
+	if (size)
+c0106a10:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c0106a14:	74 10                	je     c0106a26 <slob_free+0x2c>
+		b->units = SLOB_UNITS(size);
+c0106a16:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0106a19:	83 c0 07             	add    $0x7,%eax
+c0106a1c:	c1 e8 03             	shr    $0x3,%eax
+c0106a1f:	89 c2                	mov    %eax,%edx
+c0106a21:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106a24:	89 10                	mov    %edx,(%eax)
+
+	/* Find reinsertion point */
+	spin_lock_irqsave(&slob_lock, flags);
+c0106a26:	e8 62 fc ff ff       	call   c010668d <__intr_save>
+c0106a2b:	89 45 ec             	mov    %eax,-0x14(%ebp)
+	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
+c0106a2e:	a1 68 ca 12 c0       	mov    0xc012ca68,%eax
+c0106a33:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0106a36:	eb 27                	jmp    c0106a5f <slob_free+0x65>
+		if (cur >= cur->next && (b > cur || b < cur->next))
+c0106a38:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106a3b:	8b 40 04             	mov    0x4(%eax),%eax
+c0106a3e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0106a41:	77 13                	ja     c0106a56 <slob_free+0x5c>
+c0106a43:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106a46:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0106a49:	77 27                	ja     c0106a72 <slob_free+0x78>
+c0106a4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106a4e:	8b 40 04             	mov    0x4(%eax),%eax
+c0106a51:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c0106a54:	77 1c                	ja     c0106a72 <slob_free+0x78>
+	if (size)
+		b->units = SLOB_UNITS(size);
+
+	/* Find reinsertion point */
+	spin_lock_irqsave(&slob_lock, flags);
+	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
+c0106a56:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106a59:	8b 40 04             	mov    0x4(%eax),%eax
+c0106a5c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0106a5f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106a62:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0106a65:	76 d1                	jbe    c0106a38 <slob_free+0x3e>
+c0106a67:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106a6a:	8b 40 04             	mov    0x4(%eax),%eax
+c0106a6d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c0106a70:	76 c6                	jbe    c0106a38 <slob_free+0x3e>
+		if (cur >= cur->next && (b > cur || b < cur->next))
+			break;
+
+	if (b + b->units == cur->next) {
+c0106a72:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106a75:	8b 00                	mov    (%eax),%eax
+c0106a77:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0106a7e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106a81:	01 c2                	add    %eax,%edx
+c0106a83:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106a86:	8b 40 04             	mov    0x4(%eax),%eax
+c0106a89:	39 c2                	cmp    %eax,%edx
+c0106a8b:	75 25                	jne    c0106ab2 <slob_free+0xb8>
+		b->units += cur->next->units;
+c0106a8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106a90:	8b 10                	mov    (%eax),%edx
+c0106a92:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106a95:	8b 40 04             	mov    0x4(%eax),%eax
+c0106a98:	8b 00                	mov    (%eax),%eax
+c0106a9a:	01 c2                	add    %eax,%edx
+c0106a9c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106a9f:	89 10                	mov    %edx,(%eax)
+		b->next = cur->next->next;
+c0106aa1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106aa4:	8b 40 04             	mov    0x4(%eax),%eax
+c0106aa7:	8b 50 04             	mov    0x4(%eax),%edx
+c0106aaa:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106aad:	89 50 04             	mov    %edx,0x4(%eax)
+c0106ab0:	eb 0c                	jmp    c0106abe <slob_free+0xc4>
+	} else
+		b->next = cur->next;
+c0106ab2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106ab5:	8b 50 04             	mov    0x4(%eax),%edx
+c0106ab8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106abb:	89 50 04             	mov    %edx,0x4(%eax)
+
+	if (cur + cur->units == b) {
+c0106abe:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106ac1:	8b 00                	mov    (%eax),%eax
+c0106ac3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0106aca:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106acd:	01 d0                	add    %edx,%eax
+c0106acf:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c0106ad2:	75 1f                	jne    c0106af3 <slob_free+0xf9>
+		cur->units += b->units;
+c0106ad4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106ad7:	8b 10                	mov    (%eax),%edx
+c0106ad9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106adc:	8b 00                	mov    (%eax),%eax
+c0106ade:	01 c2                	add    %eax,%edx
+c0106ae0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106ae3:	89 10                	mov    %edx,(%eax)
+		cur->next = b->next;
+c0106ae5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106ae8:	8b 50 04             	mov    0x4(%eax),%edx
+c0106aeb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106aee:	89 50 04             	mov    %edx,0x4(%eax)
+c0106af1:	eb 09                	jmp    c0106afc <slob_free+0x102>
+	} else
+		cur->next = b;
+c0106af3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106af6:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0106af9:	89 50 04             	mov    %edx,0x4(%eax)
+
+	slobfree = cur;
+c0106afc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106aff:	a3 68 ca 12 c0       	mov    %eax,0xc012ca68
+
+	spin_unlock_irqrestore(&slob_lock, flags);
+c0106b04:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0106b07:	83 ec 0c             	sub    $0xc,%esp
+c0106b0a:	50                   	push   %eax
+c0106b0b:	e8 a7 fb ff ff       	call   c01066b7 <__intr_restore>
+c0106b10:	83 c4 10             	add    $0x10,%esp
+c0106b13:	eb 01                	jmp    c0106b16 <slob_free+0x11c>
+{
+	slob_t *cur, *b = (slob_t *)block;
+	unsigned long flags;
+
+	if (!block)
+		return;
+c0106b15:	90                   	nop
+		cur->next = b;
+
+	slobfree = cur;
+
+	spin_unlock_irqrestore(&slob_lock, flags);
+}
+c0106b16:	c9                   	leave  
+c0106b17:	c3                   	ret    
+
+c0106b18 <slob_init>:
+
+
+
+void
+slob_init(void) {
+c0106b18:	55                   	push   %ebp
+c0106b19:	89 e5                	mov    %esp,%ebp
+c0106b1b:	83 ec 08             	sub    $0x8,%esp
+  cprintf("use SLOB allocator\n");
+c0106b1e:	83 ec 0c             	sub    $0xc,%esp
+c0106b21:	68 3a d0 10 c0       	push   $0xc010d03a
+c0106b26:	e8 63 97 ff ff       	call   c010028e <cprintf>
+c0106b2b:	83 c4 10             	add    $0x10,%esp
+}
+c0106b2e:	90                   	nop
+c0106b2f:	c9                   	leave  
+c0106b30:	c3                   	ret    
+
+c0106b31 <kmalloc_init>:
+
+inline void 
+kmalloc_init(void) {
+c0106b31:	55                   	push   %ebp
+c0106b32:	89 e5                	mov    %esp,%ebp
+c0106b34:	83 ec 08             	sub    $0x8,%esp
+    slob_init();
+c0106b37:	e8 dc ff ff ff       	call   c0106b18 <slob_init>
+    cprintf("kmalloc_init() succeeded!\n");
+c0106b3c:	83 ec 0c             	sub    $0xc,%esp
+c0106b3f:	68 4e d0 10 c0       	push   $0xc010d04e
+c0106b44:	e8 45 97 ff ff       	call   c010028e <cprintf>
+c0106b49:	83 c4 10             	add    $0x10,%esp
+}
+c0106b4c:	90                   	nop
+c0106b4d:	c9                   	leave  
+c0106b4e:	c3                   	ret    
+
+c0106b4f <slob_allocated>:
+
+size_t
+slob_allocated(void) {
+c0106b4f:	55                   	push   %ebp
+c0106b50:	89 e5                	mov    %esp,%ebp
+  return 0;
+c0106b52:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0106b57:	5d                   	pop    %ebp
+c0106b58:	c3                   	ret    
+
+c0106b59 <kallocated>:
+
+size_t
+kallocated(void) {
+c0106b59:	55                   	push   %ebp
+c0106b5a:	89 e5                	mov    %esp,%ebp
+   return slob_allocated();
+c0106b5c:	e8 ee ff ff ff       	call   c0106b4f <slob_allocated>
+}
+c0106b61:	5d                   	pop    %ebp
+c0106b62:	c3                   	ret    
+
+c0106b63 <find_order>:
+
+static int find_order(int size)
+{
+c0106b63:	55                   	push   %ebp
+c0106b64:	89 e5                	mov    %esp,%ebp
+c0106b66:	83 ec 10             	sub    $0x10,%esp
+	int order = 0;
+c0106b69:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+	for ( ; size > 4096 ; size >>=1)
+c0106b70:	eb 07                	jmp    c0106b79 <find_order+0x16>
+		order++;
+c0106b72:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+}
+
+static int find_order(int size)
+{
+	int order = 0;
+	for ( ; size > 4096 ; size >>=1)
+c0106b76:	d1 7d 08             	sarl   0x8(%ebp)
+c0106b79:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
+c0106b80:	7f f0                	jg     c0106b72 <find_order+0xf>
+		order++;
+	return order;
+c0106b82:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+c0106b85:	c9                   	leave  
+c0106b86:	c3                   	ret    
+
+c0106b87 <__kmalloc>:
+
+static void *__kmalloc(size_t size, gfp_t gfp)
+{
+c0106b87:	55                   	push   %ebp
+c0106b88:	89 e5                	mov    %esp,%ebp
+c0106b8a:	83 ec 18             	sub    $0x18,%esp
+	slob_t *m;
+	bigblock_t *bb;
+	unsigned long flags;
+
+	if (size < PAGE_SIZE - SLOB_UNIT) {
+c0106b8d:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
+c0106b94:	77 35                	ja     c0106bcb <__kmalloc+0x44>
+		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
+c0106b96:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106b99:	83 c0 08             	add    $0x8,%eax
+c0106b9c:	83 ec 04             	sub    $0x4,%esp
+c0106b9f:	6a 00                	push   $0x0
+c0106ba1:	ff 75 0c             	pushl  0xc(%ebp)
+c0106ba4:	50                   	push   %eax
+c0106ba5:	e8 81 fc ff ff       	call   c010682b <slob_alloc>
+c0106baa:	83 c4 10             	add    $0x10,%esp
+c0106bad:	89 45 f4             	mov    %eax,-0xc(%ebp)
+		return m ? (void *)(m + 1) : 0;
+c0106bb0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0106bb4:	74 0b                	je     c0106bc1 <__kmalloc+0x3a>
+c0106bb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106bb9:	83 c0 08             	add    $0x8,%eax
+c0106bbc:	e9 b3 00 00 00       	jmp    c0106c74 <__kmalloc+0xed>
+c0106bc1:	b8 00 00 00 00       	mov    $0x0,%eax
+c0106bc6:	e9 a9 00 00 00       	jmp    c0106c74 <__kmalloc+0xed>
+	}
+
+	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
+c0106bcb:	83 ec 04             	sub    $0x4,%esp
+c0106bce:	6a 00                	push   $0x0
+c0106bd0:	ff 75 0c             	pushl  0xc(%ebp)
+c0106bd3:	6a 0c                	push   $0xc
+c0106bd5:	e8 51 fc ff ff       	call   c010682b <slob_alloc>
+c0106bda:	83 c4 10             	add    $0x10,%esp
+c0106bdd:	89 45 f0             	mov    %eax,-0x10(%ebp)
+	if (!bb)
+c0106be0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0106be4:	75 0a                	jne    c0106bf0 <__kmalloc+0x69>
+		return 0;
+c0106be6:	b8 00 00 00 00       	mov    $0x0,%eax
+c0106beb:	e9 84 00 00 00       	jmp    c0106c74 <__kmalloc+0xed>
+
+	bb->order = find_order(size);
+c0106bf0:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106bf3:	83 ec 0c             	sub    $0xc,%esp
+c0106bf6:	50                   	push   %eax
+c0106bf7:	e8 67 ff ff ff       	call   c0106b63 <find_order>
+c0106bfc:	83 c4 10             	add    $0x10,%esp
+c0106bff:	89 c2                	mov    %eax,%edx
+c0106c01:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106c04:	89 10                	mov    %edx,(%eax)
+	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
+c0106c06:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106c09:	8b 00                	mov    (%eax),%eax
+c0106c0b:	83 ec 08             	sub    $0x8,%esp
+c0106c0e:	50                   	push   %eax
+c0106c0f:	ff 75 0c             	pushl  0xc(%ebp)
+c0106c12:	e8 9b fb ff ff       	call   c01067b2 <__slob_get_free_pages>
+c0106c17:	83 c4 10             	add    $0x10,%esp
+c0106c1a:	89 c2                	mov    %eax,%edx
+c0106c1c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106c1f:	89 50 04             	mov    %edx,0x4(%eax)
+
+	if (bb->pages) {
+c0106c22:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106c25:	8b 40 04             	mov    0x4(%eax),%eax
+c0106c28:	85 c0                	test   %eax,%eax
+c0106c2a:	74 33                	je     c0106c5f <__kmalloc+0xd8>
+		spin_lock_irqsave(&block_lock, flags);
+c0106c2c:	e8 5c fa ff ff       	call   c010668d <__intr_save>
+c0106c31:	89 45 ec             	mov    %eax,-0x14(%ebp)
+		bb->next = bigblocks;
+c0106c34:	8b 15 f0 ec 1a c0    	mov    0xc01aecf0,%edx
+c0106c3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106c3d:	89 50 08             	mov    %edx,0x8(%eax)
+		bigblocks = bb;
+c0106c40:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106c43:	a3 f0 ec 1a c0       	mov    %eax,0xc01aecf0
+		spin_unlock_irqrestore(&block_lock, flags);
+c0106c48:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0106c4b:	83 ec 0c             	sub    $0xc,%esp
+c0106c4e:	50                   	push   %eax
+c0106c4f:	e8 63 fa ff ff       	call   c01066b7 <__intr_restore>
+c0106c54:	83 c4 10             	add    $0x10,%esp
+		return bb->pages;
+c0106c57:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106c5a:	8b 40 04             	mov    0x4(%eax),%eax
+c0106c5d:	eb 15                	jmp    c0106c74 <__kmalloc+0xed>
+	}
+
+	slob_free(bb, sizeof(bigblock_t));
+c0106c5f:	83 ec 08             	sub    $0x8,%esp
+c0106c62:	6a 0c                	push   $0xc
+c0106c64:	ff 75 f0             	pushl  -0x10(%ebp)
+c0106c67:	e8 8e fd ff ff       	call   c01069fa <slob_free>
+c0106c6c:	83 c4 10             	add    $0x10,%esp
+	return 0;
+c0106c6f:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0106c74:	c9                   	leave  
+c0106c75:	c3                   	ret    
+
+c0106c76 <kmalloc>:
+
+void *
+kmalloc(size_t size)
+{
+c0106c76:	55                   	push   %ebp
+c0106c77:	89 e5                	mov    %esp,%ebp
+c0106c79:	83 ec 08             	sub    $0x8,%esp
+  return __kmalloc(size, 0);
+c0106c7c:	83 ec 08             	sub    $0x8,%esp
+c0106c7f:	6a 00                	push   $0x0
+c0106c81:	ff 75 08             	pushl  0x8(%ebp)
+c0106c84:	e8 fe fe ff ff       	call   c0106b87 <__kmalloc>
+c0106c89:	83 c4 10             	add    $0x10,%esp
+}
+c0106c8c:	c9                   	leave  
+c0106c8d:	c3                   	ret    
+
+c0106c8e <kfree>:
+
+
+void kfree(void *block)
+{
+c0106c8e:	55                   	push   %ebp
+c0106c8f:	89 e5                	mov    %esp,%ebp
+c0106c91:	83 ec 18             	sub    $0x18,%esp
+	bigblock_t *bb, **last = &bigblocks;
+c0106c94:	c7 45 f0 f0 ec 1a c0 	movl   $0xc01aecf0,-0x10(%ebp)
+	unsigned long flags;
+
+	if (!block)
+c0106c9b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0106c9f:	0f 84 ac 00 00 00    	je     c0106d51 <kfree+0xc3>
+		return;
+
+	if (!((unsigned long)block & (PAGE_SIZE-1))) {
+c0106ca5:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106ca8:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0106cad:	85 c0                	test   %eax,%eax
+c0106caf:	0f 85 85 00 00 00    	jne    c0106d3a <kfree+0xac>
+		/* might be on the big block list */
+		spin_lock_irqsave(&block_lock, flags);
+c0106cb5:	e8 d3 f9 ff ff       	call   c010668d <__intr_save>
+c0106cba:	89 45 ec             	mov    %eax,-0x14(%ebp)
+		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
+c0106cbd:	a1 f0 ec 1a c0       	mov    0xc01aecf0,%eax
+c0106cc2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0106cc5:	eb 5e                	jmp    c0106d25 <kfree+0x97>
+			if (bb->pages == block) {
+c0106cc7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106cca:	8b 40 04             	mov    0x4(%eax),%eax
+c0106ccd:	3b 45 08             	cmp    0x8(%ebp),%eax
+c0106cd0:	75 41                	jne    c0106d13 <kfree+0x85>
+				*last = bb->next;
+c0106cd2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106cd5:	8b 50 08             	mov    0x8(%eax),%edx
+c0106cd8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106cdb:	89 10                	mov    %edx,(%eax)
+				spin_unlock_irqrestore(&block_lock, flags);
+c0106cdd:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0106ce0:	83 ec 0c             	sub    $0xc,%esp
+c0106ce3:	50                   	push   %eax
+c0106ce4:	e8 ce f9 ff ff       	call   c01066b7 <__intr_restore>
+c0106ce9:	83 c4 10             	add    $0x10,%esp
+				__slob_free_pages((unsigned long)block, bb->order);
+c0106cec:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106cef:	8b 10                	mov    (%eax),%edx
+c0106cf1:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106cf4:	83 ec 08             	sub    $0x8,%esp
+c0106cf7:	52                   	push   %edx
+c0106cf8:	50                   	push   %eax
+c0106cf9:	e8 f4 fa ff ff       	call   c01067f2 <__slob_free_pages>
+c0106cfe:	83 c4 10             	add    $0x10,%esp
+				slob_free(bb, sizeof(bigblock_t));
+c0106d01:	83 ec 08             	sub    $0x8,%esp
+c0106d04:	6a 0c                	push   $0xc
+c0106d06:	ff 75 f4             	pushl  -0xc(%ebp)
+c0106d09:	e8 ec fc ff ff       	call   c01069fa <slob_free>
+c0106d0e:	83 c4 10             	add    $0x10,%esp
+				return;
+c0106d11:	eb 3f                	jmp    c0106d52 <kfree+0xc4>
+		return;
+
+	if (!((unsigned long)block & (PAGE_SIZE-1))) {
+		/* might be on the big block list */
+		spin_lock_irqsave(&block_lock, flags);
+		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
+c0106d13:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106d16:	83 c0 08             	add    $0x8,%eax
+c0106d19:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0106d1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106d1f:	8b 40 08             	mov    0x8(%eax),%eax
+c0106d22:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0106d25:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0106d29:	75 9c                	jne    c0106cc7 <kfree+0x39>
+				__slob_free_pages((unsigned long)block, bb->order);
+				slob_free(bb, sizeof(bigblock_t));
+				return;
+			}
+		}
+		spin_unlock_irqrestore(&block_lock, flags);
+c0106d2b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0106d2e:	83 ec 0c             	sub    $0xc,%esp
+c0106d31:	50                   	push   %eax
+c0106d32:	e8 80 f9 ff ff       	call   c01066b7 <__intr_restore>
+c0106d37:	83 c4 10             	add    $0x10,%esp
+	}
+
+	slob_free((slob_t *)block - 1, 0);
+c0106d3a:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106d3d:	83 e8 08             	sub    $0x8,%eax
+c0106d40:	83 ec 08             	sub    $0x8,%esp
+c0106d43:	6a 00                	push   $0x0
+c0106d45:	50                   	push   %eax
+c0106d46:	e8 af fc ff ff       	call   c01069fa <slob_free>
+c0106d4b:	83 c4 10             	add    $0x10,%esp
+	return;
+c0106d4e:	90                   	nop
+c0106d4f:	eb 01                	jmp    c0106d52 <kfree+0xc4>
+{
+	bigblock_t *bb, **last = &bigblocks;
+	unsigned long flags;
+
+	if (!block)
+		return;
+c0106d51:	90                   	nop
+		spin_unlock_irqrestore(&block_lock, flags);
+	}
+
+	slob_free((slob_t *)block - 1, 0);
+	return;
+}
+c0106d52:	c9                   	leave  
+c0106d53:	c3                   	ret    
+
+c0106d54 <ksize>:
+
+
+unsigned int ksize(const void *block)
+{
+c0106d54:	55                   	push   %ebp
+c0106d55:	89 e5                	mov    %esp,%ebp
+c0106d57:	83 ec 18             	sub    $0x18,%esp
+	bigblock_t *bb;
+	unsigned long flags;
+
+	if (!block)
+c0106d5a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0106d5e:	75 07                	jne    c0106d67 <ksize+0x13>
+		return 0;
+c0106d60:	b8 00 00 00 00       	mov    $0x0,%eax
+c0106d65:	eb 73                	jmp    c0106dda <ksize+0x86>
+
+	if (!((unsigned long)block & (PAGE_SIZE-1))) {
+c0106d67:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106d6a:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0106d6f:	85 c0                	test   %eax,%eax
+c0106d71:	75 5c                	jne    c0106dcf <ksize+0x7b>
+		spin_lock_irqsave(&block_lock, flags);
+c0106d73:	e8 15 f9 ff ff       	call   c010668d <__intr_save>
+c0106d78:	89 45 f0             	mov    %eax,-0x10(%ebp)
+		for (bb = bigblocks; bb; bb = bb->next)
+c0106d7b:	a1 f0 ec 1a c0       	mov    0xc01aecf0,%eax
+c0106d80:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0106d83:	eb 35                	jmp    c0106dba <ksize+0x66>
+			if (bb->pages == block) {
+c0106d85:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106d88:	8b 40 04             	mov    0x4(%eax),%eax
+c0106d8b:	3b 45 08             	cmp    0x8(%ebp),%eax
+c0106d8e:	75 21                	jne    c0106db1 <ksize+0x5d>
+				spin_unlock_irqrestore(&slob_lock, flags);
+c0106d90:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106d93:	83 ec 0c             	sub    $0xc,%esp
+c0106d96:	50                   	push   %eax
+c0106d97:	e8 1b f9 ff ff       	call   c01066b7 <__intr_restore>
+c0106d9c:	83 c4 10             	add    $0x10,%esp
+				return PAGE_SIZE << bb->order;
+c0106d9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106da2:	8b 00                	mov    (%eax),%eax
+c0106da4:	ba 00 10 00 00       	mov    $0x1000,%edx
+c0106da9:	89 c1                	mov    %eax,%ecx
+c0106dab:	d3 e2                	shl    %cl,%edx
+c0106dad:	89 d0                	mov    %edx,%eax
+c0106daf:	eb 29                	jmp    c0106dda <ksize+0x86>
+	if (!block)
+		return 0;
+
+	if (!((unsigned long)block & (PAGE_SIZE-1))) {
+		spin_lock_irqsave(&block_lock, flags);
+		for (bb = bigblocks; bb; bb = bb->next)
+c0106db1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106db4:	8b 40 08             	mov    0x8(%eax),%eax
+c0106db7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0106dba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0106dbe:	75 c5                	jne    c0106d85 <ksize+0x31>
+			if (bb->pages == block) {
+				spin_unlock_irqrestore(&slob_lock, flags);
+				return PAGE_SIZE << bb->order;
+			}
+		spin_unlock_irqrestore(&block_lock, flags);
+c0106dc0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106dc3:	83 ec 0c             	sub    $0xc,%esp
+c0106dc6:	50                   	push   %eax
+c0106dc7:	e8 eb f8 ff ff       	call   c01066b7 <__intr_restore>
+c0106dcc:	83 c4 10             	add    $0x10,%esp
+	}
+
+	return ((slob_t *)block - 1)->units * SLOB_UNIT;
+c0106dcf:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106dd2:	83 e8 08             	sub    $0x8,%eax
+c0106dd5:	8b 00                	mov    (%eax),%eax
+c0106dd7:	c1 e0 03             	shl    $0x3,%eax
+}
+c0106dda:	c9                   	leave  
+c0106ddb:	c3                   	ret    
+
+c0106ddc <pa2page>:
+page2pa(struct Page *page) {
+    return page2ppn(page) << PGSHIFT;
+}
+
+static inline struct Page *
+pa2page(uintptr_t pa) {
+c0106ddc:	55                   	push   %ebp
+c0106ddd:	89 e5                	mov    %esp,%ebp
+c0106ddf:	83 ec 08             	sub    $0x8,%esp
+    if (PPN(pa) >= npage) {
+c0106de2:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106de5:	c1 e8 0c             	shr    $0xc,%eax
+c0106de8:	89 c2                	mov    %eax,%edx
+c0106dea:	a1 60 ec 1a c0       	mov    0xc01aec60,%eax
+c0106def:	39 c2                	cmp    %eax,%edx
+c0106df1:	72 14                	jb     c0106e07 <pa2page+0x2b>
+        panic("pa2page called with invalid pa");
+c0106df3:	83 ec 04             	sub    $0x4,%esp
+c0106df6:	68 6c d0 10 c0       	push   $0xc010d06c
+c0106dfb:	6a 5e                	push   $0x5e
+c0106dfd:	68 8b d0 10 c0       	push   $0xc010d08b
+c0106e02:	e8 ed 95 ff ff       	call   c01003f4 <__panic>
+    }
+    return &pages[PPN(pa)];
+c0106e07:	a1 64 0d 1b c0       	mov    0xc01b0d64,%eax
+c0106e0c:	8b 55 08             	mov    0x8(%ebp),%edx
+c0106e0f:	c1 ea 0c             	shr    $0xc,%edx
+c0106e12:	c1 e2 05             	shl    $0x5,%edx
+c0106e15:	01 d0                	add    %edx,%eax
+}
+c0106e17:	c9                   	leave  
+c0106e18:	c3                   	ret    
+
+c0106e19 <pte2page>:
+kva2page(void *kva) {
+    return pa2page(PADDR(kva));
+}
+
+static inline struct Page *
+pte2page(pte_t pte) {
+c0106e19:	55                   	push   %ebp
+c0106e1a:	89 e5                	mov    %esp,%ebp
+c0106e1c:	83 ec 08             	sub    $0x8,%esp
+    if (!(pte & PTE_P)) {
+c0106e1f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106e22:	83 e0 01             	and    $0x1,%eax
+c0106e25:	85 c0                	test   %eax,%eax
+c0106e27:	75 14                	jne    c0106e3d <pte2page+0x24>
+        panic("pte2page called with invalid pte");
+c0106e29:	83 ec 04             	sub    $0x4,%esp
+c0106e2c:	68 9c d0 10 c0       	push   $0xc010d09c
+c0106e31:	6a 70                	push   $0x70
+c0106e33:	68 8b d0 10 c0       	push   $0xc010d08b
+c0106e38:	e8 b7 95 ff ff       	call   c01003f4 <__panic>
+    }
+    return pa2page(PTE_ADDR(pte));
+c0106e3d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106e40:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0106e45:	83 ec 0c             	sub    $0xc,%esp
+c0106e48:	50                   	push   %eax
+c0106e49:	e8 8e ff ff ff       	call   c0106ddc <pa2page>
+c0106e4e:	83 c4 10             	add    $0x10,%esp
+}
+c0106e51:	c9                   	leave  
+c0106e52:	c3                   	ret    
+
+c0106e53 <pde2page>:
+
+static inline struct Page *
+pde2page(pde_t pde) {
+c0106e53:	55                   	push   %ebp
+c0106e54:	89 e5                	mov    %esp,%ebp
+c0106e56:	83 ec 08             	sub    $0x8,%esp
+    return pa2page(PDE_ADDR(pde));
+c0106e59:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106e5c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0106e61:	83 ec 0c             	sub    $0xc,%esp
+c0106e64:	50                   	push   %eax
+c0106e65:	e8 72 ff ff ff       	call   c0106ddc <pa2page>
+c0106e6a:	83 c4 10             	add    $0x10,%esp
+}
+c0106e6d:	c9                   	leave  
+c0106e6e:	c3                   	ret    
+
+c0106e6f <swap_init>:
+
+static void check_swap(void);
+
+int
+swap_init(void)
+{
+c0106e6f:	55                   	push   %ebp
+c0106e70:	89 e5                	mov    %esp,%ebp
+c0106e72:	83 ec 18             	sub    $0x18,%esp
+     swapfs_init();
+c0106e75:	e8 57 1a 00 00       	call   c01088d1 <swapfs_init>
+
+     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
+c0106e7a:	a1 1c 0e 1b c0       	mov    0xc01b0e1c,%eax
+c0106e7f:	3d ff 03 00 00       	cmp    $0x3ff,%eax
+c0106e84:	76 0c                	jbe    c0106e92 <swap_init+0x23>
+c0106e86:	a1 1c 0e 1b c0       	mov    0xc01b0e1c,%eax
+c0106e8b:	3d ff ff ff 00       	cmp    $0xffffff,%eax
+c0106e90:	76 17                	jbe    c0106ea9 <swap_init+0x3a>
+     {
+          panic("bad max_swap_offset %08x.\n", max_swap_offset);
+c0106e92:	a1 1c 0e 1b c0       	mov    0xc01b0e1c,%eax
+c0106e97:	50                   	push   %eax
+c0106e98:	68 bd d0 10 c0       	push   $0xc010d0bd
+c0106e9d:	6a 27                	push   $0x27
+c0106e9f:	68 d8 d0 10 c0       	push   $0xc010d0d8
+c0106ea4:	e8 4b 95 ff ff       	call   c01003f4 <__panic>
+     }
+     
+
+     sm = &swap_manager_fifo;
+c0106ea9:	c7 05 fc ec 1a c0 40 	movl   $0xc012ca40,0xc01aecfc
+c0106eb0:	ca 12 c0 
+     int r = sm->init();
+c0106eb3:	a1 fc ec 1a c0       	mov    0xc01aecfc,%eax
+c0106eb8:	8b 40 04             	mov    0x4(%eax),%eax
+c0106ebb:	ff d0                	call   *%eax
+c0106ebd:	89 45 f4             	mov    %eax,-0xc(%ebp)
+     
+     if (r == 0)
+c0106ec0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0106ec4:	75 27                	jne    c0106eed <swap_init+0x7e>
+     {
+          swap_init_ok = 1;
+c0106ec6:	c7 05 f4 ec 1a c0 01 	movl   $0x1,0xc01aecf4
+c0106ecd:	00 00 00 
+          cprintf("SWAP: manager = %s\n", sm->name);
+c0106ed0:	a1 fc ec 1a c0       	mov    0xc01aecfc,%eax
+c0106ed5:	8b 00                	mov    (%eax),%eax
+c0106ed7:	83 ec 08             	sub    $0x8,%esp
+c0106eda:	50                   	push   %eax
+c0106edb:	68 e7 d0 10 c0       	push   $0xc010d0e7
+c0106ee0:	e8 a9 93 ff ff       	call   c010028e <cprintf>
+c0106ee5:	83 c4 10             	add    $0x10,%esp
+          check_swap();
+c0106ee8:	e8 f7 03 00 00       	call   c01072e4 <check_swap>
+     }
+
+     return r;
+c0106eed:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0106ef0:	c9                   	leave  
+c0106ef1:	c3                   	ret    
+
+c0106ef2 <swap_init_mm>:
+
+int
+swap_init_mm(struct mm_struct *mm)
+{
+c0106ef2:	55                   	push   %ebp
+c0106ef3:	89 e5                	mov    %esp,%ebp
+c0106ef5:	83 ec 08             	sub    $0x8,%esp
+     return sm->init_mm(mm);
+c0106ef8:	a1 fc ec 1a c0       	mov    0xc01aecfc,%eax
+c0106efd:	8b 40 08             	mov    0x8(%eax),%eax
+c0106f00:	83 ec 0c             	sub    $0xc,%esp
+c0106f03:	ff 75 08             	pushl  0x8(%ebp)
+c0106f06:	ff d0                	call   *%eax
+c0106f08:	83 c4 10             	add    $0x10,%esp
+}
+c0106f0b:	c9                   	leave  
+c0106f0c:	c3                   	ret    
+
+c0106f0d <swap_tick_event>:
+
+int
+swap_tick_event(struct mm_struct *mm)
+{
+c0106f0d:	55                   	push   %ebp
+c0106f0e:	89 e5                	mov    %esp,%ebp
+c0106f10:	83 ec 08             	sub    $0x8,%esp
+     return sm->tick_event(mm);
+c0106f13:	a1 fc ec 1a c0       	mov    0xc01aecfc,%eax
+c0106f18:	8b 40 0c             	mov    0xc(%eax),%eax
+c0106f1b:	83 ec 0c             	sub    $0xc,%esp
+c0106f1e:	ff 75 08             	pushl  0x8(%ebp)
+c0106f21:	ff d0                	call   *%eax
+c0106f23:	83 c4 10             	add    $0x10,%esp
+}
+c0106f26:	c9                   	leave  
+c0106f27:	c3                   	ret    
+
+c0106f28 <swap_map_swappable>:
+
+int
+swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
+{
+c0106f28:	55                   	push   %ebp
+c0106f29:	89 e5                	mov    %esp,%ebp
+c0106f2b:	83 ec 08             	sub    $0x8,%esp
+     return sm->map_swappable(mm, addr, page, swap_in);
+c0106f2e:	a1 fc ec 1a c0       	mov    0xc01aecfc,%eax
+c0106f33:	8b 40 10             	mov    0x10(%eax),%eax
+c0106f36:	ff 75 14             	pushl  0x14(%ebp)
+c0106f39:	ff 75 10             	pushl  0x10(%ebp)
+c0106f3c:	ff 75 0c             	pushl  0xc(%ebp)
+c0106f3f:	ff 75 08             	pushl  0x8(%ebp)
+c0106f42:	ff d0                	call   *%eax
+c0106f44:	83 c4 10             	add    $0x10,%esp
+}
+c0106f47:	c9                   	leave  
+c0106f48:	c3                   	ret    
+
+c0106f49 <swap_set_unswappable>:
+
+int
+swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
+{
+c0106f49:	55                   	push   %ebp
+c0106f4a:	89 e5                	mov    %esp,%ebp
+c0106f4c:	83 ec 08             	sub    $0x8,%esp
+     return sm->set_unswappable(mm, addr);
+c0106f4f:	a1 fc ec 1a c0       	mov    0xc01aecfc,%eax
+c0106f54:	8b 40 14             	mov    0x14(%eax),%eax
+c0106f57:	83 ec 08             	sub    $0x8,%esp
+c0106f5a:	ff 75 0c             	pushl  0xc(%ebp)
+c0106f5d:	ff 75 08             	pushl  0x8(%ebp)
+c0106f60:	ff d0                	call   *%eax
+c0106f62:	83 c4 10             	add    $0x10,%esp
+}
+c0106f65:	c9                   	leave  
+c0106f66:	c3                   	ret    
+
+c0106f67 <swap_out>:
+
+volatile unsigned int swap_out_num=0;
+
+int
+swap_out(struct mm_struct *mm, int n, int in_tick)
+{
+c0106f67:	55                   	push   %ebp
+c0106f68:	89 e5                	mov    %esp,%ebp
+c0106f6a:	83 ec 28             	sub    $0x28,%esp
+     int i;
+     for (i = 0; i != n; ++ i)
+c0106f6d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0106f74:	e9 2e 01 00 00       	jmp    c01070a7 <swap_out+0x140>
+     {
+          uintptr_t v;
+          //struct Page **ptr_page=NULL;
+          struct Page *page;
+          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
+          int r = sm->swap_out_victim(mm, &page, in_tick);
+c0106f79:	a1 fc ec 1a c0       	mov    0xc01aecfc,%eax
+c0106f7e:	8b 40 18             	mov    0x18(%eax),%eax
+c0106f81:	83 ec 04             	sub    $0x4,%esp
+c0106f84:	ff 75 10             	pushl  0x10(%ebp)
+c0106f87:	8d 55 e4             	lea    -0x1c(%ebp),%edx
+c0106f8a:	52                   	push   %edx
+c0106f8b:	ff 75 08             	pushl  0x8(%ebp)
+c0106f8e:	ff d0                	call   *%eax
+c0106f90:	83 c4 10             	add    $0x10,%esp
+c0106f93:	89 45 f0             	mov    %eax,-0x10(%ebp)
+          if (r != 0) {
+c0106f96:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0106f9a:	74 18                	je     c0106fb4 <swap_out+0x4d>
+                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
+c0106f9c:	83 ec 08             	sub    $0x8,%esp
+c0106f9f:	ff 75 f4             	pushl  -0xc(%ebp)
+c0106fa2:	68 fc d0 10 c0       	push   $0xc010d0fc
+c0106fa7:	e8 e2 92 ff ff       	call   c010028e <cprintf>
+c0106fac:	83 c4 10             	add    $0x10,%esp
+c0106faf:	e9 ff 00 00 00       	jmp    c01070b3 <swap_out+0x14c>
+          }          
+          //assert(!PageReserved(page));
+
+          //cprintf("SWAP: choose victim page 0x%08x\n", page);
+          
+          v=page->pra_vaddr; 
+c0106fb4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0106fb7:	8b 40 1c             	mov    0x1c(%eax),%eax
+c0106fba:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          pte_t *ptep = get_pte(mm->pgdir, v, 0);
+c0106fbd:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106fc0:	8b 40 0c             	mov    0xc(%eax),%eax
+c0106fc3:	83 ec 04             	sub    $0x4,%esp
+c0106fc6:	6a 00                	push   $0x0
+c0106fc8:	ff 75 ec             	pushl  -0x14(%ebp)
+c0106fcb:	50                   	push   %eax
+c0106fcc:	e8 86 cf ff ff       	call   c0103f57 <get_pte>
+c0106fd1:	83 c4 10             	add    $0x10,%esp
+c0106fd4:	89 45 e8             	mov    %eax,-0x18(%ebp)
+          assert((*ptep & PTE_P) != 0);
+c0106fd7:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0106fda:	8b 00                	mov    (%eax),%eax
+c0106fdc:	83 e0 01             	and    $0x1,%eax
+c0106fdf:	85 c0                	test   %eax,%eax
+c0106fe1:	75 16                	jne    c0106ff9 <swap_out+0x92>
+c0106fe3:	68 29 d1 10 c0       	push   $0xc010d129
+c0106fe8:	68 3e d1 10 c0       	push   $0xc010d13e
+c0106fed:	6a 67                	push   $0x67
+c0106fef:	68 d8 d0 10 c0       	push   $0xc010d0d8
+c0106ff4:	e8 fb 93 ff ff       	call   c01003f4 <__panic>
+
+          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
+c0106ff9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0106ffc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0106fff:	8b 52 1c             	mov    0x1c(%edx),%edx
+c0107002:	c1 ea 0c             	shr    $0xc,%edx
+c0107005:	83 c2 01             	add    $0x1,%edx
+c0107008:	c1 e2 08             	shl    $0x8,%edx
+c010700b:	83 ec 08             	sub    $0x8,%esp
+c010700e:	50                   	push   %eax
+c010700f:	52                   	push   %edx
+c0107010:	e8 58 19 00 00       	call   c010896d <swapfs_write>
+c0107015:	83 c4 10             	add    $0x10,%esp
+c0107018:	85 c0                	test   %eax,%eax
+c010701a:	74 2b                	je     c0107047 <swap_out+0xe0>
+                    cprintf("SWAP: failed to save\n");
+c010701c:	83 ec 0c             	sub    $0xc,%esp
+c010701f:	68 53 d1 10 c0       	push   $0xc010d153
+c0107024:	e8 65 92 ff ff       	call   c010028e <cprintf>
+c0107029:	83 c4 10             	add    $0x10,%esp
+                    sm->map_swappable(mm, v, page, 0);
+c010702c:	a1 fc ec 1a c0       	mov    0xc01aecfc,%eax
+c0107031:	8b 40 10             	mov    0x10(%eax),%eax
+c0107034:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0107037:	6a 00                	push   $0x0
+c0107039:	52                   	push   %edx
+c010703a:	ff 75 ec             	pushl  -0x14(%ebp)
+c010703d:	ff 75 08             	pushl  0x8(%ebp)
+c0107040:	ff d0                	call   *%eax
+c0107042:	83 c4 10             	add    $0x10,%esp
+c0107045:	eb 5c                	jmp    c01070a3 <swap_out+0x13c>
+                    continue;
+          }
+          else {
+                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
+c0107047:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010704a:	8b 40 1c             	mov    0x1c(%eax),%eax
+c010704d:	c1 e8 0c             	shr    $0xc,%eax
+c0107050:	83 c0 01             	add    $0x1,%eax
+c0107053:	50                   	push   %eax
+c0107054:	ff 75 ec             	pushl  -0x14(%ebp)
+c0107057:	ff 75 f4             	pushl  -0xc(%ebp)
+c010705a:	68 6c d1 10 c0       	push   $0xc010d16c
+c010705f:	e8 2a 92 ff ff       	call   c010028e <cprintf>
+c0107064:	83 c4 10             	add    $0x10,%esp
+                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
+c0107067:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010706a:	8b 40 1c             	mov    0x1c(%eax),%eax
+c010706d:	c1 e8 0c             	shr    $0xc,%eax
+c0107070:	83 c0 01             	add    $0x1,%eax
+c0107073:	c1 e0 08             	shl    $0x8,%eax
+c0107076:	89 c2                	mov    %eax,%edx
+c0107078:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010707b:	89 10                	mov    %edx,(%eax)
+                    free_page(page);
+c010707d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0107080:	83 ec 08             	sub    $0x8,%esp
+c0107083:	6a 01                	push   $0x1
+c0107085:	50                   	push   %eax
+c0107086:	e8 4d c8 ff ff       	call   c01038d8 <free_pages>
+c010708b:	83 c4 10             	add    $0x10,%esp
+          }
+          
+          tlb_invalidate(mm->pgdir, v);
+c010708e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107091:	8b 40 0c             	mov    0xc(%eax),%eax
+c0107094:	83 ec 08             	sub    $0x8,%esp
+c0107097:	ff 75 ec             	pushl  -0x14(%ebp)
+c010709a:	50                   	push   %eax
+c010709b:	e8 32 d5 ff ff       	call   c01045d2 <tlb_invalidate>
+c01070a0:	83 c4 10             	add    $0x10,%esp
+
+int
+swap_out(struct mm_struct *mm, int n, int in_tick)
+{
+     int i;
+     for (i = 0; i != n; ++ i)
+c01070a3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c01070a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01070aa:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c01070ad:	0f 85 c6 fe ff ff    	jne    c0106f79 <swap_out+0x12>
+                    free_page(page);
+          }
+          
+          tlb_invalidate(mm->pgdir, v);
+     }
+     return i;
+c01070b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c01070b6:	c9                   	leave  
+c01070b7:	c3                   	ret    
+
+c01070b8 <swap_in>:
+
+int
+swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
+{
+c01070b8:	55                   	push   %ebp
+c01070b9:	89 e5                	mov    %esp,%ebp
+c01070bb:	83 ec 18             	sub    $0x18,%esp
+     struct Page *result = alloc_page();
+c01070be:	83 ec 0c             	sub    $0xc,%esp
+c01070c1:	6a 01                	push   $0x1
+c01070c3:	e8 a4 c7 ff ff       	call   c010386c <alloc_pages>
+c01070c8:	83 c4 10             	add    $0x10,%esp
+c01070cb:	89 45 f4             	mov    %eax,-0xc(%ebp)
+     assert(result!=NULL);
+c01070ce:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01070d2:	75 16                	jne    c01070ea <swap_in+0x32>
+c01070d4:	68 ac d1 10 c0       	push   $0xc010d1ac
+c01070d9:	68 3e d1 10 c0       	push   $0xc010d13e
+c01070de:	6a 7d                	push   $0x7d
+c01070e0:	68 d8 d0 10 c0       	push   $0xc010d0d8
+c01070e5:	e8 0a 93 ff ff       	call   c01003f4 <__panic>
+
+     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
+c01070ea:	8b 45 08             	mov    0x8(%ebp),%eax
+c01070ed:	8b 40 0c             	mov    0xc(%eax),%eax
+c01070f0:	83 ec 04             	sub    $0x4,%esp
+c01070f3:	6a 00                	push   $0x0
+c01070f5:	ff 75 0c             	pushl  0xc(%ebp)
+c01070f8:	50                   	push   %eax
+c01070f9:	e8 59 ce ff ff       	call   c0103f57 <get_pte>
+c01070fe:	83 c4 10             	add    $0x10,%esp
+c0107101:	89 45 f0             	mov    %eax,-0x10(%ebp)
+     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
+    
+     int r;
+     if ((r = swapfs_read((*ptep), result)) != 0)
+c0107104:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107107:	8b 00                	mov    (%eax),%eax
+c0107109:	83 ec 08             	sub    $0x8,%esp
+c010710c:	ff 75 f4             	pushl  -0xc(%ebp)
+c010710f:	50                   	push   %eax
+c0107110:	e8 ff 17 00 00       	call   c0108914 <swapfs_read>
+c0107115:	83 c4 10             	add    $0x10,%esp
+c0107118:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010711b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c010711f:	74 1f                	je     c0107140 <swap_in+0x88>
+     {
+        assert(r!=0);
+c0107121:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c0107125:	75 19                	jne    c0107140 <swap_in+0x88>
+c0107127:	68 b9 d1 10 c0       	push   $0xc010d1b9
+c010712c:	68 3e d1 10 c0       	push   $0xc010d13e
+c0107131:	68 85 00 00 00       	push   $0x85
+c0107136:	68 d8 d0 10 c0       	push   $0xc010d0d8
+c010713b:	e8 b4 92 ff ff       	call   c01003f4 <__panic>
+     }
+     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
+c0107140:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107143:	8b 00                	mov    (%eax),%eax
+c0107145:	c1 e8 08             	shr    $0x8,%eax
+c0107148:	83 ec 04             	sub    $0x4,%esp
+c010714b:	ff 75 0c             	pushl  0xc(%ebp)
+c010714e:	50                   	push   %eax
+c010714f:	68 c0 d1 10 c0       	push   $0xc010d1c0
+c0107154:	e8 35 91 ff ff       	call   c010028e <cprintf>
+c0107159:	83 c4 10             	add    $0x10,%esp
+     *ptr_result=result;
+c010715c:	8b 45 10             	mov    0x10(%ebp),%eax
+c010715f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0107162:	89 10                	mov    %edx,(%eax)
+     return 0;
+c0107164:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0107169:	c9                   	leave  
+c010716a:	c3                   	ret    
+
+c010716b <check_content_set>:
+
+
+
+static inline void
+check_content_set(void)
+{
+c010716b:	55                   	push   %ebp
+c010716c:	89 e5                	mov    %esp,%ebp
+c010716e:	83 ec 08             	sub    $0x8,%esp
+     *(unsigned char *)0x1000 = 0x0a;
+c0107171:	b8 00 10 00 00       	mov    $0x1000,%eax
+c0107176:	c6 00 0a             	movb   $0xa,(%eax)
+     assert(pgfault_num==1);
+c0107179:	a1 ec ec 1a c0       	mov    0xc01aecec,%eax
+c010717e:	83 f8 01             	cmp    $0x1,%eax
+c0107181:	74 19                	je     c010719c <check_content_set+0x31>
+c0107183:	68 fe d1 10 c0       	push   $0xc010d1fe
+c0107188:	68 3e d1 10 c0       	push   $0xc010d13e
+c010718d:	68 92 00 00 00       	push   $0x92
+c0107192:	68 d8 d0 10 c0       	push   $0xc010d0d8
+c0107197:	e8 58 92 ff ff       	call   c01003f4 <__panic>
+     *(unsigned char *)0x1010 = 0x0a;
+c010719c:	b8 10 10 00 00       	mov    $0x1010,%eax
+c01071a1:	c6 00 0a             	movb   $0xa,(%eax)
+     assert(pgfault_num==1);
+c01071a4:	a1 ec ec 1a c0       	mov    0xc01aecec,%eax
+c01071a9:	83 f8 01             	cmp    $0x1,%eax
+c01071ac:	74 19                	je     c01071c7 <check_content_set+0x5c>
+c01071ae:	68 fe d1 10 c0       	push   $0xc010d1fe
+c01071b3:	68 3e d1 10 c0       	push   $0xc010d13e
+c01071b8:	68 94 00 00 00       	push   $0x94
+c01071bd:	68 d8 d0 10 c0       	push   $0xc010d0d8
+c01071c2:	e8 2d 92 ff ff       	call   c01003f4 <__panic>
+     *(unsigned char *)0x2000 = 0x0b;
+c01071c7:	b8 00 20 00 00       	mov    $0x2000,%eax
+c01071cc:	c6 00 0b             	movb   $0xb,(%eax)
+     assert(pgfault_num==2);
+c01071cf:	a1 ec ec 1a c0       	mov    0xc01aecec,%eax
+c01071d4:	83 f8 02             	cmp    $0x2,%eax
+c01071d7:	74 19                	je     c01071f2 <check_content_set+0x87>
+c01071d9:	68 0d d2 10 c0       	push   $0xc010d20d
+c01071de:	68 3e d1 10 c0       	push   $0xc010d13e
+c01071e3:	68 96 00 00 00       	push   $0x96
+c01071e8:	68 d8 d0 10 c0       	push   $0xc010d0d8
+c01071ed:	e8 02 92 ff ff       	call   c01003f4 <__panic>
+     *(unsigned char *)0x2010 = 0x0b;
+c01071f2:	b8 10 20 00 00       	mov    $0x2010,%eax
+c01071f7:	c6 00 0b             	movb   $0xb,(%eax)
+     assert(pgfault_num==2);
+c01071fa:	a1 ec ec 1a c0       	mov    0xc01aecec,%eax
+c01071ff:	83 f8 02             	cmp    $0x2,%eax
+c0107202:	74 19                	je     c010721d <check_content_set+0xb2>
+c0107204:	68 0d d2 10 c0       	push   $0xc010d20d
+c0107209:	68 3e d1 10 c0       	push   $0xc010d13e
+c010720e:	68 98 00 00 00       	push   $0x98
+c0107213:	68 d8 d0 10 c0       	push   $0xc010d0d8
+c0107218:	e8 d7 91 ff ff       	call   c01003f4 <__panic>
+     *(unsigned char *)0x3000 = 0x0c;
+c010721d:	b8 00 30 00 00       	mov    $0x3000,%eax
+c0107222:	c6 00 0c             	movb   $0xc,(%eax)
+     assert(pgfault_num==3);
+c0107225:	a1 ec ec 1a c0       	mov    0xc01aecec,%eax
+c010722a:	83 f8 03             	cmp    $0x3,%eax
+c010722d:	74 19                	je     c0107248 <check_content_set+0xdd>
+c010722f:	68 1c d2 10 c0       	push   $0xc010d21c
+c0107234:	68 3e d1 10 c0       	push   $0xc010d13e
+c0107239:	68 9a 00 00 00       	push   $0x9a
+c010723e:	68 d8 d0 10 c0       	push   $0xc010d0d8
+c0107243:	e8 ac 91 ff ff       	call   c01003f4 <__panic>
+     *(unsigned char *)0x3010 = 0x0c;
+c0107248:	b8 10 30 00 00       	mov    $0x3010,%eax
+c010724d:	c6 00 0c             	movb   $0xc,(%eax)
+     assert(pgfault_num==3);
+c0107250:	a1 ec ec 1a c0       	mov    0xc01aecec,%eax
+c0107255:	83 f8 03             	cmp    $0x3,%eax
+c0107258:	74 19                	je     c0107273 <check_content_set+0x108>
+c010725a:	68 1c d2 10 c0       	push   $0xc010d21c
+c010725f:	68 3e d1 10 c0       	push   $0xc010d13e
+c0107264:	68 9c 00 00 00       	push   $0x9c
+c0107269:	68 d8 d0 10 c0       	push   $0xc010d0d8
+c010726e:	e8 81 91 ff ff       	call   c01003f4 <__panic>
+     *(unsigned char *)0x4000 = 0x0d;
+c0107273:	b8 00 40 00 00       	mov    $0x4000,%eax
+c0107278:	c6 00 0d             	movb   $0xd,(%eax)
+     assert(pgfault_num==4);
+c010727b:	a1 ec ec 1a c0       	mov    0xc01aecec,%eax
+c0107280:	83 f8 04             	cmp    $0x4,%eax
+c0107283:	74 19                	je     c010729e <check_content_set+0x133>
+c0107285:	68 2b d2 10 c0       	push   $0xc010d22b
+c010728a:	68 3e d1 10 c0       	push   $0xc010d13e
+c010728f:	68 9e 00 00 00       	push   $0x9e
+c0107294:	68 d8 d0 10 c0       	push   $0xc010d0d8
+c0107299:	e8 56 91 ff ff       	call   c01003f4 <__panic>
+     *(unsigned char *)0x4010 = 0x0d;
+c010729e:	b8 10 40 00 00       	mov    $0x4010,%eax
+c01072a3:	c6 00 0d             	movb   $0xd,(%eax)
+     assert(pgfault_num==4);
+c01072a6:	a1 ec ec 1a c0       	mov    0xc01aecec,%eax
+c01072ab:	83 f8 04             	cmp    $0x4,%eax
+c01072ae:	74 19                	je     c01072c9 <check_content_set+0x15e>
+c01072b0:	68 2b d2 10 c0       	push   $0xc010d22b
+c01072b5:	68 3e d1 10 c0       	push   $0xc010d13e
+c01072ba:	68 a0 00 00 00       	push   $0xa0
+c01072bf:	68 d8 d0 10 c0       	push   $0xc010d0d8
+c01072c4:	e8 2b 91 ff ff       	call   c01003f4 <__panic>
+}
+c01072c9:	90                   	nop
+c01072ca:	c9                   	leave  
+c01072cb:	c3                   	ret    
+
+c01072cc <check_content_access>:
+
+static inline int
+check_content_access(void)
+{
+c01072cc:	55                   	push   %ebp
+c01072cd:	89 e5                	mov    %esp,%ebp
+c01072cf:	83 ec 18             	sub    $0x18,%esp
+    int ret = sm->check_swap();
+c01072d2:	a1 fc ec 1a c0       	mov    0xc01aecfc,%eax
+c01072d7:	8b 40 1c             	mov    0x1c(%eax),%eax
+c01072da:	ff d0                	call   *%eax
+c01072dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return ret;
+c01072df:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c01072e2:	c9                   	leave  
+c01072e3:	c3                   	ret    
+
+c01072e4 <check_swap>:
+#define free_list (free_area.free_list)
+#define nr_free (free_area.nr_free)
+
+static void
+check_swap(void)
+{
+c01072e4:	55                   	push   %ebp
+c01072e5:	89 e5                	mov    %esp,%ebp
+c01072e7:	83 ec 68             	sub    $0x68,%esp
+    //backup mem env
+     int ret, count = 0, total = 0, i;
+c01072ea:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c01072f1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+     list_entry_t *le = &free_list;
+c01072f8:	c7 45 e8 44 0e 1b c0 	movl   $0xc01b0e44,-0x18(%ebp)
+     while ((le = list_next(le)) != &free_list) {
+c01072ff:	eb 60                	jmp    c0107361 <check_swap+0x7d>
+        struct Page *p = le2page(le, page_link);
+c0107301:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0107304:	83 e8 0c             	sub    $0xc,%eax
+c0107307:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        assert(PageProperty(p));
+c010730a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010730d:	83 c0 04             	add    $0x4,%eax
+c0107310:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
+c0107317:	89 45 ac             	mov    %eax,-0x54(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c010731a:	8b 45 ac             	mov    -0x54(%ebp),%eax
+c010731d:	8b 55 b0             	mov    -0x50(%ebp),%edx
+c0107320:	0f a3 10             	bt     %edx,(%eax)
+c0107323:	19 c0                	sbb    %eax,%eax
+c0107325:	89 45 a8             	mov    %eax,-0x58(%ebp)
+    return oldbit != 0;
+c0107328:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
+c010732c:	0f 95 c0             	setne  %al
+c010732f:	0f b6 c0             	movzbl %al,%eax
+c0107332:	85 c0                	test   %eax,%eax
+c0107334:	75 19                	jne    c010734f <check_swap+0x6b>
+c0107336:	68 3a d2 10 c0       	push   $0xc010d23a
+c010733b:	68 3e d1 10 c0       	push   $0xc010d13e
+c0107340:	68 bb 00 00 00       	push   $0xbb
+c0107345:	68 d8 d0 10 c0       	push   $0xc010d0d8
+c010734a:	e8 a5 90 ff ff       	call   c01003f4 <__panic>
+        count ++, total += p->property;
+c010734f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0107353:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0107356:	8b 50 08             	mov    0x8(%eax),%edx
+c0107359:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010735c:	01 d0                	add    %edx,%eax
+c010735e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0107361:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0107364:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c0107367:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010736a:	8b 40 04             	mov    0x4(%eax),%eax
+check_swap(void)
+{
+    //backup mem env
+     int ret, count = 0, total = 0, i;
+     list_entry_t *le = &free_list;
+     while ((le = list_next(le)) != &free_list) {
+c010736d:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0107370:	81 7d e8 44 0e 1b c0 	cmpl   $0xc01b0e44,-0x18(%ebp)
+c0107377:	75 88                	jne    c0107301 <check_swap+0x1d>
+        struct Page *p = le2page(le, page_link);
+        assert(PageProperty(p));
+        count ++, total += p->property;
+     }
+     assert(total == nr_free_pages());
+c0107379:	e8 8f c5 ff ff       	call   c010390d <nr_free_pages>
+c010737e:	89 c2                	mov    %eax,%edx
+c0107380:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107383:	39 c2                	cmp    %eax,%edx
+c0107385:	74 19                	je     c01073a0 <check_swap+0xbc>
+c0107387:	68 4a d2 10 c0       	push   $0xc010d24a
+c010738c:	68 3e d1 10 c0       	push   $0xc010d13e
+c0107391:	68 be 00 00 00       	push   $0xbe
+c0107396:	68 d8 d0 10 c0       	push   $0xc010d0d8
+c010739b:	e8 54 90 ff ff       	call   c01003f4 <__panic>
+     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
+c01073a0:	83 ec 04             	sub    $0x4,%esp
+c01073a3:	ff 75 f0             	pushl  -0x10(%ebp)
+c01073a6:	ff 75 f4             	pushl  -0xc(%ebp)
+c01073a9:	68 64 d2 10 c0       	push   $0xc010d264
+c01073ae:	e8 db 8e ff ff       	call   c010028e <cprintf>
+c01073b3:	83 c4 10             	add    $0x10,%esp
+     
+     //now we set the phy pages env     
+     struct mm_struct *mm = mm_create();
+c01073b6:	e8 a6 e2 ff ff       	call   c0105661 <mm_create>
+c01073bb:	89 45 d8             	mov    %eax,-0x28(%ebp)
+     assert(mm != NULL);
+c01073be:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
+c01073c2:	75 19                	jne    c01073dd <check_swap+0xf9>
+c01073c4:	68 8a d2 10 c0       	push   $0xc010d28a
+c01073c9:	68 3e d1 10 c0       	push   $0xc010d13e
+c01073ce:	68 c3 00 00 00       	push   $0xc3
+c01073d3:	68 d8 d0 10 c0       	push   $0xc010d0d8
+c01073d8:	e8 17 90 ff ff       	call   c01003f4 <__panic>
+
+     extern struct mm_struct *check_mm_struct;
+     assert(check_mm_struct == NULL);
+c01073dd:	a1 70 0d 1b c0       	mov    0xc01b0d70,%eax
+c01073e2:	85 c0                	test   %eax,%eax
+c01073e4:	74 19                	je     c01073ff <check_swap+0x11b>
+c01073e6:	68 95 d2 10 c0       	push   $0xc010d295
+c01073eb:	68 3e d1 10 c0       	push   $0xc010d13e
+c01073f0:	68 c6 00 00 00       	push   $0xc6
+c01073f5:	68 d8 d0 10 c0       	push   $0xc010d0d8
+c01073fa:	e8 f5 8f ff ff       	call   c01003f4 <__panic>
+
+     check_mm_struct = mm;
+c01073ff:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0107402:	a3 70 0d 1b c0       	mov    %eax,0xc01b0d70
+
+     pde_t *pgdir = mm->pgdir = boot_pgdir;
+c0107407:	8b 15 64 ec 1a c0    	mov    0xc01aec64,%edx
+c010740d:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0107410:	89 50 0c             	mov    %edx,0xc(%eax)
+c0107413:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0107416:	8b 40 0c             	mov    0xc(%eax),%eax
+c0107419:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+     assert(pgdir[0] == 0);
+c010741c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010741f:	8b 00                	mov    (%eax),%eax
+c0107421:	85 c0                	test   %eax,%eax
+c0107423:	74 19                	je     c010743e <check_swap+0x15a>
+c0107425:	68 ad d2 10 c0       	push   $0xc010d2ad
+c010742a:	68 3e d1 10 c0       	push   $0xc010d13e
+c010742f:	68 cb 00 00 00       	push   $0xcb
+c0107434:	68 d8 d0 10 c0       	push   $0xc010d0d8
+c0107439:	e8 b6 8f ff ff       	call   c01003f4 <__panic>
+
+     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
+c010743e:	83 ec 04             	sub    $0x4,%esp
+c0107441:	6a 03                	push   $0x3
+c0107443:	68 00 60 00 00       	push   $0x6000
+c0107448:	68 00 10 00 00       	push   $0x1000
+c010744d:	e8 ad e2 ff ff       	call   c01056ff <vma_create>
+c0107452:	83 c4 10             	add    $0x10,%esp
+c0107455:	89 45 d0             	mov    %eax,-0x30(%ebp)
+     assert(vma != NULL);
+c0107458:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
+c010745c:	75 19                	jne    c0107477 <check_swap+0x193>
+c010745e:	68 bb d2 10 c0       	push   $0xc010d2bb
+c0107463:	68 3e d1 10 c0       	push   $0xc010d13e
+c0107468:	68 ce 00 00 00       	push   $0xce
+c010746d:	68 d8 d0 10 c0       	push   $0xc010d0d8
+c0107472:	e8 7d 8f ff ff       	call   c01003f4 <__panic>
+
+     insert_vma_struct(mm, vma);
+c0107477:	83 ec 08             	sub    $0x8,%esp
+c010747a:	ff 75 d0             	pushl  -0x30(%ebp)
+c010747d:	ff 75 d8             	pushl  -0x28(%ebp)
+c0107480:	e8 e2 e3 ff ff       	call   c0105867 <insert_vma_struct>
+c0107485:	83 c4 10             	add    $0x10,%esp
+
+     //setup the temp Page Table vaddr 0~4MB
+     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
+c0107488:	83 ec 0c             	sub    $0xc,%esp
+c010748b:	68 c8 d2 10 c0       	push   $0xc010d2c8
+c0107490:	e8 f9 8d ff ff       	call   c010028e <cprintf>
+c0107495:	83 c4 10             	add    $0x10,%esp
+     pte_t *temp_ptep=NULL;
+c0107498:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
+     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
+c010749f:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c01074a2:	8b 40 0c             	mov    0xc(%eax),%eax
+c01074a5:	83 ec 04             	sub    $0x4,%esp
+c01074a8:	6a 01                	push   $0x1
+c01074aa:	68 00 10 00 00       	push   $0x1000
+c01074af:	50                   	push   %eax
+c01074b0:	e8 a2 ca ff ff       	call   c0103f57 <get_pte>
+c01074b5:	83 c4 10             	add    $0x10,%esp
+c01074b8:	89 45 cc             	mov    %eax,-0x34(%ebp)
+     assert(temp_ptep!= NULL);
+c01074bb:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
+c01074bf:	75 19                	jne    c01074da <check_swap+0x1f6>
+c01074c1:	68 fc d2 10 c0       	push   $0xc010d2fc
+c01074c6:	68 3e d1 10 c0       	push   $0xc010d13e
+c01074cb:	68 d6 00 00 00       	push   $0xd6
+c01074d0:	68 d8 d0 10 c0       	push   $0xc010d0d8
+c01074d5:	e8 1a 8f ff ff       	call   c01003f4 <__panic>
+     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
+c01074da:	83 ec 0c             	sub    $0xc,%esp
+c01074dd:	68 10 d3 10 c0       	push   $0xc010d310
+c01074e2:	e8 a7 8d ff ff       	call   c010028e <cprintf>
+c01074e7:	83 c4 10             	add    $0x10,%esp
+     
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c01074ea:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c01074f1:	e9 90 00 00 00       	jmp    c0107586 <check_swap+0x2a2>
+          check_rp[i] = alloc_page();
+c01074f6:	83 ec 0c             	sub    $0xc,%esp
+c01074f9:	6a 01                	push   $0x1
+c01074fb:	e8 6c c3 ff ff       	call   c010386c <alloc_pages>
+c0107500:	83 c4 10             	add    $0x10,%esp
+c0107503:	89 c2                	mov    %eax,%edx
+c0107505:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107508:	89 14 85 80 0d 1b c0 	mov    %edx,-0x3fe4f280(,%eax,4)
+          assert(check_rp[i] != NULL );
+c010750f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107512:	8b 04 85 80 0d 1b c0 	mov    -0x3fe4f280(,%eax,4),%eax
+c0107519:	85 c0                	test   %eax,%eax
+c010751b:	75 19                	jne    c0107536 <check_swap+0x252>
+c010751d:	68 34 d3 10 c0       	push   $0xc010d334
+c0107522:	68 3e d1 10 c0       	push   $0xc010d13e
+c0107527:	68 db 00 00 00       	push   $0xdb
+c010752c:	68 d8 d0 10 c0       	push   $0xc010d0d8
+c0107531:	e8 be 8e ff ff       	call   c01003f4 <__panic>
+          assert(!PageProperty(check_rp[i]));
+c0107536:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107539:	8b 04 85 80 0d 1b c0 	mov    -0x3fe4f280(,%eax,4),%eax
+c0107540:	83 c0 04             	add    $0x4,%eax
+c0107543:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
+c010754a:	89 45 a4             	mov    %eax,-0x5c(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c010754d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
+c0107550:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0107553:	0f a3 10             	bt     %edx,(%eax)
+c0107556:	19 c0                	sbb    %eax,%eax
+c0107558:	89 45 a0             	mov    %eax,-0x60(%ebp)
+    return oldbit != 0;
+c010755b:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
+c010755f:	0f 95 c0             	setne  %al
+c0107562:	0f b6 c0             	movzbl %al,%eax
+c0107565:	85 c0                	test   %eax,%eax
+c0107567:	74 19                	je     c0107582 <check_swap+0x29e>
+c0107569:	68 48 d3 10 c0       	push   $0xc010d348
+c010756e:	68 3e d1 10 c0       	push   $0xc010d13e
+c0107573:	68 dc 00 00 00       	push   $0xdc
+c0107578:	68 d8 d0 10 c0       	push   $0xc010d0d8
+c010757d:	e8 72 8e ff ff       	call   c01003f4 <__panic>
+     pte_t *temp_ptep=NULL;
+     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
+     assert(temp_ptep!= NULL);
+     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
+     
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c0107582:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+c0107586:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
+c010758a:	0f 8e 66 ff ff ff    	jle    c01074f6 <check_swap+0x212>
+          check_rp[i] = alloc_page();
+          assert(check_rp[i] != NULL );
+          assert(!PageProperty(check_rp[i]));
+     }
+     list_entry_t free_list_store = free_list;
+c0107590:	a1 44 0e 1b c0       	mov    0xc01b0e44,%eax
+c0107595:	8b 15 48 0e 1b c0    	mov    0xc01b0e48,%edx
+c010759b:	89 45 98             	mov    %eax,-0x68(%ebp)
+c010759e:	89 55 9c             	mov    %edx,-0x64(%ebp)
+c01075a1:	c7 45 c0 44 0e 1b c0 	movl   $0xc01b0e44,-0x40(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c01075a8:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c01075ab:	8b 55 c0             	mov    -0x40(%ebp),%edx
+c01075ae:	89 50 04             	mov    %edx,0x4(%eax)
+c01075b1:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c01075b4:	8b 50 04             	mov    0x4(%eax),%edx
+c01075b7:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c01075ba:	89 10                	mov    %edx,(%eax)
+c01075bc:	c7 45 c8 44 0e 1b c0 	movl   $0xc01b0e44,-0x38(%ebp)
+ * list_empty - tests whether a list is empty
+ * @list:       the list to test.
+ * */
+static inline bool
+list_empty(list_entry_t *list) {
+    return list->next == list;
+c01075c3:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c01075c6:	8b 40 04             	mov    0x4(%eax),%eax
+c01075c9:	39 45 c8             	cmp    %eax,-0x38(%ebp)
+c01075cc:	0f 94 c0             	sete   %al
+c01075cf:	0f b6 c0             	movzbl %al,%eax
+     list_init(&free_list);
+     assert(list_empty(&free_list));
+c01075d2:	85 c0                	test   %eax,%eax
+c01075d4:	75 19                	jne    c01075ef <check_swap+0x30b>
+c01075d6:	68 63 d3 10 c0       	push   $0xc010d363
+c01075db:	68 3e d1 10 c0       	push   $0xc010d13e
+c01075e0:	68 e0 00 00 00       	push   $0xe0
+c01075e5:	68 d8 d0 10 c0       	push   $0xc010d0d8
+c01075ea:	e8 05 8e ff ff       	call   c01003f4 <__panic>
+     
+     //assert(alloc_page() == NULL);
+     
+     unsigned int nr_free_store = nr_free;
+c01075ef:	a1 4c 0e 1b c0       	mov    0xc01b0e4c,%eax
+c01075f4:	89 45 bc             	mov    %eax,-0x44(%ebp)
+     nr_free = 0;
+c01075f7:	c7 05 4c 0e 1b c0 00 	movl   $0x0,0xc01b0e4c
+c01075fe:	00 00 00 
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c0107601:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c0107608:	eb 1c                	jmp    c0107626 <check_swap+0x342>
+        free_pages(check_rp[i],1);
+c010760a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010760d:	8b 04 85 80 0d 1b c0 	mov    -0x3fe4f280(,%eax,4),%eax
+c0107614:	83 ec 08             	sub    $0x8,%esp
+c0107617:	6a 01                	push   $0x1
+c0107619:	50                   	push   %eax
+c010761a:	e8 b9 c2 ff ff       	call   c01038d8 <free_pages>
+c010761f:	83 c4 10             	add    $0x10,%esp
+     
+     //assert(alloc_page() == NULL);
+     
+     unsigned int nr_free_store = nr_free;
+     nr_free = 0;
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c0107622:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+c0107626:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
+c010762a:	7e de                	jle    c010760a <check_swap+0x326>
+        free_pages(check_rp[i],1);
+     }
+     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
+c010762c:	a1 4c 0e 1b c0       	mov    0xc01b0e4c,%eax
+c0107631:	83 f8 04             	cmp    $0x4,%eax
+c0107634:	74 19                	je     c010764f <check_swap+0x36b>
+c0107636:	68 7c d3 10 c0       	push   $0xc010d37c
+c010763b:	68 3e d1 10 c0       	push   $0xc010d13e
+c0107640:	68 e9 00 00 00       	push   $0xe9
+c0107645:	68 d8 d0 10 c0       	push   $0xc010d0d8
+c010764a:	e8 a5 8d ff ff       	call   c01003f4 <__panic>
+     
+     cprintf("set up init env for check_swap begin!\n");
+c010764f:	83 ec 0c             	sub    $0xc,%esp
+c0107652:	68 a0 d3 10 c0       	push   $0xc010d3a0
+c0107657:	e8 32 8c ff ff       	call   c010028e <cprintf>
+c010765c:	83 c4 10             	add    $0x10,%esp
+     //setup initial vir_page<->phy_page environment for page relpacement algorithm 
+
+     
+     pgfault_num=0;
+c010765f:	c7 05 ec ec 1a c0 00 	movl   $0x0,0xc01aecec
+c0107666:	00 00 00 
+     
+     check_content_set();
+c0107669:	e8 fd fa ff ff       	call   c010716b <check_content_set>
+     assert( nr_free == 0);         
+c010766e:	a1 4c 0e 1b c0       	mov    0xc01b0e4c,%eax
+c0107673:	85 c0                	test   %eax,%eax
+c0107675:	74 19                	je     c0107690 <check_swap+0x3ac>
+c0107677:	68 c7 d3 10 c0       	push   $0xc010d3c7
+c010767c:	68 3e d1 10 c0       	push   $0xc010d13e
+c0107681:	68 f2 00 00 00       	push   $0xf2
+c0107686:	68 d8 d0 10 c0       	push   $0xc010d0d8
+c010768b:	e8 64 8d ff ff       	call   c01003f4 <__panic>
+     for(i = 0; i<MAX_SEQ_NO ; i++) 
+c0107690:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c0107697:	eb 26                	jmp    c01076bf <check_swap+0x3db>
+         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
+c0107699:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010769c:	c7 04 85 a0 0d 1b c0 	movl   $0xffffffff,-0x3fe4f260(,%eax,4)
+c01076a3:	ff ff ff ff 
+c01076a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01076aa:	8b 14 85 a0 0d 1b c0 	mov    -0x3fe4f260(,%eax,4),%edx
+c01076b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01076b4:	89 14 85 e0 0d 1b c0 	mov    %edx,-0x3fe4f220(,%eax,4)
+     
+     pgfault_num=0;
+     
+     check_content_set();
+     assert( nr_free == 0);         
+     for(i = 0; i<MAX_SEQ_NO ; i++) 
+c01076bb:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+c01076bf:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
+c01076c3:	7e d4                	jle    c0107699 <check_swap+0x3b5>
+         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
+     
+     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c01076c5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c01076cc:	e9 cc 00 00 00       	jmp    c010779d <check_swap+0x4b9>
+         check_ptep[i]=0;
+c01076d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01076d4:	c7 04 85 34 0e 1b c0 	movl   $0x0,-0x3fe4f1cc(,%eax,4)
+c01076db:	00 00 00 00 
+         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
+c01076df:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01076e2:	83 c0 01             	add    $0x1,%eax
+c01076e5:	c1 e0 0c             	shl    $0xc,%eax
+c01076e8:	83 ec 04             	sub    $0x4,%esp
+c01076eb:	6a 00                	push   $0x0
+c01076ed:	50                   	push   %eax
+c01076ee:	ff 75 d4             	pushl  -0x2c(%ebp)
+c01076f1:	e8 61 c8 ff ff       	call   c0103f57 <get_pte>
+c01076f6:	83 c4 10             	add    $0x10,%esp
+c01076f9:	89 c2                	mov    %eax,%edx
+c01076fb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01076fe:	89 14 85 34 0e 1b c0 	mov    %edx,-0x3fe4f1cc(,%eax,4)
+         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
+         assert(check_ptep[i] != NULL);
+c0107705:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107708:	8b 04 85 34 0e 1b c0 	mov    -0x3fe4f1cc(,%eax,4),%eax
+c010770f:	85 c0                	test   %eax,%eax
+c0107711:	75 19                	jne    c010772c <check_swap+0x448>
+c0107713:	68 d4 d3 10 c0       	push   $0xc010d3d4
+c0107718:	68 3e d1 10 c0       	push   $0xc010d13e
+c010771d:	68 fa 00 00 00       	push   $0xfa
+c0107722:	68 d8 d0 10 c0       	push   $0xc010d0d8
+c0107727:	e8 c8 8c ff ff       	call   c01003f4 <__panic>
+         assert(pte2page(*check_ptep[i]) == check_rp[i]);
+c010772c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010772f:	8b 04 85 34 0e 1b c0 	mov    -0x3fe4f1cc(,%eax,4),%eax
+c0107736:	8b 00                	mov    (%eax),%eax
+c0107738:	83 ec 0c             	sub    $0xc,%esp
+c010773b:	50                   	push   %eax
+c010773c:	e8 d8 f6 ff ff       	call   c0106e19 <pte2page>
+c0107741:	83 c4 10             	add    $0x10,%esp
+c0107744:	89 c2                	mov    %eax,%edx
+c0107746:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107749:	8b 04 85 80 0d 1b c0 	mov    -0x3fe4f280(,%eax,4),%eax
+c0107750:	39 c2                	cmp    %eax,%edx
+c0107752:	74 19                	je     c010776d <check_swap+0x489>
+c0107754:	68 ec d3 10 c0       	push   $0xc010d3ec
+c0107759:	68 3e d1 10 c0       	push   $0xc010d13e
+c010775e:	68 fb 00 00 00       	push   $0xfb
+c0107763:	68 d8 d0 10 c0       	push   $0xc010d0d8
+c0107768:	e8 87 8c ff ff       	call   c01003f4 <__panic>
+         assert((*check_ptep[i] & PTE_P));          
+c010776d:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107770:	8b 04 85 34 0e 1b c0 	mov    -0x3fe4f1cc(,%eax,4),%eax
+c0107777:	8b 00                	mov    (%eax),%eax
+c0107779:	83 e0 01             	and    $0x1,%eax
+c010777c:	85 c0                	test   %eax,%eax
+c010777e:	75 19                	jne    c0107799 <check_swap+0x4b5>
+c0107780:	68 14 d4 10 c0       	push   $0xc010d414
+c0107785:	68 3e d1 10 c0       	push   $0xc010d13e
+c010778a:	68 fc 00 00 00       	push   $0xfc
+c010778f:	68 d8 d0 10 c0       	push   $0xc010d0d8
+c0107794:	e8 5b 8c ff ff       	call   c01003f4 <__panic>
+     check_content_set();
+     assert( nr_free == 0);         
+     for(i = 0; i<MAX_SEQ_NO ; i++) 
+         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
+     
+     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c0107799:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+c010779d:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
+c01077a1:	0f 8e 2a ff ff ff    	jle    c01076d1 <check_swap+0x3ed>
+         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
+         assert(check_ptep[i] != NULL);
+         assert(pte2page(*check_ptep[i]) == check_rp[i]);
+         assert((*check_ptep[i] & PTE_P));          
+     }
+     cprintf("set up init env for check_swap over!\n");
+c01077a7:	83 ec 0c             	sub    $0xc,%esp
+c01077aa:	68 30 d4 10 c0       	push   $0xc010d430
+c01077af:	e8 da 8a ff ff       	call   c010028e <cprintf>
+c01077b4:	83 c4 10             	add    $0x10,%esp
+     // now access the virt pages to test  page relpacement algorithm 
+     ret=check_content_access();
+c01077b7:	e8 10 fb ff ff       	call   c01072cc <check_content_access>
+c01077bc:	89 45 b8             	mov    %eax,-0x48(%ebp)
+     assert(ret==0);
+c01077bf:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
+c01077c3:	74 19                	je     c01077de <check_swap+0x4fa>
+c01077c5:	68 56 d4 10 c0       	push   $0xc010d456
+c01077ca:	68 3e d1 10 c0       	push   $0xc010d13e
+c01077cf:	68 01 01 00 00       	push   $0x101
+c01077d4:	68 d8 d0 10 c0       	push   $0xc010d0d8
+c01077d9:	e8 16 8c ff ff       	call   c01003f4 <__panic>
+     
+     //restore kernel mem env
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c01077de:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c01077e5:	eb 1c                	jmp    c0107803 <check_swap+0x51f>
+         free_pages(check_rp[i],1);
+c01077e7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01077ea:	8b 04 85 80 0d 1b c0 	mov    -0x3fe4f280(,%eax,4),%eax
+c01077f1:	83 ec 08             	sub    $0x8,%esp
+c01077f4:	6a 01                	push   $0x1
+c01077f6:	50                   	push   %eax
+c01077f7:	e8 dc c0 ff ff       	call   c01038d8 <free_pages>
+c01077fc:	83 c4 10             	add    $0x10,%esp
+     // now access the virt pages to test  page relpacement algorithm 
+     ret=check_content_access();
+     assert(ret==0);
+     
+     //restore kernel mem env
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c01077ff:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+c0107803:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
+c0107807:	7e de                	jle    c01077e7 <check_swap+0x503>
+         free_pages(check_rp[i],1);
+     } 
+
+     //free_page(pte2page(*temp_ptep));
+    free_page(pde2page(pgdir[0]));
+c0107809:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010780c:	8b 00                	mov    (%eax),%eax
+c010780e:	83 ec 0c             	sub    $0xc,%esp
+c0107811:	50                   	push   %eax
+c0107812:	e8 3c f6 ff ff       	call   c0106e53 <pde2page>
+c0107817:	83 c4 10             	add    $0x10,%esp
+c010781a:	83 ec 08             	sub    $0x8,%esp
+c010781d:	6a 01                	push   $0x1
+c010781f:	50                   	push   %eax
+c0107820:	e8 b3 c0 ff ff       	call   c01038d8 <free_pages>
+c0107825:	83 c4 10             	add    $0x10,%esp
+     pgdir[0] = 0;
+c0107828:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010782b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+     mm->pgdir = NULL;
+c0107831:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0107834:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
+     mm_destroy(mm);
+c010783b:	83 ec 0c             	sub    $0xc,%esp
+c010783e:	ff 75 d8             	pushl  -0x28(%ebp)
+c0107841:	e8 45 e1 ff ff       	call   c010598b <mm_destroy>
+c0107846:	83 c4 10             	add    $0x10,%esp
+     check_mm_struct = NULL;
+c0107849:	c7 05 70 0d 1b c0 00 	movl   $0x0,0xc01b0d70
+c0107850:	00 00 00 
+     
+     nr_free = nr_free_store;
+c0107853:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c0107856:	a3 4c 0e 1b c0       	mov    %eax,0xc01b0e4c
+     free_list = free_list_store;
+c010785b:	8b 45 98             	mov    -0x68(%ebp),%eax
+c010785e:	8b 55 9c             	mov    -0x64(%ebp),%edx
+c0107861:	a3 44 0e 1b c0       	mov    %eax,0xc01b0e44
+c0107866:	89 15 48 0e 1b c0    	mov    %edx,0xc01b0e48
+
+     
+     le = &free_list;
+c010786c:	c7 45 e8 44 0e 1b c0 	movl   $0xc01b0e44,-0x18(%ebp)
+     while ((le = list_next(le)) != &free_list) {
+c0107873:	eb 1d                	jmp    c0107892 <check_swap+0x5ae>
+         struct Page *p = le2page(le, page_link);
+c0107875:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0107878:	83 e8 0c             	sub    $0xc,%eax
+c010787b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
+         count --, total -= p->property;
+c010787e:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+c0107882:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0107885:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c0107888:	8b 40 08             	mov    0x8(%eax),%eax
+c010788b:	29 c2                	sub    %eax,%edx
+c010788d:	89 d0                	mov    %edx,%eax
+c010788f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0107892:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0107895:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c0107898:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c010789b:	8b 40 04             	mov    0x4(%eax),%eax
+     nr_free = nr_free_store;
+     free_list = free_list_store;
+
+     
+     le = &free_list;
+     while ((le = list_next(le)) != &free_list) {
+c010789e:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c01078a1:	81 7d e8 44 0e 1b c0 	cmpl   $0xc01b0e44,-0x18(%ebp)
+c01078a8:	75 cb                	jne    c0107875 <check_swap+0x591>
+         struct Page *p = le2page(le, page_link);
+         count --, total -= p->property;
+     }
+     cprintf("count is %d, total is %d\n",count,total);
+c01078aa:	83 ec 04             	sub    $0x4,%esp
+c01078ad:	ff 75 f0             	pushl  -0x10(%ebp)
+c01078b0:	ff 75 f4             	pushl  -0xc(%ebp)
+c01078b3:	68 5d d4 10 c0       	push   $0xc010d45d
+c01078b8:	e8 d1 89 ff ff       	call   c010028e <cprintf>
+c01078bd:	83 c4 10             	add    $0x10,%esp
+     //assert(count == 0);
+     
+     cprintf("check_swap() succeeded!\n");
+c01078c0:	83 ec 0c             	sub    $0xc,%esp
+c01078c3:	68 77 d4 10 c0       	push   $0xc010d477
+c01078c8:	e8 c1 89 ff ff       	call   c010028e <cprintf>
+c01078cd:	83 c4 10             	add    $0x10,%esp
+}
+c01078d0:	90                   	nop
+c01078d1:	c9                   	leave  
+c01078d2:	c3                   	ret    
+
+c01078d3 <page2ppn>:
+
+extern struct Page *pages;
+extern size_t npage;
+
+static inline ppn_t
+page2ppn(struct Page *page) {
+c01078d3:	55                   	push   %ebp
+c01078d4:	89 e5                	mov    %esp,%ebp
+    return page - pages;
+c01078d6:	8b 45 08             	mov    0x8(%ebp),%eax
+c01078d9:	8b 15 64 0d 1b c0    	mov    0xc01b0d64,%edx
+c01078df:	29 d0                	sub    %edx,%eax
+c01078e1:	c1 f8 05             	sar    $0x5,%eax
+}
+c01078e4:	5d                   	pop    %ebp
+c01078e5:	c3                   	ret    
+
+c01078e6 <page2pa>:
+
+static inline uintptr_t
+page2pa(struct Page *page) {
+c01078e6:	55                   	push   %ebp
+c01078e7:	89 e5                	mov    %esp,%ebp
+    return page2ppn(page) << PGSHIFT;
+c01078e9:	ff 75 08             	pushl  0x8(%ebp)
+c01078ec:	e8 e2 ff ff ff       	call   c01078d3 <page2ppn>
+c01078f1:	83 c4 04             	add    $0x4,%esp
+c01078f4:	c1 e0 0c             	shl    $0xc,%eax
+}
+c01078f7:	c9                   	leave  
+c01078f8:	c3                   	ret    
+
+c01078f9 <page_ref>:
+pde2page(pde_t pde) {
+    return pa2page(PDE_ADDR(pde));
+}
+
+static inline int
+page_ref(struct Page *page) {
+c01078f9:	55                   	push   %ebp
+c01078fa:	89 e5                	mov    %esp,%ebp
+    return page->ref;
+c01078fc:	8b 45 08             	mov    0x8(%ebp),%eax
+c01078ff:	8b 00                	mov    (%eax),%eax
+}
+c0107901:	5d                   	pop    %ebp
+c0107902:	c3                   	ret    
+
+c0107903 <set_page_ref>:
+
+static inline void
+set_page_ref(struct Page *page, int val) {
+c0107903:	55                   	push   %ebp
+c0107904:	89 e5                	mov    %esp,%ebp
+    page->ref = val;
+c0107906:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107909:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010790c:	89 10                	mov    %edx,(%eax)
+}
+c010790e:	90                   	nop
+c010790f:	5d                   	pop    %ebp
+c0107910:	c3                   	ret    
+
+c0107911 <default_init>:
+
+#define free_list (free_area.free_list)
+#define nr_free (free_area.nr_free)
+
+static void
+default_init(void) {
+c0107911:	55                   	push   %ebp
+c0107912:	89 e5                	mov    %esp,%ebp
+c0107914:	83 ec 10             	sub    $0x10,%esp
+c0107917:	c7 45 fc 44 0e 1b c0 	movl   $0xc01b0e44,-0x4(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c010791e:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0107921:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c0107924:	89 50 04             	mov    %edx,0x4(%eax)
+c0107927:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010792a:	8b 50 04             	mov    0x4(%eax),%edx
+c010792d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0107930:	89 10                	mov    %edx,(%eax)
+    list_init(&free_list);
+    nr_free = 0;
+c0107932:	c7 05 4c 0e 1b c0 00 	movl   $0x0,0xc01b0e4c
+c0107939:	00 00 00 
+}
+c010793c:	90                   	nop
+c010793d:	c9                   	leave  
+c010793e:	c3                   	ret    
+
+c010793f <default_init_memmap>:
+
+static void
+default_init_memmap(struct Page *base, size_t n) {
+c010793f:	55                   	push   %ebp
+c0107940:	89 e5                	mov    %esp,%ebp
+c0107942:	83 ec 38             	sub    $0x38,%esp
+    assert(n > 0);
+c0107945:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c0107949:	75 16                	jne    c0107961 <default_init_memmap+0x22>
+c010794b:	68 90 d4 10 c0       	push   $0xc010d490
+c0107950:	68 96 d4 10 c0       	push   $0xc010d496
+c0107955:	6a 46                	push   $0x46
+c0107957:	68 ab d4 10 c0       	push   $0xc010d4ab
+c010795c:	e8 93 8a ff ff       	call   c01003f4 <__panic>
+    struct Page *p = base;
+c0107961:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107964:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    for (; p != base + n; p ++) {
+c0107967:	eb 6c                	jmp    c01079d5 <default_init_memmap+0x96>
+        assert(PageReserved(p));
+c0107969:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010796c:	83 c0 04             	add    $0x4,%eax
+c010796f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+c0107976:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0107979:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010797c:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010797f:	0f a3 10             	bt     %edx,(%eax)
+c0107982:	19 c0                	sbb    %eax,%eax
+c0107984:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    return oldbit != 0;
+c0107987:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+c010798b:	0f 95 c0             	setne  %al
+c010798e:	0f b6 c0             	movzbl %al,%eax
+c0107991:	85 c0                	test   %eax,%eax
+c0107993:	75 16                	jne    c01079ab <default_init_memmap+0x6c>
+c0107995:	68 c1 d4 10 c0       	push   $0xc010d4c1
+c010799a:	68 96 d4 10 c0       	push   $0xc010d496
+c010799f:	6a 49                	push   $0x49
+c01079a1:	68 ab d4 10 c0       	push   $0xc010d4ab
+c01079a6:	e8 49 8a ff ff       	call   c01003f4 <__panic>
+        p->flags = p->property = 0;
+c01079ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01079ae:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+c01079b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01079b8:	8b 50 08             	mov    0x8(%eax),%edx
+c01079bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01079be:	89 50 04             	mov    %edx,0x4(%eax)
+        set_page_ref(p, 0);
+c01079c1:	83 ec 08             	sub    $0x8,%esp
+c01079c4:	6a 00                	push   $0x0
+c01079c6:	ff 75 f4             	pushl  -0xc(%ebp)
+c01079c9:	e8 35 ff ff ff       	call   c0107903 <set_page_ref>
+c01079ce:	83 c4 10             	add    $0x10,%esp
+
+static void
+default_init_memmap(struct Page *base, size_t n) {
+    assert(n > 0);
+    struct Page *p = base;
+    for (; p != base + n; p ++) {
+c01079d1:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
+c01079d5:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01079d8:	c1 e0 05             	shl    $0x5,%eax
+c01079db:	89 c2                	mov    %eax,%edx
+c01079dd:	8b 45 08             	mov    0x8(%ebp),%eax
+c01079e0:	01 d0                	add    %edx,%eax
+c01079e2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c01079e5:	75 82                	jne    c0107969 <default_init_memmap+0x2a>
+        assert(PageReserved(p));
+        p->flags = p->property = 0;
+        set_page_ref(p, 0);
+    }
+    base->property = n;
+c01079e7:	8b 45 08             	mov    0x8(%ebp),%eax
+c01079ea:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01079ed:	89 50 08             	mov    %edx,0x8(%eax)
+    SetPageProperty(base);
+c01079f0:	8b 45 08             	mov    0x8(%ebp),%eax
+c01079f3:	83 c0 04             	add    $0x4,%eax
+c01079f6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
+c01079fd:	89 45 cc             	mov    %eax,-0x34(%ebp)
+ * Note that @nr may be almost arbitrarily large; this function is not
+ * restricted to acting on a single-word quantity.
+ * */
+static inline void
+set_bit(int nr, volatile void *addr) {
+    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
+c0107a00:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0107a03:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0107a06:	0f ab 10             	bts    %edx,(%eax)
+    nr_free += n;
+c0107a09:	8b 15 4c 0e 1b c0    	mov    0xc01b0e4c,%edx
+c0107a0f:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0107a12:	01 d0                	add    %edx,%eax
+c0107a14:	a3 4c 0e 1b c0       	mov    %eax,0xc01b0e4c
+    list_add_before(&free_list, &(base->page_link));
+c0107a19:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107a1c:	83 c0 0c             	add    $0xc,%eax
+c0107a1f:	c7 45 f0 44 0e 1b c0 	movl   $0xc01b0e44,-0x10(%ebp)
+c0107a26:	89 45 dc             	mov    %eax,-0x24(%ebp)
+ * Insert the new element @elm *before* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_before(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm->prev, listelm);
+c0107a29:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107a2c:	8b 00                	mov    (%eax),%eax
+c0107a2e:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0107a31:	89 55 d8             	mov    %edx,-0x28(%ebp)
+c0107a34:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+c0107a37:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107a3a:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c0107a3d:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0107a40:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c0107a43:	89 10                	mov    %edx,(%eax)
+c0107a45:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0107a48:	8b 10                	mov    (%eax),%edx
+c0107a4a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0107a4d:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c0107a50:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0107a53:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c0107a56:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c0107a59:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0107a5c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0107a5f:	89 10                	mov    %edx,(%eax)
+}
+c0107a61:	90                   	nop
+c0107a62:	c9                   	leave  
+c0107a63:	c3                   	ret    
+
+c0107a64 <default_alloc_pages>:
+
+static struct Page *
+default_alloc_pages(size_t n) {
+c0107a64:	55                   	push   %ebp
+c0107a65:	89 e5                	mov    %esp,%ebp
+c0107a67:	83 ec 68             	sub    $0x68,%esp
+    assert(n > 0);
+c0107a6a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0107a6e:	75 16                	jne    c0107a86 <default_alloc_pages+0x22>
+c0107a70:	68 90 d4 10 c0       	push   $0xc010d490
+c0107a75:	68 96 d4 10 c0       	push   $0xc010d496
+c0107a7a:	6a 55                	push   $0x55
+c0107a7c:	68 ab d4 10 c0       	push   $0xc010d4ab
+c0107a81:	e8 6e 89 ff ff       	call   c01003f4 <__panic>
+    if (n > nr_free) {
+c0107a86:	a1 4c 0e 1b c0       	mov    0xc01b0e4c,%eax
+c0107a8b:	3b 45 08             	cmp    0x8(%ebp),%eax
+c0107a8e:	73 0a                	jae    c0107a9a <default_alloc_pages+0x36>
+        return NULL;
+c0107a90:	b8 00 00 00 00       	mov    $0x0,%eax
+c0107a95:	e9 50 01 00 00       	jmp    c0107bea <default_alloc_pages+0x186>
+    }
+    struct Page *page = NULL;
+c0107a9a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    list_entry_t *le = &free_list;
+c0107aa1:	c7 45 f0 44 0e 1b c0 	movl   $0xc01b0e44,-0x10(%ebp)
+    while ((le = list_next(le)) != &free_list) {
+c0107aa8:	eb 1c                	jmp    c0107ac6 <default_alloc_pages+0x62>
+        struct Page *p = le2page(le, page_link);
+c0107aaa:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107aad:	83 e8 0c             	sub    $0xc,%eax
+c0107ab0:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        if (p->property >= n) {
+c0107ab3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0107ab6:	8b 40 08             	mov    0x8(%eax),%eax
+c0107ab9:	3b 45 08             	cmp    0x8(%ebp),%eax
+c0107abc:	72 08                	jb     c0107ac6 <default_alloc_pages+0x62>
+            page = p;
+c0107abe:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0107ac1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+            break;
+c0107ac4:	eb 18                	jmp    c0107ade <default_alloc_pages+0x7a>
+c0107ac6:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107ac9:	89 45 cc             	mov    %eax,-0x34(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c0107acc:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0107acf:	8b 40 04             	mov    0x4(%eax),%eax
+    if (n > nr_free) {
+        return NULL;
+    }
+    struct Page *page = NULL;
+    list_entry_t *le = &free_list;
+    while ((le = list_next(le)) != &free_list) {
+c0107ad2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0107ad5:	81 7d f0 44 0e 1b c0 	cmpl   $0xc01b0e44,-0x10(%ebp)
+c0107adc:	75 cc                	jne    c0107aaa <default_alloc_pages+0x46>
+        if (p->property >= n) {
+            page = p;
+            break;
+        }
+    }
+    if (page != NULL) {
+c0107ade:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0107ae2:	0f 84 ff 00 00 00    	je     c0107be7 <default_alloc_pages+0x183>
+    	list_entry_t *prev =list_prev(&(page->page_link));
+c0107ae8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107aeb:	83 c0 0c             	add    $0xc,%eax
+c0107aee:	89 45 dc             	mov    %eax,-0x24(%ebp)
+ * list_prev - get the previous entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_prev(list_entry_t *listelm) {
+    return listelm->prev;
+c0107af1:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0107af4:	8b 00                	mov    (%eax),%eax
+c0107af6:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        list_del(&(page->page_link));
+c0107af9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107afc:	83 c0 0c             	add    $0xc,%eax
+c0107aff:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c0107b02:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107b05:	8b 40 04             	mov    0x4(%eax),%eax
+c0107b08:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0107b0b:	8b 12                	mov    (%edx),%edx
+c0107b0d:	89 55 c8             	mov    %edx,-0x38(%ebp)
+c0107b10:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c0107b13:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0107b16:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+c0107b19:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c0107b1c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c0107b1f:	8b 55 c8             	mov    -0x38(%ebp),%edx
+c0107b22:	89 10                	mov    %edx,(%eax)
+        if (page->property > n) {
+c0107b24:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107b27:	8b 40 08             	mov    0x8(%eax),%eax
+c0107b2a:	3b 45 08             	cmp    0x8(%ebp),%eax
+c0107b2d:	0f 86 8e 00 00 00    	jbe    c0107bc1 <default_alloc_pages+0x15d>
+            struct Page *p = page + n;
+c0107b33:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107b36:	c1 e0 05             	shl    $0x5,%eax
+c0107b39:	89 c2                	mov    %eax,%edx
+c0107b3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107b3e:	01 d0                	add    %edx,%eax
+c0107b40:	89 45 d8             	mov    %eax,-0x28(%ebp)
+            p->property = page->property - n;
+c0107b43:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107b46:	8b 40 08             	mov    0x8(%eax),%eax
+c0107b49:	2b 45 08             	sub    0x8(%ebp),%eax
+c0107b4c:	89 c2                	mov    %eax,%edx
+c0107b4e:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0107b51:	89 50 08             	mov    %edx,0x8(%eax)
+            list_add(prev, &(p->page_link));
+c0107b54:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0107b57:	8d 50 0c             	lea    0xc(%eax),%edx
+c0107b5a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0107b5d:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c0107b60:	89 55 bc             	mov    %edx,-0x44(%ebp)
+c0107b63:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0107b66:	89 45 b8             	mov    %eax,-0x48(%ebp)
+c0107b69:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c0107b6c:	89 45 b4             	mov    %eax,-0x4c(%ebp)
+ * Insert the new element @elm *after* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_after(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm, listelm->next);
+c0107b6f:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c0107b72:	8b 40 04             	mov    0x4(%eax),%eax
+c0107b75:	8b 55 b4             	mov    -0x4c(%ebp),%edx
+c0107b78:	89 55 b0             	mov    %edx,-0x50(%ebp)
+c0107b7b:	8b 55 b8             	mov    -0x48(%ebp),%edx
+c0107b7e:	89 55 ac             	mov    %edx,-0x54(%ebp)
+c0107b81:	89 45 a8             	mov    %eax,-0x58(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c0107b84:	8b 45 a8             	mov    -0x58(%ebp),%eax
+c0107b87:	8b 55 b0             	mov    -0x50(%ebp),%edx
+c0107b8a:	89 10                	mov    %edx,(%eax)
+c0107b8c:	8b 45 a8             	mov    -0x58(%ebp),%eax
+c0107b8f:	8b 10                	mov    (%eax),%edx
+c0107b91:	8b 45 ac             	mov    -0x54(%ebp),%eax
+c0107b94:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c0107b97:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c0107b9a:	8b 55 a8             	mov    -0x58(%ebp),%edx
+c0107b9d:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c0107ba0:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c0107ba3:	8b 55 ac             	mov    -0x54(%ebp),%edx
+c0107ba6:	89 10                	mov    %edx,(%eax)
+            SetPageProperty(p);
+c0107ba8:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0107bab:	83 c0 04             	add    $0x4,%eax
+c0107bae:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
+c0107bb5:	89 45 c0             	mov    %eax,-0x40(%ebp)
+c0107bb8:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c0107bbb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0107bbe:	0f ab 10             	bts    %edx,(%eax)
+        }
+        nr_free -= n;
+c0107bc1:	a1 4c 0e 1b c0       	mov    0xc01b0e4c,%eax
+c0107bc6:	2b 45 08             	sub    0x8(%ebp),%eax
+c0107bc9:	a3 4c 0e 1b c0       	mov    %eax,0xc01b0e4c
+        ClearPageProperty(page);
+c0107bce:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107bd1:	83 c0 04             	add    $0x4,%eax
+c0107bd4:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
+c0107bdb:	89 45 a4             	mov    %eax,-0x5c(%ebp)
+ * @nr:     the bit to clear
+ * @addr:   the address to start counting from
+ * */
+static inline void
+clear_bit(int nr, volatile void *addr) {
+    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
+c0107bde:	8b 45 a4             	mov    -0x5c(%ebp),%eax
+c0107be1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0107be4:	0f b3 10             	btr    %edx,(%eax)
+    }
+    return page;
+c0107be7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0107bea:	c9                   	leave  
+c0107beb:	c3                   	ret    
+
+c0107bec <default_free_pages>:
+
+static void
+default_free_pages(struct Page *base, size_t n) {
+c0107bec:	55                   	push   %ebp
+c0107bed:	89 e5                	mov    %esp,%ebp
+c0107bef:	83 ec 78             	sub    $0x78,%esp
+    assert(n > 0);
+c0107bf2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c0107bf6:	75 16                	jne    c0107c0e <default_free_pages+0x22>
+c0107bf8:	68 90 d4 10 c0       	push   $0xc010d490
+c0107bfd:	68 96 d4 10 c0       	push   $0xc010d496
+c0107c02:	6a 73                	push   $0x73
+c0107c04:	68 ab d4 10 c0       	push   $0xc010d4ab
+c0107c09:	e8 e6 87 ff ff       	call   c01003f4 <__panic>
+    struct Page *p = base;
+c0107c0e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107c11:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    for (; p != base + n; p ++) {
+c0107c14:	e9 8c 00 00 00       	jmp    c0107ca5 <default_free_pages+0xb9>
+        assert(!PageReserved(p) && !PageProperty(p));
+c0107c19:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107c1c:	83 c0 04             	add    $0x4,%eax
+c0107c1f:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+c0107c26:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0107c29:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c0107c2c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+c0107c2f:	0f a3 10             	bt     %edx,(%eax)
+c0107c32:	19 c0                	sbb    %eax,%eax
+c0107c34:	89 45 bc             	mov    %eax,-0x44(%ebp)
+    return oldbit != 0;
+c0107c37:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
+c0107c3b:	0f 95 c0             	setne  %al
+c0107c3e:	0f b6 c0             	movzbl %al,%eax
+c0107c41:	85 c0                	test   %eax,%eax
+c0107c43:	75 2c                	jne    c0107c71 <default_free_pages+0x85>
+c0107c45:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107c48:	83 c0 04             	add    $0x4,%eax
+c0107c4b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
+c0107c52:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0107c55:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c0107c58:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0107c5b:	0f a3 10             	bt     %edx,(%eax)
+c0107c5e:	19 c0                	sbb    %eax,%eax
+c0107c60:	89 45 b4             	mov    %eax,-0x4c(%ebp)
+    return oldbit != 0;
+c0107c63:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
+c0107c67:	0f 95 c0             	setne  %al
+c0107c6a:	0f b6 c0             	movzbl %al,%eax
+c0107c6d:	85 c0                	test   %eax,%eax
+c0107c6f:	74 16                	je     c0107c87 <default_free_pages+0x9b>
+c0107c71:	68 d4 d4 10 c0       	push   $0xc010d4d4
+c0107c76:	68 96 d4 10 c0       	push   $0xc010d496
+c0107c7b:	6a 76                	push   $0x76
+c0107c7d:	68 ab d4 10 c0       	push   $0xc010d4ab
+c0107c82:	e8 6d 87 ff ff       	call   c01003f4 <__panic>
+        p->flags = 0;
+c0107c87:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107c8a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
+        set_page_ref(p, 0);
+c0107c91:	83 ec 08             	sub    $0x8,%esp
+c0107c94:	6a 00                	push   $0x0
+c0107c96:	ff 75 f4             	pushl  -0xc(%ebp)
+c0107c99:	e8 65 fc ff ff       	call   c0107903 <set_page_ref>
+c0107c9e:	83 c4 10             	add    $0x10,%esp
+
+static void
+default_free_pages(struct Page *base, size_t n) {
+    assert(n > 0);
+    struct Page *p = base;
+    for (; p != base + n; p ++) {
+c0107ca1:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
+c0107ca5:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0107ca8:	c1 e0 05             	shl    $0x5,%eax
+c0107cab:	89 c2                	mov    %eax,%edx
+c0107cad:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107cb0:	01 d0                	add    %edx,%eax
+c0107cb2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0107cb5:	0f 85 5e ff ff ff    	jne    c0107c19 <default_free_pages+0x2d>
+        assert(!PageReserved(p) && !PageProperty(p));
+        p->flags = 0;
+        set_page_ref(p, 0);
+    }
+    base->property = n;
+c0107cbb:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107cbe:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0107cc1:	89 50 08             	mov    %edx,0x8(%eax)
+    SetPageProperty(base);
+c0107cc4:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107cc7:	83 c0 04             	add    $0x4,%eax
+c0107cca:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
+c0107cd1:	89 45 b0             	mov    %eax,-0x50(%ebp)
+ * Note that @nr may be almost arbitrarily large; this function is not
+ * restricted to acting on a single-word quantity.
+ * */
+static inline void
+set_bit(int nr, volatile void *addr) {
+    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
+c0107cd4:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c0107cd7:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0107cda:	0f ab 10             	bts    %edx,(%eax)
+c0107cdd:	c7 45 e8 44 0e 1b c0 	movl   $0xc01b0e44,-0x18(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c0107ce4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0107ce7:	8b 40 04             	mov    0x4(%eax),%eax
+    list_entry_t *le = list_next(&free_list);
+c0107cea:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    while (le != &free_list) {
+c0107ced:	e9 fa 00 00 00       	jmp    c0107dec <default_free_pages+0x200>
+        p = le2page(le, page_link);
+c0107cf2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107cf5:	83 e8 0c             	sub    $0xc,%eax
+c0107cf8:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0107cfb:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107cfe:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0107d01:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0107d04:	8b 40 04             	mov    0x4(%eax),%eax
+        le = list_next(le);
+c0107d07:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        if (base + base->property == p) {
+c0107d0a:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107d0d:	8b 40 08             	mov    0x8(%eax),%eax
+c0107d10:	c1 e0 05             	shl    $0x5,%eax
+c0107d13:	89 c2                	mov    %eax,%edx
+c0107d15:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107d18:	01 d0                	add    %edx,%eax
+c0107d1a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0107d1d:	75 5a                	jne    c0107d79 <default_free_pages+0x18d>
+            base->property += p->property;
+c0107d1f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107d22:	8b 50 08             	mov    0x8(%eax),%edx
+c0107d25:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107d28:	8b 40 08             	mov    0x8(%eax),%eax
+c0107d2b:	01 c2                	add    %eax,%edx
+c0107d2d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107d30:	89 50 08             	mov    %edx,0x8(%eax)
+            ClearPageProperty(p);
+c0107d33:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107d36:	83 c0 04             	add    $0x4,%eax
+c0107d39:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
+c0107d40:	89 45 a4             	mov    %eax,-0x5c(%ebp)
+ * @nr:     the bit to clear
+ * @addr:   the address to start counting from
+ * */
+static inline void
+clear_bit(int nr, volatile void *addr) {
+    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
+c0107d43:	8b 45 a4             	mov    -0x5c(%ebp),%eax
+c0107d46:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0107d49:	0f b3 10             	btr    %edx,(%eax)
+            list_del(&(p->page_link));
+c0107d4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107d4f:	83 c0 0c             	add    $0xc,%eax
+c0107d52:	89 45 dc             	mov    %eax,-0x24(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c0107d55:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0107d58:	8b 40 04             	mov    0x4(%eax),%eax
+c0107d5b:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0107d5e:	8b 12                	mov    (%edx),%edx
+c0107d60:	89 55 ac             	mov    %edx,-0x54(%ebp)
+c0107d63:	89 45 a8             	mov    %eax,-0x58(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c0107d66:	8b 45 ac             	mov    -0x54(%ebp),%eax
+c0107d69:	8b 55 a8             	mov    -0x58(%ebp),%edx
+c0107d6c:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c0107d6f:	8b 45 a8             	mov    -0x58(%ebp),%eax
+c0107d72:	8b 55 ac             	mov    -0x54(%ebp),%edx
+c0107d75:	89 10                	mov    %edx,(%eax)
+c0107d77:	eb 73                	jmp    c0107dec <default_free_pages+0x200>
+        }
+        else if (p + p->property == base) {
+c0107d79:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107d7c:	8b 40 08             	mov    0x8(%eax),%eax
+c0107d7f:	c1 e0 05             	shl    $0x5,%eax
+c0107d82:	89 c2                	mov    %eax,%edx
+c0107d84:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107d87:	01 d0                	add    %edx,%eax
+c0107d89:	3b 45 08             	cmp    0x8(%ebp),%eax
+c0107d8c:	75 5e                	jne    c0107dec <default_free_pages+0x200>
+            p->property += base->property;
+c0107d8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107d91:	8b 50 08             	mov    0x8(%eax),%edx
+c0107d94:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107d97:	8b 40 08             	mov    0x8(%eax),%eax
+c0107d9a:	01 c2                	add    %eax,%edx
+c0107d9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107d9f:	89 50 08             	mov    %edx,0x8(%eax)
+            ClearPageProperty(base);
+c0107da2:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107da5:	83 c0 04             	add    $0x4,%eax
+c0107da8:	c7 45 cc 01 00 00 00 	movl   $0x1,-0x34(%ebp)
+c0107daf:	89 45 98             	mov    %eax,-0x68(%ebp)
+c0107db2:	8b 45 98             	mov    -0x68(%ebp),%eax
+c0107db5:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c0107db8:	0f b3 10             	btr    %edx,(%eax)
+            base = p;
+c0107dbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107dbe:	89 45 08             	mov    %eax,0x8(%ebp)
+            list_del(&(p->page_link));
+c0107dc1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107dc4:	83 c0 0c             	add    $0xc,%eax
+c0107dc7:	89 45 d8             	mov    %eax,-0x28(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c0107dca:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0107dcd:	8b 40 04             	mov    0x4(%eax),%eax
+c0107dd0:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c0107dd3:	8b 12                	mov    (%edx),%edx
+c0107dd5:	89 55 a0             	mov    %edx,-0x60(%ebp)
+c0107dd8:	89 45 9c             	mov    %eax,-0x64(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c0107ddb:	8b 45 a0             	mov    -0x60(%ebp),%eax
+c0107dde:	8b 55 9c             	mov    -0x64(%ebp),%edx
+c0107de1:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c0107de4:	8b 45 9c             	mov    -0x64(%ebp),%eax
+c0107de7:	8b 55 a0             	mov    -0x60(%ebp),%edx
+c0107dea:	89 10                	mov    %edx,(%eax)
+        set_page_ref(p, 0);
+    }
+    base->property = n;
+    SetPageProperty(base);
+    list_entry_t *le = list_next(&free_list);
+    while (le != &free_list) {
+c0107dec:	81 7d f0 44 0e 1b c0 	cmpl   $0xc01b0e44,-0x10(%ebp)
+c0107df3:	0f 85 f9 fe ff ff    	jne    c0107cf2 <default_free_pages+0x106>
+            ClearPageProperty(base);
+            base = p;
+            list_del(&(p->page_link));
+        }
+    }
+    nr_free += n;
+c0107df9:	8b 15 4c 0e 1b c0    	mov    0xc01b0e4c,%edx
+c0107dff:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0107e02:	01 d0                	add    %edx,%eax
+c0107e04:	a3 4c 0e 1b c0       	mov    %eax,0xc01b0e4c
+    le = &free_list;
+c0107e09:	c7 45 f0 44 0e 1b c0 	movl   $0xc01b0e44,-0x10(%ebp)
+    while ((le = list_next(le)) != &free_list && le2page(le,page_link)<base);
+c0107e10:	90                   	nop
+c0107e11:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107e14:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c0107e17:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0107e1a:	8b 40 04             	mov    0x4(%eax),%eax
+c0107e1d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0107e20:	81 7d f0 44 0e 1b c0 	cmpl   $0xc01b0e44,-0x10(%ebp)
+c0107e27:	74 0b                	je     c0107e34 <default_free_pages+0x248>
+c0107e29:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107e2c:	83 e8 0c             	sub    $0xc,%eax
+c0107e2f:	3b 45 08             	cmp    0x8(%ebp),%eax
+c0107e32:	72 dd                	jb     c0107e11 <default_free_pages+0x225>
+    list_add_before(le, &(base->page_link));
+c0107e34:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107e37:	8d 50 0c             	lea    0xc(%eax),%edx
+c0107e3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107e3d:	89 45 c8             	mov    %eax,-0x38(%ebp)
+c0107e40:	89 55 94             	mov    %edx,-0x6c(%ebp)
+ * Insert the new element @elm *before* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_before(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm->prev, listelm);
+c0107e43:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0107e46:	8b 00                	mov    (%eax),%eax
+c0107e48:	8b 55 94             	mov    -0x6c(%ebp),%edx
+c0107e4b:	89 55 90             	mov    %edx,-0x70(%ebp)
+c0107e4e:	89 45 8c             	mov    %eax,-0x74(%ebp)
+c0107e51:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0107e54:	89 45 88             	mov    %eax,-0x78(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c0107e57:	8b 45 88             	mov    -0x78(%ebp),%eax
+c0107e5a:	8b 55 90             	mov    -0x70(%ebp),%edx
+c0107e5d:	89 10                	mov    %edx,(%eax)
+c0107e5f:	8b 45 88             	mov    -0x78(%ebp),%eax
+c0107e62:	8b 10                	mov    (%eax),%edx
+c0107e64:	8b 45 8c             	mov    -0x74(%ebp),%eax
+c0107e67:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c0107e6a:	8b 45 90             	mov    -0x70(%ebp),%eax
+c0107e6d:	8b 55 88             	mov    -0x78(%ebp),%edx
+c0107e70:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c0107e73:	8b 45 90             	mov    -0x70(%ebp),%eax
+c0107e76:	8b 55 8c             	mov    -0x74(%ebp),%edx
+c0107e79:	89 10                	mov    %edx,(%eax)
+}
+c0107e7b:	90                   	nop
+c0107e7c:	c9                   	leave  
+c0107e7d:	c3                   	ret    
+
+c0107e7e <default_nr_free_pages>:
+
+static size_t
+default_nr_free_pages(void) {
+c0107e7e:	55                   	push   %ebp
+c0107e7f:	89 e5                	mov    %esp,%ebp
+    return nr_free;
+c0107e81:	a1 4c 0e 1b c0       	mov    0xc01b0e4c,%eax
+}
+c0107e86:	5d                   	pop    %ebp
+c0107e87:	c3                   	ret    
+
+c0107e88 <basic_check>:
+
+static void
+basic_check(void) {
+c0107e88:	55                   	push   %ebp
+c0107e89:	89 e5                	mov    %esp,%ebp
+c0107e8b:	83 ec 38             	sub    $0x38,%esp
+    struct Page *p0, *p1, *p2;
+    p0 = p1 = p2 = NULL;
+c0107e8e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0107e95:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107e98:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0107e9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107e9e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    assert((p0 = alloc_page()) != NULL);
+c0107ea1:	83 ec 0c             	sub    $0xc,%esp
+c0107ea4:	6a 01                	push   $0x1
+c0107ea6:	e8 c1 b9 ff ff       	call   c010386c <alloc_pages>
+c0107eab:	83 c4 10             	add    $0x10,%esp
+c0107eae:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0107eb1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c0107eb5:	75 19                	jne    c0107ed0 <basic_check+0x48>
+c0107eb7:	68 f9 d4 10 c0       	push   $0xc010d4f9
+c0107ebc:	68 96 d4 10 c0       	push   $0xc010d496
+c0107ec1:	68 9b 00 00 00       	push   $0x9b
+c0107ec6:	68 ab d4 10 c0       	push   $0xc010d4ab
+c0107ecb:	e8 24 85 ff ff       	call   c01003f4 <__panic>
+    assert((p1 = alloc_page()) != NULL);
+c0107ed0:	83 ec 0c             	sub    $0xc,%esp
+c0107ed3:	6a 01                	push   $0x1
+c0107ed5:	e8 92 b9 ff ff       	call   c010386c <alloc_pages>
+c0107eda:	83 c4 10             	add    $0x10,%esp
+c0107edd:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0107ee0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0107ee4:	75 19                	jne    c0107eff <basic_check+0x77>
+c0107ee6:	68 15 d5 10 c0       	push   $0xc010d515
+c0107eeb:	68 96 d4 10 c0       	push   $0xc010d496
+c0107ef0:	68 9c 00 00 00       	push   $0x9c
+c0107ef5:	68 ab d4 10 c0       	push   $0xc010d4ab
+c0107efa:	e8 f5 84 ff ff       	call   c01003f4 <__panic>
+    assert((p2 = alloc_page()) != NULL);
+c0107eff:	83 ec 0c             	sub    $0xc,%esp
+c0107f02:	6a 01                	push   $0x1
+c0107f04:	e8 63 b9 ff ff       	call   c010386c <alloc_pages>
+c0107f09:	83 c4 10             	add    $0x10,%esp
+c0107f0c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0107f0f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0107f13:	75 19                	jne    c0107f2e <basic_check+0xa6>
+c0107f15:	68 31 d5 10 c0       	push   $0xc010d531
+c0107f1a:	68 96 d4 10 c0       	push   $0xc010d496
+c0107f1f:	68 9d 00 00 00       	push   $0x9d
+c0107f24:	68 ab d4 10 c0       	push   $0xc010d4ab
+c0107f29:	e8 c6 84 ff ff       	call   c01003f4 <__panic>
+
+    assert(p0 != p1 && p0 != p2 && p1 != p2);
+c0107f2e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107f31:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c0107f34:	74 10                	je     c0107f46 <basic_check+0xbe>
+c0107f36:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107f39:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0107f3c:	74 08                	je     c0107f46 <basic_check+0xbe>
+c0107f3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107f41:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0107f44:	75 19                	jne    c0107f5f <basic_check+0xd7>
+c0107f46:	68 50 d5 10 c0       	push   $0xc010d550
+c0107f4b:	68 96 d4 10 c0       	push   $0xc010d496
+c0107f50:	68 9f 00 00 00       	push   $0x9f
+c0107f55:	68 ab d4 10 c0       	push   $0xc010d4ab
+c0107f5a:	e8 95 84 ff ff       	call   c01003f4 <__panic>
+    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
+c0107f5f:	83 ec 0c             	sub    $0xc,%esp
+c0107f62:	ff 75 ec             	pushl  -0x14(%ebp)
+c0107f65:	e8 8f f9 ff ff       	call   c01078f9 <page_ref>
+c0107f6a:	83 c4 10             	add    $0x10,%esp
+c0107f6d:	85 c0                	test   %eax,%eax
+c0107f6f:	75 24                	jne    c0107f95 <basic_check+0x10d>
+c0107f71:	83 ec 0c             	sub    $0xc,%esp
+c0107f74:	ff 75 f0             	pushl  -0x10(%ebp)
+c0107f77:	e8 7d f9 ff ff       	call   c01078f9 <page_ref>
+c0107f7c:	83 c4 10             	add    $0x10,%esp
+c0107f7f:	85 c0                	test   %eax,%eax
+c0107f81:	75 12                	jne    c0107f95 <basic_check+0x10d>
+c0107f83:	83 ec 0c             	sub    $0xc,%esp
+c0107f86:	ff 75 f4             	pushl  -0xc(%ebp)
+c0107f89:	e8 6b f9 ff ff       	call   c01078f9 <page_ref>
+c0107f8e:	83 c4 10             	add    $0x10,%esp
+c0107f91:	85 c0                	test   %eax,%eax
+c0107f93:	74 19                	je     c0107fae <basic_check+0x126>
+c0107f95:	68 74 d5 10 c0       	push   $0xc010d574
+c0107f9a:	68 96 d4 10 c0       	push   $0xc010d496
+c0107f9f:	68 a0 00 00 00       	push   $0xa0
+c0107fa4:	68 ab d4 10 c0       	push   $0xc010d4ab
+c0107fa9:	e8 46 84 ff ff       	call   c01003f4 <__panic>
+
+    assert(page2pa(p0) < npage * PGSIZE);
+c0107fae:	83 ec 0c             	sub    $0xc,%esp
+c0107fb1:	ff 75 ec             	pushl  -0x14(%ebp)
+c0107fb4:	e8 2d f9 ff ff       	call   c01078e6 <page2pa>
+c0107fb9:	83 c4 10             	add    $0x10,%esp
+c0107fbc:	89 c2                	mov    %eax,%edx
+c0107fbe:	a1 60 ec 1a c0       	mov    0xc01aec60,%eax
+c0107fc3:	c1 e0 0c             	shl    $0xc,%eax
+c0107fc6:	39 c2                	cmp    %eax,%edx
+c0107fc8:	72 19                	jb     c0107fe3 <basic_check+0x15b>
+c0107fca:	68 b0 d5 10 c0       	push   $0xc010d5b0
+c0107fcf:	68 96 d4 10 c0       	push   $0xc010d496
+c0107fd4:	68 a2 00 00 00       	push   $0xa2
+c0107fd9:	68 ab d4 10 c0       	push   $0xc010d4ab
+c0107fde:	e8 11 84 ff ff       	call   c01003f4 <__panic>
+    assert(page2pa(p1) < npage * PGSIZE);
+c0107fe3:	83 ec 0c             	sub    $0xc,%esp
+c0107fe6:	ff 75 f0             	pushl  -0x10(%ebp)
+c0107fe9:	e8 f8 f8 ff ff       	call   c01078e6 <page2pa>
+c0107fee:	83 c4 10             	add    $0x10,%esp
+c0107ff1:	89 c2                	mov    %eax,%edx
+c0107ff3:	a1 60 ec 1a c0       	mov    0xc01aec60,%eax
+c0107ff8:	c1 e0 0c             	shl    $0xc,%eax
+c0107ffb:	39 c2                	cmp    %eax,%edx
+c0107ffd:	72 19                	jb     c0108018 <basic_check+0x190>
+c0107fff:	68 cd d5 10 c0       	push   $0xc010d5cd
+c0108004:	68 96 d4 10 c0       	push   $0xc010d496
+c0108009:	68 a3 00 00 00       	push   $0xa3
+c010800e:	68 ab d4 10 c0       	push   $0xc010d4ab
+c0108013:	e8 dc 83 ff ff       	call   c01003f4 <__panic>
+    assert(page2pa(p2) < npage * PGSIZE);
+c0108018:	83 ec 0c             	sub    $0xc,%esp
+c010801b:	ff 75 f4             	pushl  -0xc(%ebp)
+c010801e:	e8 c3 f8 ff ff       	call   c01078e6 <page2pa>
+c0108023:	83 c4 10             	add    $0x10,%esp
+c0108026:	89 c2                	mov    %eax,%edx
+c0108028:	a1 60 ec 1a c0       	mov    0xc01aec60,%eax
+c010802d:	c1 e0 0c             	shl    $0xc,%eax
+c0108030:	39 c2                	cmp    %eax,%edx
+c0108032:	72 19                	jb     c010804d <basic_check+0x1c5>
+c0108034:	68 ea d5 10 c0       	push   $0xc010d5ea
+c0108039:	68 96 d4 10 c0       	push   $0xc010d496
+c010803e:	68 a4 00 00 00       	push   $0xa4
+c0108043:	68 ab d4 10 c0       	push   $0xc010d4ab
+c0108048:	e8 a7 83 ff ff       	call   c01003f4 <__panic>
+
+    list_entry_t free_list_store = free_list;
+c010804d:	a1 44 0e 1b c0       	mov    0xc01b0e44,%eax
+c0108052:	8b 15 48 0e 1b c0    	mov    0xc01b0e48,%edx
+c0108058:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c010805b:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+c010805e:	c7 45 e4 44 0e 1b c0 	movl   $0xc01b0e44,-0x1c(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c0108065:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0108068:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010806b:	89 50 04             	mov    %edx,0x4(%eax)
+c010806e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0108071:	8b 50 04             	mov    0x4(%eax),%edx
+c0108074:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0108077:	89 10                	mov    %edx,(%eax)
+c0108079:	c7 45 d8 44 0e 1b c0 	movl   $0xc01b0e44,-0x28(%ebp)
+ * list_empty - tests whether a list is empty
+ * @list:       the list to test.
+ * */
+static inline bool
+list_empty(list_entry_t *list) {
+    return list->next == list;
+c0108080:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0108083:	8b 40 04             	mov    0x4(%eax),%eax
+c0108086:	39 45 d8             	cmp    %eax,-0x28(%ebp)
+c0108089:	0f 94 c0             	sete   %al
+c010808c:	0f b6 c0             	movzbl %al,%eax
+    list_init(&free_list);
+    assert(list_empty(&free_list));
+c010808f:	85 c0                	test   %eax,%eax
+c0108091:	75 19                	jne    c01080ac <basic_check+0x224>
+c0108093:	68 07 d6 10 c0       	push   $0xc010d607
+c0108098:	68 96 d4 10 c0       	push   $0xc010d496
+c010809d:	68 a8 00 00 00       	push   $0xa8
+c01080a2:	68 ab d4 10 c0       	push   $0xc010d4ab
+c01080a7:	e8 48 83 ff ff       	call   c01003f4 <__panic>
+
+    unsigned int nr_free_store = nr_free;
+c01080ac:	a1 4c 0e 1b c0       	mov    0xc01b0e4c,%eax
+c01080b1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    nr_free = 0;
+c01080b4:	c7 05 4c 0e 1b c0 00 	movl   $0x0,0xc01b0e4c
+c01080bb:	00 00 00 
+
+    assert(alloc_page() == NULL);
+c01080be:	83 ec 0c             	sub    $0xc,%esp
+c01080c1:	6a 01                	push   $0x1
+c01080c3:	e8 a4 b7 ff ff       	call   c010386c <alloc_pages>
+c01080c8:	83 c4 10             	add    $0x10,%esp
+c01080cb:	85 c0                	test   %eax,%eax
+c01080cd:	74 19                	je     c01080e8 <basic_check+0x260>
+c01080cf:	68 1e d6 10 c0       	push   $0xc010d61e
+c01080d4:	68 96 d4 10 c0       	push   $0xc010d496
+c01080d9:	68 ad 00 00 00       	push   $0xad
+c01080de:	68 ab d4 10 c0       	push   $0xc010d4ab
+c01080e3:	e8 0c 83 ff ff       	call   c01003f4 <__panic>
+
+    free_page(p0);
+c01080e8:	83 ec 08             	sub    $0x8,%esp
+c01080eb:	6a 01                	push   $0x1
+c01080ed:	ff 75 ec             	pushl  -0x14(%ebp)
+c01080f0:	e8 e3 b7 ff ff       	call   c01038d8 <free_pages>
+c01080f5:	83 c4 10             	add    $0x10,%esp
+    free_page(p1);
+c01080f8:	83 ec 08             	sub    $0x8,%esp
+c01080fb:	6a 01                	push   $0x1
+c01080fd:	ff 75 f0             	pushl  -0x10(%ebp)
+c0108100:	e8 d3 b7 ff ff       	call   c01038d8 <free_pages>
+c0108105:	83 c4 10             	add    $0x10,%esp
+    free_page(p2);
+c0108108:	83 ec 08             	sub    $0x8,%esp
+c010810b:	6a 01                	push   $0x1
+c010810d:	ff 75 f4             	pushl  -0xc(%ebp)
+c0108110:	e8 c3 b7 ff ff       	call   c01038d8 <free_pages>
+c0108115:	83 c4 10             	add    $0x10,%esp
+    assert(nr_free == 3);
+c0108118:	a1 4c 0e 1b c0       	mov    0xc01b0e4c,%eax
+c010811d:	83 f8 03             	cmp    $0x3,%eax
+c0108120:	74 19                	je     c010813b <basic_check+0x2b3>
+c0108122:	68 33 d6 10 c0       	push   $0xc010d633
+c0108127:	68 96 d4 10 c0       	push   $0xc010d496
+c010812c:	68 b2 00 00 00       	push   $0xb2
+c0108131:	68 ab d4 10 c0       	push   $0xc010d4ab
+c0108136:	e8 b9 82 ff ff       	call   c01003f4 <__panic>
+
+    assert((p0 = alloc_page()) != NULL);
+c010813b:	83 ec 0c             	sub    $0xc,%esp
+c010813e:	6a 01                	push   $0x1
+c0108140:	e8 27 b7 ff ff       	call   c010386c <alloc_pages>
+c0108145:	83 c4 10             	add    $0x10,%esp
+c0108148:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010814b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c010814f:	75 19                	jne    c010816a <basic_check+0x2e2>
+c0108151:	68 f9 d4 10 c0       	push   $0xc010d4f9
+c0108156:	68 96 d4 10 c0       	push   $0xc010d496
+c010815b:	68 b4 00 00 00       	push   $0xb4
+c0108160:	68 ab d4 10 c0       	push   $0xc010d4ab
+c0108165:	e8 8a 82 ff ff       	call   c01003f4 <__panic>
+    assert((p1 = alloc_page()) != NULL);
+c010816a:	83 ec 0c             	sub    $0xc,%esp
+c010816d:	6a 01                	push   $0x1
+c010816f:	e8 f8 b6 ff ff       	call   c010386c <alloc_pages>
+c0108174:	83 c4 10             	add    $0x10,%esp
+c0108177:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010817a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010817e:	75 19                	jne    c0108199 <basic_check+0x311>
+c0108180:	68 15 d5 10 c0       	push   $0xc010d515
+c0108185:	68 96 d4 10 c0       	push   $0xc010d496
+c010818a:	68 b5 00 00 00       	push   $0xb5
+c010818f:	68 ab d4 10 c0       	push   $0xc010d4ab
+c0108194:	e8 5b 82 ff ff       	call   c01003f4 <__panic>
+    assert((p2 = alloc_page()) != NULL);
+c0108199:	83 ec 0c             	sub    $0xc,%esp
+c010819c:	6a 01                	push   $0x1
+c010819e:	e8 c9 b6 ff ff       	call   c010386c <alloc_pages>
+c01081a3:	83 c4 10             	add    $0x10,%esp
+c01081a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01081a9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01081ad:	75 19                	jne    c01081c8 <basic_check+0x340>
+c01081af:	68 31 d5 10 c0       	push   $0xc010d531
+c01081b4:	68 96 d4 10 c0       	push   $0xc010d496
+c01081b9:	68 b6 00 00 00       	push   $0xb6
+c01081be:	68 ab d4 10 c0       	push   $0xc010d4ab
+c01081c3:	e8 2c 82 ff ff       	call   c01003f4 <__panic>
+
+    assert(alloc_page() == NULL);
+c01081c8:	83 ec 0c             	sub    $0xc,%esp
+c01081cb:	6a 01                	push   $0x1
+c01081cd:	e8 9a b6 ff ff       	call   c010386c <alloc_pages>
+c01081d2:	83 c4 10             	add    $0x10,%esp
+c01081d5:	85 c0                	test   %eax,%eax
+c01081d7:	74 19                	je     c01081f2 <basic_check+0x36a>
+c01081d9:	68 1e d6 10 c0       	push   $0xc010d61e
+c01081de:	68 96 d4 10 c0       	push   $0xc010d496
+c01081e3:	68 b8 00 00 00       	push   $0xb8
+c01081e8:	68 ab d4 10 c0       	push   $0xc010d4ab
+c01081ed:	e8 02 82 ff ff       	call   c01003f4 <__panic>
+
+    free_page(p0);
+c01081f2:	83 ec 08             	sub    $0x8,%esp
+c01081f5:	6a 01                	push   $0x1
+c01081f7:	ff 75 ec             	pushl  -0x14(%ebp)
+c01081fa:	e8 d9 b6 ff ff       	call   c01038d8 <free_pages>
+c01081ff:	83 c4 10             	add    $0x10,%esp
+c0108202:	c7 45 e8 44 0e 1b c0 	movl   $0xc01b0e44,-0x18(%ebp)
+c0108209:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010820c:	8b 40 04             	mov    0x4(%eax),%eax
+c010820f:	39 45 e8             	cmp    %eax,-0x18(%ebp)
+c0108212:	0f 94 c0             	sete   %al
+c0108215:	0f b6 c0             	movzbl %al,%eax
+    assert(!list_empty(&free_list));
+c0108218:	85 c0                	test   %eax,%eax
+c010821a:	74 19                	je     c0108235 <basic_check+0x3ad>
+c010821c:	68 40 d6 10 c0       	push   $0xc010d640
+c0108221:	68 96 d4 10 c0       	push   $0xc010d496
+c0108226:	68 bb 00 00 00       	push   $0xbb
+c010822b:	68 ab d4 10 c0       	push   $0xc010d4ab
+c0108230:	e8 bf 81 ff ff       	call   c01003f4 <__panic>
+
+    struct Page *p;
+    assert((p = alloc_page()) == p0);
+c0108235:	83 ec 0c             	sub    $0xc,%esp
+c0108238:	6a 01                	push   $0x1
+c010823a:	e8 2d b6 ff ff       	call   c010386c <alloc_pages>
+c010823f:	83 c4 10             	add    $0x10,%esp
+c0108242:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c0108245:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0108248:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c010824b:	74 19                	je     c0108266 <basic_check+0x3de>
+c010824d:	68 58 d6 10 c0       	push   $0xc010d658
+c0108252:	68 96 d4 10 c0       	push   $0xc010d496
+c0108257:	68 be 00 00 00       	push   $0xbe
+c010825c:	68 ab d4 10 c0       	push   $0xc010d4ab
+c0108261:	e8 8e 81 ff ff       	call   c01003f4 <__panic>
+    assert(alloc_page() == NULL);
+c0108266:	83 ec 0c             	sub    $0xc,%esp
+c0108269:	6a 01                	push   $0x1
+c010826b:	e8 fc b5 ff ff       	call   c010386c <alloc_pages>
+c0108270:	83 c4 10             	add    $0x10,%esp
+c0108273:	85 c0                	test   %eax,%eax
+c0108275:	74 19                	je     c0108290 <basic_check+0x408>
+c0108277:	68 1e d6 10 c0       	push   $0xc010d61e
+c010827c:	68 96 d4 10 c0       	push   $0xc010d496
+c0108281:	68 bf 00 00 00       	push   $0xbf
+c0108286:	68 ab d4 10 c0       	push   $0xc010d4ab
+c010828b:	e8 64 81 ff ff       	call   c01003f4 <__panic>
+
+    assert(nr_free == 0);
+c0108290:	a1 4c 0e 1b c0       	mov    0xc01b0e4c,%eax
+c0108295:	85 c0                	test   %eax,%eax
+c0108297:	74 19                	je     c01082b2 <basic_check+0x42a>
+c0108299:	68 71 d6 10 c0       	push   $0xc010d671
+c010829e:	68 96 d4 10 c0       	push   $0xc010d496
+c01082a3:	68 c1 00 00 00       	push   $0xc1
+c01082a8:	68 ab d4 10 c0       	push   $0xc010d4ab
+c01082ad:	e8 42 81 ff ff       	call   c01003f4 <__panic>
+    free_list = free_list_store;
+c01082b2:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c01082b5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c01082b8:	a3 44 0e 1b c0       	mov    %eax,0xc01b0e44
+c01082bd:	89 15 48 0e 1b c0    	mov    %edx,0xc01b0e48
+    nr_free = nr_free_store;
+c01082c3:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01082c6:	a3 4c 0e 1b c0       	mov    %eax,0xc01b0e4c
+
+    free_page(p);
+c01082cb:	83 ec 08             	sub    $0x8,%esp
+c01082ce:	6a 01                	push   $0x1
+c01082d0:	ff 75 dc             	pushl  -0x24(%ebp)
+c01082d3:	e8 00 b6 ff ff       	call   c01038d8 <free_pages>
+c01082d8:	83 c4 10             	add    $0x10,%esp
+    free_page(p1);
+c01082db:	83 ec 08             	sub    $0x8,%esp
+c01082de:	6a 01                	push   $0x1
+c01082e0:	ff 75 f0             	pushl  -0x10(%ebp)
+c01082e3:	e8 f0 b5 ff ff       	call   c01038d8 <free_pages>
+c01082e8:	83 c4 10             	add    $0x10,%esp
+    free_page(p2);
+c01082eb:	83 ec 08             	sub    $0x8,%esp
+c01082ee:	6a 01                	push   $0x1
+c01082f0:	ff 75 f4             	pushl  -0xc(%ebp)
+c01082f3:	e8 e0 b5 ff ff       	call   c01038d8 <free_pages>
+c01082f8:	83 c4 10             	add    $0x10,%esp
+}
+c01082fb:	90                   	nop
+c01082fc:	c9                   	leave  
+c01082fd:	c3                   	ret    
+
+c01082fe <default_check>:
+
+// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
+// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
+static void
+default_check(void) {
+c01082fe:	55                   	push   %ebp
+c01082ff:	89 e5                	mov    %esp,%ebp
+c0108301:	81 ec 88 00 00 00    	sub    $0x88,%esp
+    int count = 0, total = 0;
+c0108307:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c010830e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    list_entry_t *le = &free_list;
+c0108315:	c7 45 ec 44 0e 1b c0 	movl   $0xc01b0e44,-0x14(%ebp)
+    while ((le = list_next(le)) != &free_list) {
+c010831c:	eb 60                	jmp    c010837e <default_check+0x80>
+        struct Page *p = le2page(le, page_link);
+c010831e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0108321:	83 e8 0c             	sub    $0xc,%eax
+c0108324:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        assert(PageProperty(p));
+c0108327:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010832a:	83 c0 04             	add    $0x4,%eax
+c010832d:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
+c0108334:	89 45 ac             	mov    %eax,-0x54(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0108337:	8b 45 ac             	mov    -0x54(%ebp),%eax
+c010833a:	8b 55 b0             	mov    -0x50(%ebp),%edx
+c010833d:	0f a3 10             	bt     %edx,(%eax)
+c0108340:	19 c0                	sbb    %eax,%eax
+c0108342:	89 45 a8             	mov    %eax,-0x58(%ebp)
+    return oldbit != 0;
+c0108345:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
+c0108349:	0f 95 c0             	setne  %al
+c010834c:	0f b6 c0             	movzbl %al,%eax
+c010834f:	85 c0                	test   %eax,%eax
+c0108351:	75 19                	jne    c010836c <default_check+0x6e>
+c0108353:	68 7e d6 10 c0       	push   $0xc010d67e
+c0108358:	68 96 d4 10 c0       	push   $0xc010d496
+c010835d:	68 d2 00 00 00       	push   $0xd2
+c0108362:	68 ab d4 10 c0       	push   $0xc010d4ab
+c0108367:	e8 88 80 ff ff       	call   c01003f4 <__panic>
+        count ++, total += p->property;
+c010836c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0108370:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0108373:	8b 50 08             	mov    0x8(%eax),%edx
+c0108376:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0108379:	01 d0                	add    %edx,%eax
+c010837b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010837e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0108381:	89 45 e0             	mov    %eax,-0x20(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c0108384:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0108387:	8b 40 04             	mov    0x4(%eax),%eax
+// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
+static void
+default_check(void) {
+    int count = 0, total = 0;
+    list_entry_t *le = &free_list;
+    while ((le = list_next(le)) != &free_list) {
+c010838a:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010838d:	81 7d ec 44 0e 1b c0 	cmpl   $0xc01b0e44,-0x14(%ebp)
+c0108394:	75 88                	jne    c010831e <default_check+0x20>
+        struct Page *p = le2page(le, page_link);
+        assert(PageProperty(p));
+        count ++, total += p->property;
+    }
+    assert(total == nr_free_pages());
+c0108396:	e8 72 b5 ff ff       	call   c010390d <nr_free_pages>
+c010839b:	89 c2                	mov    %eax,%edx
+c010839d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01083a0:	39 c2                	cmp    %eax,%edx
+c01083a2:	74 19                	je     c01083bd <default_check+0xbf>
+c01083a4:	68 8e d6 10 c0       	push   $0xc010d68e
+c01083a9:	68 96 d4 10 c0       	push   $0xc010d496
+c01083ae:	68 d5 00 00 00       	push   $0xd5
+c01083b3:	68 ab d4 10 c0       	push   $0xc010d4ab
+c01083b8:	e8 37 80 ff ff       	call   c01003f4 <__panic>
+
+    basic_check();
+c01083bd:	e8 c6 fa ff ff       	call   c0107e88 <basic_check>
+
+    struct Page *p0 = alloc_pages(5), *p1, *p2;
+c01083c2:	83 ec 0c             	sub    $0xc,%esp
+c01083c5:	6a 05                	push   $0x5
+c01083c7:	e8 a0 b4 ff ff       	call   c010386c <alloc_pages>
+c01083cc:	83 c4 10             	add    $0x10,%esp
+c01083cf:	89 45 dc             	mov    %eax,-0x24(%ebp)
+    assert(p0 != NULL);
+c01083d2:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c01083d6:	75 19                	jne    c01083f1 <default_check+0xf3>
+c01083d8:	68 a7 d6 10 c0       	push   $0xc010d6a7
+c01083dd:	68 96 d4 10 c0       	push   $0xc010d496
+c01083e2:	68 da 00 00 00       	push   $0xda
+c01083e7:	68 ab d4 10 c0       	push   $0xc010d4ab
+c01083ec:	e8 03 80 ff ff       	call   c01003f4 <__panic>
+    assert(!PageProperty(p0));
+c01083f1:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01083f4:	83 c0 04             	add    $0x4,%eax
+c01083f7:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
+c01083fe:	89 45 a4             	mov    %eax,-0x5c(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0108401:	8b 45 a4             	mov    -0x5c(%ebp),%eax
+c0108404:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c0108407:	0f a3 10             	bt     %edx,(%eax)
+c010840a:	19 c0                	sbb    %eax,%eax
+c010840c:	89 45 a0             	mov    %eax,-0x60(%ebp)
+    return oldbit != 0;
+c010840f:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
+c0108413:	0f 95 c0             	setne  %al
+c0108416:	0f b6 c0             	movzbl %al,%eax
+c0108419:	85 c0                	test   %eax,%eax
+c010841b:	74 19                	je     c0108436 <default_check+0x138>
+c010841d:	68 b2 d6 10 c0       	push   $0xc010d6b2
+c0108422:	68 96 d4 10 c0       	push   $0xc010d496
+c0108427:	68 db 00 00 00       	push   $0xdb
+c010842c:	68 ab d4 10 c0       	push   $0xc010d4ab
+c0108431:	e8 be 7f ff ff       	call   c01003f4 <__panic>
+
+    list_entry_t free_list_store = free_list;
+c0108436:	a1 44 0e 1b c0       	mov    0xc01b0e44,%eax
+c010843b:	8b 15 48 0e 1b c0    	mov    0xc01b0e48,%edx
+c0108441:	89 45 80             	mov    %eax,-0x80(%ebp)
+c0108444:	89 55 84             	mov    %edx,-0x7c(%ebp)
+c0108447:	c7 45 d0 44 0e 1b c0 	movl   $0xc01b0e44,-0x30(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c010844e:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0108451:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c0108454:	89 50 04             	mov    %edx,0x4(%eax)
+c0108457:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010845a:	8b 50 04             	mov    0x4(%eax),%edx
+c010845d:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0108460:	89 10                	mov    %edx,(%eax)
+c0108462:	c7 45 d8 44 0e 1b c0 	movl   $0xc01b0e44,-0x28(%ebp)
+ * list_empty - tests whether a list is empty
+ * @list:       the list to test.
+ * */
+static inline bool
+list_empty(list_entry_t *list) {
+    return list->next == list;
+c0108469:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010846c:	8b 40 04             	mov    0x4(%eax),%eax
+c010846f:	39 45 d8             	cmp    %eax,-0x28(%ebp)
+c0108472:	0f 94 c0             	sete   %al
+c0108475:	0f b6 c0             	movzbl %al,%eax
+    list_init(&free_list);
+    assert(list_empty(&free_list));
+c0108478:	85 c0                	test   %eax,%eax
+c010847a:	75 19                	jne    c0108495 <default_check+0x197>
+c010847c:	68 07 d6 10 c0       	push   $0xc010d607
+c0108481:	68 96 d4 10 c0       	push   $0xc010d496
+c0108486:	68 df 00 00 00       	push   $0xdf
+c010848b:	68 ab d4 10 c0       	push   $0xc010d4ab
+c0108490:	e8 5f 7f ff ff       	call   c01003f4 <__panic>
+    assert(alloc_page() == NULL);
+c0108495:	83 ec 0c             	sub    $0xc,%esp
+c0108498:	6a 01                	push   $0x1
+c010849a:	e8 cd b3 ff ff       	call   c010386c <alloc_pages>
+c010849f:	83 c4 10             	add    $0x10,%esp
+c01084a2:	85 c0                	test   %eax,%eax
+c01084a4:	74 19                	je     c01084bf <default_check+0x1c1>
+c01084a6:	68 1e d6 10 c0       	push   $0xc010d61e
+c01084ab:	68 96 d4 10 c0       	push   $0xc010d496
+c01084b0:	68 e0 00 00 00       	push   $0xe0
+c01084b5:	68 ab d4 10 c0       	push   $0xc010d4ab
+c01084ba:	e8 35 7f ff ff       	call   c01003f4 <__panic>
+
+    unsigned int nr_free_store = nr_free;
+c01084bf:	a1 4c 0e 1b c0       	mov    0xc01b0e4c,%eax
+c01084c4:	89 45 cc             	mov    %eax,-0x34(%ebp)
+    nr_free = 0;
+c01084c7:	c7 05 4c 0e 1b c0 00 	movl   $0x0,0xc01b0e4c
+c01084ce:	00 00 00 
+
+    free_pages(p0 + 2, 3);
+c01084d1:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01084d4:	83 c0 40             	add    $0x40,%eax
+c01084d7:	83 ec 08             	sub    $0x8,%esp
+c01084da:	6a 03                	push   $0x3
+c01084dc:	50                   	push   %eax
+c01084dd:	e8 f6 b3 ff ff       	call   c01038d8 <free_pages>
+c01084e2:	83 c4 10             	add    $0x10,%esp
+    assert(alloc_pages(4) == NULL);
+c01084e5:	83 ec 0c             	sub    $0xc,%esp
+c01084e8:	6a 04                	push   $0x4
+c01084ea:	e8 7d b3 ff ff       	call   c010386c <alloc_pages>
+c01084ef:	83 c4 10             	add    $0x10,%esp
+c01084f2:	85 c0                	test   %eax,%eax
+c01084f4:	74 19                	je     c010850f <default_check+0x211>
+c01084f6:	68 c4 d6 10 c0       	push   $0xc010d6c4
+c01084fb:	68 96 d4 10 c0       	push   $0xc010d496
+c0108500:	68 e6 00 00 00       	push   $0xe6
+c0108505:	68 ab d4 10 c0       	push   $0xc010d4ab
+c010850a:	e8 e5 7e ff ff       	call   c01003f4 <__panic>
+    assert(PageProperty(p0 + 2) && p0[2].property == 3);
+c010850f:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0108512:	83 c0 40             	add    $0x40,%eax
+c0108515:	83 c0 04             	add    $0x4,%eax
+c0108518:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
+c010851f:	89 45 9c             	mov    %eax,-0x64(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0108522:	8b 45 9c             	mov    -0x64(%ebp),%eax
+c0108525:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0108528:	0f a3 10             	bt     %edx,(%eax)
+c010852b:	19 c0                	sbb    %eax,%eax
+c010852d:	89 45 98             	mov    %eax,-0x68(%ebp)
+    return oldbit != 0;
+c0108530:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
+c0108534:	0f 95 c0             	setne  %al
+c0108537:	0f b6 c0             	movzbl %al,%eax
+c010853a:	85 c0                	test   %eax,%eax
+c010853c:	74 0e                	je     c010854c <default_check+0x24e>
+c010853e:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0108541:	83 c0 40             	add    $0x40,%eax
+c0108544:	8b 40 08             	mov    0x8(%eax),%eax
+c0108547:	83 f8 03             	cmp    $0x3,%eax
+c010854a:	74 19                	je     c0108565 <default_check+0x267>
+c010854c:	68 dc d6 10 c0       	push   $0xc010d6dc
+c0108551:	68 96 d4 10 c0       	push   $0xc010d496
+c0108556:	68 e7 00 00 00       	push   $0xe7
+c010855b:	68 ab d4 10 c0       	push   $0xc010d4ab
+c0108560:	e8 8f 7e ff ff       	call   c01003f4 <__panic>
+    assert((p1 = alloc_pages(3)) != NULL);
+c0108565:	83 ec 0c             	sub    $0xc,%esp
+c0108568:	6a 03                	push   $0x3
+c010856a:	e8 fd b2 ff ff       	call   c010386c <alloc_pages>
+c010856f:	83 c4 10             	add    $0x10,%esp
+c0108572:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+c0108575:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
+c0108579:	75 19                	jne    c0108594 <default_check+0x296>
+c010857b:	68 08 d7 10 c0       	push   $0xc010d708
+c0108580:	68 96 d4 10 c0       	push   $0xc010d496
+c0108585:	68 e8 00 00 00       	push   $0xe8
+c010858a:	68 ab d4 10 c0       	push   $0xc010d4ab
+c010858f:	e8 60 7e ff ff       	call   c01003f4 <__panic>
+    assert(alloc_page() == NULL);
+c0108594:	83 ec 0c             	sub    $0xc,%esp
+c0108597:	6a 01                	push   $0x1
+c0108599:	e8 ce b2 ff ff       	call   c010386c <alloc_pages>
+c010859e:	83 c4 10             	add    $0x10,%esp
+c01085a1:	85 c0                	test   %eax,%eax
+c01085a3:	74 19                	je     c01085be <default_check+0x2c0>
+c01085a5:	68 1e d6 10 c0       	push   $0xc010d61e
+c01085aa:	68 96 d4 10 c0       	push   $0xc010d496
+c01085af:	68 e9 00 00 00       	push   $0xe9
+c01085b4:	68 ab d4 10 c0       	push   $0xc010d4ab
+c01085b9:	e8 36 7e ff ff       	call   c01003f4 <__panic>
+    assert(p0 + 2 == p1);
+c01085be:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01085c1:	83 c0 40             	add    $0x40,%eax
+c01085c4:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
+c01085c7:	74 19                	je     c01085e2 <default_check+0x2e4>
+c01085c9:	68 26 d7 10 c0       	push   $0xc010d726
+c01085ce:	68 96 d4 10 c0       	push   $0xc010d496
+c01085d3:	68 ea 00 00 00       	push   $0xea
+c01085d8:	68 ab d4 10 c0       	push   $0xc010d4ab
+c01085dd:	e8 12 7e ff ff       	call   c01003f4 <__panic>
+
+    p2 = p0 + 1;
+c01085e2:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01085e5:	83 c0 20             	add    $0x20,%eax
+c01085e8:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    free_page(p0);
+c01085eb:	83 ec 08             	sub    $0x8,%esp
+c01085ee:	6a 01                	push   $0x1
+c01085f0:	ff 75 dc             	pushl  -0x24(%ebp)
+c01085f3:	e8 e0 b2 ff ff       	call   c01038d8 <free_pages>
+c01085f8:	83 c4 10             	add    $0x10,%esp
+    free_pages(p1, 3);
+c01085fb:	83 ec 08             	sub    $0x8,%esp
+c01085fe:	6a 03                	push   $0x3
+c0108600:	ff 75 c4             	pushl  -0x3c(%ebp)
+c0108603:	e8 d0 b2 ff ff       	call   c01038d8 <free_pages>
+c0108608:	83 c4 10             	add    $0x10,%esp
+    assert(PageProperty(p0) && p0->property == 1);
+c010860b:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010860e:	83 c0 04             	add    $0x4,%eax
+c0108611:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
+c0108618:	89 45 94             	mov    %eax,-0x6c(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c010861b:	8b 45 94             	mov    -0x6c(%ebp),%eax
+c010861e:	8b 55 c8             	mov    -0x38(%ebp),%edx
+c0108621:	0f a3 10             	bt     %edx,(%eax)
+c0108624:	19 c0                	sbb    %eax,%eax
+c0108626:	89 45 90             	mov    %eax,-0x70(%ebp)
+    return oldbit != 0;
+c0108629:	83 7d 90 00          	cmpl   $0x0,-0x70(%ebp)
+c010862d:	0f 95 c0             	setne  %al
+c0108630:	0f b6 c0             	movzbl %al,%eax
+c0108633:	85 c0                	test   %eax,%eax
+c0108635:	74 0b                	je     c0108642 <default_check+0x344>
+c0108637:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010863a:	8b 40 08             	mov    0x8(%eax),%eax
+c010863d:	83 f8 01             	cmp    $0x1,%eax
+c0108640:	74 19                	je     c010865b <default_check+0x35d>
+c0108642:	68 34 d7 10 c0       	push   $0xc010d734
+c0108647:	68 96 d4 10 c0       	push   $0xc010d496
+c010864c:	68 ef 00 00 00       	push   $0xef
+c0108651:	68 ab d4 10 c0       	push   $0xc010d4ab
+c0108656:	e8 99 7d ff ff       	call   c01003f4 <__panic>
+    assert(PageProperty(p1) && p1->property == 3);
+c010865b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c010865e:	83 c0 04             	add    $0x4,%eax
+c0108661:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+c0108668:	89 45 8c             	mov    %eax,-0x74(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c010866b:	8b 45 8c             	mov    -0x74(%ebp),%eax
+c010866e:	8b 55 bc             	mov    -0x44(%ebp),%edx
+c0108671:	0f a3 10             	bt     %edx,(%eax)
+c0108674:	19 c0                	sbb    %eax,%eax
+c0108676:	89 45 88             	mov    %eax,-0x78(%ebp)
+    return oldbit != 0;
+c0108679:	83 7d 88 00          	cmpl   $0x0,-0x78(%ebp)
+c010867d:	0f 95 c0             	setne  %al
+c0108680:	0f b6 c0             	movzbl %al,%eax
+c0108683:	85 c0                	test   %eax,%eax
+c0108685:	74 0b                	je     c0108692 <default_check+0x394>
+c0108687:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c010868a:	8b 40 08             	mov    0x8(%eax),%eax
+c010868d:	83 f8 03             	cmp    $0x3,%eax
+c0108690:	74 19                	je     c01086ab <default_check+0x3ad>
+c0108692:	68 5c d7 10 c0       	push   $0xc010d75c
+c0108697:	68 96 d4 10 c0       	push   $0xc010d496
+c010869c:	68 f0 00 00 00       	push   $0xf0
+c01086a1:	68 ab d4 10 c0       	push   $0xc010d4ab
+c01086a6:	e8 49 7d ff ff       	call   c01003f4 <__panic>
+
+    assert((p0 = alloc_page()) == p2 - 1);
+c01086ab:	83 ec 0c             	sub    $0xc,%esp
+c01086ae:	6a 01                	push   $0x1
+c01086b0:	e8 b7 b1 ff ff       	call   c010386c <alloc_pages>
+c01086b5:	83 c4 10             	add    $0x10,%esp
+c01086b8:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c01086bb:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c01086be:	83 e8 20             	sub    $0x20,%eax
+c01086c1:	39 45 dc             	cmp    %eax,-0x24(%ebp)
+c01086c4:	74 19                	je     c01086df <default_check+0x3e1>
+c01086c6:	68 82 d7 10 c0       	push   $0xc010d782
+c01086cb:	68 96 d4 10 c0       	push   $0xc010d496
+c01086d0:	68 f2 00 00 00       	push   $0xf2
+c01086d5:	68 ab d4 10 c0       	push   $0xc010d4ab
+c01086da:	e8 15 7d ff ff       	call   c01003f4 <__panic>
+    free_page(p0);
+c01086df:	83 ec 08             	sub    $0x8,%esp
+c01086e2:	6a 01                	push   $0x1
+c01086e4:	ff 75 dc             	pushl  -0x24(%ebp)
+c01086e7:	e8 ec b1 ff ff       	call   c01038d8 <free_pages>
+c01086ec:	83 c4 10             	add    $0x10,%esp
+    assert((p0 = alloc_pages(2)) == p2 + 1);
+c01086ef:	83 ec 0c             	sub    $0xc,%esp
+c01086f2:	6a 02                	push   $0x2
+c01086f4:	e8 73 b1 ff ff       	call   c010386c <alloc_pages>
+c01086f9:	83 c4 10             	add    $0x10,%esp
+c01086fc:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c01086ff:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c0108702:	83 c0 20             	add    $0x20,%eax
+c0108705:	39 45 dc             	cmp    %eax,-0x24(%ebp)
+c0108708:	74 19                	je     c0108723 <default_check+0x425>
+c010870a:	68 a0 d7 10 c0       	push   $0xc010d7a0
+c010870f:	68 96 d4 10 c0       	push   $0xc010d496
+c0108714:	68 f4 00 00 00       	push   $0xf4
+c0108719:	68 ab d4 10 c0       	push   $0xc010d4ab
+c010871e:	e8 d1 7c ff ff       	call   c01003f4 <__panic>
+
+    free_pages(p0, 2);
+c0108723:	83 ec 08             	sub    $0x8,%esp
+c0108726:	6a 02                	push   $0x2
+c0108728:	ff 75 dc             	pushl  -0x24(%ebp)
+c010872b:	e8 a8 b1 ff ff       	call   c01038d8 <free_pages>
+c0108730:	83 c4 10             	add    $0x10,%esp
+    free_page(p2);
+c0108733:	83 ec 08             	sub    $0x8,%esp
+c0108736:	6a 01                	push   $0x1
+c0108738:	ff 75 c0             	pushl  -0x40(%ebp)
+c010873b:	e8 98 b1 ff ff       	call   c01038d8 <free_pages>
+c0108740:	83 c4 10             	add    $0x10,%esp
+
+    assert((p0 = alloc_pages(5)) != NULL);
+c0108743:	83 ec 0c             	sub    $0xc,%esp
+c0108746:	6a 05                	push   $0x5
+c0108748:	e8 1f b1 ff ff       	call   c010386c <alloc_pages>
+c010874d:	83 c4 10             	add    $0x10,%esp
+c0108750:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c0108753:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c0108757:	75 19                	jne    c0108772 <default_check+0x474>
+c0108759:	68 c0 d7 10 c0       	push   $0xc010d7c0
+c010875e:	68 96 d4 10 c0       	push   $0xc010d496
+c0108763:	68 f9 00 00 00       	push   $0xf9
+c0108768:	68 ab d4 10 c0       	push   $0xc010d4ab
+c010876d:	e8 82 7c ff ff       	call   c01003f4 <__panic>
+    assert(alloc_page() == NULL);
+c0108772:	83 ec 0c             	sub    $0xc,%esp
+c0108775:	6a 01                	push   $0x1
+c0108777:	e8 f0 b0 ff ff       	call   c010386c <alloc_pages>
+c010877c:	83 c4 10             	add    $0x10,%esp
+c010877f:	85 c0                	test   %eax,%eax
+c0108781:	74 19                	je     c010879c <default_check+0x49e>
+c0108783:	68 1e d6 10 c0       	push   $0xc010d61e
+c0108788:	68 96 d4 10 c0       	push   $0xc010d496
+c010878d:	68 fa 00 00 00       	push   $0xfa
+c0108792:	68 ab d4 10 c0       	push   $0xc010d4ab
+c0108797:	e8 58 7c ff ff       	call   c01003f4 <__panic>
+
+    assert(nr_free == 0);
+c010879c:	a1 4c 0e 1b c0       	mov    0xc01b0e4c,%eax
+c01087a1:	85 c0                	test   %eax,%eax
+c01087a3:	74 19                	je     c01087be <default_check+0x4c0>
+c01087a5:	68 71 d6 10 c0       	push   $0xc010d671
+c01087aa:	68 96 d4 10 c0       	push   $0xc010d496
+c01087af:	68 fc 00 00 00       	push   $0xfc
+c01087b4:	68 ab d4 10 c0       	push   $0xc010d4ab
+c01087b9:	e8 36 7c ff ff       	call   c01003f4 <__panic>
+    nr_free = nr_free_store;
+c01087be:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c01087c1:	a3 4c 0e 1b c0       	mov    %eax,0xc01b0e4c
+
+    free_list = free_list_store;
+c01087c6:	8b 45 80             	mov    -0x80(%ebp),%eax
+c01087c9:	8b 55 84             	mov    -0x7c(%ebp),%edx
+c01087cc:	a3 44 0e 1b c0       	mov    %eax,0xc01b0e44
+c01087d1:	89 15 48 0e 1b c0    	mov    %edx,0xc01b0e48
+    free_pages(p0, 5);
+c01087d7:	83 ec 08             	sub    $0x8,%esp
+c01087da:	6a 05                	push   $0x5
+c01087dc:	ff 75 dc             	pushl  -0x24(%ebp)
+c01087df:	e8 f4 b0 ff ff       	call   c01038d8 <free_pages>
+c01087e4:	83 c4 10             	add    $0x10,%esp
+
+    le = &free_list;
+c01087e7:	c7 45 ec 44 0e 1b c0 	movl   $0xc01b0e44,-0x14(%ebp)
+    while ((le = list_next(le)) != &free_list) {
+c01087ee:	eb 1d                	jmp    c010880d <default_check+0x50f>
+        struct Page *p = le2page(le, page_link);
+c01087f0:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01087f3:	83 e8 0c             	sub    $0xc,%eax
+c01087f6:	89 45 b4             	mov    %eax,-0x4c(%ebp)
+        count --, total -= p->property;
+c01087f9:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+c01087fd:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0108800:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c0108803:	8b 40 08             	mov    0x8(%eax),%eax
+c0108806:	29 c2                	sub    %eax,%edx
+c0108808:	89 d0                	mov    %edx,%eax
+c010880a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010880d:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0108810:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c0108813:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c0108816:	8b 40 04             	mov    0x4(%eax),%eax
+
+    free_list = free_list_store;
+    free_pages(p0, 5);
+
+    le = &free_list;
+    while ((le = list_next(le)) != &free_list) {
+c0108819:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010881c:	81 7d ec 44 0e 1b c0 	cmpl   $0xc01b0e44,-0x14(%ebp)
+c0108823:	75 cb                	jne    c01087f0 <default_check+0x4f2>
+        struct Page *p = le2page(le, page_link);
+        count --, total -= p->property;
+    }
+    assert(count == 0);
+c0108825:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0108829:	74 19                	je     c0108844 <default_check+0x546>
+c010882b:	68 de d7 10 c0       	push   $0xc010d7de
+c0108830:	68 96 d4 10 c0       	push   $0xc010d496
+c0108835:	68 07 01 00 00       	push   $0x107
+c010883a:	68 ab d4 10 c0       	push   $0xc010d4ab
+c010883f:	e8 b0 7b ff ff       	call   c01003f4 <__panic>
+    assert(total == 0);
+c0108844:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0108848:	74 19                	je     c0108863 <default_check+0x565>
+c010884a:	68 e9 d7 10 c0       	push   $0xc010d7e9
+c010884f:	68 96 d4 10 c0       	push   $0xc010d496
+c0108854:	68 08 01 00 00       	push   $0x108
+c0108859:	68 ab d4 10 c0       	push   $0xc010d4ab
+c010885e:	e8 91 7b ff ff       	call   c01003f4 <__panic>
+}
+c0108863:	90                   	nop
+c0108864:	c9                   	leave  
+c0108865:	c3                   	ret    
+
+c0108866 <page2ppn>:
+
+extern struct Page *pages;
+extern size_t npage;
+
+static inline ppn_t
+page2ppn(struct Page *page) {
+c0108866:	55                   	push   %ebp
+c0108867:	89 e5                	mov    %esp,%ebp
+    return page - pages;
+c0108869:	8b 45 08             	mov    0x8(%ebp),%eax
+c010886c:	8b 15 64 0d 1b c0    	mov    0xc01b0d64,%edx
+c0108872:	29 d0                	sub    %edx,%eax
+c0108874:	c1 f8 05             	sar    $0x5,%eax
+}
+c0108877:	5d                   	pop    %ebp
+c0108878:	c3                   	ret    
+
+c0108879 <page2pa>:
+
+static inline uintptr_t
+page2pa(struct Page *page) {
+c0108879:	55                   	push   %ebp
+c010887a:	89 e5                	mov    %esp,%ebp
+    return page2ppn(page) << PGSHIFT;
+c010887c:	ff 75 08             	pushl  0x8(%ebp)
+c010887f:	e8 e2 ff ff ff       	call   c0108866 <page2ppn>
+c0108884:	83 c4 04             	add    $0x4,%esp
+c0108887:	c1 e0 0c             	shl    $0xc,%eax
+}
+c010888a:	c9                   	leave  
+c010888b:	c3                   	ret    
+
+c010888c <page2kva>:
+    }
+    return &pages[PPN(pa)];
+}
+
+static inline void *
+page2kva(struct Page *page) {
+c010888c:	55                   	push   %ebp
+c010888d:	89 e5                	mov    %esp,%ebp
+c010888f:	83 ec 18             	sub    $0x18,%esp
+    return KADDR(page2pa(page));
+c0108892:	ff 75 08             	pushl  0x8(%ebp)
+c0108895:	e8 df ff ff ff       	call   c0108879 <page2pa>
+c010889a:	83 c4 04             	add    $0x4,%esp
+c010889d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01088a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01088a3:	c1 e8 0c             	shr    $0xc,%eax
+c01088a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01088a9:	a1 60 ec 1a c0       	mov    0xc01aec60,%eax
+c01088ae:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c01088b1:	72 14                	jb     c01088c7 <page2kva+0x3b>
+c01088b3:	ff 75 f4             	pushl  -0xc(%ebp)
+c01088b6:	68 24 d8 10 c0       	push   $0xc010d824
+c01088bb:	6a 65                	push   $0x65
+c01088bd:	68 47 d8 10 c0       	push   $0xc010d847
+c01088c2:	e8 2d 7b ff ff       	call   c01003f4 <__panic>
+c01088c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01088ca:	2d 00 00 00 40       	sub    $0x40000000,%eax
+}
+c01088cf:	c9                   	leave  
+c01088d0:	c3                   	ret    
+
+c01088d1 <swapfs_init>:
+#include <ide.h>
+#include <pmm.h>
+#include <assert.h>
+
+void
+swapfs_init(void) {
+c01088d1:	55                   	push   %ebp
+c01088d2:	89 e5                	mov    %esp,%ebp
+c01088d4:	83 ec 08             	sub    $0x8,%esp
+    static_assert((PGSIZE % SECTSIZE) == 0);
+    if (!ide_device_valid(SWAP_DEV_NO)) {
+c01088d7:	83 ec 0c             	sub    $0xc,%esp
+c01088da:	6a 01                	push   $0x1
+c01088dc:	e8 cd 88 ff ff       	call   c01011ae <ide_device_valid>
+c01088e1:	83 c4 10             	add    $0x10,%esp
+c01088e4:	85 c0                	test   %eax,%eax
+c01088e6:	75 14                	jne    c01088fc <swapfs_init+0x2b>
+        panic("swap fs isn't available.\n");
+c01088e8:	83 ec 04             	sub    $0x4,%esp
+c01088eb:	68 55 d8 10 c0       	push   $0xc010d855
+c01088f0:	6a 0d                	push   $0xd
+c01088f2:	68 6f d8 10 c0       	push   $0xc010d86f
+c01088f7:	e8 f8 7a ff ff       	call   c01003f4 <__panic>
+    }
+    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
+c01088fc:	83 ec 0c             	sub    $0xc,%esp
+c01088ff:	6a 01                	push   $0x1
+c0108901:	e8 e8 88 ff ff       	call   c01011ee <ide_device_size>
+c0108906:	83 c4 10             	add    $0x10,%esp
+c0108909:	c1 e8 03             	shr    $0x3,%eax
+c010890c:	a3 1c 0e 1b c0       	mov    %eax,0xc01b0e1c
+}
+c0108911:	90                   	nop
+c0108912:	c9                   	leave  
+c0108913:	c3                   	ret    
+
+c0108914 <swapfs_read>:
+
+int
+swapfs_read(swap_entry_t entry, struct Page *page) {
+c0108914:	55                   	push   %ebp
+c0108915:	89 e5                	mov    %esp,%ebp
+c0108917:	83 ec 18             	sub    $0x18,%esp
+    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
+c010891a:	83 ec 0c             	sub    $0xc,%esp
+c010891d:	ff 75 0c             	pushl  0xc(%ebp)
+c0108920:	e8 67 ff ff ff       	call   c010888c <page2kva>
+c0108925:	83 c4 10             	add    $0x10,%esp
+c0108928:	89 c2                	mov    %eax,%edx
+c010892a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010892d:	c1 e8 08             	shr    $0x8,%eax
+c0108930:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0108933:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0108937:	74 0a                	je     c0108943 <swapfs_read+0x2f>
+c0108939:	a1 1c 0e 1b c0       	mov    0xc01b0e1c,%eax
+c010893e:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+c0108941:	72 14                	jb     c0108957 <swapfs_read+0x43>
+c0108943:	ff 75 08             	pushl  0x8(%ebp)
+c0108946:	68 80 d8 10 c0       	push   $0xc010d880
+c010894b:	6a 14                	push   $0x14
+c010894d:	68 6f d8 10 c0       	push   $0xc010d86f
+c0108952:	e8 9d 7a ff ff       	call   c01003f4 <__panic>
+c0108957:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010895a:	c1 e0 03             	shl    $0x3,%eax
+c010895d:	6a 08                	push   $0x8
+c010895f:	52                   	push   %edx
+c0108960:	50                   	push   %eax
+c0108961:	6a 01                	push   $0x1
+c0108963:	e8 c6 88 ff ff       	call   c010122e <ide_read_secs>
+c0108968:	83 c4 10             	add    $0x10,%esp
+}
+c010896b:	c9                   	leave  
+c010896c:	c3                   	ret    
+
+c010896d <swapfs_write>:
+
+int
+swapfs_write(swap_entry_t entry, struct Page *page) {
+c010896d:	55                   	push   %ebp
+c010896e:	89 e5                	mov    %esp,%ebp
+c0108970:	83 ec 18             	sub    $0x18,%esp
+    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
+c0108973:	83 ec 0c             	sub    $0xc,%esp
+c0108976:	ff 75 0c             	pushl  0xc(%ebp)
+c0108979:	e8 0e ff ff ff       	call   c010888c <page2kva>
+c010897e:	83 c4 10             	add    $0x10,%esp
+c0108981:	89 c2                	mov    %eax,%edx
+c0108983:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108986:	c1 e8 08             	shr    $0x8,%eax
+c0108989:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010898c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0108990:	74 0a                	je     c010899c <swapfs_write+0x2f>
+c0108992:	a1 1c 0e 1b c0       	mov    0xc01b0e1c,%eax
+c0108997:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+c010899a:	72 14                	jb     c01089b0 <swapfs_write+0x43>
+c010899c:	ff 75 08             	pushl  0x8(%ebp)
+c010899f:	68 80 d8 10 c0       	push   $0xc010d880
+c01089a4:	6a 19                	push   $0x19
+c01089a6:	68 6f d8 10 c0       	push   $0xc010d86f
+c01089ab:	e8 44 7a ff ff       	call   c01003f4 <__panic>
+c01089b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01089b3:	c1 e0 03             	shl    $0x3,%eax
+c01089b6:	6a 08                	push   $0x8
+c01089b8:	52                   	push   %edx
+c01089b9:	50                   	push   %eax
+c01089ba:	6a 01                	push   $0x1
+c01089bc:	e8 97 8a ff ff       	call   c0101458 <ide_write_secs>
+c01089c1:	83 c4 10             	add    $0x10,%esp
+}
+c01089c4:	c9                   	leave  
+c01089c5:	c3                   	ret    
+
+c01089c6 <kernel_thread_entry>:
+.text
+.globl kernel_thread_entry
+kernel_thread_entry:        # void kernel_thread(void)
+
+    pushl %edx              # push arg
+c01089c6:	52                   	push   %edx
+    call *%ebx              # call fn
+c01089c7:	ff d3                	call   *%ebx
+
+    pushl %eax              # save the return value of fn(arg)
+c01089c9:	50                   	push   %eax
+    call do_exit            # call do_exit to terminate current thread
+c01089ca:	e8 d7 0c 00 00       	call   c01096a6 <do_exit>
+
+c01089cf <switch_to>:
+.text
+.globl switch_to
+switch_to:                      # switch_to(from, to)
+
+    # save from's registers
+    movl 4(%esp), %eax          # eax points to from
+c01089cf:	8b 44 24 04          	mov    0x4(%esp),%eax
+    popl 0(%eax)                # save eip !popl
+c01089d3:	8f 00                	popl   (%eax)
+    movl %esp, 4(%eax)
+c01089d5:	89 60 04             	mov    %esp,0x4(%eax)
+    movl %ebx, 8(%eax)
+c01089d8:	89 58 08             	mov    %ebx,0x8(%eax)
+    movl %ecx, 12(%eax)
+c01089db:	89 48 0c             	mov    %ecx,0xc(%eax)
+    movl %edx, 16(%eax)
+c01089de:	89 50 10             	mov    %edx,0x10(%eax)
+    movl %esi, 20(%eax)
+c01089e1:	89 70 14             	mov    %esi,0x14(%eax)
+    movl %edi, 24(%eax)
+c01089e4:	89 78 18             	mov    %edi,0x18(%eax)
+    movl %ebp, 28(%eax)
+c01089e7:	89 68 1c             	mov    %ebp,0x1c(%eax)
+
+    # restore to's registers
+    movl 4(%esp), %eax          # not 8(%esp): popped return address already
+c01089ea:	8b 44 24 04          	mov    0x4(%esp),%eax
+                                # eax now points to to
+    movl 28(%eax), %ebp
+c01089ee:	8b 68 1c             	mov    0x1c(%eax),%ebp
+    movl 24(%eax), %edi
+c01089f1:	8b 78 18             	mov    0x18(%eax),%edi
+    movl 20(%eax), %esi
+c01089f4:	8b 70 14             	mov    0x14(%eax),%esi
+    movl 16(%eax), %edx
+c01089f7:	8b 50 10             	mov    0x10(%eax),%edx
+    movl 12(%eax), %ecx
+c01089fa:	8b 48 0c             	mov    0xc(%eax),%ecx
+    movl 8(%eax), %ebx
+c01089fd:	8b 58 08             	mov    0x8(%eax),%ebx
+    movl 4(%eax), %esp
+c0108a00:	8b 60 04             	mov    0x4(%eax),%esp
+
+    pushl 0(%eax)               # push eip
+c0108a03:	ff 30                	pushl  (%eax)
+
+    ret
+c0108a05:	c3                   	ret    
+
+c0108a06 <test_and_set_bit>:
+ * test_and_set_bit - Atomically set a bit and return its old value
+ * @nr:     the bit to set
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_and_set_bit(int nr, volatile void *addr) {
+c0108a06:	55                   	push   %ebp
+c0108a07:	89 e5                	mov    %esp,%ebp
+c0108a09:	83 ec 10             	sub    $0x10,%esp
+    int oldbit;
+    asm volatile ("btsl %2, %1; sbbl %0, %0" : "=r" (oldbit), "=m" (*(volatile long *)addr) : "Ir" (nr) : "memory");
+c0108a0c:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0108a0f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108a12:	0f ab 02             	bts    %eax,(%edx)
+c0108a15:	19 c0                	sbb    %eax,%eax
+c0108a17:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return oldbit != 0;
+c0108a1a:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+c0108a1e:	0f 95 c0             	setne  %al
+c0108a21:	0f b6 c0             	movzbl %al,%eax
+}
+c0108a24:	c9                   	leave  
+c0108a25:	c3                   	ret    
+
+c0108a26 <test_and_clear_bit>:
+ * test_and_clear_bit - Atomically clear a bit and return its old value
+ * @nr:     the bit to clear
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_and_clear_bit(int nr, volatile void *addr) {
+c0108a26:	55                   	push   %ebp
+c0108a27:	89 e5                	mov    %esp,%ebp
+c0108a29:	83 ec 10             	sub    $0x10,%esp
+    int oldbit;
+    asm volatile ("btrl %2, %1; sbbl %0, %0" : "=r" (oldbit), "=m" (*(volatile long *)addr) : "Ir" (nr) : "memory");
+c0108a2c:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0108a2f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108a32:	0f b3 02             	btr    %eax,(%edx)
+c0108a35:	19 c0                	sbb    %eax,%eax
+c0108a37:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return oldbit != 0;
+c0108a3a:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+c0108a3e:	0f 95 c0             	setne  %al
+c0108a41:	0f b6 c0             	movzbl %al,%eax
+}
+c0108a44:	c9                   	leave  
+c0108a45:	c3                   	ret    
+
+c0108a46 <__intr_save>:
+#include <assert.h>
+#include <atomic.h>
+#include <sched.h>
+
+static inline bool
+__intr_save(void) {
+c0108a46:	55                   	push   %ebp
+c0108a47:	89 e5                	mov    %esp,%ebp
+c0108a49:	83 ec 18             	sub    $0x18,%esp
+}
+
+static inline uint32_t
+read_eflags(void) {
+    uint32_t eflags;
+    asm volatile ("pushfl; popl %0" : "=r" (eflags));
+c0108a4c:	9c                   	pushf  
+c0108a4d:	58                   	pop    %eax
+c0108a4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return eflags;
+c0108a51:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    if (read_eflags() & FL_IF) {
+c0108a54:	25 00 02 00 00       	and    $0x200,%eax
+c0108a59:	85 c0                	test   %eax,%eax
+c0108a5b:	74 0c                	je     c0108a69 <__intr_save+0x23>
+        intr_disable();
+c0108a5d:	e8 2f 97 ff ff       	call   c0102191 <intr_disable>
+        return 1;
+c0108a62:	b8 01 00 00 00       	mov    $0x1,%eax
+c0108a67:	eb 05                	jmp    c0108a6e <__intr_save+0x28>
+    }
+    return 0;
+c0108a69:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0108a6e:	c9                   	leave  
+c0108a6f:	c3                   	ret    
+
+c0108a70 <__intr_restore>:
+
+static inline void
+__intr_restore(bool flag) {
+c0108a70:	55                   	push   %ebp
+c0108a71:	89 e5                	mov    %esp,%ebp
+c0108a73:	83 ec 08             	sub    $0x8,%esp
+    if (flag) {
+c0108a76:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0108a7a:	74 05                	je     c0108a81 <__intr_restore+0x11>
+        intr_enable();
+c0108a7c:	e8 09 97 ff ff       	call   c010218a <intr_enable>
+    }
+}
+c0108a81:	90                   	nop
+c0108a82:	c9                   	leave  
+c0108a83:	c3                   	ret    
+
+c0108a84 <try_lock>:
+lock_init(lock_t *lock) {
+    *lock = 0;
+}
+
+static inline bool
+try_lock(lock_t *lock) {
+c0108a84:	55                   	push   %ebp
+c0108a85:	89 e5                	mov    %esp,%ebp
+    return !test_and_set_bit(0, lock);
+c0108a87:	ff 75 08             	pushl  0x8(%ebp)
+c0108a8a:	6a 00                	push   $0x0
+c0108a8c:	e8 75 ff ff ff       	call   c0108a06 <test_and_set_bit>
+c0108a91:	83 c4 08             	add    $0x8,%esp
+c0108a94:	85 c0                	test   %eax,%eax
+c0108a96:	0f 94 c0             	sete   %al
+c0108a99:	0f b6 c0             	movzbl %al,%eax
+}
+c0108a9c:	c9                   	leave  
+c0108a9d:	c3                   	ret    
+
+c0108a9e <lock>:
+
+static inline void
+lock(lock_t *lock) {
+c0108a9e:	55                   	push   %ebp
+c0108a9f:	89 e5                	mov    %esp,%ebp
+c0108aa1:	83 ec 08             	sub    $0x8,%esp
+    while (!try_lock(lock)) {
+c0108aa4:	eb 05                	jmp    c0108aab <lock+0xd>
+        schedule();
+c0108aa6:	e8 7f 1c 00 00       	call   c010a72a <schedule>
+    return !test_and_set_bit(0, lock);
+}
+
+static inline void
+lock(lock_t *lock) {
+    while (!try_lock(lock)) {
+c0108aab:	83 ec 0c             	sub    $0xc,%esp
+c0108aae:	ff 75 08             	pushl  0x8(%ebp)
+c0108ab1:	e8 ce ff ff ff       	call   c0108a84 <try_lock>
+c0108ab6:	83 c4 10             	add    $0x10,%esp
+c0108ab9:	85 c0                	test   %eax,%eax
+c0108abb:	74 e9                	je     c0108aa6 <lock+0x8>
+        schedule();
+    }
+}
+c0108abd:	90                   	nop
+c0108abe:	c9                   	leave  
+c0108abf:	c3                   	ret    
+
+c0108ac0 <unlock>:
+
+static inline void
+unlock(lock_t *lock) {
+c0108ac0:	55                   	push   %ebp
+c0108ac1:	89 e5                	mov    %esp,%ebp
+c0108ac3:	83 ec 08             	sub    $0x8,%esp
+    if (!test_and_clear_bit(0, lock)) {
+c0108ac6:	ff 75 08             	pushl  0x8(%ebp)
+c0108ac9:	6a 00                	push   $0x0
+c0108acb:	e8 56 ff ff ff       	call   c0108a26 <test_and_clear_bit>
+c0108ad0:	83 c4 08             	add    $0x8,%esp
+c0108ad3:	85 c0                	test   %eax,%eax
+c0108ad5:	75 14                	jne    c0108aeb <unlock+0x2b>
+        panic("Unlock failed.\n");
+c0108ad7:	83 ec 04             	sub    $0x4,%esp
+c0108ada:	68 a0 d8 10 c0       	push   $0xc010d8a0
+c0108adf:	6a 34                	push   $0x34
+c0108ae1:	68 b0 d8 10 c0       	push   $0xc010d8b0
+c0108ae6:	e8 09 79 ff ff       	call   c01003f4 <__panic>
+    }
+}
+c0108aeb:	90                   	nop
+c0108aec:	c9                   	leave  
+c0108aed:	c3                   	ret    
+
+c0108aee <page2ppn>:
+
+extern struct Page *pages;
+extern size_t npage;
+
+static inline ppn_t
+page2ppn(struct Page *page) {
+c0108aee:	55                   	push   %ebp
+c0108aef:	89 e5                	mov    %esp,%ebp
+    return page - pages;
+c0108af1:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108af4:	8b 15 64 0d 1b c0    	mov    0xc01b0d64,%edx
+c0108afa:	29 d0                	sub    %edx,%eax
+c0108afc:	c1 f8 05             	sar    $0x5,%eax
+}
+c0108aff:	5d                   	pop    %ebp
+c0108b00:	c3                   	ret    
+
+c0108b01 <page2pa>:
+
+static inline uintptr_t
+page2pa(struct Page *page) {
+c0108b01:	55                   	push   %ebp
+c0108b02:	89 e5                	mov    %esp,%ebp
+    return page2ppn(page) << PGSHIFT;
+c0108b04:	ff 75 08             	pushl  0x8(%ebp)
+c0108b07:	e8 e2 ff ff ff       	call   c0108aee <page2ppn>
+c0108b0c:	83 c4 04             	add    $0x4,%esp
+c0108b0f:	c1 e0 0c             	shl    $0xc,%eax
+}
+c0108b12:	c9                   	leave  
+c0108b13:	c3                   	ret    
+
+c0108b14 <pa2page>:
+
+static inline struct Page *
+pa2page(uintptr_t pa) {
+c0108b14:	55                   	push   %ebp
+c0108b15:	89 e5                	mov    %esp,%ebp
+c0108b17:	83 ec 08             	sub    $0x8,%esp
+    if (PPN(pa) >= npage) {
+c0108b1a:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108b1d:	c1 e8 0c             	shr    $0xc,%eax
+c0108b20:	89 c2                	mov    %eax,%edx
+c0108b22:	a1 60 ec 1a c0       	mov    0xc01aec60,%eax
+c0108b27:	39 c2                	cmp    %eax,%edx
+c0108b29:	72 14                	jb     c0108b3f <pa2page+0x2b>
+        panic("pa2page called with invalid pa");
+c0108b2b:	83 ec 04             	sub    $0x4,%esp
+c0108b2e:	68 c4 d8 10 c0       	push   $0xc010d8c4
+c0108b33:	6a 5e                	push   $0x5e
+c0108b35:	68 e3 d8 10 c0       	push   $0xc010d8e3
+c0108b3a:	e8 b5 78 ff ff       	call   c01003f4 <__panic>
+    }
+    return &pages[PPN(pa)];
+c0108b3f:	a1 64 0d 1b c0       	mov    0xc01b0d64,%eax
+c0108b44:	8b 55 08             	mov    0x8(%ebp),%edx
+c0108b47:	c1 ea 0c             	shr    $0xc,%edx
+c0108b4a:	c1 e2 05             	shl    $0x5,%edx
+c0108b4d:	01 d0                	add    %edx,%eax
+}
+c0108b4f:	c9                   	leave  
+c0108b50:	c3                   	ret    
+
+c0108b51 <page2kva>:
+
+static inline void *
+page2kva(struct Page *page) {
+c0108b51:	55                   	push   %ebp
+c0108b52:	89 e5                	mov    %esp,%ebp
+c0108b54:	83 ec 18             	sub    $0x18,%esp
+    return KADDR(page2pa(page));
+c0108b57:	ff 75 08             	pushl  0x8(%ebp)
+c0108b5a:	e8 a2 ff ff ff       	call   c0108b01 <page2pa>
+c0108b5f:	83 c4 04             	add    $0x4,%esp
+c0108b62:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0108b65:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108b68:	c1 e8 0c             	shr    $0xc,%eax
+c0108b6b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0108b6e:	a1 60 ec 1a c0       	mov    0xc01aec60,%eax
+c0108b73:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c0108b76:	72 14                	jb     c0108b8c <page2kva+0x3b>
+c0108b78:	ff 75 f4             	pushl  -0xc(%ebp)
+c0108b7b:	68 f4 d8 10 c0       	push   $0xc010d8f4
+c0108b80:	6a 65                	push   $0x65
+c0108b82:	68 e3 d8 10 c0       	push   $0xc010d8e3
+c0108b87:	e8 68 78 ff ff       	call   c01003f4 <__panic>
+c0108b8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108b8f:	2d 00 00 00 40       	sub    $0x40000000,%eax
+}
+c0108b94:	c9                   	leave  
+c0108b95:	c3                   	ret    
+
+c0108b96 <kva2page>:
+
+static inline struct Page *
+kva2page(void *kva) {
+c0108b96:	55                   	push   %ebp
+c0108b97:	89 e5                	mov    %esp,%ebp
+c0108b99:	83 ec 18             	sub    $0x18,%esp
+    return pa2page(PADDR(kva));
+c0108b9c:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108b9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0108ba2:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
+c0108ba9:	77 14                	ja     c0108bbf <kva2page+0x29>
+c0108bab:	ff 75 f4             	pushl  -0xc(%ebp)
+c0108bae:	68 18 d9 10 c0       	push   $0xc010d918
+c0108bb3:	6a 6a                	push   $0x6a
+c0108bb5:	68 e3 d8 10 c0       	push   $0xc010d8e3
+c0108bba:	e8 35 78 ff ff       	call   c01003f4 <__panic>
+c0108bbf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108bc2:	05 00 00 00 40       	add    $0x40000000,%eax
+c0108bc7:	83 ec 0c             	sub    $0xc,%esp
+c0108bca:	50                   	push   %eax
+c0108bcb:	e8 44 ff ff ff       	call   c0108b14 <pa2page>
+c0108bd0:	83 c4 10             	add    $0x10,%esp
+}
+c0108bd3:	c9                   	leave  
+c0108bd4:	c3                   	ret    
+
+c0108bd5 <mm_count_inc>:
+
+static inline int
+mm_count_inc(struct mm_struct *mm) {
+c0108bd5:	55                   	push   %ebp
+c0108bd6:	89 e5                	mov    %esp,%ebp
+    mm->mm_count += 1;
+c0108bd8:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108bdb:	8b 40 18             	mov    0x18(%eax),%eax
+c0108bde:	8d 50 01             	lea    0x1(%eax),%edx
+c0108be1:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108be4:	89 50 18             	mov    %edx,0x18(%eax)
+    return mm->mm_count;
+c0108be7:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108bea:	8b 40 18             	mov    0x18(%eax),%eax
+}
+c0108bed:	5d                   	pop    %ebp
+c0108bee:	c3                   	ret    
+
+c0108bef <mm_count_dec>:
+
+static inline int
+mm_count_dec(struct mm_struct *mm) {
+c0108bef:	55                   	push   %ebp
+c0108bf0:	89 e5                	mov    %esp,%ebp
+    mm->mm_count -= 1;
+c0108bf2:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108bf5:	8b 40 18             	mov    0x18(%eax),%eax
+c0108bf8:	8d 50 ff             	lea    -0x1(%eax),%edx
+c0108bfb:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108bfe:	89 50 18             	mov    %edx,0x18(%eax)
+    return mm->mm_count;
+c0108c01:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108c04:	8b 40 18             	mov    0x18(%eax),%eax
+}
+c0108c07:	5d                   	pop    %ebp
+c0108c08:	c3                   	ret    
+
+c0108c09 <lock_mm>:
+
+static inline void
+lock_mm(struct mm_struct *mm) {
+c0108c09:	55                   	push   %ebp
+c0108c0a:	89 e5                	mov    %esp,%ebp
+c0108c0c:	83 ec 08             	sub    $0x8,%esp
+    if (mm != NULL) {
+c0108c0f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0108c13:	74 12                	je     c0108c27 <lock_mm+0x1e>
+        lock(&(mm->mm_lock));
+c0108c15:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108c18:	83 c0 1c             	add    $0x1c,%eax
+c0108c1b:	83 ec 0c             	sub    $0xc,%esp
+c0108c1e:	50                   	push   %eax
+c0108c1f:	e8 7a fe ff ff       	call   c0108a9e <lock>
+c0108c24:	83 c4 10             	add    $0x10,%esp
+    }
+}
+c0108c27:	90                   	nop
+c0108c28:	c9                   	leave  
+c0108c29:	c3                   	ret    
+
+c0108c2a <unlock_mm>:
+
+static inline void
+unlock_mm(struct mm_struct *mm) {
+c0108c2a:	55                   	push   %ebp
+c0108c2b:	89 e5                	mov    %esp,%ebp
+c0108c2d:	83 ec 08             	sub    $0x8,%esp
+    if (mm != NULL) {
+c0108c30:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0108c34:	74 12                	je     c0108c48 <unlock_mm+0x1e>
+        unlock(&(mm->mm_lock));
+c0108c36:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108c39:	83 c0 1c             	add    $0x1c,%eax
+c0108c3c:	83 ec 0c             	sub    $0xc,%esp
+c0108c3f:	50                   	push   %eax
+c0108c40:	e8 7b fe ff ff       	call   c0108ac0 <unlock>
+c0108c45:	83 c4 10             	add    $0x10,%esp
+    }
+}
+c0108c48:	90                   	nop
+c0108c49:	c9                   	leave  
+c0108c4a:	c3                   	ret    
+
+c0108c4b <alloc_proc>:
+void forkrets(struct trapframe *tf);
+void switch_to(struct context *from, struct context *to);
+
+// alloc_proc - alloc a proc_struct and init all fields of proc_struct
+static struct proc_struct *
+alloc_proc(void) {
+c0108c4b:	55                   	push   %ebp
+c0108c4c:	89 e5                	mov    %esp,%ebp
+c0108c4e:	83 ec 38             	sub    $0x38,%esp
+	struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
+c0108c51:	83 ec 0c             	sub    $0xc,%esp
+c0108c54:	68 a0 00 00 00       	push   $0xa0
+c0108c59:	e8 18 e0 ff ff       	call   c0106c76 <kmalloc>
+c0108c5e:	83 c4 10             	add    $0x10,%esp
+c0108c61:	89 45 f4             	mov    %eax,-0xc(%ebp)
+	if (proc != NULL) {
+c0108c64:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0108c68:	0f 84 71 01 00 00    	je     c0108ddf <alloc_proc+0x194>
+		 *     int time_slice;                             // time slice for occupying the CPU
+		 *     skew_heap_entry_t lab6_run_pool;            // FOR LAB6 ONLY: the entry in the run pool
+		 *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process
+		 *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)
+		 */
+		proc->state = PROC_UNINIT;
+c0108c6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108c71:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+		proc->pid = -1;
+c0108c77:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108c7a:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
+		proc->runs = 0;
+c0108c81:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108c84:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+		proc->kstack = 0;
+c0108c8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108c8e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
+		proc->need_resched = 0;
+c0108c95:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108c98:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
+		proc->parent = NULL;
+c0108c9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108ca2:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
+		proc->mm = NULL;
+c0108ca9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108cac:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
+		struct context nullContext;
+		memset(&nullContext, 0, sizeof(struct context));
+c0108cb3:	83 ec 04             	sub    $0x4,%esp
+c0108cb6:	6a 20                	push   $0x20
+c0108cb8:	6a 00                	push   $0x0
+c0108cba:	8d 45 d0             	lea    -0x30(%ebp),%eax
+c0108cbd:	50                   	push   %eax
+c0108cbe:	e8 a6 23 00 00       	call   c010b069 <memset>
+c0108cc3:	83 c4 10             	add    $0x10,%esp
+		proc->context = nullContext;
+c0108cc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108cc9:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c0108ccc:	89 50 1c             	mov    %edx,0x1c(%eax)
+c0108ccf:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0108cd2:	89 50 20             	mov    %edx,0x20(%eax)
+c0108cd5:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c0108cd8:	89 50 24             	mov    %edx,0x24(%eax)
+c0108cdb:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0108cde:	89 50 28             	mov    %edx,0x28(%eax)
+c0108ce1:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0108ce4:	89 50 2c             	mov    %edx,0x2c(%eax)
+c0108ce7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0108cea:	89 50 30             	mov    %edx,0x30(%eax)
+c0108ced:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c0108cf0:	89 50 34             	mov    %edx,0x34(%eax)
+c0108cf3:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0108cf6:	89 50 38             	mov    %edx,0x38(%eax)
+		proc->tf = NULL;
+c0108cf9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108cfc:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
+		proc->cr3 = boot_cr3;
+c0108d03:	8b 15 60 0d 1b c0    	mov    0xc01b0d60,%edx
+c0108d09:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108d0c:	89 50 40             	mov    %edx,0x40(%eax)
+		proc->flags = 0;
+c0108d0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108d12:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
+		memset(proc->name, 0, sizeof(proc->name));
+c0108d19:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108d1c:	83 c0 48             	add    $0x48,%eax
+c0108d1f:	83 ec 04             	sub    $0x4,%esp
+c0108d22:	6a 10                	push   $0x10
+c0108d24:	6a 00                	push   $0x0
+c0108d26:	50                   	push   %eax
+c0108d27:	e8 3d 23 00 00       	call   c010b069 <memset>
+c0108d2c:	83 c4 10             	add    $0x10,%esp
+
+		proc->wait_state = 0;
+c0108d2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108d32:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
+		proc->cptr = proc->optr = proc->yptr = NULL;
+c0108d39:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108d3c:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
+c0108d43:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108d46:	8b 50 74             	mov    0x74(%eax),%edx
+c0108d49:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108d4c:	89 50 78             	mov    %edx,0x78(%eax)
+c0108d4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108d52:	8b 50 78             	mov    0x78(%eax),%edx
+c0108d55:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108d58:	89 50 70             	mov    %edx,0x70(%eax)
+
+		proc->rq = NULL;
+c0108d5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108d5e:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%eax)
+		list_init(&(proc->run_link));
+c0108d65:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108d68:	83 e8 80             	sub    $0xffffff80,%eax
+c0108d6b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c0108d6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0108d71:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0108d74:	89 50 04             	mov    %edx,0x4(%eax)
+c0108d77:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0108d7a:	8b 50 04             	mov    0x4(%eax),%edx
+c0108d7d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0108d80:	89 10                	mov    %edx,(%eax)
+		proc->time_slice = 0;
+c0108d82:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108d85:	c7 80 88 00 00 00 00 	movl   $0x0,0x88(%eax)
+c0108d8c:	00 00 00 
+		proc->lab6_run_pool.left = proc->lab6_run_pool.right = proc->lab6_run_pool.parent = NULL;
+c0108d8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108d92:	c7 80 8c 00 00 00 00 	movl   $0x0,0x8c(%eax)
+c0108d99:	00 00 00 
+c0108d9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108d9f:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
+c0108da5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108da8:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
+c0108dae:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108db1:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
+c0108db7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108dba:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
+		proc->lab6_priority = proc->lab6_stride = 0;
+c0108dc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108dc3:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
+c0108dca:	00 00 00 
+c0108dcd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108dd0:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
+c0108dd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108dd9:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
+	}
+	return proc;
+c0108ddf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0108de2:	c9                   	leave  
+c0108de3:	c3                   	ret    
+
+c0108de4 <set_proc_name>:
+
+// set_proc_name - set the name of proc
+char *
+set_proc_name(struct proc_struct *proc, const char *name) {
+c0108de4:	55                   	push   %ebp
+c0108de5:	89 e5                	mov    %esp,%ebp
+c0108de7:	83 ec 08             	sub    $0x8,%esp
+    memset(proc->name, 0, sizeof(proc->name));
+c0108dea:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108ded:	83 c0 48             	add    $0x48,%eax
+c0108df0:	83 ec 04             	sub    $0x4,%esp
+c0108df3:	6a 10                	push   $0x10
+c0108df5:	6a 00                	push   $0x0
+c0108df7:	50                   	push   %eax
+c0108df8:	e8 6c 22 00 00       	call   c010b069 <memset>
+c0108dfd:	83 c4 10             	add    $0x10,%esp
+    return memcpy(proc->name, name, PROC_NAME_LEN);
+c0108e00:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108e03:	83 c0 48             	add    $0x48,%eax
+c0108e06:	83 ec 04             	sub    $0x4,%esp
+c0108e09:	6a 0f                	push   $0xf
+c0108e0b:	ff 75 0c             	pushl  0xc(%ebp)
+c0108e0e:	50                   	push   %eax
+c0108e0f:	e8 38 23 00 00       	call   c010b14c <memcpy>
+c0108e14:	83 c4 10             	add    $0x10,%esp
+}
+c0108e17:	c9                   	leave  
+c0108e18:	c3                   	ret    
+
+c0108e19 <get_proc_name>:
+
+// get_proc_name - get the name of proc
+char *
+get_proc_name(struct proc_struct *proc) {
+c0108e19:	55                   	push   %ebp
+c0108e1a:	89 e5                	mov    %esp,%ebp
+c0108e1c:	83 ec 08             	sub    $0x8,%esp
+    static char name[PROC_NAME_LEN + 1];
+    memset(name, 0, sizeof(name));
+c0108e1f:	83 ec 04             	sub    $0x4,%esp
+c0108e22:	6a 10                	push   $0x10
+c0108e24:	6a 00                	push   $0x0
+c0108e26:	68 24 0d 1b c0       	push   $0xc01b0d24
+c0108e2b:	e8 39 22 00 00       	call   c010b069 <memset>
+c0108e30:	83 c4 10             	add    $0x10,%esp
+    return memcpy(name, proc->name, PROC_NAME_LEN);
+c0108e33:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108e36:	83 c0 48             	add    $0x48,%eax
+c0108e39:	83 ec 04             	sub    $0x4,%esp
+c0108e3c:	6a 0f                	push   $0xf
+c0108e3e:	50                   	push   %eax
+c0108e3f:	68 24 0d 1b c0       	push   $0xc01b0d24
+c0108e44:	e8 03 23 00 00       	call   c010b14c <memcpy>
+c0108e49:	83 c4 10             	add    $0x10,%esp
+}
+c0108e4c:	c9                   	leave  
+c0108e4d:	c3                   	ret    
+
+c0108e4e <set_links>:
+
+// set_links - set the relation links of process
+static void
+set_links(struct proc_struct *proc) {
+c0108e4e:	55                   	push   %ebp
+c0108e4f:	89 e5                	mov    %esp,%ebp
+c0108e51:	83 ec 20             	sub    $0x20,%esp
+    list_add(&proc_list, &(proc->list_link));
+c0108e54:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108e57:	83 c0 58             	add    $0x58,%eax
+c0108e5a:	c7 45 fc 50 0e 1b c0 	movl   $0xc01b0e50,-0x4(%ebp)
+c0108e61:	89 45 f8             	mov    %eax,-0x8(%ebp)
+c0108e64:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0108e67:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0108e6a:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c0108e6d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ * Insert the new element @elm *after* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_after(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm, listelm->next);
+c0108e70:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108e73:	8b 40 04             	mov    0x4(%eax),%eax
+c0108e76:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0108e79:	89 55 ec             	mov    %edx,-0x14(%ebp)
+c0108e7c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0108e7f:	89 55 e8             	mov    %edx,-0x18(%ebp)
+c0108e82:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c0108e85:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0108e88:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0108e8b:	89 10                	mov    %edx,(%eax)
+c0108e8d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0108e90:	8b 10                	mov    (%eax),%edx
+c0108e92:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108e95:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c0108e98:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0108e9b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0108e9e:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c0108ea1:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0108ea4:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c0108ea7:	89 10                	mov    %edx,(%eax)
+    proc->yptr = NULL;
+c0108ea9:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108eac:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
+    if ((proc->optr = proc->parent->cptr) != NULL) {
+c0108eb3:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108eb6:	8b 40 14             	mov    0x14(%eax),%eax
+c0108eb9:	8b 50 70             	mov    0x70(%eax),%edx
+c0108ebc:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108ebf:	89 50 78             	mov    %edx,0x78(%eax)
+c0108ec2:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108ec5:	8b 40 78             	mov    0x78(%eax),%eax
+c0108ec8:	85 c0                	test   %eax,%eax
+c0108eca:	74 0c                	je     c0108ed8 <set_links+0x8a>
+        proc->optr->yptr = proc;
+c0108ecc:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108ecf:	8b 40 78             	mov    0x78(%eax),%eax
+c0108ed2:	8b 55 08             	mov    0x8(%ebp),%edx
+c0108ed5:	89 50 74             	mov    %edx,0x74(%eax)
+    }
+    proc->parent->cptr = proc;
+c0108ed8:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108edb:	8b 40 14             	mov    0x14(%eax),%eax
+c0108ede:	8b 55 08             	mov    0x8(%ebp),%edx
+c0108ee1:	89 50 70             	mov    %edx,0x70(%eax)
+    nr_process ++;
+c0108ee4:	a1 20 0d 1b c0       	mov    0xc01b0d20,%eax
+c0108ee9:	83 c0 01             	add    $0x1,%eax
+c0108eec:	a3 20 0d 1b c0       	mov    %eax,0xc01b0d20
+}
+c0108ef1:	90                   	nop
+c0108ef2:	c9                   	leave  
+c0108ef3:	c3                   	ret    
+
+c0108ef4 <remove_links>:
+
+// remove_links - clean the relation links of process
+static void
+remove_links(struct proc_struct *proc) {
+c0108ef4:	55                   	push   %ebp
+c0108ef5:	89 e5                	mov    %esp,%ebp
+c0108ef7:	83 ec 10             	sub    $0x10,%esp
+    list_del(&(proc->list_link));
+c0108efa:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108efd:	83 c0 58             	add    $0x58,%eax
+c0108f00:	89 45 fc             	mov    %eax,-0x4(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c0108f03:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0108f06:	8b 40 04             	mov    0x4(%eax),%eax
+c0108f09:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c0108f0c:	8b 12                	mov    (%edx),%edx
+c0108f0e:	89 55 f8             	mov    %edx,-0x8(%ebp)
+c0108f11:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c0108f14:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c0108f17:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0108f1a:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c0108f1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108f20:	8b 55 f8             	mov    -0x8(%ebp),%edx
+c0108f23:	89 10                	mov    %edx,(%eax)
+    if (proc->optr != NULL) {
+c0108f25:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108f28:	8b 40 78             	mov    0x78(%eax),%eax
+c0108f2b:	85 c0                	test   %eax,%eax
+c0108f2d:	74 0f                	je     c0108f3e <remove_links+0x4a>
+        proc->optr->yptr = proc->yptr;
+c0108f2f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108f32:	8b 40 78             	mov    0x78(%eax),%eax
+c0108f35:	8b 55 08             	mov    0x8(%ebp),%edx
+c0108f38:	8b 52 74             	mov    0x74(%edx),%edx
+c0108f3b:	89 50 74             	mov    %edx,0x74(%eax)
+    }
+    if (proc->yptr != NULL) {
+c0108f3e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108f41:	8b 40 74             	mov    0x74(%eax),%eax
+c0108f44:	85 c0                	test   %eax,%eax
+c0108f46:	74 11                	je     c0108f59 <remove_links+0x65>
+        proc->yptr->optr = proc->optr;
+c0108f48:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108f4b:	8b 40 74             	mov    0x74(%eax),%eax
+c0108f4e:	8b 55 08             	mov    0x8(%ebp),%edx
+c0108f51:	8b 52 78             	mov    0x78(%edx),%edx
+c0108f54:	89 50 78             	mov    %edx,0x78(%eax)
+c0108f57:	eb 0f                	jmp    c0108f68 <remove_links+0x74>
+    }
+    else {
+       proc->parent->cptr = proc->optr;
+c0108f59:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108f5c:	8b 40 14             	mov    0x14(%eax),%eax
+c0108f5f:	8b 55 08             	mov    0x8(%ebp),%edx
+c0108f62:	8b 52 78             	mov    0x78(%edx),%edx
+c0108f65:	89 50 70             	mov    %edx,0x70(%eax)
+    }
+    nr_process --;
+c0108f68:	a1 20 0d 1b c0       	mov    0xc01b0d20,%eax
+c0108f6d:	83 e8 01             	sub    $0x1,%eax
+c0108f70:	a3 20 0d 1b c0       	mov    %eax,0xc01b0d20
+}
+c0108f75:	90                   	nop
+c0108f76:	c9                   	leave  
+c0108f77:	c3                   	ret    
+
+c0108f78 <get_pid>:
+
+// get_pid - alloc a unique pid for process
+static int
+get_pid(void) {
+c0108f78:	55                   	push   %ebp
+c0108f79:	89 e5                	mov    %esp,%ebp
+c0108f7b:	83 ec 10             	sub    $0x10,%esp
+    static_assert(MAX_PID > MAX_PROCESS);
+    struct proc_struct *proc;
+    list_entry_t *list = &proc_list, *le;
+c0108f7e:	c7 45 f8 50 0e 1b c0 	movl   $0xc01b0e50,-0x8(%ebp)
+    static int next_safe = MAX_PID, last_pid = MAX_PID;
+    if (++ last_pid >= MAX_PID) {
+c0108f85:	a1 6c ca 12 c0       	mov    0xc012ca6c,%eax
+c0108f8a:	83 c0 01             	add    $0x1,%eax
+c0108f8d:	a3 6c ca 12 c0       	mov    %eax,0xc012ca6c
+c0108f92:	a1 6c ca 12 c0       	mov    0xc012ca6c,%eax
+c0108f97:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
+c0108f9c:	7e 0c                	jle    c0108faa <get_pid+0x32>
+        last_pid = 1;
+c0108f9e:	c7 05 6c ca 12 c0 01 	movl   $0x1,0xc012ca6c
+c0108fa5:	00 00 00 
+        goto inside;
+c0108fa8:	eb 13                	jmp    c0108fbd <get_pid+0x45>
+    }
+    if (last_pid >= next_safe) {
+c0108faa:	8b 15 6c ca 12 c0    	mov    0xc012ca6c,%edx
+c0108fb0:	a1 70 ca 12 c0       	mov    0xc012ca70,%eax
+c0108fb5:	39 c2                	cmp    %eax,%edx
+c0108fb7:	0f 8c ac 00 00 00    	jl     c0109069 <get_pid+0xf1>
+    inside:
+        next_safe = MAX_PID;
+c0108fbd:	c7 05 70 ca 12 c0 00 	movl   $0x2000,0xc012ca70
+c0108fc4:	20 00 00 
+    repeat:
+        le = list;
+c0108fc7:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c0108fca:	89 45 fc             	mov    %eax,-0x4(%ebp)
+        while ((le = list_next(le)) != list) {
+c0108fcd:	eb 7f                	jmp    c010904e <get_pid+0xd6>
+            proc = le2proc(le, list_link);
+c0108fcf:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0108fd2:	83 e8 58             	sub    $0x58,%eax
+c0108fd5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+            if (proc->pid == last_pid) {
+c0108fd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108fdb:	8b 50 04             	mov    0x4(%eax),%edx
+c0108fde:	a1 6c ca 12 c0       	mov    0xc012ca6c,%eax
+c0108fe3:	39 c2                	cmp    %eax,%edx
+c0108fe5:	75 3e                	jne    c0109025 <get_pid+0xad>
+                if (++ last_pid >= next_safe) {
+c0108fe7:	a1 6c ca 12 c0       	mov    0xc012ca6c,%eax
+c0108fec:	83 c0 01             	add    $0x1,%eax
+c0108fef:	a3 6c ca 12 c0       	mov    %eax,0xc012ca6c
+c0108ff4:	8b 15 6c ca 12 c0    	mov    0xc012ca6c,%edx
+c0108ffa:	a1 70 ca 12 c0       	mov    0xc012ca70,%eax
+c0108fff:	39 c2                	cmp    %eax,%edx
+c0109001:	7c 4b                	jl     c010904e <get_pid+0xd6>
+                    if (last_pid >= MAX_PID) {
+c0109003:	a1 6c ca 12 c0       	mov    0xc012ca6c,%eax
+c0109008:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
+c010900d:	7e 0a                	jle    c0109019 <get_pid+0xa1>
+                        last_pid = 1;
+c010900f:	c7 05 6c ca 12 c0 01 	movl   $0x1,0xc012ca6c
+c0109016:	00 00 00 
+                    }
+                    next_safe = MAX_PID;
+c0109019:	c7 05 70 ca 12 c0 00 	movl   $0x2000,0xc012ca70
+c0109020:	20 00 00 
+                    goto repeat;
+c0109023:	eb a2                	jmp    c0108fc7 <get_pid+0x4f>
+                }
+            }
+            else if (proc->pid > last_pid && next_safe > proc->pid) {
+c0109025:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109028:	8b 50 04             	mov    0x4(%eax),%edx
+c010902b:	a1 6c ca 12 c0       	mov    0xc012ca6c,%eax
+c0109030:	39 c2                	cmp    %eax,%edx
+c0109032:	7e 1a                	jle    c010904e <get_pid+0xd6>
+c0109034:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109037:	8b 50 04             	mov    0x4(%eax),%edx
+c010903a:	a1 70 ca 12 c0       	mov    0xc012ca70,%eax
+c010903f:	39 c2                	cmp    %eax,%edx
+c0109041:	7d 0b                	jge    c010904e <get_pid+0xd6>
+                next_safe = proc->pid;
+c0109043:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109046:	8b 40 04             	mov    0x4(%eax),%eax
+c0109049:	a3 70 ca 12 c0       	mov    %eax,0xc012ca70
+c010904e:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0109051:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c0109054:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109057:	8b 40 04             	mov    0x4(%eax),%eax
+    if (last_pid >= next_safe) {
+    inside:
+        next_safe = MAX_PID;
+    repeat:
+        le = list;
+        while ((le = list_next(le)) != list) {
+c010905a:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c010905d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0109060:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+c0109063:	0f 85 66 ff ff ff    	jne    c0108fcf <get_pid+0x57>
+            else if (proc->pid > last_pid && next_safe > proc->pid) {
+                next_safe = proc->pid;
+            }
+        }
+    }
+    return last_pid;
+c0109069:	a1 6c ca 12 c0       	mov    0xc012ca6c,%eax
+}
+c010906e:	c9                   	leave  
+c010906f:	c3                   	ret    
+
+c0109070 <proc_run>:
+
+// proc_run - make process "proc" running on cpu
+// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
+void
+proc_run(struct proc_struct *proc) {
+c0109070:	55                   	push   %ebp
+c0109071:	89 e5                	mov    %esp,%ebp
+c0109073:	83 ec 18             	sub    $0x18,%esp
+    if (proc != current) {
+c0109076:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c010907b:	39 45 08             	cmp    %eax,0x8(%ebp)
+c010907e:	74 6b                	je     c01090eb <proc_run+0x7b>
+        bool intr_flag;
+        struct proc_struct *prev = current, *next = proc;
+c0109080:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c0109085:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0109088:	8b 45 08             	mov    0x8(%ebp),%eax
+c010908b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        local_intr_save(intr_flag);
+c010908e:	e8 b3 f9 ff ff       	call   c0108a46 <__intr_save>
+c0109093:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        {
+            current = proc;
+c0109096:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109099:	a3 08 ed 1a c0       	mov    %eax,0xc01aed08
+            load_esp0(next->kstack + KSTACKSIZE);
+c010909e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01090a1:	8b 40 0c             	mov    0xc(%eax),%eax
+c01090a4:	05 00 20 00 00       	add    $0x2000,%eax
+c01090a9:	83 ec 0c             	sub    $0xc,%esp
+c01090ac:	50                   	push   %eax
+c01090ad:	e8 66 a6 ff ff       	call   c0103718 <load_esp0>
+c01090b2:	83 c4 10             	add    $0x10,%esp
+            lcr3(next->cr3);
+c01090b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01090b8:	8b 40 40             	mov    0x40(%eax),%eax
+c01090bb:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
+}
+
+static inline void
+lcr3(uintptr_t cr3) {
+    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
+c01090be:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01090c1:	0f 22 d8             	mov    %eax,%cr3
+            switch_to(&(prev->context), &(next->context));
+c01090c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01090c7:	8d 50 1c             	lea    0x1c(%eax),%edx
+c01090ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01090cd:	83 c0 1c             	add    $0x1c,%eax
+c01090d0:	83 ec 08             	sub    $0x8,%esp
+c01090d3:	52                   	push   %edx
+c01090d4:	50                   	push   %eax
+c01090d5:	e8 f5 f8 ff ff       	call   c01089cf <switch_to>
+c01090da:	83 c4 10             	add    $0x10,%esp
+        }
+        local_intr_restore(intr_flag);
+c01090dd:	83 ec 0c             	sub    $0xc,%esp
+c01090e0:	ff 75 ec             	pushl  -0x14(%ebp)
+c01090e3:	e8 88 f9 ff ff       	call   c0108a70 <__intr_restore>
+c01090e8:	83 c4 10             	add    $0x10,%esp
+    }
+}
+c01090eb:	90                   	nop
+c01090ec:	c9                   	leave  
+c01090ed:	c3                   	ret    
+
+c01090ee <forkret>:
+
+// forkret -- the first kernel entry point of a new thread/process
+// NOTE: the addr of forkret is setted in copy_thread function
+//       after switch_to, the current proc will execute here.
+static void
+forkret(void) {
+c01090ee:	55                   	push   %ebp
+c01090ef:	89 e5                	mov    %esp,%ebp
+c01090f1:	83 ec 08             	sub    $0x8,%esp
+    forkrets(current->tf);
+c01090f4:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c01090f9:	8b 40 3c             	mov    0x3c(%eax),%eax
+c01090fc:	83 ec 0c             	sub    $0xc,%esp
+c01090ff:	50                   	push   %eax
+c0109100:	e8 52 a4 ff ff       	call   c0103557 <forkrets>
+c0109105:	83 c4 10             	add    $0x10,%esp
+}
+c0109108:	90                   	nop
+c0109109:	c9                   	leave  
+c010910a:	c3                   	ret    
+
+c010910b <hash_proc>:
+
+// hash_proc - add proc into proc hash_list
+static void
+hash_proc(struct proc_struct *proc) {
+c010910b:	55                   	push   %ebp
+c010910c:	89 e5                	mov    %esp,%ebp
+c010910e:	53                   	push   %ebx
+c010910f:	83 ec 24             	sub    $0x24,%esp
+    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
+c0109112:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109115:	8d 58 60             	lea    0x60(%eax),%ebx
+c0109118:	8b 45 08             	mov    0x8(%ebp),%eax
+c010911b:	8b 40 04             	mov    0x4(%eax),%eax
+c010911e:	83 ec 08             	sub    $0x8,%esp
+c0109121:	6a 0a                	push   $0xa
+c0109123:	50                   	push   %eax
+c0109124:	e8 d7 26 00 00       	call   c010b800 <hash32>
+c0109129:	83 c4 10             	add    $0x10,%esp
+c010912c:	c1 e0 03             	shl    $0x3,%eax
+c010912f:	05 20 ed 1a c0       	add    $0xc01aed20,%eax
+c0109134:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0109137:	89 5d f0             	mov    %ebx,-0x10(%ebp)
+c010913a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010913d:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0109140:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109143:	89 45 e8             	mov    %eax,-0x18(%ebp)
+ * Insert the new element @elm *after* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_after(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm, listelm->next);
+c0109146:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109149:	8b 40 04             	mov    0x4(%eax),%eax
+c010914c:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010914f:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+c0109152:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0109155:	89 55 e0             	mov    %edx,-0x20(%ebp)
+c0109158:	89 45 dc             	mov    %eax,-0x24(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c010915b:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010915e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0109161:	89 10                	mov    %edx,(%eax)
+c0109163:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0109166:	8b 10                	mov    (%eax),%edx
+c0109168:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010916b:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c010916e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0109171:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0109174:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c0109177:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010917a:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c010917d:	89 10                	mov    %edx,(%eax)
+}
+c010917f:	90                   	nop
+c0109180:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+c0109183:	c9                   	leave  
+c0109184:	c3                   	ret    
+
+c0109185 <unhash_proc>:
+
+// unhash_proc - delete proc from proc hash_list
+static void
+unhash_proc(struct proc_struct *proc) {
+c0109185:	55                   	push   %ebp
+c0109186:	89 e5                	mov    %esp,%ebp
+c0109188:	83 ec 10             	sub    $0x10,%esp
+    list_del(&(proc->hash_link));
+c010918b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010918e:	83 c0 60             	add    $0x60,%eax
+c0109191:	89 45 fc             	mov    %eax,-0x4(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c0109194:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0109197:	8b 40 04             	mov    0x4(%eax),%eax
+c010919a:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c010919d:	8b 12                	mov    (%edx),%edx
+c010919f:	89 55 f8             	mov    %edx,-0x8(%ebp)
+c01091a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c01091a5:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c01091a8:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01091ab:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c01091ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01091b1:	8b 55 f8             	mov    -0x8(%ebp),%edx
+c01091b4:	89 10                	mov    %edx,(%eax)
+}
+c01091b6:	90                   	nop
+c01091b7:	c9                   	leave  
+c01091b8:	c3                   	ret    
+
+c01091b9 <find_proc>:
+
+// find_proc - find proc frome proc hash_list according to pid
+struct proc_struct *
+find_proc(int pid) {
+c01091b9:	55                   	push   %ebp
+c01091ba:	89 e5                	mov    %esp,%ebp
+c01091bc:	83 ec 18             	sub    $0x18,%esp
+    if (0 < pid && pid < MAX_PID) {
+c01091bf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c01091c3:	7e 5d                	jle    c0109222 <find_proc+0x69>
+c01091c5:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
+c01091cc:	7f 54                	jg     c0109222 <find_proc+0x69>
+        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
+c01091ce:	8b 45 08             	mov    0x8(%ebp),%eax
+c01091d1:	83 ec 08             	sub    $0x8,%esp
+c01091d4:	6a 0a                	push   $0xa
+c01091d6:	50                   	push   %eax
+c01091d7:	e8 24 26 00 00       	call   c010b800 <hash32>
+c01091dc:	83 c4 10             	add    $0x10,%esp
+c01091df:	c1 e0 03             	shl    $0x3,%eax
+c01091e2:	05 20 ed 1a c0       	add    $0xc01aed20,%eax
+c01091e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01091ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01091ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        while ((le = list_next(le)) != list) {
+c01091f0:	eb 19                	jmp    c010920b <find_proc+0x52>
+            struct proc_struct *proc = le2proc(le, hash_link);
+c01091f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01091f5:	83 e8 60             	sub    $0x60,%eax
+c01091f8:	89 45 ec             	mov    %eax,-0x14(%ebp)
+            if (proc->pid == pid) {
+c01091fb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01091fe:	8b 40 04             	mov    0x4(%eax),%eax
+c0109201:	3b 45 08             	cmp    0x8(%ebp),%eax
+c0109204:	75 05                	jne    c010920b <find_proc+0x52>
+                return proc;
+c0109206:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109209:	eb 1c                	jmp    c0109227 <find_proc+0x6e>
+c010920b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010920e:	89 45 e8             	mov    %eax,-0x18(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c0109211:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0109214:	8b 40 04             	mov    0x4(%eax),%eax
+// find_proc - find proc frome proc hash_list according to pid
+struct proc_struct *
+find_proc(int pid) {
+    if (0 < pid && pid < MAX_PID) {
+        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
+        while ((le = list_next(le)) != list) {
+c0109217:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010921a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010921d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c0109220:	75 d0                	jne    c01091f2 <find_proc+0x39>
+            if (proc->pid == pid) {
+                return proc;
+            }
+        }
+    }
+    return NULL;
+c0109222:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0109227:	c9                   	leave  
+c0109228:	c3                   	ret    
+
+c0109229 <kernel_thread>:
+
+// kernel_thread - create a kernel thread using "fn" function
+// NOTE: the contents of temp trapframe tf will be copied to 
+//       proc->tf in do_fork-->copy_thread function
+int
+kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
+c0109229:	55                   	push   %ebp
+c010922a:	89 e5                	mov    %esp,%ebp
+c010922c:	83 ec 58             	sub    $0x58,%esp
+    struct trapframe tf;
+    memset(&tf, 0, sizeof(struct trapframe));
+c010922f:	83 ec 04             	sub    $0x4,%esp
+c0109232:	6a 4c                	push   $0x4c
+c0109234:	6a 00                	push   $0x0
+c0109236:	8d 45 ac             	lea    -0x54(%ebp),%eax
+c0109239:	50                   	push   %eax
+c010923a:	e8 2a 1e 00 00       	call   c010b069 <memset>
+c010923f:	83 c4 10             	add    $0x10,%esp
+    tf.tf_cs = KERNEL_CS;
+c0109242:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
+    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
+c0109248:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
+c010924e:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
+c0109252:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
+c0109256:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
+c010925a:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
+    tf.tf_regs.reg_ebx = (uint32_t)fn;
+c010925e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109261:	89 45 bc             	mov    %eax,-0x44(%ebp)
+    tf.tf_regs.reg_edx = (uint32_t)arg;
+c0109264:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0109267:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    tf.tf_eip = (uint32_t)kernel_thread_entry;
+c010926a:	b8 c6 89 10 c0       	mov    $0xc01089c6,%eax
+c010926f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    return do_fork(clone_flags | CLONE_VM, 0, &tf);
+c0109272:	8b 45 10             	mov    0x10(%ebp),%eax
+c0109275:	80 cc 01             	or     $0x1,%ah
+c0109278:	89 c2                	mov    %eax,%edx
+c010927a:	83 ec 04             	sub    $0x4,%esp
+c010927d:	8d 45 ac             	lea    -0x54(%ebp),%eax
+c0109280:	50                   	push   %eax
+c0109281:	6a 00                	push   $0x0
+c0109283:	52                   	push   %edx
+c0109284:	e8 f2 02 00 00       	call   c010957b <do_fork>
+c0109289:	83 c4 10             	add    $0x10,%esp
+}
+c010928c:	c9                   	leave  
+c010928d:	c3                   	ret    
+
+c010928e <setup_kstack>:
+
+// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
+static int
+setup_kstack(struct proc_struct *proc) {
+c010928e:	55                   	push   %ebp
+c010928f:	89 e5                	mov    %esp,%ebp
+c0109291:	83 ec 18             	sub    $0x18,%esp
+    struct Page *page = alloc_pages(KSTACKPAGE);
+c0109294:	83 ec 0c             	sub    $0xc,%esp
+c0109297:	6a 02                	push   $0x2
+c0109299:	e8 ce a5 ff ff       	call   c010386c <alloc_pages>
+c010929e:	83 c4 10             	add    $0x10,%esp
+c01092a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (page != NULL) {
+c01092a4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01092a8:	74 1d                	je     c01092c7 <setup_kstack+0x39>
+        proc->kstack = (uintptr_t)page2kva(page);
+c01092aa:	83 ec 0c             	sub    $0xc,%esp
+c01092ad:	ff 75 f4             	pushl  -0xc(%ebp)
+c01092b0:	e8 9c f8 ff ff       	call   c0108b51 <page2kva>
+c01092b5:	83 c4 10             	add    $0x10,%esp
+c01092b8:	89 c2                	mov    %eax,%edx
+c01092ba:	8b 45 08             	mov    0x8(%ebp),%eax
+c01092bd:	89 50 0c             	mov    %edx,0xc(%eax)
+        return 0;
+c01092c0:	b8 00 00 00 00       	mov    $0x0,%eax
+c01092c5:	eb 05                	jmp    c01092cc <setup_kstack+0x3e>
+    }
+    return -E_NO_MEM;
+c01092c7:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
+}
+c01092cc:	c9                   	leave  
+c01092cd:	c3                   	ret    
+
+c01092ce <put_kstack>:
+
+// put_kstack - free the memory space of process kernel stack
+static void
+put_kstack(struct proc_struct *proc) {
+c01092ce:	55                   	push   %ebp
+c01092cf:	89 e5                	mov    %esp,%ebp
+c01092d1:	83 ec 08             	sub    $0x8,%esp
+    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
+c01092d4:	8b 45 08             	mov    0x8(%ebp),%eax
+c01092d7:	8b 40 0c             	mov    0xc(%eax),%eax
+c01092da:	83 ec 0c             	sub    $0xc,%esp
+c01092dd:	50                   	push   %eax
+c01092de:	e8 b3 f8 ff ff       	call   c0108b96 <kva2page>
+c01092e3:	83 c4 10             	add    $0x10,%esp
+c01092e6:	83 ec 08             	sub    $0x8,%esp
+c01092e9:	6a 02                	push   $0x2
+c01092eb:	50                   	push   %eax
+c01092ec:	e8 e7 a5 ff ff       	call   c01038d8 <free_pages>
+c01092f1:	83 c4 10             	add    $0x10,%esp
+}
+c01092f4:	90                   	nop
+c01092f5:	c9                   	leave  
+c01092f6:	c3                   	ret    
+
+c01092f7 <setup_pgdir>:
+
+// setup_pgdir - alloc one page as PDT
+static int
+setup_pgdir(struct mm_struct *mm) {
+c01092f7:	55                   	push   %ebp
+c01092f8:	89 e5                	mov    %esp,%ebp
+c01092fa:	83 ec 18             	sub    $0x18,%esp
+    struct Page *page;
+    if ((page = alloc_page()) == NULL) {
+c01092fd:	83 ec 0c             	sub    $0xc,%esp
+c0109300:	6a 01                	push   $0x1
+c0109302:	e8 65 a5 ff ff       	call   c010386c <alloc_pages>
+c0109307:	83 c4 10             	add    $0x10,%esp
+c010930a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010930d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0109311:	75 07                	jne    c010931a <setup_pgdir+0x23>
+        return -E_NO_MEM;
+c0109313:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
+c0109318:	eb 74                	jmp    c010938e <setup_pgdir+0x97>
+    }
+    pde_t *pgdir = page2kva(page);
+c010931a:	83 ec 0c             	sub    $0xc,%esp
+c010931d:	ff 75 f4             	pushl  -0xc(%ebp)
+c0109320:	e8 2c f8 ff ff       	call   c0108b51 <page2kva>
+c0109325:	83 c4 10             	add    $0x10,%esp
+c0109328:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    memcpy(pgdir, boot_pgdir, PGSIZE);
+c010932b:	a1 64 ec 1a c0       	mov    0xc01aec64,%eax
+c0109330:	83 ec 04             	sub    $0x4,%esp
+c0109333:	68 00 10 00 00       	push   $0x1000
+c0109338:	50                   	push   %eax
+c0109339:	ff 75 f0             	pushl  -0x10(%ebp)
+c010933c:	e8 0b 1e 00 00       	call   c010b14c <memcpy>
+c0109341:	83 c4 10             	add    $0x10,%esp
+    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
+c0109344:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109347:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
+c010934d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109350:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0109353:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
+c010935a:	77 17                	ja     c0109373 <setup_pgdir+0x7c>
+c010935c:	ff 75 ec             	pushl  -0x14(%ebp)
+c010935f:	68 18 d9 10 c0       	push   $0xc010d918
+c0109364:	68 41 01 00 00       	push   $0x141
+c0109369:	68 3c d9 10 c0       	push   $0xc010d93c
+c010936e:	e8 81 70 ff ff       	call   c01003f4 <__panic>
+c0109373:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109376:	05 00 00 00 40       	add    $0x40000000,%eax
+c010937b:	83 c8 03             	or     $0x3,%eax
+c010937e:	89 02                	mov    %eax,(%edx)
+    mm->pgdir = pgdir;
+c0109380:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109383:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0109386:	89 50 0c             	mov    %edx,0xc(%eax)
+    return 0;
+c0109389:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010938e:	c9                   	leave  
+c010938f:	c3                   	ret    
+
+c0109390 <put_pgdir>:
+
+// put_pgdir - free the memory space of PDT
+static void
+put_pgdir(struct mm_struct *mm) {
+c0109390:	55                   	push   %ebp
+c0109391:	89 e5                	mov    %esp,%ebp
+c0109393:	83 ec 08             	sub    $0x8,%esp
+    free_page(kva2page(mm->pgdir));
+c0109396:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109399:	8b 40 0c             	mov    0xc(%eax),%eax
+c010939c:	83 ec 0c             	sub    $0xc,%esp
+c010939f:	50                   	push   %eax
+c01093a0:	e8 f1 f7 ff ff       	call   c0108b96 <kva2page>
+c01093a5:	83 c4 10             	add    $0x10,%esp
+c01093a8:	83 ec 08             	sub    $0x8,%esp
+c01093ab:	6a 01                	push   $0x1
+c01093ad:	50                   	push   %eax
+c01093ae:	e8 25 a5 ff ff       	call   c01038d8 <free_pages>
+c01093b3:	83 c4 10             	add    $0x10,%esp
+}
+c01093b6:	90                   	nop
+c01093b7:	c9                   	leave  
+c01093b8:	c3                   	ret    
+
+c01093b9 <copy_mm>:
+
+// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
+//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
+static int
+copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
+c01093b9:	55                   	push   %ebp
+c01093ba:	89 e5                	mov    %esp,%ebp
+c01093bc:	83 ec 18             	sub    $0x18,%esp
+    struct mm_struct *mm, *oldmm = current->mm;
+c01093bf:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c01093c4:	8b 40 18             	mov    0x18(%eax),%eax
+c01093c7:	89 45 ec             	mov    %eax,-0x14(%ebp)
+
+    /* current is a kernel thread */
+    if (oldmm == NULL) {
+c01093ca:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c01093ce:	75 0a                	jne    c01093da <copy_mm+0x21>
+        return 0;
+c01093d0:	b8 00 00 00 00       	mov    $0x0,%eax
+c01093d5:	e9 03 01 00 00       	jmp    c01094dd <copy_mm+0x124>
+    }
+    if (clone_flags & CLONE_VM) {
+c01093da:	8b 45 08             	mov    0x8(%ebp),%eax
+c01093dd:	25 00 01 00 00       	and    $0x100,%eax
+c01093e2:	85 c0                	test   %eax,%eax
+c01093e4:	74 08                	je     c01093ee <copy_mm+0x35>
+        mm = oldmm;
+c01093e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01093e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        goto good_mm;
+c01093ec:	eb 65                	jmp    c0109453 <copy_mm+0x9a>
+    }
+
+    int ret = -E_NO_MEM;
+c01093ee:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
+    if ((mm = mm_create()) == NULL) {
+c01093f5:	e8 67 c2 ff ff       	call   c0105661 <mm_create>
+c01093fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01093fd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0109401:	0f 84 d2 00 00 00    	je     c01094d9 <copy_mm+0x120>
+        goto bad_mm;
+    }
+    if (setup_pgdir(mm) != 0) {
+c0109407:	83 ec 0c             	sub    $0xc,%esp
+c010940a:	ff 75 f4             	pushl  -0xc(%ebp)
+c010940d:	e8 e5 fe ff ff       	call   c01092f7 <setup_pgdir>
+c0109412:	83 c4 10             	add    $0x10,%esp
+c0109415:	85 c0                	test   %eax,%eax
+c0109417:	0f 85 ab 00 00 00    	jne    c01094c8 <copy_mm+0x10f>
+        goto bad_pgdir_cleanup_mm;
+    }
+
+    lock_mm(oldmm);
+c010941d:	83 ec 0c             	sub    $0xc,%esp
+c0109420:	ff 75 ec             	pushl  -0x14(%ebp)
+c0109423:	e8 e1 f7 ff ff       	call   c0108c09 <lock_mm>
+c0109428:	83 c4 10             	add    $0x10,%esp
+    {
+        ret = dup_mmap(mm, oldmm);
+c010942b:	83 ec 08             	sub    $0x8,%esp
+c010942e:	ff 75 ec             	pushl  -0x14(%ebp)
+c0109431:	ff 75 f4             	pushl  -0xc(%ebp)
+c0109434:	e8 f9 c6 ff ff       	call   c0105b32 <dup_mmap>
+c0109439:	83 c4 10             	add    $0x10,%esp
+c010943c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    }
+    unlock_mm(oldmm);
+c010943f:	83 ec 0c             	sub    $0xc,%esp
+c0109442:	ff 75 ec             	pushl  -0x14(%ebp)
+c0109445:	e8 e0 f7 ff ff       	call   c0108c2a <unlock_mm>
+c010944a:	83 c4 10             	add    $0x10,%esp
+
+    if (ret != 0) {
+c010944d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0109451:	75 56                	jne    c01094a9 <copy_mm+0xf0>
+        goto bad_dup_cleanup_mmap;
+    }
+
+good_mm:
+    mm_count_inc(mm);
+c0109453:	83 ec 0c             	sub    $0xc,%esp
+c0109456:	ff 75 f4             	pushl  -0xc(%ebp)
+c0109459:	e8 77 f7 ff ff       	call   c0108bd5 <mm_count_inc>
+c010945e:	83 c4 10             	add    $0x10,%esp
+    proc->mm = mm;
+c0109461:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0109464:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0109467:	89 50 18             	mov    %edx,0x18(%eax)
+    proc->cr3 = PADDR(mm->pgdir);
+c010946a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010946d:	8b 40 0c             	mov    0xc(%eax),%eax
+c0109470:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0109473:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
+c010947a:	77 17                	ja     c0109493 <copy_mm+0xda>
+c010947c:	ff 75 e8             	pushl  -0x18(%ebp)
+c010947f:	68 18 d9 10 c0       	push   $0xc010d918
+c0109484:	68 70 01 00 00       	push   $0x170
+c0109489:	68 3c d9 10 c0       	push   $0xc010d93c
+c010948e:	e8 61 6f ff ff       	call   c01003f4 <__panic>
+c0109493:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0109496:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
+c010949c:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010949f:	89 50 40             	mov    %edx,0x40(%eax)
+    return 0;
+c01094a2:	b8 00 00 00 00       	mov    $0x0,%eax
+c01094a7:	eb 34                	jmp    c01094dd <copy_mm+0x124>
+        ret = dup_mmap(mm, oldmm);
+    }
+    unlock_mm(oldmm);
+
+    if (ret != 0) {
+        goto bad_dup_cleanup_mmap;
+c01094a9:	90                   	nop
+    mm_count_inc(mm);
+    proc->mm = mm;
+    proc->cr3 = PADDR(mm->pgdir);
+    return 0;
+bad_dup_cleanup_mmap:
+    exit_mmap(mm);
+c01094aa:	83 ec 0c             	sub    $0xc,%esp
+c01094ad:	ff 75 f4             	pushl  -0xc(%ebp)
+c01094b0:	e8 64 c7 ff ff       	call   c0105c19 <exit_mmap>
+c01094b5:	83 c4 10             	add    $0x10,%esp
+    put_pgdir(mm);
+c01094b8:	83 ec 0c             	sub    $0xc,%esp
+c01094bb:	ff 75 f4             	pushl  -0xc(%ebp)
+c01094be:	e8 cd fe ff ff       	call   c0109390 <put_pgdir>
+c01094c3:	83 c4 10             	add    $0x10,%esp
+c01094c6:	eb 01                	jmp    c01094c9 <copy_mm+0x110>
+    int ret = -E_NO_MEM;
+    if ((mm = mm_create()) == NULL) {
+        goto bad_mm;
+    }
+    if (setup_pgdir(mm) != 0) {
+        goto bad_pgdir_cleanup_mm;
+c01094c8:	90                   	nop
+    return 0;
+bad_dup_cleanup_mmap:
+    exit_mmap(mm);
+    put_pgdir(mm);
+bad_pgdir_cleanup_mm:
+    mm_destroy(mm);
+c01094c9:	83 ec 0c             	sub    $0xc,%esp
+c01094cc:	ff 75 f4             	pushl  -0xc(%ebp)
+c01094cf:	e8 b7 c4 ff ff       	call   c010598b <mm_destroy>
+c01094d4:	83 c4 10             	add    $0x10,%esp
+c01094d7:	eb 01                	jmp    c01094da <copy_mm+0x121>
+        goto good_mm;
+    }
+
+    int ret = -E_NO_MEM;
+    if ((mm = mm_create()) == NULL) {
+        goto bad_mm;
+c01094d9:	90                   	nop
+    exit_mmap(mm);
+    put_pgdir(mm);
+bad_pgdir_cleanup_mm:
+    mm_destroy(mm);
+bad_mm:
+    return ret;
+c01094da:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+c01094dd:	c9                   	leave  
+c01094de:	c3                   	ret    
+
+c01094df <copy_thread>:
+
+// copy_thread - setup the trapframe on the  process's kernel stack top and
+//             - setup the kernel entry point and stack of process
+static void
+copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
+c01094df:	55                   	push   %ebp
+c01094e0:	89 e5                	mov    %esp,%ebp
+c01094e2:	57                   	push   %edi
+c01094e3:	56                   	push   %esi
+c01094e4:	53                   	push   %ebx
+    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
+c01094e5:	8b 45 08             	mov    0x8(%ebp),%eax
+c01094e8:	8b 40 0c             	mov    0xc(%eax),%eax
+c01094eb:	05 b4 1f 00 00       	add    $0x1fb4,%eax
+c01094f0:	89 c2                	mov    %eax,%edx
+c01094f2:	8b 45 08             	mov    0x8(%ebp),%eax
+c01094f5:	89 50 3c             	mov    %edx,0x3c(%eax)
+    *(proc->tf) = *tf;
+c01094f8:	8b 45 08             	mov    0x8(%ebp),%eax
+c01094fb:	8b 40 3c             	mov    0x3c(%eax),%eax
+c01094fe:	8b 55 10             	mov    0x10(%ebp),%edx
+c0109501:	89 d3                	mov    %edx,%ebx
+c0109503:	ba 4c 00 00 00       	mov    $0x4c,%edx
+c0109508:	8b 0b                	mov    (%ebx),%ecx
+c010950a:	89 08                	mov    %ecx,(%eax)
+c010950c:	8b 4c 13 fc          	mov    -0x4(%ebx,%edx,1),%ecx
+c0109510:	89 4c 10 fc          	mov    %ecx,-0x4(%eax,%edx,1)
+c0109514:	8d 78 04             	lea    0x4(%eax),%edi
+c0109517:	83 e7 fc             	and    $0xfffffffc,%edi
+c010951a:	29 f8                	sub    %edi,%eax
+c010951c:	29 c3                	sub    %eax,%ebx
+c010951e:	01 c2                	add    %eax,%edx
+c0109520:	83 e2 fc             	and    $0xfffffffc,%edx
+c0109523:	89 d0                	mov    %edx,%eax
+c0109525:	c1 e8 02             	shr    $0x2,%eax
+c0109528:	89 de                	mov    %ebx,%esi
+c010952a:	89 c1                	mov    %eax,%ecx
+c010952c:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+    proc->tf->tf_regs.reg_eax = 0;
+c010952e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109531:	8b 40 3c             	mov    0x3c(%eax),%eax
+c0109534:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
+    proc->tf->tf_esp = esp;
+c010953b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010953e:	8b 40 3c             	mov    0x3c(%eax),%eax
+c0109541:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0109544:	89 50 44             	mov    %edx,0x44(%eax)
+    proc->tf->tf_eflags |= FL_IF;
+c0109547:	8b 45 08             	mov    0x8(%ebp),%eax
+c010954a:	8b 40 3c             	mov    0x3c(%eax),%eax
+c010954d:	8b 55 08             	mov    0x8(%ebp),%edx
+c0109550:	8b 52 3c             	mov    0x3c(%edx),%edx
+c0109553:	8b 52 40             	mov    0x40(%edx),%edx
+c0109556:	80 ce 02             	or     $0x2,%dh
+c0109559:	89 50 40             	mov    %edx,0x40(%eax)
+
+    proc->context.eip = (uintptr_t)forkret;
+c010955c:	ba ee 90 10 c0       	mov    $0xc01090ee,%edx
+c0109561:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109564:	89 50 1c             	mov    %edx,0x1c(%eax)
+    proc->context.esp = (uintptr_t)(proc->tf);
+c0109567:	8b 45 08             	mov    0x8(%ebp),%eax
+c010956a:	8b 40 3c             	mov    0x3c(%eax),%eax
+c010956d:	89 c2                	mov    %eax,%edx
+c010956f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109572:	89 50 20             	mov    %edx,0x20(%eax)
+}
+c0109575:	90                   	nop
+c0109576:	5b                   	pop    %ebx
+c0109577:	5e                   	pop    %esi
+c0109578:	5f                   	pop    %edi
+c0109579:	5d                   	pop    %ebp
+c010957a:	c3                   	ret    
+
+c010957b <do_fork>:
+ * @clone_flags: used to guide how to clone the child process
+ * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
+ * @tf:          the trapframe info, which will be copied to child process's proc->tf
+ */
+int
+do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
+c010957b:	55                   	push   %ebp
+c010957c:	89 e5                	mov    %esp,%ebp
+c010957e:	83 ec 18             	sub    $0x18,%esp
+    int ret = -E_NO_FREE_PROC;
+c0109581:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
+    struct proc_struct *proc;
+    if (nr_process >= MAX_PROCESS) {
+c0109588:	a1 20 0d 1b c0       	mov    0xc01b0d20,%eax
+c010958d:	3d ff 0f 00 00       	cmp    $0xfff,%eax
+c0109592:	0f 8f e1 00 00 00    	jg     c0109679 <do_fork+0xfe>
+        goto fork_out;
+    }
+    ret = -E_NO_MEM;
+c0109598:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
+    *    set_links:  set the relation links of process.  ALSO SEE: remove_links:  lean the relation links of process 
+    *    -------------------
+	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
+	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
+    */
+    if ((proc = alloc_proc()) == NULL) goto fork_out;
+c010959f:	e8 a7 f6 ff ff       	call   c0108c4b <alloc_proc>
+c01095a4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01095a7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c01095ab:	0f 84 cb 00 00 00    	je     c010967c <do_fork+0x101>
+    proc->parent = current;
+c01095b1:	8b 15 08 ed 1a c0    	mov    0xc01aed08,%edx
+c01095b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01095ba:	89 50 14             	mov    %edx,0x14(%eax)
+    assert(current->wait_state == 0);//step 1
+c01095bd:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c01095c2:	8b 40 6c             	mov    0x6c(%eax),%eax
+c01095c5:	85 c0                	test   %eax,%eax
+c01095c7:	74 19                	je     c01095e2 <do_fork+0x67>
+c01095c9:	68 50 d9 10 c0       	push   $0xc010d950
+c01095ce:	68 69 d9 10 c0       	push   $0xc010d969
+c01095d3:	68 b9 01 00 00       	push   $0x1b9
+c01095d8:	68 3c d9 10 c0       	push   $0xc010d93c
+c01095dd:	e8 12 6e ff ff       	call   c01003f4 <__panic>
+    if (setup_kstack(proc) != 0) goto bad_fork_cleanup_proc; //step 2
+c01095e2:	83 ec 0c             	sub    $0xc,%esp
+c01095e5:	ff 75 f0             	pushl  -0x10(%ebp)
+c01095e8:	e8 a1 fc ff ff       	call   c010928e <setup_kstack>
+c01095ed:	83 c4 10             	add    $0x10,%esp
+c01095f0:	85 c0                	test   %eax,%eax
+c01095f2:	0f 85 9b 00 00 00    	jne    c0109693 <do_fork+0x118>
+    if (copy_mm(clone_flags, proc) != 0) goto bad_fork_cleanup_kstack; //step 3
+c01095f8:	83 ec 08             	sub    $0x8,%esp
+c01095fb:	ff 75 f0             	pushl  -0x10(%ebp)
+c01095fe:	ff 75 08             	pushl  0x8(%ebp)
+c0109601:	e8 b3 fd ff ff       	call   c01093b9 <copy_mm>
+c0109606:	83 c4 10             	add    $0x10,%esp
+c0109609:	85 c0                	test   %eax,%eax
+c010960b:	75 75                	jne    c0109682 <do_fork+0x107>
+    copy_thread(proc, stack, tf); //step 4
+c010960d:	83 ec 04             	sub    $0x4,%esp
+c0109610:	ff 75 10             	pushl  0x10(%ebp)
+c0109613:	ff 75 0c             	pushl  0xc(%ebp)
+c0109616:	ff 75 f0             	pushl  -0x10(%ebp)
+c0109619:	e8 c1 fe ff ff       	call   c01094df <copy_thread>
+c010961e:	83 c4 10             	add    $0x10,%esp
+    bool intr_flag;
+    //make following process atomic
+    local_intr_save(intr_flag);//step 5
+c0109621:	e8 20 f4 ff ff       	call   c0108a46 <__intr_save>
+c0109626:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    {
+        proc->pid = get_pid();
+c0109629:	e8 4a f9 ff ff       	call   c0108f78 <get_pid>
+c010962e:	89 c2                	mov    %eax,%edx
+c0109630:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109633:	89 50 04             	mov    %edx,0x4(%eax)
+        hash_proc(proc);
+c0109636:	83 ec 0c             	sub    $0xc,%esp
+c0109639:	ff 75 f0             	pushl  -0x10(%ebp)
+c010963c:	e8 ca fa ff ff       	call   c010910b <hash_proc>
+c0109641:	83 c4 10             	add    $0x10,%esp
+        set_links(proc);
+c0109644:	83 ec 0c             	sub    $0xc,%esp
+c0109647:	ff 75 f0             	pushl  -0x10(%ebp)
+c010964a:	e8 ff f7 ff ff       	call   c0108e4e <set_links>
+c010964f:	83 c4 10             	add    $0x10,%esp
+    }
+    local_intr_restore(intr_flag);
+c0109652:	83 ec 0c             	sub    $0xc,%esp
+c0109655:	ff 75 ec             	pushl  -0x14(%ebp)
+c0109658:	e8 13 f4 ff ff       	call   c0108a70 <__intr_restore>
+c010965d:	83 c4 10             	add    $0x10,%esp
+    wakeup_proc(proc); //step 6
+c0109660:	83 ec 0c             	sub    $0xc,%esp
+c0109663:	ff 75 f0             	pushl  -0x10(%ebp)
+c0109666:	e8 32 10 00 00       	call   c010a69d <wakeup_proc>
+c010966b:	83 c4 10             	add    $0x10,%esp
+    ret = proc->pid; // step 7
+c010966e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109671:	8b 40 04             	mov    0x4(%eax),%eax
+c0109674:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0109677:	eb 04                	jmp    c010967d <do_fork+0x102>
+int
+do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
+    int ret = -E_NO_FREE_PROC;
+    struct proc_struct *proc;
+    if (nr_process >= MAX_PROCESS) {
+        goto fork_out;
+c0109679:	90                   	nop
+c010967a:	eb 01                	jmp    c010967d <do_fork+0x102>
+    *    set_links:  set the relation links of process.  ALSO SEE: remove_links:  lean the relation links of process 
+    *    -------------------
+	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
+	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
+    */
+    if ((proc = alloc_proc()) == NULL) goto fork_out;
+c010967c:	90                   	nop
+    }
+    local_intr_restore(intr_flag);
+    wakeup_proc(proc); //step 6
+    ret = proc->pid; // step 7
+fork_out:
+    return ret;
+c010967d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109680:	eb 22                	jmp    c01096a4 <do_fork+0x129>
+    */
+    if ((proc = alloc_proc()) == NULL) goto fork_out;
+    proc->parent = current;
+    assert(current->wait_state == 0);//step 1
+    if (setup_kstack(proc) != 0) goto bad_fork_cleanup_proc; //step 2
+    if (copy_mm(clone_flags, proc) != 0) goto bad_fork_cleanup_kstack; //step 3
+c0109682:	90                   	nop
+    ret = proc->pid; // step 7
+fork_out:
+    return ret;
+
+bad_fork_cleanup_kstack:
+    put_kstack(proc);
+c0109683:	83 ec 0c             	sub    $0xc,%esp
+c0109686:	ff 75 f0             	pushl  -0x10(%ebp)
+c0109689:	e8 40 fc ff ff       	call   c01092ce <put_kstack>
+c010968e:	83 c4 10             	add    $0x10,%esp
+c0109691:	eb 01                	jmp    c0109694 <do_fork+0x119>
+	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
+    */
+    if ((proc = alloc_proc()) == NULL) goto fork_out;
+    proc->parent = current;
+    assert(current->wait_state == 0);//step 1
+    if (setup_kstack(proc) != 0) goto bad_fork_cleanup_proc; //step 2
+c0109693:	90                   	nop
+    return ret;
+
+bad_fork_cleanup_kstack:
+    put_kstack(proc);
+bad_fork_cleanup_proc:
+    kfree(proc);
+c0109694:	83 ec 0c             	sub    $0xc,%esp
+c0109697:	ff 75 f0             	pushl  -0x10(%ebp)
+c010969a:	e8 ef d5 ff ff       	call   c0106c8e <kfree>
+c010969f:	83 c4 10             	add    $0x10,%esp
+    goto fork_out;
+c01096a2:	eb d9                	jmp    c010967d <do_fork+0x102>
+}
+c01096a4:	c9                   	leave  
+c01096a5:	c3                   	ret    
+
+c01096a6 <do_exit>:
+// do_exit - called by sys_exit
+//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
+//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
+//   3. call scheduler to switch to other process
+int
+do_exit(int error_code) {
+c01096a6:	55                   	push   %ebp
+c01096a7:	89 e5                	mov    %esp,%ebp
+c01096a9:	83 ec 18             	sub    $0x18,%esp
+    if (current == idleproc) {
+c01096ac:	8b 15 08 ed 1a c0    	mov    0xc01aed08,%edx
+c01096b2:	a1 00 ed 1a c0       	mov    0xc01aed00,%eax
+c01096b7:	39 c2                	cmp    %eax,%edx
+c01096b9:	75 17                	jne    c01096d2 <do_exit+0x2c>
+        panic("idleproc exit.\n");
+c01096bb:	83 ec 04             	sub    $0x4,%esp
+c01096be:	68 7e d9 10 c0       	push   $0xc010d97e
+c01096c3:	68 d9 01 00 00       	push   $0x1d9
+c01096c8:	68 3c d9 10 c0       	push   $0xc010d93c
+c01096cd:	e8 22 6d ff ff       	call   c01003f4 <__panic>
+    }
+    if (current == initproc) {
+c01096d2:	8b 15 08 ed 1a c0    	mov    0xc01aed08,%edx
+c01096d8:	a1 04 ed 1a c0       	mov    0xc01aed04,%eax
+c01096dd:	39 c2                	cmp    %eax,%edx
+c01096df:	75 17                	jne    c01096f8 <do_exit+0x52>
+        panic("initproc exit.\n");
+c01096e1:	83 ec 04             	sub    $0x4,%esp
+c01096e4:	68 8e d9 10 c0       	push   $0xc010d98e
+c01096e9:	68 dc 01 00 00       	push   $0x1dc
+c01096ee:	68 3c d9 10 c0       	push   $0xc010d93c
+c01096f3:	e8 fc 6c ff ff       	call   c01003f4 <__panic>
+    }
+    
+    struct mm_struct *mm = current->mm;
+c01096f8:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c01096fd:	8b 40 18             	mov    0x18(%eax),%eax
+c0109700:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (mm != NULL) {
+c0109703:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0109707:	74 56                	je     c010975f <do_exit+0xb9>
+        lcr3(boot_cr3);
+c0109709:	a1 60 0d 1b c0       	mov    0xc01b0d60,%eax
+c010970e:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0109711:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0109714:	0f 22 d8             	mov    %eax,%cr3
+        if (mm_count_dec(mm) == 0) {
+c0109717:	83 ec 0c             	sub    $0xc,%esp
+c010971a:	ff 75 f4             	pushl  -0xc(%ebp)
+c010971d:	e8 cd f4 ff ff       	call   c0108bef <mm_count_dec>
+c0109722:	83 c4 10             	add    $0x10,%esp
+c0109725:	85 c0                	test   %eax,%eax
+c0109727:	75 2a                	jne    c0109753 <do_exit+0xad>
+            exit_mmap(mm);
+c0109729:	83 ec 0c             	sub    $0xc,%esp
+c010972c:	ff 75 f4             	pushl  -0xc(%ebp)
+c010972f:	e8 e5 c4 ff ff       	call   c0105c19 <exit_mmap>
+c0109734:	83 c4 10             	add    $0x10,%esp
+            put_pgdir(mm);
+c0109737:	83 ec 0c             	sub    $0xc,%esp
+c010973a:	ff 75 f4             	pushl  -0xc(%ebp)
+c010973d:	e8 4e fc ff ff       	call   c0109390 <put_pgdir>
+c0109742:	83 c4 10             	add    $0x10,%esp
+            mm_destroy(mm);
+c0109745:	83 ec 0c             	sub    $0xc,%esp
+c0109748:	ff 75 f4             	pushl  -0xc(%ebp)
+c010974b:	e8 3b c2 ff ff       	call   c010598b <mm_destroy>
+c0109750:	83 c4 10             	add    $0x10,%esp
+        }
+        current->mm = NULL;
+c0109753:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c0109758:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
+    }
+    current->state = PROC_ZOMBIE;
+c010975f:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c0109764:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
+    current->exit_code = error_code;
+c010976a:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c010976f:	8b 55 08             	mov    0x8(%ebp),%edx
+c0109772:	89 50 68             	mov    %edx,0x68(%eax)
+    
+    bool intr_flag;
+    struct proc_struct *proc;
+    local_intr_save(intr_flag);
+c0109775:	e8 cc f2 ff ff       	call   c0108a46 <__intr_save>
+c010977a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    {
+        proc = current->parent;
+c010977d:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c0109782:	8b 40 14             	mov    0x14(%eax),%eax
+c0109785:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        if (proc->wait_state == WT_CHILD) {
+c0109788:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010978b:	8b 40 6c             	mov    0x6c(%eax),%eax
+c010978e:	3d 01 00 00 80       	cmp    $0x80000001,%eax
+c0109793:	0f 85 9d 00 00 00    	jne    c0109836 <do_exit+0x190>
+            wakeup_proc(proc);
+c0109799:	83 ec 0c             	sub    $0xc,%esp
+c010979c:	ff 75 ec             	pushl  -0x14(%ebp)
+c010979f:	e8 f9 0e 00 00       	call   c010a69d <wakeup_proc>
+c01097a4:	83 c4 10             	add    $0x10,%esp
+        }
+        while (current->cptr != NULL) {
+c01097a7:	e9 8a 00 00 00       	jmp    c0109836 <do_exit+0x190>
+            proc = current->cptr;
+c01097ac:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c01097b1:	8b 40 70             	mov    0x70(%eax),%eax
+c01097b4:	89 45 ec             	mov    %eax,-0x14(%ebp)
+            current->cptr = proc->optr;
+c01097b7:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c01097bc:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c01097bf:	8b 52 78             	mov    0x78(%edx),%edx
+c01097c2:	89 50 70             	mov    %edx,0x70(%eax)
+    
+            proc->yptr = NULL;
+c01097c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01097c8:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
+            if ((proc->optr = initproc->cptr) != NULL) {
+c01097cf:	a1 04 ed 1a c0       	mov    0xc01aed04,%eax
+c01097d4:	8b 50 70             	mov    0x70(%eax),%edx
+c01097d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01097da:	89 50 78             	mov    %edx,0x78(%eax)
+c01097dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01097e0:	8b 40 78             	mov    0x78(%eax),%eax
+c01097e3:	85 c0                	test   %eax,%eax
+c01097e5:	74 0e                	je     c01097f5 <do_exit+0x14f>
+                initproc->cptr->yptr = proc;
+c01097e7:	a1 04 ed 1a c0       	mov    0xc01aed04,%eax
+c01097ec:	8b 40 70             	mov    0x70(%eax),%eax
+c01097ef:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c01097f2:	89 50 74             	mov    %edx,0x74(%eax)
+            }
+            proc->parent = initproc;
+c01097f5:	8b 15 04 ed 1a c0    	mov    0xc01aed04,%edx
+c01097fb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01097fe:	89 50 14             	mov    %edx,0x14(%eax)
+            initproc->cptr = proc;
+c0109801:	a1 04 ed 1a c0       	mov    0xc01aed04,%eax
+c0109806:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0109809:	89 50 70             	mov    %edx,0x70(%eax)
+            if (proc->state == PROC_ZOMBIE) {
+c010980c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010980f:	8b 00                	mov    (%eax),%eax
+c0109811:	83 f8 03             	cmp    $0x3,%eax
+c0109814:	75 20                	jne    c0109836 <do_exit+0x190>
+                if (initproc->wait_state == WT_CHILD) {
+c0109816:	a1 04 ed 1a c0       	mov    0xc01aed04,%eax
+c010981b:	8b 40 6c             	mov    0x6c(%eax),%eax
+c010981e:	3d 01 00 00 80       	cmp    $0x80000001,%eax
+c0109823:	75 11                	jne    c0109836 <do_exit+0x190>
+                    wakeup_proc(initproc);
+c0109825:	a1 04 ed 1a c0       	mov    0xc01aed04,%eax
+c010982a:	83 ec 0c             	sub    $0xc,%esp
+c010982d:	50                   	push   %eax
+c010982e:	e8 6a 0e 00 00       	call   c010a69d <wakeup_proc>
+c0109833:	83 c4 10             	add    $0x10,%esp
+    {
+        proc = current->parent;
+        if (proc->wait_state == WT_CHILD) {
+            wakeup_proc(proc);
+        }
+        while (current->cptr != NULL) {
+c0109836:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c010983b:	8b 40 70             	mov    0x70(%eax),%eax
+c010983e:	85 c0                	test   %eax,%eax
+c0109840:	0f 85 66 ff ff ff    	jne    c01097ac <do_exit+0x106>
+                    wakeup_proc(initproc);
+                }
+            }
+        }
+    }
+    local_intr_restore(intr_flag);
+c0109846:	83 ec 0c             	sub    $0xc,%esp
+c0109849:	ff 75 f0             	pushl  -0x10(%ebp)
+c010984c:	e8 1f f2 ff ff       	call   c0108a70 <__intr_restore>
+c0109851:	83 c4 10             	add    $0x10,%esp
+    
+    schedule();
+c0109854:	e8 d1 0e 00 00       	call   c010a72a <schedule>
+    panic("do_exit will not return!! %d.\n", current->pid);
+c0109859:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c010985e:	8b 40 04             	mov    0x4(%eax),%eax
+c0109861:	50                   	push   %eax
+c0109862:	68 a0 d9 10 c0       	push   $0xc010d9a0
+c0109867:	68 08 02 00 00       	push   $0x208
+c010986c:	68 3c d9 10 c0       	push   $0xc010d93c
+c0109871:	e8 7e 6b ff ff       	call   c01003f4 <__panic>
+
+c0109876 <load_icode>:
+/* load_icode - load the content of binary program(ELF format) as the new content of current process
+ * @binary:  the memory addr of the content of binary program
+ * @size:  the size of the content of binary program
+ */
+static int
+load_icode(unsigned char *binary, size_t size) {
+c0109876:	55                   	push   %ebp
+c0109877:	89 e5                	mov    %esp,%ebp
+c0109879:	83 ec 58             	sub    $0x58,%esp
+    if (current->mm != NULL) {
+c010987c:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c0109881:	8b 40 18             	mov    0x18(%eax),%eax
+c0109884:	85 c0                	test   %eax,%eax
+c0109886:	74 17                	je     c010989f <load_icode+0x29>
+        panic("load_icode: current->mm must be empty.\n");
+c0109888:	83 ec 04             	sub    $0x4,%esp
+c010988b:	68 c0 d9 10 c0       	push   $0xc010d9c0
+c0109890:	68 12 02 00 00       	push   $0x212
+c0109895:	68 3c d9 10 c0       	push   $0xc010d93c
+c010989a:	e8 55 6b ff ff       	call   c01003f4 <__panic>
+    }
+
+    int ret = -E_NO_MEM;
+c010989f:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
+    struct mm_struct *mm;
+    //(1) create a new mm for current process
+    if ((mm = mm_create()) == NULL) {
+c01098a6:	e8 b6 bd ff ff       	call   c0105661 <mm_create>
+c01098ab:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c01098ae:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
+c01098b2:	0f 84 97 05 00 00    	je     c0109e4f <load_icode+0x5d9>
+        goto bad_mm;
+    }
+    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
+    if (setup_pgdir(mm) != 0) {
+c01098b8:	83 ec 0c             	sub    $0xc,%esp
+c01098bb:	ff 75 d0             	pushl  -0x30(%ebp)
+c01098be:	e8 34 fa ff ff       	call   c01092f7 <setup_pgdir>
+c01098c3:	83 c4 10             	add    $0x10,%esp
+c01098c6:	85 c0                	test   %eax,%eax
+c01098c8:	0f 85 70 05 00 00    	jne    c0109e3e <load_icode+0x5c8>
+        goto bad_pgdir_cleanup_mm;
+    }
+    //(3) copy TEXT/DATA section, build BSS parts in binary to memory space of process
+    struct Page *page;
+    //(3.1) get the file header of the bianry program (ELF format)
+    struct elfhdr *elf = (struct elfhdr *)binary;
+c01098ce:	8b 45 08             	mov    0x8(%ebp),%eax
+c01098d1:	89 45 cc             	mov    %eax,-0x34(%ebp)
+    //(3.2) get the entry of the program section headers of the bianry program (ELF format)
+    struct proghdr *ph = (struct proghdr *)(binary + elf->e_phoff);
+c01098d4:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c01098d7:	8b 50 1c             	mov    0x1c(%eax),%edx
+c01098da:	8b 45 08             	mov    0x8(%ebp),%eax
+c01098dd:	01 d0                	add    %edx,%eax
+c01098df:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    //(3.3) This program is valid?
+    if (elf->e_magic != ELF_MAGIC) {
+c01098e2:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c01098e5:	8b 00                	mov    (%eax),%eax
+c01098e7:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
+c01098ec:	74 0c                	je     c01098fa <load_icode+0x84>
+        ret = -E_INVAL_ELF;
+c01098ee:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
+        goto bad_elf_cleanup_pgdir;
+c01098f5:	e9 34 05 00 00       	jmp    c0109e2e <load_icode+0x5b8>
+    }
+
+    uint32_t vm_flags, perm;
+    struct proghdr *ph_end = ph + elf->e_phnum;
+c01098fa:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c01098fd:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
+c0109901:	0f b7 c0             	movzwl %ax,%eax
+c0109904:	c1 e0 05             	shl    $0x5,%eax
+c0109907:	89 c2                	mov    %eax,%edx
+c0109909:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010990c:	01 d0                	add    %edx,%eax
+c010990e:	89 45 c8             	mov    %eax,-0x38(%ebp)
+    for (; ph < ph_end; ph ++) {
+c0109911:	e9 e0 02 00 00       	jmp    c0109bf6 <load_icode+0x380>
+    //(3.4) find every program section headers
+        if (ph->p_type != ELF_PT_LOAD) {
+c0109916:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109919:	8b 00                	mov    (%eax),%eax
+c010991b:	83 f8 01             	cmp    $0x1,%eax
+c010991e:	0f 85 c7 02 00 00    	jne    c0109beb <load_icode+0x375>
+            continue ;
+        }
+        if (ph->p_filesz > ph->p_memsz) {
+c0109924:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109927:	8b 50 10             	mov    0x10(%eax),%edx
+c010992a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010992d:	8b 40 14             	mov    0x14(%eax),%eax
+c0109930:	39 c2                	cmp    %eax,%edx
+c0109932:	76 0c                	jbe    c0109940 <load_icode+0xca>
+            ret = -E_INVAL_ELF;
+c0109934:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
+            goto bad_cleanup_mmap;
+c010993b:	e9 e0 04 00 00       	jmp    c0109e20 <load_icode+0x5aa>
+        }
+        if (ph->p_filesz == 0) {
+c0109940:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109943:	8b 40 10             	mov    0x10(%eax),%eax
+c0109946:	85 c0                	test   %eax,%eax
+c0109948:	0f 84 a0 02 00 00    	je     c0109bee <load_icode+0x378>
+            continue ;
+        }
+    //(3.5) call mm_map fun to setup the new vma ( ph->p_va, ph->p_memsz)
+        vm_flags = 0, perm = PTE_U;
+c010994e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+c0109955:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%ebp)
+        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
+c010995c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010995f:	8b 40 18             	mov    0x18(%eax),%eax
+c0109962:	83 e0 01             	and    $0x1,%eax
+c0109965:	85 c0                	test   %eax,%eax
+c0109967:	74 04                	je     c010996d <load_icode+0xf7>
+c0109969:	83 4d e8 04          	orl    $0x4,-0x18(%ebp)
+        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
+c010996d:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109970:	8b 40 18             	mov    0x18(%eax),%eax
+c0109973:	83 e0 02             	and    $0x2,%eax
+c0109976:	85 c0                	test   %eax,%eax
+c0109978:	74 04                	je     c010997e <load_icode+0x108>
+c010997a:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
+        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
+c010997e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109981:	8b 40 18             	mov    0x18(%eax),%eax
+c0109984:	83 e0 04             	and    $0x4,%eax
+c0109987:	85 c0                	test   %eax,%eax
+c0109989:	74 04                	je     c010998f <load_icode+0x119>
+c010998b:	83 4d e8 01          	orl    $0x1,-0x18(%ebp)
+        if (vm_flags & VM_WRITE) perm |= PTE_W;
+c010998f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0109992:	83 e0 02             	and    $0x2,%eax
+c0109995:	85 c0                	test   %eax,%eax
+c0109997:	74 04                	je     c010999d <load_icode+0x127>
+c0109999:	83 4d e4 02          	orl    $0x2,-0x1c(%ebp)
+        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
+c010999d:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01099a0:	8b 50 14             	mov    0x14(%eax),%edx
+c01099a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01099a6:	8b 40 08             	mov    0x8(%eax),%eax
+c01099a9:	83 ec 0c             	sub    $0xc,%esp
+c01099ac:	6a 00                	push   $0x0
+c01099ae:	ff 75 e8             	pushl  -0x18(%ebp)
+c01099b1:	52                   	push   %edx
+c01099b2:	50                   	push   %eax
+c01099b3:	ff 75 d0             	pushl  -0x30(%ebp)
+c01099b6:	e8 6f c0 ff ff       	call   c0105a2a <mm_map>
+c01099bb:	83 c4 20             	add    $0x20,%esp
+c01099be:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01099c1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01099c5:	0f 85 4b 04 00 00    	jne    c0109e16 <load_icode+0x5a0>
+            goto bad_cleanup_mmap;
+        }
+        unsigned char *from = binary + ph->p_offset;
+c01099cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01099ce:	8b 50 04             	mov    0x4(%eax),%edx
+c01099d1:	8b 45 08             	mov    0x8(%ebp),%eax
+c01099d4:	01 d0                	add    %edx,%eax
+c01099d6:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        size_t off, size;
+        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
+c01099d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01099dc:	8b 40 08             	mov    0x8(%eax),%eax
+c01099df:	89 45 d8             	mov    %eax,-0x28(%ebp)
+c01099e2:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c01099e5:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+c01099e8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c01099eb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c01099f0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+
+        ret = -E_NO_MEM;
+c01099f3:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
+
+     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
+        end = ph->p_va + ph->p_filesz;
+c01099fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01099fd:	8b 50 08             	mov    0x8(%eax),%edx
+c0109a00:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109a03:	8b 40 10             	mov    0x10(%eax),%eax
+c0109a06:	01 d0                	add    %edx,%eax
+c0109a08:	89 45 c0             	mov    %eax,-0x40(%ebp)
+     //(3.6.1) copy TEXT/DATA section of bianry program
+        while (start < end) {
+c0109a0b:	e9 84 00 00 00       	jmp    c0109a94 <load_icode+0x21e>
+            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
+c0109a10:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0109a13:	8b 40 0c             	mov    0xc(%eax),%eax
+c0109a16:	83 ec 04             	sub    $0x4,%esp
+c0109a19:	ff 75 e4             	pushl  -0x1c(%ebp)
+c0109a1c:	ff 75 d4             	pushl  -0x2c(%ebp)
+c0109a1f:	50                   	push   %eax
+c0109a20:	e8 fd ab ff ff       	call   c0104622 <pgdir_alloc_page>
+c0109a25:	83 c4 10             	add    $0x10,%esp
+c0109a28:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0109a2b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0109a2f:	0f 84 e4 03 00 00    	je     c0109e19 <load_icode+0x5a3>
+                goto bad_cleanup_mmap;
+            }
+            off = start - la, size = PGSIZE - off, la += PGSIZE;
+c0109a35:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0109a38:	2b 45 d4             	sub    -0x2c(%ebp),%eax
+c0109a3b:	89 45 bc             	mov    %eax,-0x44(%ebp)
+c0109a3e:	b8 00 10 00 00       	mov    $0x1000,%eax
+c0109a43:	2b 45 bc             	sub    -0x44(%ebp),%eax
+c0109a46:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c0109a49:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
+            if (end < la) {
+c0109a50:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c0109a53:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c0109a56:	73 09                	jae    c0109a61 <load_icode+0x1eb>
+                size -= la - end;
+c0109a58:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c0109a5b:	2b 45 d4             	sub    -0x2c(%ebp),%eax
+c0109a5e:	01 45 dc             	add    %eax,-0x24(%ebp)
+            }
+            memcpy(page2kva(page) + off, from, size);
+c0109a61:	83 ec 0c             	sub    $0xc,%esp
+c0109a64:	ff 75 f0             	pushl  -0x10(%ebp)
+c0109a67:	e8 e5 f0 ff ff       	call   c0108b51 <page2kva>
+c0109a6c:	83 c4 10             	add    $0x10,%esp
+c0109a6f:	89 c2                	mov    %eax,%edx
+c0109a71:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c0109a74:	01 d0                	add    %edx,%eax
+c0109a76:	83 ec 04             	sub    $0x4,%esp
+c0109a79:	ff 75 dc             	pushl  -0x24(%ebp)
+c0109a7c:	ff 75 e0             	pushl  -0x20(%ebp)
+c0109a7f:	50                   	push   %eax
+c0109a80:	e8 c7 16 00 00       	call   c010b14c <memcpy>
+c0109a85:	83 c4 10             	add    $0x10,%esp
+            start += size, from += size;
+c0109a88:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0109a8b:	01 45 d8             	add    %eax,-0x28(%ebp)
+c0109a8e:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0109a91:	01 45 e0             	add    %eax,-0x20(%ebp)
+        ret = -E_NO_MEM;
+
+     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
+        end = ph->p_va + ph->p_filesz;
+     //(3.6.1) copy TEXT/DATA section of bianry program
+        while (start < end) {
+c0109a94:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0109a97:	3b 45 c0             	cmp    -0x40(%ebp),%eax
+c0109a9a:	0f 82 70 ff ff ff    	jb     c0109a10 <load_icode+0x19a>
+            memcpy(page2kva(page) + off, from, size);
+            start += size, from += size;
+        }
+
+      //(3.6.2) build BSS section of binary program
+        end = ph->p_va + ph->p_memsz;
+c0109aa0:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109aa3:	8b 50 08             	mov    0x8(%eax),%edx
+c0109aa6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109aa9:	8b 40 14             	mov    0x14(%eax),%eax
+c0109aac:	01 d0                	add    %edx,%eax
+c0109aae:	89 45 c0             	mov    %eax,-0x40(%ebp)
+        if (start < la) {
+c0109ab1:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0109ab4:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c0109ab7:	0f 83 20 01 00 00    	jae    c0109bdd <load_icode+0x367>
+            /* ph->p_memsz == ph->p_filesz */
+            if (start == end) {
+c0109abd:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0109ac0:	3b 45 c0             	cmp    -0x40(%ebp),%eax
+c0109ac3:	0f 84 28 01 00 00    	je     c0109bf1 <load_icode+0x37b>
+                continue ;
+            }
+            off = start + PGSIZE - la, size = PGSIZE - off;
+c0109ac9:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0109acc:	2b 45 d4             	sub    -0x2c(%ebp),%eax
+c0109acf:	05 00 10 00 00       	add    $0x1000,%eax
+c0109ad4:	89 45 bc             	mov    %eax,-0x44(%ebp)
+c0109ad7:	b8 00 10 00 00       	mov    $0x1000,%eax
+c0109adc:	2b 45 bc             	sub    -0x44(%ebp),%eax
+c0109adf:	89 45 dc             	mov    %eax,-0x24(%ebp)
+            if (end < la) {
+c0109ae2:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c0109ae5:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c0109ae8:	73 09                	jae    c0109af3 <load_icode+0x27d>
+                size -= la - end;
+c0109aea:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c0109aed:	2b 45 d4             	sub    -0x2c(%ebp),%eax
+c0109af0:	01 45 dc             	add    %eax,-0x24(%ebp)
+            }
+            memset(page2kva(page) + off, 0, size);
+c0109af3:	83 ec 0c             	sub    $0xc,%esp
+c0109af6:	ff 75 f0             	pushl  -0x10(%ebp)
+c0109af9:	e8 53 f0 ff ff       	call   c0108b51 <page2kva>
+c0109afe:	83 c4 10             	add    $0x10,%esp
+c0109b01:	89 c2                	mov    %eax,%edx
+c0109b03:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c0109b06:	01 d0                	add    %edx,%eax
+c0109b08:	83 ec 04             	sub    $0x4,%esp
+c0109b0b:	ff 75 dc             	pushl  -0x24(%ebp)
+c0109b0e:	6a 00                	push   $0x0
+c0109b10:	50                   	push   %eax
+c0109b11:	e8 53 15 00 00       	call   c010b069 <memset>
+c0109b16:	83 c4 10             	add    $0x10,%esp
+            start += size;
+c0109b19:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0109b1c:	01 45 d8             	add    %eax,-0x28(%ebp)
+            assert((end < la && start == end) || (end >= la && start == la));
+c0109b1f:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c0109b22:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c0109b25:	73 0c                	jae    c0109b33 <load_icode+0x2bd>
+c0109b27:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0109b2a:	3b 45 c0             	cmp    -0x40(%ebp),%eax
+c0109b2d:	0f 84 aa 00 00 00    	je     c0109bdd <load_icode+0x367>
+c0109b33:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c0109b36:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c0109b39:	72 0c                	jb     c0109b47 <load_icode+0x2d1>
+c0109b3b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0109b3e:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c0109b41:	0f 84 96 00 00 00    	je     c0109bdd <load_icode+0x367>
+c0109b47:	68 e8 d9 10 c0       	push   $0xc010d9e8
+c0109b4c:	68 69 d9 10 c0       	push   $0xc010d969
+c0109b51:	68 64 02 00 00       	push   $0x264
+c0109b56:	68 3c d9 10 c0       	push   $0xc010d93c
+c0109b5b:	e8 94 68 ff ff       	call   c01003f4 <__panic>
+        }
+        while (start < end) {
+            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
+c0109b60:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0109b63:	8b 40 0c             	mov    0xc(%eax),%eax
+c0109b66:	83 ec 04             	sub    $0x4,%esp
+c0109b69:	ff 75 e4             	pushl  -0x1c(%ebp)
+c0109b6c:	ff 75 d4             	pushl  -0x2c(%ebp)
+c0109b6f:	50                   	push   %eax
+c0109b70:	e8 ad aa ff ff       	call   c0104622 <pgdir_alloc_page>
+c0109b75:	83 c4 10             	add    $0x10,%esp
+c0109b78:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0109b7b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0109b7f:	0f 84 97 02 00 00    	je     c0109e1c <load_icode+0x5a6>
+                goto bad_cleanup_mmap;
+            }
+            off = start - la, size = PGSIZE - off, la += PGSIZE;
+c0109b85:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0109b88:	2b 45 d4             	sub    -0x2c(%ebp),%eax
+c0109b8b:	89 45 bc             	mov    %eax,-0x44(%ebp)
+c0109b8e:	b8 00 10 00 00       	mov    $0x1000,%eax
+c0109b93:	2b 45 bc             	sub    -0x44(%ebp),%eax
+c0109b96:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c0109b99:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
+            if (end < la) {
+c0109ba0:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c0109ba3:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c0109ba6:	73 09                	jae    c0109bb1 <load_icode+0x33b>
+                size -= la - end;
+c0109ba8:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c0109bab:	2b 45 d4             	sub    -0x2c(%ebp),%eax
+c0109bae:	01 45 dc             	add    %eax,-0x24(%ebp)
+            }
+            memset(page2kva(page) + off, 0, size);
+c0109bb1:	83 ec 0c             	sub    $0xc,%esp
+c0109bb4:	ff 75 f0             	pushl  -0x10(%ebp)
+c0109bb7:	e8 95 ef ff ff       	call   c0108b51 <page2kva>
+c0109bbc:	83 c4 10             	add    $0x10,%esp
+c0109bbf:	89 c2                	mov    %eax,%edx
+c0109bc1:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c0109bc4:	01 d0                	add    %edx,%eax
+c0109bc6:	83 ec 04             	sub    $0x4,%esp
+c0109bc9:	ff 75 dc             	pushl  -0x24(%ebp)
+c0109bcc:	6a 00                	push   $0x0
+c0109bce:	50                   	push   %eax
+c0109bcf:	e8 95 14 00 00       	call   c010b069 <memset>
+c0109bd4:	83 c4 10             	add    $0x10,%esp
+            start += size;
+c0109bd7:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0109bda:	01 45 d8             	add    %eax,-0x28(%ebp)
+            }
+            memset(page2kva(page) + off, 0, size);
+            start += size;
+            assert((end < la && start == end) || (end >= la && start == la));
+        }
+        while (start < end) {
+c0109bdd:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0109be0:	3b 45 c0             	cmp    -0x40(%ebp),%eax
+c0109be3:	0f 82 77 ff ff ff    	jb     c0109b60 <load_icode+0x2ea>
+c0109be9:	eb 07                	jmp    c0109bf2 <load_icode+0x37c>
+    uint32_t vm_flags, perm;
+    struct proghdr *ph_end = ph + elf->e_phnum;
+    for (; ph < ph_end; ph ++) {
+    //(3.4) find every program section headers
+        if (ph->p_type != ELF_PT_LOAD) {
+            continue ;
+c0109beb:	90                   	nop
+c0109bec:	eb 04                	jmp    c0109bf2 <load_icode+0x37c>
+        if (ph->p_filesz > ph->p_memsz) {
+            ret = -E_INVAL_ELF;
+            goto bad_cleanup_mmap;
+        }
+        if (ph->p_filesz == 0) {
+            continue ;
+c0109bee:	90                   	nop
+c0109bef:	eb 01                	jmp    c0109bf2 <load_icode+0x37c>
+      //(3.6.2) build BSS section of binary program
+        end = ph->p_va + ph->p_memsz;
+        if (start < la) {
+            /* ph->p_memsz == ph->p_filesz */
+            if (start == end) {
+                continue ;
+c0109bf1:	90                   	nop
+        goto bad_elf_cleanup_pgdir;
+    }
+
+    uint32_t vm_flags, perm;
+    struct proghdr *ph_end = ph + elf->e_phnum;
+    for (; ph < ph_end; ph ++) {
+c0109bf2:	83 45 ec 20          	addl   $0x20,-0x14(%ebp)
+c0109bf6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109bf9:	3b 45 c8             	cmp    -0x38(%ebp),%eax
+c0109bfc:	0f 82 14 fd ff ff    	jb     c0109916 <load_icode+0xa0>
+            memset(page2kva(page) + off, 0, size);
+            start += size;
+        }
+    }
+    //(4) build user stack memory
+    vm_flags = VM_READ | VM_WRITE | VM_STACK;
+c0109c02:	c7 45 e8 0b 00 00 00 	movl   $0xb,-0x18(%ebp)
+    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
+c0109c09:	83 ec 0c             	sub    $0xc,%esp
+c0109c0c:	6a 00                	push   $0x0
+c0109c0e:	ff 75 e8             	pushl  -0x18(%ebp)
+c0109c11:	68 00 00 10 00       	push   $0x100000
+c0109c16:	68 00 00 f0 af       	push   $0xaff00000
+c0109c1b:	ff 75 d0             	pushl  -0x30(%ebp)
+c0109c1e:	e8 07 be ff ff       	call   c0105a2a <mm_map>
+c0109c23:	83 c4 20             	add    $0x20,%esp
+c0109c26:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0109c29:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0109c2d:	0f 85 ec 01 00 00    	jne    c0109e1f <load_icode+0x5a9>
+        goto bad_cleanup_mmap;
+    }
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
+c0109c33:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0109c36:	8b 40 0c             	mov    0xc(%eax),%eax
+c0109c39:	83 ec 04             	sub    $0x4,%esp
+c0109c3c:	6a 07                	push   $0x7
+c0109c3e:	68 00 f0 ff af       	push   $0xaffff000
+c0109c43:	50                   	push   %eax
+c0109c44:	e8 d9 a9 ff ff       	call   c0104622 <pgdir_alloc_page>
+c0109c49:	83 c4 10             	add    $0x10,%esp
+c0109c4c:	85 c0                	test   %eax,%eax
+c0109c4e:	75 19                	jne    c0109c69 <load_icode+0x3f3>
+c0109c50:	68 24 da 10 c0       	push   $0xc010da24
+c0109c55:	68 69 d9 10 c0       	push   $0xc010d969
+c0109c5a:	68 77 02 00 00       	push   $0x277
+c0109c5f:	68 3c d9 10 c0       	push   $0xc010d93c
+c0109c64:	e8 8b 67 ff ff       	call   c01003f4 <__panic>
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
+c0109c69:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0109c6c:	8b 40 0c             	mov    0xc(%eax),%eax
+c0109c6f:	83 ec 04             	sub    $0x4,%esp
+c0109c72:	6a 07                	push   $0x7
+c0109c74:	68 00 e0 ff af       	push   $0xafffe000
+c0109c79:	50                   	push   %eax
+c0109c7a:	e8 a3 a9 ff ff       	call   c0104622 <pgdir_alloc_page>
+c0109c7f:	83 c4 10             	add    $0x10,%esp
+c0109c82:	85 c0                	test   %eax,%eax
+c0109c84:	75 19                	jne    c0109c9f <load_icode+0x429>
+c0109c86:	68 68 da 10 c0       	push   $0xc010da68
+c0109c8b:	68 69 d9 10 c0       	push   $0xc010d969
+c0109c90:	68 78 02 00 00       	push   $0x278
+c0109c95:	68 3c d9 10 c0       	push   $0xc010d93c
+c0109c9a:	e8 55 67 ff ff       	call   c01003f4 <__panic>
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
+c0109c9f:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0109ca2:	8b 40 0c             	mov    0xc(%eax),%eax
+c0109ca5:	83 ec 04             	sub    $0x4,%esp
+c0109ca8:	6a 07                	push   $0x7
+c0109caa:	68 00 d0 ff af       	push   $0xafffd000
+c0109caf:	50                   	push   %eax
+c0109cb0:	e8 6d a9 ff ff       	call   c0104622 <pgdir_alloc_page>
+c0109cb5:	83 c4 10             	add    $0x10,%esp
+c0109cb8:	85 c0                	test   %eax,%eax
+c0109cba:	75 19                	jne    c0109cd5 <load_icode+0x45f>
+c0109cbc:	68 ac da 10 c0       	push   $0xc010daac
+c0109cc1:	68 69 d9 10 c0       	push   $0xc010d969
+c0109cc6:	68 79 02 00 00       	push   $0x279
+c0109ccb:	68 3c d9 10 c0       	push   $0xc010d93c
+c0109cd0:	e8 1f 67 ff ff       	call   c01003f4 <__panic>
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
+c0109cd5:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0109cd8:	8b 40 0c             	mov    0xc(%eax),%eax
+c0109cdb:	83 ec 04             	sub    $0x4,%esp
+c0109cde:	6a 07                	push   $0x7
+c0109ce0:	68 00 c0 ff af       	push   $0xafffc000
+c0109ce5:	50                   	push   %eax
+c0109ce6:	e8 37 a9 ff ff       	call   c0104622 <pgdir_alloc_page>
+c0109ceb:	83 c4 10             	add    $0x10,%esp
+c0109cee:	85 c0                	test   %eax,%eax
+c0109cf0:	75 19                	jne    c0109d0b <load_icode+0x495>
+c0109cf2:	68 f0 da 10 c0       	push   $0xc010daf0
+c0109cf7:	68 69 d9 10 c0       	push   $0xc010d969
+c0109cfc:	68 7a 02 00 00       	push   $0x27a
+c0109d01:	68 3c d9 10 c0       	push   $0xc010d93c
+c0109d06:	e8 e9 66 ff ff       	call   c01003f4 <__panic>
+    
+    //(5) set current process's mm, sr3, and set CR3 reg = physical addr of Page Directory
+    mm_count_inc(mm);
+c0109d0b:	83 ec 0c             	sub    $0xc,%esp
+c0109d0e:	ff 75 d0             	pushl  -0x30(%ebp)
+c0109d11:	e8 bf ee ff ff       	call   c0108bd5 <mm_count_inc>
+c0109d16:	83 c4 10             	add    $0x10,%esp
+    current->mm = mm;
+c0109d19:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c0109d1e:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c0109d21:	89 50 18             	mov    %edx,0x18(%eax)
+    current->cr3 = PADDR(mm->pgdir);
+c0109d24:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c0109d29:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c0109d2c:	8b 52 0c             	mov    0xc(%edx),%edx
+c0109d2f:	89 55 b8             	mov    %edx,-0x48(%ebp)
+c0109d32:	81 7d b8 ff ff ff bf 	cmpl   $0xbfffffff,-0x48(%ebp)
+c0109d39:	77 17                	ja     c0109d52 <load_icode+0x4dc>
+c0109d3b:	ff 75 b8             	pushl  -0x48(%ebp)
+c0109d3e:	68 18 d9 10 c0       	push   $0xc010d918
+c0109d43:	68 7f 02 00 00       	push   $0x27f
+c0109d48:	68 3c d9 10 c0       	push   $0xc010d93c
+c0109d4d:	e8 a2 66 ff ff       	call   c01003f4 <__panic>
+c0109d52:	8b 55 b8             	mov    -0x48(%ebp),%edx
+c0109d55:	81 c2 00 00 00 40    	add    $0x40000000,%edx
+c0109d5b:	89 50 40             	mov    %edx,0x40(%eax)
+    lcr3(PADDR(mm->pgdir));
+c0109d5e:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0109d61:	8b 40 0c             	mov    0xc(%eax),%eax
+c0109d64:	89 45 b4             	mov    %eax,-0x4c(%ebp)
+c0109d67:	81 7d b4 ff ff ff bf 	cmpl   $0xbfffffff,-0x4c(%ebp)
+c0109d6e:	77 17                	ja     c0109d87 <load_icode+0x511>
+c0109d70:	ff 75 b4             	pushl  -0x4c(%ebp)
+c0109d73:	68 18 d9 10 c0       	push   $0xc010d918
+c0109d78:	68 80 02 00 00       	push   $0x280
+c0109d7d:	68 3c d9 10 c0       	push   $0xc010d93c
+c0109d82:	e8 6d 66 ff ff       	call   c01003f4 <__panic>
+c0109d87:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c0109d8a:	05 00 00 00 40       	add    $0x40000000,%eax
+c0109d8f:	89 45 ac             	mov    %eax,-0x54(%ebp)
+c0109d92:	8b 45 ac             	mov    -0x54(%ebp),%eax
+c0109d95:	0f 22 d8             	mov    %eax,%cr3
+
+    //(6) setup trapframe for user environment
+    struct trapframe *tf = current->tf;
+c0109d98:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c0109d9d:	8b 40 3c             	mov    0x3c(%eax),%eax
+c0109da0:	89 45 b0             	mov    %eax,-0x50(%ebp)
+    memset(tf, 0, sizeof(struct trapframe));
+c0109da3:	83 ec 04             	sub    $0x4,%esp
+c0109da6:	6a 4c                	push   $0x4c
+c0109da8:	6a 00                	push   $0x0
+c0109daa:	ff 75 b0             	pushl  -0x50(%ebp)
+c0109dad:	e8 b7 12 00 00       	call   c010b069 <memset>
+c0109db2:	83 c4 10             	add    $0x10,%esp
+     *          tf_ds=tf_es=tf_ss should be USER_DS segment
+     *          tf_esp should be the top addr of user stack (USTACKTOP)
+     *          tf_eip should be the entry point of this binary program (elf->e_entry)
+     *          tf_eflags should be set to enable computer to produce Interrupt
+     */
+    tf->tf_cs = USER_CS;
+c0109db5:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c0109db8:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
+    tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
+c0109dbe:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c0109dc1:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
+c0109dc7:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c0109dca:	0f b7 50 48          	movzwl 0x48(%eax),%edx
+c0109dce:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c0109dd1:	66 89 50 28          	mov    %dx,0x28(%eax)
+c0109dd5:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c0109dd8:	0f b7 50 28          	movzwl 0x28(%eax),%edx
+c0109ddc:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c0109ddf:	66 89 50 2c          	mov    %dx,0x2c(%eax)
+    tf->tf_esp = USTACKTOP;
+c0109de3:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c0109de6:	c7 40 44 00 00 00 b0 	movl   $0xb0000000,0x44(%eax)
+    tf->tf_eip = elf->e_entry;
+c0109ded:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0109df0:	8b 50 18             	mov    0x18(%eax),%edx
+c0109df3:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c0109df6:	89 50 38             	mov    %edx,0x38(%eax)
+    tf->tf_eflags |= FL_IF;
+c0109df9:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c0109dfc:	8b 40 40             	mov    0x40(%eax),%eax
+c0109dff:	80 cc 02             	or     $0x2,%ah
+c0109e02:	89 c2                	mov    %eax,%edx
+c0109e04:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c0109e07:	89 50 40             	mov    %edx,0x40(%eax)
+    ret = 0;
+c0109e0a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+out:
+    return ret;
+c0109e11:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109e14:	eb 3c                	jmp    c0109e52 <load_icode+0x5dc>
+        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
+        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
+        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
+        if (vm_flags & VM_WRITE) perm |= PTE_W;
+        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
+            goto bad_cleanup_mmap;
+c0109e16:	90                   	nop
+c0109e17:	eb 07                	jmp    c0109e20 <load_icode+0x5aa>
+     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
+        end = ph->p_va + ph->p_filesz;
+     //(3.6.1) copy TEXT/DATA section of bianry program
+        while (start < end) {
+            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
+                goto bad_cleanup_mmap;
+c0109e19:	90                   	nop
+c0109e1a:	eb 04                	jmp    c0109e20 <load_icode+0x5aa>
+            start += size;
+            assert((end < la && start == end) || (end >= la && start == la));
+        }
+        while (start < end) {
+            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
+                goto bad_cleanup_mmap;
+c0109e1c:	90                   	nop
+c0109e1d:	eb 01                	jmp    c0109e20 <load_icode+0x5aa>
+        }
+    }
+    //(4) build user stack memory
+    vm_flags = VM_READ | VM_WRITE | VM_STACK;
+    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
+        goto bad_cleanup_mmap;
+c0109e1f:	90                   	nop
+    tf->tf_eflags |= FL_IF;
+    ret = 0;
+out:
+    return ret;
+bad_cleanup_mmap:
+    exit_mmap(mm);
+c0109e20:	83 ec 0c             	sub    $0xc,%esp
+c0109e23:	ff 75 d0             	pushl  -0x30(%ebp)
+c0109e26:	e8 ee bd ff ff       	call   c0105c19 <exit_mmap>
+c0109e2b:	83 c4 10             	add    $0x10,%esp
+bad_elf_cleanup_pgdir:
+    put_pgdir(mm);
+c0109e2e:	83 ec 0c             	sub    $0xc,%esp
+c0109e31:	ff 75 d0             	pushl  -0x30(%ebp)
+c0109e34:	e8 57 f5 ff ff       	call   c0109390 <put_pgdir>
+c0109e39:	83 c4 10             	add    $0x10,%esp
+c0109e3c:	eb 01                	jmp    c0109e3f <load_icode+0x5c9>
+    if ((mm = mm_create()) == NULL) {
+        goto bad_mm;
+    }
+    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
+    if (setup_pgdir(mm) != 0) {
+        goto bad_pgdir_cleanup_mm;
+c0109e3e:	90                   	nop
+bad_cleanup_mmap:
+    exit_mmap(mm);
+bad_elf_cleanup_pgdir:
+    put_pgdir(mm);
+bad_pgdir_cleanup_mm:
+    mm_destroy(mm);
+c0109e3f:	83 ec 0c             	sub    $0xc,%esp
+c0109e42:	ff 75 d0             	pushl  -0x30(%ebp)
+c0109e45:	e8 41 bb ff ff       	call   c010598b <mm_destroy>
+c0109e4a:	83 c4 10             	add    $0x10,%esp
+bad_mm:
+    goto out;
+c0109e4d:	eb c2                	jmp    c0109e11 <load_icode+0x59b>
+
+    int ret = -E_NO_MEM;
+    struct mm_struct *mm;
+    //(1) create a new mm for current process
+    if ((mm = mm_create()) == NULL) {
+        goto bad_mm;
+c0109e4f:	90                   	nop
+bad_elf_cleanup_pgdir:
+    put_pgdir(mm);
+bad_pgdir_cleanup_mm:
+    mm_destroy(mm);
+bad_mm:
+    goto out;
+c0109e50:	eb bf                	jmp    c0109e11 <load_icode+0x59b>
+}
+c0109e52:	c9                   	leave  
+c0109e53:	c3                   	ret    
+
+c0109e54 <do_execve>:
+
+// do_execve - call exit_mmap(mm)&put_pgdir(mm) to reclaim memory space of current process
+//           - call load_icode to setup new memory space accroding binary prog.
+int
+do_execve(const char *name, size_t len, unsigned char *binary, size_t size) {
+c0109e54:	55                   	push   %ebp
+c0109e55:	89 e5                	mov    %esp,%ebp
+c0109e57:	83 ec 28             	sub    $0x28,%esp
+    struct mm_struct *mm = current->mm;
+c0109e5a:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c0109e5f:	8b 40 18             	mov    0x18(%eax),%eax
+c0109e62:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (!user_mem_check(mm, (uintptr_t)name, len, 0)) {
+c0109e65:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109e68:	6a 00                	push   $0x0
+c0109e6a:	ff 75 0c             	pushl  0xc(%ebp)
+c0109e6d:	50                   	push   %eax
+c0109e6e:	ff 75 f4             	pushl  -0xc(%ebp)
+c0109e71:	e8 f7 c6 ff ff       	call   c010656d <user_mem_check>
+c0109e76:	83 c4 10             	add    $0x10,%esp
+c0109e79:	85 c0                	test   %eax,%eax
+c0109e7b:	75 0a                	jne    c0109e87 <do_execve+0x33>
+        return -E_INVAL;
+c0109e7d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+c0109e82:	e9 ed 00 00 00       	jmp    c0109f74 <do_execve+0x120>
+    }
+    if (len > PROC_NAME_LEN) {
+c0109e87:	83 7d 0c 0f          	cmpl   $0xf,0xc(%ebp)
+c0109e8b:	76 07                	jbe    c0109e94 <do_execve+0x40>
+        len = PROC_NAME_LEN;
+c0109e8d:	c7 45 0c 0f 00 00 00 	movl   $0xf,0xc(%ebp)
+    }
+
+    char local_name[PROC_NAME_LEN + 1];
+    memset(local_name, 0, sizeof(local_name));
+c0109e94:	83 ec 04             	sub    $0x4,%esp
+c0109e97:	6a 10                	push   $0x10
+c0109e99:	6a 00                	push   $0x0
+c0109e9b:	8d 45 dc             	lea    -0x24(%ebp),%eax
+c0109e9e:	50                   	push   %eax
+c0109e9f:	e8 c5 11 00 00       	call   c010b069 <memset>
+c0109ea4:	83 c4 10             	add    $0x10,%esp
+    memcpy(local_name, name, len);
+c0109ea7:	83 ec 04             	sub    $0x4,%esp
+c0109eaa:	ff 75 0c             	pushl  0xc(%ebp)
+c0109ead:	ff 75 08             	pushl  0x8(%ebp)
+c0109eb0:	8d 45 dc             	lea    -0x24(%ebp),%eax
+c0109eb3:	50                   	push   %eax
+c0109eb4:	e8 93 12 00 00       	call   c010b14c <memcpy>
+c0109eb9:	83 c4 10             	add    $0x10,%esp
+
+    if (mm != NULL) {
+c0109ebc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0109ec0:	74 56                	je     c0109f18 <do_execve+0xc4>
+        lcr3(boot_cr3);
+c0109ec2:	a1 60 0d 1b c0       	mov    0xc01b0d60,%eax
+c0109ec7:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0109eca:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109ecd:	0f 22 d8             	mov    %eax,%cr3
+        if (mm_count_dec(mm) == 0) {
+c0109ed0:	83 ec 0c             	sub    $0xc,%esp
+c0109ed3:	ff 75 f4             	pushl  -0xc(%ebp)
+c0109ed6:	e8 14 ed ff ff       	call   c0108bef <mm_count_dec>
+c0109edb:	83 c4 10             	add    $0x10,%esp
+c0109ede:	85 c0                	test   %eax,%eax
+c0109ee0:	75 2a                	jne    c0109f0c <do_execve+0xb8>
+            exit_mmap(mm);
+c0109ee2:	83 ec 0c             	sub    $0xc,%esp
+c0109ee5:	ff 75 f4             	pushl  -0xc(%ebp)
+c0109ee8:	e8 2c bd ff ff       	call   c0105c19 <exit_mmap>
+c0109eed:	83 c4 10             	add    $0x10,%esp
+            put_pgdir(mm);
+c0109ef0:	83 ec 0c             	sub    $0xc,%esp
+c0109ef3:	ff 75 f4             	pushl  -0xc(%ebp)
+c0109ef6:	e8 95 f4 ff ff       	call   c0109390 <put_pgdir>
+c0109efb:	83 c4 10             	add    $0x10,%esp
+            mm_destroy(mm);
+c0109efe:	83 ec 0c             	sub    $0xc,%esp
+c0109f01:	ff 75 f4             	pushl  -0xc(%ebp)
+c0109f04:	e8 82 ba ff ff       	call   c010598b <mm_destroy>
+c0109f09:	83 c4 10             	add    $0x10,%esp
+        }
+        current->mm = NULL;
+c0109f0c:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c0109f11:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
+    }
+    int ret;
+    if ((ret = load_icode(binary, size)) != 0) {
+c0109f18:	83 ec 08             	sub    $0x8,%esp
+c0109f1b:	ff 75 14             	pushl  0x14(%ebp)
+c0109f1e:	ff 75 10             	pushl  0x10(%ebp)
+c0109f21:	e8 50 f9 ff ff       	call   c0109876 <load_icode>
+c0109f26:	83 c4 10             	add    $0x10,%esp
+c0109f29:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0109f2c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0109f30:	75 1c                	jne    c0109f4e <do_execve+0xfa>
+        goto execve_exit;
+    }
+    set_proc_name(current, local_name);
+c0109f32:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c0109f37:	83 ec 08             	sub    $0x8,%esp
+c0109f3a:	8d 55 dc             	lea    -0x24(%ebp),%edx
+c0109f3d:	52                   	push   %edx
+c0109f3e:	50                   	push   %eax
+c0109f3f:	e8 a0 ee ff ff       	call   c0108de4 <set_proc_name>
+c0109f44:	83 c4 10             	add    $0x10,%esp
+    return 0;
+c0109f47:	b8 00 00 00 00       	mov    $0x0,%eax
+c0109f4c:	eb 26                	jmp    c0109f74 <do_execve+0x120>
+        }
+        current->mm = NULL;
+    }
+    int ret;
+    if ((ret = load_icode(binary, size)) != 0) {
+        goto execve_exit;
+c0109f4e:	90                   	nop
+    }
+    set_proc_name(current, local_name);
+    return 0;
+
+execve_exit:
+    do_exit(ret);
+c0109f4f:	83 ec 0c             	sub    $0xc,%esp
+c0109f52:	ff 75 f0             	pushl  -0x10(%ebp)
+c0109f55:	e8 4c f7 ff ff       	call   c01096a6 <do_exit>
+c0109f5a:	83 c4 10             	add    $0x10,%esp
+    panic("already exit: %e.\n", ret);
+c0109f5d:	ff 75 f0             	pushl  -0x10(%ebp)
+c0109f60:	68 33 db 10 c0       	push   $0xc010db33
+c0109f65:	68 c2 02 00 00       	push   $0x2c2
+c0109f6a:	68 3c d9 10 c0       	push   $0xc010d93c
+c0109f6f:	e8 80 64 ff ff       	call   c01003f4 <__panic>
+}
+c0109f74:	c9                   	leave  
+c0109f75:	c3                   	ret    
+
+c0109f76 <do_yield>:
+
+// do_yield - ask the scheduler to reschedule
+int
+do_yield(void) {
+c0109f76:	55                   	push   %ebp
+c0109f77:	89 e5                	mov    %esp,%ebp
+    current->need_resched = 1;
+c0109f79:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c0109f7e:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
+    return 0;
+c0109f85:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0109f8a:	5d                   	pop    %ebp
+c0109f8b:	c3                   	ret    
+
+c0109f8c <do_wait>:
+
+// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
+//         - proc struct of this child.
+// NOTE: only after do_wait function, all resources of the child proces are free.
+int
+do_wait(int pid, int *code_store) {
+c0109f8c:	55                   	push   %ebp
+c0109f8d:	89 e5                	mov    %esp,%ebp
+c0109f8f:	83 ec 18             	sub    $0x18,%esp
+    struct mm_struct *mm = current->mm;
+c0109f92:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c0109f97:	8b 40 18             	mov    0x18(%eax),%eax
+c0109f9a:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    if (code_store != NULL) {
+c0109f9d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c0109fa1:	74 21                	je     c0109fc4 <do_wait+0x38>
+        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
+c0109fa3:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0109fa6:	6a 01                	push   $0x1
+c0109fa8:	6a 04                	push   $0x4
+c0109faa:	50                   	push   %eax
+c0109fab:	ff 75 ec             	pushl  -0x14(%ebp)
+c0109fae:	e8 ba c5 ff ff       	call   c010656d <user_mem_check>
+c0109fb3:	83 c4 10             	add    $0x10,%esp
+c0109fb6:	85 c0                	test   %eax,%eax
+c0109fb8:	75 0a                	jne    c0109fc4 <do_wait+0x38>
+            return -E_INVAL;
+c0109fba:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+c0109fbf:	e9 54 01 00 00       	jmp    c010a118 <do_wait+0x18c>
+    }
+
+    struct proc_struct *proc;
+    bool intr_flag, haskid;
+repeat:
+    haskid = 0;
+c0109fc4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    if (pid != 0) {
+c0109fcb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0109fcf:	74 39                	je     c010a00a <do_wait+0x7e>
+        proc = find_proc(pid);
+c0109fd1:	83 ec 0c             	sub    $0xc,%esp
+c0109fd4:	ff 75 08             	pushl  0x8(%ebp)
+c0109fd7:	e8 dd f1 ff ff       	call   c01091b9 <find_proc>
+c0109fdc:	83 c4 10             	add    $0x10,%esp
+c0109fdf:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        if (proc != NULL && proc->parent == current) {
+c0109fe2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0109fe6:	74 4f                	je     c010a037 <do_wait+0xab>
+c0109fe8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109feb:	8b 50 14             	mov    0x14(%eax),%edx
+c0109fee:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c0109ff3:	39 c2                	cmp    %eax,%edx
+c0109ff5:	75 40                	jne    c010a037 <do_wait+0xab>
+            haskid = 1;
+c0109ff7:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
+            if (proc->state == PROC_ZOMBIE) {
+c0109ffe:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a001:	8b 00                	mov    (%eax),%eax
+c010a003:	83 f8 03             	cmp    $0x3,%eax
+c010a006:	75 2f                	jne    c010a037 <do_wait+0xab>
+                goto found;
+c010a008:	eb 7f                	jmp    c010a089 <do_wait+0xfd>
+            }
+        }
+    }
+    else {
+        proc = current->cptr;
+c010a00a:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c010a00f:	8b 40 70             	mov    0x70(%eax),%eax
+c010a012:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        for (; proc != NULL; proc = proc->optr) {
+c010a015:	eb 1a                	jmp    c010a031 <do_wait+0xa5>
+            haskid = 1;
+c010a017:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
+            if (proc->state == PROC_ZOMBIE) {
+c010a01e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a021:	8b 00                	mov    (%eax),%eax
+c010a023:	83 f8 03             	cmp    $0x3,%eax
+c010a026:	74 60                	je     c010a088 <do_wait+0xfc>
+            }
+        }
+    }
+    else {
+        proc = current->cptr;
+        for (; proc != NULL; proc = proc->optr) {
+c010a028:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a02b:	8b 40 78             	mov    0x78(%eax),%eax
+c010a02e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010a031:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010a035:	75 e0                	jne    c010a017 <do_wait+0x8b>
+            if (proc->state == PROC_ZOMBIE) {
+                goto found;
+            }
+        }
+    }
+    if (haskid) {
+c010a037:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010a03b:	74 41                	je     c010a07e <do_wait+0xf2>
+        current->state = PROC_SLEEPING;
+c010a03d:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c010a042:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
+        current->wait_state = WT_CHILD;
+c010a048:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c010a04d:	c7 40 6c 01 00 00 80 	movl   $0x80000001,0x6c(%eax)
+        schedule();
+c010a054:	e8 d1 06 00 00       	call   c010a72a <schedule>
+        if (current->flags & PF_EXITING) {
+c010a059:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c010a05e:	8b 40 44             	mov    0x44(%eax),%eax
+c010a061:	83 e0 01             	and    $0x1,%eax
+c010a064:	85 c0                	test   %eax,%eax
+c010a066:	0f 84 58 ff ff ff    	je     c0109fc4 <do_wait+0x38>
+            do_exit(-E_KILLED);
+c010a06c:	83 ec 0c             	sub    $0xc,%esp
+c010a06f:	6a f7                	push   $0xfffffff7
+c010a071:	e8 30 f6 ff ff       	call   c01096a6 <do_exit>
+c010a076:	83 c4 10             	add    $0x10,%esp
+        }
+        goto repeat;
+c010a079:	e9 46 ff ff ff       	jmp    c0109fc4 <do_wait+0x38>
+    }
+    return -E_BAD_PROC;
+c010a07e:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
+c010a083:	e9 90 00 00 00       	jmp    c010a118 <do_wait+0x18c>
+    else {
+        proc = current->cptr;
+        for (; proc != NULL; proc = proc->optr) {
+            haskid = 1;
+            if (proc->state == PROC_ZOMBIE) {
+                goto found;
+c010a088:	90                   	nop
+        goto repeat;
+    }
+    return -E_BAD_PROC;
+
+found:
+    if (proc == idleproc || proc == initproc) {
+c010a089:	a1 00 ed 1a c0       	mov    0xc01aed00,%eax
+c010a08e:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+c010a091:	74 0a                	je     c010a09d <do_wait+0x111>
+c010a093:	a1 04 ed 1a c0       	mov    0xc01aed04,%eax
+c010a098:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+c010a09b:	75 17                	jne    c010a0b4 <do_wait+0x128>
+        panic("wait idleproc or initproc.\n");
+c010a09d:	83 ec 04             	sub    $0x4,%esp
+c010a0a0:	68 46 db 10 c0       	push   $0xc010db46
+c010a0a5:	68 fb 02 00 00       	push   $0x2fb
+c010a0aa:	68 3c d9 10 c0       	push   $0xc010d93c
+c010a0af:	e8 40 63 ff ff       	call   c01003f4 <__panic>
+    }
+    if (code_store != NULL) {
+c010a0b4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c010a0b8:	74 0b                	je     c010a0c5 <do_wait+0x139>
+        *code_store = proc->exit_code;
+c010a0ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a0bd:	8b 50 68             	mov    0x68(%eax),%edx
+c010a0c0:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010a0c3:	89 10                	mov    %edx,(%eax)
+    }
+    local_intr_save(intr_flag);
+c010a0c5:	e8 7c e9 ff ff       	call   c0108a46 <__intr_save>
+c010a0ca:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    {
+        unhash_proc(proc);
+c010a0cd:	83 ec 0c             	sub    $0xc,%esp
+c010a0d0:	ff 75 f4             	pushl  -0xc(%ebp)
+c010a0d3:	e8 ad f0 ff ff       	call   c0109185 <unhash_proc>
+c010a0d8:	83 c4 10             	add    $0x10,%esp
+        remove_links(proc);
+c010a0db:	83 ec 0c             	sub    $0xc,%esp
+c010a0de:	ff 75 f4             	pushl  -0xc(%ebp)
+c010a0e1:	e8 0e ee ff ff       	call   c0108ef4 <remove_links>
+c010a0e6:	83 c4 10             	add    $0x10,%esp
+    }
+    local_intr_restore(intr_flag);
+c010a0e9:	83 ec 0c             	sub    $0xc,%esp
+c010a0ec:	ff 75 e8             	pushl  -0x18(%ebp)
+c010a0ef:	e8 7c e9 ff ff       	call   c0108a70 <__intr_restore>
+c010a0f4:	83 c4 10             	add    $0x10,%esp
+    put_kstack(proc);
+c010a0f7:	83 ec 0c             	sub    $0xc,%esp
+c010a0fa:	ff 75 f4             	pushl  -0xc(%ebp)
+c010a0fd:	e8 cc f1 ff ff       	call   c01092ce <put_kstack>
+c010a102:	83 c4 10             	add    $0x10,%esp
+    kfree(proc);
+c010a105:	83 ec 0c             	sub    $0xc,%esp
+c010a108:	ff 75 f4             	pushl  -0xc(%ebp)
+c010a10b:	e8 7e cb ff ff       	call   c0106c8e <kfree>
+c010a110:	83 c4 10             	add    $0x10,%esp
+    return 0;
+c010a113:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010a118:	c9                   	leave  
+c010a119:	c3                   	ret    
+
+c010a11a <do_kill>:
+
+// do_kill - kill process with pid by set this process's flags with PF_EXITING
+int
+do_kill(int pid) {
+c010a11a:	55                   	push   %ebp
+c010a11b:	89 e5                	mov    %esp,%ebp
+c010a11d:	83 ec 18             	sub    $0x18,%esp
+    struct proc_struct *proc;
+    if ((proc = find_proc(pid)) != NULL) {
+c010a120:	83 ec 0c             	sub    $0xc,%esp
+c010a123:	ff 75 08             	pushl  0x8(%ebp)
+c010a126:	e8 8e f0 ff ff       	call   c01091b9 <find_proc>
+c010a12b:	83 c4 10             	add    $0x10,%esp
+c010a12e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010a131:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010a135:	74 44                	je     c010a17b <do_kill+0x61>
+        if (!(proc->flags & PF_EXITING)) {
+c010a137:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a13a:	8b 40 44             	mov    0x44(%eax),%eax
+c010a13d:	83 e0 01             	and    $0x1,%eax
+c010a140:	85 c0                	test   %eax,%eax
+c010a142:	75 30                	jne    c010a174 <do_kill+0x5a>
+            proc->flags |= PF_EXITING;
+c010a144:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a147:	8b 40 44             	mov    0x44(%eax),%eax
+c010a14a:	83 c8 01             	or     $0x1,%eax
+c010a14d:	89 c2                	mov    %eax,%edx
+c010a14f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a152:	89 50 44             	mov    %edx,0x44(%eax)
+            if (proc->wait_state & WT_INTERRUPTED) {
+c010a155:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a158:	8b 40 6c             	mov    0x6c(%eax),%eax
+c010a15b:	85 c0                	test   %eax,%eax
+c010a15d:	79 0e                	jns    c010a16d <do_kill+0x53>
+                wakeup_proc(proc);
+c010a15f:	83 ec 0c             	sub    $0xc,%esp
+c010a162:	ff 75 f4             	pushl  -0xc(%ebp)
+c010a165:	e8 33 05 00 00       	call   c010a69d <wakeup_proc>
+c010a16a:	83 c4 10             	add    $0x10,%esp
+            }
+            return 0;
+c010a16d:	b8 00 00 00 00       	mov    $0x0,%eax
+c010a172:	eb 0c                	jmp    c010a180 <do_kill+0x66>
+        }
+        return -E_KILLED;
+c010a174:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
+c010a179:	eb 05                	jmp    c010a180 <do_kill+0x66>
+    }
+    return -E_INVAL;
+c010a17b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+}
+c010a180:	c9                   	leave  
+c010a181:	c3                   	ret    
+
+c010a182 <kernel_execve>:
+
+// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
+static int
+kernel_execve(const char *name, unsigned char *binary, size_t size) {
+c010a182:	55                   	push   %ebp
+c010a183:	89 e5                	mov    %esp,%ebp
+c010a185:	57                   	push   %edi
+c010a186:	56                   	push   %esi
+c010a187:	53                   	push   %ebx
+c010a188:	83 ec 1c             	sub    $0x1c,%esp
+    int ret, len = strlen(name);
+c010a18b:	83 ec 0c             	sub    $0xc,%esp
+c010a18e:	ff 75 08             	pushl  0x8(%ebp)
+c010a191:	e8 a2 0b 00 00       	call   c010ad38 <strlen>
+c010a196:	83 c4 10             	add    $0x10,%esp
+c010a199:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    asm volatile (
+c010a19c:	b8 04 00 00 00       	mov    $0x4,%eax
+c010a1a1:	8b 55 08             	mov    0x8(%ebp),%edx
+c010a1a4:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+c010a1a7:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+c010a1aa:	8b 75 10             	mov    0x10(%ebp),%esi
+c010a1ad:	89 f7                	mov    %esi,%edi
+c010a1af:	cd 80                	int    $0x80
+c010a1b1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (len), "b" (binary), "D" (size)
+        : "memory");
+    return ret;
+c010a1b4:	8b 45 e0             	mov    -0x20(%ebp),%eax
+}
+c010a1b7:	8d 65 f4             	lea    -0xc(%ebp),%esp
+c010a1ba:	5b                   	pop    %ebx
+c010a1bb:	5e                   	pop    %esi
+c010a1bc:	5f                   	pop    %edi
+c010a1bd:	5d                   	pop    %ebp
+c010a1be:	c3                   	ret    
+
+c010a1bf <user_main>:
+
+#define KERNEL_EXECVE2(x, xstart, xsize)        __KERNEL_EXECVE2(x, xstart, xsize)
+
+// user_main - kernel thread used to exec a user program
+static int
+user_main(void *arg) {
+c010a1bf:	55                   	push   %ebp
+c010a1c0:	89 e5                	mov    %esp,%ebp
+c010a1c2:	83 ec 08             	sub    $0x8,%esp
+#ifdef TEST
+    KERNEL_EXECVE2(TEST, TESTSTART, TESTSIZE);
+c010a1c5:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c010a1ca:	8b 40 04             	mov    0x4(%eax),%eax
+c010a1cd:	83 ec 04             	sub    $0x4,%esp
+c010a1d0:	68 62 db 10 c0       	push   $0xc010db62
+c010a1d5:	50                   	push   %eax
+c010a1d6:	68 6c db 10 c0       	push   $0xc010db6c
+c010a1db:	e8 ae 60 ff ff       	call   c010028e <cprintf>
+c010a1e0:	83 c4 10             	add    $0x10,%esp
+c010a1e3:	b8 b8 79 00 00       	mov    $0x79b8,%eax
+c010a1e8:	83 ec 04             	sub    $0x4,%esp
+c010a1eb:	50                   	push   %eax
+c010a1ec:	68 2c 1f 16 c0       	push   $0xc0161f2c
+c010a1f1:	68 62 db 10 c0       	push   $0xc010db62
+c010a1f6:	e8 87 ff ff ff       	call   c010a182 <kernel_execve>
+c010a1fb:	83 c4 10             	add    $0x10,%esp
+#else
+    KERNEL_EXECVE(exit);
+#endif
+    panic("user_main execve failed.\n");
+c010a1fe:	83 ec 04             	sub    $0x4,%esp
+c010a201:	68 93 db 10 c0       	push   $0xc010db93
+c010a206:	68 44 03 00 00       	push   $0x344
+c010a20b:	68 3c d9 10 c0       	push   $0xc010d93c
+c010a210:	e8 df 61 ff ff       	call   c01003f4 <__panic>
+
+c010a215 <init_main>:
+}
+
+// init_main - the second kernel thread used to create user_main kernel threads
+static int
+init_main(void *arg) {
+c010a215:	55                   	push   %ebp
+c010a216:	89 e5                	mov    %esp,%ebp
+c010a218:	83 ec 28             	sub    $0x28,%esp
+    size_t nr_free_pages_store = nr_free_pages();
+c010a21b:	e8 ed 96 ff ff       	call   c010390d <nr_free_pages>
+c010a220:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    size_t kernel_allocated_store = kallocated();
+c010a223:	e8 31 c9 ff ff       	call   c0106b59 <kallocated>
+c010a228:	89 45 f0             	mov    %eax,-0x10(%ebp)
+
+    int pid = kernel_thread(user_main, NULL, 0);
+c010a22b:	83 ec 04             	sub    $0x4,%esp
+c010a22e:	6a 00                	push   $0x0
+c010a230:	6a 00                	push   $0x0
+c010a232:	68 bf a1 10 c0       	push   $0xc010a1bf
+c010a237:	e8 ed ef ff ff       	call   c0109229 <kernel_thread>
+c010a23c:	83 c4 10             	add    $0x10,%esp
+c010a23f:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    if (pid <= 0) {
+c010a242:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c010a246:	7f 1c                	jg     c010a264 <init_main+0x4f>
+        panic("create user_main failed.\n");
+c010a248:	83 ec 04             	sub    $0x4,%esp
+c010a24b:	68 ad db 10 c0       	push   $0xc010dbad
+c010a250:	68 4f 03 00 00       	push   $0x34f
+c010a255:	68 3c d9 10 c0       	push   $0xc010d93c
+c010a25a:	e8 95 61 ff ff       	call   c01003f4 <__panic>
+    }
+
+    while (do_wait(0, NULL) == 0) {
+        schedule();
+c010a25f:	e8 c6 04 00 00       	call   c010a72a <schedule>
+    int pid = kernel_thread(user_main, NULL, 0);
+    if (pid <= 0) {
+        panic("create user_main failed.\n");
+    }
+
+    while (do_wait(0, NULL) == 0) {
+c010a264:	83 ec 08             	sub    $0x8,%esp
+c010a267:	6a 00                	push   $0x0
+c010a269:	6a 00                	push   $0x0
+c010a26b:	e8 1c fd ff ff       	call   c0109f8c <do_wait>
+c010a270:	83 c4 10             	add    $0x10,%esp
+c010a273:	85 c0                	test   %eax,%eax
+c010a275:	74 e8                	je     c010a25f <init_main+0x4a>
+        schedule();
+    }
+
+    cprintf("all user-mode processes have quit.\n");
+c010a277:	83 ec 0c             	sub    $0xc,%esp
+c010a27a:	68 c8 db 10 c0       	push   $0xc010dbc8
+c010a27f:	e8 0a 60 ff ff       	call   c010028e <cprintf>
+c010a284:	83 c4 10             	add    $0x10,%esp
+    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
+c010a287:	a1 04 ed 1a c0       	mov    0xc01aed04,%eax
+c010a28c:	8b 40 70             	mov    0x70(%eax),%eax
+c010a28f:	85 c0                	test   %eax,%eax
+c010a291:	75 18                	jne    c010a2ab <init_main+0x96>
+c010a293:	a1 04 ed 1a c0       	mov    0xc01aed04,%eax
+c010a298:	8b 40 74             	mov    0x74(%eax),%eax
+c010a29b:	85 c0                	test   %eax,%eax
+c010a29d:	75 0c                	jne    c010a2ab <init_main+0x96>
+c010a29f:	a1 04 ed 1a c0       	mov    0xc01aed04,%eax
+c010a2a4:	8b 40 78             	mov    0x78(%eax),%eax
+c010a2a7:	85 c0                	test   %eax,%eax
+c010a2a9:	74 19                	je     c010a2c4 <init_main+0xaf>
+c010a2ab:	68 ec db 10 c0       	push   $0xc010dbec
+c010a2b0:	68 69 d9 10 c0       	push   $0xc010d969
+c010a2b5:	68 57 03 00 00       	push   $0x357
+c010a2ba:	68 3c d9 10 c0       	push   $0xc010d93c
+c010a2bf:	e8 30 61 ff ff       	call   c01003f4 <__panic>
+    assert(nr_process == 2);
+c010a2c4:	a1 20 0d 1b c0       	mov    0xc01b0d20,%eax
+c010a2c9:	83 f8 02             	cmp    $0x2,%eax
+c010a2cc:	74 19                	je     c010a2e7 <init_main+0xd2>
+c010a2ce:	68 37 dc 10 c0       	push   $0xc010dc37
+c010a2d3:	68 69 d9 10 c0       	push   $0xc010d969
+c010a2d8:	68 58 03 00 00       	push   $0x358
+c010a2dd:	68 3c d9 10 c0       	push   $0xc010d93c
+c010a2e2:	e8 0d 61 ff ff       	call   c01003f4 <__panic>
+c010a2e7:	c7 45 e4 50 0e 1b c0 	movl   $0xc01b0e50,-0x1c(%ebp)
+c010a2ee:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010a2f1:	8b 40 04             	mov    0x4(%eax),%eax
+    assert(list_next(&proc_list) == &(initproc->list_link));
+c010a2f4:	8b 15 04 ed 1a c0    	mov    0xc01aed04,%edx
+c010a2fa:	83 c2 58             	add    $0x58,%edx
+c010a2fd:	39 d0                	cmp    %edx,%eax
+c010a2ff:	74 19                	je     c010a31a <init_main+0x105>
+c010a301:	68 48 dc 10 c0       	push   $0xc010dc48
+c010a306:	68 69 d9 10 c0       	push   $0xc010d969
+c010a30b:	68 59 03 00 00       	push   $0x359
+c010a310:	68 3c d9 10 c0       	push   $0xc010d93c
+c010a315:	e8 da 60 ff ff       	call   c01003f4 <__panic>
+c010a31a:	c7 45 e8 50 0e 1b c0 	movl   $0xc01b0e50,-0x18(%ebp)
+ * list_prev - get the previous entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_prev(list_entry_t *listelm) {
+    return listelm->prev;
+c010a321:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010a324:	8b 00                	mov    (%eax),%eax
+    assert(list_prev(&proc_list) == &(initproc->list_link));
+c010a326:	8b 15 04 ed 1a c0    	mov    0xc01aed04,%edx
+c010a32c:	83 c2 58             	add    $0x58,%edx
+c010a32f:	39 d0                	cmp    %edx,%eax
+c010a331:	74 19                	je     c010a34c <init_main+0x137>
+c010a333:	68 78 dc 10 c0       	push   $0xc010dc78
+c010a338:	68 69 d9 10 c0       	push   $0xc010d969
+c010a33d:	68 5a 03 00 00       	push   $0x35a
+c010a342:	68 3c d9 10 c0       	push   $0xc010d93c
+c010a347:	e8 a8 60 ff ff       	call   c01003f4 <__panic>
+
+    cprintf("init check memory pass.\n");
+c010a34c:	83 ec 0c             	sub    $0xc,%esp
+c010a34f:	68 a8 dc 10 c0       	push   $0xc010dca8
+c010a354:	e8 35 5f ff ff       	call   c010028e <cprintf>
+c010a359:	83 c4 10             	add    $0x10,%esp
+    return 0;
+c010a35c:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010a361:	c9                   	leave  
+c010a362:	c3                   	ret    
+
+c010a363 <proc_init>:
+
+// proc_init - set up the first kernel thread idleproc "idle" by itself and 
+//           - create the second kernel thread init_main
+void
+proc_init(void) {
+c010a363:	55                   	push   %ebp
+c010a364:	89 e5                	mov    %esp,%ebp
+c010a366:	83 ec 18             	sub    $0x18,%esp
+c010a369:	c7 45 e8 50 0e 1b c0 	movl   $0xc01b0e50,-0x18(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c010a370:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010a373:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010a376:	89 50 04             	mov    %edx,0x4(%eax)
+c010a379:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010a37c:	8b 50 04             	mov    0x4(%eax),%edx
+c010a37f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010a382:	89 10                	mov    %edx,(%eax)
+    int i;
+
+    list_init(&proc_list);
+    for (i = 0; i < HASH_LIST_SIZE; i ++) {
+c010a384:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c010a38b:	eb 26                	jmp    c010a3b3 <proc_init+0x50>
+        list_init(hash_list + i);
+c010a38d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a390:	c1 e0 03             	shl    $0x3,%eax
+c010a393:	05 20 ed 1a c0       	add    $0xc01aed20,%eax
+c010a398:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010a39b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a39e:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010a3a1:	89 50 04             	mov    %edx,0x4(%eax)
+c010a3a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a3a7:	8b 50 04             	mov    0x4(%eax),%edx
+c010a3aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a3ad:	89 10                	mov    %edx,(%eax)
+void
+proc_init(void) {
+    int i;
+
+    list_init(&proc_list);
+    for (i = 0; i < HASH_LIST_SIZE; i ++) {
+c010a3af:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c010a3b3:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
+c010a3ba:	7e d1                	jle    c010a38d <proc_init+0x2a>
+        list_init(hash_list + i);
+    }
+
+    if ((idleproc = alloc_proc()) == NULL) {
+c010a3bc:	e8 8a e8 ff ff       	call   c0108c4b <alloc_proc>
+c010a3c1:	a3 00 ed 1a c0       	mov    %eax,0xc01aed00
+c010a3c6:	a1 00 ed 1a c0       	mov    0xc01aed00,%eax
+c010a3cb:	85 c0                	test   %eax,%eax
+c010a3cd:	75 17                	jne    c010a3e6 <proc_init+0x83>
+        panic("cannot alloc idleproc.\n");
+c010a3cf:	83 ec 04             	sub    $0x4,%esp
+c010a3d2:	68 c1 dc 10 c0       	push   $0xc010dcc1
+c010a3d7:	68 6c 03 00 00       	push   $0x36c
+c010a3dc:	68 3c d9 10 c0       	push   $0xc010d93c
+c010a3e1:	e8 0e 60 ff ff       	call   c01003f4 <__panic>
+    }
+
+    idleproc->pid = 0;
+c010a3e6:	a1 00 ed 1a c0       	mov    0xc01aed00,%eax
+c010a3eb:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
+    idleproc->state = PROC_RUNNABLE;
+c010a3f2:	a1 00 ed 1a c0       	mov    0xc01aed00,%eax
+c010a3f7:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
+    idleproc->kstack = (uintptr_t)bootstack;
+c010a3fd:	a1 00 ed 1a c0       	mov    0xc01aed00,%eax
+c010a402:	ba 00 a0 12 c0       	mov    $0xc012a000,%edx
+c010a407:	89 50 0c             	mov    %edx,0xc(%eax)
+    idleproc->need_resched = 1;
+c010a40a:	a1 00 ed 1a c0       	mov    0xc01aed00,%eax
+c010a40f:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
+    set_proc_name(idleproc, "idle");
+c010a416:	a1 00 ed 1a c0       	mov    0xc01aed00,%eax
+c010a41b:	83 ec 08             	sub    $0x8,%esp
+c010a41e:	68 d9 dc 10 c0       	push   $0xc010dcd9
+c010a423:	50                   	push   %eax
+c010a424:	e8 bb e9 ff ff       	call   c0108de4 <set_proc_name>
+c010a429:	83 c4 10             	add    $0x10,%esp
+    nr_process ++;
+c010a42c:	a1 20 0d 1b c0       	mov    0xc01b0d20,%eax
+c010a431:	83 c0 01             	add    $0x1,%eax
+c010a434:	a3 20 0d 1b c0       	mov    %eax,0xc01b0d20
+
+    current = idleproc;
+c010a439:	a1 00 ed 1a c0       	mov    0xc01aed00,%eax
+c010a43e:	a3 08 ed 1a c0       	mov    %eax,0xc01aed08
+
+    int pid = kernel_thread(init_main, NULL, 0);
+c010a443:	83 ec 04             	sub    $0x4,%esp
+c010a446:	6a 00                	push   $0x0
+c010a448:	6a 00                	push   $0x0
+c010a44a:	68 15 a2 10 c0       	push   $0xc010a215
+c010a44f:	e8 d5 ed ff ff       	call   c0109229 <kernel_thread>
+c010a454:	83 c4 10             	add    $0x10,%esp
+c010a457:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    if (pid <= 0) {
+c010a45a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c010a45e:	7f 17                	jg     c010a477 <proc_init+0x114>
+        panic("create init_main failed.\n");
+c010a460:	83 ec 04             	sub    $0x4,%esp
+c010a463:	68 de dc 10 c0       	push   $0xc010dcde
+c010a468:	68 7a 03 00 00       	push   $0x37a
+c010a46d:	68 3c d9 10 c0       	push   $0xc010d93c
+c010a472:	e8 7d 5f ff ff       	call   c01003f4 <__panic>
+    }
+
+    initproc = find_proc(pid);
+c010a477:	83 ec 0c             	sub    $0xc,%esp
+c010a47a:	ff 75 ec             	pushl  -0x14(%ebp)
+c010a47d:	e8 37 ed ff ff       	call   c01091b9 <find_proc>
+c010a482:	83 c4 10             	add    $0x10,%esp
+c010a485:	a3 04 ed 1a c0       	mov    %eax,0xc01aed04
+    set_proc_name(initproc, "init");
+c010a48a:	a1 04 ed 1a c0       	mov    0xc01aed04,%eax
+c010a48f:	83 ec 08             	sub    $0x8,%esp
+c010a492:	68 f8 dc 10 c0       	push   $0xc010dcf8
+c010a497:	50                   	push   %eax
+c010a498:	e8 47 e9 ff ff       	call   c0108de4 <set_proc_name>
+c010a49d:	83 c4 10             	add    $0x10,%esp
+
+    assert(idleproc != NULL && idleproc->pid == 0);
+c010a4a0:	a1 00 ed 1a c0       	mov    0xc01aed00,%eax
+c010a4a5:	85 c0                	test   %eax,%eax
+c010a4a7:	74 0c                	je     c010a4b5 <proc_init+0x152>
+c010a4a9:	a1 00 ed 1a c0       	mov    0xc01aed00,%eax
+c010a4ae:	8b 40 04             	mov    0x4(%eax),%eax
+c010a4b1:	85 c0                	test   %eax,%eax
+c010a4b3:	74 19                	je     c010a4ce <proc_init+0x16b>
+c010a4b5:	68 00 dd 10 c0       	push   $0xc010dd00
+c010a4ba:	68 69 d9 10 c0       	push   $0xc010d969
+c010a4bf:	68 80 03 00 00       	push   $0x380
+c010a4c4:	68 3c d9 10 c0       	push   $0xc010d93c
+c010a4c9:	e8 26 5f ff ff       	call   c01003f4 <__panic>
+    assert(initproc != NULL && initproc->pid == 1);
+c010a4ce:	a1 04 ed 1a c0       	mov    0xc01aed04,%eax
+c010a4d3:	85 c0                	test   %eax,%eax
+c010a4d5:	74 0d                	je     c010a4e4 <proc_init+0x181>
+c010a4d7:	a1 04 ed 1a c0       	mov    0xc01aed04,%eax
+c010a4dc:	8b 40 04             	mov    0x4(%eax),%eax
+c010a4df:	83 f8 01             	cmp    $0x1,%eax
+c010a4e2:	74 19                	je     c010a4fd <proc_init+0x19a>
+c010a4e4:	68 28 dd 10 c0       	push   $0xc010dd28
+c010a4e9:	68 69 d9 10 c0       	push   $0xc010d969
+c010a4ee:	68 81 03 00 00       	push   $0x381
+c010a4f3:	68 3c d9 10 c0       	push   $0xc010d93c
+c010a4f8:	e8 f7 5e ff ff       	call   c01003f4 <__panic>
+}
+c010a4fd:	90                   	nop
+c010a4fe:	c9                   	leave  
+c010a4ff:	c3                   	ret    
+
+c010a500 <cpu_idle>:
+
+// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
+void
+cpu_idle(void) {
+c010a500:	55                   	push   %ebp
+c010a501:	89 e5                	mov    %esp,%ebp
+c010a503:	83 ec 08             	sub    $0x8,%esp
+    while (1) {
+        if (current->need_resched) {
+c010a506:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c010a50b:	8b 40 10             	mov    0x10(%eax),%eax
+c010a50e:	85 c0                	test   %eax,%eax
+c010a510:	74 f4                	je     c010a506 <cpu_idle+0x6>
+            schedule();
+c010a512:	e8 13 02 00 00       	call   c010a72a <schedule>
+        }
+    }
+c010a517:	eb ed                	jmp    c010a506 <cpu_idle+0x6>
+
+c010a519 <lab6_set_priority>:
+}
+
+//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
+void
+lab6_set_priority(uint32_t priority)
+{
+c010a519:	55                   	push   %ebp
+c010a51a:	89 e5                	mov    %esp,%ebp
+    if (priority == 0)
+c010a51c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010a520:	75 11                	jne    c010a533 <lab6_set_priority+0x1a>
+        current->lab6_priority = 1;
+c010a522:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c010a527:	c7 80 9c 00 00 00 01 	movl   $0x1,0x9c(%eax)
+c010a52e:	00 00 00 
+    else current->lab6_priority = priority;
+}
+c010a531:	eb 0e                	jmp    c010a541 <lab6_set_priority+0x28>
+void
+lab6_set_priority(uint32_t priority)
+{
+    if (priority == 0)
+        current->lab6_priority = 1;
+    else current->lab6_priority = priority;
+c010a533:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c010a538:	8b 55 08             	mov    0x8(%ebp),%edx
+c010a53b:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
+}
+c010a541:	90                   	nop
+c010a542:	5d                   	pop    %ebp
+c010a543:	c3                   	ret    
+
+c010a544 <__intr_save>:
+#include <assert.h>
+#include <atomic.h>
+#include <sched.h>
+
+static inline bool
+__intr_save(void) {
+c010a544:	55                   	push   %ebp
+c010a545:	89 e5                	mov    %esp,%ebp
+c010a547:	83 ec 18             	sub    $0x18,%esp
+}
+
+static inline uint32_t
+read_eflags(void) {
+    uint32_t eflags;
+    asm volatile ("pushfl; popl %0" : "=r" (eflags));
+c010a54a:	9c                   	pushf  
+c010a54b:	58                   	pop    %eax
+c010a54c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return eflags;
+c010a54f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    if (read_eflags() & FL_IF) {
+c010a552:	25 00 02 00 00       	and    $0x200,%eax
+c010a557:	85 c0                	test   %eax,%eax
+c010a559:	74 0c                	je     c010a567 <__intr_save+0x23>
+        intr_disable();
+c010a55b:	e8 31 7c ff ff       	call   c0102191 <intr_disable>
+        return 1;
+c010a560:	b8 01 00 00 00       	mov    $0x1,%eax
+c010a565:	eb 05                	jmp    c010a56c <__intr_save+0x28>
+    }
+    return 0;
+c010a567:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010a56c:	c9                   	leave  
+c010a56d:	c3                   	ret    
+
+c010a56e <__intr_restore>:
+
+static inline void
+__intr_restore(bool flag) {
+c010a56e:	55                   	push   %ebp
+c010a56f:	89 e5                	mov    %esp,%ebp
+c010a571:	83 ec 08             	sub    $0x8,%esp
+    if (flag) {
+c010a574:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010a578:	74 05                	je     c010a57f <__intr_restore+0x11>
+        intr_enable();
+c010a57a:	e8 0b 7c ff ff       	call   c010218a <intr_enable>
+    }
+}
+c010a57f:	90                   	nop
+c010a580:	c9                   	leave  
+c010a581:	c3                   	ret    
+
+c010a582 <sched_class_enqueue>:
+static struct sched_class *sched_class;
+
+static struct run_queue *rq;
+
+static inline void
+sched_class_enqueue(struct proc_struct *proc) {
+c010a582:	55                   	push   %ebp
+c010a583:	89 e5                	mov    %esp,%ebp
+c010a585:	83 ec 08             	sub    $0x8,%esp
+    if (proc != idleproc) {
+c010a588:	a1 00 ed 1a c0       	mov    0xc01aed00,%eax
+c010a58d:	39 45 08             	cmp    %eax,0x8(%ebp)
+c010a590:	74 1a                	je     c010a5ac <sched_class_enqueue+0x2a>
+        sched_class->enqueue(rq, proc);
+c010a592:	a1 3c 0d 1b c0       	mov    0xc01b0d3c,%eax
+c010a597:	8b 40 08             	mov    0x8(%eax),%eax
+c010a59a:	8b 15 40 0d 1b c0    	mov    0xc01b0d40,%edx
+c010a5a0:	83 ec 08             	sub    $0x8,%esp
+c010a5a3:	ff 75 08             	pushl  0x8(%ebp)
+c010a5a6:	52                   	push   %edx
+c010a5a7:	ff d0                	call   *%eax
+c010a5a9:	83 c4 10             	add    $0x10,%esp
+    }
+}
+c010a5ac:	90                   	nop
+c010a5ad:	c9                   	leave  
+c010a5ae:	c3                   	ret    
+
+c010a5af <sched_class_dequeue>:
+
+static inline void
+sched_class_dequeue(struct proc_struct *proc) {
+c010a5af:	55                   	push   %ebp
+c010a5b0:	89 e5                	mov    %esp,%ebp
+c010a5b2:	83 ec 08             	sub    $0x8,%esp
+    sched_class->dequeue(rq, proc);
+c010a5b5:	a1 3c 0d 1b c0       	mov    0xc01b0d3c,%eax
+c010a5ba:	8b 40 0c             	mov    0xc(%eax),%eax
+c010a5bd:	8b 15 40 0d 1b c0    	mov    0xc01b0d40,%edx
+c010a5c3:	83 ec 08             	sub    $0x8,%esp
+c010a5c6:	ff 75 08             	pushl  0x8(%ebp)
+c010a5c9:	52                   	push   %edx
+c010a5ca:	ff d0                	call   *%eax
+c010a5cc:	83 c4 10             	add    $0x10,%esp
+}
+c010a5cf:	90                   	nop
+c010a5d0:	c9                   	leave  
+c010a5d1:	c3                   	ret    
+
+c010a5d2 <sched_class_pick_next>:
+
+static inline struct proc_struct *
+sched_class_pick_next(void) {
+c010a5d2:	55                   	push   %ebp
+c010a5d3:	89 e5                	mov    %esp,%ebp
+c010a5d5:	83 ec 08             	sub    $0x8,%esp
+    return sched_class->pick_next(rq);
+c010a5d8:	a1 3c 0d 1b c0       	mov    0xc01b0d3c,%eax
+c010a5dd:	8b 40 10             	mov    0x10(%eax),%eax
+c010a5e0:	8b 15 40 0d 1b c0    	mov    0xc01b0d40,%edx
+c010a5e6:	83 ec 0c             	sub    $0xc,%esp
+c010a5e9:	52                   	push   %edx
+c010a5ea:	ff d0                	call   *%eax
+c010a5ec:	83 c4 10             	add    $0x10,%esp
+}
+c010a5ef:	c9                   	leave  
+c010a5f0:	c3                   	ret    
+
+c010a5f1 <sched_class_proc_tick>:
+
+extern void
+sched_class_proc_tick(struct proc_struct *proc) {
+c010a5f1:	55                   	push   %ebp
+c010a5f2:	89 e5                	mov    %esp,%ebp
+c010a5f4:	83 ec 08             	sub    $0x8,%esp
+    if (proc != idleproc) {
+c010a5f7:	a1 00 ed 1a c0       	mov    0xc01aed00,%eax
+c010a5fc:	39 45 08             	cmp    %eax,0x8(%ebp)
+c010a5ff:	74 1c                	je     c010a61d <sched_class_proc_tick+0x2c>
+        sched_class->proc_tick(rq, proc);
+c010a601:	a1 3c 0d 1b c0       	mov    0xc01b0d3c,%eax
+c010a606:	8b 40 14             	mov    0x14(%eax),%eax
+c010a609:	8b 15 40 0d 1b c0    	mov    0xc01b0d40,%edx
+c010a60f:	83 ec 08             	sub    $0x8,%esp
+c010a612:	ff 75 08             	pushl  0x8(%ebp)
+c010a615:	52                   	push   %edx
+c010a616:	ff d0                	call   *%eax
+c010a618:	83 c4 10             	add    $0x10,%esp
+    }
+    else {
+        proc->need_resched = 1;
+    }
+}
+c010a61b:	eb 0a                	jmp    c010a627 <sched_class_proc_tick+0x36>
+sched_class_proc_tick(struct proc_struct *proc) {
+    if (proc != idleproc) {
+        sched_class->proc_tick(rq, proc);
+    }
+    else {
+        proc->need_resched = 1;
+c010a61d:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a620:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
+    }
+}
+c010a627:	90                   	nop
+c010a628:	c9                   	leave  
+c010a629:	c3                   	ret    
+
+c010a62a <sched_init>:
+
+static struct run_queue __rq;
+
+void
+sched_init(void) {
+c010a62a:	55                   	push   %ebp
+c010a62b:	89 e5                	mov    %esp,%ebp
+c010a62d:	83 ec 18             	sub    $0x18,%esp
+c010a630:	c7 45 f4 34 0d 1b c0 	movl   $0xc01b0d34,-0xc(%ebp)
+c010a637:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a63a:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010a63d:	89 50 04             	mov    %edx,0x4(%eax)
+c010a640:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a643:	8b 50 04             	mov    0x4(%eax),%edx
+c010a646:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a649:	89 10                	mov    %edx,(%eax)
+    list_init(&timer_list);
+
+    sched_class = &default_sched_class;
+c010a64b:	c7 05 3c 0d 1b c0 74 	movl   $0xc012ca74,0xc01b0d3c
+c010a652:	ca 12 c0 
+
+    rq = &__rq;
+c010a655:	c7 05 40 0d 1b c0 44 	movl   $0xc01b0d44,0xc01b0d40
+c010a65c:	0d 1b c0 
+    rq->max_time_slice = MAX_TIME_SLICE;
+c010a65f:	a1 40 0d 1b c0       	mov    0xc01b0d40,%eax
+c010a664:	c7 40 0c 05 00 00 00 	movl   $0x5,0xc(%eax)
+    sched_class->init(rq);
+c010a66b:	a1 3c 0d 1b c0       	mov    0xc01b0d3c,%eax
+c010a670:	8b 40 04             	mov    0x4(%eax),%eax
+c010a673:	8b 15 40 0d 1b c0    	mov    0xc01b0d40,%edx
+c010a679:	83 ec 0c             	sub    $0xc,%esp
+c010a67c:	52                   	push   %edx
+c010a67d:	ff d0                	call   *%eax
+c010a67f:	83 c4 10             	add    $0x10,%esp
+
+    cprintf("sched class: %s\n", sched_class->name);
+c010a682:	a1 3c 0d 1b c0       	mov    0xc01b0d3c,%eax
+c010a687:	8b 00                	mov    (%eax),%eax
+c010a689:	83 ec 08             	sub    $0x8,%esp
+c010a68c:	50                   	push   %eax
+c010a68d:	68 4f dd 10 c0       	push   $0xc010dd4f
+c010a692:	e8 f7 5b ff ff       	call   c010028e <cprintf>
+c010a697:	83 c4 10             	add    $0x10,%esp
+}
+c010a69a:	90                   	nop
+c010a69b:	c9                   	leave  
+c010a69c:	c3                   	ret    
+
+c010a69d <wakeup_proc>:
+
+void
+wakeup_proc(struct proc_struct *proc) {
+c010a69d:	55                   	push   %ebp
+c010a69e:	89 e5                	mov    %esp,%ebp
+c010a6a0:	83 ec 18             	sub    $0x18,%esp
+    assert(proc->state != PROC_ZOMBIE);
+c010a6a3:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a6a6:	8b 00                	mov    (%eax),%eax
+c010a6a8:	83 f8 03             	cmp    $0x3,%eax
+c010a6ab:	75 16                	jne    c010a6c3 <wakeup_proc+0x26>
+c010a6ad:	68 60 dd 10 c0       	push   $0xc010dd60
+c010a6b2:	68 7b dd 10 c0       	push   $0xc010dd7b
+c010a6b7:	6a 3c                	push   $0x3c
+c010a6b9:	68 90 dd 10 c0       	push   $0xc010dd90
+c010a6be:	e8 31 5d ff ff       	call   c01003f4 <__panic>
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c010a6c3:	e8 7c fe ff ff       	call   c010a544 <__intr_save>
+c010a6c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    {
+        if (proc->state != PROC_RUNNABLE) {
+c010a6cb:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a6ce:	8b 00                	mov    (%eax),%eax
+c010a6d0:	83 f8 02             	cmp    $0x2,%eax
+c010a6d3:	74 2d                	je     c010a702 <wakeup_proc+0x65>
+            proc->state = PROC_RUNNABLE;
+c010a6d5:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a6d8:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
+            proc->wait_state = 0;
+c010a6de:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a6e1:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
+            if (proc != current) {
+c010a6e8:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c010a6ed:	39 45 08             	cmp    %eax,0x8(%ebp)
+c010a6f0:	74 27                	je     c010a719 <wakeup_proc+0x7c>
+                sched_class_enqueue(proc);
+c010a6f2:	83 ec 0c             	sub    $0xc,%esp
+c010a6f5:	ff 75 08             	pushl  0x8(%ebp)
+c010a6f8:	e8 85 fe ff ff       	call   c010a582 <sched_class_enqueue>
+c010a6fd:	83 c4 10             	add    $0x10,%esp
+c010a700:	eb 17                	jmp    c010a719 <wakeup_proc+0x7c>
+            }
+        }
+        else {
+            warn("wakeup runnable process.\n");
+c010a702:	83 ec 04             	sub    $0x4,%esp
+c010a705:	68 a6 dd 10 c0       	push   $0xc010dda6
+c010a70a:	6a 48                	push   $0x48
+c010a70c:	68 90 dd 10 c0       	push   $0xc010dd90
+c010a711:	e8 4c 5d ff ff       	call   c0100462 <__warn>
+c010a716:	83 c4 10             	add    $0x10,%esp
+        }
+    }
+    local_intr_restore(intr_flag);
+c010a719:	83 ec 0c             	sub    $0xc,%esp
+c010a71c:	ff 75 f4             	pushl  -0xc(%ebp)
+c010a71f:	e8 4a fe ff ff       	call   c010a56e <__intr_restore>
+c010a724:	83 c4 10             	add    $0x10,%esp
+}
+c010a727:	90                   	nop
+c010a728:	c9                   	leave  
+c010a729:	c3                   	ret    
+
+c010a72a <schedule>:
+
+void
+schedule(void) {
+c010a72a:	55                   	push   %ebp
+c010a72b:	89 e5                	mov    %esp,%ebp
+c010a72d:	83 ec 18             	sub    $0x18,%esp
+    bool intr_flag;
+    struct proc_struct *next;
+    local_intr_save(intr_flag);
+c010a730:	e8 0f fe ff ff       	call   c010a544 <__intr_save>
+c010a735:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    {
+        current->need_resched = 0;
+c010a738:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c010a73d:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
+        //cprintf("time up: %s %d\n", current->name, current->pid);
+        if (current->state == PROC_RUNNABLE) {
+c010a744:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c010a749:	8b 00                	mov    (%eax),%eax
+c010a74b:	83 f8 02             	cmp    $0x2,%eax
+c010a74e:	75 11                	jne    c010a761 <schedule+0x37>
+            sched_class_enqueue(current);
+c010a750:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c010a755:	83 ec 0c             	sub    $0xc,%esp
+c010a758:	50                   	push   %eax
+c010a759:	e8 24 fe ff ff       	call   c010a582 <sched_class_enqueue>
+c010a75e:	83 c4 10             	add    $0x10,%esp
+        }
+        if ((next = sched_class_pick_next()) != NULL) {
+c010a761:	e8 6c fe ff ff       	call   c010a5d2 <sched_class_pick_next>
+c010a766:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010a769:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010a76d:	74 0e                	je     c010a77d <schedule+0x53>
+            sched_class_dequeue(next);
+c010a76f:	83 ec 0c             	sub    $0xc,%esp
+c010a772:	ff 75 f4             	pushl  -0xc(%ebp)
+c010a775:	e8 35 fe ff ff       	call   c010a5af <sched_class_dequeue>
+c010a77a:	83 c4 10             	add    $0x10,%esp
+            //cprintf("next proc: %s %d\n", next->name, next->pid);
+        }
+        if (next == NULL) {
+c010a77d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010a781:	75 08                	jne    c010a78b <schedule+0x61>
+            next = idleproc;
+c010a783:	a1 00 ed 1a c0       	mov    0xc01aed00,%eax
+c010a788:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        next->runs ++;
+c010a78b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a78e:	8b 40 08             	mov    0x8(%eax),%eax
+c010a791:	8d 50 01             	lea    0x1(%eax),%edx
+c010a794:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a797:	89 50 08             	mov    %edx,0x8(%eax)
+        if (next != current) {
+c010a79a:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c010a79f:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+c010a7a2:	74 0e                	je     c010a7b2 <schedule+0x88>
+            proc_run(next);
+c010a7a4:	83 ec 0c             	sub    $0xc,%esp
+c010a7a7:	ff 75 f4             	pushl  -0xc(%ebp)
+c010a7aa:	e8 c1 e8 ff ff       	call   c0109070 <proc_run>
+c010a7af:	83 c4 10             	add    $0x10,%esp
+        }
+    }
+    local_intr_restore(intr_flag);
+c010a7b2:	83 ec 0c             	sub    $0xc,%esp
+c010a7b5:	ff 75 f0             	pushl  -0x10(%ebp)
+c010a7b8:	e8 b1 fd ff ff       	call   c010a56e <__intr_restore>
+c010a7bd:	83 c4 10             	add    $0x10,%esp
+}
+c010a7c0:	90                   	nop
+c010a7c1:	c9                   	leave  
+c010a7c2:	c3                   	ret    
+
+c010a7c3 <skew_heap_merge>:
+}
+
+static inline skew_heap_entry_t *
+skew_heap_merge(skew_heap_entry_t *a, skew_heap_entry_t *b,
+                compare_f comp)
+{
+c010a7c3:	55                   	push   %ebp
+c010a7c4:	89 e5                	mov    %esp,%ebp
+c010a7c6:	83 ec 18             	sub    $0x18,%esp
+     if (a == NULL) return b;
+c010a7c9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010a7cd:	75 08                	jne    c010a7d7 <skew_heap_merge+0x14>
+c010a7cf:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010a7d2:	e9 b4 00 00 00       	jmp    c010a88b <skew_heap_merge+0xc8>
+     else if (b == NULL) return a;
+c010a7d7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c010a7db:	75 08                	jne    c010a7e5 <skew_heap_merge+0x22>
+c010a7dd:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a7e0:	e9 a6 00 00 00       	jmp    c010a88b <skew_heap_merge+0xc8>
+     
+     skew_heap_entry_t *l, *r;
+     if (comp(a, b) == -1)
+c010a7e5:	83 ec 08             	sub    $0x8,%esp
+c010a7e8:	ff 75 0c             	pushl  0xc(%ebp)
+c010a7eb:	ff 75 08             	pushl  0x8(%ebp)
+c010a7ee:	8b 45 10             	mov    0x10(%ebp),%eax
+c010a7f1:	ff d0                	call   *%eax
+c010a7f3:	83 c4 10             	add    $0x10,%esp
+c010a7f6:	83 f8 ff             	cmp    $0xffffffff,%eax
+c010a7f9:	75 49                	jne    c010a844 <skew_heap_merge+0x81>
+     {
+          r = a->left;
+c010a7fb:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a7fe:	8b 40 04             	mov    0x4(%eax),%eax
+c010a801:	89 45 f4             	mov    %eax,-0xc(%ebp)
+          l = skew_heap_merge(a->right, b, comp);
+c010a804:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a807:	8b 40 08             	mov    0x8(%eax),%eax
+c010a80a:	83 ec 04             	sub    $0x4,%esp
+c010a80d:	ff 75 10             	pushl  0x10(%ebp)
+c010a810:	ff 75 0c             	pushl  0xc(%ebp)
+c010a813:	50                   	push   %eax
+c010a814:	e8 aa ff ff ff       	call   c010a7c3 <skew_heap_merge>
+c010a819:	83 c4 10             	add    $0x10,%esp
+c010a81c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+          
+          a->left = l;
+c010a81f:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a822:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010a825:	89 50 04             	mov    %edx,0x4(%eax)
+          a->right = r;
+c010a828:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a82b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010a82e:	89 50 08             	mov    %edx,0x8(%eax)
+          if (l) l->parent = a;
+c010a831:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010a835:	74 08                	je     c010a83f <skew_heap_merge+0x7c>
+c010a837:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a83a:	8b 55 08             	mov    0x8(%ebp),%edx
+c010a83d:	89 10                	mov    %edx,(%eax)
+
+          return a;
+c010a83f:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a842:	eb 47                	jmp    c010a88b <skew_heap_merge+0xc8>
+     }
+     else
+     {
+          r = b->left;
+c010a844:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010a847:	8b 40 04             	mov    0x4(%eax),%eax
+c010a84a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+          l = skew_heap_merge(a, b->right, comp);
+c010a84d:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010a850:	8b 40 08             	mov    0x8(%eax),%eax
+c010a853:	83 ec 04             	sub    $0x4,%esp
+c010a856:	ff 75 10             	pushl  0x10(%ebp)
+c010a859:	50                   	push   %eax
+c010a85a:	ff 75 08             	pushl  0x8(%ebp)
+c010a85d:	e8 61 ff ff ff       	call   c010a7c3 <skew_heap_merge>
+c010a862:	83 c4 10             	add    $0x10,%esp
+c010a865:	89 45 f0             	mov    %eax,-0x10(%ebp)
+          
+          b->left = l;
+c010a868:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010a86b:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010a86e:	89 50 04             	mov    %edx,0x4(%eax)
+          b->right = r;
+c010a871:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010a874:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010a877:	89 50 08             	mov    %edx,0x8(%eax)
+          if (l) l->parent = b;
+c010a87a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010a87e:	74 08                	je     c010a888 <skew_heap_merge+0xc5>
+c010a880:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a883:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010a886:	89 10                	mov    %edx,(%eax)
+
+          return b;
+c010a888:	8b 45 0c             	mov    0xc(%ebp),%eax
+     }
+}
+c010a88b:	c9                   	leave  
+c010a88c:	c3                   	ret    
+
+c010a88d <proc_stride_comp_f>:
+
+/* The compare function for two skew_heap_node_t's and the
+ * corresponding procs*/
+static int
+proc_stride_comp_f(void *a, void *b)
+{
+c010a88d:	55                   	push   %ebp
+c010a88e:	89 e5                	mov    %esp,%ebp
+c010a890:	83 ec 10             	sub    $0x10,%esp
+     struct proc_struct *p = le2proc(a, lab6_run_pool);
+c010a893:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a896:	2d 8c 00 00 00       	sub    $0x8c,%eax
+c010a89b:	89 45 fc             	mov    %eax,-0x4(%ebp)
+     struct proc_struct *q = le2proc(b, lab6_run_pool);
+c010a89e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010a8a1:	2d 8c 00 00 00       	sub    $0x8c,%eax
+c010a8a6:	89 45 f8             	mov    %eax,-0x8(%ebp)
+     int32_t c = p->lab6_stride - q->lab6_stride;
+c010a8a9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010a8ac:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
+c010a8b2:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010a8b5:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
+c010a8bb:	29 c2                	sub    %eax,%edx
+c010a8bd:	89 d0                	mov    %edx,%eax
+c010a8bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
+     if (c > 0) return 1;
+c010a8c2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010a8c6:	7e 07                	jle    c010a8cf <proc_stride_comp_f+0x42>
+c010a8c8:	b8 01 00 00 00       	mov    $0x1,%eax
+c010a8cd:	eb 12                	jmp    c010a8e1 <proc_stride_comp_f+0x54>
+     else if (c == 0) return 0;
+c010a8cf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010a8d3:	75 07                	jne    c010a8dc <proc_stride_comp_f+0x4f>
+c010a8d5:	b8 00 00 00 00       	mov    $0x0,%eax
+c010a8da:	eb 05                	jmp    c010a8e1 <proc_stride_comp_f+0x54>
+     else return -1;
+c010a8dc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+c010a8e1:	c9                   	leave  
+c010a8e2:	c3                   	ret    
+
+c010a8e3 <stride_init>:
+ *   - max_time_slice: no need here, the variable would be assigned by the caller.
+ *
+ * hint: see libs/list.h for routines of the list structures.
+ */
+static void
+stride_init(struct run_queue *rq) {
+c010a8e3:	55                   	push   %ebp
+c010a8e4:	89 e5                	mov    %esp,%ebp
+c010a8e6:	83 ec 10             	sub    $0x10,%esp
+     /* LAB6: 2103011371
+      * (1) init the ready process list: rq->run_list
+      * (2) init the run pool: rq->lab6_run_pool
+      * (3) set number of process: rq->proc_num to 0       
+      */
+	list_init(&(rq->run_list));
+c010a8e9:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a8ec:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c010a8ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010a8f2:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c010a8f5:	89 50 04             	mov    %edx,0x4(%eax)
+c010a8f8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010a8fb:	8b 50 04             	mov    0x4(%eax),%edx
+c010a8fe:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010a901:	89 10                	mov    %edx,(%eax)
+	rq->lab6_run_pool = NULL;
+c010a903:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a906:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
+	rq->proc_num = 0;
+c010a90d:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a910:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+}
+c010a917:	90                   	nop
+c010a918:	c9                   	leave  
+c010a919:	c3                   	ret    
+
+c010a91a <stride_enqueue>:
+ * 
+ * hint: see libs/skew_heap.h for routines of the priority
+ * queue structures.
+ */
+static void
+stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
+c010a91a:	55                   	push   %ebp
+c010a91b:	89 e5                	mov    %esp,%ebp
+c010a91d:	83 ec 18             	sub    $0x18,%esp
+      *         list_add_before: insert  a entry into the last of list   
+      * (2) recalculate proc->time_slice
+      * (3) set proc->rq pointer to rq
+      * (4) increase rq->proc_num
+      */
+	rq->lab6_run_pool = skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
+c010a920:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010a923:	8d 90 8c 00 00 00    	lea    0x8c(%eax),%edx
+c010a929:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a92c:	8b 40 10             	mov    0x10(%eax),%eax
+c010a92f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010a932:	89 55 f0             	mov    %edx,-0x10(%ebp)
+c010a935:	c7 45 ec 8d a8 10 c0 	movl   $0xc010a88d,-0x14(%ebp)
+c010a93c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a93f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+     compare_f comp) __attribute__((always_inline));
+
+static inline void
+skew_heap_init(skew_heap_entry_t *a)
+{
+     a->left = a->right = a->parent = NULL;
+c010a942:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010a945:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+c010a94b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010a94e:	8b 10                	mov    (%eax),%edx
+c010a950:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010a953:	89 50 08             	mov    %edx,0x8(%eax)
+c010a956:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010a959:	8b 50 08             	mov    0x8(%eax),%edx
+c010a95c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010a95f:	89 50 04             	mov    %edx,0x4(%eax)
+static inline skew_heap_entry_t *
+skew_heap_insert(skew_heap_entry_t *a, skew_heap_entry_t *b,
+                 compare_f comp)
+{
+     skew_heap_init(b);
+     return skew_heap_merge(a, b, comp);
+c010a962:	83 ec 04             	sub    $0x4,%esp
+c010a965:	ff 75 ec             	pushl  -0x14(%ebp)
+c010a968:	ff 75 f0             	pushl  -0x10(%ebp)
+c010a96b:	ff 75 f4             	pushl  -0xc(%ebp)
+c010a96e:	e8 50 fe ff ff       	call   c010a7c3 <skew_heap_merge>
+c010a973:	83 c4 10             	add    $0x10,%esp
+c010a976:	89 c2                	mov    %eax,%edx
+c010a978:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a97b:	89 50 10             	mov    %edx,0x10(%eax)
+	if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
+c010a97e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010a981:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
+c010a987:	85 c0                	test   %eax,%eax
+c010a989:	74 13                	je     c010a99e <stride_enqueue+0x84>
+c010a98b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010a98e:	8b 90 88 00 00 00    	mov    0x88(%eax),%edx
+c010a994:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a997:	8b 40 0c             	mov    0xc(%eax),%eax
+c010a99a:	39 c2                	cmp    %eax,%edx
+c010a99c:	7e 0f                	jle    c010a9ad <stride_enqueue+0x93>
+		proc->time_slice = rq->max_time_slice;
+c010a99e:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a9a1:	8b 50 0c             	mov    0xc(%eax),%edx
+c010a9a4:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010a9a7:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
+	}
+	proc->rq = rq;
+c010a9ad:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010a9b0:	8b 55 08             	mov    0x8(%ebp),%edx
+c010a9b3:	89 50 7c             	mov    %edx,0x7c(%eax)
+	rq->proc_num++;
+c010a9b6:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a9b9:	8b 40 08             	mov    0x8(%eax),%eax
+c010a9bc:	8d 50 01             	lea    0x1(%eax),%edx
+c010a9bf:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a9c2:	89 50 08             	mov    %edx,0x8(%eax)
+}
+c010a9c5:	90                   	nop
+c010a9c6:	c9                   	leave  
+c010a9c7:	c3                   	ret    
+
+c010a9c8 <stride_dequeue>:
+ *
+ * hint: see libs/skew_heap.h for routines of the priority
+ * queue structures.
+ */
+static void
+stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
+c010a9c8:	55                   	push   %ebp
+c010a9c9:	89 e5                	mov    %esp,%ebp
+c010a9cb:	83 ec 28             	sub    $0x28,%esp
+      * (1) remove the proc from rq correctly
+      * NOTICE: you can use skew_heap or list. Important functions
+      *         skew_heap_remove: remove a entry from skew_heap
+      *         list_del_init: remove a entry from the  list
+      */
+	rq->lab6_run_pool = skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
+c010a9ce:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010a9d1:	8d 90 8c 00 00 00    	lea    0x8c(%eax),%edx
+c010a9d7:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a9da:	8b 40 10             	mov    0x10(%eax),%eax
+c010a9dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010a9e0:	89 55 f0             	mov    %edx,-0x10(%ebp)
+c010a9e3:	c7 45 ec 8d a8 10 c0 	movl   $0xc010a88d,-0x14(%ebp)
+
+static inline skew_heap_entry_t *
+skew_heap_remove(skew_heap_entry_t *a, skew_heap_entry_t *b,
+                 compare_f comp)
+{
+     skew_heap_entry_t *p   = b->parent;
+c010a9ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a9ed:	8b 00                	mov    (%eax),%eax
+c010a9ef:	89 45 e8             	mov    %eax,-0x18(%ebp)
+     skew_heap_entry_t *rep = skew_heap_merge(b->left, b->right, comp);
+c010a9f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a9f5:	8b 50 08             	mov    0x8(%eax),%edx
+c010a9f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a9fb:	8b 40 04             	mov    0x4(%eax),%eax
+c010a9fe:	83 ec 04             	sub    $0x4,%esp
+c010aa01:	ff 75 ec             	pushl  -0x14(%ebp)
+c010aa04:	52                   	push   %edx
+c010aa05:	50                   	push   %eax
+c010aa06:	e8 b8 fd ff ff       	call   c010a7c3 <skew_heap_merge>
+c010aa0b:	83 c4 10             	add    $0x10,%esp
+c010aa0e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+     if (rep) rep->parent = p;
+c010aa11:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c010aa15:	74 08                	je     c010aa1f <stride_dequeue+0x57>
+c010aa17:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010aa1a:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010aa1d:	89 10                	mov    %edx,(%eax)
+     
+     if (p)
+c010aa1f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010aa23:	74 24                	je     c010aa49 <stride_dequeue+0x81>
+     {
+          if (p->left == b)
+c010aa25:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010aa28:	8b 40 04             	mov    0x4(%eax),%eax
+c010aa2b:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c010aa2e:	75 0b                	jne    c010aa3b <stride_dequeue+0x73>
+               p->left = rep;
+c010aa30:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010aa33:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010aa36:	89 50 04             	mov    %edx,0x4(%eax)
+c010aa39:	eb 09                	jmp    c010aa44 <stride_dequeue+0x7c>
+          else p->right = rep;
+c010aa3b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010aa3e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010aa41:	89 50 08             	mov    %edx,0x8(%eax)
+          return a;
+c010aa44:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010aa47:	eb 03                	jmp    c010aa4c <stride_dequeue+0x84>
+     }
+     else return rep;
+c010aa49:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010aa4c:	8b 55 08             	mov    0x8(%ebp),%edx
+c010aa4f:	89 42 10             	mov    %eax,0x10(%edx)
+	rq->proc_num--;
+c010aa52:	8b 45 08             	mov    0x8(%ebp),%eax
+c010aa55:	8b 40 08             	mov    0x8(%eax),%eax
+c010aa58:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010aa5b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010aa5e:	89 50 08             	mov    %edx,0x8(%eax)
+}
+c010aa61:	90                   	nop
+c010aa62:	c9                   	leave  
+c010aa63:	c3                   	ret    
+
+c010aa64 <stride_pick_next>:
+ *
+ * hint: see libs/skew_heap.h for routines of the priority
+ * queue structures.
+ */
+static struct proc_struct *
+stride_pick_next(struct run_queue *rq) {
+c010aa64:	55                   	push   %ebp
+c010aa65:	89 e5                	mov    %esp,%ebp
+c010aa67:	53                   	push   %ebx
+c010aa68:	83 ec 10             	sub    $0x10,%esp
+             (1.1) If using skew_heap, we can use le2proc get the p from rq->lab6_run_poll
+             (1.2) If using list, we have to search list to find the p with minimum stride value
+      * (2) update p;s stride value: p->lab6_stride
+      * (3) return p
+      */
+	if (rq->lab6_run_pool == NULL) return NULL;
+c010aa6b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010aa6e:	8b 40 10             	mov    0x10(%eax),%eax
+c010aa71:	85 c0                	test   %eax,%eax
+c010aa73:	75 07                	jne    c010aa7c <stride_pick_next+0x18>
+c010aa75:	b8 00 00 00 00       	mov    $0x0,%eax
+c010aa7a:	eb 62                	jmp    c010aade <stride_pick_next+0x7a>
+	struct proc_struct *next_proc = le2proc(rq->lab6_run_pool, lab6_run_pool);
+c010aa7c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010aa7f:	8b 40 10             	mov    0x10(%eax),%eax
+c010aa82:	2d 8c 00 00 00       	sub    $0x8c,%eax
+c010aa87:	89 45 f8             	mov    %eax,-0x8(%ebp)
+	if (next_proc->lab6_priority == 0 ) next_proc->lab6_stride += BIG_STRIDE;
+c010aa8a:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010aa8d:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
+c010aa93:	85 c0                	test   %eax,%eax
+c010aa95:	75 1a                	jne    c010aab1 <stride_pick_next+0x4d>
+c010aa97:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010aa9a:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
+c010aaa0:	8d 90 ff ff ff 7f    	lea    0x7fffffff(%eax),%edx
+c010aaa6:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010aaa9:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
+c010aaaf:	eb 2a                	jmp    c010aadb <stride_pick_next+0x77>
+	else{
+		next_proc->lab6_stride += BIG_STRIDE/next_proc->lab6_priority;
+c010aab1:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010aab4:	8b 88 98 00 00 00    	mov    0x98(%eax),%ecx
+c010aaba:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010aabd:	8b 98 9c 00 00 00    	mov    0x9c(%eax),%ebx
+c010aac3:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
+c010aac8:	ba 00 00 00 00       	mov    $0x0,%edx
+c010aacd:	f7 f3                	div    %ebx
+c010aacf:	8d 14 01             	lea    (%ecx,%eax,1),%edx
+c010aad2:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010aad5:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
+	}
+	return next_proc;
+c010aadb:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+c010aade:	83 c4 10             	add    $0x10,%esp
+c010aae1:	5b                   	pop    %ebx
+c010aae2:	5d                   	pop    %ebp
+c010aae3:	c3                   	ret    
+
+c010aae4 <stride_proc_tick>:
+ * denotes the time slices left for current
+ * process. proc->need_resched is the flag variable for process
+ * switching.
+ */
+static void
+stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
+c010aae4:	55                   	push   %ebp
+c010aae5:	89 e5                	mov    %esp,%ebp
+     /* LAB6: 2013011371 */
+	if (proc->time_slice > 0){
+c010aae7:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010aaea:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
+c010aaf0:	85 c0                	test   %eax,%eax
+c010aaf2:	7e 15                	jle    c010ab09 <stride_proc_tick+0x25>
+		proc->time_slice--;
+c010aaf4:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010aaf7:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
+c010aafd:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010ab00:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010ab03:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
+	}
+	if (proc->time_slice == 0){
+c010ab09:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010ab0c:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
+c010ab12:	85 c0                	test   %eax,%eax
+c010ab14:	75 0a                	jne    c010ab20 <stride_proc_tick+0x3c>
+		proc->need_resched = 1;
+c010ab16:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010ab19:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
+	}
+}
+c010ab20:	90                   	nop
+c010ab21:	5d                   	pop    %ebp
+c010ab22:	c3                   	ret    
+
+c010ab23 <sys_exit>:
+#include <pmm.h>
+#include <assert.h>
+#include <clock.h>
+
+static int
+sys_exit(uint32_t arg[]) {
+c010ab23:	55                   	push   %ebp
+c010ab24:	89 e5                	mov    %esp,%ebp
+c010ab26:	83 ec 18             	sub    $0x18,%esp
+    int error_code = (int)arg[0];
+c010ab29:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ab2c:	8b 00                	mov    (%eax),%eax
+c010ab2e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return do_exit(error_code);
+c010ab31:	83 ec 0c             	sub    $0xc,%esp
+c010ab34:	ff 75 f4             	pushl  -0xc(%ebp)
+c010ab37:	e8 6a eb ff ff       	call   c01096a6 <do_exit>
+c010ab3c:	83 c4 10             	add    $0x10,%esp
+}
+c010ab3f:	c9                   	leave  
+c010ab40:	c3                   	ret    
+
+c010ab41 <sys_fork>:
+
+static int
+sys_fork(uint32_t arg[]) {
+c010ab41:	55                   	push   %ebp
+c010ab42:	89 e5                	mov    %esp,%ebp
+c010ab44:	83 ec 18             	sub    $0x18,%esp
+    struct trapframe *tf = current->tf;
+c010ab47:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c010ab4c:	8b 40 3c             	mov    0x3c(%eax),%eax
+c010ab4f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    uintptr_t stack = tf->tf_esp;
+c010ab52:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010ab55:	8b 40 44             	mov    0x44(%eax),%eax
+c010ab58:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    return do_fork(0, stack, tf);
+c010ab5b:	83 ec 04             	sub    $0x4,%esp
+c010ab5e:	ff 75 f4             	pushl  -0xc(%ebp)
+c010ab61:	ff 75 f0             	pushl  -0x10(%ebp)
+c010ab64:	6a 00                	push   $0x0
+c010ab66:	e8 10 ea ff ff       	call   c010957b <do_fork>
+c010ab6b:	83 c4 10             	add    $0x10,%esp
+}
+c010ab6e:	c9                   	leave  
+c010ab6f:	c3                   	ret    
+
+c010ab70 <sys_wait>:
+
+static int
+sys_wait(uint32_t arg[]) {
+c010ab70:	55                   	push   %ebp
+c010ab71:	89 e5                	mov    %esp,%ebp
+c010ab73:	83 ec 18             	sub    $0x18,%esp
+    int pid = (int)arg[0];
+c010ab76:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ab79:	8b 00                	mov    (%eax),%eax
+c010ab7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    int *store = (int *)arg[1];
+c010ab7e:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ab81:	83 c0 04             	add    $0x4,%eax
+c010ab84:	8b 00                	mov    (%eax),%eax
+c010ab86:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    return do_wait(pid, store);
+c010ab89:	83 ec 08             	sub    $0x8,%esp
+c010ab8c:	ff 75 f0             	pushl  -0x10(%ebp)
+c010ab8f:	ff 75 f4             	pushl  -0xc(%ebp)
+c010ab92:	e8 f5 f3 ff ff       	call   c0109f8c <do_wait>
+c010ab97:	83 c4 10             	add    $0x10,%esp
+}
+c010ab9a:	c9                   	leave  
+c010ab9b:	c3                   	ret    
+
+c010ab9c <sys_exec>:
+
+static int
+sys_exec(uint32_t arg[]) {
+c010ab9c:	55                   	push   %ebp
+c010ab9d:	89 e5                	mov    %esp,%ebp
+c010ab9f:	83 ec 18             	sub    $0x18,%esp
+    const char *name = (const char *)arg[0];
+c010aba2:	8b 45 08             	mov    0x8(%ebp),%eax
+c010aba5:	8b 00                	mov    (%eax),%eax
+c010aba7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    size_t len = (size_t)arg[1];
+c010abaa:	8b 45 08             	mov    0x8(%ebp),%eax
+c010abad:	83 c0 04             	add    $0x4,%eax
+c010abb0:	8b 00                	mov    (%eax),%eax
+c010abb2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    unsigned char *binary = (unsigned char *)arg[2];
+c010abb5:	8b 45 08             	mov    0x8(%ebp),%eax
+c010abb8:	83 c0 08             	add    $0x8,%eax
+c010abbb:	8b 00                	mov    (%eax),%eax
+c010abbd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    size_t size = (size_t)arg[3];
+c010abc0:	8b 45 08             	mov    0x8(%ebp),%eax
+c010abc3:	83 c0 0c             	add    $0xc,%eax
+c010abc6:	8b 00                	mov    (%eax),%eax
+c010abc8:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    return do_execve(name, len, binary, size);
+c010abcb:	ff 75 e8             	pushl  -0x18(%ebp)
+c010abce:	ff 75 ec             	pushl  -0x14(%ebp)
+c010abd1:	ff 75 f0             	pushl  -0x10(%ebp)
+c010abd4:	ff 75 f4             	pushl  -0xc(%ebp)
+c010abd7:	e8 78 f2 ff ff       	call   c0109e54 <do_execve>
+c010abdc:	83 c4 10             	add    $0x10,%esp
+}
+c010abdf:	c9                   	leave  
+c010abe0:	c3                   	ret    
+
+c010abe1 <sys_yield>:
+
+static int
+sys_yield(uint32_t arg[]) {
+c010abe1:	55                   	push   %ebp
+c010abe2:	89 e5                	mov    %esp,%ebp
+c010abe4:	83 ec 08             	sub    $0x8,%esp
+    return do_yield();
+c010abe7:	e8 8a f3 ff ff       	call   c0109f76 <do_yield>
+}
+c010abec:	c9                   	leave  
+c010abed:	c3                   	ret    
+
+c010abee <sys_kill>:
+
+static int
+sys_kill(uint32_t arg[]) {
+c010abee:	55                   	push   %ebp
+c010abef:	89 e5                	mov    %esp,%ebp
+c010abf1:	83 ec 18             	sub    $0x18,%esp
+    int pid = (int)arg[0];
+c010abf4:	8b 45 08             	mov    0x8(%ebp),%eax
+c010abf7:	8b 00                	mov    (%eax),%eax
+c010abf9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return do_kill(pid);
+c010abfc:	83 ec 0c             	sub    $0xc,%esp
+c010abff:	ff 75 f4             	pushl  -0xc(%ebp)
+c010ac02:	e8 13 f5 ff ff       	call   c010a11a <do_kill>
+c010ac07:	83 c4 10             	add    $0x10,%esp
+}
+c010ac0a:	c9                   	leave  
+c010ac0b:	c3                   	ret    
+
+c010ac0c <sys_getpid>:
+
+static int
+sys_getpid(uint32_t arg[]) {
+c010ac0c:	55                   	push   %ebp
+c010ac0d:	89 e5                	mov    %esp,%ebp
+    return current->pid;
+c010ac0f:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c010ac14:	8b 40 04             	mov    0x4(%eax),%eax
+}
+c010ac17:	5d                   	pop    %ebp
+c010ac18:	c3                   	ret    
+
+c010ac19 <sys_putc>:
+
+static int
+sys_putc(uint32_t arg[]) {
+c010ac19:	55                   	push   %ebp
+c010ac1a:	89 e5                	mov    %esp,%ebp
+c010ac1c:	83 ec 18             	sub    $0x18,%esp
+    int c = (int)arg[0];
+c010ac1f:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ac22:	8b 00                	mov    (%eax),%eax
+c010ac24:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cputchar(c);
+c010ac27:	83 ec 0c             	sub    $0xc,%esp
+c010ac2a:	ff 75 f4             	pushl  -0xc(%ebp)
+c010ac2d:	e8 82 56 ff ff       	call   c01002b4 <cputchar>
+c010ac32:	83 c4 10             	add    $0x10,%esp
+    return 0;
+c010ac35:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010ac3a:	c9                   	leave  
+c010ac3b:	c3                   	ret    
+
+c010ac3c <sys_pgdir>:
+
+static int
+sys_pgdir(uint32_t arg[]) {
+c010ac3c:	55                   	push   %ebp
+c010ac3d:	89 e5                	mov    %esp,%ebp
+c010ac3f:	83 ec 08             	sub    $0x8,%esp
+    print_pgdir();
+c010ac42:	e8 10 a4 ff ff       	call   c0105057 <print_pgdir>
+    return 0;
+c010ac47:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010ac4c:	c9                   	leave  
+c010ac4d:	c3                   	ret    
+
+c010ac4e <sys_gettime>:
+
+static int
+sys_gettime(uint32_t arg[]) {
+c010ac4e:	55                   	push   %ebp
+c010ac4f:	89 e5                	mov    %esp,%ebp
+    return (int)ticks;
+c010ac51:	a1 58 0d 1b c0       	mov    0xc01b0d58,%eax
+}
+c010ac56:	5d                   	pop    %ebp
+c010ac57:	c3                   	ret    
+
+c010ac58 <sys_lab6_set_priority>:
+static int
+sys_lab6_set_priority(uint32_t arg[])
+{
+c010ac58:	55                   	push   %ebp
+c010ac59:	89 e5                	mov    %esp,%ebp
+c010ac5b:	83 ec 18             	sub    $0x18,%esp
+    uint32_t priority = (uint32_t)arg[0];
+c010ac5e:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ac61:	8b 00                	mov    (%eax),%eax
+c010ac63:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    lab6_set_priority(priority);
+c010ac66:	83 ec 0c             	sub    $0xc,%esp
+c010ac69:	ff 75 f4             	pushl  -0xc(%ebp)
+c010ac6c:	e8 a8 f8 ff ff       	call   c010a519 <lab6_set_priority>
+c010ac71:	83 c4 10             	add    $0x10,%esp
+    return 0;
+c010ac74:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010ac79:	c9                   	leave  
+c010ac7a:	c3                   	ret    
+
+c010ac7b <syscall>:
+};
+
+#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))
+
+void
+syscall(void) {
+c010ac7b:	55                   	push   %ebp
+c010ac7c:	89 e5                	mov    %esp,%ebp
+c010ac7e:	83 ec 28             	sub    $0x28,%esp
+    struct trapframe *tf = current->tf;
+c010ac81:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c010ac86:	8b 40 3c             	mov    0x3c(%eax),%eax
+c010ac89:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    uint32_t arg[5];
+    int num = tf->tf_regs.reg_eax;
+c010ac8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010ac8f:	8b 40 1c             	mov    0x1c(%eax),%eax
+c010ac92:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if (num >= 0 && num < NUM_SYSCALLS) {
+c010ac95:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010ac99:	78 64                	js     c010acff <syscall+0x84>
+c010ac9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010ac9e:	3d ff 00 00 00       	cmp    $0xff,%eax
+c010aca3:	77 5a                	ja     c010acff <syscall+0x84>
+        if (syscalls[num] != NULL) {
+c010aca5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010aca8:	8b 04 85 a0 ca 12 c0 	mov    -0x3fed3560(,%eax,4),%eax
+c010acaf:	85 c0                	test   %eax,%eax
+c010acb1:	74 4c                	je     c010acff <syscall+0x84>
+            arg[0] = tf->tf_regs.reg_edx;
+c010acb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010acb6:	8b 40 14             	mov    0x14(%eax),%eax
+c010acb9:	89 45 dc             	mov    %eax,-0x24(%ebp)
+            arg[1] = tf->tf_regs.reg_ecx;
+c010acbc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010acbf:	8b 40 18             	mov    0x18(%eax),%eax
+c010acc2:	89 45 e0             	mov    %eax,-0x20(%ebp)
+            arg[2] = tf->tf_regs.reg_ebx;
+c010acc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010acc8:	8b 40 10             	mov    0x10(%eax),%eax
+c010accb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            arg[3] = tf->tf_regs.reg_edi;
+c010acce:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010acd1:	8b 00                	mov    (%eax),%eax
+c010acd3:	89 45 e8             	mov    %eax,-0x18(%ebp)
+            arg[4] = tf->tf_regs.reg_esi;
+c010acd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010acd9:	8b 40 04             	mov    0x4(%eax),%eax
+c010acdc:	89 45 ec             	mov    %eax,-0x14(%ebp)
+            tf->tf_regs.reg_eax = syscalls[num](arg);
+c010acdf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010ace2:	8b 04 85 a0 ca 12 c0 	mov    -0x3fed3560(,%eax,4),%eax
+c010ace9:	83 ec 0c             	sub    $0xc,%esp
+c010acec:	8d 55 dc             	lea    -0x24(%ebp),%edx
+c010acef:	52                   	push   %edx
+c010acf0:	ff d0                	call   *%eax
+c010acf2:	83 c4 10             	add    $0x10,%esp
+c010acf5:	89 c2                	mov    %eax,%edx
+c010acf7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010acfa:	89 50 1c             	mov    %edx,0x1c(%eax)
+            return ;
+c010acfd:	eb 37                	jmp    c010ad36 <syscall+0xbb>
+        }
+    }
+    print_trapframe(tf);
+c010acff:	83 ec 0c             	sub    $0xc,%esp
+c010ad02:	ff 75 f4             	pushl  -0xc(%ebp)
+c010ad05:	e8 fc 76 ff ff       	call   c0102406 <print_trapframe>
+c010ad0a:	83 c4 10             	add    $0x10,%esp
+    panic("undefined syscall %d, pid = %d, name = %s.\n",
+c010ad0d:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c010ad12:	8d 50 48             	lea    0x48(%eax),%edx
+c010ad15:	a1 08 ed 1a c0       	mov    0xc01aed08,%eax
+c010ad1a:	8b 40 04             	mov    0x4(%eax),%eax
+c010ad1d:	83 ec 08             	sub    $0x8,%esp
+c010ad20:	52                   	push   %edx
+c010ad21:	50                   	push   %eax
+c010ad22:	ff 75 f0             	pushl  -0x10(%ebp)
+c010ad25:	68 d4 dd 10 c0       	push   $0xc010ddd4
+c010ad2a:	6a 72                	push   $0x72
+c010ad2c:	68 00 de 10 c0       	push   $0xc010de00
+c010ad31:	e8 be 56 ff ff       	call   c01003f4 <__panic>
+            num, current->pid, current->name);
+}
+c010ad36:	c9                   	leave  
+c010ad37:	c3                   	ret    
+
+c010ad38 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+c010ad38:	55                   	push   %ebp
+c010ad39:	89 e5                	mov    %esp,%ebp
+c010ad3b:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+c010ad3e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+c010ad45:	eb 04                	jmp    c010ad4b <strlen+0x13>
+        cnt ++;
+c010ad47:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+c010ad4b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ad4e:	8d 50 01             	lea    0x1(%eax),%edx
+c010ad51:	89 55 08             	mov    %edx,0x8(%ebp)
+c010ad54:	0f b6 00             	movzbl (%eax),%eax
+c010ad57:	84 c0                	test   %al,%al
+c010ad59:	75 ec                	jne    c010ad47 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+c010ad5b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+c010ad5e:	c9                   	leave  
+c010ad5f:	c3                   	ret    
+
+c010ad60 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+c010ad60:	55                   	push   %ebp
+c010ad61:	89 e5                	mov    %esp,%ebp
+c010ad63:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+c010ad66:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+c010ad6d:	eb 04                	jmp    c010ad73 <strnlen+0x13>
+        cnt ++;
+c010ad6f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+c010ad73:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010ad76:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c010ad79:	73 10                	jae    c010ad8b <strnlen+0x2b>
+c010ad7b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ad7e:	8d 50 01             	lea    0x1(%eax),%edx
+c010ad81:	89 55 08             	mov    %edx,0x8(%ebp)
+c010ad84:	0f b6 00             	movzbl (%eax),%eax
+c010ad87:	84 c0                	test   %al,%al
+c010ad89:	75 e4                	jne    c010ad6f <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+c010ad8b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+c010ad8e:	c9                   	leave  
+c010ad8f:	c3                   	ret    
+
+c010ad90 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+c010ad90:	55                   	push   %ebp
+c010ad91:	89 e5                	mov    %esp,%ebp
+c010ad93:	57                   	push   %edi
+c010ad94:	56                   	push   %esi
+c010ad95:	83 ec 20             	sub    $0x20,%esp
+c010ad98:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ad9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010ad9e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010ada1:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+c010ada4:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010ada7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010adaa:	89 d1                	mov    %edx,%ecx
+c010adac:	89 c2                	mov    %eax,%edx
+c010adae:	89 ce                	mov    %ecx,%esi
+c010adb0:	89 d7                	mov    %edx,%edi
+c010adb2:	ac                   	lods   %ds:(%esi),%al
+c010adb3:	aa                   	stos   %al,%es:(%edi)
+c010adb4:	84 c0                	test   %al,%al
+c010adb6:	75 fa                	jne    c010adb2 <strcpy+0x22>
+c010adb8:	89 fa                	mov    %edi,%edx
+c010adba:	89 f1                	mov    %esi,%ecx
+c010adbc:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+c010adbf:	89 55 e8             	mov    %edx,-0x18(%ebp)
+c010adc2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+c010adc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+c010adc8:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+c010adc9:	83 c4 20             	add    $0x20,%esp
+c010adcc:	5e                   	pop    %esi
+c010adcd:	5f                   	pop    %edi
+c010adce:	5d                   	pop    %ebp
+c010adcf:	c3                   	ret    
+
+c010add0 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+c010add0:	55                   	push   %ebp
+c010add1:	89 e5                	mov    %esp,%ebp
+c010add3:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+c010add6:	8b 45 08             	mov    0x8(%ebp),%eax
+c010add9:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+c010addc:	eb 21                	jmp    c010adff <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+c010adde:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010ade1:	0f b6 10             	movzbl (%eax),%edx
+c010ade4:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010ade7:	88 10                	mov    %dl,(%eax)
+c010ade9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010adec:	0f b6 00             	movzbl (%eax),%eax
+c010adef:	84 c0                	test   %al,%al
+c010adf1:	74 04                	je     c010adf7 <strncpy+0x27>
+            src ++;
+c010adf3:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+c010adf7:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+c010adfb:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+c010adff:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010ae03:	75 d9                	jne    c010adde <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+c010ae05:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+c010ae08:	c9                   	leave  
+c010ae09:	c3                   	ret    
+
+c010ae0a <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+c010ae0a:	55                   	push   %ebp
+c010ae0b:	89 e5                	mov    %esp,%ebp
+c010ae0d:	57                   	push   %edi
+c010ae0e:	56                   	push   %esi
+c010ae0f:	83 ec 20             	sub    $0x20,%esp
+c010ae12:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ae15:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010ae18:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010ae1b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+c010ae1e:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010ae21:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010ae24:	89 d1                	mov    %edx,%ecx
+c010ae26:	89 c2                	mov    %eax,%edx
+c010ae28:	89 ce                	mov    %ecx,%esi
+c010ae2a:	89 d7                	mov    %edx,%edi
+c010ae2c:	ac                   	lods   %ds:(%esi),%al
+c010ae2d:	ae                   	scas   %es:(%edi),%al
+c010ae2e:	75 08                	jne    c010ae38 <strcmp+0x2e>
+c010ae30:	84 c0                	test   %al,%al
+c010ae32:	75 f8                	jne    c010ae2c <strcmp+0x22>
+c010ae34:	31 c0                	xor    %eax,%eax
+c010ae36:	eb 04                	jmp    c010ae3c <strcmp+0x32>
+c010ae38:	19 c0                	sbb    %eax,%eax
+c010ae3a:	0c 01                	or     $0x1,%al
+c010ae3c:	89 fa                	mov    %edi,%edx
+c010ae3e:	89 f1                	mov    %esi,%ecx
+c010ae40:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010ae43:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+c010ae46:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+c010ae49:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+c010ae4c:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+c010ae4d:	83 c4 20             	add    $0x20,%esp
+c010ae50:	5e                   	pop    %esi
+c010ae51:	5f                   	pop    %edi
+c010ae52:	5d                   	pop    %ebp
+c010ae53:	c3                   	ret    
+
+c010ae54 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+c010ae54:	55                   	push   %ebp
+c010ae55:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+c010ae57:	eb 0c                	jmp    c010ae65 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+c010ae59:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+c010ae5d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+c010ae61:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+c010ae65:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010ae69:	74 1a                	je     c010ae85 <strncmp+0x31>
+c010ae6b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ae6e:	0f b6 00             	movzbl (%eax),%eax
+c010ae71:	84 c0                	test   %al,%al
+c010ae73:	74 10                	je     c010ae85 <strncmp+0x31>
+c010ae75:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ae78:	0f b6 10             	movzbl (%eax),%edx
+c010ae7b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010ae7e:	0f b6 00             	movzbl (%eax),%eax
+c010ae81:	38 c2                	cmp    %al,%dl
+c010ae83:	74 d4                	je     c010ae59 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+c010ae85:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010ae89:	74 18                	je     c010aea3 <strncmp+0x4f>
+c010ae8b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ae8e:	0f b6 00             	movzbl (%eax),%eax
+c010ae91:	0f b6 d0             	movzbl %al,%edx
+c010ae94:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010ae97:	0f b6 00             	movzbl (%eax),%eax
+c010ae9a:	0f b6 c0             	movzbl %al,%eax
+c010ae9d:	29 c2                	sub    %eax,%edx
+c010ae9f:	89 d0                	mov    %edx,%eax
+c010aea1:	eb 05                	jmp    c010aea8 <strncmp+0x54>
+c010aea3:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010aea8:	5d                   	pop    %ebp
+c010aea9:	c3                   	ret    
+
+c010aeaa <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+c010aeaa:	55                   	push   %ebp
+c010aeab:	89 e5                	mov    %esp,%ebp
+c010aead:	83 ec 04             	sub    $0x4,%esp
+c010aeb0:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010aeb3:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+c010aeb6:	eb 14                	jmp    c010aecc <strchr+0x22>
+        if (*s == c) {
+c010aeb8:	8b 45 08             	mov    0x8(%ebp),%eax
+c010aebb:	0f b6 00             	movzbl (%eax),%eax
+c010aebe:	3a 45 fc             	cmp    -0x4(%ebp),%al
+c010aec1:	75 05                	jne    c010aec8 <strchr+0x1e>
+            return (char *)s;
+c010aec3:	8b 45 08             	mov    0x8(%ebp),%eax
+c010aec6:	eb 13                	jmp    c010aedb <strchr+0x31>
+        }
+        s ++;
+c010aec8:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+c010aecc:	8b 45 08             	mov    0x8(%ebp),%eax
+c010aecf:	0f b6 00             	movzbl (%eax),%eax
+c010aed2:	84 c0                	test   %al,%al
+c010aed4:	75 e2                	jne    c010aeb8 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+c010aed6:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010aedb:	c9                   	leave  
+c010aedc:	c3                   	ret    
+
+c010aedd <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+c010aedd:	55                   	push   %ebp
+c010aede:	89 e5                	mov    %esp,%ebp
+c010aee0:	83 ec 04             	sub    $0x4,%esp
+c010aee3:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010aee6:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+c010aee9:	eb 0f                	jmp    c010aefa <strfind+0x1d>
+        if (*s == c) {
+c010aeeb:	8b 45 08             	mov    0x8(%ebp),%eax
+c010aeee:	0f b6 00             	movzbl (%eax),%eax
+c010aef1:	3a 45 fc             	cmp    -0x4(%ebp),%al
+c010aef4:	74 10                	je     c010af06 <strfind+0x29>
+            break;
+        }
+        s ++;
+c010aef6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+c010aefa:	8b 45 08             	mov    0x8(%ebp),%eax
+c010aefd:	0f b6 00             	movzbl (%eax),%eax
+c010af00:	84 c0                	test   %al,%al
+c010af02:	75 e7                	jne    c010aeeb <strfind+0xe>
+c010af04:	eb 01                	jmp    c010af07 <strfind+0x2a>
+        if (*s == c) {
+            break;
+c010af06:	90                   	nop
+        }
+        s ++;
+    }
+    return (char *)s;
+c010af07:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+c010af0a:	c9                   	leave  
+c010af0b:	c3                   	ret    
+
+c010af0c <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+c010af0c:	55                   	push   %ebp
+c010af0d:	89 e5                	mov    %esp,%ebp
+c010af0f:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+c010af12:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+c010af19:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+c010af20:	eb 04                	jmp    c010af26 <strtol+0x1a>
+        s ++;
+c010af22:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+c010af26:	8b 45 08             	mov    0x8(%ebp),%eax
+c010af29:	0f b6 00             	movzbl (%eax),%eax
+c010af2c:	3c 20                	cmp    $0x20,%al
+c010af2e:	74 f2                	je     c010af22 <strtol+0x16>
+c010af30:	8b 45 08             	mov    0x8(%ebp),%eax
+c010af33:	0f b6 00             	movzbl (%eax),%eax
+c010af36:	3c 09                	cmp    $0x9,%al
+c010af38:	74 e8                	je     c010af22 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+c010af3a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010af3d:	0f b6 00             	movzbl (%eax),%eax
+c010af40:	3c 2b                	cmp    $0x2b,%al
+c010af42:	75 06                	jne    c010af4a <strtol+0x3e>
+        s ++;
+c010af44:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+c010af48:	eb 15                	jmp    c010af5f <strtol+0x53>
+    }
+    else if (*s == '-') {
+c010af4a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010af4d:	0f b6 00             	movzbl (%eax),%eax
+c010af50:	3c 2d                	cmp    $0x2d,%al
+c010af52:	75 0b                	jne    c010af5f <strtol+0x53>
+        s ++, neg = 1;
+c010af54:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+c010af58:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+c010af5f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010af63:	74 06                	je     c010af6b <strtol+0x5f>
+c010af65:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+c010af69:	75 24                	jne    c010af8f <strtol+0x83>
+c010af6b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010af6e:	0f b6 00             	movzbl (%eax),%eax
+c010af71:	3c 30                	cmp    $0x30,%al
+c010af73:	75 1a                	jne    c010af8f <strtol+0x83>
+c010af75:	8b 45 08             	mov    0x8(%ebp),%eax
+c010af78:	83 c0 01             	add    $0x1,%eax
+c010af7b:	0f b6 00             	movzbl (%eax),%eax
+c010af7e:	3c 78                	cmp    $0x78,%al
+c010af80:	75 0d                	jne    c010af8f <strtol+0x83>
+        s += 2, base = 16;
+c010af82:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+c010af86:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+c010af8d:	eb 2a                	jmp    c010afb9 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+c010af8f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010af93:	75 17                	jne    c010afac <strtol+0xa0>
+c010af95:	8b 45 08             	mov    0x8(%ebp),%eax
+c010af98:	0f b6 00             	movzbl (%eax),%eax
+c010af9b:	3c 30                	cmp    $0x30,%al
+c010af9d:	75 0d                	jne    c010afac <strtol+0xa0>
+        s ++, base = 8;
+c010af9f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+c010afa3:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+c010afaa:	eb 0d                	jmp    c010afb9 <strtol+0xad>
+    }
+    else if (base == 0) {
+c010afac:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010afb0:	75 07                	jne    c010afb9 <strtol+0xad>
+        base = 10;
+c010afb2:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+c010afb9:	8b 45 08             	mov    0x8(%ebp),%eax
+c010afbc:	0f b6 00             	movzbl (%eax),%eax
+c010afbf:	3c 2f                	cmp    $0x2f,%al
+c010afc1:	7e 1b                	jle    c010afde <strtol+0xd2>
+c010afc3:	8b 45 08             	mov    0x8(%ebp),%eax
+c010afc6:	0f b6 00             	movzbl (%eax),%eax
+c010afc9:	3c 39                	cmp    $0x39,%al
+c010afcb:	7f 11                	jg     c010afde <strtol+0xd2>
+            dig = *s - '0';
+c010afcd:	8b 45 08             	mov    0x8(%ebp),%eax
+c010afd0:	0f b6 00             	movzbl (%eax),%eax
+c010afd3:	0f be c0             	movsbl %al,%eax
+c010afd6:	83 e8 30             	sub    $0x30,%eax
+c010afd9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010afdc:	eb 48                	jmp    c010b026 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+c010afde:	8b 45 08             	mov    0x8(%ebp),%eax
+c010afe1:	0f b6 00             	movzbl (%eax),%eax
+c010afe4:	3c 60                	cmp    $0x60,%al
+c010afe6:	7e 1b                	jle    c010b003 <strtol+0xf7>
+c010afe8:	8b 45 08             	mov    0x8(%ebp),%eax
+c010afeb:	0f b6 00             	movzbl (%eax),%eax
+c010afee:	3c 7a                	cmp    $0x7a,%al
+c010aff0:	7f 11                	jg     c010b003 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+c010aff2:	8b 45 08             	mov    0x8(%ebp),%eax
+c010aff5:	0f b6 00             	movzbl (%eax),%eax
+c010aff8:	0f be c0             	movsbl %al,%eax
+c010affb:	83 e8 57             	sub    $0x57,%eax
+c010affe:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010b001:	eb 23                	jmp    c010b026 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+c010b003:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b006:	0f b6 00             	movzbl (%eax),%eax
+c010b009:	3c 40                	cmp    $0x40,%al
+c010b00b:	7e 3c                	jle    c010b049 <strtol+0x13d>
+c010b00d:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b010:	0f b6 00             	movzbl (%eax),%eax
+c010b013:	3c 5a                	cmp    $0x5a,%al
+c010b015:	7f 32                	jg     c010b049 <strtol+0x13d>
+            dig = *s - 'A' + 10;
+c010b017:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b01a:	0f b6 00             	movzbl (%eax),%eax
+c010b01d:	0f be c0             	movsbl %al,%eax
+c010b020:	83 e8 37             	sub    $0x37,%eax
+c010b023:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+c010b026:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b029:	3b 45 10             	cmp    0x10(%ebp),%eax
+c010b02c:	7d 1a                	jge    c010b048 <strtol+0x13c>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+c010b02e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+c010b032:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010b035:	0f af 45 10          	imul   0x10(%ebp),%eax
+c010b039:	89 c2                	mov    %eax,%edx
+c010b03b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b03e:	01 d0                	add    %edx,%eax
+c010b040:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+c010b043:	e9 71 ff ff ff       	jmp    c010afb9 <strtol+0xad>
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+            break;
+c010b048:	90                   	nop
+        }
+        s ++, val = (val * base) + dig;
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+c010b049:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c010b04d:	74 08                	je     c010b057 <strtol+0x14b>
+        *endptr = (char *) s;
+c010b04f:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b052:	8b 55 08             	mov    0x8(%ebp),%edx
+c010b055:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+c010b057:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+c010b05b:	74 07                	je     c010b064 <strtol+0x158>
+c010b05d:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010b060:	f7 d8                	neg    %eax
+c010b062:	eb 03                	jmp    c010b067 <strtol+0x15b>
+c010b064:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+c010b067:	c9                   	leave  
+c010b068:	c3                   	ret    
+
+c010b069 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+c010b069:	55                   	push   %ebp
+c010b06a:	89 e5                	mov    %esp,%ebp
+c010b06c:	57                   	push   %edi
+c010b06d:	83 ec 24             	sub    $0x24,%esp
+c010b070:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b073:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+c010b076:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+c010b07a:	8b 55 08             	mov    0x8(%ebp),%edx
+c010b07d:	89 55 f8             	mov    %edx,-0x8(%ebp)
+c010b080:	88 45 f7             	mov    %al,-0x9(%ebp)
+c010b083:	8b 45 10             	mov    0x10(%ebp),%eax
+c010b086:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+c010b089:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+c010b08c:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+c010b090:	8b 55 f8             	mov    -0x8(%ebp),%edx
+c010b093:	89 d7                	mov    %edx,%edi
+c010b095:	f3 aa                	rep stos %al,%es:(%edi)
+c010b097:	89 fa                	mov    %edi,%edx
+c010b099:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+c010b09c:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+c010b09f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010b0a2:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+c010b0a3:	83 c4 24             	add    $0x24,%esp
+c010b0a6:	5f                   	pop    %edi
+c010b0a7:	5d                   	pop    %ebp
+c010b0a8:	c3                   	ret    
+
+c010b0a9 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+c010b0a9:	55                   	push   %ebp
+c010b0aa:	89 e5                	mov    %esp,%ebp
+c010b0ac:	57                   	push   %edi
+c010b0ad:	56                   	push   %esi
+c010b0ae:	53                   	push   %ebx
+c010b0af:	83 ec 30             	sub    $0x30,%esp
+c010b0b2:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b0b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010b0b8:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b0bb:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010b0be:	8b 45 10             	mov    0x10(%ebp),%eax
+c010b0c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+c010b0c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b0c7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c010b0ca:	73 42                	jae    c010b10e <memmove+0x65>
+c010b0cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b0cf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c010b0d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b0d5:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c010b0d8:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010b0db:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+c010b0de:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010b0e1:	c1 e8 02             	shr    $0x2,%eax
+c010b0e4:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+c010b0e6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010b0e9:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010b0ec:	89 d7                	mov    %edx,%edi
+c010b0ee:	89 c6                	mov    %eax,%esi
+c010b0f0:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+c010b0f2:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+c010b0f5:	83 e1 03             	and    $0x3,%ecx
+c010b0f8:	74 02                	je     c010b0fc <memmove+0x53>
+c010b0fa:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+c010b0fc:	89 f0                	mov    %esi,%eax
+c010b0fe:	89 fa                	mov    %edi,%edx
+c010b100:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+c010b103:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+c010b106:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+c010b109:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+c010b10c:	eb 36                	jmp    c010b144 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+c010b10e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010b111:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010b114:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b117:	01 c2                	add    %eax,%edx
+c010b119:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010b11c:	8d 48 ff             	lea    -0x1(%eax),%ecx
+c010b11f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b122:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+c010b125:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010b128:	89 c1                	mov    %eax,%ecx
+c010b12a:	89 d8                	mov    %ebx,%eax
+c010b12c:	89 d6                	mov    %edx,%esi
+c010b12e:	89 c7                	mov    %eax,%edi
+c010b130:	fd                   	std    
+c010b131:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+c010b133:	fc                   	cld    
+c010b134:	89 f8                	mov    %edi,%eax
+c010b136:	89 f2                	mov    %esi,%edx
+c010b138:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+c010b13b:	89 55 c8             	mov    %edx,-0x38(%ebp)
+c010b13e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+c010b141:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+c010b144:	83 c4 30             	add    $0x30,%esp
+c010b147:	5b                   	pop    %ebx
+c010b148:	5e                   	pop    %esi
+c010b149:	5f                   	pop    %edi
+c010b14a:	5d                   	pop    %ebp
+c010b14b:	c3                   	ret    
+
+c010b14c <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+c010b14c:	55                   	push   %ebp
+c010b14d:	89 e5                	mov    %esp,%ebp
+c010b14f:	57                   	push   %edi
+c010b150:	56                   	push   %esi
+c010b151:	83 ec 20             	sub    $0x20,%esp
+c010b154:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b157:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010b15a:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b15d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010b160:	8b 45 10             	mov    0x10(%ebp),%eax
+c010b163:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+c010b166:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b169:	c1 e8 02             	shr    $0x2,%eax
+c010b16c:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+c010b16e:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010b171:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b174:	89 d7                	mov    %edx,%edi
+c010b176:	89 c6                	mov    %eax,%esi
+c010b178:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+c010b17a:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+c010b17d:	83 e1 03             	and    $0x3,%ecx
+c010b180:	74 02                	je     c010b184 <memcpy+0x38>
+c010b182:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+c010b184:	89 f0                	mov    %esi,%eax
+c010b186:	89 fa                	mov    %edi,%edx
+c010b188:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+c010b18b:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+c010b18e:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+c010b191:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+c010b194:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+c010b195:	83 c4 20             	add    $0x20,%esp
+c010b198:	5e                   	pop    %esi
+c010b199:	5f                   	pop    %edi
+c010b19a:	5d                   	pop    %ebp
+c010b19b:	c3                   	ret    
+
+c010b19c <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+c010b19c:	55                   	push   %ebp
+c010b19d:	89 e5                	mov    %esp,%ebp
+c010b19f:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+c010b1a2:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b1a5:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+c010b1a8:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b1ab:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+c010b1ae:	eb 30                	jmp    c010b1e0 <memcmp+0x44>
+        if (*s1 != *s2) {
+c010b1b0:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010b1b3:	0f b6 10             	movzbl (%eax),%edx
+c010b1b6:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010b1b9:	0f b6 00             	movzbl (%eax),%eax
+c010b1bc:	38 c2                	cmp    %al,%dl
+c010b1be:	74 18                	je     c010b1d8 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+c010b1c0:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010b1c3:	0f b6 00             	movzbl (%eax),%eax
+c010b1c6:	0f b6 d0             	movzbl %al,%edx
+c010b1c9:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010b1cc:	0f b6 00             	movzbl (%eax),%eax
+c010b1cf:	0f b6 c0             	movzbl %al,%eax
+c010b1d2:	29 c2                	sub    %eax,%edx
+c010b1d4:	89 d0                	mov    %edx,%eax
+c010b1d6:	eb 1a                	jmp    c010b1f2 <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+c010b1d8:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+c010b1dc:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+c010b1e0:	8b 45 10             	mov    0x10(%ebp),%eax
+c010b1e3:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010b1e6:	89 55 10             	mov    %edx,0x10(%ebp)
+c010b1e9:	85 c0                	test   %eax,%eax
+c010b1eb:	75 c3                	jne    c010b1b0 <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+c010b1ed:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010b1f2:	c9                   	leave  
+c010b1f3:	c3                   	ret    
+
+c010b1f4 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+c010b1f4:	55                   	push   %ebp
+c010b1f5:	89 e5                	mov    %esp,%ebp
+c010b1f7:	83 ec 38             	sub    $0x38,%esp
+c010b1fa:	8b 45 10             	mov    0x10(%ebp),%eax
+c010b1fd:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c010b200:	8b 45 14             	mov    0x14(%ebp),%eax
+c010b203:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+c010b206:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010b209:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c010b20c:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010b20f:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+c010b212:	8b 45 18             	mov    0x18(%ebp),%eax
+c010b215:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c010b218:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010b21b:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010b21e:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c010b221:	89 55 f0             	mov    %edx,-0x10(%ebp)
+c010b224:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b227:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010b22a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010b22e:	74 1c                	je     c010b24c <printnum+0x58>
+c010b230:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b233:	ba 00 00 00 00       	mov    $0x0,%edx
+c010b238:	f7 75 e4             	divl   -0x1c(%ebp)
+c010b23b:	89 55 f4             	mov    %edx,-0xc(%ebp)
+c010b23e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b241:	ba 00 00 00 00       	mov    $0x0,%edx
+c010b246:	f7 75 e4             	divl   -0x1c(%ebp)
+c010b249:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010b24c:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010b24f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010b252:	f7 75 e4             	divl   -0x1c(%ebp)
+c010b255:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c010b258:	89 55 dc             	mov    %edx,-0x24(%ebp)
+c010b25b:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010b25e:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010b261:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010b264:	89 55 ec             	mov    %edx,-0x14(%ebp)
+c010b267:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010b26a:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+c010b26d:	8b 45 18             	mov    0x18(%ebp),%eax
+c010b270:	ba 00 00 00 00       	mov    $0x0,%edx
+c010b275:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+c010b278:	77 41                	ja     c010b2bb <printnum+0xc7>
+c010b27a:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+c010b27d:	72 05                	jb     c010b284 <printnum+0x90>
+c010b27f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+c010b282:	77 37                	ja     c010b2bb <printnum+0xc7>
+        printnum(putch, putdat, result, base, width - 1, padc);
+c010b284:	8b 45 1c             	mov    0x1c(%ebp),%eax
+c010b287:	83 e8 01             	sub    $0x1,%eax
+c010b28a:	83 ec 04             	sub    $0x4,%esp
+c010b28d:	ff 75 20             	pushl  0x20(%ebp)
+c010b290:	50                   	push   %eax
+c010b291:	ff 75 18             	pushl  0x18(%ebp)
+c010b294:	ff 75 ec             	pushl  -0x14(%ebp)
+c010b297:	ff 75 e8             	pushl  -0x18(%ebp)
+c010b29a:	ff 75 0c             	pushl  0xc(%ebp)
+c010b29d:	ff 75 08             	pushl  0x8(%ebp)
+c010b2a0:	e8 4f ff ff ff       	call   c010b1f4 <printnum>
+c010b2a5:	83 c4 20             	add    $0x20,%esp
+c010b2a8:	eb 1b                	jmp    c010b2c5 <printnum+0xd1>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+c010b2aa:	83 ec 08             	sub    $0x8,%esp
+c010b2ad:	ff 75 0c             	pushl  0xc(%ebp)
+c010b2b0:	ff 75 20             	pushl  0x20(%ebp)
+c010b2b3:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b2b6:	ff d0                	call   *%eax
+c010b2b8:	83 c4 10             	add    $0x10,%esp
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+c010b2bb:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+c010b2bf:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+c010b2c3:	7f e5                	jg     c010b2aa <printnum+0xb6>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+c010b2c5:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010b2c8:	05 24 df 10 c0       	add    $0xc010df24,%eax
+c010b2cd:	0f b6 00             	movzbl (%eax),%eax
+c010b2d0:	0f be c0             	movsbl %al,%eax
+c010b2d3:	83 ec 08             	sub    $0x8,%esp
+c010b2d6:	ff 75 0c             	pushl  0xc(%ebp)
+c010b2d9:	50                   	push   %eax
+c010b2da:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b2dd:	ff d0                	call   *%eax
+c010b2df:	83 c4 10             	add    $0x10,%esp
+}
+c010b2e2:	90                   	nop
+c010b2e3:	c9                   	leave  
+c010b2e4:	c3                   	ret    
+
+c010b2e5 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+c010b2e5:	55                   	push   %ebp
+c010b2e6:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+c010b2e8:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+c010b2ec:	7e 14                	jle    c010b302 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+c010b2ee:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b2f1:	8b 00                	mov    (%eax),%eax
+c010b2f3:	8d 48 08             	lea    0x8(%eax),%ecx
+c010b2f6:	8b 55 08             	mov    0x8(%ebp),%edx
+c010b2f9:	89 0a                	mov    %ecx,(%edx)
+c010b2fb:	8b 50 04             	mov    0x4(%eax),%edx
+c010b2fe:	8b 00                	mov    (%eax),%eax
+c010b300:	eb 30                	jmp    c010b332 <getuint+0x4d>
+    }
+    else if (lflag) {
+c010b302:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c010b306:	74 16                	je     c010b31e <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+c010b308:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b30b:	8b 00                	mov    (%eax),%eax
+c010b30d:	8d 48 04             	lea    0x4(%eax),%ecx
+c010b310:	8b 55 08             	mov    0x8(%ebp),%edx
+c010b313:	89 0a                	mov    %ecx,(%edx)
+c010b315:	8b 00                	mov    (%eax),%eax
+c010b317:	ba 00 00 00 00       	mov    $0x0,%edx
+c010b31c:	eb 14                	jmp    c010b332 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+c010b31e:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b321:	8b 00                	mov    (%eax),%eax
+c010b323:	8d 48 04             	lea    0x4(%eax),%ecx
+c010b326:	8b 55 08             	mov    0x8(%ebp),%edx
+c010b329:	89 0a                	mov    %ecx,(%edx)
+c010b32b:	8b 00                	mov    (%eax),%eax
+c010b32d:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+c010b332:	5d                   	pop    %ebp
+c010b333:	c3                   	ret    
+
+c010b334 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+c010b334:	55                   	push   %ebp
+c010b335:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+c010b337:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+c010b33b:	7e 14                	jle    c010b351 <getint+0x1d>
+        return va_arg(*ap, long long);
+c010b33d:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b340:	8b 00                	mov    (%eax),%eax
+c010b342:	8d 48 08             	lea    0x8(%eax),%ecx
+c010b345:	8b 55 08             	mov    0x8(%ebp),%edx
+c010b348:	89 0a                	mov    %ecx,(%edx)
+c010b34a:	8b 50 04             	mov    0x4(%eax),%edx
+c010b34d:	8b 00                	mov    (%eax),%eax
+c010b34f:	eb 28                	jmp    c010b379 <getint+0x45>
+    }
+    else if (lflag) {
+c010b351:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c010b355:	74 12                	je     c010b369 <getint+0x35>
+        return va_arg(*ap, long);
+c010b357:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b35a:	8b 00                	mov    (%eax),%eax
+c010b35c:	8d 48 04             	lea    0x4(%eax),%ecx
+c010b35f:	8b 55 08             	mov    0x8(%ebp),%edx
+c010b362:	89 0a                	mov    %ecx,(%edx)
+c010b364:	8b 00                	mov    (%eax),%eax
+c010b366:	99                   	cltd   
+c010b367:	eb 10                	jmp    c010b379 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+c010b369:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b36c:	8b 00                	mov    (%eax),%eax
+c010b36e:	8d 48 04             	lea    0x4(%eax),%ecx
+c010b371:	8b 55 08             	mov    0x8(%ebp),%edx
+c010b374:	89 0a                	mov    %ecx,(%edx)
+c010b376:	8b 00                	mov    (%eax),%eax
+c010b378:	99                   	cltd   
+    }
+}
+c010b379:	5d                   	pop    %ebp
+c010b37a:	c3                   	ret    
+
+c010b37b <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+c010b37b:	55                   	push   %ebp
+c010b37c:	89 e5                	mov    %esp,%ebp
+c010b37e:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+c010b381:	8d 45 14             	lea    0x14(%ebp),%eax
+c010b384:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+c010b387:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b38a:	50                   	push   %eax
+c010b38b:	ff 75 10             	pushl  0x10(%ebp)
+c010b38e:	ff 75 0c             	pushl  0xc(%ebp)
+c010b391:	ff 75 08             	pushl  0x8(%ebp)
+c010b394:	e8 06 00 00 00       	call   c010b39f <vprintfmt>
+c010b399:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+c010b39c:	90                   	nop
+c010b39d:	c9                   	leave  
+c010b39e:	c3                   	ret    
+
+c010b39f <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+c010b39f:	55                   	push   %ebp
+c010b3a0:	89 e5                	mov    %esp,%ebp
+c010b3a2:	56                   	push   %esi
+c010b3a3:	53                   	push   %ebx
+c010b3a4:	83 ec 20             	sub    $0x20,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+c010b3a7:	eb 17                	jmp    c010b3c0 <vprintfmt+0x21>
+            if (ch == '\0') {
+c010b3a9:	85 db                	test   %ebx,%ebx
+c010b3ab:	0f 84 8e 03 00 00    	je     c010b73f <vprintfmt+0x3a0>
+                return;
+            }
+            putch(ch, putdat);
+c010b3b1:	83 ec 08             	sub    $0x8,%esp
+c010b3b4:	ff 75 0c             	pushl  0xc(%ebp)
+c010b3b7:	53                   	push   %ebx
+c010b3b8:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b3bb:	ff d0                	call   *%eax
+c010b3bd:	83 c4 10             	add    $0x10,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+c010b3c0:	8b 45 10             	mov    0x10(%ebp),%eax
+c010b3c3:	8d 50 01             	lea    0x1(%eax),%edx
+c010b3c6:	89 55 10             	mov    %edx,0x10(%ebp)
+c010b3c9:	0f b6 00             	movzbl (%eax),%eax
+c010b3cc:	0f b6 d8             	movzbl %al,%ebx
+c010b3cf:	83 fb 25             	cmp    $0x25,%ebx
+c010b3d2:	75 d5                	jne    c010b3a9 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+c010b3d4:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+c010b3d8:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+c010b3df:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010b3e2:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+c010b3e5:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+c010b3ec:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010b3ef:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+c010b3f2:	8b 45 10             	mov    0x10(%ebp),%eax
+c010b3f5:	8d 50 01             	lea    0x1(%eax),%edx
+c010b3f8:	89 55 10             	mov    %edx,0x10(%ebp)
+c010b3fb:	0f b6 00             	movzbl (%eax),%eax
+c010b3fe:	0f b6 d8             	movzbl %al,%ebx
+c010b401:	8d 43 dd             	lea    -0x23(%ebx),%eax
+c010b404:	83 f8 55             	cmp    $0x55,%eax
+c010b407:	0f 87 05 03 00 00    	ja     c010b712 <vprintfmt+0x373>
+c010b40d:	8b 04 85 48 df 10 c0 	mov    -0x3fef20b8(,%eax,4),%eax
+c010b414:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+c010b416:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+c010b41a:	eb d6                	jmp    c010b3f2 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+c010b41c:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+c010b420:	eb d0                	jmp    c010b3f2 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+c010b422:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+c010b429:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010b42c:	89 d0                	mov    %edx,%eax
+c010b42e:	c1 e0 02             	shl    $0x2,%eax
+c010b431:	01 d0                	add    %edx,%eax
+c010b433:	01 c0                	add    %eax,%eax
+c010b435:	01 d8                	add    %ebx,%eax
+c010b437:	83 e8 30             	sub    $0x30,%eax
+c010b43a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+c010b43d:	8b 45 10             	mov    0x10(%ebp),%eax
+c010b440:	0f b6 00             	movzbl (%eax),%eax
+c010b443:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+c010b446:	83 fb 2f             	cmp    $0x2f,%ebx
+c010b449:	7e 39                	jle    c010b484 <vprintfmt+0xe5>
+c010b44b:	83 fb 39             	cmp    $0x39,%ebx
+c010b44e:	7f 34                	jg     c010b484 <vprintfmt+0xe5>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+c010b450:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+c010b454:	eb d3                	jmp    c010b429 <vprintfmt+0x8a>
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+c010b456:	8b 45 14             	mov    0x14(%ebp),%eax
+c010b459:	8d 50 04             	lea    0x4(%eax),%edx
+c010b45c:	89 55 14             	mov    %edx,0x14(%ebp)
+c010b45f:	8b 00                	mov    (%eax),%eax
+c010b461:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+c010b464:	eb 1f                	jmp    c010b485 <vprintfmt+0xe6>
+
+        case '.':
+            if (width < 0)
+c010b466:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010b46a:	79 86                	jns    c010b3f2 <vprintfmt+0x53>
+                width = 0;
+c010b46c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+c010b473:	e9 7a ff ff ff       	jmp    c010b3f2 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+c010b478:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+c010b47f:	e9 6e ff ff ff       	jmp    c010b3f2 <vprintfmt+0x53>
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+            goto process_precision;
+c010b484:	90                   	nop
+        case '#':
+            altflag = 1;
+            goto reswitch;
+
+        process_precision:
+            if (width < 0)
+c010b485:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010b489:	0f 89 63 ff ff ff    	jns    c010b3f2 <vprintfmt+0x53>
+                width = precision, precision = -1;
+c010b48f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010b492:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010b495:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+c010b49c:	e9 51 ff ff ff       	jmp    c010b3f2 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+c010b4a1:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+c010b4a5:	e9 48 ff ff ff       	jmp    c010b3f2 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+c010b4aa:	8b 45 14             	mov    0x14(%ebp),%eax
+c010b4ad:	8d 50 04             	lea    0x4(%eax),%edx
+c010b4b0:	89 55 14             	mov    %edx,0x14(%ebp)
+c010b4b3:	8b 00                	mov    (%eax),%eax
+c010b4b5:	83 ec 08             	sub    $0x8,%esp
+c010b4b8:	ff 75 0c             	pushl  0xc(%ebp)
+c010b4bb:	50                   	push   %eax
+c010b4bc:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b4bf:	ff d0                	call   *%eax
+c010b4c1:	83 c4 10             	add    $0x10,%esp
+            break;
+c010b4c4:	e9 71 02 00 00       	jmp    c010b73a <vprintfmt+0x39b>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+c010b4c9:	8b 45 14             	mov    0x14(%ebp),%eax
+c010b4cc:	8d 50 04             	lea    0x4(%eax),%edx
+c010b4cf:	89 55 14             	mov    %edx,0x14(%ebp)
+c010b4d2:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+c010b4d4:	85 db                	test   %ebx,%ebx
+c010b4d6:	79 02                	jns    c010b4da <vprintfmt+0x13b>
+                err = -err;
+c010b4d8:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+c010b4da:	83 fb 18             	cmp    $0x18,%ebx
+c010b4dd:	7f 0b                	jg     c010b4ea <vprintfmt+0x14b>
+c010b4df:	8b 34 9d c0 de 10 c0 	mov    -0x3fef2140(,%ebx,4),%esi
+c010b4e6:	85 f6                	test   %esi,%esi
+c010b4e8:	75 19                	jne    c010b503 <vprintfmt+0x164>
+                printfmt(putch, putdat, "error %d", err);
+c010b4ea:	53                   	push   %ebx
+c010b4eb:	68 35 df 10 c0       	push   $0xc010df35
+c010b4f0:	ff 75 0c             	pushl  0xc(%ebp)
+c010b4f3:	ff 75 08             	pushl  0x8(%ebp)
+c010b4f6:	e8 80 fe ff ff       	call   c010b37b <printfmt>
+c010b4fb:	83 c4 10             	add    $0x10,%esp
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+c010b4fe:	e9 37 02 00 00       	jmp    c010b73a <vprintfmt+0x39b>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+c010b503:	56                   	push   %esi
+c010b504:	68 3e df 10 c0       	push   $0xc010df3e
+c010b509:	ff 75 0c             	pushl  0xc(%ebp)
+c010b50c:	ff 75 08             	pushl  0x8(%ebp)
+c010b50f:	e8 67 fe ff ff       	call   c010b37b <printfmt>
+c010b514:	83 c4 10             	add    $0x10,%esp
+            }
+            break;
+c010b517:	e9 1e 02 00 00       	jmp    c010b73a <vprintfmt+0x39b>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+c010b51c:	8b 45 14             	mov    0x14(%ebp),%eax
+c010b51f:	8d 50 04             	lea    0x4(%eax),%edx
+c010b522:	89 55 14             	mov    %edx,0x14(%ebp)
+c010b525:	8b 30                	mov    (%eax),%esi
+c010b527:	85 f6                	test   %esi,%esi
+c010b529:	75 05                	jne    c010b530 <vprintfmt+0x191>
+                p = "(null)";
+c010b52b:	be 41 df 10 c0       	mov    $0xc010df41,%esi
+            }
+            if (width > 0 && padc != '-') {
+c010b530:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010b534:	7e 76                	jle    c010b5ac <vprintfmt+0x20d>
+c010b536:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+c010b53a:	74 70                	je     c010b5ac <vprintfmt+0x20d>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+c010b53c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010b53f:	83 ec 08             	sub    $0x8,%esp
+c010b542:	50                   	push   %eax
+c010b543:	56                   	push   %esi
+c010b544:	e8 17 f8 ff ff       	call   c010ad60 <strnlen>
+c010b549:	83 c4 10             	add    $0x10,%esp
+c010b54c:	89 c2                	mov    %eax,%edx
+c010b54e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010b551:	29 d0                	sub    %edx,%eax
+c010b553:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010b556:	eb 17                	jmp    c010b56f <vprintfmt+0x1d0>
+                    putch(padc, putdat);
+c010b558:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+c010b55c:	83 ec 08             	sub    $0x8,%esp
+c010b55f:	ff 75 0c             	pushl  0xc(%ebp)
+c010b562:	50                   	push   %eax
+c010b563:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b566:	ff d0                	call   *%eax
+c010b568:	83 c4 10             	add    $0x10,%esp
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+c010b56b:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+c010b56f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010b573:	7f e3                	jg     c010b558 <vprintfmt+0x1b9>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+c010b575:	eb 35                	jmp    c010b5ac <vprintfmt+0x20d>
+                if (altflag && (ch < ' ' || ch > '~')) {
+c010b577:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c010b57b:	74 1c                	je     c010b599 <vprintfmt+0x1fa>
+c010b57d:	83 fb 1f             	cmp    $0x1f,%ebx
+c010b580:	7e 05                	jle    c010b587 <vprintfmt+0x1e8>
+c010b582:	83 fb 7e             	cmp    $0x7e,%ebx
+c010b585:	7e 12                	jle    c010b599 <vprintfmt+0x1fa>
+                    putch('?', putdat);
+c010b587:	83 ec 08             	sub    $0x8,%esp
+c010b58a:	ff 75 0c             	pushl  0xc(%ebp)
+c010b58d:	6a 3f                	push   $0x3f
+c010b58f:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b592:	ff d0                	call   *%eax
+c010b594:	83 c4 10             	add    $0x10,%esp
+c010b597:	eb 0f                	jmp    c010b5a8 <vprintfmt+0x209>
+                }
+                else {
+                    putch(ch, putdat);
+c010b599:	83 ec 08             	sub    $0x8,%esp
+c010b59c:	ff 75 0c             	pushl  0xc(%ebp)
+c010b59f:	53                   	push   %ebx
+c010b5a0:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b5a3:	ff d0                	call   *%eax
+c010b5a5:	83 c4 10             	add    $0x10,%esp
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+c010b5a8:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+c010b5ac:	89 f0                	mov    %esi,%eax
+c010b5ae:	8d 70 01             	lea    0x1(%eax),%esi
+c010b5b1:	0f b6 00             	movzbl (%eax),%eax
+c010b5b4:	0f be d8             	movsbl %al,%ebx
+c010b5b7:	85 db                	test   %ebx,%ebx
+c010b5b9:	74 26                	je     c010b5e1 <vprintfmt+0x242>
+c010b5bb:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c010b5bf:	78 b6                	js     c010b577 <vprintfmt+0x1d8>
+c010b5c1:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+c010b5c5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c010b5c9:	79 ac                	jns    c010b577 <vprintfmt+0x1d8>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+c010b5cb:	eb 14                	jmp    c010b5e1 <vprintfmt+0x242>
+                putch(' ', putdat);
+c010b5cd:	83 ec 08             	sub    $0x8,%esp
+c010b5d0:	ff 75 0c             	pushl  0xc(%ebp)
+c010b5d3:	6a 20                	push   $0x20
+c010b5d5:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b5d8:	ff d0                	call   *%eax
+c010b5da:	83 c4 10             	add    $0x10,%esp
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+c010b5dd:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+c010b5e1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010b5e5:	7f e6                	jg     c010b5cd <vprintfmt+0x22e>
+                putch(' ', putdat);
+            }
+            break;
+c010b5e7:	e9 4e 01 00 00       	jmp    c010b73a <vprintfmt+0x39b>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+c010b5ec:	83 ec 08             	sub    $0x8,%esp
+c010b5ef:	ff 75 e0             	pushl  -0x20(%ebp)
+c010b5f2:	8d 45 14             	lea    0x14(%ebp),%eax
+c010b5f5:	50                   	push   %eax
+c010b5f6:	e8 39 fd ff ff       	call   c010b334 <getint>
+c010b5fb:	83 c4 10             	add    $0x10,%esp
+c010b5fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010b601:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+c010b604:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b607:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010b60a:	85 d2                	test   %edx,%edx
+c010b60c:	79 23                	jns    c010b631 <vprintfmt+0x292>
+                putch('-', putdat);
+c010b60e:	83 ec 08             	sub    $0x8,%esp
+c010b611:	ff 75 0c             	pushl  0xc(%ebp)
+c010b614:	6a 2d                	push   $0x2d
+c010b616:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b619:	ff d0                	call   *%eax
+c010b61b:	83 c4 10             	add    $0x10,%esp
+                num = -(long long)num;
+c010b61e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b621:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010b624:	f7 d8                	neg    %eax
+c010b626:	83 d2 00             	adc    $0x0,%edx
+c010b629:	f7 da                	neg    %edx
+c010b62b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010b62e:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+c010b631:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+c010b638:	e9 9f 00 00 00       	jmp    c010b6dc <vprintfmt+0x33d>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+c010b63d:	83 ec 08             	sub    $0x8,%esp
+c010b640:	ff 75 e0             	pushl  -0x20(%ebp)
+c010b643:	8d 45 14             	lea    0x14(%ebp),%eax
+c010b646:	50                   	push   %eax
+c010b647:	e8 99 fc ff ff       	call   c010b2e5 <getuint>
+c010b64c:	83 c4 10             	add    $0x10,%esp
+c010b64f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010b652:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+c010b655:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+c010b65c:	eb 7e                	jmp    c010b6dc <vprintfmt+0x33d>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+c010b65e:	83 ec 08             	sub    $0x8,%esp
+c010b661:	ff 75 e0             	pushl  -0x20(%ebp)
+c010b664:	8d 45 14             	lea    0x14(%ebp),%eax
+c010b667:	50                   	push   %eax
+c010b668:	e8 78 fc ff ff       	call   c010b2e5 <getuint>
+c010b66d:	83 c4 10             	add    $0x10,%esp
+c010b670:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010b673:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+c010b676:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+c010b67d:	eb 5d                	jmp    c010b6dc <vprintfmt+0x33d>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+c010b67f:	83 ec 08             	sub    $0x8,%esp
+c010b682:	ff 75 0c             	pushl  0xc(%ebp)
+c010b685:	6a 30                	push   $0x30
+c010b687:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b68a:	ff d0                	call   *%eax
+c010b68c:	83 c4 10             	add    $0x10,%esp
+            putch('x', putdat);
+c010b68f:	83 ec 08             	sub    $0x8,%esp
+c010b692:	ff 75 0c             	pushl  0xc(%ebp)
+c010b695:	6a 78                	push   $0x78
+c010b697:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b69a:	ff d0                	call   *%eax
+c010b69c:	83 c4 10             	add    $0x10,%esp
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+c010b69f:	8b 45 14             	mov    0x14(%ebp),%eax
+c010b6a2:	8d 50 04             	lea    0x4(%eax),%edx
+c010b6a5:	89 55 14             	mov    %edx,0x14(%ebp)
+c010b6a8:	8b 00                	mov    (%eax),%eax
+c010b6aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010b6ad:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+c010b6b4:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+c010b6bb:	eb 1f                	jmp    c010b6dc <vprintfmt+0x33d>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+c010b6bd:	83 ec 08             	sub    $0x8,%esp
+c010b6c0:	ff 75 e0             	pushl  -0x20(%ebp)
+c010b6c3:	8d 45 14             	lea    0x14(%ebp),%eax
+c010b6c6:	50                   	push   %eax
+c010b6c7:	e8 19 fc ff ff       	call   c010b2e5 <getuint>
+c010b6cc:	83 c4 10             	add    $0x10,%esp
+c010b6cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010b6d2:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+c010b6d5:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+c010b6dc:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+c010b6e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b6e3:	83 ec 04             	sub    $0x4,%esp
+c010b6e6:	52                   	push   %edx
+c010b6e7:	ff 75 e8             	pushl  -0x18(%ebp)
+c010b6ea:	50                   	push   %eax
+c010b6eb:	ff 75 f4             	pushl  -0xc(%ebp)
+c010b6ee:	ff 75 f0             	pushl  -0x10(%ebp)
+c010b6f1:	ff 75 0c             	pushl  0xc(%ebp)
+c010b6f4:	ff 75 08             	pushl  0x8(%ebp)
+c010b6f7:	e8 f8 fa ff ff       	call   c010b1f4 <printnum>
+c010b6fc:	83 c4 20             	add    $0x20,%esp
+            break;
+c010b6ff:	eb 39                	jmp    c010b73a <vprintfmt+0x39b>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+c010b701:	83 ec 08             	sub    $0x8,%esp
+c010b704:	ff 75 0c             	pushl  0xc(%ebp)
+c010b707:	53                   	push   %ebx
+c010b708:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b70b:	ff d0                	call   *%eax
+c010b70d:	83 c4 10             	add    $0x10,%esp
+            break;
+c010b710:	eb 28                	jmp    c010b73a <vprintfmt+0x39b>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+c010b712:	83 ec 08             	sub    $0x8,%esp
+c010b715:	ff 75 0c             	pushl  0xc(%ebp)
+c010b718:	6a 25                	push   $0x25
+c010b71a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b71d:	ff d0                	call   *%eax
+c010b71f:	83 c4 10             	add    $0x10,%esp
+            for (fmt --; fmt[-1] != '%'; fmt --)
+c010b722:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+c010b726:	eb 04                	jmp    c010b72c <vprintfmt+0x38d>
+c010b728:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+c010b72c:	8b 45 10             	mov    0x10(%ebp),%eax
+c010b72f:	83 e8 01             	sub    $0x1,%eax
+c010b732:	0f b6 00             	movzbl (%eax),%eax
+c010b735:	3c 25                	cmp    $0x25,%al
+c010b737:	75 ef                	jne    c010b728 <vprintfmt+0x389>
+                /* do nothing */;
+            break;
+c010b739:	90                   	nop
+        }
+    }
+c010b73a:	e9 68 fc ff ff       	jmp    c010b3a7 <vprintfmt+0x8>
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+            if (ch == '\0') {
+                return;
+c010b73f:	90                   	nop
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+c010b740:	8d 65 f8             	lea    -0x8(%ebp),%esp
+c010b743:	5b                   	pop    %ebx
+c010b744:	5e                   	pop    %esi
+c010b745:	5d                   	pop    %ebp
+c010b746:	c3                   	ret    
+
+c010b747 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+c010b747:	55                   	push   %ebp
+c010b748:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+c010b74a:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b74d:	8b 40 08             	mov    0x8(%eax),%eax
+c010b750:	8d 50 01             	lea    0x1(%eax),%edx
+c010b753:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b756:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+c010b759:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b75c:	8b 10                	mov    (%eax),%edx
+c010b75e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b761:	8b 40 04             	mov    0x4(%eax),%eax
+c010b764:	39 c2                	cmp    %eax,%edx
+c010b766:	73 12                	jae    c010b77a <sprintputch+0x33>
+        *b->buf ++ = ch;
+c010b768:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b76b:	8b 00                	mov    (%eax),%eax
+c010b76d:	8d 48 01             	lea    0x1(%eax),%ecx
+c010b770:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010b773:	89 0a                	mov    %ecx,(%edx)
+c010b775:	8b 55 08             	mov    0x8(%ebp),%edx
+c010b778:	88 10                	mov    %dl,(%eax)
+    }
+}
+c010b77a:	90                   	nop
+c010b77b:	5d                   	pop    %ebp
+c010b77c:	c3                   	ret    
+
+c010b77d <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+c010b77d:	55                   	push   %ebp
+c010b77e:	89 e5                	mov    %esp,%ebp
+c010b780:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+c010b783:	8d 45 14             	lea    0x14(%ebp),%eax
+c010b786:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+c010b789:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b78c:	50                   	push   %eax
+c010b78d:	ff 75 10             	pushl  0x10(%ebp)
+c010b790:	ff 75 0c             	pushl  0xc(%ebp)
+c010b793:	ff 75 08             	pushl  0x8(%ebp)
+c010b796:	e8 0b 00 00 00       	call   c010b7a6 <vsnprintf>
+c010b79b:	83 c4 10             	add    $0x10,%esp
+c010b79e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+c010b7a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c010b7a4:	c9                   	leave  
+c010b7a5:	c3                   	ret    
+
+c010b7a6 <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+c010b7a6:	55                   	push   %ebp
+c010b7a7:	89 e5                	mov    %esp,%ebp
+c010b7a9:	83 ec 18             	sub    $0x18,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+c010b7ac:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b7af:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010b7b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b7b5:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010b7b8:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b7bb:	01 d0                	add    %edx,%eax
+c010b7bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010b7c0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+c010b7c7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010b7cb:	74 0a                	je     c010b7d7 <vsnprintf+0x31>
+c010b7cd:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010b7d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b7d3:	39 c2                	cmp    %eax,%edx
+c010b7d5:	76 07                	jbe    c010b7de <vsnprintf+0x38>
+        return -E_INVAL;
+c010b7d7:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+c010b7dc:	eb 20                	jmp    c010b7fe <vsnprintf+0x58>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+c010b7de:	ff 75 14             	pushl  0x14(%ebp)
+c010b7e1:	ff 75 10             	pushl  0x10(%ebp)
+c010b7e4:	8d 45 ec             	lea    -0x14(%ebp),%eax
+c010b7e7:	50                   	push   %eax
+c010b7e8:	68 47 b7 10 c0       	push   $0xc010b747
+c010b7ed:	e8 ad fb ff ff       	call   c010b39f <vprintfmt>
+c010b7f2:	83 c4 10             	add    $0x10,%esp
+    // null terminate the buffer
+    *b.buf = '\0';
+c010b7f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b7f8:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+c010b7fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c010b7fe:	c9                   	leave  
+c010b7ff:	c3                   	ret    
+
+c010b800 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+c010b800:	55                   	push   %ebp
+c010b801:	89 e5                	mov    %esp,%ebp
+c010b803:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+c010b806:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b809:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+c010b80f:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+c010b812:	b8 20 00 00 00       	mov    $0x20,%eax
+c010b817:	2b 45 0c             	sub    0xc(%ebp),%eax
+c010b81a:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c010b81d:	89 c1                	mov    %eax,%ecx
+c010b81f:	d3 ea                	shr    %cl,%edx
+c010b821:	89 d0                	mov    %edx,%eax
+}
+c010b823:	c9                   	leave  
+c010b824:	c3                   	ret    
+
+c010b825 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+c010b825:	55                   	push   %ebp
+c010b826:	89 e5                	mov    %esp,%ebp
+c010b828:	57                   	push   %edi
+c010b829:	56                   	push   %esi
+c010b82a:	53                   	push   %ebx
+c010b82b:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+c010b82e:	a1 a0 ce 12 c0       	mov    0xc012cea0,%eax
+c010b833:	8b 15 a4 ce 12 c0    	mov    0xc012cea4,%edx
+c010b839:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+c010b83f:	6b f0 05             	imul   $0x5,%eax,%esi
+c010b842:	01 fe                	add    %edi,%esi
+c010b844:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+c010b849:	f7 e7                	mul    %edi
+c010b84b:	01 d6                	add    %edx,%esi
+c010b84d:	89 f2                	mov    %esi,%edx
+c010b84f:	83 c0 0b             	add    $0xb,%eax
+c010b852:	83 d2 00             	adc    $0x0,%edx
+c010b855:	89 c7                	mov    %eax,%edi
+c010b857:	83 e7 ff             	and    $0xffffffff,%edi
+c010b85a:	89 f9                	mov    %edi,%ecx
+c010b85c:	0f b7 da             	movzwl %dx,%ebx
+c010b85f:	89 0d a0 ce 12 c0    	mov    %ecx,0xc012cea0
+c010b865:	89 1d a4 ce 12 c0    	mov    %ebx,0xc012cea4
+    unsigned long long result = (next >> 12);
+c010b86b:	a1 a0 ce 12 c0       	mov    0xc012cea0,%eax
+c010b870:	8b 15 a4 ce 12 c0    	mov    0xc012cea4,%edx
+c010b876:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+c010b87a:	c1 ea 0c             	shr    $0xc,%edx
+c010b87d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c010b880:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+c010b883:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+c010b88a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010b88d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010b890:	89 45 d8             	mov    %eax,-0x28(%ebp)
+c010b893:	89 55 e8             	mov    %edx,-0x18(%ebp)
+c010b896:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010b899:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010b89c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010b8a0:	74 1c                	je     c010b8be <rand+0x99>
+c010b8a2:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010b8a5:	ba 00 00 00 00       	mov    $0x0,%edx
+c010b8aa:	f7 75 dc             	divl   -0x24(%ebp)
+c010b8ad:	89 55 ec             	mov    %edx,-0x14(%ebp)
+c010b8b0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010b8b3:	ba 00 00 00 00       	mov    $0x0,%edx
+c010b8b8:	f7 75 dc             	divl   -0x24(%ebp)
+c010b8bb:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010b8be:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010b8c1:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010b8c4:	f7 75 dc             	divl   -0x24(%ebp)
+c010b8c7:	89 45 d8             	mov    %eax,-0x28(%ebp)
+c010b8ca:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+c010b8cd:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010b8d0:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010b8d3:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c010b8d6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+c010b8d9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+c010b8dc:	83 c4 24             	add    $0x24,%esp
+c010b8df:	5b                   	pop    %ebx
+c010b8e0:	5e                   	pop    %esi
+c010b8e1:	5f                   	pop    %edi
+c010b8e2:	5d                   	pop    %ebp
+c010b8e3:	c3                   	ret    
+
+c010b8e4 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+c010b8e4:	55                   	push   %ebp
+c010b8e5:	89 e5                	mov    %esp,%ebp
+    next = seed;
+c010b8e7:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b8ea:	ba 00 00 00 00       	mov    $0x0,%edx
+c010b8ef:	a3 a0 ce 12 c0       	mov    %eax,0xc012cea0
+c010b8f4:	89 15 a4 ce 12 c0    	mov    %edx,0xc012cea4
+}
+c010b8fa:	90                   	nop
+c010b8fb:	5d                   	pop    %ebp
+c010b8fc:	c3                   	ret    
diff -r -u -P lab6_original/obj/kernel.sym lab6/obj/kernel.sym
--- lab6_original/obj/kernel.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/kernel.sym	2016-04-29 16:22:46.879957375 +0800
@@ -0,0 +1,726 @@
+c0100000 .text
+c010b900 .rodata
+c010e0a0 .stab
+c0123569 .stabstr
+c012a000 .data
+c01adce0 .bss
+00000000 .comment
+00000000 obj/kern/init/entry.o
+c012c018 __gdtdesc
+c0100019 relocated
+c0100028 spin
+c012c000 __gdt
+00000000 init.c
+c010012b lab1_print_cur_status
+c01adce0 round.2078
+c01001e8 lab1_switch_to_user
+c01001f5 lab1_switch_to_kernel
+c01001ff lab1_switch_test
+00000000 stdio.c
+c0100241 cputch
+00000000 readline.c
+c01add00 buf
+00000000 panic.c
+c01ae100 is_panic
+00000000 kdebug.c
+c01004b3 stab_binsearch
+c0100b28 read_eip
+00000000 kmonitor.c
+c012c020 commands
+c0100bf8 parse
+c0100cb4 runcmd
+00000000 ide.c
+c010bc04 channels
+c01ae120 ide_devices
+c0100e50 ide_wait_ready
+00000000 clock.c
+00000000 console.c
+c01016eb __intr_save
+c0101715 __intr_restore
+c0101729 delay
+c01ae200 crt_buf
+c01ae204 crt_pos
+c01ae206 addr_6845
+c0101772 cga_init
+c01ae208 serial_exists
+c0101859 serial_init
+c010193e lpt_putc_sub
+c01019b8 lpt_putc
+c01019ef cga_putc
+c0101bc4 serial_putc_sub
+c0101c1e serial_putc
+c01ae220 cons
+c0101c55 cons_intr
+c0101ca1 serial_proc_data
+c012c060 shiftcode
+c012c160 togglecode
+c012c260 normalmap
+c012c360 shiftmap
+c012c460 ctlmap
+c012c560 charcode
+c0101d1a kbd_proc_data
+c01ae428 shift.1717
+c0101ea7 kbd_intr
+c0101ec0 kbd_init
+00000000 picirq.c
+c012c570 irq_mask
+c01ae42c did_init
+c0101fc7 pic_setmask
+00000000 intr.c
+00000000 trap.c
+c0102198 print_ticks
+c01ae440 idt
+c012c580 idt_pd
+c01023bf trapname
+c010c1e0 excnames.1958
+c012c5a0 IA32flags
+c01026a3 print_pgfault
+c0102718 pgfault_handler
+c01aec40 in_swap_tick_event
+c01027d8 trap_dispatch
+00000000 pmm.c
+c0103560 page2ppn
+c0103573 page2pa
+c0103586 pa2page
+c01035c3 page2kva
+c0103608 pte2page
+c0103642 pde2page
+c010365e page_ref
+c0103668 set_page_ref
+c0103676 page_ref_inc
+c010368d page_ref_dec
+c01036a4 __intr_save
+c01036ce __intr_restore
+c01aec80 ts
+c012ca00 gdt
+c012ca30 gdt_pd
+c01036e2 lgdt
+c0103726 gdt_init
+c0103818 init_pmm_manager
+c010384d init_memmap
+c010393b page_init
+c0103ce7 enable_paging
+c0103d21 boot_map_segment
+c0103e0a boot_alloc_page
+c01046d3 check_alloc_page
+c01046f6 check_pgdir
+c0104c5c check_boot_pgdir
+c01040d1 page_remove_pte
+c0104f55 perm2str
+c01aece8 str.2112
+c0104fa3 get_pgtable_items
+00000000 swap_fifo.c
+c01051ab _fifo_init_mm
+c01051dd _fifo_map_swappable
+c0105262 _fifo_swap_out_victim
+c01052f2 _fifo_check_swap
+c01055c1 _fifo_init
+c01055cb _fifo_set_unswappable
+c01055d5 _fifo_tick_event
+00000000 vmm.c
+c01055df lock_init
+c01055ee mm_count
+c01055f9 set_mm_count
+c0105608 pa2page
+c0105645 pde2page
+c01057ec check_vma_overlap
+c0105d70 check_vmm
+c0105d9b check_vma_struct
+c0106198 check_pgfault
+00000000 kmalloc.c
+c010668d __intr_save
+c01066b7 __intr_restore
+c01066cb page2ppn
+c01066de page2pa
+c01066f1 pa2page
+c010672e page2kva
+c0106773 kva2page
+c012ca60 arena
+c012ca68 slobfree
+c01aecf0 bigblocks
+c01067b2 __slob_get_free_pages
+c01067f2 __slob_free_pages
+c010682b slob_alloc
+c01069fa slob_free
+c0106b63 find_order
+c0106b87 __kmalloc
+00000000 swap.c
+c0106ddc pa2page
+c0106e19 pte2page
+c0106e53 pde2page
+c01aecfc sm
+c01072e4 check_swap
+c010716b check_content_set
+c01072cc check_content_access
+00000000 default_pmm.c
+c01078d3 page2ppn
+c01078e6 page2pa
+c01078f9 page_ref
+c0107903 set_page_ref
+c0107911 default_init
+c010793f default_init_memmap
+c0107a64 default_alloc_pages
+c0107bec default_free_pages
+c0107e7e default_nr_free_pages
+c0107e88 basic_check
+c01082fe default_check
+00000000 swapfs.c
+c0108866 page2ppn
+c0108879 page2pa
+c010888c page2kva
+00000000 proc.c
+c0108a06 test_and_set_bit
+c0108a26 test_and_clear_bit
+c0108a46 __intr_save
+c0108a70 __intr_restore
+c0108a84 try_lock
+c0108a9e lock
+c0108ac0 unlock
+c0108aee page2ppn
+c0108b01 page2pa
+c0108b14 pa2page
+c0108b51 page2kva
+c0108b96 kva2page
+c0108bd5 mm_count_inc
+c0108bef mm_count_dec
+c0108c09 lock_mm
+c0108c2a unlock_mm
+c01aed20 hash_list
+c01b0d20 nr_process
+c0108c4b alloc_proc
+c01b0d24 name.1985
+c0108e4e set_links
+c0108ef4 remove_links
+c0108f78 get_pid
+c012ca6c last_pid.2001
+c012ca70 next_safe.2000
+c01090ee forkret
+c010910b hash_proc
+c0109185 unhash_proc
+c010928e setup_kstack
+c01092ce put_kstack
+c01092f7 setup_pgdir
+c0109390 put_pgdir
+c01093b9 copy_mm
+c01094df copy_thread
+c0109876 load_icode
+c010a182 kernel_execve
+c010a1bf user_main
+c010a215 init_main
+00000000 sched.c
+c010a544 __intr_save
+c010a56e __intr_restore
+c01b0d34 timer_list
+c01b0d3c sched_class
+c01b0d40 rq
+c010a582 sched_class_enqueue
+c010a5af sched_class_dequeue
+c010a5d2 sched_class_pick_next
+c01b0d44 __rq
+00000000 default_sched.c
+c010a7c3 skew_heap_merge
+c010a88d proc_stride_comp_f
+c010a8e3 stride_init
+c010a91a stride_enqueue
+c010a9c8 stride_dequeue
+c010aa64 stride_pick_next
+c010aae4 stride_proc_tick
+00000000 syscall.c
+c010ab23 sys_exit
+c010ab41 sys_fork
+c010ab70 sys_wait
+c010ab9c sys_exec
+c010abe1 sys_yield
+c010abee sys_kill
+c010ac0c sys_getpid
+c010ac19 sys_putc
+c010ac3c sys_pgdir
+c010ac4e sys_gettime
+c010ac58 sys_lab6_set_priority
+c012caa0 syscalls
+00000000 string.c
+00000000 printfmt.c
+c010dec0 error_string
+c010b1f4 printnum
+c010b2e5 getuint
+c010b334 getint
+c010b747 sprintputch
+00000000 hash.c
+00000000 rand.c
+c012cea0 next
+c010348d vector242
+c0102ee4 vector119
+c01009ef print_kerninfo
+c0102dc4 vector87
+c0102dbb vector86
+c01034f9 vector251
+c010ad90 strcpy
+c01011ae ide_device_valid
+c0102de8 vector91
+c0102bde vector33
+c01030cd vector162
+c0103331 vector213
+c0102e81 vector108
+c0102c38 vector43
+00007920 _binary_obj___user_yield_out_size
+c0106b4f slob_allocated
+c0100000 kern_entry
+c0100e3e mon_backtrace
+c01030f1 vector165
+c0143a3c _binary_obj___user_badsegment_out_start
+c01031e1 vector185
+c0102ec0 vector115
+c0102eff vector122
+00007920 _binary_obj___user_hello_out_size
+c0105ce1 copy_from_user
+c019e9f8 _binary_obj___user_forktest_out_end
+c0104519 page_insert
+c0103085 vector156
+c01034b1 vector245
+c0103211 vector189
+c0102b04 vector7
+c0102cda vector61
+c0102b8d vector24
+c0102e9c vector111
+c0103295 vector200
+00007974 _binary_obj___user_testbss_out_size
+c0102d10 vector67
+c010a69d wakeup_proc
+c0106b59 kallocated
+c0104622 pgdir_alloc_page
+c0102fad vector138
+c0102d4f vector74
+c010b0a9 memmove
+c0102cb6 vector57
+c0161f2c _binary_obj___user_exit_out_end
+c0105661 mm_create
+c010b77d snprintf
+c010ac7b syscall
+c0102406 print_trapframe
+c010333d vector214
+c010b39f vprintfmt
+c0102e30 vector99
+c010407b get_page
+c0103535 __alltraps
+c0101f55 cons_getc
+c0102fd1 vector141
+c01004a9 is_kernel_panic
+c0103145 vector172
+c0100b39 print_stackframe
+c0103481 vector241
+c01b0d68 pra_list_head
+c0103511 vector253
+c0102ae0 vector3
+c0103557 forkrets
+c0102ad7 vector2
+c010957b do_fork
+c01033d9 vector227
+c0109229 kernel_thread
+c010330d vector210
+c01aed00 idleproc
+c01033b5 vector224
+c0102c26 vector41
+c012ca40 swap_manager_fifo
+c010028e cprintf
+c018f794 _binary_obj___user_testbss_out_end
+c01b0e50 proc_list
+c0102b72 vector21
+c0103181 vector177
+c0102edb vector118
+c0102d2b vector70
+c0105a2a mm_map
+c0102d22 vector69
+c0103451 vector237
+c0102cf5 vector64
+c0102ba8 vector27
+c0105b32 dup_mmap
+c0105d62 vmm_init
+c0102f65 vector132
+c01347c8 _binary_obj___user_badarg_out_start
+c0105c19 exit_mmap
+c01031ed vector186
+00007920 _binary_obj___user_badarg_out_size
+c0103361 vector217
+c010598b mm_destroy
+c01089c6 kernel_thread_entry
+c0109f8c do_wait
+c010b14c memcpy
+c0102ace vector1
+c010318d vector178
+c0102c0b vector38
+c0106c8e kfree
+c01a6318 _binary_obj___user_pgdir_out_end
+c010345d vector238
+c0180500 _binary_obj___user_yield_out_start
+c0100332 readline
+c012cea8 _binary_obj___user_hello_out_start
+c0102f71 vector133
+c0102d46 vector73
+c0102ff5 vector144
+c010c2ac vpd
+c010002a kern_init
+c015a5f4 _binary_obj___user_exit_out_start
+c010351d vector254
+c0102e42 vector101
+c0103319 vector211
+c010315d vector174
+c0103499 vector243
+c0104307 copy_range
+c0102f35 vector128
+c01adcdc _binary_obj___user_matrix_out_end
+c0102d8e vector81
+c010a519 lab6_set_priority
+c01038d8 free_pages
+c0102b30 vector13
+c010b7a6 vsnprintf
+c0102c80 vector51
+c0102b47 vector16
+c01adcdc edata
+c0101edb cons_init
+c01070b8 swap_in
+c0101458 ide_write_secs
+c01b0d5c pmm_manager
+c0103475 vector240
+c0102c9b vector54
+c0102b60 vector19
+c0123568 __STAB_END__
+c0102df1 vector92
+c01034a5 vector244
+c01aecf4 swap_init_ok
+c0103718 load_esp0
+c0102fc5 vector140
+c0102c4a vector45
+c0102d7c vector79
+c01033f1 vector229
+c0106e6f swap_init
+c010309d vector158
+c0102020 pic_enable
+c01088d1 swapfs_init
+c01b0d80 check_rp
+00007920 _binary_obj___user_softint_out_size
+c0104213 exit_range
+c0102c14 vector39
+c0103115 vector168
+c0178be4 _binary_obj___user_waitkill_out_end
+c0102bf0 vector35
+c0102eae vector113
+c0123569 __STABSTR_BEGIN__
+c010a11a do_kill
+c0102f1a vector125
+c01003f4 __panic
+c01347c8 _binary_obj___user_hello_out_end
+c01aed04 initproc
+c0103355 vector216
+c0102cec vector63
+c0102b9f vector26
+c0101cf8 serial_intr
+c0103241 vector193
+c0103265 vector196
+c01000f0 grade_backtrace0
+c0103301 vector209
+c0102ae9 vector4
+c010312d vector170
+c010a72a schedule
+c0102f95 vector136
+c0102b1b vector10
+c0171204 _binary_obj___user_softint_out_end
+c01032dd vector206
+c0103529 vector255
+c01031b1 vector181
+c0102cc8 vector59
+c010010a grade_backtrace
+c0102db2 vector85
+c0102da9 vector84
+c01089cf switch_to
+c01031c9 vector183
+c01030a9 vector159
+c0103325 vector212
+c0102c5c vector47
+c010af0c strtol
+c01033e5 vector228
+c0102c2f vector42
+c0102eb7 vector114
+c010ad60 strnlen
+c01698e4 _binary_obj___user_softint_out_start
+c014b360 _binary_obj___user_faultread_out_start
+c0103169 vector175
+c0102fe9 vector143
+c0102f4d vector130
+c010d808 default_pmm_manager
+c01034bd vector246
+c0102b14 vector9
+c0102fdd vector142
+c0102e39 vector100
+00007954 _binary_obj___user_forktree_out_size
+c010a5f1 sched_class_proc_tick
+c01032a1 vector201
+c01021d4 idt_init
+c0100a8c print_debuginfo
+c010573b find_vma
+c01b0da0 swap_in_seq_no
+c013c0e8 _binary_obj___user_forktree_out_start
+c0102cd1 vector60
+c0102b84 vector23
+c0103445 vector236
+c01aec60 npage
+c010639d do_pgfault
+c0103409 vector231
+00007970 _binary_obj___user_divzero_out_size
+c0108de4 set_proc_name
+c0102d07 vector66
+c0102bba vector29
+c0105057 print_pgdir
+c0102f89 vector135
+c0100d64 kmonitor
+00007924 _binary_obj___user_badsegment_out_size
+c0102d6a vector77
+c01031a5 vector180
+c0101682 clock_init
+c01032f5 vector208
+c0102e27 vector98
+c0102e1e vector97
+c010390d nr_free_pages
+c0106d54 ksize
+00007920 _binary_obj___user_pgdir_out_size
+c0103175 vector176
+c0187e20 _binary_obj___user_testbss_out_start
+c010324d vector194
+c0102bd5 vector32
+c01b0d60 boot_cr3
+c01b0e58 end
+c0103289 vector199
+c01096a6 do_exit
+c0102f59 vector131
+c0103505 vector252
+c0102ac5 vector0
+c018f794 _binary_obj___user_faultreadkernel_out_start
+c014b360 _binary_obj___user_badsegment_out_end
+c010aedd strfind
+000079e0 _binary_obj___user_waitkill_out_size
+c0101f0c cons_putc
+c01b0de0 swap_out_seq_no
+c010b8fd etext
+c0103001 vector145
+c0102e78 vector107
+c01aec64 boot_pgdir
+c0102c1d vector40
+c010218a intr_enable
+c0102e4b vector102
+c0180500 _binary_obj___user_spin_out_end
+c0102cad vector56
+c0102d19 vector68
+c0102afb vector6
+c010b825 rand
+c0102f41 vector129
+c0103271 vector197
+c0103055 vector152
+c012c600 __vectors
+c01033fd vector230
+c010ae54 strncmp
+c0106b18 slob_init
+c0103f57 get_pte
+c01011ee ide_device_size
+c0102c02 vector37
+c01b0e08 check_swap_addr
+c01032d1 vector205
+c01030c1 vector161
+c01aed08 current
+c010add0 strncpy
+c0105d22 copy_to_user
+c0102d34 vector71
+c01030b5 vector160
+c01970bc _binary_obj___user_forktest_out_start
+c0106b31 kmalloc_init
+c0103349 vector215
+0000791c _binary_obj___user_spin_out_size
+c0103091 vector157
+c0102191 intr_disable
+c01025e3 print_regs
+c0102ea5 vector112
+c01000b1 grade_backtrace2
+c01031bd vector182
+c0102b29 vector12
+c010b19c memcmp
+c0102e8a vector109
+c0102b69 vector20
+c0102c92 vector53
+c0102b57 vector18
+c010a500 cpu_idle
+c0102e0c vector95
+c0109e54 do_execve
+c01033cd vector226
+c0102c6e vector49
+c0102c41 vector44
+c0102d73 vector78
+c0103151 vector173
+c0108914 swapfs_read
+c0102ed2 vector117
+c01023f0 trap_in_kernel
+c0106f49 swap_set_unswappable
+c0102d97 vector82
+c010339d vector222
+c0102b0d vector8
+c0103031 vector149
+c01002b4 cputchar
+c010b069 memset
+c0103415 vector232
+c010122e ide_read_secs
+c0102e6f vector106
+c0103385 vector220
+c0102ddf vector90
+c01030d9 vector163
+c010b8e4 srand
+c010342d vector234
+c0106f28 swap_map_swappable
+c0102ce3 vector62
+c0102b96 vector25
+c010327d vector198
+c0102eed vector120
+c013c0e8 _binary_obj___user_badarg_out_end
+c0100319 getchar
+c01044e0 page_remove
+c010b800 hash32
+c0102c77 vector50
+c0102b3e vector15
+c01aecf8 swap_out_num
+c010b37b printfmt
+c01970bc _binary_obj___user_faultreadkernel_out_end
+c0109f76 do_yield
+c0103049 vector151
+c0102da0 vector83
+c0102dd6 vector89
+c0102dcd vector88
+c0102a30 trap
+c0103199 vector179
+c0102be7 vector34
+c012971b __STABSTR_END__
+c0102c53 vector46
+c010ae0a strcmp
+c0102f7d vector134
+c01033a9 vector223
+c010336d vector218
+c010060a debuginfo_eip
+c01b0e1c max_swap_offset
+00007928 _binary_obj___user_faultreadkernel_out_size
+c0105867 insert_vma_struct
+c010204d pic_init
+c01033c1 vector225
+c01031f9 vector187
+c0103e4d pmm_init
+c0102bc3 vector30
+c0102f2c vector127
+c01b0d58 ticks
+c0103235 vector192
+c01030fd vector166
+c0102d61 vector76
+c0102d58 vector75
+c0103259 vector195
+c010303d vector150
+c0102cbf vector58
+c01034d5 vector248
+c0143a3c _binary_obj___user_forktree_out_end
+c0102f08 vector123
+c0102e15 vector96
+00007938 _binary_obj___user_exit_out_size
+c0102bcc vector31
+c01032b9 vector203
+c010386c alloc_pages
+c0171204 _binary_obj___user_waitkill_out_start
+c0102fb9 vector139
+c0103061 vector153
+c01030e5 vector164
+c01698e4 _binary_obj___user_priority_out_end
+c0102ef6 vector121
+c0102af2 vector5
+c0178be4 _binary_obj___user_spin_out_start
+c0103109 vector167
+c0103079 vector155
+c01034e1 vector249
+c010c2a8 vpt
+c01034ed vector250
+c0102f11 vector124
+c0102e93 vector110
+c01032c5 vector204
+c0152c84 _binary_obj___user_faultread_out_end
+c01b0e20 swap_page
+c019e9f8 _binary_obj___user_pgdir_out_start
+c010354c __trapret
+c01a6318 _binary_obj___user_matrix_out_start
+c0100265 vcprintf
+c0102fa1 vector137
+00007924 _binary_obj___user_faultread_out_size
+c0100462 __warn
+c01034c9 vector247
+c0102b7b vector22
+c01032ad vector202
+c0102d3d vector72
+c0102ca4 vector55
+c01002cb cputs
+c012c000 bootstacktop
+c01091b9 find_proc
+c0102f23 vector126
+c0102cfe vector65
+c0102bb1 vector28
+c0103121 vector169
+c0106f0d swap_tick_event
+c0103421 vector233
+000079c4 _binary_obj___user_matrix_out_size
+c0106f67 swap_out
+c0106c76 kmalloc
+c015a5f4 _binary_obj___user_divzero_out_end
+c01056ff vma_create
+c0103019 vector147
+c0109070 proc_run
+c012a000 bootstack
+c0102e5d vector104
+c01b0e44 free_area
+c0102ec9 vector116
+c0152c84 _binary_obj___user_divzero_out_start
+000079b8 _binary_obj___user_priority_out_size
+c010896d swapfs_write
+c010e0a0 __STAB_BEGIN__
+c010656d user_mem_check
+c010a62a sched_init
+c01b0e34 check_ptep
+c0102c89 vector52
+c0102b50 vector17
+c01031d5 vector184
+c010ad38 strlen
+c012ca74 default_sched_class
+c0108e19 get_proc_name
+c0161f2c _binary_obj___user_priority_out_start
+c01aecec pgfault_num
+c01032e9 vector207
+c0187e20 _binary_obj___user_yield_out_end
+c010321d vector190
+c0100eaa ide_init
+c0103469 vector239
+c0102e03 vector94
+c0102dfa vector93
+c0103205 vector188
+c010aeaa strchr
+c0102c65 vector48
+c01b0d70 check_mm_struct
+c0106ef2 swap_init_mm
+c01000cb grade_backtrace1
+c0103379 vector219
+c0103025 vector148
+c0103391 vector221
+c0102d85 vector80
+c0103139 vector171
+c010306d vector154
+c0102bf9 vector36
+c0103439 vector235
+c0102e66 vector105
+c0100e2c mon_kerninfo
+c01b0d64 pages
+c010300d vector146
+c0104140 unmap_range
+c0103229 vector191
+c010a363 proc_init
+c0102e54 vector103
+c0100dd2 mon_help
+c0102b22 vector11
+0000793c _binary_obj___user_forktest_out_size
+c01045d2 tlb_invalidate
+c0102b37 vector14
diff -r -u -P lab6_original/obj/libs/hash.d lab6/obj/libs/hash.d
--- lab6_original/obj/libs/hash.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/libs/hash.d	2016-04-29 16:22:06.733027482 +0800
@@ -0,0 +1 @@
+obj/libs/hash.o obj/libs/hash.d: libs/hash.c libs/stdlib.h libs/defs.h
Binary files lab6_original/obj/libs/hash.o and lab6/obj/libs/hash.o differ
diff -r -u -P lab6_original/obj/libs/printfmt.d lab6/obj/libs/printfmt.d
--- lab6_original/obj/libs/printfmt.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/libs/printfmt.d	2016-04-29 16:22:06.744976377 +0800
@@ -0,0 +1,2 @@
+obj/libs/printfmt.o obj/libs/printfmt.d: libs/printfmt.c libs/defs.h \
+ libs/x86.h libs/error.h libs/stdio.h libs/stdarg.h libs/string.h
Binary files lab6_original/obj/libs/printfmt.o and lab6/obj/libs/printfmt.o differ
diff -r -u -P lab6_original/obj/libs/rand.d lab6/obj/libs/rand.d
--- lab6_original/obj/libs/rand.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/libs/rand.d	2016-04-29 16:22:06.733027482 +0800
@@ -0,0 +1,2 @@
+obj/libs/rand.o obj/libs/rand.d: libs/rand.c libs/x86.h libs/defs.h \
+ libs/stdlib.h
Binary files lab6_original/obj/libs/rand.o and lab6/obj/libs/rand.o differ
diff -r -u -P lab6_original/obj/libs/string.d lab6/obj/libs/string.d
--- lab6_original/obj/libs/string.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/libs/string.d	2016-04-29 16:22:06.740993412 +0800
@@ -0,0 +1,2 @@
+obj/libs/string.o obj/libs/string.d: libs/string.c libs/string.h \
+ libs/defs.h libs/x86.h
Binary files lab6_original/obj/libs/string.o and lab6/obj/libs/string.o differ
diff -r -u -P lab6_original/obj/sign/tools/sign.d lab6/obj/sign/tools/sign.d
--- lab6_original/obj/sign/tools/sign.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/sign/tools/sign.d	2016-04-29 16:22:06.880397179 +0800
@@ -0,0 +1 @@
+obj/sign/tools/sign.o obj/sign/tools/sign.d: tools/sign.c
Binary files lab6_original/obj/sign/tools/sign.o and lab6/obj/sign/tools/sign.o differ
diff -r -u -P lab6_original/obj/user/badarg.asm lab6/obj/user/badarg.asm
--- lab6_original/obj/user/badarg.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/badarg.asm	2016-04-29 16:22:07.696875288 +0800
@@ -0,0 +1,2666 @@
+
+obj/__user_badarg.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 18             	sub    $0x18,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	83 ec 04             	sub    $0x4,%esp
+  80002f:	ff 75 0c             	pushl  0xc(%ebp)
+  800032:	ff 75 08             	pushl  0x8(%ebp)
+  800035:	68 60 10 80 00       	push   $0x801060
+  80003a:	e8 9a 02 00 00       	call   8002d9 <cprintf>
+  80003f:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800042:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800045:	83 ec 08             	sub    $0x8,%esp
+  800048:	50                   	push   %eax
+  800049:	ff 75 10             	pushl  0x10(%ebp)
+  80004c:	e8 5f 02 00 00       	call   8002b0 <vcprintf>
+  800051:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  800054:	83 ec 0c             	sub    $0xc,%esp
+  800057:	68 7a 10 80 00       	push   $0x80107a
+  80005c:	e8 78 02 00 00       	call   8002d9 <cprintf>
+  800061:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	83 ec 0c             	sub    $0xc,%esp
+  800067:	6a f6                	push   $0xfffffff6
+  800069:	e8 49 01 00 00       	call   8001b7 <exit>
+
+0080006e <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80006e:	55                   	push   %ebp
+  80006f:	89 e5                	mov    %esp,%ebp
+  800071:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800074:	8d 45 14             	lea    0x14(%ebp),%eax
+  800077:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007a:	83 ec 04             	sub    $0x4,%esp
+  80007d:	ff 75 0c             	pushl  0xc(%ebp)
+  800080:	ff 75 08             	pushl  0x8(%ebp)
+  800083:	68 7c 10 80 00       	push   $0x80107c
+  800088:	e8 4c 02 00 00       	call   8002d9 <cprintf>
+  80008d:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800090:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800093:	83 ec 08             	sub    $0x8,%esp
+  800096:	50                   	push   %eax
+  800097:	ff 75 10             	pushl  0x10(%ebp)
+  80009a:	e8 11 02 00 00       	call   8002b0 <vcprintf>
+  80009f:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  8000a2:	83 ec 0c             	sub    $0xc,%esp
+  8000a5:	68 7a 10 80 00       	push   $0x80107a
+  8000aa:	e8 2a 02 00 00       	call   8002d9 <cprintf>
+  8000af:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8000b2:	90                   	nop
+  8000b3:	c9                   	leave  
+  8000b4:	c3                   	ret    
+
+008000b5 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b5:	55                   	push   %ebp
+  8000b6:	89 e5                	mov    %esp,%ebp
+  8000b8:	57                   	push   %edi
+  8000b9:	56                   	push   %esi
+  8000ba:	53                   	push   %ebx
+  8000bb:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000be:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cb:	eb 16                	jmp    8000e3 <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8000cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d0:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d3:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d6:	8b 10                	mov    (%eax),%edx
+  8000d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000db:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000df:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8000e3:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e7:	7e e4                	jle    8000cd <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000e9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ec:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000ef:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f2:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f5:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8000f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fb:	cd 80                	int    $0x80
+  8000fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  800100:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800103:	83 c4 20             	add    $0x20,%esp
+  800106:	5b                   	pop    %ebx
+  800107:	5e                   	pop    %esi
+  800108:	5f                   	pop    %edi
+  800109:	5d                   	pop    %ebp
+  80010a:	c3                   	ret    
+
+0080010b <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010b:	55                   	push   %ebp
+  80010c:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_exit, error_code);
+  80010e:	ff 75 08             	pushl  0x8(%ebp)
+  800111:	6a 01                	push   $0x1
+  800113:	e8 9d ff ff ff       	call   8000b5 <syscall>
+  800118:	83 c4 08             	add    $0x8,%esp
+}
+  80011b:	c9                   	leave  
+  80011c:	c3                   	ret    
+
+0080011d <sys_fork>:
+
+int
+sys_fork(void) {
+  80011d:	55                   	push   %ebp
+  80011e:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_fork);
+  800120:	6a 02                	push   $0x2
+  800122:	e8 8e ff ff ff       	call   8000b5 <syscall>
+  800127:	83 c4 04             	add    $0x4,%esp
+}
+  80012a:	c9                   	leave  
+  80012b:	c3                   	ret    
+
+0080012c <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80012c:	55                   	push   %ebp
+  80012d:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_wait, pid, store);
+  80012f:	ff 75 0c             	pushl  0xc(%ebp)
+  800132:	ff 75 08             	pushl  0x8(%ebp)
+  800135:	6a 03                	push   $0x3
+  800137:	e8 79 ff ff ff       	call   8000b5 <syscall>
+  80013c:	83 c4 0c             	add    $0xc,%esp
+}
+  80013f:	c9                   	leave  
+  800140:	c3                   	ret    
+
+00800141 <sys_yield>:
+
+int
+sys_yield(void) {
+  800141:	55                   	push   %ebp
+  800142:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_yield);
+  800144:	6a 0a                	push   $0xa
+  800146:	e8 6a ff ff ff       	call   8000b5 <syscall>
+  80014b:	83 c4 04             	add    $0x4,%esp
+}
+  80014e:	c9                   	leave  
+  80014f:	c3                   	ret    
+
+00800150 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800150:	55                   	push   %ebp
+  800151:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_kill, pid);
+  800153:	ff 75 08             	pushl  0x8(%ebp)
+  800156:	6a 0c                	push   $0xc
+  800158:	e8 58 ff ff ff       	call   8000b5 <syscall>
+  80015d:	83 c4 08             	add    $0x8,%esp
+}
+  800160:	c9                   	leave  
+  800161:	c3                   	ret    
+
+00800162 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800162:	55                   	push   %ebp
+  800163:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_getpid);
+  800165:	6a 12                	push   $0x12
+  800167:	e8 49 ff ff ff       	call   8000b5 <syscall>
+  80016c:	83 c4 04             	add    $0x4,%esp
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_putc, c);
+  800174:	ff 75 08             	pushl  0x8(%ebp)
+  800177:	6a 1e                	push   $0x1e
+  800179:	e8 37 ff ff ff       	call   8000b5 <syscall>
+  80017e:	83 c4 08             	add    $0x8,%esp
+}
+  800181:	c9                   	leave  
+  800182:	c3                   	ret    
+
+00800183 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800183:	55                   	push   %ebp
+  800184:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_pgdir);
+  800186:	6a 1f                	push   $0x1f
+  800188:	e8 28 ff ff ff       	call   8000b5 <syscall>
+  80018d:	83 c4 04             	add    $0x4,%esp
+}
+  800190:	c9                   	leave  
+  800191:	c3                   	ret    
+
+00800192 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  800192:	55                   	push   %ebp
+  800193:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_gettime);
+  800195:	6a 11                	push   $0x11
+  800197:	e8 19 ff ff ff       	call   8000b5 <syscall>
+  80019c:	83 c4 04             	add    $0x4,%esp
+}
+  80019f:	c9                   	leave  
+  8001a0:	c3                   	ret    
+
+008001a1 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001a1:	55                   	push   %ebp
+  8001a2:	89 e5                	mov    %esp,%ebp
+    syscall(SYS_lab6_set_priority, priority);
+  8001a4:	ff 75 08             	pushl  0x8(%ebp)
+  8001a7:	68 ff 00 00 00       	push   $0xff
+  8001ac:	e8 04 ff ff ff       	call   8000b5 <syscall>
+  8001b1:	83 c4 08             	add    $0x8,%esp
+}
+  8001b4:	90                   	nop
+  8001b5:	c9                   	leave  
+  8001b6:	c3                   	ret    
+
+008001b7 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001b7:	55                   	push   %ebp
+  8001b8:	89 e5                	mov    %esp,%ebp
+  8001ba:	83 ec 08             	sub    $0x8,%esp
+    sys_exit(error_code);
+  8001bd:	83 ec 0c             	sub    $0xc,%esp
+  8001c0:	ff 75 08             	pushl  0x8(%ebp)
+  8001c3:	e8 43 ff ff ff       	call   80010b <sys_exit>
+  8001c8:	83 c4 10             	add    $0x10,%esp
+    cprintf("BUG: exit failed.\n");
+  8001cb:	83 ec 0c             	sub    $0xc,%esp
+  8001ce:	68 98 10 80 00       	push   $0x801098
+  8001d3:	e8 01 01 00 00       	call   8002d9 <cprintf>
+  8001d8:	83 c4 10             	add    $0x10,%esp
+    while (1);
+  8001db:	eb fe                	jmp    8001db <exit+0x24>
+
+008001dd <fork>:
+}
+
+int
+fork(void) {
+  8001dd:	55                   	push   %ebp
+  8001de:	89 e5                	mov    %esp,%ebp
+  8001e0:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8001e3:	e8 35 ff ff ff       	call   80011d <sys_fork>
+}
+  8001e8:	c9                   	leave  
+  8001e9:	c3                   	ret    
+
+008001ea <wait>:
+
+int
+wait(void) {
+  8001ea:	55                   	push   %ebp
+  8001eb:	89 e5                	mov    %esp,%ebp
+  8001ed:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(0, NULL);
+  8001f0:	83 ec 08             	sub    $0x8,%esp
+  8001f3:	6a 00                	push   $0x0
+  8001f5:	6a 00                	push   $0x0
+  8001f7:	e8 30 ff ff ff       	call   80012c <sys_wait>
+  8001fc:	83 c4 10             	add    $0x10,%esp
+}
+  8001ff:	c9                   	leave  
+  800200:	c3                   	ret    
+
+00800201 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800201:	55                   	push   %ebp
+  800202:	89 e5                	mov    %esp,%ebp
+  800204:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(pid, store);
+  800207:	83 ec 08             	sub    $0x8,%esp
+  80020a:	ff 75 0c             	pushl  0xc(%ebp)
+  80020d:	ff 75 08             	pushl  0x8(%ebp)
+  800210:	e8 17 ff ff ff       	call   80012c <sys_wait>
+  800215:	83 c4 10             	add    $0x10,%esp
+}
+  800218:	c9                   	leave  
+  800219:	c3                   	ret    
+
+0080021a <yield>:
+
+void
+yield(void) {
+  80021a:	55                   	push   %ebp
+  80021b:	89 e5                	mov    %esp,%ebp
+  80021d:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800220:	e8 1c ff ff ff       	call   800141 <sys_yield>
+}
+  800225:	90                   	nop
+  800226:	c9                   	leave  
+  800227:	c3                   	ret    
+
+00800228 <kill>:
+
+int
+kill(int pid) {
+  800228:	55                   	push   %ebp
+  800229:	89 e5                	mov    %esp,%ebp
+  80022b:	83 ec 08             	sub    $0x8,%esp
+    return sys_kill(pid);
+  80022e:	83 ec 0c             	sub    $0xc,%esp
+  800231:	ff 75 08             	pushl  0x8(%ebp)
+  800234:	e8 17 ff ff ff       	call   800150 <sys_kill>
+  800239:	83 c4 10             	add    $0x10,%esp
+}
+  80023c:	c9                   	leave  
+  80023d:	c3                   	ret    
+
+0080023e <getpid>:
+
+int
+getpid(void) {
+  80023e:	55                   	push   %ebp
+  80023f:	89 e5                	mov    %esp,%ebp
+  800241:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800244:	e8 19 ff ff ff       	call   800162 <sys_getpid>
+}
+  800249:	c9                   	leave  
+  80024a:	c3                   	ret    
+
+0080024b <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80024b:	55                   	push   %ebp
+  80024c:	89 e5                	mov    %esp,%ebp
+  80024e:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800251:	e8 2d ff ff ff       	call   800183 <sys_pgdir>
+}
+  800256:	90                   	nop
+  800257:	c9                   	leave  
+  800258:	c3                   	ret    
+
+00800259 <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  800259:	55                   	push   %ebp
+  80025a:	89 e5                	mov    %esp,%ebp
+  80025c:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  80025f:	e8 2e ff ff ff       	call   800192 <sys_gettime>
+}
+  800264:	c9                   	leave  
+  800265:	c3                   	ret    
+
+00800266 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800266:	55                   	push   %ebp
+  800267:	89 e5                	mov    %esp,%ebp
+  800269:	83 ec 08             	sub    $0x8,%esp
+    sys_lab6_set_priority(priority);
+  80026c:	83 ec 0c             	sub    $0xc,%esp
+  80026f:	ff 75 08             	pushl  0x8(%ebp)
+  800272:	e8 2a ff ff ff       	call   8001a1 <sys_lab6_set_priority>
+  800277:	83 c4 10             	add    $0x10,%esp
+}
+  80027a:	90                   	nop
+  80027b:	c9                   	leave  
+  80027c:	c3                   	ret    
+
+0080027d <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  80027d:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800282:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800285:	e8 c3 00 00 00       	call   80034d <umain>
+1:  jmp 1b
+  80028a:	eb fe                	jmp    80028a <_start+0xd>
+
+0080028c <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  80028c:	55                   	push   %ebp
+  80028d:	89 e5                	mov    %esp,%ebp
+  80028f:	83 ec 08             	sub    $0x8,%esp
+    sys_putc(c);
+  800292:	83 ec 0c             	sub    $0xc,%esp
+  800295:	ff 75 08             	pushl  0x8(%ebp)
+  800298:	e8 d4 fe ff ff       	call   800171 <sys_putc>
+  80029d:	83 c4 10             	add    $0x10,%esp
+    (*cnt) ++;
+  8002a0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002a3:	8b 00                	mov    (%eax),%eax
+  8002a5:	8d 50 01             	lea    0x1(%eax),%edx
+  8002a8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002ab:	89 10                	mov    %edx,(%eax)
+}
+  8002ad:	90                   	nop
+  8002ae:	c9                   	leave  
+  8002af:	c3                   	ret    
+
+008002b0 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002b0:	55                   	push   %ebp
+  8002b1:	89 e5                	mov    %esp,%ebp
+  8002b3:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  8002b6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002bd:	ff 75 0c             	pushl  0xc(%ebp)
+  8002c0:	ff 75 08             	pushl  0x8(%ebp)
+  8002c3:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  8002c6:	50                   	push   %eax
+  8002c7:	68 8c 02 80 00       	push   $0x80028c
+  8002cc:	e8 fc 06 00 00       	call   8009cd <vprintfmt>
+  8002d1:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  8002d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002d7:	c9                   	leave  
+  8002d8:	c3                   	ret    
+
+008002d9 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  8002d9:	55                   	push   %ebp
+  8002da:	89 e5                	mov    %esp,%ebp
+  8002dc:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8002df:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8002e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  8002e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8002e8:	83 ec 08             	sub    $0x8,%esp
+  8002eb:	50                   	push   %eax
+  8002ec:	ff 75 08             	pushl  0x8(%ebp)
+  8002ef:	e8 bc ff ff ff       	call   8002b0 <vcprintf>
+  8002f4:	83 c4 10             	add    $0x10,%esp
+  8002f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  8002fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002fd:	c9                   	leave  
+  8002fe:	c3                   	ret    
+
+008002ff <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  8002ff:	55                   	push   %ebp
+  800300:	89 e5                	mov    %esp,%ebp
+  800302:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  800305:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80030c:	eb 14                	jmp    800322 <cputs+0x23>
+        cputch(c, &cnt);
+  80030e:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800312:	83 ec 08             	sub    $0x8,%esp
+  800315:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800318:	52                   	push   %edx
+  800319:	50                   	push   %eax
+  80031a:	e8 6d ff ff ff       	call   80028c <cputch>
+  80031f:	83 c4 10             	add    $0x10,%esp
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800322:	8b 45 08             	mov    0x8(%ebp),%eax
+  800325:	8d 50 01             	lea    0x1(%eax),%edx
+  800328:	89 55 08             	mov    %edx,0x8(%ebp)
+  80032b:	0f b6 00             	movzbl (%eax),%eax
+  80032e:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800331:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800335:	75 d7                	jne    80030e <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800337:	83 ec 08             	sub    $0x8,%esp
+  80033a:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  80033d:	50                   	push   %eax
+  80033e:	6a 0a                	push   $0xa
+  800340:	e8 47 ff ff ff       	call   80028c <cputch>
+  800345:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  800348:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80034b:	c9                   	leave  
+  80034c:	c3                   	ret    
+
+0080034d <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  80034d:	55                   	push   %ebp
+  80034e:	89 e5                	mov    %esp,%ebp
+  800350:	83 ec 18             	sub    $0x18,%esp
+    int ret = main();
+  800353:	e8 d3 0b 00 00       	call   800f2b <main>
+  800358:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  80035b:	83 ec 0c             	sub    $0xc,%esp
+  80035e:	ff 75 f4             	pushl  -0xc(%ebp)
+  800361:	e8 51 fe ff ff       	call   8001b7 <exit>
+
+00800366 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800366:	55                   	push   %ebp
+  800367:	89 e5                	mov    %esp,%ebp
+  800369:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  80036c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800373:	eb 04                	jmp    800379 <strlen+0x13>
+        cnt ++;
+  800375:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800379:	8b 45 08             	mov    0x8(%ebp),%eax
+  80037c:	8d 50 01             	lea    0x1(%eax),%edx
+  80037f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800382:	0f b6 00             	movzbl (%eax),%eax
+  800385:	84 c0                	test   %al,%al
+  800387:	75 ec                	jne    800375 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800389:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  80038c:	c9                   	leave  
+  80038d:	c3                   	ret    
+
+0080038e <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  80038e:	55                   	push   %ebp
+  80038f:	89 e5                	mov    %esp,%ebp
+  800391:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800394:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  80039b:	eb 04                	jmp    8003a1 <strnlen+0x13>
+        cnt ++;
+  80039d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  8003a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003a4:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003a7:	73 10                	jae    8003b9 <strnlen+0x2b>
+  8003a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003ac:	8d 50 01             	lea    0x1(%eax),%edx
+  8003af:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003b2:	0f b6 00             	movzbl (%eax),%eax
+  8003b5:	84 c0                	test   %al,%al
+  8003b7:	75 e4                	jne    80039d <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003b9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003bc:	c9                   	leave  
+  8003bd:	c3                   	ret    
+
+008003be <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  8003be:	55                   	push   %ebp
+  8003bf:	89 e5                	mov    %esp,%ebp
+  8003c1:	57                   	push   %edi
+  8003c2:	56                   	push   %esi
+  8003c3:	83 ec 20             	sub    $0x20,%esp
+  8003c6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003cc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8003cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  8003d2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003d8:	89 d1                	mov    %edx,%ecx
+  8003da:	89 c2                	mov    %eax,%edx
+  8003dc:	89 ce                	mov    %ecx,%esi
+  8003de:	89 d7                	mov    %edx,%edi
+  8003e0:	ac                   	lods   %ds:(%esi),%al
+  8003e1:	aa                   	stos   %al,%es:(%edi)
+  8003e2:	84 c0                	test   %al,%al
+  8003e4:	75 fa                	jne    8003e0 <strcpy+0x22>
+  8003e6:	89 fa                	mov    %edi,%edx
+  8003e8:	89 f1                	mov    %esi,%ecx
+  8003ea:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8003ed:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8003f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  8003f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  8003f6:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  8003f7:	83 c4 20             	add    $0x20,%esp
+  8003fa:	5e                   	pop    %esi
+  8003fb:	5f                   	pop    %edi
+  8003fc:	5d                   	pop    %ebp
+  8003fd:	c3                   	ret    
+
+008003fe <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  8003fe:	55                   	push   %ebp
+  8003ff:	89 e5                	mov    %esp,%ebp
+  800401:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800404:	8b 45 08             	mov    0x8(%ebp),%eax
+  800407:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  80040a:	eb 21                	jmp    80042d <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  80040c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80040f:	0f b6 10             	movzbl (%eax),%edx
+  800412:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800415:	88 10                	mov    %dl,(%eax)
+  800417:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80041a:	0f b6 00             	movzbl (%eax),%eax
+  80041d:	84 c0                	test   %al,%al
+  80041f:	74 04                	je     800425 <strncpy+0x27>
+            src ++;
+  800421:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800425:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800429:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  80042d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800431:	75 d9                	jne    80040c <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800433:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800436:	c9                   	leave  
+  800437:	c3                   	ret    
+
+00800438 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800438:	55                   	push   %ebp
+  800439:	89 e5                	mov    %esp,%ebp
+  80043b:	57                   	push   %edi
+  80043c:	56                   	push   %esi
+  80043d:	83 ec 20             	sub    $0x20,%esp
+  800440:	8b 45 08             	mov    0x8(%ebp),%eax
+  800443:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800446:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800449:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  80044c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80044f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800452:	89 d1                	mov    %edx,%ecx
+  800454:	89 c2                	mov    %eax,%edx
+  800456:	89 ce                	mov    %ecx,%esi
+  800458:	89 d7                	mov    %edx,%edi
+  80045a:	ac                   	lods   %ds:(%esi),%al
+  80045b:	ae                   	scas   %es:(%edi),%al
+  80045c:	75 08                	jne    800466 <strcmp+0x2e>
+  80045e:	84 c0                	test   %al,%al
+  800460:	75 f8                	jne    80045a <strcmp+0x22>
+  800462:	31 c0                	xor    %eax,%eax
+  800464:	eb 04                	jmp    80046a <strcmp+0x32>
+  800466:	19 c0                	sbb    %eax,%eax
+  800468:	0c 01                	or     $0x1,%al
+  80046a:	89 fa                	mov    %edi,%edx
+  80046c:	89 f1                	mov    %esi,%ecx
+  80046e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800471:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800474:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800477:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  80047a:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  80047b:	83 c4 20             	add    $0x20,%esp
+  80047e:	5e                   	pop    %esi
+  80047f:	5f                   	pop    %edi
+  800480:	5d                   	pop    %ebp
+  800481:	c3                   	ret    
+
+00800482 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800482:	55                   	push   %ebp
+  800483:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800485:	eb 0c                	jmp    800493 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800487:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  80048b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  80048f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800493:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800497:	74 1a                	je     8004b3 <strncmp+0x31>
+  800499:	8b 45 08             	mov    0x8(%ebp),%eax
+  80049c:	0f b6 00             	movzbl (%eax),%eax
+  80049f:	84 c0                	test   %al,%al
+  8004a1:	74 10                	je     8004b3 <strncmp+0x31>
+  8004a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004a6:	0f b6 10             	movzbl (%eax),%edx
+  8004a9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ac:	0f b6 00             	movzbl (%eax),%eax
+  8004af:	38 c2                	cmp    %al,%dl
+  8004b1:	74 d4                	je     800487 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004b3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004b7:	74 18                	je     8004d1 <strncmp+0x4f>
+  8004b9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004bc:	0f b6 00             	movzbl (%eax),%eax
+  8004bf:	0f b6 d0             	movzbl %al,%edx
+  8004c2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004c5:	0f b6 00             	movzbl (%eax),%eax
+  8004c8:	0f b6 c0             	movzbl %al,%eax
+  8004cb:	29 c2                	sub    %eax,%edx
+  8004cd:	89 d0                	mov    %edx,%eax
+  8004cf:	eb 05                	jmp    8004d6 <strncmp+0x54>
+  8004d1:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8004d6:	5d                   	pop    %ebp
+  8004d7:	c3                   	ret    
+
+008004d8 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  8004d8:	55                   	push   %ebp
+  8004d9:	89 e5                	mov    %esp,%ebp
+  8004db:	83 ec 04             	sub    $0x4,%esp
+  8004de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004e1:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  8004e4:	eb 14                	jmp    8004fa <strchr+0x22>
+        if (*s == c) {
+  8004e6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e9:	0f b6 00             	movzbl (%eax),%eax
+  8004ec:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  8004ef:	75 05                	jne    8004f6 <strchr+0x1e>
+            return (char *)s;
+  8004f1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004f4:	eb 13                	jmp    800509 <strchr+0x31>
+        }
+        s ++;
+  8004f6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  8004fa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fd:	0f b6 00             	movzbl (%eax),%eax
+  800500:	84 c0                	test   %al,%al
+  800502:	75 e2                	jne    8004e6 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800504:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800509:	c9                   	leave  
+  80050a:	c3                   	ret    
+
+0080050b <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  80050b:	55                   	push   %ebp
+  80050c:	89 e5                	mov    %esp,%ebp
+  80050e:	83 ec 04             	sub    $0x4,%esp
+  800511:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800514:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800517:	eb 0f                	jmp    800528 <strfind+0x1d>
+        if (*s == c) {
+  800519:	8b 45 08             	mov    0x8(%ebp),%eax
+  80051c:	0f b6 00             	movzbl (%eax),%eax
+  80051f:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800522:	74 10                	je     800534 <strfind+0x29>
+            break;
+        }
+        s ++;
+  800524:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800528:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052b:	0f b6 00             	movzbl (%eax),%eax
+  80052e:	84 c0                	test   %al,%al
+  800530:	75 e7                	jne    800519 <strfind+0xe>
+  800532:	eb 01                	jmp    800535 <strfind+0x2a>
+        if (*s == c) {
+            break;
+  800534:	90                   	nop
+        }
+        s ++;
+    }
+    return (char *)s;
+  800535:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800538:	c9                   	leave  
+  800539:	c3                   	ret    
+
+0080053a <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  80053a:	55                   	push   %ebp
+  80053b:	89 e5                	mov    %esp,%ebp
+  80053d:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800540:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800547:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80054e:	eb 04                	jmp    800554 <strtol+0x1a>
+        s ++;
+  800550:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800554:	8b 45 08             	mov    0x8(%ebp),%eax
+  800557:	0f b6 00             	movzbl (%eax),%eax
+  80055a:	3c 20                	cmp    $0x20,%al
+  80055c:	74 f2                	je     800550 <strtol+0x16>
+  80055e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800561:	0f b6 00             	movzbl (%eax),%eax
+  800564:	3c 09                	cmp    $0x9,%al
+  800566:	74 e8                	je     800550 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800568:	8b 45 08             	mov    0x8(%ebp),%eax
+  80056b:	0f b6 00             	movzbl (%eax),%eax
+  80056e:	3c 2b                	cmp    $0x2b,%al
+  800570:	75 06                	jne    800578 <strtol+0x3e>
+        s ++;
+  800572:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800576:	eb 15                	jmp    80058d <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800578:	8b 45 08             	mov    0x8(%ebp),%eax
+  80057b:	0f b6 00             	movzbl (%eax),%eax
+  80057e:	3c 2d                	cmp    $0x2d,%al
+  800580:	75 0b                	jne    80058d <strtol+0x53>
+        s ++, neg = 1;
+  800582:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800586:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  80058d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800591:	74 06                	je     800599 <strtol+0x5f>
+  800593:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800597:	75 24                	jne    8005bd <strtol+0x83>
+  800599:	8b 45 08             	mov    0x8(%ebp),%eax
+  80059c:	0f b6 00             	movzbl (%eax),%eax
+  80059f:	3c 30                	cmp    $0x30,%al
+  8005a1:	75 1a                	jne    8005bd <strtol+0x83>
+  8005a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a6:	83 c0 01             	add    $0x1,%eax
+  8005a9:	0f b6 00             	movzbl (%eax),%eax
+  8005ac:	3c 78                	cmp    $0x78,%al
+  8005ae:	75 0d                	jne    8005bd <strtol+0x83>
+        s += 2, base = 16;
+  8005b0:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005b4:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005bb:	eb 2a                	jmp    8005e7 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005bd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005c1:	75 17                	jne    8005da <strtol+0xa0>
+  8005c3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005c6:	0f b6 00             	movzbl (%eax),%eax
+  8005c9:	3c 30                	cmp    $0x30,%al
+  8005cb:	75 0d                	jne    8005da <strtol+0xa0>
+        s ++, base = 8;
+  8005cd:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005d1:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  8005d8:	eb 0d                	jmp    8005e7 <strtol+0xad>
+    }
+    else if (base == 0) {
+  8005da:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005de:	75 07                	jne    8005e7 <strtol+0xad>
+        base = 10;
+  8005e0:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  8005e7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ea:	0f b6 00             	movzbl (%eax),%eax
+  8005ed:	3c 2f                	cmp    $0x2f,%al
+  8005ef:	7e 1b                	jle    80060c <strtol+0xd2>
+  8005f1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005f4:	0f b6 00             	movzbl (%eax),%eax
+  8005f7:	3c 39                	cmp    $0x39,%al
+  8005f9:	7f 11                	jg     80060c <strtol+0xd2>
+            dig = *s - '0';
+  8005fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005fe:	0f b6 00             	movzbl (%eax),%eax
+  800601:	0f be c0             	movsbl %al,%eax
+  800604:	83 e8 30             	sub    $0x30,%eax
+  800607:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80060a:	eb 48                	jmp    800654 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  80060c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80060f:	0f b6 00             	movzbl (%eax),%eax
+  800612:	3c 60                	cmp    $0x60,%al
+  800614:	7e 1b                	jle    800631 <strtol+0xf7>
+  800616:	8b 45 08             	mov    0x8(%ebp),%eax
+  800619:	0f b6 00             	movzbl (%eax),%eax
+  80061c:	3c 7a                	cmp    $0x7a,%al
+  80061e:	7f 11                	jg     800631 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800620:	8b 45 08             	mov    0x8(%ebp),%eax
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	0f be c0             	movsbl %al,%eax
+  800629:	83 e8 57             	sub    $0x57,%eax
+  80062c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80062f:	eb 23                	jmp    800654 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800631:	8b 45 08             	mov    0x8(%ebp),%eax
+  800634:	0f b6 00             	movzbl (%eax),%eax
+  800637:	3c 40                	cmp    $0x40,%al
+  800639:	7e 3c                	jle    800677 <strtol+0x13d>
+  80063b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80063e:	0f b6 00             	movzbl (%eax),%eax
+  800641:	3c 5a                	cmp    $0x5a,%al
+  800643:	7f 32                	jg     800677 <strtol+0x13d>
+            dig = *s - 'A' + 10;
+  800645:	8b 45 08             	mov    0x8(%ebp),%eax
+  800648:	0f b6 00             	movzbl (%eax),%eax
+  80064b:	0f be c0             	movsbl %al,%eax
+  80064e:	83 e8 37             	sub    $0x37,%eax
+  800651:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800654:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800657:	3b 45 10             	cmp    0x10(%ebp),%eax
+  80065a:	7d 1a                	jge    800676 <strtol+0x13c>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  80065c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800660:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800663:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800667:	89 c2                	mov    %eax,%edx
+  800669:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80066c:	01 d0                	add    %edx,%eax
+  80066e:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800671:	e9 71 ff ff ff       	jmp    8005e7 <strtol+0xad>
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+            break;
+  800676:	90                   	nop
+        }
+        s ++, val = (val * base) + dig;
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  800677:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80067b:	74 08                	je     800685 <strtol+0x14b>
+        *endptr = (char *) s;
+  80067d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800680:	8b 55 08             	mov    0x8(%ebp),%edx
+  800683:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800685:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800689:	74 07                	je     800692 <strtol+0x158>
+  80068b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80068e:	f7 d8                	neg    %eax
+  800690:	eb 03                	jmp    800695 <strtol+0x15b>
+  800692:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800695:	c9                   	leave  
+  800696:	c3                   	ret    
+
+00800697 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800697:	55                   	push   %ebp
+  800698:	89 e5                	mov    %esp,%ebp
+  80069a:	57                   	push   %edi
+  80069b:	83 ec 24             	sub    $0x24,%esp
+  80069e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006a1:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006a4:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006a8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006ab:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006ae:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006b1:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006b7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006ba:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006be:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006c1:	89 d7                	mov    %edx,%edi
+  8006c3:	f3 aa                	rep stos %al,%es:(%edi)
+  8006c5:	89 fa                	mov    %edi,%edx
+  8006c7:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8006ca:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  8006cd:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006d0:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  8006d1:	83 c4 24             	add    $0x24,%esp
+  8006d4:	5f                   	pop    %edi
+  8006d5:	5d                   	pop    %ebp
+  8006d6:	c3                   	ret    
+
+008006d7 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  8006d7:	55                   	push   %ebp
+  8006d8:	89 e5                	mov    %esp,%ebp
+  8006da:	57                   	push   %edi
+  8006db:	56                   	push   %esi
+  8006dc:	53                   	push   %ebx
+  8006dd:	83 ec 30             	sub    $0x30,%esp
+  8006e0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8006e6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006e9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8006ec:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006ef:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  8006f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8006f5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  8006f8:	73 42                	jae    80073c <memmove+0x65>
+  8006fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8006fd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800700:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800703:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800706:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800709:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  80070c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  80070f:	c1 e8 02             	shr    $0x2,%eax
+  800712:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800714:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800717:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80071a:	89 d7                	mov    %edx,%edi
+  80071c:	89 c6                	mov    %eax,%esi
+  80071e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800720:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800723:	83 e1 03             	and    $0x3,%ecx
+  800726:	74 02                	je     80072a <memmove+0x53>
+  800728:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  80072a:	89 f0                	mov    %esi,%eax
+  80072c:	89 fa                	mov    %edi,%edx
+  80072e:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800731:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800734:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800737:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  80073a:	eb 36                	jmp    800772 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  80073c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80073f:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800742:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800745:	01 c2                	add    %eax,%edx
+  800747:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80074a:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  80074d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800750:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800753:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800756:	89 c1                	mov    %eax,%ecx
+  800758:	89 d8                	mov    %ebx,%eax
+  80075a:	89 d6                	mov    %edx,%esi
+  80075c:	89 c7                	mov    %eax,%edi
+  80075e:	fd                   	std    
+  80075f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800761:	fc                   	cld    
+  800762:	89 f8                	mov    %edi,%eax
+  800764:	89 f2                	mov    %esi,%edx
+  800766:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800769:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  80076c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  80076f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800772:	83 c4 30             	add    $0x30,%esp
+  800775:	5b                   	pop    %ebx
+  800776:	5e                   	pop    %esi
+  800777:	5f                   	pop    %edi
+  800778:	5d                   	pop    %ebp
+  800779:	c3                   	ret    
+
+0080077a <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  80077a:	55                   	push   %ebp
+  80077b:	89 e5                	mov    %esp,%ebp
+  80077d:	57                   	push   %edi
+  80077e:	56                   	push   %esi
+  80077f:	83 ec 20             	sub    $0x20,%esp
+  800782:	8b 45 08             	mov    0x8(%ebp),%eax
+  800785:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800788:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80078b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80078e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800791:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800794:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800797:	c1 e8 02             	shr    $0x2,%eax
+  80079a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  80079c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80079f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007a2:	89 d7                	mov    %edx,%edi
+  8007a4:	89 c6                	mov    %eax,%esi
+  8007a6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007a8:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007ab:	83 e1 03             	and    $0x3,%ecx
+  8007ae:	74 02                	je     8007b2 <memcpy+0x38>
+  8007b0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007b2:	89 f0                	mov    %esi,%eax
+  8007b4:	89 fa                	mov    %edi,%edx
+  8007b6:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007b9:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007bc:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  8007bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007c2:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007c3:	83 c4 20             	add    $0x20,%esp
+  8007c6:	5e                   	pop    %esi
+  8007c7:	5f                   	pop    %edi
+  8007c8:	5d                   	pop    %ebp
+  8007c9:	c3                   	ret    
+
+008007ca <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  8007ca:	55                   	push   %ebp
+  8007cb:	89 e5                	mov    %esp,%ebp
+  8007cd:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  8007d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007d3:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  8007d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007d9:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  8007dc:	eb 30                	jmp    80080e <memcmp+0x44>
+        if (*s1 != *s2) {
+  8007de:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8007e1:	0f b6 10             	movzbl (%eax),%edx
+  8007e4:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8007e7:	0f b6 00             	movzbl (%eax),%eax
+  8007ea:	38 c2                	cmp    %al,%dl
+  8007ec:	74 18                	je     800806 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8007ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8007f1:	0f b6 00             	movzbl (%eax),%eax
+  8007f4:	0f b6 d0             	movzbl %al,%edx
+  8007f7:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8007fa:	0f b6 00             	movzbl (%eax),%eax
+  8007fd:	0f b6 c0             	movzbl %al,%eax
+  800800:	29 c2                	sub    %eax,%edx
+  800802:	89 d0                	mov    %edx,%eax
+  800804:	eb 1a                	jmp    800820 <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800806:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  80080a:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  80080e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800811:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800814:	89 55 10             	mov    %edx,0x10(%ebp)
+  800817:	85 c0                	test   %eax,%eax
+  800819:	75 c3                	jne    8007de <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  80081b:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800820:	c9                   	leave  
+  800821:	c3                   	ret    
+
+00800822 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800822:	55                   	push   %ebp
+  800823:	89 e5                	mov    %esp,%ebp
+  800825:	83 ec 38             	sub    $0x38,%esp
+  800828:	8b 45 10             	mov    0x10(%ebp),%eax
+  80082b:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  80082e:	8b 45 14             	mov    0x14(%ebp),%eax
+  800831:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  800834:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800837:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  80083a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80083d:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800840:	8b 45 18             	mov    0x18(%ebp),%eax
+  800843:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800846:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800849:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80084c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80084f:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  800852:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800855:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800858:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  80085c:	74 1c                	je     80087a <printnum+0x58>
+  80085e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800861:	ba 00 00 00 00       	mov    $0x0,%edx
+  800866:	f7 75 e4             	divl   -0x1c(%ebp)
+  800869:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  80086c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80086f:	ba 00 00 00 00       	mov    $0x0,%edx
+  800874:	f7 75 e4             	divl   -0x1c(%ebp)
+  800877:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80087a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80087d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800880:	f7 75 e4             	divl   -0x1c(%ebp)
+  800883:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800886:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800889:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80088c:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80088f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800892:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800895:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800898:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  80089b:	8b 45 18             	mov    0x18(%ebp),%eax
+  80089e:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008a3:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008a6:	77 41                	ja     8008e9 <printnum+0xc7>
+  8008a8:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008ab:	72 05                	jb     8008b2 <printnum+0x90>
+  8008ad:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  8008b0:	77 37                	ja     8008e9 <printnum+0xc7>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008b2:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008b5:	83 e8 01             	sub    $0x1,%eax
+  8008b8:	83 ec 04             	sub    $0x4,%esp
+  8008bb:	ff 75 20             	pushl  0x20(%ebp)
+  8008be:	50                   	push   %eax
+  8008bf:	ff 75 18             	pushl  0x18(%ebp)
+  8008c2:	ff 75 ec             	pushl  -0x14(%ebp)
+  8008c5:	ff 75 e8             	pushl  -0x18(%ebp)
+  8008c8:	ff 75 0c             	pushl  0xc(%ebp)
+  8008cb:	ff 75 08             	pushl  0x8(%ebp)
+  8008ce:	e8 4f ff ff ff       	call   800822 <printnum>
+  8008d3:	83 c4 20             	add    $0x20,%esp
+  8008d6:	eb 1b                	jmp    8008f3 <printnum+0xd1>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  8008d8:	83 ec 08             	sub    $0x8,%esp
+  8008db:	ff 75 0c             	pushl  0xc(%ebp)
+  8008de:	ff 75 20             	pushl  0x20(%ebp)
+  8008e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008e4:	ff d0                	call   *%eax
+  8008e6:	83 c4 10             	add    $0x10,%esp
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8008e9:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8008ed:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8008f1:	7f e5                	jg     8008d8 <printnum+0xb6>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8008f3:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8008f6:	05 c4 11 80 00       	add    $0x8011c4,%eax
+  8008fb:	0f b6 00             	movzbl (%eax),%eax
+  8008fe:	0f be c0             	movsbl %al,%eax
+  800901:	83 ec 08             	sub    $0x8,%esp
+  800904:	ff 75 0c             	pushl  0xc(%ebp)
+  800907:	50                   	push   %eax
+  800908:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090b:	ff d0                	call   *%eax
+  80090d:	83 c4 10             	add    $0x10,%esp
+}
+  800910:	90                   	nop
+  800911:	c9                   	leave  
+  800912:	c3                   	ret    
+
+00800913 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800913:	55                   	push   %ebp
+  800914:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800916:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80091a:	7e 14                	jle    800930 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80091c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80091f:	8b 00                	mov    (%eax),%eax
+  800921:	8d 48 08             	lea    0x8(%eax),%ecx
+  800924:	8b 55 08             	mov    0x8(%ebp),%edx
+  800927:	89 0a                	mov    %ecx,(%edx)
+  800929:	8b 50 04             	mov    0x4(%eax),%edx
+  80092c:	8b 00                	mov    (%eax),%eax
+  80092e:	eb 30                	jmp    800960 <getuint+0x4d>
+    }
+    else if (lflag) {
+  800930:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800934:	74 16                	je     80094c <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800936:	8b 45 08             	mov    0x8(%ebp),%eax
+  800939:	8b 00                	mov    (%eax),%eax
+  80093b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80093e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800941:	89 0a                	mov    %ecx,(%edx)
+  800943:	8b 00                	mov    (%eax),%eax
+  800945:	ba 00 00 00 00       	mov    $0x0,%edx
+  80094a:	eb 14                	jmp    800960 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80094c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80094f:	8b 00                	mov    (%eax),%eax
+  800951:	8d 48 04             	lea    0x4(%eax),%ecx
+  800954:	8b 55 08             	mov    0x8(%ebp),%edx
+  800957:	89 0a                	mov    %ecx,(%edx)
+  800959:	8b 00                	mov    (%eax),%eax
+  80095b:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800960:	5d                   	pop    %ebp
+  800961:	c3                   	ret    
+
+00800962 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800962:	55                   	push   %ebp
+  800963:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800965:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800969:	7e 14                	jle    80097f <getint+0x1d>
+        return va_arg(*ap, long long);
+  80096b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80096e:	8b 00                	mov    (%eax),%eax
+  800970:	8d 48 08             	lea    0x8(%eax),%ecx
+  800973:	8b 55 08             	mov    0x8(%ebp),%edx
+  800976:	89 0a                	mov    %ecx,(%edx)
+  800978:	8b 50 04             	mov    0x4(%eax),%edx
+  80097b:	8b 00                	mov    (%eax),%eax
+  80097d:	eb 28                	jmp    8009a7 <getint+0x45>
+    }
+    else if (lflag) {
+  80097f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800983:	74 12                	je     800997 <getint+0x35>
+        return va_arg(*ap, long);
+  800985:	8b 45 08             	mov    0x8(%ebp),%eax
+  800988:	8b 00                	mov    (%eax),%eax
+  80098a:	8d 48 04             	lea    0x4(%eax),%ecx
+  80098d:	8b 55 08             	mov    0x8(%ebp),%edx
+  800990:	89 0a                	mov    %ecx,(%edx)
+  800992:	8b 00                	mov    (%eax),%eax
+  800994:	99                   	cltd   
+  800995:	eb 10                	jmp    8009a7 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800997:	8b 45 08             	mov    0x8(%ebp),%eax
+  80099a:	8b 00                	mov    (%eax),%eax
+  80099c:	8d 48 04             	lea    0x4(%eax),%ecx
+  80099f:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009a2:	89 0a                	mov    %ecx,(%edx)
+  8009a4:	8b 00                	mov    (%eax),%eax
+  8009a6:	99                   	cltd   
+    }
+}
+  8009a7:	5d                   	pop    %ebp
+  8009a8:	c3                   	ret    
+
+008009a9 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009a9:	55                   	push   %ebp
+  8009aa:	89 e5                	mov    %esp,%ebp
+  8009ac:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009af:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8009b8:	50                   	push   %eax
+  8009b9:	ff 75 10             	pushl  0x10(%ebp)
+  8009bc:	ff 75 0c             	pushl  0xc(%ebp)
+  8009bf:	ff 75 08             	pushl  0x8(%ebp)
+  8009c2:	e8 06 00 00 00       	call   8009cd <vprintfmt>
+  8009c7:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8009ca:	90                   	nop
+  8009cb:	c9                   	leave  
+  8009cc:	c3                   	ret    
+
+008009cd <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8009cd:	55                   	push   %ebp
+  8009ce:	89 e5                	mov    %esp,%ebp
+  8009d0:	56                   	push   %esi
+  8009d1:	53                   	push   %ebx
+  8009d2:	83 ec 20             	sub    $0x20,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009d5:	eb 17                	jmp    8009ee <vprintfmt+0x21>
+            if (ch == '\0') {
+  8009d7:	85 db                	test   %ebx,%ebx
+  8009d9:	0f 84 8e 03 00 00    	je     800d6d <vprintfmt+0x3a0>
+                return;
+            }
+            putch(ch, putdat);
+  8009df:	83 ec 08             	sub    $0x8,%esp
+  8009e2:	ff 75 0c             	pushl  0xc(%ebp)
+  8009e5:	53                   	push   %ebx
+  8009e6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009e9:	ff d0                	call   *%eax
+  8009eb:	83 c4 10             	add    $0x10,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009ee:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009f1:	8d 50 01             	lea    0x1(%eax),%edx
+  8009f4:	89 55 10             	mov    %edx,0x10(%ebp)
+  8009f7:	0f b6 00             	movzbl (%eax),%eax
+  8009fa:	0f b6 d8             	movzbl %al,%ebx
+  8009fd:	83 fb 25             	cmp    $0x25,%ebx
+  800a00:	75 d5                	jne    8009d7 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a02:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a06:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a10:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a13:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a1a:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a1d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a20:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a23:	8d 50 01             	lea    0x1(%eax),%edx
+  800a26:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a29:	0f b6 00             	movzbl (%eax),%eax
+  800a2c:	0f b6 d8             	movzbl %al,%ebx
+  800a2f:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a32:	83 f8 55             	cmp    $0x55,%eax
+  800a35:	0f 87 05 03 00 00    	ja     800d40 <vprintfmt+0x373>
+  800a3b:	8b 04 85 e8 11 80 00 	mov    0x8011e8(,%eax,4),%eax
+  800a42:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a44:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a48:	eb d6                	jmp    800a20 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a4a:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800a4e:	eb d0                	jmp    800a20 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a50:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800a57:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a5a:	89 d0                	mov    %edx,%eax
+  800a5c:	c1 e0 02             	shl    $0x2,%eax
+  800a5f:	01 d0                	add    %edx,%eax
+  800a61:	01 c0                	add    %eax,%eax
+  800a63:	01 d8                	add    %ebx,%eax
+  800a65:	83 e8 30             	sub    $0x30,%eax
+  800a68:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800a6b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a6e:	0f b6 00             	movzbl (%eax),%eax
+  800a71:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800a74:	83 fb 2f             	cmp    $0x2f,%ebx
+  800a77:	7e 39                	jle    800ab2 <vprintfmt+0xe5>
+  800a79:	83 fb 39             	cmp    $0x39,%ebx
+  800a7c:	7f 34                	jg     800ab2 <vprintfmt+0xe5>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a7e:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  800a82:	eb d3                	jmp    800a57 <vprintfmt+0x8a>
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800a84:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a87:	8d 50 04             	lea    0x4(%eax),%edx
+  800a8a:	89 55 14             	mov    %edx,0x14(%ebp)
+  800a8d:	8b 00                	mov    (%eax),%eax
+  800a8f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800a92:	eb 1f                	jmp    800ab3 <vprintfmt+0xe6>
+
+        case '.':
+            if (width < 0)
+  800a94:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800a98:	79 86                	jns    800a20 <vprintfmt+0x53>
+                width = 0;
+  800a9a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800aa1:	e9 7a ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800aa6:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800aad:	e9 6e ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+            goto process_precision;
+  800ab2:	90                   	nop
+        case '#':
+            altflag = 1;
+            goto reswitch;
+
+        process_precision:
+            if (width < 0)
+  800ab3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ab7:	0f 89 63 ff ff ff    	jns    800a20 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800abd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ac0:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800ac3:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800aca:	e9 51 ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800acf:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800ad3:	e9 48 ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800ad8:	8b 45 14             	mov    0x14(%ebp),%eax
+  800adb:	8d 50 04             	lea    0x4(%eax),%edx
+  800ade:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ae1:	8b 00                	mov    (%eax),%eax
+  800ae3:	83 ec 08             	sub    $0x8,%esp
+  800ae6:	ff 75 0c             	pushl  0xc(%ebp)
+  800ae9:	50                   	push   %eax
+  800aea:	8b 45 08             	mov    0x8(%ebp),%eax
+  800aed:	ff d0                	call   *%eax
+  800aef:	83 c4 10             	add    $0x10,%esp
+            break;
+  800af2:	e9 71 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800af7:	8b 45 14             	mov    0x14(%ebp),%eax
+  800afa:	8d 50 04             	lea    0x4(%eax),%edx
+  800afd:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b00:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b02:	85 db                	test   %ebx,%ebx
+  800b04:	79 02                	jns    800b08 <vprintfmt+0x13b>
+                err = -err;
+  800b06:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b08:	83 fb 18             	cmp    $0x18,%ebx
+  800b0b:	7f 0b                	jg     800b18 <vprintfmt+0x14b>
+  800b0d:	8b 34 9d 60 11 80 00 	mov    0x801160(,%ebx,4),%esi
+  800b14:	85 f6                	test   %esi,%esi
+  800b16:	75 19                	jne    800b31 <vprintfmt+0x164>
+                printfmt(putch, putdat, "error %d", err);
+  800b18:	53                   	push   %ebx
+  800b19:	68 d5 11 80 00       	push   $0x8011d5
+  800b1e:	ff 75 0c             	pushl  0xc(%ebp)
+  800b21:	ff 75 08             	pushl  0x8(%ebp)
+  800b24:	e8 80 fe ff ff       	call   8009a9 <printfmt>
+  800b29:	83 c4 10             	add    $0x10,%esp
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b2c:	e9 37 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  800b31:	56                   	push   %esi
+  800b32:	68 de 11 80 00       	push   $0x8011de
+  800b37:	ff 75 0c             	pushl  0xc(%ebp)
+  800b3a:	ff 75 08             	pushl  0x8(%ebp)
+  800b3d:	e8 67 fe ff ff       	call   8009a9 <printfmt>
+  800b42:	83 c4 10             	add    $0x10,%esp
+            }
+            break;
+  800b45:	e9 1e 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800b4a:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b4d:	8d 50 04             	lea    0x4(%eax),%edx
+  800b50:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b53:	8b 30                	mov    (%eax),%esi
+  800b55:	85 f6                	test   %esi,%esi
+  800b57:	75 05                	jne    800b5e <vprintfmt+0x191>
+                p = "(null)";
+  800b59:	be e1 11 80 00       	mov    $0x8011e1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800b5e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b62:	7e 76                	jle    800bda <vprintfmt+0x20d>
+  800b64:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800b68:	74 70                	je     800bda <vprintfmt+0x20d>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b6a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b6d:	83 ec 08             	sub    $0x8,%esp
+  800b70:	50                   	push   %eax
+  800b71:	56                   	push   %esi
+  800b72:	e8 17 f8 ff ff       	call   80038e <strnlen>
+  800b77:	83 c4 10             	add    $0x10,%esp
+  800b7a:	89 c2                	mov    %eax,%edx
+  800b7c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800b7f:	29 d0                	sub    %edx,%eax
+  800b81:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b84:	eb 17                	jmp    800b9d <vprintfmt+0x1d0>
+                    putch(padc, putdat);
+  800b86:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800b8a:	83 ec 08             	sub    $0x8,%esp
+  800b8d:	ff 75 0c             	pushl  0xc(%ebp)
+  800b90:	50                   	push   %eax
+  800b91:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b94:	ff d0                	call   *%eax
+  800b96:	83 c4 10             	add    $0x10,%esp
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b99:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800b9d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ba1:	7f e3                	jg     800b86 <vprintfmt+0x1b9>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800ba3:	eb 35                	jmp    800bda <vprintfmt+0x20d>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800ba5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800ba9:	74 1c                	je     800bc7 <vprintfmt+0x1fa>
+  800bab:	83 fb 1f             	cmp    $0x1f,%ebx
+  800bae:	7e 05                	jle    800bb5 <vprintfmt+0x1e8>
+  800bb0:	83 fb 7e             	cmp    $0x7e,%ebx
+  800bb3:	7e 12                	jle    800bc7 <vprintfmt+0x1fa>
+                    putch('?', putdat);
+  800bb5:	83 ec 08             	sub    $0x8,%esp
+  800bb8:	ff 75 0c             	pushl  0xc(%ebp)
+  800bbb:	6a 3f                	push   $0x3f
+  800bbd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bc0:	ff d0                	call   *%eax
+  800bc2:	83 c4 10             	add    $0x10,%esp
+  800bc5:	eb 0f                	jmp    800bd6 <vprintfmt+0x209>
+                }
+                else {
+                    putch(ch, putdat);
+  800bc7:	83 ec 08             	sub    $0x8,%esp
+  800bca:	ff 75 0c             	pushl  0xc(%ebp)
+  800bcd:	53                   	push   %ebx
+  800bce:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bd1:	ff d0                	call   *%eax
+  800bd3:	83 c4 10             	add    $0x10,%esp
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bd6:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800bda:	89 f0                	mov    %esi,%eax
+  800bdc:	8d 70 01             	lea    0x1(%eax),%esi
+  800bdf:	0f b6 00             	movzbl (%eax),%eax
+  800be2:	0f be d8             	movsbl %al,%ebx
+  800be5:	85 db                	test   %ebx,%ebx
+  800be7:	74 26                	je     800c0f <vprintfmt+0x242>
+  800be9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800bed:	78 b6                	js     800ba5 <vprintfmt+0x1d8>
+  800bef:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  800bf3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800bf7:	79 ac                	jns    800ba5 <vprintfmt+0x1d8>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800bf9:	eb 14                	jmp    800c0f <vprintfmt+0x242>
+                putch(' ', putdat);
+  800bfb:	83 ec 08             	sub    $0x8,%esp
+  800bfe:	ff 75 0c             	pushl  0xc(%ebp)
+  800c01:	6a 20                	push   $0x20
+  800c03:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c06:	ff d0                	call   *%eax
+  800c08:	83 c4 10             	add    $0x10,%esp
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c0b:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c0f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c13:	7f e6                	jg     800bfb <vprintfmt+0x22e>
+                putch(' ', putdat);
+            }
+            break;
+  800c15:	e9 4e 01 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c1a:	83 ec 08             	sub    $0x8,%esp
+  800c1d:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c20:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c23:	50                   	push   %eax
+  800c24:	e8 39 fd ff ff       	call   800962 <getint>
+  800c29:	83 c4 10             	add    $0x10,%esp
+  800c2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c2f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c32:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c35:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c38:	85 d2                	test   %edx,%edx
+  800c3a:	79 23                	jns    800c5f <vprintfmt+0x292>
+                putch('-', putdat);
+  800c3c:	83 ec 08             	sub    $0x8,%esp
+  800c3f:	ff 75 0c             	pushl  0xc(%ebp)
+  800c42:	6a 2d                	push   $0x2d
+  800c44:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c47:	ff d0                	call   *%eax
+  800c49:	83 c4 10             	add    $0x10,%esp
+                num = -(long long)num;
+  800c4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c4f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c52:	f7 d8                	neg    %eax
+  800c54:	83 d2 00             	adc    $0x0,%edx
+  800c57:	f7 da                	neg    %edx
+  800c59:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c5c:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800c5f:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c66:	e9 9f 00 00 00       	jmp    800d0a <vprintfmt+0x33d>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800c6b:	83 ec 08             	sub    $0x8,%esp
+  800c6e:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c71:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c74:	50                   	push   %eax
+  800c75:	e8 99 fc ff ff       	call   800913 <getuint>
+  800c7a:	83 c4 10             	add    $0x10,%esp
+  800c7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c80:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800c83:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c8a:	eb 7e                	jmp    800d0a <vprintfmt+0x33d>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800c8c:	83 ec 08             	sub    $0x8,%esp
+  800c8f:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c92:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c95:	50                   	push   %eax
+  800c96:	e8 78 fc ff ff       	call   800913 <getuint>
+  800c9b:	83 c4 10             	add    $0x10,%esp
+  800c9e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ca1:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800ca4:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800cab:	eb 5d                	jmp    800d0a <vprintfmt+0x33d>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800cad:	83 ec 08             	sub    $0x8,%esp
+  800cb0:	ff 75 0c             	pushl  0xc(%ebp)
+  800cb3:	6a 30                	push   $0x30
+  800cb5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb8:	ff d0                	call   *%eax
+  800cba:	83 c4 10             	add    $0x10,%esp
+            putch('x', putdat);
+  800cbd:	83 ec 08             	sub    $0x8,%esp
+  800cc0:	ff 75 0c             	pushl  0xc(%ebp)
+  800cc3:	6a 78                	push   $0x78
+  800cc5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cc8:	ff d0                	call   *%eax
+  800cca:	83 c4 10             	add    $0x10,%esp
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800ccd:	8b 45 14             	mov    0x14(%ebp),%eax
+  800cd0:	8d 50 04             	lea    0x4(%eax),%edx
+  800cd3:	89 55 14             	mov    %edx,0x14(%ebp)
+  800cd6:	8b 00                	mov    (%eax),%eax
+  800cd8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cdb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800ce2:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800ce9:	eb 1f                	jmp    800d0a <vprintfmt+0x33d>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800ceb:	83 ec 08             	sub    $0x8,%esp
+  800cee:	ff 75 e0             	pushl  -0x20(%ebp)
+  800cf1:	8d 45 14             	lea    0x14(%ebp),%eax
+  800cf4:	50                   	push   %eax
+  800cf5:	e8 19 fc ff ff       	call   800913 <getuint>
+  800cfa:	83 c4 10             	add    $0x10,%esp
+  800cfd:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d00:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d03:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d0a:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d11:	83 ec 04             	sub    $0x4,%esp
+  800d14:	52                   	push   %edx
+  800d15:	ff 75 e8             	pushl  -0x18(%ebp)
+  800d18:	50                   	push   %eax
+  800d19:	ff 75 f4             	pushl  -0xc(%ebp)
+  800d1c:	ff 75 f0             	pushl  -0x10(%ebp)
+  800d1f:	ff 75 0c             	pushl  0xc(%ebp)
+  800d22:	ff 75 08             	pushl  0x8(%ebp)
+  800d25:	e8 f8 fa ff ff       	call   800822 <printnum>
+  800d2a:	83 c4 20             	add    $0x20,%esp
+            break;
+  800d2d:	eb 39                	jmp    800d68 <vprintfmt+0x39b>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800d2f:	83 ec 08             	sub    $0x8,%esp
+  800d32:	ff 75 0c             	pushl  0xc(%ebp)
+  800d35:	53                   	push   %ebx
+  800d36:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d39:	ff d0                	call   *%eax
+  800d3b:	83 c4 10             	add    $0x10,%esp
+            break;
+  800d3e:	eb 28                	jmp    800d68 <vprintfmt+0x39b>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800d40:	83 ec 08             	sub    $0x8,%esp
+  800d43:	ff 75 0c             	pushl  0xc(%ebp)
+  800d46:	6a 25                	push   $0x25
+  800d48:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d4b:	ff d0                	call   *%eax
+  800d4d:	83 c4 10             	add    $0x10,%esp
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800d50:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d54:	eb 04                	jmp    800d5a <vprintfmt+0x38d>
+  800d56:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d5a:	8b 45 10             	mov    0x10(%ebp),%eax
+  800d5d:	83 e8 01             	sub    $0x1,%eax
+  800d60:	0f b6 00             	movzbl (%eax),%eax
+  800d63:	3c 25                	cmp    $0x25,%al
+  800d65:	75 ef                	jne    800d56 <vprintfmt+0x389>
+                /* do nothing */;
+            break;
+  800d67:	90                   	nop
+        }
+    }
+  800d68:	e9 68 fc ff ff       	jmp    8009d5 <vprintfmt+0x8>
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+            if (ch == '\0') {
+                return;
+  800d6d:	90                   	nop
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  800d6e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  800d71:	5b                   	pop    %ebx
+  800d72:	5e                   	pop    %esi
+  800d73:	5d                   	pop    %ebp
+  800d74:	c3                   	ret    
+
+00800d75 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800d75:	55                   	push   %ebp
+  800d76:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800d78:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d7b:	8b 40 08             	mov    0x8(%eax),%eax
+  800d7e:	8d 50 01             	lea    0x1(%eax),%edx
+  800d81:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d84:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800d87:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d8a:	8b 10                	mov    (%eax),%edx
+  800d8c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d8f:	8b 40 04             	mov    0x4(%eax),%eax
+  800d92:	39 c2                	cmp    %eax,%edx
+  800d94:	73 12                	jae    800da8 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800d96:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d99:	8b 00                	mov    (%eax),%eax
+  800d9b:	8d 48 01             	lea    0x1(%eax),%ecx
+  800d9e:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800da1:	89 0a                	mov    %ecx,(%edx)
+  800da3:	8b 55 08             	mov    0x8(%ebp),%edx
+  800da6:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800da8:	90                   	nop
+  800da9:	5d                   	pop    %ebp
+  800daa:	c3                   	ret    
+
+00800dab <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800dab:	55                   	push   %ebp
+  800dac:	89 e5                	mov    %esp,%ebp
+  800dae:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800db1:	8d 45 14             	lea    0x14(%ebp),%eax
+  800db4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800db7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800dba:	50                   	push   %eax
+  800dbb:	ff 75 10             	pushl  0x10(%ebp)
+  800dbe:	ff 75 0c             	pushl  0xc(%ebp)
+  800dc1:	ff 75 08             	pushl  0x8(%ebp)
+  800dc4:	e8 0b 00 00 00       	call   800dd4 <vsnprintf>
+  800dc9:	83 c4 10             	add    $0x10,%esp
+  800dcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800dcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800dd2:	c9                   	leave  
+  800dd3:	c3                   	ret    
+
+00800dd4 <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800dd4:	55                   	push   %ebp
+  800dd5:	89 e5                	mov    %esp,%ebp
+  800dd7:	83 ec 18             	sub    $0x18,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800dda:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ddd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800de0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800de3:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800de6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de9:	01 d0                	add    %edx,%eax
+  800deb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800dee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800df5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800df9:	74 0a                	je     800e05 <vsnprintf+0x31>
+  800dfb:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800dfe:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e01:	39 c2                	cmp    %eax,%edx
+  800e03:	76 07                	jbe    800e0c <vsnprintf+0x38>
+        return -E_INVAL;
+  800e05:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e0a:	eb 20                	jmp    800e2c <vsnprintf+0x58>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e0c:	ff 75 14             	pushl  0x14(%ebp)
+  800e0f:	ff 75 10             	pushl  0x10(%ebp)
+  800e12:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800e15:	50                   	push   %eax
+  800e16:	68 75 0d 80 00       	push   $0x800d75
+  800e1b:	e8 ad fb ff ff       	call   8009cd <vprintfmt>
+  800e20:	83 c4 10             	add    $0x10,%esp
+    // null terminate the buffer
+    *b.buf = '\0';
+  800e23:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e26:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800e29:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e2c:	c9                   	leave  
+  800e2d:	c3                   	ret    
+
+00800e2e <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800e2e:	55                   	push   %ebp
+  800e2f:	89 e5                	mov    %esp,%ebp
+  800e31:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800e34:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e37:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800e3d:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800e40:	b8 20 00 00 00       	mov    $0x20,%eax
+  800e45:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800e48:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800e4b:	89 c1                	mov    %eax,%ecx
+  800e4d:	d3 ea                	shr    %cl,%edx
+  800e4f:	89 d0                	mov    %edx,%eax
+}
+  800e51:	c9                   	leave  
+  800e52:	c3                   	ret    
+
+00800e53 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800e53:	55                   	push   %ebp
+  800e54:	89 e5                	mov    %esp,%ebp
+  800e56:	57                   	push   %edi
+  800e57:	56                   	push   %esi
+  800e58:	53                   	push   %ebx
+  800e59:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800e5c:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e61:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800e67:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800e6d:	6b f0 05             	imul   $0x5,%eax,%esi
+  800e70:	01 fe                	add    %edi,%esi
+  800e72:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800e77:	f7 e7                	mul    %edi
+  800e79:	01 d6                	add    %edx,%esi
+  800e7b:	89 f2                	mov    %esi,%edx
+  800e7d:	83 c0 0b             	add    $0xb,%eax
+  800e80:	83 d2 00             	adc    $0x0,%edx
+  800e83:	89 c7                	mov    %eax,%edi
+  800e85:	83 e7 ff             	and    $0xffffffff,%edi
+  800e88:	89 f9                	mov    %edi,%ecx
+  800e8a:	0f b7 da             	movzwl %dx,%ebx
+  800e8d:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800e93:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800e99:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e9e:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ea4:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ea8:	c1 ea 0c             	shr    $0xc,%edx
+  800eab:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800eae:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800eb1:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800eb8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ebb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ebe:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ec1:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800ec4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec7:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800eca:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ece:	74 1c                	je     800eec <rand+0x99>
+  800ed0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ed3:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ed8:	f7 75 dc             	divl   -0x24(%ebp)
+  800edb:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800ede:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ee1:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ee6:	f7 75 dc             	divl   -0x24(%ebp)
+  800ee9:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800eec:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800eef:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800ef2:	f7 75 dc             	divl   -0x24(%ebp)
+  800ef5:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ef8:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800efb:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800efe:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800f01:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f04:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f07:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800f0a:	83 c4 24             	add    $0x24,%esp
+  800f0d:	5b                   	pop    %ebx
+  800f0e:	5e                   	pop    %esi
+  800f0f:	5f                   	pop    %edi
+  800f10:	5d                   	pop    %ebp
+  800f11:	c3                   	ret    
+
+00800f12 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800f12:	55                   	push   %ebp
+  800f13:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800f15:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f18:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f1d:	a3 00 20 80 00       	mov    %eax,0x802000
+  800f22:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800f28:	90                   	nop
+  800f29:	5d                   	pop    %ebp
+  800f2a:	c3                   	ret    
+
+00800f2b <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  800f2b:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  800f2f:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f32:	ff 71 fc             	pushl  -0x4(%ecx)
+  800f35:	55                   	push   %ebp
+  800f36:	89 e5                	mov    %esp,%ebp
+  800f38:	51                   	push   %ecx
+  800f39:	83 ec 14             	sub    $0x14,%esp
+    int pid, exit_code;
+    if ((pid = fork()) == 0) {
+  800f3c:	e8 9c f2 ff ff       	call   8001dd <fork>
+  800f41:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800f44:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800f48:	75 35                	jne    800f7f <main+0x54>
+        cprintf("fork ok.\n");
+  800f4a:	83 ec 0c             	sub    $0xc,%esp
+  800f4d:	68 40 13 80 00       	push   $0x801340
+  800f52:	e8 82 f3 ff ff       	call   8002d9 <cprintf>
+  800f57:	83 c4 10             	add    $0x10,%esp
+        int i;
+        for (i = 0; i < 10; i ++) {
+  800f5a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  800f61:	eb 09                	jmp    800f6c <main+0x41>
+            yield();
+  800f63:	e8 b2 f2 ff ff       	call   80021a <yield>
+main(void) {
+    int pid, exit_code;
+    if ((pid = fork()) == 0) {
+        cprintf("fork ok.\n");
+        int i;
+        for (i = 0; i < 10; i ++) {
+  800f68:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  800f6c:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
+  800f70:	7e f1                	jle    800f63 <main+0x38>
+            yield();
+        }
+        exit(0xbeaf);
+  800f72:	83 ec 0c             	sub    $0xc,%esp
+  800f75:	68 af be 00 00       	push   $0xbeaf
+  800f7a:	e8 38 f2 ff ff       	call   8001b7 <exit>
+    }
+    assert(pid > 0);
+  800f7f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800f83:	7f 16                	jg     800f9b <main+0x70>
+  800f85:	68 4a 13 80 00       	push   $0x80134a
+  800f8a:	68 52 13 80 00       	push   $0x801352
+  800f8f:	6a 0f                	push   $0xf
+  800f91:	68 67 13 80 00       	push   $0x801367
+  800f96:	e8 85 f0 ff ff       	call   800020 <__panic>
+    assert(waitpid(-1, NULL) != 0);
+  800f9b:	83 ec 08             	sub    $0x8,%esp
+  800f9e:	6a 00                	push   $0x0
+  800fa0:	6a ff                	push   $0xffffffff
+  800fa2:	e8 5a f2 ff ff       	call   800201 <waitpid>
+  800fa7:	83 c4 10             	add    $0x10,%esp
+  800faa:	85 c0                	test   %eax,%eax
+  800fac:	75 16                	jne    800fc4 <main+0x99>
+  800fae:	68 75 13 80 00       	push   $0x801375
+  800fb3:	68 52 13 80 00       	push   $0x801352
+  800fb8:	6a 10                	push   $0x10
+  800fba:	68 67 13 80 00       	push   $0x801367
+  800fbf:	e8 5c f0 ff ff       	call   800020 <__panic>
+    assert(waitpid(pid, (void *)0xC0000000) != 0);
+  800fc4:	83 ec 08             	sub    $0x8,%esp
+  800fc7:	68 00 00 00 c0       	push   $0xc0000000
+  800fcc:	ff 75 f0             	pushl  -0x10(%ebp)
+  800fcf:	e8 2d f2 ff ff       	call   800201 <waitpid>
+  800fd4:	83 c4 10             	add    $0x10,%esp
+  800fd7:	85 c0                	test   %eax,%eax
+  800fd9:	75 16                	jne    800ff1 <main+0xc6>
+  800fdb:	68 8c 13 80 00       	push   $0x80138c
+  800fe0:	68 52 13 80 00       	push   $0x801352
+  800fe5:	6a 11                	push   $0x11
+  800fe7:	68 67 13 80 00       	push   $0x801367
+  800fec:	e8 2f f0 ff ff       	call   800020 <__panic>
+    assert(waitpid(pid, &exit_code) == 0 && exit_code == 0xbeaf);
+  800ff1:	83 ec 08             	sub    $0x8,%esp
+  800ff4:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800ff7:	50                   	push   %eax
+  800ff8:	ff 75 f0             	pushl  -0x10(%ebp)
+  800ffb:	e8 01 f2 ff ff       	call   800201 <waitpid>
+  801000:	83 c4 10             	add    $0x10,%esp
+  801003:	85 c0                	test   %eax,%eax
+  801005:	75 0a                	jne    801011 <main+0xe6>
+  801007:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80100a:	3d af be 00 00       	cmp    $0xbeaf,%eax
+  80100f:	74 16                	je     801027 <main+0xfc>
+  801011:	68 b4 13 80 00       	push   $0x8013b4
+  801016:	68 52 13 80 00       	push   $0x801352
+  80101b:	6a 12                	push   $0x12
+  80101d:	68 67 13 80 00       	push   $0x801367
+  801022:	e8 f9 ef ff ff       	call   800020 <__panic>
+    cprintf("badarg pass.\n");
+  801027:	83 ec 0c             	sub    $0xc,%esp
+  80102a:	68 e9 13 80 00       	push   $0x8013e9
+  80102f:	e8 a5 f2 ff ff       	call   8002d9 <cprintf>
+  801034:	83 c4 10             	add    $0x10,%esp
+    return 0;
+  801037:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  80103c:	8b 4d fc             	mov    -0x4(%ebp),%ecx
+  80103f:	c9                   	leave  
+  801040:	8d 61 fc             	lea    -0x4(%ecx),%esp
+  801043:	c3                   	ret    
diff -r -u -P lab6_original/obj/user/badarg.d lab6/obj/user/badarg.d
--- lab6_original/obj/user/badarg.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/badarg.d	2016-04-29 16:22:06.844550496 +0800
@@ -0,0 +1,2 @@
+obj/user/badarg.o obj/user/badarg.d: user/badarg.c libs/stdio.h \
+ libs/defs.h libs/stdarg.h user/libs/ulib.h
Binary files lab6_original/obj/user/badarg.o and lab6/obj/user/badarg.o differ
diff -r -u -P lab6_original/obj/user/badarg.sym lab6/obj/user/badarg.sym
--- lab6_original/obj/user/badarg.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/badarg.sym	2016-04-29 16:22:07.724754848 +0800
@@ -0,0 +1,76 @@
+00800020 .text
+00801060 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202dad .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b5 syscall
+00000000 ulib.c
+00000000 stdio.c
+0080028c cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+00801160 error_string
+00800822 printnum
+00800913 getuint
+00800962 getint
+00800d75 sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 badarg.c
+008003be strcpy
+0080021a yield
+00800201 waitpid
+00800141 sys_yield
+008006d7 memmove
+00800dab snprintf
+008009cd vprintfmt
+0080011d sys_fork
+008002d9 cprintf
+0080023e getpid
+0080077a memcpy
+00800266 lab6_set_priority
+00800dd4 vsnprintf
+0080034d umain
+00202dac __STAB_END__
+00800150 sys_kill
+00202dad __STABSTR_BEGIN__
+00800020 __panic
+0080053a strtol
+0080038e strnlen
+0080024b print_pgdir
+00800228 kill
+0080050b strfind
+008001ea wait
+0080027d _start
+00800e53 rand
+00800482 strncmp
+00800171 sys_putc
+008003fe strncpy
+008007ca memcmp
+008001dd fork
+00800697 memset
+00800f2b main
+00800f12 srand
+00800e2e hash32
+008009a9 printfmt
+00203ba6 __STABSTR_END__
+00800438 strcmp
+00800259 gettime_msec
+00800192 sys_gettime
+008002b0 vcprintf
+0080006e __warn
+008002ff cputs
+008001a1 sys_lab6_set_priority
+008001b7 exit
+0080012c sys_wait
+0080010b sys_exit
+00200010 __STAB_BEGIN__
+00800366 strlen
+00800183 sys_pgdir
+008004d8 strchr
+00800162 sys_getpid
diff -r -u -P lab6_original/obj/user/badsegment.asm lab6/obj/user/badsegment.asm
--- lab6_original/obj/user/badsegment.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/badsegment.asm	2016-04-29 16:22:07.728737642 +0800
@@ -0,0 +1,2580 @@
+
+obj/__user_badsegment.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 18             	sub    $0x18,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	83 ec 04             	sub    $0x4,%esp
+  80002f:	ff 75 0c             	pushl  0xc(%ebp)
+  800032:	ff 75 08             	pushl  0x8(%ebp)
+  800035:	68 60 0f 80 00       	push   $0x800f60
+  80003a:	e8 9a 02 00 00       	call   8002d9 <cprintf>
+  80003f:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800042:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800045:	83 ec 08             	sub    $0x8,%esp
+  800048:	50                   	push   %eax
+  800049:	ff 75 10             	pushl  0x10(%ebp)
+  80004c:	e8 5f 02 00 00       	call   8002b0 <vcprintf>
+  800051:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  800054:	83 ec 0c             	sub    $0xc,%esp
+  800057:	68 7a 0f 80 00       	push   $0x800f7a
+  80005c:	e8 78 02 00 00       	call   8002d9 <cprintf>
+  800061:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	83 ec 0c             	sub    $0xc,%esp
+  800067:	6a f6                	push   $0xfffffff6
+  800069:	e8 49 01 00 00       	call   8001b7 <exit>
+
+0080006e <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80006e:	55                   	push   %ebp
+  80006f:	89 e5                	mov    %esp,%ebp
+  800071:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800074:	8d 45 14             	lea    0x14(%ebp),%eax
+  800077:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007a:	83 ec 04             	sub    $0x4,%esp
+  80007d:	ff 75 0c             	pushl  0xc(%ebp)
+  800080:	ff 75 08             	pushl  0x8(%ebp)
+  800083:	68 7c 0f 80 00       	push   $0x800f7c
+  800088:	e8 4c 02 00 00       	call   8002d9 <cprintf>
+  80008d:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800090:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800093:	83 ec 08             	sub    $0x8,%esp
+  800096:	50                   	push   %eax
+  800097:	ff 75 10             	pushl  0x10(%ebp)
+  80009a:	e8 11 02 00 00       	call   8002b0 <vcprintf>
+  80009f:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  8000a2:	83 ec 0c             	sub    $0xc,%esp
+  8000a5:	68 7a 0f 80 00       	push   $0x800f7a
+  8000aa:	e8 2a 02 00 00       	call   8002d9 <cprintf>
+  8000af:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8000b2:	90                   	nop
+  8000b3:	c9                   	leave  
+  8000b4:	c3                   	ret    
+
+008000b5 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b5:	55                   	push   %ebp
+  8000b6:	89 e5                	mov    %esp,%ebp
+  8000b8:	57                   	push   %edi
+  8000b9:	56                   	push   %esi
+  8000ba:	53                   	push   %ebx
+  8000bb:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000be:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cb:	eb 16                	jmp    8000e3 <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8000cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d0:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d3:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d6:	8b 10                	mov    (%eax),%edx
+  8000d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000db:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000df:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8000e3:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e7:	7e e4                	jle    8000cd <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000e9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ec:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000ef:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f2:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f5:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8000f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fb:	cd 80                	int    $0x80
+  8000fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  800100:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800103:	83 c4 20             	add    $0x20,%esp
+  800106:	5b                   	pop    %ebx
+  800107:	5e                   	pop    %esi
+  800108:	5f                   	pop    %edi
+  800109:	5d                   	pop    %ebp
+  80010a:	c3                   	ret    
+
+0080010b <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010b:	55                   	push   %ebp
+  80010c:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_exit, error_code);
+  80010e:	ff 75 08             	pushl  0x8(%ebp)
+  800111:	6a 01                	push   $0x1
+  800113:	e8 9d ff ff ff       	call   8000b5 <syscall>
+  800118:	83 c4 08             	add    $0x8,%esp
+}
+  80011b:	c9                   	leave  
+  80011c:	c3                   	ret    
+
+0080011d <sys_fork>:
+
+int
+sys_fork(void) {
+  80011d:	55                   	push   %ebp
+  80011e:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_fork);
+  800120:	6a 02                	push   $0x2
+  800122:	e8 8e ff ff ff       	call   8000b5 <syscall>
+  800127:	83 c4 04             	add    $0x4,%esp
+}
+  80012a:	c9                   	leave  
+  80012b:	c3                   	ret    
+
+0080012c <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80012c:	55                   	push   %ebp
+  80012d:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_wait, pid, store);
+  80012f:	ff 75 0c             	pushl  0xc(%ebp)
+  800132:	ff 75 08             	pushl  0x8(%ebp)
+  800135:	6a 03                	push   $0x3
+  800137:	e8 79 ff ff ff       	call   8000b5 <syscall>
+  80013c:	83 c4 0c             	add    $0xc,%esp
+}
+  80013f:	c9                   	leave  
+  800140:	c3                   	ret    
+
+00800141 <sys_yield>:
+
+int
+sys_yield(void) {
+  800141:	55                   	push   %ebp
+  800142:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_yield);
+  800144:	6a 0a                	push   $0xa
+  800146:	e8 6a ff ff ff       	call   8000b5 <syscall>
+  80014b:	83 c4 04             	add    $0x4,%esp
+}
+  80014e:	c9                   	leave  
+  80014f:	c3                   	ret    
+
+00800150 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800150:	55                   	push   %ebp
+  800151:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_kill, pid);
+  800153:	ff 75 08             	pushl  0x8(%ebp)
+  800156:	6a 0c                	push   $0xc
+  800158:	e8 58 ff ff ff       	call   8000b5 <syscall>
+  80015d:	83 c4 08             	add    $0x8,%esp
+}
+  800160:	c9                   	leave  
+  800161:	c3                   	ret    
+
+00800162 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800162:	55                   	push   %ebp
+  800163:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_getpid);
+  800165:	6a 12                	push   $0x12
+  800167:	e8 49 ff ff ff       	call   8000b5 <syscall>
+  80016c:	83 c4 04             	add    $0x4,%esp
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_putc, c);
+  800174:	ff 75 08             	pushl  0x8(%ebp)
+  800177:	6a 1e                	push   $0x1e
+  800179:	e8 37 ff ff ff       	call   8000b5 <syscall>
+  80017e:	83 c4 08             	add    $0x8,%esp
+}
+  800181:	c9                   	leave  
+  800182:	c3                   	ret    
+
+00800183 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800183:	55                   	push   %ebp
+  800184:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_pgdir);
+  800186:	6a 1f                	push   $0x1f
+  800188:	e8 28 ff ff ff       	call   8000b5 <syscall>
+  80018d:	83 c4 04             	add    $0x4,%esp
+}
+  800190:	c9                   	leave  
+  800191:	c3                   	ret    
+
+00800192 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  800192:	55                   	push   %ebp
+  800193:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_gettime);
+  800195:	6a 11                	push   $0x11
+  800197:	e8 19 ff ff ff       	call   8000b5 <syscall>
+  80019c:	83 c4 04             	add    $0x4,%esp
+}
+  80019f:	c9                   	leave  
+  8001a0:	c3                   	ret    
+
+008001a1 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001a1:	55                   	push   %ebp
+  8001a2:	89 e5                	mov    %esp,%ebp
+    syscall(SYS_lab6_set_priority, priority);
+  8001a4:	ff 75 08             	pushl  0x8(%ebp)
+  8001a7:	68 ff 00 00 00       	push   $0xff
+  8001ac:	e8 04 ff ff ff       	call   8000b5 <syscall>
+  8001b1:	83 c4 08             	add    $0x8,%esp
+}
+  8001b4:	90                   	nop
+  8001b5:	c9                   	leave  
+  8001b6:	c3                   	ret    
+
+008001b7 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001b7:	55                   	push   %ebp
+  8001b8:	89 e5                	mov    %esp,%ebp
+  8001ba:	83 ec 08             	sub    $0x8,%esp
+    sys_exit(error_code);
+  8001bd:	83 ec 0c             	sub    $0xc,%esp
+  8001c0:	ff 75 08             	pushl  0x8(%ebp)
+  8001c3:	e8 43 ff ff ff       	call   80010b <sys_exit>
+  8001c8:	83 c4 10             	add    $0x10,%esp
+    cprintf("BUG: exit failed.\n");
+  8001cb:	83 ec 0c             	sub    $0xc,%esp
+  8001ce:	68 98 0f 80 00       	push   $0x800f98
+  8001d3:	e8 01 01 00 00       	call   8002d9 <cprintf>
+  8001d8:	83 c4 10             	add    $0x10,%esp
+    while (1);
+  8001db:	eb fe                	jmp    8001db <exit+0x24>
+
+008001dd <fork>:
+}
+
+int
+fork(void) {
+  8001dd:	55                   	push   %ebp
+  8001de:	89 e5                	mov    %esp,%ebp
+  8001e0:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8001e3:	e8 35 ff ff ff       	call   80011d <sys_fork>
+}
+  8001e8:	c9                   	leave  
+  8001e9:	c3                   	ret    
+
+008001ea <wait>:
+
+int
+wait(void) {
+  8001ea:	55                   	push   %ebp
+  8001eb:	89 e5                	mov    %esp,%ebp
+  8001ed:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(0, NULL);
+  8001f0:	83 ec 08             	sub    $0x8,%esp
+  8001f3:	6a 00                	push   $0x0
+  8001f5:	6a 00                	push   $0x0
+  8001f7:	e8 30 ff ff ff       	call   80012c <sys_wait>
+  8001fc:	83 c4 10             	add    $0x10,%esp
+}
+  8001ff:	c9                   	leave  
+  800200:	c3                   	ret    
+
+00800201 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800201:	55                   	push   %ebp
+  800202:	89 e5                	mov    %esp,%ebp
+  800204:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(pid, store);
+  800207:	83 ec 08             	sub    $0x8,%esp
+  80020a:	ff 75 0c             	pushl  0xc(%ebp)
+  80020d:	ff 75 08             	pushl  0x8(%ebp)
+  800210:	e8 17 ff ff ff       	call   80012c <sys_wait>
+  800215:	83 c4 10             	add    $0x10,%esp
+}
+  800218:	c9                   	leave  
+  800219:	c3                   	ret    
+
+0080021a <yield>:
+
+void
+yield(void) {
+  80021a:	55                   	push   %ebp
+  80021b:	89 e5                	mov    %esp,%ebp
+  80021d:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800220:	e8 1c ff ff ff       	call   800141 <sys_yield>
+}
+  800225:	90                   	nop
+  800226:	c9                   	leave  
+  800227:	c3                   	ret    
+
+00800228 <kill>:
+
+int
+kill(int pid) {
+  800228:	55                   	push   %ebp
+  800229:	89 e5                	mov    %esp,%ebp
+  80022b:	83 ec 08             	sub    $0x8,%esp
+    return sys_kill(pid);
+  80022e:	83 ec 0c             	sub    $0xc,%esp
+  800231:	ff 75 08             	pushl  0x8(%ebp)
+  800234:	e8 17 ff ff ff       	call   800150 <sys_kill>
+  800239:	83 c4 10             	add    $0x10,%esp
+}
+  80023c:	c9                   	leave  
+  80023d:	c3                   	ret    
+
+0080023e <getpid>:
+
+int
+getpid(void) {
+  80023e:	55                   	push   %ebp
+  80023f:	89 e5                	mov    %esp,%ebp
+  800241:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800244:	e8 19 ff ff ff       	call   800162 <sys_getpid>
+}
+  800249:	c9                   	leave  
+  80024a:	c3                   	ret    
+
+0080024b <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80024b:	55                   	push   %ebp
+  80024c:	89 e5                	mov    %esp,%ebp
+  80024e:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800251:	e8 2d ff ff ff       	call   800183 <sys_pgdir>
+}
+  800256:	90                   	nop
+  800257:	c9                   	leave  
+  800258:	c3                   	ret    
+
+00800259 <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  800259:	55                   	push   %ebp
+  80025a:	89 e5                	mov    %esp,%ebp
+  80025c:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  80025f:	e8 2e ff ff ff       	call   800192 <sys_gettime>
+}
+  800264:	c9                   	leave  
+  800265:	c3                   	ret    
+
+00800266 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800266:	55                   	push   %ebp
+  800267:	89 e5                	mov    %esp,%ebp
+  800269:	83 ec 08             	sub    $0x8,%esp
+    sys_lab6_set_priority(priority);
+  80026c:	83 ec 0c             	sub    $0xc,%esp
+  80026f:	ff 75 08             	pushl  0x8(%ebp)
+  800272:	e8 2a ff ff ff       	call   8001a1 <sys_lab6_set_priority>
+  800277:	83 c4 10             	add    $0x10,%esp
+}
+  80027a:	90                   	nop
+  80027b:	c9                   	leave  
+  80027c:	c3                   	ret    
+
+0080027d <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  80027d:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800282:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800285:	e8 c3 00 00 00       	call   80034d <umain>
+1:  jmp 1b
+  80028a:	eb fe                	jmp    80028a <_start+0xd>
+
+0080028c <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  80028c:	55                   	push   %ebp
+  80028d:	89 e5                	mov    %esp,%ebp
+  80028f:	83 ec 08             	sub    $0x8,%esp
+    sys_putc(c);
+  800292:	83 ec 0c             	sub    $0xc,%esp
+  800295:	ff 75 08             	pushl  0x8(%ebp)
+  800298:	e8 d4 fe ff ff       	call   800171 <sys_putc>
+  80029d:	83 c4 10             	add    $0x10,%esp
+    (*cnt) ++;
+  8002a0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002a3:	8b 00                	mov    (%eax),%eax
+  8002a5:	8d 50 01             	lea    0x1(%eax),%edx
+  8002a8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002ab:	89 10                	mov    %edx,(%eax)
+}
+  8002ad:	90                   	nop
+  8002ae:	c9                   	leave  
+  8002af:	c3                   	ret    
+
+008002b0 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002b0:	55                   	push   %ebp
+  8002b1:	89 e5                	mov    %esp,%ebp
+  8002b3:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  8002b6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002bd:	ff 75 0c             	pushl  0xc(%ebp)
+  8002c0:	ff 75 08             	pushl  0x8(%ebp)
+  8002c3:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  8002c6:	50                   	push   %eax
+  8002c7:	68 8c 02 80 00       	push   $0x80028c
+  8002cc:	e8 fc 06 00 00       	call   8009cd <vprintfmt>
+  8002d1:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  8002d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002d7:	c9                   	leave  
+  8002d8:	c3                   	ret    
+
+008002d9 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  8002d9:	55                   	push   %ebp
+  8002da:	89 e5                	mov    %esp,%ebp
+  8002dc:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8002df:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8002e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  8002e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8002e8:	83 ec 08             	sub    $0x8,%esp
+  8002eb:	50                   	push   %eax
+  8002ec:	ff 75 08             	pushl  0x8(%ebp)
+  8002ef:	e8 bc ff ff ff       	call   8002b0 <vcprintf>
+  8002f4:	83 c4 10             	add    $0x10,%esp
+  8002f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  8002fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002fd:	c9                   	leave  
+  8002fe:	c3                   	ret    
+
+008002ff <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  8002ff:	55                   	push   %ebp
+  800300:	89 e5                	mov    %esp,%ebp
+  800302:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  800305:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80030c:	eb 14                	jmp    800322 <cputs+0x23>
+        cputch(c, &cnt);
+  80030e:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800312:	83 ec 08             	sub    $0x8,%esp
+  800315:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800318:	52                   	push   %edx
+  800319:	50                   	push   %eax
+  80031a:	e8 6d ff ff ff       	call   80028c <cputch>
+  80031f:	83 c4 10             	add    $0x10,%esp
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800322:	8b 45 08             	mov    0x8(%ebp),%eax
+  800325:	8d 50 01             	lea    0x1(%eax),%edx
+  800328:	89 55 08             	mov    %edx,0x8(%ebp)
+  80032b:	0f b6 00             	movzbl (%eax),%eax
+  80032e:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800331:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800335:	75 d7                	jne    80030e <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800337:	83 ec 08             	sub    $0x8,%esp
+  80033a:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  80033d:	50                   	push   %eax
+  80033e:	6a 0a                	push   $0xa
+  800340:	e8 47 ff ff ff       	call   80028c <cputch>
+  800345:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  800348:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80034b:	c9                   	leave  
+  80034c:	c3                   	ret    
+
+0080034d <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  80034d:	55                   	push   %ebp
+  80034e:	89 e5                	mov    %esp,%ebp
+  800350:	83 ec 18             	sub    $0x18,%esp
+    int ret = main();
+  800353:	e8 d3 0b 00 00       	call   800f2b <main>
+  800358:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  80035b:	83 ec 0c             	sub    $0xc,%esp
+  80035e:	ff 75 f4             	pushl  -0xc(%ebp)
+  800361:	e8 51 fe ff ff       	call   8001b7 <exit>
+
+00800366 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800366:	55                   	push   %ebp
+  800367:	89 e5                	mov    %esp,%ebp
+  800369:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  80036c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800373:	eb 04                	jmp    800379 <strlen+0x13>
+        cnt ++;
+  800375:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800379:	8b 45 08             	mov    0x8(%ebp),%eax
+  80037c:	8d 50 01             	lea    0x1(%eax),%edx
+  80037f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800382:	0f b6 00             	movzbl (%eax),%eax
+  800385:	84 c0                	test   %al,%al
+  800387:	75 ec                	jne    800375 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800389:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  80038c:	c9                   	leave  
+  80038d:	c3                   	ret    
+
+0080038e <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  80038e:	55                   	push   %ebp
+  80038f:	89 e5                	mov    %esp,%ebp
+  800391:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800394:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  80039b:	eb 04                	jmp    8003a1 <strnlen+0x13>
+        cnt ++;
+  80039d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  8003a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003a4:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003a7:	73 10                	jae    8003b9 <strnlen+0x2b>
+  8003a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003ac:	8d 50 01             	lea    0x1(%eax),%edx
+  8003af:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003b2:	0f b6 00             	movzbl (%eax),%eax
+  8003b5:	84 c0                	test   %al,%al
+  8003b7:	75 e4                	jne    80039d <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003b9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003bc:	c9                   	leave  
+  8003bd:	c3                   	ret    
+
+008003be <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  8003be:	55                   	push   %ebp
+  8003bf:	89 e5                	mov    %esp,%ebp
+  8003c1:	57                   	push   %edi
+  8003c2:	56                   	push   %esi
+  8003c3:	83 ec 20             	sub    $0x20,%esp
+  8003c6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003cc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8003cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  8003d2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003d8:	89 d1                	mov    %edx,%ecx
+  8003da:	89 c2                	mov    %eax,%edx
+  8003dc:	89 ce                	mov    %ecx,%esi
+  8003de:	89 d7                	mov    %edx,%edi
+  8003e0:	ac                   	lods   %ds:(%esi),%al
+  8003e1:	aa                   	stos   %al,%es:(%edi)
+  8003e2:	84 c0                	test   %al,%al
+  8003e4:	75 fa                	jne    8003e0 <strcpy+0x22>
+  8003e6:	89 fa                	mov    %edi,%edx
+  8003e8:	89 f1                	mov    %esi,%ecx
+  8003ea:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8003ed:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8003f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  8003f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  8003f6:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  8003f7:	83 c4 20             	add    $0x20,%esp
+  8003fa:	5e                   	pop    %esi
+  8003fb:	5f                   	pop    %edi
+  8003fc:	5d                   	pop    %ebp
+  8003fd:	c3                   	ret    
+
+008003fe <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  8003fe:	55                   	push   %ebp
+  8003ff:	89 e5                	mov    %esp,%ebp
+  800401:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800404:	8b 45 08             	mov    0x8(%ebp),%eax
+  800407:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  80040a:	eb 21                	jmp    80042d <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  80040c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80040f:	0f b6 10             	movzbl (%eax),%edx
+  800412:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800415:	88 10                	mov    %dl,(%eax)
+  800417:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80041a:	0f b6 00             	movzbl (%eax),%eax
+  80041d:	84 c0                	test   %al,%al
+  80041f:	74 04                	je     800425 <strncpy+0x27>
+            src ++;
+  800421:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800425:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800429:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  80042d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800431:	75 d9                	jne    80040c <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800433:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800436:	c9                   	leave  
+  800437:	c3                   	ret    
+
+00800438 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800438:	55                   	push   %ebp
+  800439:	89 e5                	mov    %esp,%ebp
+  80043b:	57                   	push   %edi
+  80043c:	56                   	push   %esi
+  80043d:	83 ec 20             	sub    $0x20,%esp
+  800440:	8b 45 08             	mov    0x8(%ebp),%eax
+  800443:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800446:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800449:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  80044c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80044f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800452:	89 d1                	mov    %edx,%ecx
+  800454:	89 c2                	mov    %eax,%edx
+  800456:	89 ce                	mov    %ecx,%esi
+  800458:	89 d7                	mov    %edx,%edi
+  80045a:	ac                   	lods   %ds:(%esi),%al
+  80045b:	ae                   	scas   %es:(%edi),%al
+  80045c:	75 08                	jne    800466 <strcmp+0x2e>
+  80045e:	84 c0                	test   %al,%al
+  800460:	75 f8                	jne    80045a <strcmp+0x22>
+  800462:	31 c0                	xor    %eax,%eax
+  800464:	eb 04                	jmp    80046a <strcmp+0x32>
+  800466:	19 c0                	sbb    %eax,%eax
+  800468:	0c 01                	or     $0x1,%al
+  80046a:	89 fa                	mov    %edi,%edx
+  80046c:	89 f1                	mov    %esi,%ecx
+  80046e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800471:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800474:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800477:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  80047a:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  80047b:	83 c4 20             	add    $0x20,%esp
+  80047e:	5e                   	pop    %esi
+  80047f:	5f                   	pop    %edi
+  800480:	5d                   	pop    %ebp
+  800481:	c3                   	ret    
+
+00800482 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800482:	55                   	push   %ebp
+  800483:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800485:	eb 0c                	jmp    800493 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800487:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  80048b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  80048f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800493:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800497:	74 1a                	je     8004b3 <strncmp+0x31>
+  800499:	8b 45 08             	mov    0x8(%ebp),%eax
+  80049c:	0f b6 00             	movzbl (%eax),%eax
+  80049f:	84 c0                	test   %al,%al
+  8004a1:	74 10                	je     8004b3 <strncmp+0x31>
+  8004a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004a6:	0f b6 10             	movzbl (%eax),%edx
+  8004a9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ac:	0f b6 00             	movzbl (%eax),%eax
+  8004af:	38 c2                	cmp    %al,%dl
+  8004b1:	74 d4                	je     800487 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004b3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004b7:	74 18                	je     8004d1 <strncmp+0x4f>
+  8004b9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004bc:	0f b6 00             	movzbl (%eax),%eax
+  8004bf:	0f b6 d0             	movzbl %al,%edx
+  8004c2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004c5:	0f b6 00             	movzbl (%eax),%eax
+  8004c8:	0f b6 c0             	movzbl %al,%eax
+  8004cb:	29 c2                	sub    %eax,%edx
+  8004cd:	89 d0                	mov    %edx,%eax
+  8004cf:	eb 05                	jmp    8004d6 <strncmp+0x54>
+  8004d1:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8004d6:	5d                   	pop    %ebp
+  8004d7:	c3                   	ret    
+
+008004d8 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  8004d8:	55                   	push   %ebp
+  8004d9:	89 e5                	mov    %esp,%ebp
+  8004db:	83 ec 04             	sub    $0x4,%esp
+  8004de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004e1:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  8004e4:	eb 14                	jmp    8004fa <strchr+0x22>
+        if (*s == c) {
+  8004e6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e9:	0f b6 00             	movzbl (%eax),%eax
+  8004ec:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  8004ef:	75 05                	jne    8004f6 <strchr+0x1e>
+            return (char *)s;
+  8004f1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004f4:	eb 13                	jmp    800509 <strchr+0x31>
+        }
+        s ++;
+  8004f6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  8004fa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fd:	0f b6 00             	movzbl (%eax),%eax
+  800500:	84 c0                	test   %al,%al
+  800502:	75 e2                	jne    8004e6 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800504:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800509:	c9                   	leave  
+  80050a:	c3                   	ret    
+
+0080050b <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  80050b:	55                   	push   %ebp
+  80050c:	89 e5                	mov    %esp,%ebp
+  80050e:	83 ec 04             	sub    $0x4,%esp
+  800511:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800514:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800517:	eb 0f                	jmp    800528 <strfind+0x1d>
+        if (*s == c) {
+  800519:	8b 45 08             	mov    0x8(%ebp),%eax
+  80051c:	0f b6 00             	movzbl (%eax),%eax
+  80051f:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800522:	74 10                	je     800534 <strfind+0x29>
+            break;
+        }
+        s ++;
+  800524:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800528:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052b:	0f b6 00             	movzbl (%eax),%eax
+  80052e:	84 c0                	test   %al,%al
+  800530:	75 e7                	jne    800519 <strfind+0xe>
+  800532:	eb 01                	jmp    800535 <strfind+0x2a>
+        if (*s == c) {
+            break;
+  800534:	90                   	nop
+        }
+        s ++;
+    }
+    return (char *)s;
+  800535:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800538:	c9                   	leave  
+  800539:	c3                   	ret    
+
+0080053a <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  80053a:	55                   	push   %ebp
+  80053b:	89 e5                	mov    %esp,%ebp
+  80053d:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800540:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800547:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80054e:	eb 04                	jmp    800554 <strtol+0x1a>
+        s ++;
+  800550:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800554:	8b 45 08             	mov    0x8(%ebp),%eax
+  800557:	0f b6 00             	movzbl (%eax),%eax
+  80055a:	3c 20                	cmp    $0x20,%al
+  80055c:	74 f2                	je     800550 <strtol+0x16>
+  80055e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800561:	0f b6 00             	movzbl (%eax),%eax
+  800564:	3c 09                	cmp    $0x9,%al
+  800566:	74 e8                	je     800550 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800568:	8b 45 08             	mov    0x8(%ebp),%eax
+  80056b:	0f b6 00             	movzbl (%eax),%eax
+  80056e:	3c 2b                	cmp    $0x2b,%al
+  800570:	75 06                	jne    800578 <strtol+0x3e>
+        s ++;
+  800572:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800576:	eb 15                	jmp    80058d <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800578:	8b 45 08             	mov    0x8(%ebp),%eax
+  80057b:	0f b6 00             	movzbl (%eax),%eax
+  80057e:	3c 2d                	cmp    $0x2d,%al
+  800580:	75 0b                	jne    80058d <strtol+0x53>
+        s ++, neg = 1;
+  800582:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800586:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  80058d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800591:	74 06                	je     800599 <strtol+0x5f>
+  800593:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800597:	75 24                	jne    8005bd <strtol+0x83>
+  800599:	8b 45 08             	mov    0x8(%ebp),%eax
+  80059c:	0f b6 00             	movzbl (%eax),%eax
+  80059f:	3c 30                	cmp    $0x30,%al
+  8005a1:	75 1a                	jne    8005bd <strtol+0x83>
+  8005a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a6:	83 c0 01             	add    $0x1,%eax
+  8005a9:	0f b6 00             	movzbl (%eax),%eax
+  8005ac:	3c 78                	cmp    $0x78,%al
+  8005ae:	75 0d                	jne    8005bd <strtol+0x83>
+        s += 2, base = 16;
+  8005b0:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005b4:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005bb:	eb 2a                	jmp    8005e7 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005bd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005c1:	75 17                	jne    8005da <strtol+0xa0>
+  8005c3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005c6:	0f b6 00             	movzbl (%eax),%eax
+  8005c9:	3c 30                	cmp    $0x30,%al
+  8005cb:	75 0d                	jne    8005da <strtol+0xa0>
+        s ++, base = 8;
+  8005cd:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005d1:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  8005d8:	eb 0d                	jmp    8005e7 <strtol+0xad>
+    }
+    else if (base == 0) {
+  8005da:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005de:	75 07                	jne    8005e7 <strtol+0xad>
+        base = 10;
+  8005e0:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  8005e7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ea:	0f b6 00             	movzbl (%eax),%eax
+  8005ed:	3c 2f                	cmp    $0x2f,%al
+  8005ef:	7e 1b                	jle    80060c <strtol+0xd2>
+  8005f1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005f4:	0f b6 00             	movzbl (%eax),%eax
+  8005f7:	3c 39                	cmp    $0x39,%al
+  8005f9:	7f 11                	jg     80060c <strtol+0xd2>
+            dig = *s - '0';
+  8005fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005fe:	0f b6 00             	movzbl (%eax),%eax
+  800601:	0f be c0             	movsbl %al,%eax
+  800604:	83 e8 30             	sub    $0x30,%eax
+  800607:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80060a:	eb 48                	jmp    800654 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  80060c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80060f:	0f b6 00             	movzbl (%eax),%eax
+  800612:	3c 60                	cmp    $0x60,%al
+  800614:	7e 1b                	jle    800631 <strtol+0xf7>
+  800616:	8b 45 08             	mov    0x8(%ebp),%eax
+  800619:	0f b6 00             	movzbl (%eax),%eax
+  80061c:	3c 7a                	cmp    $0x7a,%al
+  80061e:	7f 11                	jg     800631 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800620:	8b 45 08             	mov    0x8(%ebp),%eax
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	0f be c0             	movsbl %al,%eax
+  800629:	83 e8 57             	sub    $0x57,%eax
+  80062c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80062f:	eb 23                	jmp    800654 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800631:	8b 45 08             	mov    0x8(%ebp),%eax
+  800634:	0f b6 00             	movzbl (%eax),%eax
+  800637:	3c 40                	cmp    $0x40,%al
+  800639:	7e 3c                	jle    800677 <strtol+0x13d>
+  80063b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80063e:	0f b6 00             	movzbl (%eax),%eax
+  800641:	3c 5a                	cmp    $0x5a,%al
+  800643:	7f 32                	jg     800677 <strtol+0x13d>
+            dig = *s - 'A' + 10;
+  800645:	8b 45 08             	mov    0x8(%ebp),%eax
+  800648:	0f b6 00             	movzbl (%eax),%eax
+  80064b:	0f be c0             	movsbl %al,%eax
+  80064e:	83 e8 37             	sub    $0x37,%eax
+  800651:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800654:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800657:	3b 45 10             	cmp    0x10(%ebp),%eax
+  80065a:	7d 1a                	jge    800676 <strtol+0x13c>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  80065c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800660:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800663:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800667:	89 c2                	mov    %eax,%edx
+  800669:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80066c:	01 d0                	add    %edx,%eax
+  80066e:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800671:	e9 71 ff ff ff       	jmp    8005e7 <strtol+0xad>
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+            break;
+  800676:	90                   	nop
+        }
+        s ++, val = (val * base) + dig;
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  800677:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80067b:	74 08                	je     800685 <strtol+0x14b>
+        *endptr = (char *) s;
+  80067d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800680:	8b 55 08             	mov    0x8(%ebp),%edx
+  800683:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800685:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800689:	74 07                	je     800692 <strtol+0x158>
+  80068b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80068e:	f7 d8                	neg    %eax
+  800690:	eb 03                	jmp    800695 <strtol+0x15b>
+  800692:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800695:	c9                   	leave  
+  800696:	c3                   	ret    
+
+00800697 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800697:	55                   	push   %ebp
+  800698:	89 e5                	mov    %esp,%ebp
+  80069a:	57                   	push   %edi
+  80069b:	83 ec 24             	sub    $0x24,%esp
+  80069e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006a1:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006a4:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006a8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006ab:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006ae:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006b1:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006b7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006ba:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006be:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006c1:	89 d7                	mov    %edx,%edi
+  8006c3:	f3 aa                	rep stos %al,%es:(%edi)
+  8006c5:	89 fa                	mov    %edi,%edx
+  8006c7:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8006ca:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  8006cd:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006d0:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  8006d1:	83 c4 24             	add    $0x24,%esp
+  8006d4:	5f                   	pop    %edi
+  8006d5:	5d                   	pop    %ebp
+  8006d6:	c3                   	ret    
+
+008006d7 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  8006d7:	55                   	push   %ebp
+  8006d8:	89 e5                	mov    %esp,%ebp
+  8006da:	57                   	push   %edi
+  8006db:	56                   	push   %esi
+  8006dc:	53                   	push   %ebx
+  8006dd:	83 ec 30             	sub    $0x30,%esp
+  8006e0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8006e6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006e9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8006ec:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006ef:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  8006f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8006f5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  8006f8:	73 42                	jae    80073c <memmove+0x65>
+  8006fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8006fd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800700:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800703:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800706:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800709:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  80070c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  80070f:	c1 e8 02             	shr    $0x2,%eax
+  800712:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800714:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800717:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80071a:	89 d7                	mov    %edx,%edi
+  80071c:	89 c6                	mov    %eax,%esi
+  80071e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800720:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800723:	83 e1 03             	and    $0x3,%ecx
+  800726:	74 02                	je     80072a <memmove+0x53>
+  800728:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  80072a:	89 f0                	mov    %esi,%eax
+  80072c:	89 fa                	mov    %edi,%edx
+  80072e:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800731:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800734:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800737:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  80073a:	eb 36                	jmp    800772 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  80073c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80073f:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800742:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800745:	01 c2                	add    %eax,%edx
+  800747:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80074a:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  80074d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800750:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800753:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800756:	89 c1                	mov    %eax,%ecx
+  800758:	89 d8                	mov    %ebx,%eax
+  80075a:	89 d6                	mov    %edx,%esi
+  80075c:	89 c7                	mov    %eax,%edi
+  80075e:	fd                   	std    
+  80075f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800761:	fc                   	cld    
+  800762:	89 f8                	mov    %edi,%eax
+  800764:	89 f2                	mov    %esi,%edx
+  800766:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800769:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  80076c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  80076f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800772:	83 c4 30             	add    $0x30,%esp
+  800775:	5b                   	pop    %ebx
+  800776:	5e                   	pop    %esi
+  800777:	5f                   	pop    %edi
+  800778:	5d                   	pop    %ebp
+  800779:	c3                   	ret    
+
+0080077a <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  80077a:	55                   	push   %ebp
+  80077b:	89 e5                	mov    %esp,%ebp
+  80077d:	57                   	push   %edi
+  80077e:	56                   	push   %esi
+  80077f:	83 ec 20             	sub    $0x20,%esp
+  800782:	8b 45 08             	mov    0x8(%ebp),%eax
+  800785:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800788:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80078b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80078e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800791:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800794:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800797:	c1 e8 02             	shr    $0x2,%eax
+  80079a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  80079c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80079f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007a2:	89 d7                	mov    %edx,%edi
+  8007a4:	89 c6                	mov    %eax,%esi
+  8007a6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007a8:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007ab:	83 e1 03             	and    $0x3,%ecx
+  8007ae:	74 02                	je     8007b2 <memcpy+0x38>
+  8007b0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007b2:	89 f0                	mov    %esi,%eax
+  8007b4:	89 fa                	mov    %edi,%edx
+  8007b6:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007b9:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007bc:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  8007bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007c2:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007c3:	83 c4 20             	add    $0x20,%esp
+  8007c6:	5e                   	pop    %esi
+  8007c7:	5f                   	pop    %edi
+  8007c8:	5d                   	pop    %ebp
+  8007c9:	c3                   	ret    
+
+008007ca <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  8007ca:	55                   	push   %ebp
+  8007cb:	89 e5                	mov    %esp,%ebp
+  8007cd:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  8007d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007d3:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  8007d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007d9:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  8007dc:	eb 30                	jmp    80080e <memcmp+0x44>
+        if (*s1 != *s2) {
+  8007de:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8007e1:	0f b6 10             	movzbl (%eax),%edx
+  8007e4:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8007e7:	0f b6 00             	movzbl (%eax),%eax
+  8007ea:	38 c2                	cmp    %al,%dl
+  8007ec:	74 18                	je     800806 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8007ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8007f1:	0f b6 00             	movzbl (%eax),%eax
+  8007f4:	0f b6 d0             	movzbl %al,%edx
+  8007f7:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8007fa:	0f b6 00             	movzbl (%eax),%eax
+  8007fd:	0f b6 c0             	movzbl %al,%eax
+  800800:	29 c2                	sub    %eax,%edx
+  800802:	89 d0                	mov    %edx,%eax
+  800804:	eb 1a                	jmp    800820 <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800806:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  80080a:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  80080e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800811:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800814:	89 55 10             	mov    %edx,0x10(%ebp)
+  800817:	85 c0                	test   %eax,%eax
+  800819:	75 c3                	jne    8007de <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  80081b:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800820:	c9                   	leave  
+  800821:	c3                   	ret    
+
+00800822 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800822:	55                   	push   %ebp
+  800823:	89 e5                	mov    %esp,%ebp
+  800825:	83 ec 38             	sub    $0x38,%esp
+  800828:	8b 45 10             	mov    0x10(%ebp),%eax
+  80082b:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  80082e:	8b 45 14             	mov    0x14(%ebp),%eax
+  800831:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  800834:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800837:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  80083a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80083d:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800840:	8b 45 18             	mov    0x18(%ebp),%eax
+  800843:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800846:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800849:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80084c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80084f:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  800852:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800855:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800858:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  80085c:	74 1c                	je     80087a <printnum+0x58>
+  80085e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800861:	ba 00 00 00 00       	mov    $0x0,%edx
+  800866:	f7 75 e4             	divl   -0x1c(%ebp)
+  800869:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  80086c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80086f:	ba 00 00 00 00       	mov    $0x0,%edx
+  800874:	f7 75 e4             	divl   -0x1c(%ebp)
+  800877:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80087a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80087d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800880:	f7 75 e4             	divl   -0x1c(%ebp)
+  800883:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800886:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800889:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80088c:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80088f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800892:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800895:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800898:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  80089b:	8b 45 18             	mov    0x18(%ebp),%eax
+  80089e:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008a3:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008a6:	77 41                	ja     8008e9 <printnum+0xc7>
+  8008a8:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008ab:	72 05                	jb     8008b2 <printnum+0x90>
+  8008ad:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  8008b0:	77 37                	ja     8008e9 <printnum+0xc7>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008b2:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008b5:	83 e8 01             	sub    $0x1,%eax
+  8008b8:	83 ec 04             	sub    $0x4,%esp
+  8008bb:	ff 75 20             	pushl  0x20(%ebp)
+  8008be:	50                   	push   %eax
+  8008bf:	ff 75 18             	pushl  0x18(%ebp)
+  8008c2:	ff 75 ec             	pushl  -0x14(%ebp)
+  8008c5:	ff 75 e8             	pushl  -0x18(%ebp)
+  8008c8:	ff 75 0c             	pushl  0xc(%ebp)
+  8008cb:	ff 75 08             	pushl  0x8(%ebp)
+  8008ce:	e8 4f ff ff ff       	call   800822 <printnum>
+  8008d3:	83 c4 20             	add    $0x20,%esp
+  8008d6:	eb 1b                	jmp    8008f3 <printnum+0xd1>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  8008d8:	83 ec 08             	sub    $0x8,%esp
+  8008db:	ff 75 0c             	pushl  0xc(%ebp)
+  8008de:	ff 75 20             	pushl  0x20(%ebp)
+  8008e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008e4:	ff d0                	call   *%eax
+  8008e6:	83 c4 10             	add    $0x10,%esp
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8008e9:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8008ed:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8008f1:	7f e5                	jg     8008d8 <printnum+0xb6>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8008f3:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8008f6:	05 c4 10 80 00       	add    $0x8010c4,%eax
+  8008fb:	0f b6 00             	movzbl (%eax),%eax
+  8008fe:	0f be c0             	movsbl %al,%eax
+  800901:	83 ec 08             	sub    $0x8,%esp
+  800904:	ff 75 0c             	pushl  0xc(%ebp)
+  800907:	50                   	push   %eax
+  800908:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090b:	ff d0                	call   *%eax
+  80090d:	83 c4 10             	add    $0x10,%esp
+}
+  800910:	90                   	nop
+  800911:	c9                   	leave  
+  800912:	c3                   	ret    
+
+00800913 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800913:	55                   	push   %ebp
+  800914:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800916:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80091a:	7e 14                	jle    800930 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80091c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80091f:	8b 00                	mov    (%eax),%eax
+  800921:	8d 48 08             	lea    0x8(%eax),%ecx
+  800924:	8b 55 08             	mov    0x8(%ebp),%edx
+  800927:	89 0a                	mov    %ecx,(%edx)
+  800929:	8b 50 04             	mov    0x4(%eax),%edx
+  80092c:	8b 00                	mov    (%eax),%eax
+  80092e:	eb 30                	jmp    800960 <getuint+0x4d>
+    }
+    else if (lflag) {
+  800930:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800934:	74 16                	je     80094c <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800936:	8b 45 08             	mov    0x8(%ebp),%eax
+  800939:	8b 00                	mov    (%eax),%eax
+  80093b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80093e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800941:	89 0a                	mov    %ecx,(%edx)
+  800943:	8b 00                	mov    (%eax),%eax
+  800945:	ba 00 00 00 00       	mov    $0x0,%edx
+  80094a:	eb 14                	jmp    800960 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80094c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80094f:	8b 00                	mov    (%eax),%eax
+  800951:	8d 48 04             	lea    0x4(%eax),%ecx
+  800954:	8b 55 08             	mov    0x8(%ebp),%edx
+  800957:	89 0a                	mov    %ecx,(%edx)
+  800959:	8b 00                	mov    (%eax),%eax
+  80095b:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800960:	5d                   	pop    %ebp
+  800961:	c3                   	ret    
+
+00800962 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800962:	55                   	push   %ebp
+  800963:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800965:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800969:	7e 14                	jle    80097f <getint+0x1d>
+        return va_arg(*ap, long long);
+  80096b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80096e:	8b 00                	mov    (%eax),%eax
+  800970:	8d 48 08             	lea    0x8(%eax),%ecx
+  800973:	8b 55 08             	mov    0x8(%ebp),%edx
+  800976:	89 0a                	mov    %ecx,(%edx)
+  800978:	8b 50 04             	mov    0x4(%eax),%edx
+  80097b:	8b 00                	mov    (%eax),%eax
+  80097d:	eb 28                	jmp    8009a7 <getint+0x45>
+    }
+    else if (lflag) {
+  80097f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800983:	74 12                	je     800997 <getint+0x35>
+        return va_arg(*ap, long);
+  800985:	8b 45 08             	mov    0x8(%ebp),%eax
+  800988:	8b 00                	mov    (%eax),%eax
+  80098a:	8d 48 04             	lea    0x4(%eax),%ecx
+  80098d:	8b 55 08             	mov    0x8(%ebp),%edx
+  800990:	89 0a                	mov    %ecx,(%edx)
+  800992:	8b 00                	mov    (%eax),%eax
+  800994:	99                   	cltd   
+  800995:	eb 10                	jmp    8009a7 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800997:	8b 45 08             	mov    0x8(%ebp),%eax
+  80099a:	8b 00                	mov    (%eax),%eax
+  80099c:	8d 48 04             	lea    0x4(%eax),%ecx
+  80099f:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009a2:	89 0a                	mov    %ecx,(%edx)
+  8009a4:	8b 00                	mov    (%eax),%eax
+  8009a6:	99                   	cltd   
+    }
+}
+  8009a7:	5d                   	pop    %ebp
+  8009a8:	c3                   	ret    
+
+008009a9 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009a9:	55                   	push   %ebp
+  8009aa:	89 e5                	mov    %esp,%ebp
+  8009ac:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009af:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8009b8:	50                   	push   %eax
+  8009b9:	ff 75 10             	pushl  0x10(%ebp)
+  8009bc:	ff 75 0c             	pushl  0xc(%ebp)
+  8009bf:	ff 75 08             	pushl  0x8(%ebp)
+  8009c2:	e8 06 00 00 00       	call   8009cd <vprintfmt>
+  8009c7:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8009ca:	90                   	nop
+  8009cb:	c9                   	leave  
+  8009cc:	c3                   	ret    
+
+008009cd <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8009cd:	55                   	push   %ebp
+  8009ce:	89 e5                	mov    %esp,%ebp
+  8009d0:	56                   	push   %esi
+  8009d1:	53                   	push   %ebx
+  8009d2:	83 ec 20             	sub    $0x20,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009d5:	eb 17                	jmp    8009ee <vprintfmt+0x21>
+            if (ch == '\0') {
+  8009d7:	85 db                	test   %ebx,%ebx
+  8009d9:	0f 84 8e 03 00 00    	je     800d6d <vprintfmt+0x3a0>
+                return;
+            }
+            putch(ch, putdat);
+  8009df:	83 ec 08             	sub    $0x8,%esp
+  8009e2:	ff 75 0c             	pushl  0xc(%ebp)
+  8009e5:	53                   	push   %ebx
+  8009e6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009e9:	ff d0                	call   *%eax
+  8009eb:	83 c4 10             	add    $0x10,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009ee:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009f1:	8d 50 01             	lea    0x1(%eax),%edx
+  8009f4:	89 55 10             	mov    %edx,0x10(%ebp)
+  8009f7:	0f b6 00             	movzbl (%eax),%eax
+  8009fa:	0f b6 d8             	movzbl %al,%ebx
+  8009fd:	83 fb 25             	cmp    $0x25,%ebx
+  800a00:	75 d5                	jne    8009d7 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a02:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a06:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a10:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a13:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a1a:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a1d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a20:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a23:	8d 50 01             	lea    0x1(%eax),%edx
+  800a26:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a29:	0f b6 00             	movzbl (%eax),%eax
+  800a2c:	0f b6 d8             	movzbl %al,%ebx
+  800a2f:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a32:	83 f8 55             	cmp    $0x55,%eax
+  800a35:	0f 87 05 03 00 00    	ja     800d40 <vprintfmt+0x373>
+  800a3b:	8b 04 85 e8 10 80 00 	mov    0x8010e8(,%eax,4),%eax
+  800a42:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a44:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a48:	eb d6                	jmp    800a20 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a4a:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800a4e:	eb d0                	jmp    800a20 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a50:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800a57:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a5a:	89 d0                	mov    %edx,%eax
+  800a5c:	c1 e0 02             	shl    $0x2,%eax
+  800a5f:	01 d0                	add    %edx,%eax
+  800a61:	01 c0                	add    %eax,%eax
+  800a63:	01 d8                	add    %ebx,%eax
+  800a65:	83 e8 30             	sub    $0x30,%eax
+  800a68:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800a6b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a6e:	0f b6 00             	movzbl (%eax),%eax
+  800a71:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800a74:	83 fb 2f             	cmp    $0x2f,%ebx
+  800a77:	7e 39                	jle    800ab2 <vprintfmt+0xe5>
+  800a79:	83 fb 39             	cmp    $0x39,%ebx
+  800a7c:	7f 34                	jg     800ab2 <vprintfmt+0xe5>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a7e:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  800a82:	eb d3                	jmp    800a57 <vprintfmt+0x8a>
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800a84:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a87:	8d 50 04             	lea    0x4(%eax),%edx
+  800a8a:	89 55 14             	mov    %edx,0x14(%ebp)
+  800a8d:	8b 00                	mov    (%eax),%eax
+  800a8f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800a92:	eb 1f                	jmp    800ab3 <vprintfmt+0xe6>
+
+        case '.':
+            if (width < 0)
+  800a94:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800a98:	79 86                	jns    800a20 <vprintfmt+0x53>
+                width = 0;
+  800a9a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800aa1:	e9 7a ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800aa6:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800aad:	e9 6e ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+            goto process_precision;
+  800ab2:	90                   	nop
+        case '#':
+            altflag = 1;
+            goto reswitch;
+
+        process_precision:
+            if (width < 0)
+  800ab3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ab7:	0f 89 63 ff ff ff    	jns    800a20 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800abd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ac0:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800ac3:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800aca:	e9 51 ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800acf:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800ad3:	e9 48 ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800ad8:	8b 45 14             	mov    0x14(%ebp),%eax
+  800adb:	8d 50 04             	lea    0x4(%eax),%edx
+  800ade:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ae1:	8b 00                	mov    (%eax),%eax
+  800ae3:	83 ec 08             	sub    $0x8,%esp
+  800ae6:	ff 75 0c             	pushl  0xc(%ebp)
+  800ae9:	50                   	push   %eax
+  800aea:	8b 45 08             	mov    0x8(%ebp),%eax
+  800aed:	ff d0                	call   *%eax
+  800aef:	83 c4 10             	add    $0x10,%esp
+            break;
+  800af2:	e9 71 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800af7:	8b 45 14             	mov    0x14(%ebp),%eax
+  800afa:	8d 50 04             	lea    0x4(%eax),%edx
+  800afd:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b00:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b02:	85 db                	test   %ebx,%ebx
+  800b04:	79 02                	jns    800b08 <vprintfmt+0x13b>
+                err = -err;
+  800b06:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b08:	83 fb 18             	cmp    $0x18,%ebx
+  800b0b:	7f 0b                	jg     800b18 <vprintfmt+0x14b>
+  800b0d:	8b 34 9d 60 10 80 00 	mov    0x801060(,%ebx,4),%esi
+  800b14:	85 f6                	test   %esi,%esi
+  800b16:	75 19                	jne    800b31 <vprintfmt+0x164>
+                printfmt(putch, putdat, "error %d", err);
+  800b18:	53                   	push   %ebx
+  800b19:	68 d5 10 80 00       	push   $0x8010d5
+  800b1e:	ff 75 0c             	pushl  0xc(%ebp)
+  800b21:	ff 75 08             	pushl  0x8(%ebp)
+  800b24:	e8 80 fe ff ff       	call   8009a9 <printfmt>
+  800b29:	83 c4 10             	add    $0x10,%esp
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b2c:	e9 37 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  800b31:	56                   	push   %esi
+  800b32:	68 de 10 80 00       	push   $0x8010de
+  800b37:	ff 75 0c             	pushl  0xc(%ebp)
+  800b3a:	ff 75 08             	pushl  0x8(%ebp)
+  800b3d:	e8 67 fe ff ff       	call   8009a9 <printfmt>
+  800b42:	83 c4 10             	add    $0x10,%esp
+            }
+            break;
+  800b45:	e9 1e 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800b4a:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b4d:	8d 50 04             	lea    0x4(%eax),%edx
+  800b50:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b53:	8b 30                	mov    (%eax),%esi
+  800b55:	85 f6                	test   %esi,%esi
+  800b57:	75 05                	jne    800b5e <vprintfmt+0x191>
+                p = "(null)";
+  800b59:	be e1 10 80 00       	mov    $0x8010e1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800b5e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b62:	7e 76                	jle    800bda <vprintfmt+0x20d>
+  800b64:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800b68:	74 70                	je     800bda <vprintfmt+0x20d>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b6a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b6d:	83 ec 08             	sub    $0x8,%esp
+  800b70:	50                   	push   %eax
+  800b71:	56                   	push   %esi
+  800b72:	e8 17 f8 ff ff       	call   80038e <strnlen>
+  800b77:	83 c4 10             	add    $0x10,%esp
+  800b7a:	89 c2                	mov    %eax,%edx
+  800b7c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800b7f:	29 d0                	sub    %edx,%eax
+  800b81:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b84:	eb 17                	jmp    800b9d <vprintfmt+0x1d0>
+                    putch(padc, putdat);
+  800b86:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800b8a:	83 ec 08             	sub    $0x8,%esp
+  800b8d:	ff 75 0c             	pushl  0xc(%ebp)
+  800b90:	50                   	push   %eax
+  800b91:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b94:	ff d0                	call   *%eax
+  800b96:	83 c4 10             	add    $0x10,%esp
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b99:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800b9d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ba1:	7f e3                	jg     800b86 <vprintfmt+0x1b9>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800ba3:	eb 35                	jmp    800bda <vprintfmt+0x20d>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800ba5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800ba9:	74 1c                	je     800bc7 <vprintfmt+0x1fa>
+  800bab:	83 fb 1f             	cmp    $0x1f,%ebx
+  800bae:	7e 05                	jle    800bb5 <vprintfmt+0x1e8>
+  800bb0:	83 fb 7e             	cmp    $0x7e,%ebx
+  800bb3:	7e 12                	jle    800bc7 <vprintfmt+0x1fa>
+                    putch('?', putdat);
+  800bb5:	83 ec 08             	sub    $0x8,%esp
+  800bb8:	ff 75 0c             	pushl  0xc(%ebp)
+  800bbb:	6a 3f                	push   $0x3f
+  800bbd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bc0:	ff d0                	call   *%eax
+  800bc2:	83 c4 10             	add    $0x10,%esp
+  800bc5:	eb 0f                	jmp    800bd6 <vprintfmt+0x209>
+                }
+                else {
+                    putch(ch, putdat);
+  800bc7:	83 ec 08             	sub    $0x8,%esp
+  800bca:	ff 75 0c             	pushl  0xc(%ebp)
+  800bcd:	53                   	push   %ebx
+  800bce:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bd1:	ff d0                	call   *%eax
+  800bd3:	83 c4 10             	add    $0x10,%esp
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bd6:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800bda:	89 f0                	mov    %esi,%eax
+  800bdc:	8d 70 01             	lea    0x1(%eax),%esi
+  800bdf:	0f b6 00             	movzbl (%eax),%eax
+  800be2:	0f be d8             	movsbl %al,%ebx
+  800be5:	85 db                	test   %ebx,%ebx
+  800be7:	74 26                	je     800c0f <vprintfmt+0x242>
+  800be9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800bed:	78 b6                	js     800ba5 <vprintfmt+0x1d8>
+  800bef:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  800bf3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800bf7:	79 ac                	jns    800ba5 <vprintfmt+0x1d8>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800bf9:	eb 14                	jmp    800c0f <vprintfmt+0x242>
+                putch(' ', putdat);
+  800bfb:	83 ec 08             	sub    $0x8,%esp
+  800bfe:	ff 75 0c             	pushl  0xc(%ebp)
+  800c01:	6a 20                	push   $0x20
+  800c03:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c06:	ff d0                	call   *%eax
+  800c08:	83 c4 10             	add    $0x10,%esp
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c0b:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c0f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c13:	7f e6                	jg     800bfb <vprintfmt+0x22e>
+                putch(' ', putdat);
+            }
+            break;
+  800c15:	e9 4e 01 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c1a:	83 ec 08             	sub    $0x8,%esp
+  800c1d:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c20:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c23:	50                   	push   %eax
+  800c24:	e8 39 fd ff ff       	call   800962 <getint>
+  800c29:	83 c4 10             	add    $0x10,%esp
+  800c2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c2f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c32:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c35:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c38:	85 d2                	test   %edx,%edx
+  800c3a:	79 23                	jns    800c5f <vprintfmt+0x292>
+                putch('-', putdat);
+  800c3c:	83 ec 08             	sub    $0x8,%esp
+  800c3f:	ff 75 0c             	pushl  0xc(%ebp)
+  800c42:	6a 2d                	push   $0x2d
+  800c44:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c47:	ff d0                	call   *%eax
+  800c49:	83 c4 10             	add    $0x10,%esp
+                num = -(long long)num;
+  800c4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c4f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c52:	f7 d8                	neg    %eax
+  800c54:	83 d2 00             	adc    $0x0,%edx
+  800c57:	f7 da                	neg    %edx
+  800c59:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c5c:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800c5f:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c66:	e9 9f 00 00 00       	jmp    800d0a <vprintfmt+0x33d>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800c6b:	83 ec 08             	sub    $0x8,%esp
+  800c6e:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c71:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c74:	50                   	push   %eax
+  800c75:	e8 99 fc ff ff       	call   800913 <getuint>
+  800c7a:	83 c4 10             	add    $0x10,%esp
+  800c7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c80:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800c83:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c8a:	eb 7e                	jmp    800d0a <vprintfmt+0x33d>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800c8c:	83 ec 08             	sub    $0x8,%esp
+  800c8f:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c92:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c95:	50                   	push   %eax
+  800c96:	e8 78 fc ff ff       	call   800913 <getuint>
+  800c9b:	83 c4 10             	add    $0x10,%esp
+  800c9e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ca1:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800ca4:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800cab:	eb 5d                	jmp    800d0a <vprintfmt+0x33d>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800cad:	83 ec 08             	sub    $0x8,%esp
+  800cb0:	ff 75 0c             	pushl  0xc(%ebp)
+  800cb3:	6a 30                	push   $0x30
+  800cb5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb8:	ff d0                	call   *%eax
+  800cba:	83 c4 10             	add    $0x10,%esp
+            putch('x', putdat);
+  800cbd:	83 ec 08             	sub    $0x8,%esp
+  800cc0:	ff 75 0c             	pushl  0xc(%ebp)
+  800cc3:	6a 78                	push   $0x78
+  800cc5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cc8:	ff d0                	call   *%eax
+  800cca:	83 c4 10             	add    $0x10,%esp
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800ccd:	8b 45 14             	mov    0x14(%ebp),%eax
+  800cd0:	8d 50 04             	lea    0x4(%eax),%edx
+  800cd3:	89 55 14             	mov    %edx,0x14(%ebp)
+  800cd6:	8b 00                	mov    (%eax),%eax
+  800cd8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cdb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800ce2:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800ce9:	eb 1f                	jmp    800d0a <vprintfmt+0x33d>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800ceb:	83 ec 08             	sub    $0x8,%esp
+  800cee:	ff 75 e0             	pushl  -0x20(%ebp)
+  800cf1:	8d 45 14             	lea    0x14(%ebp),%eax
+  800cf4:	50                   	push   %eax
+  800cf5:	e8 19 fc ff ff       	call   800913 <getuint>
+  800cfa:	83 c4 10             	add    $0x10,%esp
+  800cfd:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d00:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d03:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d0a:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d11:	83 ec 04             	sub    $0x4,%esp
+  800d14:	52                   	push   %edx
+  800d15:	ff 75 e8             	pushl  -0x18(%ebp)
+  800d18:	50                   	push   %eax
+  800d19:	ff 75 f4             	pushl  -0xc(%ebp)
+  800d1c:	ff 75 f0             	pushl  -0x10(%ebp)
+  800d1f:	ff 75 0c             	pushl  0xc(%ebp)
+  800d22:	ff 75 08             	pushl  0x8(%ebp)
+  800d25:	e8 f8 fa ff ff       	call   800822 <printnum>
+  800d2a:	83 c4 20             	add    $0x20,%esp
+            break;
+  800d2d:	eb 39                	jmp    800d68 <vprintfmt+0x39b>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800d2f:	83 ec 08             	sub    $0x8,%esp
+  800d32:	ff 75 0c             	pushl  0xc(%ebp)
+  800d35:	53                   	push   %ebx
+  800d36:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d39:	ff d0                	call   *%eax
+  800d3b:	83 c4 10             	add    $0x10,%esp
+            break;
+  800d3e:	eb 28                	jmp    800d68 <vprintfmt+0x39b>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800d40:	83 ec 08             	sub    $0x8,%esp
+  800d43:	ff 75 0c             	pushl  0xc(%ebp)
+  800d46:	6a 25                	push   $0x25
+  800d48:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d4b:	ff d0                	call   *%eax
+  800d4d:	83 c4 10             	add    $0x10,%esp
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800d50:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d54:	eb 04                	jmp    800d5a <vprintfmt+0x38d>
+  800d56:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d5a:	8b 45 10             	mov    0x10(%ebp),%eax
+  800d5d:	83 e8 01             	sub    $0x1,%eax
+  800d60:	0f b6 00             	movzbl (%eax),%eax
+  800d63:	3c 25                	cmp    $0x25,%al
+  800d65:	75 ef                	jne    800d56 <vprintfmt+0x389>
+                /* do nothing */;
+            break;
+  800d67:	90                   	nop
+        }
+    }
+  800d68:	e9 68 fc ff ff       	jmp    8009d5 <vprintfmt+0x8>
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+            if (ch == '\0') {
+                return;
+  800d6d:	90                   	nop
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  800d6e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  800d71:	5b                   	pop    %ebx
+  800d72:	5e                   	pop    %esi
+  800d73:	5d                   	pop    %ebp
+  800d74:	c3                   	ret    
+
+00800d75 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800d75:	55                   	push   %ebp
+  800d76:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800d78:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d7b:	8b 40 08             	mov    0x8(%eax),%eax
+  800d7e:	8d 50 01             	lea    0x1(%eax),%edx
+  800d81:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d84:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800d87:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d8a:	8b 10                	mov    (%eax),%edx
+  800d8c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d8f:	8b 40 04             	mov    0x4(%eax),%eax
+  800d92:	39 c2                	cmp    %eax,%edx
+  800d94:	73 12                	jae    800da8 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800d96:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d99:	8b 00                	mov    (%eax),%eax
+  800d9b:	8d 48 01             	lea    0x1(%eax),%ecx
+  800d9e:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800da1:	89 0a                	mov    %ecx,(%edx)
+  800da3:	8b 55 08             	mov    0x8(%ebp),%edx
+  800da6:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800da8:	90                   	nop
+  800da9:	5d                   	pop    %ebp
+  800daa:	c3                   	ret    
+
+00800dab <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800dab:	55                   	push   %ebp
+  800dac:	89 e5                	mov    %esp,%ebp
+  800dae:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800db1:	8d 45 14             	lea    0x14(%ebp),%eax
+  800db4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800db7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800dba:	50                   	push   %eax
+  800dbb:	ff 75 10             	pushl  0x10(%ebp)
+  800dbe:	ff 75 0c             	pushl  0xc(%ebp)
+  800dc1:	ff 75 08             	pushl  0x8(%ebp)
+  800dc4:	e8 0b 00 00 00       	call   800dd4 <vsnprintf>
+  800dc9:	83 c4 10             	add    $0x10,%esp
+  800dcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800dcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800dd2:	c9                   	leave  
+  800dd3:	c3                   	ret    
+
+00800dd4 <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800dd4:	55                   	push   %ebp
+  800dd5:	89 e5                	mov    %esp,%ebp
+  800dd7:	83 ec 18             	sub    $0x18,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800dda:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ddd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800de0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800de3:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800de6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de9:	01 d0                	add    %edx,%eax
+  800deb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800dee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800df5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800df9:	74 0a                	je     800e05 <vsnprintf+0x31>
+  800dfb:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800dfe:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e01:	39 c2                	cmp    %eax,%edx
+  800e03:	76 07                	jbe    800e0c <vsnprintf+0x38>
+        return -E_INVAL;
+  800e05:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e0a:	eb 20                	jmp    800e2c <vsnprintf+0x58>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e0c:	ff 75 14             	pushl  0x14(%ebp)
+  800e0f:	ff 75 10             	pushl  0x10(%ebp)
+  800e12:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800e15:	50                   	push   %eax
+  800e16:	68 75 0d 80 00       	push   $0x800d75
+  800e1b:	e8 ad fb ff ff       	call   8009cd <vprintfmt>
+  800e20:	83 c4 10             	add    $0x10,%esp
+    // null terminate the buffer
+    *b.buf = '\0';
+  800e23:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e26:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800e29:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e2c:	c9                   	leave  
+  800e2d:	c3                   	ret    
+
+00800e2e <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800e2e:	55                   	push   %ebp
+  800e2f:	89 e5                	mov    %esp,%ebp
+  800e31:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800e34:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e37:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800e3d:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800e40:	b8 20 00 00 00       	mov    $0x20,%eax
+  800e45:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800e48:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800e4b:	89 c1                	mov    %eax,%ecx
+  800e4d:	d3 ea                	shr    %cl,%edx
+  800e4f:	89 d0                	mov    %edx,%eax
+}
+  800e51:	c9                   	leave  
+  800e52:	c3                   	ret    
+
+00800e53 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800e53:	55                   	push   %ebp
+  800e54:	89 e5                	mov    %esp,%ebp
+  800e56:	57                   	push   %edi
+  800e57:	56                   	push   %esi
+  800e58:	53                   	push   %ebx
+  800e59:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800e5c:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e61:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800e67:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800e6d:	6b f0 05             	imul   $0x5,%eax,%esi
+  800e70:	01 fe                	add    %edi,%esi
+  800e72:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800e77:	f7 e7                	mul    %edi
+  800e79:	01 d6                	add    %edx,%esi
+  800e7b:	89 f2                	mov    %esi,%edx
+  800e7d:	83 c0 0b             	add    $0xb,%eax
+  800e80:	83 d2 00             	adc    $0x0,%edx
+  800e83:	89 c7                	mov    %eax,%edi
+  800e85:	83 e7 ff             	and    $0xffffffff,%edi
+  800e88:	89 f9                	mov    %edi,%ecx
+  800e8a:	0f b7 da             	movzwl %dx,%ebx
+  800e8d:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800e93:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800e99:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e9e:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ea4:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ea8:	c1 ea 0c             	shr    $0xc,%edx
+  800eab:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800eae:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800eb1:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800eb8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ebb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ebe:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ec1:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800ec4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec7:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800eca:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ece:	74 1c                	je     800eec <rand+0x99>
+  800ed0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ed3:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ed8:	f7 75 dc             	divl   -0x24(%ebp)
+  800edb:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800ede:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ee1:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ee6:	f7 75 dc             	divl   -0x24(%ebp)
+  800ee9:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800eec:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800eef:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800ef2:	f7 75 dc             	divl   -0x24(%ebp)
+  800ef5:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ef8:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800efb:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800efe:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800f01:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f04:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f07:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800f0a:	83 c4 24             	add    $0x24,%esp
+  800f0d:	5b                   	pop    %ebx
+  800f0e:	5e                   	pop    %esi
+  800f0f:	5f                   	pop    %edi
+  800f10:	5d                   	pop    %ebp
+  800f11:	c3                   	ret    
+
+00800f12 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800f12:	55                   	push   %ebp
+  800f13:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800f15:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f18:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f1d:	a3 00 20 80 00       	mov    %eax,0x802000
+  800f22:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800f28:	90                   	nop
+  800f29:	5d                   	pop    %ebp
+  800f2a:	c3                   	ret    
+
+00800f2b <main>:
+#include <ulib.h>
+
+/* try to load the kernel's TSS selector into the DS register */
+
+int
+main(void) {
+  800f2b:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  800f2f:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f32:	ff 71 fc             	pushl  -0x4(%ecx)
+  800f35:	55                   	push   %ebp
+  800f36:	89 e5                	mov    %esp,%ebp
+  800f38:	51                   	push   %ecx
+  800f39:	83 ec 04             	sub    $0x4,%esp
+    asm volatile("movw $0x28,%ax; movw %ax,%ds");
+  800f3c:	66 b8 28 00          	mov    $0x28,%ax
+  800f40:	8e d8                	mov    %eax,%ds
+    panic("FAIL: T.T\n");
+  800f42:	83 ec 04             	sub    $0x4,%esp
+  800f45:	68 40 12 80 00       	push   $0x801240
+  800f4a:	6a 09                	push   $0x9
+  800f4c:	68 4b 12 80 00       	push   $0x80124b
+  800f51:	e8 ca f0 ff ff       	call   800020 <__panic>
diff -r -u -P lab6_original/obj/user/badsegment.d lab6/obj/user/badsegment.d
--- lab6_original/obj/user/badsegment.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/badsegment.d	2016-04-29 16:22:06.848533461 +0800
@@ -0,0 +1,2 @@
+obj/user/badsegment.o obj/user/badsegment.d: user/badsegment.c \
+ libs/stdio.h libs/defs.h libs/stdarg.h user/libs/ulib.h
Binary files lab6_original/obj/user/badsegment.o and lab6/obj/user/badsegment.o differ
diff -r -u -P lab6_original/obj/user/badsegment.sym lab6/obj/user/badsegment.sym
--- lab6_original/obj/user/badsegment.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/badsegment.sym	2016-04-29 16:22:07.756617203 +0800
@@ -0,0 +1,76 @@
+00800020 .text
+00800f60 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202c8d .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b5 syscall
+00000000 ulib.c
+00000000 stdio.c
+0080028c cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+00801060 error_string
+00800822 printnum
+00800913 getuint
+00800962 getint
+00800d75 sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 badsegment.c
+008003be strcpy
+0080021a yield
+00800201 waitpid
+00800141 sys_yield
+008006d7 memmove
+00800dab snprintf
+008009cd vprintfmt
+0080011d sys_fork
+008002d9 cprintf
+0080023e getpid
+0080077a memcpy
+00800266 lab6_set_priority
+00800dd4 vsnprintf
+0080034d umain
+00202c8c __STAB_END__
+00800150 sys_kill
+00202c8d __STABSTR_BEGIN__
+00800020 __panic
+0080053a strtol
+0080038e strnlen
+0080024b print_pgdir
+00800228 kill
+0080050b strfind
+008001ea wait
+0080027d _start
+00800e53 rand
+00800482 strncmp
+00800171 sys_putc
+008003fe strncpy
+008007ca memcmp
+008001dd fork
+00800697 memset
+00800f2b main
+00800f12 srand
+00800e2e hash32
+008009a9 printfmt
+00203a70 __STABSTR_END__
+00800438 strcmp
+00800259 gettime_msec
+00800192 sys_gettime
+008002b0 vcprintf
+0080006e __warn
+008002ff cputs
+008001a1 sys_lab6_set_priority
+008001b7 exit
+0080012c sys_wait
+0080010b sys_exit
+00200010 __STAB_BEGIN__
+00800366 strlen
+00800183 sys_pgdir
+008004d8 strchr
+00800162 sys_getpid
diff -r -u -P lab6_original/obj/user/divzero.asm lab6/obj/user/divzero.asm
--- lab6_original/obj/user/divzero.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/divzero.asm	2016-04-29 16:22:07.724754848 +0800
@@ -0,0 +1,2587 @@
+
+obj/__user_divzero.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 18             	sub    $0x18,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	83 ec 04             	sub    $0x4,%esp
+  80002f:	ff 75 0c             	pushl  0xc(%ebp)
+  800032:	ff 75 08             	pushl  0x8(%ebp)
+  800035:	68 80 0f 80 00       	push   $0x800f80
+  80003a:	e8 9a 02 00 00       	call   8002d9 <cprintf>
+  80003f:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800042:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800045:	83 ec 08             	sub    $0x8,%esp
+  800048:	50                   	push   %eax
+  800049:	ff 75 10             	pushl  0x10(%ebp)
+  80004c:	e8 5f 02 00 00       	call   8002b0 <vcprintf>
+  800051:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  800054:	83 ec 0c             	sub    $0xc,%esp
+  800057:	68 9a 0f 80 00       	push   $0x800f9a
+  80005c:	e8 78 02 00 00       	call   8002d9 <cprintf>
+  800061:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	83 ec 0c             	sub    $0xc,%esp
+  800067:	6a f6                	push   $0xfffffff6
+  800069:	e8 49 01 00 00       	call   8001b7 <exit>
+
+0080006e <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80006e:	55                   	push   %ebp
+  80006f:	89 e5                	mov    %esp,%ebp
+  800071:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800074:	8d 45 14             	lea    0x14(%ebp),%eax
+  800077:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007a:	83 ec 04             	sub    $0x4,%esp
+  80007d:	ff 75 0c             	pushl  0xc(%ebp)
+  800080:	ff 75 08             	pushl  0x8(%ebp)
+  800083:	68 9c 0f 80 00       	push   $0x800f9c
+  800088:	e8 4c 02 00 00       	call   8002d9 <cprintf>
+  80008d:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800090:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800093:	83 ec 08             	sub    $0x8,%esp
+  800096:	50                   	push   %eax
+  800097:	ff 75 10             	pushl  0x10(%ebp)
+  80009a:	e8 11 02 00 00       	call   8002b0 <vcprintf>
+  80009f:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  8000a2:	83 ec 0c             	sub    $0xc,%esp
+  8000a5:	68 9a 0f 80 00       	push   $0x800f9a
+  8000aa:	e8 2a 02 00 00       	call   8002d9 <cprintf>
+  8000af:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8000b2:	90                   	nop
+  8000b3:	c9                   	leave  
+  8000b4:	c3                   	ret    
+
+008000b5 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b5:	55                   	push   %ebp
+  8000b6:	89 e5                	mov    %esp,%ebp
+  8000b8:	57                   	push   %edi
+  8000b9:	56                   	push   %esi
+  8000ba:	53                   	push   %ebx
+  8000bb:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000be:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cb:	eb 16                	jmp    8000e3 <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8000cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d0:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d3:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d6:	8b 10                	mov    (%eax),%edx
+  8000d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000db:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000df:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8000e3:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e7:	7e e4                	jle    8000cd <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000e9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ec:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000ef:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f2:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f5:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8000f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fb:	cd 80                	int    $0x80
+  8000fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  800100:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800103:	83 c4 20             	add    $0x20,%esp
+  800106:	5b                   	pop    %ebx
+  800107:	5e                   	pop    %esi
+  800108:	5f                   	pop    %edi
+  800109:	5d                   	pop    %ebp
+  80010a:	c3                   	ret    
+
+0080010b <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010b:	55                   	push   %ebp
+  80010c:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_exit, error_code);
+  80010e:	ff 75 08             	pushl  0x8(%ebp)
+  800111:	6a 01                	push   $0x1
+  800113:	e8 9d ff ff ff       	call   8000b5 <syscall>
+  800118:	83 c4 08             	add    $0x8,%esp
+}
+  80011b:	c9                   	leave  
+  80011c:	c3                   	ret    
+
+0080011d <sys_fork>:
+
+int
+sys_fork(void) {
+  80011d:	55                   	push   %ebp
+  80011e:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_fork);
+  800120:	6a 02                	push   $0x2
+  800122:	e8 8e ff ff ff       	call   8000b5 <syscall>
+  800127:	83 c4 04             	add    $0x4,%esp
+}
+  80012a:	c9                   	leave  
+  80012b:	c3                   	ret    
+
+0080012c <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80012c:	55                   	push   %ebp
+  80012d:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_wait, pid, store);
+  80012f:	ff 75 0c             	pushl  0xc(%ebp)
+  800132:	ff 75 08             	pushl  0x8(%ebp)
+  800135:	6a 03                	push   $0x3
+  800137:	e8 79 ff ff ff       	call   8000b5 <syscall>
+  80013c:	83 c4 0c             	add    $0xc,%esp
+}
+  80013f:	c9                   	leave  
+  800140:	c3                   	ret    
+
+00800141 <sys_yield>:
+
+int
+sys_yield(void) {
+  800141:	55                   	push   %ebp
+  800142:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_yield);
+  800144:	6a 0a                	push   $0xa
+  800146:	e8 6a ff ff ff       	call   8000b5 <syscall>
+  80014b:	83 c4 04             	add    $0x4,%esp
+}
+  80014e:	c9                   	leave  
+  80014f:	c3                   	ret    
+
+00800150 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800150:	55                   	push   %ebp
+  800151:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_kill, pid);
+  800153:	ff 75 08             	pushl  0x8(%ebp)
+  800156:	6a 0c                	push   $0xc
+  800158:	e8 58 ff ff ff       	call   8000b5 <syscall>
+  80015d:	83 c4 08             	add    $0x8,%esp
+}
+  800160:	c9                   	leave  
+  800161:	c3                   	ret    
+
+00800162 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800162:	55                   	push   %ebp
+  800163:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_getpid);
+  800165:	6a 12                	push   $0x12
+  800167:	e8 49 ff ff ff       	call   8000b5 <syscall>
+  80016c:	83 c4 04             	add    $0x4,%esp
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_putc, c);
+  800174:	ff 75 08             	pushl  0x8(%ebp)
+  800177:	6a 1e                	push   $0x1e
+  800179:	e8 37 ff ff ff       	call   8000b5 <syscall>
+  80017e:	83 c4 08             	add    $0x8,%esp
+}
+  800181:	c9                   	leave  
+  800182:	c3                   	ret    
+
+00800183 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800183:	55                   	push   %ebp
+  800184:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_pgdir);
+  800186:	6a 1f                	push   $0x1f
+  800188:	e8 28 ff ff ff       	call   8000b5 <syscall>
+  80018d:	83 c4 04             	add    $0x4,%esp
+}
+  800190:	c9                   	leave  
+  800191:	c3                   	ret    
+
+00800192 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  800192:	55                   	push   %ebp
+  800193:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_gettime);
+  800195:	6a 11                	push   $0x11
+  800197:	e8 19 ff ff ff       	call   8000b5 <syscall>
+  80019c:	83 c4 04             	add    $0x4,%esp
+}
+  80019f:	c9                   	leave  
+  8001a0:	c3                   	ret    
+
+008001a1 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001a1:	55                   	push   %ebp
+  8001a2:	89 e5                	mov    %esp,%ebp
+    syscall(SYS_lab6_set_priority, priority);
+  8001a4:	ff 75 08             	pushl  0x8(%ebp)
+  8001a7:	68 ff 00 00 00       	push   $0xff
+  8001ac:	e8 04 ff ff ff       	call   8000b5 <syscall>
+  8001b1:	83 c4 08             	add    $0x8,%esp
+}
+  8001b4:	90                   	nop
+  8001b5:	c9                   	leave  
+  8001b6:	c3                   	ret    
+
+008001b7 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001b7:	55                   	push   %ebp
+  8001b8:	89 e5                	mov    %esp,%ebp
+  8001ba:	83 ec 08             	sub    $0x8,%esp
+    sys_exit(error_code);
+  8001bd:	83 ec 0c             	sub    $0xc,%esp
+  8001c0:	ff 75 08             	pushl  0x8(%ebp)
+  8001c3:	e8 43 ff ff ff       	call   80010b <sys_exit>
+  8001c8:	83 c4 10             	add    $0x10,%esp
+    cprintf("BUG: exit failed.\n");
+  8001cb:	83 ec 0c             	sub    $0xc,%esp
+  8001ce:	68 b8 0f 80 00       	push   $0x800fb8
+  8001d3:	e8 01 01 00 00       	call   8002d9 <cprintf>
+  8001d8:	83 c4 10             	add    $0x10,%esp
+    while (1);
+  8001db:	eb fe                	jmp    8001db <exit+0x24>
+
+008001dd <fork>:
+}
+
+int
+fork(void) {
+  8001dd:	55                   	push   %ebp
+  8001de:	89 e5                	mov    %esp,%ebp
+  8001e0:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8001e3:	e8 35 ff ff ff       	call   80011d <sys_fork>
+}
+  8001e8:	c9                   	leave  
+  8001e9:	c3                   	ret    
+
+008001ea <wait>:
+
+int
+wait(void) {
+  8001ea:	55                   	push   %ebp
+  8001eb:	89 e5                	mov    %esp,%ebp
+  8001ed:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(0, NULL);
+  8001f0:	83 ec 08             	sub    $0x8,%esp
+  8001f3:	6a 00                	push   $0x0
+  8001f5:	6a 00                	push   $0x0
+  8001f7:	e8 30 ff ff ff       	call   80012c <sys_wait>
+  8001fc:	83 c4 10             	add    $0x10,%esp
+}
+  8001ff:	c9                   	leave  
+  800200:	c3                   	ret    
+
+00800201 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800201:	55                   	push   %ebp
+  800202:	89 e5                	mov    %esp,%ebp
+  800204:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(pid, store);
+  800207:	83 ec 08             	sub    $0x8,%esp
+  80020a:	ff 75 0c             	pushl  0xc(%ebp)
+  80020d:	ff 75 08             	pushl  0x8(%ebp)
+  800210:	e8 17 ff ff ff       	call   80012c <sys_wait>
+  800215:	83 c4 10             	add    $0x10,%esp
+}
+  800218:	c9                   	leave  
+  800219:	c3                   	ret    
+
+0080021a <yield>:
+
+void
+yield(void) {
+  80021a:	55                   	push   %ebp
+  80021b:	89 e5                	mov    %esp,%ebp
+  80021d:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800220:	e8 1c ff ff ff       	call   800141 <sys_yield>
+}
+  800225:	90                   	nop
+  800226:	c9                   	leave  
+  800227:	c3                   	ret    
+
+00800228 <kill>:
+
+int
+kill(int pid) {
+  800228:	55                   	push   %ebp
+  800229:	89 e5                	mov    %esp,%ebp
+  80022b:	83 ec 08             	sub    $0x8,%esp
+    return sys_kill(pid);
+  80022e:	83 ec 0c             	sub    $0xc,%esp
+  800231:	ff 75 08             	pushl  0x8(%ebp)
+  800234:	e8 17 ff ff ff       	call   800150 <sys_kill>
+  800239:	83 c4 10             	add    $0x10,%esp
+}
+  80023c:	c9                   	leave  
+  80023d:	c3                   	ret    
+
+0080023e <getpid>:
+
+int
+getpid(void) {
+  80023e:	55                   	push   %ebp
+  80023f:	89 e5                	mov    %esp,%ebp
+  800241:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800244:	e8 19 ff ff ff       	call   800162 <sys_getpid>
+}
+  800249:	c9                   	leave  
+  80024a:	c3                   	ret    
+
+0080024b <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80024b:	55                   	push   %ebp
+  80024c:	89 e5                	mov    %esp,%ebp
+  80024e:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800251:	e8 2d ff ff ff       	call   800183 <sys_pgdir>
+}
+  800256:	90                   	nop
+  800257:	c9                   	leave  
+  800258:	c3                   	ret    
+
+00800259 <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  800259:	55                   	push   %ebp
+  80025a:	89 e5                	mov    %esp,%ebp
+  80025c:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  80025f:	e8 2e ff ff ff       	call   800192 <sys_gettime>
+}
+  800264:	c9                   	leave  
+  800265:	c3                   	ret    
+
+00800266 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800266:	55                   	push   %ebp
+  800267:	89 e5                	mov    %esp,%ebp
+  800269:	83 ec 08             	sub    $0x8,%esp
+    sys_lab6_set_priority(priority);
+  80026c:	83 ec 0c             	sub    $0xc,%esp
+  80026f:	ff 75 08             	pushl  0x8(%ebp)
+  800272:	e8 2a ff ff ff       	call   8001a1 <sys_lab6_set_priority>
+  800277:	83 c4 10             	add    $0x10,%esp
+}
+  80027a:	90                   	nop
+  80027b:	c9                   	leave  
+  80027c:	c3                   	ret    
+
+0080027d <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  80027d:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800282:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800285:	e8 c3 00 00 00       	call   80034d <umain>
+1:  jmp 1b
+  80028a:	eb fe                	jmp    80028a <_start+0xd>
+
+0080028c <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  80028c:	55                   	push   %ebp
+  80028d:	89 e5                	mov    %esp,%ebp
+  80028f:	83 ec 08             	sub    $0x8,%esp
+    sys_putc(c);
+  800292:	83 ec 0c             	sub    $0xc,%esp
+  800295:	ff 75 08             	pushl  0x8(%ebp)
+  800298:	e8 d4 fe ff ff       	call   800171 <sys_putc>
+  80029d:	83 c4 10             	add    $0x10,%esp
+    (*cnt) ++;
+  8002a0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002a3:	8b 00                	mov    (%eax),%eax
+  8002a5:	8d 50 01             	lea    0x1(%eax),%edx
+  8002a8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002ab:	89 10                	mov    %edx,(%eax)
+}
+  8002ad:	90                   	nop
+  8002ae:	c9                   	leave  
+  8002af:	c3                   	ret    
+
+008002b0 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002b0:	55                   	push   %ebp
+  8002b1:	89 e5                	mov    %esp,%ebp
+  8002b3:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  8002b6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002bd:	ff 75 0c             	pushl  0xc(%ebp)
+  8002c0:	ff 75 08             	pushl  0x8(%ebp)
+  8002c3:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  8002c6:	50                   	push   %eax
+  8002c7:	68 8c 02 80 00       	push   $0x80028c
+  8002cc:	e8 fc 06 00 00       	call   8009cd <vprintfmt>
+  8002d1:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  8002d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002d7:	c9                   	leave  
+  8002d8:	c3                   	ret    
+
+008002d9 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  8002d9:	55                   	push   %ebp
+  8002da:	89 e5                	mov    %esp,%ebp
+  8002dc:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8002df:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8002e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  8002e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8002e8:	83 ec 08             	sub    $0x8,%esp
+  8002eb:	50                   	push   %eax
+  8002ec:	ff 75 08             	pushl  0x8(%ebp)
+  8002ef:	e8 bc ff ff ff       	call   8002b0 <vcprintf>
+  8002f4:	83 c4 10             	add    $0x10,%esp
+  8002f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  8002fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002fd:	c9                   	leave  
+  8002fe:	c3                   	ret    
+
+008002ff <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  8002ff:	55                   	push   %ebp
+  800300:	89 e5                	mov    %esp,%ebp
+  800302:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  800305:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80030c:	eb 14                	jmp    800322 <cputs+0x23>
+        cputch(c, &cnt);
+  80030e:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800312:	83 ec 08             	sub    $0x8,%esp
+  800315:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800318:	52                   	push   %edx
+  800319:	50                   	push   %eax
+  80031a:	e8 6d ff ff ff       	call   80028c <cputch>
+  80031f:	83 c4 10             	add    $0x10,%esp
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800322:	8b 45 08             	mov    0x8(%ebp),%eax
+  800325:	8d 50 01             	lea    0x1(%eax),%edx
+  800328:	89 55 08             	mov    %edx,0x8(%ebp)
+  80032b:	0f b6 00             	movzbl (%eax),%eax
+  80032e:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800331:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800335:	75 d7                	jne    80030e <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800337:	83 ec 08             	sub    $0x8,%esp
+  80033a:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  80033d:	50                   	push   %eax
+  80033e:	6a 0a                	push   $0xa
+  800340:	e8 47 ff ff ff       	call   80028c <cputch>
+  800345:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  800348:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80034b:	c9                   	leave  
+  80034c:	c3                   	ret    
+
+0080034d <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  80034d:	55                   	push   %ebp
+  80034e:	89 e5                	mov    %esp,%ebp
+  800350:	83 ec 18             	sub    $0x18,%esp
+    int ret = main();
+  800353:	e8 d3 0b 00 00       	call   800f2b <main>
+  800358:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  80035b:	83 ec 0c             	sub    $0xc,%esp
+  80035e:	ff 75 f4             	pushl  -0xc(%ebp)
+  800361:	e8 51 fe ff ff       	call   8001b7 <exit>
+
+00800366 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800366:	55                   	push   %ebp
+  800367:	89 e5                	mov    %esp,%ebp
+  800369:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  80036c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800373:	eb 04                	jmp    800379 <strlen+0x13>
+        cnt ++;
+  800375:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800379:	8b 45 08             	mov    0x8(%ebp),%eax
+  80037c:	8d 50 01             	lea    0x1(%eax),%edx
+  80037f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800382:	0f b6 00             	movzbl (%eax),%eax
+  800385:	84 c0                	test   %al,%al
+  800387:	75 ec                	jne    800375 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800389:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  80038c:	c9                   	leave  
+  80038d:	c3                   	ret    
+
+0080038e <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  80038e:	55                   	push   %ebp
+  80038f:	89 e5                	mov    %esp,%ebp
+  800391:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800394:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  80039b:	eb 04                	jmp    8003a1 <strnlen+0x13>
+        cnt ++;
+  80039d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  8003a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003a4:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003a7:	73 10                	jae    8003b9 <strnlen+0x2b>
+  8003a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003ac:	8d 50 01             	lea    0x1(%eax),%edx
+  8003af:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003b2:	0f b6 00             	movzbl (%eax),%eax
+  8003b5:	84 c0                	test   %al,%al
+  8003b7:	75 e4                	jne    80039d <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003b9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003bc:	c9                   	leave  
+  8003bd:	c3                   	ret    
+
+008003be <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  8003be:	55                   	push   %ebp
+  8003bf:	89 e5                	mov    %esp,%ebp
+  8003c1:	57                   	push   %edi
+  8003c2:	56                   	push   %esi
+  8003c3:	83 ec 20             	sub    $0x20,%esp
+  8003c6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003cc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8003cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  8003d2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003d8:	89 d1                	mov    %edx,%ecx
+  8003da:	89 c2                	mov    %eax,%edx
+  8003dc:	89 ce                	mov    %ecx,%esi
+  8003de:	89 d7                	mov    %edx,%edi
+  8003e0:	ac                   	lods   %ds:(%esi),%al
+  8003e1:	aa                   	stos   %al,%es:(%edi)
+  8003e2:	84 c0                	test   %al,%al
+  8003e4:	75 fa                	jne    8003e0 <strcpy+0x22>
+  8003e6:	89 fa                	mov    %edi,%edx
+  8003e8:	89 f1                	mov    %esi,%ecx
+  8003ea:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8003ed:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8003f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  8003f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  8003f6:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  8003f7:	83 c4 20             	add    $0x20,%esp
+  8003fa:	5e                   	pop    %esi
+  8003fb:	5f                   	pop    %edi
+  8003fc:	5d                   	pop    %ebp
+  8003fd:	c3                   	ret    
+
+008003fe <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  8003fe:	55                   	push   %ebp
+  8003ff:	89 e5                	mov    %esp,%ebp
+  800401:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800404:	8b 45 08             	mov    0x8(%ebp),%eax
+  800407:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  80040a:	eb 21                	jmp    80042d <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  80040c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80040f:	0f b6 10             	movzbl (%eax),%edx
+  800412:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800415:	88 10                	mov    %dl,(%eax)
+  800417:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80041a:	0f b6 00             	movzbl (%eax),%eax
+  80041d:	84 c0                	test   %al,%al
+  80041f:	74 04                	je     800425 <strncpy+0x27>
+            src ++;
+  800421:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800425:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800429:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  80042d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800431:	75 d9                	jne    80040c <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800433:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800436:	c9                   	leave  
+  800437:	c3                   	ret    
+
+00800438 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800438:	55                   	push   %ebp
+  800439:	89 e5                	mov    %esp,%ebp
+  80043b:	57                   	push   %edi
+  80043c:	56                   	push   %esi
+  80043d:	83 ec 20             	sub    $0x20,%esp
+  800440:	8b 45 08             	mov    0x8(%ebp),%eax
+  800443:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800446:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800449:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  80044c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80044f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800452:	89 d1                	mov    %edx,%ecx
+  800454:	89 c2                	mov    %eax,%edx
+  800456:	89 ce                	mov    %ecx,%esi
+  800458:	89 d7                	mov    %edx,%edi
+  80045a:	ac                   	lods   %ds:(%esi),%al
+  80045b:	ae                   	scas   %es:(%edi),%al
+  80045c:	75 08                	jne    800466 <strcmp+0x2e>
+  80045e:	84 c0                	test   %al,%al
+  800460:	75 f8                	jne    80045a <strcmp+0x22>
+  800462:	31 c0                	xor    %eax,%eax
+  800464:	eb 04                	jmp    80046a <strcmp+0x32>
+  800466:	19 c0                	sbb    %eax,%eax
+  800468:	0c 01                	or     $0x1,%al
+  80046a:	89 fa                	mov    %edi,%edx
+  80046c:	89 f1                	mov    %esi,%ecx
+  80046e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800471:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800474:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800477:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  80047a:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  80047b:	83 c4 20             	add    $0x20,%esp
+  80047e:	5e                   	pop    %esi
+  80047f:	5f                   	pop    %edi
+  800480:	5d                   	pop    %ebp
+  800481:	c3                   	ret    
+
+00800482 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800482:	55                   	push   %ebp
+  800483:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800485:	eb 0c                	jmp    800493 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800487:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  80048b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  80048f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800493:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800497:	74 1a                	je     8004b3 <strncmp+0x31>
+  800499:	8b 45 08             	mov    0x8(%ebp),%eax
+  80049c:	0f b6 00             	movzbl (%eax),%eax
+  80049f:	84 c0                	test   %al,%al
+  8004a1:	74 10                	je     8004b3 <strncmp+0x31>
+  8004a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004a6:	0f b6 10             	movzbl (%eax),%edx
+  8004a9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ac:	0f b6 00             	movzbl (%eax),%eax
+  8004af:	38 c2                	cmp    %al,%dl
+  8004b1:	74 d4                	je     800487 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004b3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004b7:	74 18                	je     8004d1 <strncmp+0x4f>
+  8004b9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004bc:	0f b6 00             	movzbl (%eax),%eax
+  8004bf:	0f b6 d0             	movzbl %al,%edx
+  8004c2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004c5:	0f b6 00             	movzbl (%eax),%eax
+  8004c8:	0f b6 c0             	movzbl %al,%eax
+  8004cb:	29 c2                	sub    %eax,%edx
+  8004cd:	89 d0                	mov    %edx,%eax
+  8004cf:	eb 05                	jmp    8004d6 <strncmp+0x54>
+  8004d1:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8004d6:	5d                   	pop    %ebp
+  8004d7:	c3                   	ret    
+
+008004d8 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  8004d8:	55                   	push   %ebp
+  8004d9:	89 e5                	mov    %esp,%ebp
+  8004db:	83 ec 04             	sub    $0x4,%esp
+  8004de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004e1:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  8004e4:	eb 14                	jmp    8004fa <strchr+0x22>
+        if (*s == c) {
+  8004e6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e9:	0f b6 00             	movzbl (%eax),%eax
+  8004ec:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  8004ef:	75 05                	jne    8004f6 <strchr+0x1e>
+            return (char *)s;
+  8004f1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004f4:	eb 13                	jmp    800509 <strchr+0x31>
+        }
+        s ++;
+  8004f6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  8004fa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fd:	0f b6 00             	movzbl (%eax),%eax
+  800500:	84 c0                	test   %al,%al
+  800502:	75 e2                	jne    8004e6 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800504:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800509:	c9                   	leave  
+  80050a:	c3                   	ret    
+
+0080050b <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  80050b:	55                   	push   %ebp
+  80050c:	89 e5                	mov    %esp,%ebp
+  80050e:	83 ec 04             	sub    $0x4,%esp
+  800511:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800514:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800517:	eb 0f                	jmp    800528 <strfind+0x1d>
+        if (*s == c) {
+  800519:	8b 45 08             	mov    0x8(%ebp),%eax
+  80051c:	0f b6 00             	movzbl (%eax),%eax
+  80051f:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800522:	74 10                	je     800534 <strfind+0x29>
+            break;
+        }
+        s ++;
+  800524:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800528:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052b:	0f b6 00             	movzbl (%eax),%eax
+  80052e:	84 c0                	test   %al,%al
+  800530:	75 e7                	jne    800519 <strfind+0xe>
+  800532:	eb 01                	jmp    800535 <strfind+0x2a>
+        if (*s == c) {
+            break;
+  800534:	90                   	nop
+        }
+        s ++;
+    }
+    return (char *)s;
+  800535:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800538:	c9                   	leave  
+  800539:	c3                   	ret    
+
+0080053a <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  80053a:	55                   	push   %ebp
+  80053b:	89 e5                	mov    %esp,%ebp
+  80053d:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800540:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800547:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80054e:	eb 04                	jmp    800554 <strtol+0x1a>
+        s ++;
+  800550:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800554:	8b 45 08             	mov    0x8(%ebp),%eax
+  800557:	0f b6 00             	movzbl (%eax),%eax
+  80055a:	3c 20                	cmp    $0x20,%al
+  80055c:	74 f2                	je     800550 <strtol+0x16>
+  80055e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800561:	0f b6 00             	movzbl (%eax),%eax
+  800564:	3c 09                	cmp    $0x9,%al
+  800566:	74 e8                	je     800550 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800568:	8b 45 08             	mov    0x8(%ebp),%eax
+  80056b:	0f b6 00             	movzbl (%eax),%eax
+  80056e:	3c 2b                	cmp    $0x2b,%al
+  800570:	75 06                	jne    800578 <strtol+0x3e>
+        s ++;
+  800572:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800576:	eb 15                	jmp    80058d <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800578:	8b 45 08             	mov    0x8(%ebp),%eax
+  80057b:	0f b6 00             	movzbl (%eax),%eax
+  80057e:	3c 2d                	cmp    $0x2d,%al
+  800580:	75 0b                	jne    80058d <strtol+0x53>
+        s ++, neg = 1;
+  800582:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800586:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  80058d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800591:	74 06                	je     800599 <strtol+0x5f>
+  800593:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800597:	75 24                	jne    8005bd <strtol+0x83>
+  800599:	8b 45 08             	mov    0x8(%ebp),%eax
+  80059c:	0f b6 00             	movzbl (%eax),%eax
+  80059f:	3c 30                	cmp    $0x30,%al
+  8005a1:	75 1a                	jne    8005bd <strtol+0x83>
+  8005a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a6:	83 c0 01             	add    $0x1,%eax
+  8005a9:	0f b6 00             	movzbl (%eax),%eax
+  8005ac:	3c 78                	cmp    $0x78,%al
+  8005ae:	75 0d                	jne    8005bd <strtol+0x83>
+        s += 2, base = 16;
+  8005b0:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005b4:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005bb:	eb 2a                	jmp    8005e7 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005bd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005c1:	75 17                	jne    8005da <strtol+0xa0>
+  8005c3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005c6:	0f b6 00             	movzbl (%eax),%eax
+  8005c9:	3c 30                	cmp    $0x30,%al
+  8005cb:	75 0d                	jne    8005da <strtol+0xa0>
+        s ++, base = 8;
+  8005cd:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005d1:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  8005d8:	eb 0d                	jmp    8005e7 <strtol+0xad>
+    }
+    else if (base == 0) {
+  8005da:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005de:	75 07                	jne    8005e7 <strtol+0xad>
+        base = 10;
+  8005e0:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  8005e7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ea:	0f b6 00             	movzbl (%eax),%eax
+  8005ed:	3c 2f                	cmp    $0x2f,%al
+  8005ef:	7e 1b                	jle    80060c <strtol+0xd2>
+  8005f1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005f4:	0f b6 00             	movzbl (%eax),%eax
+  8005f7:	3c 39                	cmp    $0x39,%al
+  8005f9:	7f 11                	jg     80060c <strtol+0xd2>
+            dig = *s - '0';
+  8005fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005fe:	0f b6 00             	movzbl (%eax),%eax
+  800601:	0f be c0             	movsbl %al,%eax
+  800604:	83 e8 30             	sub    $0x30,%eax
+  800607:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80060a:	eb 48                	jmp    800654 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  80060c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80060f:	0f b6 00             	movzbl (%eax),%eax
+  800612:	3c 60                	cmp    $0x60,%al
+  800614:	7e 1b                	jle    800631 <strtol+0xf7>
+  800616:	8b 45 08             	mov    0x8(%ebp),%eax
+  800619:	0f b6 00             	movzbl (%eax),%eax
+  80061c:	3c 7a                	cmp    $0x7a,%al
+  80061e:	7f 11                	jg     800631 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800620:	8b 45 08             	mov    0x8(%ebp),%eax
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	0f be c0             	movsbl %al,%eax
+  800629:	83 e8 57             	sub    $0x57,%eax
+  80062c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80062f:	eb 23                	jmp    800654 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800631:	8b 45 08             	mov    0x8(%ebp),%eax
+  800634:	0f b6 00             	movzbl (%eax),%eax
+  800637:	3c 40                	cmp    $0x40,%al
+  800639:	7e 3c                	jle    800677 <strtol+0x13d>
+  80063b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80063e:	0f b6 00             	movzbl (%eax),%eax
+  800641:	3c 5a                	cmp    $0x5a,%al
+  800643:	7f 32                	jg     800677 <strtol+0x13d>
+            dig = *s - 'A' + 10;
+  800645:	8b 45 08             	mov    0x8(%ebp),%eax
+  800648:	0f b6 00             	movzbl (%eax),%eax
+  80064b:	0f be c0             	movsbl %al,%eax
+  80064e:	83 e8 37             	sub    $0x37,%eax
+  800651:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800654:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800657:	3b 45 10             	cmp    0x10(%ebp),%eax
+  80065a:	7d 1a                	jge    800676 <strtol+0x13c>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  80065c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800660:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800663:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800667:	89 c2                	mov    %eax,%edx
+  800669:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80066c:	01 d0                	add    %edx,%eax
+  80066e:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800671:	e9 71 ff ff ff       	jmp    8005e7 <strtol+0xad>
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+            break;
+  800676:	90                   	nop
+        }
+        s ++, val = (val * base) + dig;
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  800677:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80067b:	74 08                	je     800685 <strtol+0x14b>
+        *endptr = (char *) s;
+  80067d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800680:	8b 55 08             	mov    0x8(%ebp),%edx
+  800683:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800685:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800689:	74 07                	je     800692 <strtol+0x158>
+  80068b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80068e:	f7 d8                	neg    %eax
+  800690:	eb 03                	jmp    800695 <strtol+0x15b>
+  800692:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800695:	c9                   	leave  
+  800696:	c3                   	ret    
+
+00800697 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800697:	55                   	push   %ebp
+  800698:	89 e5                	mov    %esp,%ebp
+  80069a:	57                   	push   %edi
+  80069b:	83 ec 24             	sub    $0x24,%esp
+  80069e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006a1:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006a4:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006a8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006ab:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006ae:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006b1:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006b7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006ba:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006be:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006c1:	89 d7                	mov    %edx,%edi
+  8006c3:	f3 aa                	rep stos %al,%es:(%edi)
+  8006c5:	89 fa                	mov    %edi,%edx
+  8006c7:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8006ca:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  8006cd:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006d0:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  8006d1:	83 c4 24             	add    $0x24,%esp
+  8006d4:	5f                   	pop    %edi
+  8006d5:	5d                   	pop    %ebp
+  8006d6:	c3                   	ret    
+
+008006d7 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  8006d7:	55                   	push   %ebp
+  8006d8:	89 e5                	mov    %esp,%ebp
+  8006da:	57                   	push   %edi
+  8006db:	56                   	push   %esi
+  8006dc:	53                   	push   %ebx
+  8006dd:	83 ec 30             	sub    $0x30,%esp
+  8006e0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8006e6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006e9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8006ec:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006ef:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  8006f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8006f5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  8006f8:	73 42                	jae    80073c <memmove+0x65>
+  8006fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8006fd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800700:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800703:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800706:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800709:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  80070c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  80070f:	c1 e8 02             	shr    $0x2,%eax
+  800712:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800714:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800717:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80071a:	89 d7                	mov    %edx,%edi
+  80071c:	89 c6                	mov    %eax,%esi
+  80071e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800720:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800723:	83 e1 03             	and    $0x3,%ecx
+  800726:	74 02                	je     80072a <memmove+0x53>
+  800728:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  80072a:	89 f0                	mov    %esi,%eax
+  80072c:	89 fa                	mov    %edi,%edx
+  80072e:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800731:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800734:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800737:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  80073a:	eb 36                	jmp    800772 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  80073c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80073f:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800742:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800745:	01 c2                	add    %eax,%edx
+  800747:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80074a:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  80074d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800750:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800753:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800756:	89 c1                	mov    %eax,%ecx
+  800758:	89 d8                	mov    %ebx,%eax
+  80075a:	89 d6                	mov    %edx,%esi
+  80075c:	89 c7                	mov    %eax,%edi
+  80075e:	fd                   	std    
+  80075f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800761:	fc                   	cld    
+  800762:	89 f8                	mov    %edi,%eax
+  800764:	89 f2                	mov    %esi,%edx
+  800766:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800769:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  80076c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  80076f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800772:	83 c4 30             	add    $0x30,%esp
+  800775:	5b                   	pop    %ebx
+  800776:	5e                   	pop    %esi
+  800777:	5f                   	pop    %edi
+  800778:	5d                   	pop    %ebp
+  800779:	c3                   	ret    
+
+0080077a <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  80077a:	55                   	push   %ebp
+  80077b:	89 e5                	mov    %esp,%ebp
+  80077d:	57                   	push   %edi
+  80077e:	56                   	push   %esi
+  80077f:	83 ec 20             	sub    $0x20,%esp
+  800782:	8b 45 08             	mov    0x8(%ebp),%eax
+  800785:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800788:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80078b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80078e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800791:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800794:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800797:	c1 e8 02             	shr    $0x2,%eax
+  80079a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  80079c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80079f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007a2:	89 d7                	mov    %edx,%edi
+  8007a4:	89 c6                	mov    %eax,%esi
+  8007a6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007a8:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007ab:	83 e1 03             	and    $0x3,%ecx
+  8007ae:	74 02                	je     8007b2 <memcpy+0x38>
+  8007b0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007b2:	89 f0                	mov    %esi,%eax
+  8007b4:	89 fa                	mov    %edi,%edx
+  8007b6:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007b9:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007bc:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  8007bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007c2:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007c3:	83 c4 20             	add    $0x20,%esp
+  8007c6:	5e                   	pop    %esi
+  8007c7:	5f                   	pop    %edi
+  8007c8:	5d                   	pop    %ebp
+  8007c9:	c3                   	ret    
+
+008007ca <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  8007ca:	55                   	push   %ebp
+  8007cb:	89 e5                	mov    %esp,%ebp
+  8007cd:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  8007d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007d3:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  8007d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007d9:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  8007dc:	eb 30                	jmp    80080e <memcmp+0x44>
+        if (*s1 != *s2) {
+  8007de:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8007e1:	0f b6 10             	movzbl (%eax),%edx
+  8007e4:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8007e7:	0f b6 00             	movzbl (%eax),%eax
+  8007ea:	38 c2                	cmp    %al,%dl
+  8007ec:	74 18                	je     800806 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8007ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8007f1:	0f b6 00             	movzbl (%eax),%eax
+  8007f4:	0f b6 d0             	movzbl %al,%edx
+  8007f7:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8007fa:	0f b6 00             	movzbl (%eax),%eax
+  8007fd:	0f b6 c0             	movzbl %al,%eax
+  800800:	29 c2                	sub    %eax,%edx
+  800802:	89 d0                	mov    %edx,%eax
+  800804:	eb 1a                	jmp    800820 <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800806:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  80080a:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  80080e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800811:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800814:	89 55 10             	mov    %edx,0x10(%ebp)
+  800817:	85 c0                	test   %eax,%eax
+  800819:	75 c3                	jne    8007de <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  80081b:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800820:	c9                   	leave  
+  800821:	c3                   	ret    
+
+00800822 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800822:	55                   	push   %ebp
+  800823:	89 e5                	mov    %esp,%ebp
+  800825:	83 ec 38             	sub    $0x38,%esp
+  800828:	8b 45 10             	mov    0x10(%ebp),%eax
+  80082b:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  80082e:	8b 45 14             	mov    0x14(%ebp),%eax
+  800831:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  800834:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800837:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  80083a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80083d:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800840:	8b 45 18             	mov    0x18(%ebp),%eax
+  800843:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800846:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800849:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80084c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80084f:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  800852:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800855:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800858:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  80085c:	74 1c                	je     80087a <printnum+0x58>
+  80085e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800861:	ba 00 00 00 00       	mov    $0x0,%edx
+  800866:	f7 75 e4             	divl   -0x1c(%ebp)
+  800869:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  80086c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80086f:	ba 00 00 00 00       	mov    $0x0,%edx
+  800874:	f7 75 e4             	divl   -0x1c(%ebp)
+  800877:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80087a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80087d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800880:	f7 75 e4             	divl   -0x1c(%ebp)
+  800883:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800886:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800889:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80088c:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80088f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800892:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800895:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800898:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  80089b:	8b 45 18             	mov    0x18(%ebp),%eax
+  80089e:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008a3:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008a6:	77 41                	ja     8008e9 <printnum+0xc7>
+  8008a8:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008ab:	72 05                	jb     8008b2 <printnum+0x90>
+  8008ad:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  8008b0:	77 37                	ja     8008e9 <printnum+0xc7>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008b2:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008b5:	83 e8 01             	sub    $0x1,%eax
+  8008b8:	83 ec 04             	sub    $0x4,%esp
+  8008bb:	ff 75 20             	pushl  0x20(%ebp)
+  8008be:	50                   	push   %eax
+  8008bf:	ff 75 18             	pushl  0x18(%ebp)
+  8008c2:	ff 75 ec             	pushl  -0x14(%ebp)
+  8008c5:	ff 75 e8             	pushl  -0x18(%ebp)
+  8008c8:	ff 75 0c             	pushl  0xc(%ebp)
+  8008cb:	ff 75 08             	pushl  0x8(%ebp)
+  8008ce:	e8 4f ff ff ff       	call   800822 <printnum>
+  8008d3:	83 c4 20             	add    $0x20,%esp
+  8008d6:	eb 1b                	jmp    8008f3 <printnum+0xd1>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  8008d8:	83 ec 08             	sub    $0x8,%esp
+  8008db:	ff 75 0c             	pushl  0xc(%ebp)
+  8008de:	ff 75 20             	pushl  0x20(%ebp)
+  8008e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008e4:	ff d0                	call   *%eax
+  8008e6:	83 c4 10             	add    $0x10,%esp
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8008e9:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8008ed:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8008f1:	7f e5                	jg     8008d8 <printnum+0xb6>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8008f3:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8008f6:	05 e4 10 80 00       	add    $0x8010e4,%eax
+  8008fb:	0f b6 00             	movzbl (%eax),%eax
+  8008fe:	0f be c0             	movsbl %al,%eax
+  800901:	83 ec 08             	sub    $0x8,%esp
+  800904:	ff 75 0c             	pushl  0xc(%ebp)
+  800907:	50                   	push   %eax
+  800908:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090b:	ff d0                	call   *%eax
+  80090d:	83 c4 10             	add    $0x10,%esp
+}
+  800910:	90                   	nop
+  800911:	c9                   	leave  
+  800912:	c3                   	ret    
+
+00800913 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800913:	55                   	push   %ebp
+  800914:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800916:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80091a:	7e 14                	jle    800930 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80091c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80091f:	8b 00                	mov    (%eax),%eax
+  800921:	8d 48 08             	lea    0x8(%eax),%ecx
+  800924:	8b 55 08             	mov    0x8(%ebp),%edx
+  800927:	89 0a                	mov    %ecx,(%edx)
+  800929:	8b 50 04             	mov    0x4(%eax),%edx
+  80092c:	8b 00                	mov    (%eax),%eax
+  80092e:	eb 30                	jmp    800960 <getuint+0x4d>
+    }
+    else if (lflag) {
+  800930:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800934:	74 16                	je     80094c <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800936:	8b 45 08             	mov    0x8(%ebp),%eax
+  800939:	8b 00                	mov    (%eax),%eax
+  80093b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80093e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800941:	89 0a                	mov    %ecx,(%edx)
+  800943:	8b 00                	mov    (%eax),%eax
+  800945:	ba 00 00 00 00       	mov    $0x0,%edx
+  80094a:	eb 14                	jmp    800960 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80094c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80094f:	8b 00                	mov    (%eax),%eax
+  800951:	8d 48 04             	lea    0x4(%eax),%ecx
+  800954:	8b 55 08             	mov    0x8(%ebp),%edx
+  800957:	89 0a                	mov    %ecx,(%edx)
+  800959:	8b 00                	mov    (%eax),%eax
+  80095b:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800960:	5d                   	pop    %ebp
+  800961:	c3                   	ret    
+
+00800962 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800962:	55                   	push   %ebp
+  800963:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800965:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800969:	7e 14                	jle    80097f <getint+0x1d>
+        return va_arg(*ap, long long);
+  80096b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80096e:	8b 00                	mov    (%eax),%eax
+  800970:	8d 48 08             	lea    0x8(%eax),%ecx
+  800973:	8b 55 08             	mov    0x8(%ebp),%edx
+  800976:	89 0a                	mov    %ecx,(%edx)
+  800978:	8b 50 04             	mov    0x4(%eax),%edx
+  80097b:	8b 00                	mov    (%eax),%eax
+  80097d:	eb 28                	jmp    8009a7 <getint+0x45>
+    }
+    else if (lflag) {
+  80097f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800983:	74 12                	je     800997 <getint+0x35>
+        return va_arg(*ap, long);
+  800985:	8b 45 08             	mov    0x8(%ebp),%eax
+  800988:	8b 00                	mov    (%eax),%eax
+  80098a:	8d 48 04             	lea    0x4(%eax),%ecx
+  80098d:	8b 55 08             	mov    0x8(%ebp),%edx
+  800990:	89 0a                	mov    %ecx,(%edx)
+  800992:	8b 00                	mov    (%eax),%eax
+  800994:	99                   	cltd   
+  800995:	eb 10                	jmp    8009a7 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800997:	8b 45 08             	mov    0x8(%ebp),%eax
+  80099a:	8b 00                	mov    (%eax),%eax
+  80099c:	8d 48 04             	lea    0x4(%eax),%ecx
+  80099f:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009a2:	89 0a                	mov    %ecx,(%edx)
+  8009a4:	8b 00                	mov    (%eax),%eax
+  8009a6:	99                   	cltd   
+    }
+}
+  8009a7:	5d                   	pop    %ebp
+  8009a8:	c3                   	ret    
+
+008009a9 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009a9:	55                   	push   %ebp
+  8009aa:	89 e5                	mov    %esp,%ebp
+  8009ac:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009af:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8009b8:	50                   	push   %eax
+  8009b9:	ff 75 10             	pushl  0x10(%ebp)
+  8009bc:	ff 75 0c             	pushl  0xc(%ebp)
+  8009bf:	ff 75 08             	pushl  0x8(%ebp)
+  8009c2:	e8 06 00 00 00       	call   8009cd <vprintfmt>
+  8009c7:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8009ca:	90                   	nop
+  8009cb:	c9                   	leave  
+  8009cc:	c3                   	ret    
+
+008009cd <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8009cd:	55                   	push   %ebp
+  8009ce:	89 e5                	mov    %esp,%ebp
+  8009d0:	56                   	push   %esi
+  8009d1:	53                   	push   %ebx
+  8009d2:	83 ec 20             	sub    $0x20,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009d5:	eb 17                	jmp    8009ee <vprintfmt+0x21>
+            if (ch == '\0') {
+  8009d7:	85 db                	test   %ebx,%ebx
+  8009d9:	0f 84 8e 03 00 00    	je     800d6d <vprintfmt+0x3a0>
+                return;
+            }
+            putch(ch, putdat);
+  8009df:	83 ec 08             	sub    $0x8,%esp
+  8009e2:	ff 75 0c             	pushl  0xc(%ebp)
+  8009e5:	53                   	push   %ebx
+  8009e6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009e9:	ff d0                	call   *%eax
+  8009eb:	83 c4 10             	add    $0x10,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009ee:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009f1:	8d 50 01             	lea    0x1(%eax),%edx
+  8009f4:	89 55 10             	mov    %edx,0x10(%ebp)
+  8009f7:	0f b6 00             	movzbl (%eax),%eax
+  8009fa:	0f b6 d8             	movzbl %al,%ebx
+  8009fd:	83 fb 25             	cmp    $0x25,%ebx
+  800a00:	75 d5                	jne    8009d7 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a02:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a06:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a10:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a13:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a1a:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a1d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a20:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a23:	8d 50 01             	lea    0x1(%eax),%edx
+  800a26:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a29:	0f b6 00             	movzbl (%eax),%eax
+  800a2c:	0f b6 d8             	movzbl %al,%ebx
+  800a2f:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a32:	83 f8 55             	cmp    $0x55,%eax
+  800a35:	0f 87 05 03 00 00    	ja     800d40 <vprintfmt+0x373>
+  800a3b:	8b 04 85 08 11 80 00 	mov    0x801108(,%eax,4),%eax
+  800a42:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a44:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a48:	eb d6                	jmp    800a20 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a4a:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800a4e:	eb d0                	jmp    800a20 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a50:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800a57:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a5a:	89 d0                	mov    %edx,%eax
+  800a5c:	c1 e0 02             	shl    $0x2,%eax
+  800a5f:	01 d0                	add    %edx,%eax
+  800a61:	01 c0                	add    %eax,%eax
+  800a63:	01 d8                	add    %ebx,%eax
+  800a65:	83 e8 30             	sub    $0x30,%eax
+  800a68:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800a6b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a6e:	0f b6 00             	movzbl (%eax),%eax
+  800a71:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800a74:	83 fb 2f             	cmp    $0x2f,%ebx
+  800a77:	7e 39                	jle    800ab2 <vprintfmt+0xe5>
+  800a79:	83 fb 39             	cmp    $0x39,%ebx
+  800a7c:	7f 34                	jg     800ab2 <vprintfmt+0xe5>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a7e:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  800a82:	eb d3                	jmp    800a57 <vprintfmt+0x8a>
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800a84:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a87:	8d 50 04             	lea    0x4(%eax),%edx
+  800a8a:	89 55 14             	mov    %edx,0x14(%ebp)
+  800a8d:	8b 00                	mov    (%eax),%eax
+  800a8f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800a92:	eb 1f                	jmp    800ab3 <vprintfmt+0xe6>
+
+        case '.':
+            if (width < 0)
+  800a94:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800a98:	79 86                	jns    800a20 <vprintfmt+0x53>
+                width = 0;
+  800a9a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800aa1:	e9 7a ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800aa6:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800aad:	e9 6e ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+            goto process_precision;
+  800ab2:	90                   	nop
+        case '#':
+            altflag = 1;
+            goto reswitch;
+
+        process_precision:
+            if (width < 0)
+  800ab3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ab7:	0f 89 63 ff ff ff    	jns    800a20 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800abd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ac0:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800ac3:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800aca:	e9 51 ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800acf:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800ad3:	e9 48 ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800ad8:	8b 45 14             	mov    0x14(%ebp),%eax
+  800adb:	8d 50 04             	lea    0x4(%eax),%edx
+  800ade:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ae1:	8b 00                	mov    (%eax),%eax
+  800ae3:	83 ec 08             	sub    $0x8,%esp
+  800ae6:	ff 75 0c             	pushl  0xc(%ebp)
+  800ae9:	50                   	push   %eax
+  800aea:	8b 45 08             	mov    0x8(%ebp),%eax
+  800aed:	ff d0                	call   *%eax
+  800aef:	83 c4 10             	add    $0x10,%esp
+            break;
+  800af2:	e9 71 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800af7:	8b 45 14             	mov    0x14(%ebp),%eax
+  800afa:	8d 50 04             	lea    0x4(%eax),%edx
+  800afd:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b00:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b02:	85 db                	test   %ebx,%ebx
+  800b04:	79 02                	jns    800b08 <vprintfmt+0x13b>
+                err = -err;
+  800b06:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b08:	83 fb 18             	cmp    $0x18,%ebx
+  800b0b:	7f 0b                	jg     800b18 <vprintfmt+0x14b>
+  800b0d:	8b 34 9d 80 10 80 00 	mov    0x801080(,%ebx,4),%esi
+  800b14:	85 f6                	test   %esi,%esi
+  800b16:	75 19                	jne    800b31 <vprintfmt+0x164>
+                printfmt(putch, putdat, "error %d", err);
+  800b18:	53                   	push   %ebx
+  800b19:	68 f5 10 80 00       	push   $0x8010f5
+  800b1e:	ff 75 0c             	pushl  0xc(%ebp)
+  800b21:	ff 75 08             	pushl  0x8(%ebp)
+  800b24:	e8 80 fe ff ff       	call   8009a9 <printfmt>
+  800b29:	83 c4 10             	add    $0x10,%esp
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b2c:	e9 37 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  800b31:	56                   	push   %esi
+  800b32:	68 fe 10 80 00       	push   $0x8010fe
+  800b37:	ff 75 0c             	pushl  0xc(%ebp)
+  800b3a:	ff 75 08             	pushl  0x8(%ebp)
+  800b3d:	e8 67 fe ff ff       	call   8009a9 <printfmt>
+  800b42:	83 c4 10             	add    $0x10,%esp
+            }
+            break;
+  800b45:	e9 1e 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800b4a:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b4d:	8d 50 04             	lea    0x4(%eax),%edx
+  800b50:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b53:	8b 30                	mov    (%eax),%esi
+  800b55:	85 f6                	test   %esi,%esi
+  800b57:	75 05                	jne    800b5e <vprintfmt+0x191>
+                p = "(null)";
+  800b59:	be 01 11 80 00       	mov    $0x801101,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800b5e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b62:	7e 76                	jle    800bda <vprintfmt+0x20d>
+  800b64:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800b68:	74 70                	je     800bda <vprintfmt+0x20d>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b6a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b6d:	83 ec 08             	sub    $0x8,%esp
+  800b70:	50                   	push   %eax
+  800b71:	56                   	push   %esi
+  800b72:	e8 17 f8 ff ff       	call   80038e <strnlen>
+  800b77:	83 c4 10             	add    $0x10,%esp
+  800b7a:	89 c2                	mov    %eax,%edx
+  800b7c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800b7f:	29 d0                	sub    %edx,%eax
+  800b81:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b84:	eb 17                	jmp    800b9d <vprintfmt+0x1d0>
+                    putch(padc, putdat);
+  800b86:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800b8a:	83 ec 08             	sub    $0x8,%esp
+  800b8d:	ff 75 0c             	pushl  0xc(%ebp)
+  800b90:	50                   	push   %eax
+  800b91:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b94:	ff d0                	call   *%eax
+  800b96:	83 c4 10             	add    $0x10,%esp
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b99:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800b9d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ba1:	7f e3                	jg     800b86 <vprintfmt+0x1b9>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800ba3:	eb 35                	jmp    800bda <vprintfmt+0x20d>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800ba5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800ba9:	74 1c                	je     800bc7 <vprintfmt+0x1fa>
+  800bab:	83 fb 1f             	cmp    $0x1f,%ebx
+  800bae:	7e 05                	jle    800bb5 <vprintfmt+0x1e8>
+  800bb0:	83 fb 7e             	cmp    $0x7e,%ebx
+  800bb3:	7e 12                	jle    800bc7 <vprintfmt+0x1fa>
+                    putch('?', putdat);
+  800bb5:	83 ec 08             	sub    $0x8,%esp
+  800bb8:	ff 75 0c             	pushl  0xc(%ebp)
+  800bbb:	6a 3f                	push   $0x3f
+  800bbd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bc0:	ff d0                	call   *%eax
+  800bc2:	83 c4 10             	add    $0x10,%esp
+  800bc5:	eb 0f                	jmp    800bd6 <vprintfmt+0x209>
+                }
+                else {
+                    putch(ch, putdat);
+  800bc7:	83 ec 08             	sub    $0x8,%esp
+  800bca:	ff 75 0c             	pushl  0xc(%ebp)
+  800bcd:	53                   	push   %ebx
+  800bce:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bd1:	ff d0                	call   *%eax
+  800bd3:	83 c4 10             	add    $0x10,%esp
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bd6:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800bda:	89 f0                	mov    %esi,%eax
+  800bdc:	8d 70 01             	lea    0x1(%eax),%esi
+  800bdf:	0f b6 00             	movzbl (%eax),%eax
+  800be2:	0f be d8             	movsbl %al,%ebx
+  800be5:	85 db                	test   %ebx,%ebx
+  800be7:	74 26                	je     800c0f <vprintfmt+0x242>
+  800be9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800bed:	78 b6                	js     800ba5 <vprintfmt+0x1d8>
+  800bef:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  800bf3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800bf7:	79 ac                	jns    800ba5 <vprintfmt+0x1d8>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800bf9:	eb 14                	jmp    800c0f <vprintfmt+0x242>
+                putch(' ', putdat);
+  800bfb:	83 ec 08             	sub    $0x8,%esp
+  800bfe:	ff 75 0c             	pushl  0xc(%ebp)
+  800c01:	6a 20                	push   $0x20
+  800c03:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c06:	ff d0                	call   *%eax
+  800c08:	83 c4 10             	add    $0x10,%esp
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c0b:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c0f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c13:	7f e6                	jg     800bfb <vprintfmt+0x22e>
+                putch(' ', putdat);
+            }
+            break;
+  800c15:	e9 4e 01 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c1a:	83 ec 08             	sub    $0x8,%esp
+  800c1d:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c20:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c23:	50                   	push   %eax
+  800c24:	e8 39 fd ff ff       	call   800962 <getint>
+  800c29:	83 c4 10             	add    $0x10,%esp
+  800c2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c2f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c32:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c35:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c38:	85 d2                	test   %edx,%edx
+  800c3a:	79 23                	jns    800c5f <vprintfmt+0x292>
+                putch('-', putdat);
+  800c3c:	83 ec 08             	sub    $0x8,%esp
+  800c3f:	ff 75 0c             	pushl  0xc(%ebp)
+  800c42:	6a 2d                	push   $0x2d
+  800c44:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c47:	ff d0                	call   *%eax
+  800c49:	83 c4 10             	add    $0x10,%esp
+                num = -(long long)num;
+  800c4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c4f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c52:	f7 d8                	neg    %eax
+  800c54:	83 d2 00             	adc    $0x0,%edx
+  800c57:	f7 da                	neg    %edx
+  800c59:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c5c:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800c5f:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c66:	e9 9f 00 00 00       	jmp    800d0a <vprintfmt+0x33d>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800c6b:	83 ec 08             	sub    $0x8,%esp
+  800c6e:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c71:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c74:	50                   	push   %eax
+  800c75:	e8 99 fc ff ff       	call   800913 <getuint>
+  800c7a:	83 c4 10             	add    $0x10,%esp
+  800c7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c80:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800c83:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c8a:	eb 7e                	jmp    800d0a <vprintfmt+0x33d>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800c8c:	83 ec 08             	sub    $0x8,%esp
+  800c8f:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c92:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c95:	50                   	push   %eax
+  800c96:	e8 78 fc ff ff       	call   800913 <getuint>
+  800c9b:	83 c4 10             	add    $0x10,%esp
+  800c9e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ca1:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800ca4:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800cab:	eb 5d                	jmp    800d0a <vprintfmt+0x33d>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800cad:	83 ec 08             	sub    $0x8,%esp
+  800cb0:	ff 75 0c             	pushl  0xc(%ebp)
+  800cb3:	6a 30                	push   $0x30
+  800cb5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb8:	ff d0                	call   *%eax
+  800cba:	83 c4 10             	add    $0x10,%esp
+            putch('x', putdat);
+  800cbd:	83 ec 08             	sub    $0x8,%esp
+  800cc0:	ff 75 0c             	pushl  0xc(%ebp)
+  800cc3:	6a 78                	push   $0x78
+  800cc5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cc8:	ff d0                	call   *%eax
+  800cca:	83 c4 10             	add    $0x10,%esp
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800ccd:	8b 45 14             	mov    0x14(%ebp),%eax
+  800cd0:	8d 50 04             	lea    0x4(%eax),%edx
+  800cd3:	89 55 14             	mov    %edx,0x14(%ebp)
+  800cd6:	8b 00                	mov    (%eax),%eax
+  800cd8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cdb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800ce2:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800ce9:	eb 1f                	jmp    800d0a <vprintfmt+0x33d>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800ceb:	83 ec 08             	sub    $0x8,%esp
+  800cee:	ff 75 e0             	pushl  -0x20(%ebp)
+  800cf1:	8d 45 14             	lea    0x14(%ebp),%eax
+  800cf4:	50                   	push   %eax
+  800cf5:	e8 19 fc ff ff       	call   800913 <getuint>
+  800cfa:	83 c4 10             	add    $0x10,%esp
+  800cfd:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d00:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d03:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d0a:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d11:	83 ec 04             	sub    $0x4,%esp
+  800d14:	52                   	push   %edx
+  800d15:	ff 75 e8             	pushl  -0x18(%ebp)
+  800d18:	50                   	push   %eax
+  800d19:	ff 75 f4             	pushl  -0xc(%ebp)
+  800d1c:	ff 75 f0             	pushl  -0x10(%ebp)
+  800d1f:	ff 75 0c             	pushl  0xc(%ebp)
+  800d22:	ff 75 08             	pushl  0x8(%ebp)
+  800d25:	e8 f8 fa ff ff       	call   800822 <printnum>
+  800d2a:	83 c4 20             	add    $0x20,%esp
+            break;
+  800d2d:	eb 39                	jmp    800d68 <vprintfmt+0x39b>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800d2f:	83 ec 08             	sub    $0x8,%esp
+  800d32:	ff 75 0c             	pushl  0xc(%ebp)
+  800d35:	53                   	push   %ebx
+  800d36:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d39:	ff d0                	call   *%eax
+  800d3b:	83 c4 10             	add    $0x10,%esp
+            break;
+  800d3e:	eb 28                	jmp    800d68 <vprintfmt+0x39b>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800d40:	83 ec 08             	sub    $0x8,%esp
+  800d43:	ff 75 0c             	pushl  0xc(%ebp)
+  800d46:	6a 25                	push   $0x25
+  800d48:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d4b:	ff d0                	call   *%eax
+  800d4d:	83 c4 10             	add    $0x10,%esp
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800d50:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d54:	eb 04                	jmp    800d5a <vprintfmt+0x38d>
+  800d56:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d5a:	8b 45 10             	mov    0x10(%ebp),%eax
+  800d5d:	83 e8 01             	sub    $0x1,%eax
+  800d60:	0f b6 00             	movzbl (%eax),%eax
+  800d63:	3c 25                	cmp    $0x25,%al
+  800d65:	75 ef                	jne    800d56 <vprintfmt+0x389>
+                /* do nothing */;
+            break;
+  800d67:	90                   	nop
+        }
+    }
+  800d68:	e9 68 fc ff ff       	jmp    8009d5 <vprintfmt+0x8>
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+            if (ch == '\0') {
+                return;
+  800d6d:	90                   	nop
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  800d6e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  800d71:	5b                   	pop    %ebx
+  800d72:	5e                   	pop    %esi
+  800d73:	5d                   	pop    %ebp
+  800d74:	c3                   	ret    
+
+00800d75 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800d75:	55                   	push   %ebp
+  800d76:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800d78:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d7b:	8b 40 08             	mov    0x8(%eax),%eax
+  800d7e:	8d 50 01             	lea    0x1(%eax),%edx
+  800d81:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d84:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800d87:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d8a:	8b 10                	mov    (%eax),%edx
+  800d8c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d8f:	8b 40 04             	mov    0x4(%eax),%eax
+  800d92:	39 c2                	cmp    %eax,%edx
+  800d94:	73 12                	jae    800da8 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800d96:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d99:	8b 00                	mov    (%eax),%eax
+  800d9b:	8d 48 01             	lea    0x1(%eax),%ecx
+  800d9e:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800da1:	89 0a                	mov    %ecx,(%edx)
+  800da3:	8b 55 08             	mov    0x8(%ebp),%edx
+  800da6:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800da8:	90                   	nop
+  800da9:	5d                   	pop    %ebp
+  800daa:	c3                   	ret    
+
+00800dab <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800dab:	55                   	push   %ebp
+  800dac:	89 e5                	mov    %esp,%ebp
+  800dae:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800db1:	8d 45 14             	lea    0x14(%ebp),%eax
+  800db4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800db7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800dba:	50                   	push   %eax
+  800dbb:	ff 75 10             	pushl  0x10(%ebp)
+  800dbe:	ff 75 0c             	pushl  0xc(%ebp)
+  800dc1:	ff 75 08             	pushl  0x8(%ebp)
+  800dc4:	e8 0b 00 00 00       	call   800dd4 <vsnprintf>
+  800dc9:	83 c4 10             	add    $0x10,%esp
+  800dcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800dcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800dd2:	c9                   	leave  
+  800dd3:	c3                   	ret    
+
+00800dd4 <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800dd4:	55                   	push   %ebp
+  800dd5:	89 e5                	mov    %esp,%ebp
+  800dd7:	83 ec 18             	sub    $0x18,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800dda:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ddd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800de0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800de3:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800de6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de9:	01 d0                	add    %edx,%eax
+  800deb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800dee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800df5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800df9:	74 0a                	je     800e05 <vsnprintf+0x31>
+  800dfb:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800dfe:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e01:	39 c2                	cmp    %eax,%edx
+  800e03:	76 07                	jbe    800e0c <vsnprintf+0x38>
+        return -E_INVAL;
+  800e05:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e0a:	eb 20                	jmp    800e2c <vsnprintf+0x58>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e0c:	ff 75 14             	pushl  0x14(%ebp)
+  800e0f:	ff 75 10             	pushl  0x10(%ebp)
+  800e12:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800e15:	50                   	push   %eax
+  800e16:	68 75 0d 80 00       	push   $0x800d75
+  800e1b:	e8 ad fb ff ff       	call   8009cd <vprintfmt>
+  800e20:	83 c4 10             	add    $0x10,%esp
+    // null terminate the buffer
+    *b.buf = '\0';
+  800e23:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e26:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800e29:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e2c:	c9                   	leave  
+  800e2d:	c3                   	ret    
+
+00800e2e <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800e2e:	55                   	push   %ebp
+  800e2f:	89 e5                	mov    %esp,%ebp
+  800e31:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800e34:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e37:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800e3d:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800e40:	b8 20 00 00 00       	mov    $0x20,%eax
+  800e45:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800e48:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800e4b:	89 c1                	mov    %eax,%ecx
+  800e4d:	d3 ea                	shr    %cl,%edx
+  800e4f:	89 d0                	mov    %edx,%eax
+}
+  800e51:	c9                   	leave  
+  800e52:	c3                   	ret    
+
+00800e53 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800e53:	55                   	push   %ebp
+  800e54:	89 e5                	mov    %esp,%ebp
+  800e56:	57                   	push   %edi
+  800e57:	56                   	push   %esi
+  800e58:	53                   	push   %ebx
+  800e59:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800e5c:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e61:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800e67:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800e6d:	6b f0 05             	imul   $0x5,%eax,%esi
+  800e70:	01 fe                	add    %edi,%esi
+  800e72:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800e77:	f7 e7                	mul    %edi
+  800e79:	01 d6                	add    %edx,%esi
+  800e7b:	89 f2                	mov    %esi,%edx
+  800e7d:	83 c0 0b             	add    $0xb,%eax
+  800e80:	83 d2 00             	adc    $0x0,%edx
+  800e83:	89 c7                	mov    %eax,%edi
+  800e85:	83 e7 ff             	and    $0xffffffff,%edi
+  800e88:	89 f9                	mov    %edi,%ecx
+  800e8a:	0f b7 da             	movzwl %dx,%ebx
+  800e8d:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800e93:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800e99:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e9e:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ea4:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ea8:	c1 ea 0c             	shr    $0xc,%edx
+  800eab:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800eae:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800eb1:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800eb8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ebb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ebe:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ec1:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800ec4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec7:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800eca:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ece:	74 1c                	je     800eec <rand+0x99>
+  800ed0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ed3:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ed8:	f7 75 dc             	divl   -0x24(%ebp)
+  800edb:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800ede:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ee1:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ee6:	f7 75 dc             	divl   -0x24(%ebp)
+  800ee9:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800eec:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800eef:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800ef2:	f7 75 dc             	divl   -0x24(%ebp)
+  800ef5:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ef8:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800efb:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800efe:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800f01:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f04:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f07:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800f0a:	83 c4 24             	add    $0x24,%esp
+  800f0d:	5b                   	pop    %ebx
+  800f0e:	5e                   	pop    %esi
+  800f0f:	5f                   	pop    %edi
+  800f10:	5d                   	pop    %ebp
+  800f11:	c3                   	ret    
+
+00800f12 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800f12:	55                   	push   %ebp
+  800f13:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800f15:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f18:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f1d:	a3 00 20 80 00       	mov    %eax,0x802000
+  800f22:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800f28:	90                   	nop
+  800f29:	5d                   	pop    %ebp
+  800f2a:	c3                   	ret    
+
+00800f2b <main>:
+#include <ulib.h>
+
+int zero;
+
+int
+main(void) {
+  800f2b:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  800f2f:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f32:	ff 71 fc             	pushl  -0x4(%ecx)
+  800f35:	55                   	push   %ebp
+  800f36:	89 e5                	mov    %esp,%ebp
+  800f38:	51                   	push   %ecx
+  800f39:	83 ec 04             	sub    $0x4,%esp
+    cprintf("value is %d.\n", 1 / zero);
+  800f3c:	8b 0d 08 20 80 00    	mov    0x802008,%ecx
+  800f42:	b8 01 00 00 00       	mov    $0x1,%eax
+  800f47:	99                   	cltd   
+  800f48:	f7 f9                	idiv   %ecx
+  800f4a:	83 ec 08             	sub    $0x8,%esp
+  800f4d:	50                   	push   %eax
+  800f4e:	68 60 12 80 00       	push   $0x801260
+  800f53:	e8 81 f3 ff ff       	call   8002d9 <cprintf>
+  800f58:	83 c4 10             	add    $0x10,%esp
+    panic("FAIL: T.T\n");
+  800f5b:	83 ec 04             	sub    $0x4,%esp
+  800f5e:	68 6e 12 80 00       	push   $0x80126e
+  800f63:	6a 09                	push   $0x9
+  800f65:	68 79 12 80 00       	push   $0x801279
+  800f6a:	e8 b1 f0 ff ff       	call   800020 <__panic>
diff -r -u -P lab6_original/obj/user/divzero.d lab6/obj/user/divzero.d
--- lab6_original/obj/user/divzero.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/divzero.d	2016-04-29 16:22:06.852516425 +0800
@@ -0,0 +1,2 @@
+obj/user/divzero.o obj/user/divzero.d: user/divzero.c libs/stdio.h \
+ libs/defs.h libs/stdarg.h user/libs/ulib.h
Binary files lab6_original/obj/user/divzero.o and lab6/obj/user/divzero.o differ
diff -r -u -P lab6_original/obj/user/divzero.sym lab6/obj/user/divzero.sym
--- lab6_original/obj/user/divzero.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/divzero.sym	2016-04-29 16:22:07.760599997 +0800
@@ -0,0 +1,78 @@
+00800020 .text
+00800f80 .rodata
+00802000 .data
+00802008 .bss
+00200000 .stab_info
+00200010 .stab
+00202c99 .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b5 syscall
+00000000 ulib.c
+00000000 stdio.c
+0080028c cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+00801080 error_string
+00800822 printnum
+00800913 getuint
+00800962 getint
+00800d75 sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 divzero.c
+008003be strcpy
+0080021a yield
+00800201 waitpid
+00800141 sys_yield
+008006d7 memmove
+00800dab snprintf
+008009cd vprintfmt
+0080011d sys_fork
+008002d9 cprintf
+0080023e getpid
+0080077a memcpy
+00800266 lab6_set_priority
+00800dd4 vsnprintf
+0080034d umain
+00202c98 __STAB_END__
+00800150 sys_kill
+00202c99 __STABSTR_BEGIN__
+00800020 __panic
+0080053a strtol
+0080038e strnlen
+0080024b print_pgdir
+00800228 kill
+0080050b strfind
+008001ea wait
+0080027d _start
+00800e53 rand
+00800482 strncmp
+00800171 sys_putc
+008003fe strncpy
+008007ca memcmp
+008001dd fork
+00800697 memset
+00800f2b main
+00800f12 srand
+00800e2e hash32
+008009a9 printfmt
+00203a85 __STABSTR_END__
+00800438 strcmp
+00802008 zero
+00800259 gettime_msec
+00800192 sys_gettime
+008002b0 vcprintf
+0080006e __warn
+008002ff cputs
+008001a1 sys_lab6_set_priority
+008001b7 exit
+0080012c sys_wait
+0080010b sys_exit
+00200010 __STAB_BEGIN__
+00800366 strlen
+00800183 sys_pgdir
+008004d8 strchr
+00800162 sys_getpid
diff -r -u -P lab6_original/obj/user/exit.asm lab6/obj/user/exit.asm
--- lab6_original/obj/user/exit.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/exit.asm	2016-04-29 16:22:07.724754848 +0800
@@ -0,0 +1,2683 @@
+
+obj/__user_exit.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 18             	sub    $0x18,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	83 ec 04             	sub    $0x4,%esp
+  80002f:	ff 75 0c             	pushl  0xc(%ebp)
+  800032:	ff 75 08             	pushl  0x8(%ebp)
+  800035:	68 80 10 80 00       	push   $0x801080
+  80003a:	e8 9a 02 00 00       	call   8002d9 <cprintf>
+  80003f:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800042:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800045:	83 ec 08             	sub    $0x8,%esp
+  800048:	50                   	push   %eax
+  800049:	ff 75 10             	pushl  0x10(%ebp)
+  80004c:	e8 5f 02 00 00       	call   8002b0 <vcprintf>
+  800051:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  800054:	83 ec 0c             	sub    $0xc,%esp
+  800057:	68 9a 10 80 00       	push   $0x80109a
+  80005c:	e8 78 02 00 00       	call   8002d9 <cprintf>
+  800061:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	83 ec 0c             	sub    $0xc,%esp
+  800067:	6a f6                	push   $0xfffffff6
+  800069:	e8 49 01 00 00       	call   8001b7 <exit>
+
+0080006e <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80006e:	55                   	push   %ebp
+  80006f:	89 e5                	mov    %esp,%ebp
+  800071:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800074:	8d 45 14             	lea    0x14(%ebp),%eax
+  800077:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007a:	83 ec 04             	sub    $0x4,%esp
+  80007d:	ff 75 0c             	pushl  0xc(%ebp)
+  800080:	ff 75 08             	pushl  0x8(%ebp)
+  800083:	68 9c 10 80 00       	push   $0x80109c
+  800088:	e8 4c 02 00 00       	call   8002d9 <cprintf>
+  80008d:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800090:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800093:	83 ec 08             	sub    $0x8,%esp
+  800096:	50                   	push   %eax
+  800097:	ff 75 10             	pushl  0x10(%ebp)
+  80009a:	e8 11 02 00 00       	call   8002b0 <vcprintf>
+  80009f:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  8000a2:	83 ec 0c             	sub    $0xc,%esp
+  8000a5:	68 9a 10 80 00       	push   $0x80109a
+  8000aa:	e8 2a 02 00 00       	call   8002d9 <cprintf>
+  8000af:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8000b2:	90                   	nop
+  8000b3:	c9                   	leave  
+  8000b4:	c3                   	ret    
+
+008000b5 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b5:	55                   	push   %ebp
+  8000b6:	89 e5                	mov    %esp,%ebp
+  8000b8:	57                   	push   %edi
+  8000b9:	56                   	push   %esi
+  8000ba:	53                   	push   %ebx
+  8000bb:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000be:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cb:	eb 16                	jmp    8000e3 <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8000cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d0:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d3:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d6:	8b 10                	mov    (%eax),%edx
+  8000d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000db:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000df:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8000e3:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e7:	7e e4                	jle    8000cd <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000e9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ec:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000ef:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f2:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f5:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8000f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fb:	cd 80                	int    $0x80
+  8000fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  800100:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800103:	83 c4 20             	add    $0x20,%esp
+  800106:	5b                   	pop    %ebx
+  800107:	5e                   	pop    %esi
+  800108:	5f                   	pop    %edi
+  800109:	5d                   	pop    %ebp
+  80010a:	c3                   	ret    
+
+0080010b <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010b:	55                   	push   %ebp
+  80010c:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_exit, error_code);
+  80010e:	ff 75 08             	pushl  0x8(%ebp)
+  800111:	6a 01                	push   $0x1
+  800113:	e8 9d ff ff ff       	call   8000b5 <syscall>
+  800118:	83 c4 08             	add    $0x8,%esp
+}
+  80011b:	c9                   	leave  
+  80011c:	c3                   	ret    
+
+0080011d <sys_fork>:
+
+int
+sys_fork(void) {
+  80011d:	55                   	push   %ebp
+  80011e:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_fork);
+  800120:	6a 02                	push   $0x2
+  800122:	e8 8e ff ff ff       	call   8000b5 <syscall>
+  800127:	83 c4 04             	add    $0x4,%esp
+}
+  80012a:	c9                   	leave  
+  80012b:	c3                   	ret    
+
+0080012c <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80012c:	55                   	push   %ebp
+  80012d:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_wait, pid, store);
+  80012f:	ff 75 0c             	pushl  0xc(%ebp)
+  800132:	ff 75 08             	pushl  0x8(%ebp)
+  800135:	6a 03                	push   $0x3
+  800137:	e8 79 ff ff ff       	call   8000b5 <syscall>
+  80013c:	83 c4 0c             	add    $0xc,%esp
+}
+  80013f:	c9                   	leave  
+  800140:	c3                   	ret    
+
+00800141 <sys_yield>:
+
+int
+sys_yield(void) {
+  800141:	55                   	push   %ebp
+  800142:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_yield);
+  800144:	6a 0a                	push   $0xa
+  800146:	e8 6a ff ff ff       	call   8000b5 <syscall>
+  80014b:	83 c4 04             	add    $0x4,%esp
+}
+  80014e:	c9                   	leave  
+  80014f:	c3                   	ret    
+
+00800150 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800150:	55                   	push   %ebp
+  800151:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_kill, pid);
+  800153:	ff 75 08             	pushl  0x8(%ebp)
+  800156:	6a 0c                	push   $0xc
+  800158:	e8 58 ff ff ff       	call   8000b5 <syscall>
+  80015d:	83 c4 08             	add    $0x8,%esp
+}
+  800160:	c9                   	leave  
+  800161:	c3                   	ret    
+
+00800162 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800162:	55                   	push   %ebp
+  800163:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_getpid);
+  800165:	6a 12                	push   $0x12
+  800167:	e8 49 ff ff ff       	call   8000b5 <syscall>
+  80016c:	83 c4 04             	add    $0x4,%esp
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_putc, c);
+  800174:	ff 75 08             	pushl  0x8(%ebp)
+  800177:	6a 1e                	push   $0x1e
+  800179:	e8 37 ff ff ff       	call   8000b5 <syscall>
+  80017e:	83 c4 08             	add    $0x8,%esp
+}
+  800181:	c9                   	leave  
+  800182:	c3                   	ret    
+
+00800183 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800183:	55                   	push   %ebp
+  800184:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_pgdir);
+  800186:	6a 1f                	push   $0x1f
+  800188:	e8 28 ff ff ff       	call   8000b5 <syscall>
+  80018d:	83 c4 04             	add    $0x4,%esp
+}
+  800190:	c9                   	leave  
+  800191:	c3                   	ret    
+
+00800192 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  800192:	55                   	push   %ebp
+  800193:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_gettime);
+  800195:	6a 11                	push   $0x11
+  800197:	e8 19 ff ff ff       	call   8000b5 <syscall>
+  80019c:	83 c4 04             	add    $0x4,%esp
+}
+  80019f:	c9                   	leave  
+  8001a0:	c3                   	ret    
+
+008001a1 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001a1:	55                   	push   %ebp
+  8001a2:	89 e5                	mov    %esp,%ebp
+    syscall(SYS_lab6_set_priority, priority);
+  8001a4:	ff 75 08             	pushl  0x8(%ebp)
+  8001a7:	68 ff 00 00 00       	push   $0xff
+  8001ac:	e8 04 ff ff ff       	call   8000b5 <syscall>
+  8001b1:	83 c4 08             	add    $0x8,%esp
+}
+  8001b4:	90                   	nop
+  8001b5:	c9                   	leave  
+  8001b6:	c3                   	ret    
+
+008001b7 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001b7:	55                   	push   %ebp
+  8001b8:	89 e5                	mov    %esp,%ebp
+  8001ba:	83 ec 08             	sub    $0x8,%esp
+    sys_exit(error_code);
+  8001bd:	83 ec 0c             	sub    $0xc,%esp
+  8001c0:	ff 75 08             	pushl  0x8(%ebp)
+  8001c3:	e8 43 ff ff ff       	call   80010b <sys_exit>
+  8001c8:	83 c4 10             	add    $0x10,%esp
+    cprintf("BUG: exit failed.\n");
+  8001cb:	83 ec 0c             	sub    $0xc,%esp
+  8001ce:	68 b8 10 80 00       	push   $0x8010b8
+  8001d3:	e8 01 01 00 00       	call   8002d9 <cprintf>
+  8001d8:	83 c4 10             	add    $0x10,%esp
+    while (1);
+  8001db:	eb fe                	jmp    8001db <exit+0x24>
+
+008001dd <fork>:
+}
+
+int
+fork(void) {
+  8001dd:	55                   	push   %ebp
+  8001de:	89 e5                	mov    %esp,%ebp
+  8001e0:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8001e3:	e8 35 ff ff ff       	call   80011d <sys_fork>
+}
+  8001e8:	c9                   	leave  
+  8001e9:	c3                   	ret    
+
+008001ea <wait>:
+
+int
+wait(void) {
+  8001ea:	55                   	push   %ebp
+  8001eb:	89 e5                	mov    %esp,%ebp
+  8001ed:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(0, NULL);
+  8001f0:	83 ec 08             	sub    $0x8,%esp
+  8001f3:	6a 00                	push   $0x0
+  8001f5:	6a 00                	push   $0x0
+  8001f7:	e8 30 ff ff ff       	call   80012c <sys_wait>
+  8001fc:	83 c4 10             	add    $0x10,%esp
+}
+  8001ff:	c9                   	leave  
+  800200:	c3                   	ret    
+
+00800201 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800201:	55                   	push   %ebp
+  800202:	89 e5                	mov    %esp,%ebp
+  800204:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(pid, store);
+  800207:	83 ec 08             	sub    $0x8,%esp
+  80020a:	ff 75 0c             	pushl  0xc(%ebp)
+  80020d:	ff 75 08             	pushl  0x8(%ebp)
+  800210:	e8 17 ff ff ff       	call   80012c <sys_wait>
+  800215:	83 c4 10             	add    $0x10,%esp
+}
+  800218:	c9                   	leave  
+  800219:	c3                   	ret    
+
+0080021a <yield>:
+
+void
+yield(void) {
+  80021a:	55                   	push   %ebp
+  80021b:	89 e5                	mov    %esp,%ebp
+  80021d:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800220:	e8 1c ff ff ff       	call   800141 <sys_yield>
+}
+  800225:	90                   	nop
+  800226:	c9                   	leave  
+  800227:	c3                   	ret    
+
+00800228 <kill>:
+
+int
+kill(int pid) {
+  800228:	55                   	push   %ebp
+  800229:	89 e5                	mov    %esp,%ebp
+  80022b:	83 ec 08             	sub    $0x8,%esp
+    return sys_kill(pid);
+  80022e:	83 ec 0c             	sub    $0xc,%esp
+  800231:	ff 75 08             	pushl  0x8(%ebp)
+  800234:	e8 17 ff ff ff       	call   800150 <sys_kill>
+  800239:	83 c4 10             	add    $0x10,%esp
+}
+  80023c:	c9                   	leave  
+  80023d:	c3                   	ret    
+
+0080023e <getpid>:
+
+int
+getpid(void) {
+  80023e:	55                   	push   %ebp
+  80023f:	89 e5                	mov    %esp,%ebp
+  800241:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800244:	e8 19 ff ff ff       	call   800162 <sys_getpid>
+}
+  800249:	c9                   	leave  
+  80024a:	c3                   	ret    
+
+0080024b <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80024b:	55                   	push   %ebp
+  80024c:	89 e5                	mov    %esp,%ebp
+  80024e:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800251:	e8 2d ff ff ff       	call   800183 <sys_pgdir>
+}
+  800256:	90                   	nop
+  800257:	c9                   	leave  
+  800258:	c3                   	ret    
+
+00800259 <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  800259:	55                   	push   %ebp
+  80025a:	89 e5                	mov    %esp,%ebp
+  80025c:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  80025f:	e8 2e ff ff ff       	call   800192 <sys_gettime>
+}
+  800264:	c9                   	leave  
+  800265:	c3                   	ret    
+
+00800266 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800266:	55                   	push   %ebp
+  800267:	89 e5                	mov    %esp,%ebp
+  800269:	83 ec 08             	sub    $0x8,%esp
+    sys_lab6_set_priority(priority);
+  80026c:	83 ec 0c             	sub    $0xc,%esp
+  80026f:	ff 75 08             	pushl  0x8(%ebp)
+  800272:	e8 2a ff ff ff       	call   8001a1 <sys_lab6_set_priority>
+  800277:	83 c4 10             	add    $0x10,%esp
+}
+  80027a:	90                   	nop
+  80027b:	c9                   	leave  
+  80027c:	c3                   	ret    
+
+0080027d <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  80027d:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800282:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800285:	e8 c3 00 00 00       	call   80034d <umain>
+1:  jmp 1b
+  80028a:	eb fe                	jmp    80028a <_start+0xd>
+
+0080028c <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  80028c:	55                   	push   %ebp
+  80028d:	89 e5                	mov    %esp,%ebp
+  80028f:	83 ec 08             	sub    $0x8,%esp
+    sys_putc(c);
+  800292:	83 ec 0c             	sub    $0xc,%esp
+  800295:	ff 75 08             	pushl  0x8(%ebp)
+  800298:	e8 d4 fe ff ff       	call   800171 <sys_putc>
+  80029d:	83 c4 10             	add    $0x10,%esp
+    (*cnt) ++;
+  8002a0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002a3:	8b 00                	mov    (%eax),%eax
+  8002a5:	8d 50 01             	lea    0x1(%eax),%edx
+  8002a8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002ab:	89 10                	mov    %edx,(%eax)
+}
+  8002ad:	90                   	nop
+  8002ae:	c9                   	leave  
+  8002af:	c3                   	ret    
+
+008002b0 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002b0:	55                   	push   %ebp
+  8002b1:	89 e5                	mov    %esp,%ebp
+  8002b3:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  8002b6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002bd:	ff 75 0c             	pushl  0xc(%ebp)
+  8002c0:	ff 75 08             	pushl  0x8(%ebp)
+  8002c3:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  8002c6:	50                   	push   %eax
+  8002c7:	68 8c 02 80 00       	push   $0x80028c
+  8002cc:	e8 fc 06 00 00       	call   8009cd <vprintfmt>
+  8002d1:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  8002d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002d7:	c9                   	leave  
+  8002d8:	c3                   	ret    
+
+008002d9 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  8002d9:	55                   	push   %ebp
+  8002da:	89 e5                	mov    %esp,%ebp
+  8002dc:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8002df:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8002e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  8002e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8002e8:	83 ec 08             	sub    $0x8,%esp
+  8002eb:	50                   	push   %eax
+  8002ec:	ff 75 08             	pushl  0x8(%ebp)
+  8002ef:	e8 bc ff ff ff       	call   8002b0 <vcprintf>
+  8002f4:	83 c4 10             	add    $0x10,%esp
+  8002f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  8002fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002fd:	c9                   	leave  
+  8002fe:	c3                   	ret    
+
+008002ff <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  8002ff:	55                   	push   %ebp
+  800300:	89 e5                	mov    %esp,%ebp
+  800302:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  800305:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80030c:	eb 14                	jmp    800322 <cputs+0x23>
+        cputch(c, &cnt);
+  80030e:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800312:	83 ec 08             	sub    $0x8,%esp
+  800315:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800318:	52                   	push   %edx
+  800319:	50                   	push   %eax
+  80031a:	e8 6d ff ff ff       	call   80028c <cputch>
+  80031f:	83 c4 10             	add    $0x10,%esp
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800322:	8b 45 08             	mov    0x8(%ebp),%eax
+  800325:	8d 50 01             	lea    0x1(%eax),%edx
+  800328:	89 55 08             	mov    %edx,0x8(%ebp)
+  80032b:	0f b6 00             	movzbl (%eax),%eax
+  80032e:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800331:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800335:	75 d7                	jne    80030e <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800337:	83 ec 08             	sub    $0x8,%esp
+  80033a:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  80033d:	50                   	push   %eax
+  80033e:	6a 0a                	push   $0xa
+  800340:	e8 47 ff ff ff       	call   80028c <cputch>
+  800345:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  800348:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80034b:	c9                   	leave  
+  80034c:	c3                   	ret    
+
+0080034d <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  80034d:	55                   	push   %ebp
+  80034e:	89 e5                	mov    %esp,%ebp
+  800350:	83 ec 18             	sub    $0x18,%esp
+    int ret = main();
+  800353:	e8 d3 0b 00 00       	call   800f2b <main>
+  800358:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  80035b:	83 ec 0c             	sub    $0xc,%esp
+  80035e:	ff 75 f4             	pushl  -0xc(%ebp)
+  800361:	e8 51 fe ff ff       	call   8001b7 <exit>
+
+00800366 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800366:	55                   	push   %ebp
+  800367:	89 e5                	mov    %esp,%ebp
+  800369:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  80036c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800373:	eb 04                	jmp    800379 <strlen+0x13>
+        cnt ++;
+  800375:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800379:	8b 45 08             	mov    0x8(%ebp),%eax
+  80037c:	8d 50 01             	lea    0x1(%eax),%edx
+  80037f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800382:	0f b6 00             	movzbl (%eax),%eax
+  800385:	84 c0                	test   %al,%al
+  800387:	75 ec                	jne    800375 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800389:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  80038c:	c9                   	leave  
+  80038d:	c3                   	ret    
+
+0080038e <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  80038e:	55                   	push   %ebp
+  80038f:	89 e5                	mov    %esp,%ebp
+  800391:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800394:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  80039b:	eb 04                	jmp    8003a1 <strnlen+0x13>
+        cnt ++;
+  80039d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  8003a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003a4:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003a7:	73 10                	jae    8003b9 <strnlen+0x2b>
+  8003a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003ac:	8d 50 01             	lea    0x1(%eax),%edx
+  8003af:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003b2:	0f b6 00             	movzbl (%eax),%eax
+  8003b5:	84 c0                	test   %al,%al
+  8003b7:	75 e4                	jne    80039d <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003b9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003bc:	c9                   	leave  
+  8003bd:	c3                   	ret    
+
+008003be <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  8003be:	55                   	push   %ebp
+  8003bf:	89 e5                	mov    %esp,%ebp
+  8003c1:	57                   	push   %edi
+  8003c2:	56                   	push   %esi
+  8003c3:	83 ec 20             	sub    $0x20,%esp
+  8003c6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003cc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8003cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  8003d2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003d8:	89 d1                	mov    %edx,%ecx
+  8003da:	89 c2                	mov    %eax,%edx
+  8003dc:	89 ce                	mov    %ecx,%esi
+  8003de:	89 d7                	mov    %edx,%edi
+  8003e0:	ac                   	lods   %ds:(%esi),%al
+  8003e1:	aa                   	stos   %al,%es:(%edi)
+  8003e2:	84 c0                	test   %al,%al
+  8003e4:	75 fa                	jne    8003e0 <strcpy+0x22>
+  8003e6:	89 fa                	mov    %edi,%edx
+  8003e8:	89 f1                	mov    %esi,%ecx
+  8003ea:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8003ed:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8003f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  8003f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  8003f6:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  8003f7:	83 c4 20             	add    $0x20,%esp
+  8003fa:	5e                   	pop    %esi
+  8003fb:	5f                   	pop    %edi
+  8003fc:	5d                   	pop    %ebp
+  8003fd:	c3                   	ret    
+
+008003fe <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  8003fe:	55                   	push   %ebp
+  8003ff:	89 e5                	mov    %esp,%ebp
+  800401:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800404:	8b 45 08             	mov    0x8(%ebp),%eax
+  800407:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  80040a:	eb 21                	jmp    80042d <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  80040c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80040f:	0f b6 10             	movzbl (%eax),%edx
+  800412:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800415:	88 10                	mov    %dl,(%eax)
+  800417:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80041a:	0f b6 00             	movzbl (%eax),%eax
+  80041d:	84 c0                	test   %al,%al
+  80041f:	74 04                	je     800425 <strncpy+0x27>
+            src ++;
+  800421:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800425:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800429:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  80042d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800431:	75 d9                	jne    80040c <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800433:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800436:	c9                   	leave  
+  800437:	c3                   	ret    
+
+00800438 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800438:	55                   	push   %ebp
+  800439:	89 e5                	mov    %esp,%ebp
+  80043b:	57                   	push   %edi
+  80043c:	56                   	push   %esi
+  80043d:	83 ec 20             	sub    $0x20,%esp
+  800440:	8b 45 08             	mov    0x8(%ebp),%eax
+  800443:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800446:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800449:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  80044c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80044f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800452:	89 d1                	mov    %edx,%ecx
+  800454:	89 c2                	mov    %eax,%edx
+  800456:	89 ce                	mov    %ecx,%esi
+  800458:	89 d7                	mov    %edx,%edi
+  80045a:	ac                   	lods   %ds:(%esi),%al
+  80045b:	ae                   	scas   %es:(%edi),%al
+  80045c:	75 08                	jne    800466 <strcmp+0x2e>
+  80045e:	84 c0                	test   %al,%al
+  800460:	75 f8                	jne    80045a <strcmp+0x22>
+  800462:	31 c0                	xor    %eax,%eax
+  800464:	eb 04                	jmp    80046a <strcmp+0x32>
+  800466:	19 c0                	sbb    %eax,%eax
+  800468:	0c 01                	or     $0x1,%al
+  80046a:	89 fa                	mov    %edi,%edx
+  80046c:	89 f1                	mov    %esi,%ecx
+  80046e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800471:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800474:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800477:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  80047a:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  80047b:	83 c4 20             	add    $0x20,%esp
+  80047e:	5e                   	pop    %esi
+  80047f:	5f                   	pop    %edi
+  800480:	5d                   	pop    %ebp
+  800481:	c3                   	ret    
+
+00800482 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800482:	55                   	push   %ebp
+  800483:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800485:	eb 0c                	jmp    800493 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800487:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  80048b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  80048f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800493:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800497:	74 1a                	je     8004b3 <strncmp+0x31>
+  800499:	8b 45 08             	mov    0x8(%ebp),%eax
+  80049c:	0f b6 00             	movzbl (%eax),%eax
+  80049f:	84 c0                	test   %al,%al
+  8004a1:	74 10                	je     8004b3 <strncmp+0x31>
+  8004a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004a6:	0f b6 10             	movzbl (%eax),%edx
+  8004a9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ac:	0f b6 00             	movzbl (%eax),%eax
+  8004af:	38 c2                	cmp    %al,%dl
+  8004b1:	74 d4                	je     800487 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004b3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004b7:	74 18                	je     8004d1 <strncmp+0x4f>
+  8004b9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004bc:	0f b6 00             	movzbl (%eax),%eax
+  8004bf:	0f b6 d0             	movzbl %al,%edx
+  8004c2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004c5:	0f b6 00             	movzbl (%eax),%eax
+  8004c8:	0f b6 c0             	movzbl %al,%eax
+  8004cb:	29 c2                	sub    %eax,%edx
+  8004cd:	89 d0                	mov    %edx,%eax
+  8004cf:	eb 05                	jmp    8004d6 <strncmp+0x54>
+  8004d1:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8004d6:	5d                   	pop    %ebp
+  8004d7:	c3                   	ret    
+
+008004d8 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  8004d8:	55                   	push   %ebp
+  8004d9:	89 e5                	mov    %esp,%ebp
+  8004db:	83 ec 04             	sub    $0x4,%esp
+  8004de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004e1:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  8004e4:	eb 14                	jmp    8004fa <strchr+0x22>
+        if (*s == c) {
+  8004e6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e9:	0f b6 00             	movzbl (%eax),%eax
+  8004ec:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  8004ef:	75 05                	jne    8004f6 <strchr+0x1e>
+            return (char *)s;
+  8004f1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004f4:	eb 13                	jmp    800509 <strchr+0x31>
+        }
+        s ++;
+  8004f6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  8004fa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fd:	0f b6 00             	movzbl (%eax),%eax
+  800500:	84 c0                	test   %al,%al
+  800502:	75 e2                	jne    8004e6 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800504:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800509:	c9                   	leave  
+  80050a:	c3                   	ret    
+
+0080050b <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  80050b:	55                   	push   %ebp
+  80050c:	89 e5                	mov    %esp,%ebp
+  80050e:	83 ec 04             	sub    $0x4,%esp
+  800511:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800514:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800517:	eb 0f                	jmp    800528 <strfind+0x1d>
+        if (*s == c) {
+  800519:	8b 45 08             	mov    0x8(%ebp),%eax
+  80051c:	0f b6 00             	movzbl (%eax),%eax
+  80051f:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800522:	74 10                	je     800534 <strfind+0x29>
+            break;
+        }
+        s ++;
+  800524:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800528:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052b:	0f b6 00             	movzbl (%eax),%eax
+  80052e:	84 c0                	test   %al,%al
+  800530:	75 e7                	jne    800519 <strfind+0xe>
+  800532:	eb 01                	jmp    800535 <strfind+0x2a>
+        if (*s == c) {
+            break;
+  800534:	90                   	nop
+        }
+        s ++;
+    }
+    return (char *)s;
+  800535:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800538:	c9                   	leave  
+  800539:	c3                   	ret    
+
+0080053a <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  80053a:	55                   	push   %ebp
+  80053b:	89 e5                	mov    %esp,%ebp
+  80053d:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800540:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800547:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80054e:	eb 04                	jmp    800554 <strtol+0x1a>
+        s ++;
+  800550:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800554:	8b 45 08             	mov    0x8(%ebp),%eax
+  800557:	0f b6 00             	movzbl (%eax),%eax
+  80055a:	3c 20                	cmp    $0x20,%al
+  80055c:	74 f2                	je     800550 <strtol+0x16>
+  80055e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800561:	0f b6 00             	movzbl (%eax),%eax
+  800564:	3c 09                	cmp    $0x9,%al
+  800566:	74 e8                	je     800550 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800568:	8b 45 08             	mov    0x8(%ebp),%eax
+  80056b:	0f b6 00             	movzbl (%eax),%eax
+  80056e:	3c 2b                	cmp    $0x2b,%al
+  800570:	75 06                	jne    800578 <strtol+0x3e>
+        s ++;
+  800572:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800576:	eb 15                	jmp    80058d <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800578:	8b 45 08             	mov    0x8(%ebp),%eax
+  80057b:	0f b6 00             	movzbl (%eax),%eax
+  80057e:	3c 2d                	cmp    $0x2d,%al
+  800580:	75 0b                	jne    80058d <strtol+0x53>
+        s ++, neg = 1;
+  800582:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800586:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  80058d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800591:	74 06                	je     800599 <strtol+0x5f>
+  800593:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800597:	75 24                	jne    8005bd <strtol+0x83>
+  800599:	8b 45 08             	mov    0x8(%ebp),%eax
+  80059c:	0f b6 00             	movzbl (%eax),%eax
+  80059f:	3c 30                	cmp    $0x30,%al
+  8005a1:	75 1a                	jne    8005bd <strtol+0x83>
+  8005a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a6:	83 c0 01             	add    $0x1,%eax
+  8005a9:	0f b6 00             	movzbl (%eax),%eax
+  8005ac:	3c 78                	cmp    $0x78,%al
+  8005ae:	75 0d                	jne    8005bd <strtol+0x83>
+        s += 2, base = 16;
+  8005b0:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005b4:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005bb:	eb 2a                	jmp    8005e7 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005bd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005c1:	75 17                	jne    8005da <strtol+0xa0>
+  8005c3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005c6:	0f b6 00             	movzbl (%eax),%eax
+  8005c9:	3c 30                	cmp    $0x30,%al
+  8005cb:	75 0d                	jne    8005da <strtol+0xa0>
+        s ++, base = 8;
+  8005cd:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005d1:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  8005d8:	eb 0d                	jmp    8005e7 <strtol+0xad>
+    }
+    else if (base == 0) {
+  8005da:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005de:	75 07                	jne    8005e7 <strtol+0xad>
+        base = 10;
+  8005e0:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  8005e7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ea:	0f b6 00             	movzbl (%eax),%eax
+  8005ed:	3c 2f                	cmp    $0x2f,%al
+  8005ef:	7e 1b                	jle    80060c <strtol+0xd2>
+  8005f1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005f4:	0f b6 00             	movzbl (%eax),%eax
+  8005f7:	3c 39                	cmp    $0x39,%al
+  8005f9:	7f 11                	jg     80060c <strtol+0xd2>
+            dig = *s - '0';
+  8005fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005fe:	0f b6 00             	movzbl (%eax),%eax
+  800601:	0f be c0             	movsbl %al,%eax
+  800604:	83 e8 30             	sub    $0x30,%eax
+  800607:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80060a:	eb 48                	jmp    800654 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  80060c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80060f:	0f b6 00             	movzbl (%eax),%eax
+  800612:	3c 60                	cmp    $0x60,%al
+  800614:	7e 1b                	jle    800631 <strtol+0xf7>
+  800616:	8b 45 08             	mov    0x8(%ebp),%eax
+  800619:	0f b6 00             	movzbl (%eax),%eax
+  80061c:	3c 7a                	cmp    $0x7a,%al
+  80061e:	7f 11                	jg     800631 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800620:	8b 45 08             	mov    0x8(%ebp),%eax
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	0f be c0             	movsbl %al,%eax
+  800629:	83 e8 57             	sub    $0x57,%eax
+  80062c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80062f:	eb 23                	jmp    800654 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800631:	8b 45 08             	mov    0x8(%ebp),%eax
+  800634:	0f b6 00             	movzbl (%eax),%eax
+  800637:	3c 40                	cmp    $0x40,%al
+  800639:	7e 3c                	jle    800677 <strtol+0x13d>
+  80063b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80063e:	0f b6 00             	movzbl (%eax),%eax
+  800641:	3c 5a                	cmp    $0x5a,%al
+  800643:	7f 32                	jg     800677 <strtol+0x13d>
+            dig = *s - 'A' + 10;
+  800645:	8b 45 08             	mov    0x8(%ebp),%eax
+  800648:	0f b6 00             	movzbl (%eax),%eax
+  80064b:	0f be c0             	movsbl %al,%eax
+  80064e:	83 e8 37             	sub    $0x37,%eax
+  800651:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800654:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800657:	3b 45 10             	cmp    0x10(%ebp),%eax
+  80065a:	7d 1a                	jge    800676 <strtol+0x13c>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  80065c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800660:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800663:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800667:	89 c2                	mov    %eax,%edx
+  800669:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80066c:	01 d0                	add    %edx,%eax
+  80066e:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800671:	e9 71 ff ff ff       	jmp    8005e7 <strtol+0xad>
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+            break;
+  800676:	90                   	nop
+        }
+        s ++, val = (val * base) + dig;
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  800677:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80067b:	74 08                	je     800685 <strtol+0x14b>
+        *endptr = (char *) s;
+  80067d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800680:	8b 55 08             	mov    0x8(%ebp),%edx
+  800683:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800685:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800689:	74 07                	je     800692 <strtol+0x158>
+  80068b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80068e:	f7 d8                	neg    %eax
+  800690:	eb 03                	jmp    800695 <strtol+0x15b>
+  800692:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800695:	c9                   	leave  
+  800696:	c3                   	ret    
+
+00800697 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800697:	55                   	push   %ebp
+  800698:	89 e5                	mov    %esp,%ebp
+  80069a:	57                   	push   %edi
+  80069b:	83 ec 24             	sub    $0x24,%esp
+  80069e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006a1:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006a4:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006a8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006ab:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006ae:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006b1:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006b7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006ba:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006be:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006c1:	89 d7                	mov    %edx,%edi
+  8006c3:	f3 aa                	rep stos %al,%es:(%edi)
+  8006c5:	89 fa                	mov    %edi,%edx
+  8006c7:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8006ca:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  8006cd:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006d0:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  8006d1:	83 c4 24             	add    $0x24,%esp
+  8006d4:	5f                   	pop    %edi
+  8006d5:	5d                   	pop    %ebp
+  8006d6:	c3                   	ret    
+
+008006d7 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  8006d7:	55                   	push   %ebp
+  8006d8:	89 e5                	mov    %esp,%ebp
+  8006da:	57                   	push   %edi
+  8006db:	56                   	push   %esi
+  8006dc:	53                   	push   %ebx
+  8006dd:	83 ec 30             	sub    $0x30,%esp
+  8006e0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8006e6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006e9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8006ec:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006ef:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  8006f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8006f5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  8006f8:	73 42                	jae    80073c <memmove+0x65>
+  8006fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8006fd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800700:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800703:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800706:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800709:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  80070c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  80070f:	c1 e8 02             	shr    $0x2,%eax
+  800712:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800714:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800717:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80071a:	89 d7                	mov    %edx,%edi
+  80071c:	89 c6                	mov    %eax,%esi
+  80071e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800720:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800723:	83 e1 03             	and    $0x3,%ecx
+  800726:	74 02                	je     80072a <memmove+0x53>
+  800728:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  80072a:	89 f0                	mov    %esi,%eax
+  80072c:	89 fa                	mov    %edi,%edx
+  80072e:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800731:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800734:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800737:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  80073a:	eb 36                	jmp    800772 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  80073c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80073f:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800742:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800745:	01 c2                	add    %eax,%edx
+  800747:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80074a:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  80074d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800750:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800753:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800756:	89 c1                	mov    %eax,%ecx
+  800758:	89 d8                	mov    %ebx,%eax
+  80075a:	89 d6                	mov    %edx,%esi
+  80075c:	89 c7                	mov    %eax,%edi
+  80075e:	fd                   	std    
+  80075f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800761:	fc                   	cld    
+  800762:	89 f8                	mov    %edi,%eax
+  800764:	89 f2                	mov    %esi,%edx
+  800766:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800769:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  80076c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  80076f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800772:	83 c4 30             	add    $0x30,%esp
+  800775:	5b                   	pop    %ebx
+  800776:	5e                   	pop    %esi
+  800777:	5f                   	pop    %edi
+  800778:	5d                   	pop    %ebp
+  800779:	c3                   	ret    
+
+0080077a <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  80077a:	55                   	push   %ebp
+  80077b:	89 e5                	mov    %esp,%ebp
+  80077d:	57                   	push   %edi
+  80077e:	56                   	push   %esi
+  80077f:	83 ec 20             	sub    $0x20,%esp
+  800782:	8b 45 08             	mov    0x8(%ebp),%eax
+  800785:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800788:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80078b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80078e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800791:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800794:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800797:	c1 e8 02             	shr    $0x2,%eax
+  80079a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  80079c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80079f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007a2:	89 d7                	mov    %edx,%edi
+  8007a4:	89 c6                	mov    %eax,%esi
+  8007a6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007a8:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007ab:	83 e1 03             	and    $0x3,%ecx
+  8007ae:	74 02                	je     8007b2 <memcpy+0x38>
+  8007b0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007b2:	89 f0                	mov    %esi,%eax
+  8007b4:	89 fa                	mov    %edi,%edx
+  8007b6:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007b9:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007bc:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  8007bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007c2:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007c3:	83 c4 20             	add    $0x20,%esp
+  8007c6:	5e                   	pop    %esi
+  8007c7:	5f                   	pop    %edi
+  8007c8:	5d                   	pop    %ebp
+  8007c9:	c3                   	ret    
+
+008007ca <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  8007ca:	55                   	push   %ebp
+  8007cb:	89 e5                	mov    %esp,%ebp
+  8007cd:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  8007d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007d3:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  8007d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007d9:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  8007dc:	eb 30                	jmp    80080e <memcmp+0x44>
+        if (*s1 != *s2) {
+  8007de:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8007e1:	0f b6 10             	movzbl (%eax),%edx
+  8007e4:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8007e7:	0f b6 00             	movzbl (%eax),%eax
+  8007ea:	38 c2                	cmp    %al,%dl
+  8007ec:	74 18                	je     800806 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8007ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8007f1:	0f b6 00             	movzbl (%eax),%eax
+  8007f4:	0f b6 d0             	movzbl %al,%edx
+  8007f7:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8007fa:	0f b6 00             	movzbl (%eax),%eax
+  8007fd:	0f b6 c0             	movzbl %al,%eax
+  800800:	29 c2                	sub    %eax,%edx
+  800802:	89 d0                	mov    %edx,%eax
+  800804:	eb 1a                	jmp    800820 <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800806:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  80080a:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  80080e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800811:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800814:	89 55 10             	mov    %edx,0x10(%ebp)
+  800817:	85 c0                	test   %eax,%eax
+  800819:	75 c3                	jne    8007de <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  80081b:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800820:	c9                   	leave  
+  800821:	c3                   	ret    
+
+00800822 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800822:	55                   	push   %ebp
+  800823:	89 e5                	mov    %esp,%ebp
+  800825:	83 ec 38             	sub    $0x38,%esp
+  800828:	8b 45 10             	mov    0x10(%ebp),%eax
+  80082b:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  80082e:	8b 45 14             	mov    0x14(%ebp),%eax
+  800831:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  800834:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800837:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  80083a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80083d:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800840:	8b 45 18             	mov    0x18(%ebp),%eax
+  800843:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800846:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800849:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80084c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80084f:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  800852:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800855:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800858:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  80085c:	74 1c                	je     80087a <printnum+0x58>
+  80085e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800861:	ba 00 00 00 00       	mov    $0x0,%edx
+  800866:	f7 75 e4             	divl   -0x1c(%ebp)
+  800869:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  80086c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80086f:	ba 00 00 00 00       	mov    $0x0,%edx
+  800874:	f7 75 e4             	divl   -0x1c(%ebp)
+  800877:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80087a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80087d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800880:	f7 75 e4             	divl   -0x1c(%ebp)
+  800883:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800886:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800889:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80088c:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80088f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800892:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800895:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800898:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  80089b:	8b 45 18             	mov    0x18(%ebp),%eax
+  80089e:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008a3:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008a6:	77 41                	ja     8008e9 <printnum+0xc7>
+  8008a8:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008ab:	72 05                	jb     8008b2 <printnum+0x90>
+  8008ad:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  8008b0:	77 37                	ja     8008e9 <printnum+0xc7>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008b2:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008b5:	83 e8 01             	sub    $0x1,%eax
+  8008b8:	83 ec 04             	sub    $0x4,%esp
+  8008bb:	ff 75 20             	pushl  0x20(%ebp)
+  8008be:	50                   	push   %eax
+  8008bf:	ff 75 18             	pushl  0x18(%ebp)
+  8008c2:	ff 75 ec             	pushl  -0x14(%ebp)
+  8008c5:	ff 75 e8             	pushl  -0x18(%ebp)
+  8008c8:	ff 75 0c             	pushl  0xc(%ebp)
+  8008cb:	ff 75 08             	pushl  0x8(%ebp)
+  8008ce:	e8 4f ff ff ff       	call   800822 <printnum>
+  8008d3:	83 c4 20             	add    $0x20,%esp
+  8008d6:	eb 1b                	jmp    8008f3 <printnum+0xd1>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  8008d8:	83 ec 08             	sub    $0x8,%esp
+  8008db:	ff 75 0c             	pushl  0xc(%ebp)
+  8008de:	ff 75 20             	pushl  0x20(%ebp)
+  8008e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008e4:	ff d0                	call   *%eax
+  8008e6:	83 c4 10             	add    $0x10,%esp
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8008e9:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8008ed:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8008f1:	7f e5                	jg     8008d8 <printnum+0xb6>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8008f3:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8008f6:	05 e4 11 80 00       	add    $0x8011e4,%eax
+  8008fb:	0f b6 00             	movzbl (%eax),%eax
+  8008fe:	0f be c0             	movsbl %al,%eax
+  800901:	83 ec 08             	sub    $0x8,%esp
+  800904:	ff 75 0c             	pushl  0xc(%ebp)
+  800907:	50                   	push   %eax
+  800908:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090b:	ff d0                	call   *%eax
+  80090d:	83 c4 10             	add    $0x10,%esp
+}
+  800910:	90                   	nop
+  800911:	c9                   	leave  
+  800912:	c3                   	ret    
+
+00800913 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800913:	55                   	push   %ebp
+  800914:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800916:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80091a:	7e 14                	jle    800930 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80091c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80091f:	8b 00                	mov    (%eax),%eax
+  800921:	8d 48 08             	lea    0x8(%eax),%ecx
+  800924:	8b 55 08             	mov    0x8(%ebp),%edx
+  800927:	89 0a                	mov    %ecx,(%edx)
+  800929:	8b 50 04             	mov    0x4(%eax),%edx
+  80092c:	8b 00                	mov    (%eax),%eax
+  80092e:	eb 30                	jmp    800960 <getuint+0x4d>
+    }
+    else if (lflag) {
+  800930:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800934:	74 16                	je     80094c <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800936:	8b 45 08             	mov    0x8(%ebp),%eax
+  800939:	8b 00                	mov    (%eax),%eax
+  80093b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80093e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800941:	89 0a                	mov    %ecx,(%edx)
+  800943:	8b 00                	mov    (%eax),%eax
+  800945:	ba 00 00 00 00       	mov    $0x0,%edx
+  80094a:	eb 14                	jmp    800960 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80094c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80094f:	8b 00                	mov    (%eax),%eax
+  800951:	8d 48 04             	lea    0x4(%eax),%ecx
+  800954:	8b 55 08             	mov    0x8(%ebp),%edx
+  800957:	89 0a                	mov    %ecx,(%edx)
+  800959:	8b 00                	mov    (%eax),%eax
+  80095b:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800960:	5d                   	pop    %ebp
+  800961:	c3                   	ret    
+
+00800962 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800962:	55                   	push   %ebp
+  800963:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800965:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800969:	7e 14                	jle    80097f <getint+0x1d>
+        return va_arg(*ap, long long);
+  80096b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80096e:	8b 00                	mov    (%eax),%eax
+  800970:	8d 48 08             	lea    0x8(%eax),%ecx
+  800973:	8b 55 08             	mov    0x8(%ebp),%edx
+  800976:	89 0a                	mov    %ecx,(%edx)
+  800978:	8b 50 04             	mov    0x4(%eax),%edx
+  80097b:	8b 00                	mov    (%eax),%eax
+  80097d:	eb 28                	jmp    8009a7 <getint+0x45>
+    }
+    else if (lflag) {
+  80097f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800983:	74 12                	je     800997 <getint+0x35>
+        return va_arg(*ap, long);
+  800985:	8b 45 08             	mov    0x8(%ebp),%eax
+  800988:	8b 00                	mov    (%eax),%eax
+  80098a:	8d 48 04             	lea    0x4(%eax),%ecx
+  80098d:	8b 55 08             	mov    0x8(%ebp),%edx
+  800990:	89 0a                	mov    %ecx,(%edx)
+  800992:	8b 00                	mov    (%eax),%eax
+  800994:	99                   	cltd   
+  800995:	eb 10                	jmp    8009a7 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800997:	8b 45 08             	mov    0x8(%ebp),%eax
+  80099a:	8b 00                	mov    (%eax),%eax
+  80099c:	8d 48 04             	lea    0x4(%eax),%ecx
+  80099f:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009a2:	89 0a                	mov    %ecx,(%edx)
+  8009a4:	8b 00                	mov    (%eax),%eax
+  8009a6:	99                   	cltd   
+    }
+}
+  8009a7:	5d                   	pop    %ebp
+  8009a8:	c3                   	ret    
+
+008009a9 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009a9:	55                   	push   %ebp
+  8009aa:	89 e5                	mov    %esp,%ebp
+  8009ac:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009af:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8009b8:	50                   	push   %eax
+  8009b9:	ff 75 10             	pushl  0x10(%ebp)
+  8009bc:	ff 75 0c             	pushl  0xc(%ebp)
+  8009bf:	ff 75 08             	pushl  0x8(%ebp)
+  8009c2:	e8 06 00 00 00       	call   8009cd <vprintfmt>
+  8009c7:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8009ca:	90                   	nop
+  8009cb:	c9                   	leave  
+  8009cc:	c3                   	ret    
+
+008009cd <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8009cd:	55                   	push   %ebp
+  8009ce:	89 e5                	mov    %esp,%ebp
+  8009d0:	56                   	push   %esi
+  8009d1:	53                   	push   %ebx
+  8009d2:	83 ec 20             	sub    $0x20,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009d5:	eb 17                	jmp    8009ee <vprintfmt+0x21>
+            if (ch == '\0') {
+  8009d7:	85 db                	test   %ebx,%ebx
+  8009d9:	0f 84 8e 03 00 00    	je     800d6d <vprintfmt+0x3a0>
+                return;
+            }
+            putch(ch, putdat);
+  8009df:	83 ec 08             	sub    $0x8,%esp
+  8009e2:	ff 75 0c             	pushl  0xc(%ebp)
+  8009e5:	53                   	push   %ebx
+  8009e6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009e9:	ff d0                	call   *%eax
+  8009eb:	83 c4 10             	add    $0x10,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009ee:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009f1:	8d 50 01             	lea    0x1(%eax),%edx
+  8009f4:	89 55 10             	mov    %edx,0x10(%ebp)
+  8009f7:	0f b6 00             	movzbl (%eax),%eax
+  8009fa:	0f b6 d8             	movzbl %al,%ebx
+  8009fd:	83 fb 25             	cmp    $0x25,%ebx
+  800a00:	75 d5                	jne    8009d7 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a02:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a06:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a10:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a13:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a1a:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a1d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a20:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a23:	8d 50 01             	lea    0x1(%eax),%edx
+  800a26:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a29:	0f b6 00             	movzbl (%eax),%eax
+  800a2c:	0f b6 d8             	movzbl %al,%ebx
+  800a2f:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a32:	83 f8 55             	cmp    $0x55,%eax
+  800a35:	0f 87 05 03 00 00    	ja     800d40 <vprintfmt+0x373>
+  800a3b:	8b 04 85 08 12 80 00 	mov    0x801208(,%eax,4),%eax
+  800a42:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a44:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a48:	eb d6                	jmp    800a20 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a4a:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800a4e:	eb d0                	jmp    800a20 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a50:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800a57:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a5a:	89 d0                	mov    %edx,%eax
+  800a5c:	c1 e0 02             	shl    $0x2,%eax
+  800a5f:	01 d0                	add    %edx,%eax
+  800a61:	01 c0                	add    %eax,%eax
+  800a63:	01 d8                	add    %ebx,%eax
+  800a65:	83 e8 30             	sub    $0x30,%eax
+  800a68:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800a6b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a6e:	0f b6 00             	movzbl (%eax),%eax
+  800a71:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800a74:	83 fb 2f             	cmp    $0x2f,%ebx
+  800a77:	7e 39                	jle    800ab2 <vprintfmt+0xe5>
+  800a79:	83 fb 39             	cmp    $0x39,%ebx
+  800a7c:	7f 34                	jg     800ab2 <vprintfmt+0xe5>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a7e:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  800a82:	eb d3                	jmp    800a57 <vprintfmt+0x8a>
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800a84:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a87:	8d 50 04             	lea    0x4(%eax),%edx
+  800a8a:	89 55 14             	mov    %edx,0x14(%ebp)
+  800a8d:	8b 00                	mov    (%eax),%eax
+  800a8f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800a92:	eb 1f                	jmp    800ab3 <vprintfmt+0xe6>
+
+        case '.':
+            if (width < 0)
+  800a94:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800a98:	79 86                	jns    800a20 <vprintfmt+0x53>
+                width = 0;
+  800a9a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800aa1:	e9 7a ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800aa6:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800aad:	e9 6e ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+            goto process_precision;
+  800ab2:	90                   	nop
+        case '#':
+            altflag = 1;
+            goto reswitch;
+
+        process_precision:
+            if (width < 0)
+  800ab3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ab7:	0f 89 63 ff ff ff    	jns    800a20 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800abd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ac0:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800ac3:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800aca:	e9 51 ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800acf:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800ad3:	e9 48 ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800ad8:	8b 45 14             	mov    0x14(%ebp),%eax
+  800adb:	8d 50 04             	lea    0x4(%eax),%edx
+  800ade:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ae1:	8b 00                	mov    (%eax),%eax
+  800ae3:	83 ec 08             	sub    $0x8,%esp
+  800ae6:	ff 75 0c             	pushl  0xc(%ebp)
+  800ae9:	50                   	push   %eax
+  800aea:	8b 45 08             	mov    0x8(%ebp),%eax
+  800aed:	ff d0                	call   *%eax
+  800aef:	83 c4 10             	add    $0x10,%esp
+            break;
+  800af2:	e9 71 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800af7:	8b 45 14             	mov    0x14(%ebp),%eax
+  800afa:	8d 50 04             	lea    0x4(%eax),%edx
+  800afd:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b00:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b02:	85 db                	test   %ebx,%ebx
+  800b04:	79 02                	jns    800b08 <vprintfmt+0x13b>
+                err = -err;
+  800b06:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b08:	83 fb 18             	cmp    $0x18,%ebx
+  800b0b:	7f 0b                	jg     800b18 <vprintfmt+0x14b>
+  800b0d:	8b 34 9d 80 11 80 00 	mov    0x801180(,%ebx,4),%esi
+  800b14:	85 f6                	test   %esi,%esi
+  800b16:	75 19                	jne    800b31 <vprintfmt+0x164>
+                printfmt(putch, putdat, "error %d", err);
+  800b18:	53                   	push   %ebx
+  800b19:	68 f5 11 80 00       	push   $0x8011f5
+  800b1e:	ff 75 0c             	pushl  0xc(%ebp)
+  800b21:	ff 75 08             	pushl  0x8(%ebp)
+  800b24:	e8 80 fe ff ff       	call   8009a9 <printfmt>
+  800b29:	83 c4 10             	add    $0x10,%esp
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b2c:	e9 37 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  800b31:	56                   	push   %esi
+  800b32:	68 fe 11 80 00       	push   $0x8011fe
+  800b37:	ff 75 0c             	pushl  0xc(%ebp)
+  800b3a:	ff 75 08             	pushl  0x8(%ebp)
+  800b3d:	e8 67 fe ff ff       	call   8009a9 <printfmt>
+  800b42:	83 c4 10             	add    $0x10,%esp
+            }
+            break;
+  800b45:	e9 1e 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800b4a:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b4d:	8d 50 04             	lea    0x4(%eax),%edx
+  800b50:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b53:	8b 30                	mov    (%eax),%esi
+  800b55:	85 f6                	test   %esi,%esi
+  800b57:	75 05                	jne    800b5e <vprintfmt+0x191>
+                p = "(null)";
+  800b59:	be 01 12 80 00       	mov    $0x801201,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800b5e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b62:	7e 76                	jle    800bda <vprintfmt+0x20d>
+  800b64:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800b68:	74 70                	je     800bda <vprintfmt+0x20d>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b6a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b6d:	83 ec 08             	sub    $0x8,%esp
+  800b70:	50                   	push   %eax
+  800b71:	56                   	push   %esi
+  800b72:	e8 17 f8 ff ff       	call   80038e <strnlen>
+  800b77:	83 c4 10             	add    $0x10,%esp
+  800b7a:	89 c2                	mov    %eax,%edx
+  800b7c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800b7f:	29 d0                	sub    %edx,%eax
+  800b81:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b84:	eb 17                	jmp    800b9d <vprintfmt+0x1d0>
+                    putch(padc, putdat);
+  800b86:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800b8a:	83 ec 08             	sub    $0x8,%esp
+  800b8d:	ff 75 0c             	pushl  0xc(%ebp)
+  800b90:	50                   	push   %eax
+  800b91:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b94:	ff d0                	call   *%eax
+  800b96:	83 c4 10             	add    $0x10,%esp
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b99:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800b9d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ba1:	7f e3                	jg     800b86 <vprintfmt+0x1b9>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800ba3:	eb 35                	jmp    800bda <vprintfmt+0x20d>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800ba5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800ba9:	74 1c                	je     800bc7 <vprintfmt+0x1fa>
+  800bab:	83 fb 1f             	cmp    $0x1f,%ebx
+  800bae:	7e 05                	jle    800bb5 <vprintfmt+0x1e8>
+  800bb0:	83 fb 7e             	cmp    $0x7e,%ebx
+  800bb3:	7e 12                	jle    800bc7 <vprintfmt+0x1fa>
+                    putch('?', putdat);
+  800bb5:	83 ec 08             	sub    $0x8,%esp
+  800bb8:	ff 75 0c             	pushl  0xc(%ebp)
+  800bbb:	6a 3f                	push   $0x3f
+  800bbd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bc0:	ff d0                	call   *%eax
+  800bc2:	83 c4 10             	add    $0x10,%esp
+  800bc5:	eb 0f                	jmp    800bd6 <vprintfmt+0x209>
+                }
+                else {
+                    putch(ch, putdat);
+  800bc7:	83 ec 08             	sub    $0x8,%esp
+  800bca:	ff 75 0c             	pushl  0xc(%ebp)
+  800bcd:	53                   	push   %ebx
+  800bce:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bd1:	ff d0                	call   *%eax
+  800bd3:	83 c4 10             	add    $0x10,%esp
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bd6:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800bda:	89 f0                	mov    %esi,%eax
+  800bdc:	8d 70 01             	lea    0x1(%eax),%esi
+  800bdf:	0f b6 00             	movzbl (%eax),%eax
+  800be2:	0f be d8             	movsbl %al,%ebx
+  800be5:	85 db                	test   %ebx,%ebx
+  800be7:	74 26                	je     800c0f <vprintfmt+0x242>
+  800be9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800bed:	78 b6                	js     800ba5 <vprintfmt+0x1d8>
+  800bef:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  800bf3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800bf7:	79 ac                	jns    800ba5 <vprintfmt+0x1d8>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800bf9:	eb 14                	jmp    800c0f <vprintfmt+0x242>
+                putch(' ', putdat);
+  800bfb:	83 ec 08             	sub    $0x8,%esp
+  800bfe:	ff 75 0c             	pushl  0xc(%ebp)
+  800c01:	6a 20                	push   $0x20
+  800c03:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c06:	ff d0                	call   *%eax
+  800c08:	83 c4 10             	add    $0x10,%esp
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c0b:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c0f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c13:	7f e6                	jg     800bfb <vprintfmt+0x22e>
+                putch(' ', putdat);
+            }
+            break;
+  800c15:	e9 4e 01 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c1a:	83 ec 08             	sub    $0x8,%esp
+  800c1d:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c20:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c23:	50                   	push   %eax
+  800c24:	e8 39 fd ff ff       	call   800962 <getint>
+  800c29:	83 c4 10             	add    $0x10,%esp
+  800c2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c2f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c32:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c35:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c38:	85 d2                	test   %edx,%edx
+  800c3a:	79 23                	jns    800c5f <vprintfmt+0x292>
+                putch('-', putdat);
+  800c3c:	83 ec 08             	sub    $0x8,%esp
+  800c3f:	ff 75 0c             	pushl  0xc(%ebp)
+  800c42:	6a 2d                	push   $0x2d
+  800c44:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c47:	ff d0                	call   *%eax
+  800c49:	83 c4 10             	add    $0x10,%esp
+                num = -(long long)num;
+  800c4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c4f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c52:	f7 d8                	neg    %eax
+  800c54:	83 d2 00             	adc    $0x0,%edx
+  800c57:	f7 da                	neg    %edx
+  800c59:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c5c:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800c5f:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c66:	e9 9f 00 00 00       	jmp    800d0a <vprintfmt+0x33d>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800c6b:	83 ec 08             	sub    $0x8,%esp
+  800c6e:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c71:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c74:	50                   	push   %eax
+  800c75:	e8 99 fc ff ff       	call   800913 <getuint>
+  800c7a:	83 c4 10             	add    $0x10,%esp
+  800c7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c80:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800c83:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c8a:	eb 7e                	jmp    800d0a <vprintfmt+0x33d>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800c8c:	83 ec 08             	sub    $0x8,%esp
+  800c8f:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c92:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c95:	50                   	push   %eax
+  800c96:	e8 78 fc ff ff       	call   800913 <getuint>
+  800c9b:	83 c4 10             	add    $0x10,%esp
+  800c9e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ca1:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800ca4:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800cab:	eb 5d                	jmp    800d0a <vprintfmt+0x33d>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800cad:	83 ec 08             	sub    $0x8,%esp
+  800cb0:	ff 75 0c             	pushl  0xc(%ebp)
+  800cb3:	6a 30                	push   $0x30
+  800cb5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb8:	ff d0                	call   *%eax
+  800cba:	83 c4 10             	add    $0x10,%esp
+            putch('x', putdat);
+  800cbd:	83 ec 08             	sub    $0x8,%esp
+  800cc0:	ff 75 0c             	pushl  0xc(%ebp)
+  800cc3:	6a 78                	push   $0x78
+  800cc5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cc8:	ff d0                	call   *%eax
+  800cca:	83 c4 10             	add    $0x10,%esp
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800ccd:	8b 45 14             	mov    0x14(%ebp),%eax
+  800cd0:	8d 50 04             	lea    0x4(%eax),%edx
+  800cd3:	89 55 14             	mov    %edx,0x14(%ebp)
+  800cd6:	8b 00                	mov    (%eax),%eax
+  800cd8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cdb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800ce2:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800ce9:	eb 1f                	jmp    800d0a <vprintfmt+0x33d>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800ceb:	83 ec 08             	sub    $0x8,%esp
+  800cee:	ff 75 e0             	pushl  -0x20(%ebp)
+  800cf1:	8d 45 14             	lea    0x14(%ebp),%eax
+  800cf4:	50                   	push   %eax
+  800cf5:	e8 19 fc ff ff       	call   800913 <getuint>
+  800cfa:	83 c4 10             	add    $0x10,%esp
+  800cfd:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d00:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d03:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d0a:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d11:	83 ec 04             	sub    $0x4,%esp
+  800d14:	52                   	push   %edx
+  800d15:	ff 75 e8             	pushl  -0x18(%ebp)
+  800d18:	50                   	push   %eax
+  800d19:	ff 75 f4             	pushl  -0xc(%ebp)
+  800d1c:	ff 75 f0             	pushl  -0x10(%ebp)
+  800d1f:	ff 75 0c             	pushl  0xc(%ebp)
+  800d22:	ff 75 08             	pushl  0x8(%ebp)
+  800d25:	e8 f8 fa ff ff       	call   800822 <printnum>
+  800d2a:	83 c4 20             	add    $0x20,%esp
+            break;
+  800d2d:	eb 39                	jmp    800d68 <vprintfmt+0x39b>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800d2f:	83 ec 08             	sub    $0x8,%esp
+  800d32:	ff 75 0c             	pushl  0xc(%ebp)
+  800d35:	53                   	push   %ebx
+  800d36:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d39:	ff d0                	call   *%eax
+  800d3b:	83 c4 10             	add    $0x10,%esp
+            break;
+  800d3e:	eb 28                	jmp    800d68 <vprintfmt+0x39b>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800d40:	83 ec 08             	sub    $0x8,%esp
+  800d43:	ff 75 0c             	pushl  0xc(%ebp)
+  800d46:	6a 25                	push   $0x25
+  800d48:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d4b:	ff d0                	call   *%eax
+  800d4d:	83 c4 10             	add    $0x10,%esp
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800d50:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d54:	eb 04                	jmp    800d5a <vprintfmt+0x38d>
+  800d56:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d5a:	8b 45 10             	mov    0x10(%ebp),%eax
+  800d5d:	83 e8 01             	sub    $0x1,%eax
+  800d60:	0f b6 00             	movzbl (%eax),%eax
+  800d63:	3c 25                	cmp    $0x25,%al
+  800d65:	75 ef                	jne    800d56 <vprintfmt+0x389>
+                /* do nothing */;
+            break;
+  800d67:	90                   	nop
+        }
+    }
+  800d68:	e9 68 fc ff ff       	jmp    8009d5 <vprintfmt+0x8>
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+            if (ch == '\0') {
+                return;
+  800d6d:	90                   	nop
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  800d6e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  800d71:	5b                   	pop    %ebx
+  800d72:	5e                   	pop    %esi
+  800d73:	5d                   	pop    %ebp
+  800d74:	c3                   	ret    
+
+00800d75 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800d75:	55                   	push   %ebp
+  800d76:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800d78:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d7b:	8b 40 08             	mov    0x8(%eax),%eax
+  800d7e:	8d 50 01             	lea    0x1(%eax),%edx
+  800d81:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d84:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800d87:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d8a:	8b 10                	mov    (%eax),%edx
+  800d8c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d8f:	8b 40 04             	mov    0x4(%eax),%eax
+  800d92:	39 c2                	cmp    %eax,%edx
+  800d94:	73 12                	jae    800da8 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800d96:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d99:	8b 00                	mov    (%eax),%eax
+  800d9b:	8d 48 01             	lea    0x1(%eax),%ecx
+  800d9e:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800da1:	89 0a                	mov    %ecx,(%edx)
+  800da3:	8b 55 08             	mov    0x8(%ebp),%edx
+  800da6:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800da8:	90                   	nop
+  800da9:	5d                   	pop    %ebp
+  800daa:	c3                   	ret    
+
+00800dab <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800dab:	55                   	push   %ebp
+  800dac:	89 e5                	mov    %esp,%ebp
+  800dae:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800db1:	8d 45 14             	lea    0x14(%ebp),%eax
+  800db4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800db7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800dba:	50                   	push   %eax
+  800dbb:	ff 75 10             	pushl  0x10(%ebp)
+  800dbe:	ff 75 0c             	pushl  0xc(%ebp)
+  800dc1:	ff 75 08             	pushl  0x8(%ebp)
+  800dc4:	e8 0b 00 00 00       	call   800dd4 <vsnprintf>
+  800dc9:	83 c4 10             	add    $0x10,%esp
+  800dcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800dcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800dd2:	c9                   	leave  
+  800dd3:	c3                   	ret    
+
+00800dd4 <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800dd4:	55                   	push   %ebp
+  800dd5:	89 e5                	mov    %esp,%ebp
+  800dd7:	83 ec 18             	sub    $0x18,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800dda:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ddd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800de0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800de3:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800de6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de9:	01 d0                	add    %edx,%eax
+  800deb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800dee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800df5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800df9:	74 0a                	je     800e05 <vsnprintf+0x31>
+  800dfb:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800dfe:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e01:	39 c2                	cmp    %eax,%edx
+  800e03:	76 07                	jbe    800e0c <vsnprintf+0x38>
+        return -E_INVAL;
+  800e05:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e0a:	eb 20                	jmp    800e2c <vsnprintf+0x58>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e0c:	ff 75 14             	pushl  0x14(%ebp)
+  800e0f:	ff 75 10             	pushl  0x10(%ebp)
+  800e12:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800e15:	50                   	push   %eax
+  800e16:	68 75 0d 80 00       	push   $0x800d75
+  800e1b:	e8 ad fb ff ff       	call   8009cd <vprintfmt>
+  800e20:	83 c4 10             	add    $0x10,%esp
+    // null terminate the buffer
+    *b.buf = '\0';
+  800e23:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e26:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800e29:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e2c:	c9                   	leave  
+  800e2d:	c3                   	ret    
+
+00800e2e <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800e2e:	55                   	push   %ebp
+  800e2f:	89 e5                	mov    %esp,%ebp
+  800e31:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800e34:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e37:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800e3d:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800e40:	b8 20 00 00 00       	mov    $0x20,%eax
+  800e45:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800e48:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800e4b:	89 c1                	mov    %eax,%ecx
+  800e4d:	d3 ea                	shr    %cl,%edx
+  800e4f:	89 d0                	mov    %edx,%eax
+}
+  800e51:	c9                   	leave  
+  800e52:	c3                   	ret    
+
+00800e53 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800e53:	55                   	push   %ebp
+  800e54:	89 e5                	mov    %esp,%ebp
+  800e56:	57                   	push   %edi
+  800e57:	56                   	push   %esi
+  800e58:	53                   	push   %ebx
+  800e59:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800e5c:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e61:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800e67:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800e6d:	6b f0 05             	imul   $0x5,%eax,%esi
+  800e70:	01 fe                	add    %edi,%esi
+  800e72:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800e77:	f7 e7                	mul    %edi
+  800e79:	01 d6                	add    %edx,%esi
+  800e7b:	89 f2                	mov    %esi,%edx
+  800e7d:	83 c0 0b             	add    $0xb,%eax
+  800e80:	83 d2 00             	adc    $0x0,%edx
+  800e83:	89 c7                	mov    %eax,%edi
+  800e85:	83 e7 ff             	and    $0xffffffff,%edi
+  800e88:	89 f9                	mov    %edi,%ecx
+  800e8a:	0f b7 da             	movzwl %dx,%ebx
+  800e8d:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800e93:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800e99:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e9e:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ea4:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ea8:	c1 ea 0c             	shr    $0xc,%edx
+  800eab:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800eae:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800eb1:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800eb8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ebb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ebe:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ec1:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800ec4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec7:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800eca:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ece:	74 1c                	je     800eec <rand+0x99>
+  800ed0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ed3:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ed8:	f7 75 dc             	divl   -0x24(%ebp)
+  800edb:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800ede:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ee1:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ee6:	f7 75 dc             	divl   -0x24(%ebp)
+  800ee9:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800eec:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800eef:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800ef2:	f7 75 dc             	divl   -0x24(%ebp)
+  800ef5:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ef8:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800efb:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800efe:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800f01:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f04:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f07:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800f0a:	83 c4 24             	add    $0x24,%esp
+  800f0d:	5b                   	pop    %ebx
+  800f0e:	5e                   	pop    %esi
+  800f0f:	5f                   	pop    %edi
+  800f10:	5d                   	pop    %ebp
+  800f11:	c3                   	ret    
+
+00800f12 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800f12:	55                   	push   %ebp
+  800f13:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800f15:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f18:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f1d:	a3 00 20 80 00       	mov    %eax,0x802000
+  800f22:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800f28:	90                   	nop
+  800f29:	5d                   	pop    %ebp
+  800f2a:	c3                   	ret    
+
+00800f2b <main>:
+#include <ulib.h>
+
+int magic = -0x10384;
+
+int
+main(void) {
+  800f2b:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  800f2f:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f32:	ff 71 fc             	pushl  -0x4(%ecx)
+  800f35:	55                   	push   %ebp
+  800f36:	89 e5                	mov    %esp,%ebp
+  800f38:	51                   	push   %ecx
+  800f39:	83 ec 14             	sub    $0x14,%esp
+    int pid, code;
+    cprintf("I am the parent. Forking the child...\n");
+  800f3c:	83 ec 0c             	sub    $0xc,%esp
+  800f3f:	68 60 13 80 00       	push   $0x801360
+  800f44:	e8 90 f3 ff ff       	call   8002d9 <cprintf>
+  800f49:	83 c4 10             	add    $0x10,%esp
+    if ((pid = fork()) == 0) {
+  800f4c:	e8 8c f2 ff ff       	call   8001dd <fork>
+  800f51:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800f54:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+  800f58:	75 41                	jne    800f9b <main+0x70>
+        cprintf("I am the child.\n");
+  800f5a:	83 ec 0c             	sub    $0xc,%esp
+  800f5d:	68 87 13 80 00       	push   $0x801387
+  800f62:	e8 72 f3 ff ff       	call   8002d9 <cprintf>
+  800f67:	83 c4 10             	add    $0x10,%esp
+        yield();
+  800f6a:	e8 ab f2 ff ff       	call   80021a <yield>
+        yield();
+  800f6f:	e8 a6 f2 ff ff       	call   80021a <yield>
+        yield();
+  800f74:	e8 a1 f2 ff ff       	call   80021a <yield>
+        yield();
+  800f79:	e8 9c f2 ff ff       	call   80021a <yield>
+        yield();
+  800f7e:	e8 97 f2 ff ff       	call   80021a <yield>
+        yield();
+  800f83:	e8 92 f2 ff ff       	call   80021a <yield>
+        yield();
+  800f88:	e8 8d f2 ff ff       	call   80021a <yield>
+        exit(magic);
+  800f8d:	a1 08 20 80 00       	mov    0x802008,%eax
+  800f92:	83 ec 0c             	sub    $0xc,%esp
+  800f95:	50                   	push   %eax
+  800f96:	e8 1c f2 ff ff       	call   8001b7 <exit>
+    }
+    else {
+        cprintf("I am parent, fork a child pid %d\n",pid);
+  800f9b:	83 ec 08             	sub    $0x8,%esp
+  800f9e:	ff 75 f4             	pushl  -0xc(%ebp)
+  800fa1:	68 98 13 80 00       	push   $0x801398
+  800fa6:	e8 2e f3 ff ff       	call   8002d9 <cprintf>
+  800fab:	83 c4 10             	add    $0x10,%esp
+    }
+    assert(pid > 0);
+  800fae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+  800fb2:	7f 16                	jg     800fca <main+0x9f>
+  800fb4:	68 ba 13 80 00       	push   $0x8013ba
+  800fb9:	68 c2 13 80 00       	push   $0x8013c2
+  800fbe:	6a 18                	push   $0x18
+  800fc0:	68 d7 13 80 00       	push   $0x8013d7
+  800fc5:	e8 56 f0 ff ff       	call   800020 <__panic>
+    cprintf("I am the parent, waiting now..\n");
+  800fca:	83 ec 0c             	sub    $0xc,%esp
+  800fcd:	68 e4 13 80 00       	push   $0x8013e4
+  800fd2:	e8 02 f3 ff ff       	call   8002d9 <cprintf>
+  800fd7:	83 c4 10             	add    $0x10,%esp
+
+    assert(waitpid(pid, &code) == 0 && code == magic);
+  800fda:	83 ec 08             	sub    $0x8,%esp
+  800fdd:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800fe0:	50                   	push   %eax
+  800fe1:	ff 75 f4             	pushl  -0xc(%ebp)
+  800fe4:	e8 18 f2 ff ff       	call   800201 <waitpid>
+  800fe9:	83 c4 10             	add    $0x10,%esp
+  800fec:	85 c0                	test   %eax,%eax
+  800fee:	75 0c                	jne    800ffc <main+0xd1>
+  800ff0:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800ff3:	a1 08 20 80 00       	mov    0x802008,%eax
+  800ff8:	39 c2                	cmp    %eax,%edx
+  800ffa:	74 16                	je     801012 <main+0xe7>
+  800ffc:	68 04 14 80 00       	push   $0x801404
+  801001:	68 c2 13 80 00       	push   $0x8013c2
+  801006:	6a 1b                	push   $0x1b
+  801008:	68 d7 13 80 00       	push   $0x8013d7
+  80100d:	e8 0e f0 ff ff       	call   800020 <__panic>
+    assert(waitpid(pid, &code) != 0 && wait() != 0);
+  801012:	83 ec 08             	sub    $0x8,%esp
+  801015:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  801018:	50                   	push   %eax
+  801019:	ff 75 f4             	pushl  -0xc(%ebp)
+  80101c:	e8 e0 f1 ff ff       	call   800201 <waitpid>
+  801021:	83 c4 10             	add    $0x10,%esp
+  801024:	85 c0                	test   %eax,%eax
+  801026:	74 09                	je     801031 <main+0x106>
+  801028:	e8 bd f1 ff ff       	call   8001ea <wait>
+  80102d:	85 c0                	test   %eax,%eax
+  80102f:	75 16                	jne    801047 <main+0x11c>
+  801031:	68 30 14 80 00       	push   $0x801430
+  801036:	68 c2 13 80 00       	push   $0x8013c2
+  80103b:	6a 1c                	push   $0x1c
+  80103d:	68 d7 13 80 00       	push   $0x8013d7
+  801042:	e8 d9 ef ff ff       	call   800020 <__panic>
+    cprintf("waitpid %d ok.\n", pid);
+  801047:	83 ec 08             	sub    $0x8,%esp
+  80104a:	ff 75 f4             	pushl  -0xc(%ebp)
+  80104d:	68 58 14 80 00       	push   $0x801458
+  801052:	e8 82 f2 ff ff       	call   8002d9 <cprintf>
+  801057:	83 c4 10             	add    $0x10,%esp
+
+    cprintf("exit pass.\n");
+  80105a:	83 ec 0c             	sub    $0xc,%esp
+  80105d:	68 68 14 80 00       	push   $0x801468
+  801062:	e8 72 f2 ff ff       	call   8002d9 <cprintf>
+  801067:	83 c4 10             	add    $0x10,%esp
+    return 0;
+  80106a:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  80106f:	8b 4d fc             	mov    -0x4(%ebp),%ecx
+  801072:	c9                   	leave  
+  801073:	8d 61 fc             	lea    -0x4(%ecx),%esp
+  801076:	c3                   	ret    
diff -r -u -P lab6_original/obj/user/exit.d lab6/obj/user/exit.d
--- lab6_original/obj/user/exit.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/exit.d	2016-04-29 16:22:06.852516425 +0800
@@ -0,0 +1,2 @@
+obj/user/exit.o obj/user/exit.d: user/exit.c libs/stdio.h libs/defs.h \
+ libs/stdarg.h user/libs/ulib.h
Binary files lab6_original/obj/user/exit.o and lab6/obj/user/exit.o differ
diff -r -u -P lab6_original/obj/user/exit.sym lab6/obj/user/exit.sym
--- lab6_original/obj/user/exit.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/exit.sym	2016-04-29 16:22:07.764582791 +0800
@@ -0,0 +1,77 @@
+00800020 .text
+00801080 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202ddd .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b5 syscall
+00000000 ulib.c
+00000000 stdio.c
+0080028c cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+00801180 error_string
+00800822 printnum
+00800913 getuint
+00800962 getint
+00800d75 sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 exit.c
+008003be strcpy
+0080021a yield
+00800201 waitpid
+00800141 sys_yield
+008006d7 memmove
+00800dab snprintf
+008009cd vprintfmt
+0080011d sys_fork
+008002d9 cprintf
+0080023e getpid
+0080077a memcpy
+00800266 lab6_set_priority
+00800dd4 vsnprintf
+0080034d umain
+00202ddc __STAB_END__
+00800150 sys_kill
+00202ddd __STABSTR_BEGIN__
+00800020 __panic
+0080053a strtol
+0080038e strnlen
+0080024b print_pgdir
+00800228 kill
+0080050b strfind
+008001ea wait
+0080027d _start
+00800e53 rand
+00800482 strncmp
+00800171 sys_putc
+008003fe strncpy
+008007ca memcmp
+008001dd fork
+00800697 memset
+00800f2b main
+00800f12 srand
+00800e2e hash32
+008009a9 printfmt
+00203bdc __STABSTR_END__
+00800438 strcmp
+00800259 gettime_msec
+00800192 sys_gettime
+00802008 magic
+008002b0 vcprintf
+0080006e __warn
+008002ff cputs
+008001a1 sys_lab6_set_priority
+008001b7 exit
+0080012c sys_wait
+0080010b sys_exit
+00200010 __STAB_BEGIN__
+00800366 strlen
+00800183 sys_pgdir
+008004d8 strchr
+00800162 sys_getpid
diff -r -u -P lab6_original/obj/user/faultread.asm lab6/obj/user/faultread.asm
--- lab6_original/obj/user/faultread.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/faultread.asm	2016-04-29 16:22:07.696875288 +0800
@@ -0,0 +1,2584 @@
+
+obj/__user_faultread.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 18             	sub    $0x18,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	83 ec 04             	sub    $0x4,%esp
+  80002f:	ff 75 0c             	pushl  0xc(%ebp)
+  800032:	ff 75 08             	pushl  0x8(%ebp)
+  800035:	68 80 0f 80 00       	push   $0x800f80
+  80003a:	e8 9a 02 00 00       	call   8002d9 <cprintf>
+  80003f:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800042:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800045:	83 ec 08             	sub    $0x8,%esp
+  800048:	50                   	push   %eax
+  800049:	ff 75 10             	pushl  0x10(%ebp)
+  80004c:	e8 5f 02 00 00       	call   8002b0 <vcprintf>
+  800051:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  800054:	83 ec 0c             	sub    $0xc,%esp
+  800057:	68 9a 0f 80 00       	push   $0x800f9a
+  80005c:	e8 78 02 00 00       	call   8002d9 <cprintf>
+  800061:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	83 ec 0c             	sub    $0xc,%esp
+  800067:	6a f6                	push   $0xfffffff6
+  800069:	e8 49 01 00 00       	call   8001b7 <exit>
+
+0080006e <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80006e:	55                   	push   %ebp
+  80006f:	89 e5                	mov    %esp,%ebp
+  800071:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800074:	8d 45 14             	lea    0x14(%ebp),%eax
+  800077:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007a:	83 ec 04             	sub    $0x4,%esp
+  80007d:	ff 75 0c             	pushl  0xc(%ebp)
+  800080:	ff 75 08             	pushl  0x8(%ebp)
+  800083:	68 9c 0f 80 00       	push   $0x800f9c
+  800088:	e8 4c 02 00 00       	call   8002d9 <cprintf>
+  80008d:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800090:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800093:	83 ec 08             	sub    $0x8,%esp
+  800096:	50                   	push   %eax
+  800097:	ff 75 10             	pushl  0x10(%ebp)
+  80009a:	e8 11 02 00 00       	call   8002b0 <vcprintf>
+  80009f:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  8000a2:	83 ec 0c             	sub    $0xc,%esp
+  8000a5:	68 9a 0f 80 00       	push   $0x800f9a
+  8000aa:	e8 2a 02 00 00       	call   8002d9 <cprintf>
+  8000af:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8000b2:	90                   	nop
+  8000b3:	c9                   	leave  
+  8000b4:	c3                   	ret    
+
+008000b5 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b5:	55                   	push   %ebp
+  8000b6:	89 e5                	mov    %esp,%ebp
+  8000b8:	57                   	push   %edi
+  8000b9:	56                   	push   %esi
+  8000ba:	53                   	push   %ebx
+  8000bb:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000be:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cb:	eb 16                	jmp    8000e3 <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8000cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d0:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d3:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d6:	8b 10                	mov    (%eax),%edx
+  8000d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000db:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000df:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8000e3:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e7:	7e e4                	jle    8000cd <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000e9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ec:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000ef:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f2:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f5:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8000f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fb:	cd 80                	int    $0x80
+  8000fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  800100:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800103:	83 c4 20             	add    $0x20,%esp
+  800106:	5b                   	pop    %ebx
+  800107:	5e                   	pop    %esi
+  800108:	5f                   	pop    %edi
+  800109:	5d                   	pop    %ebp
+  80010a:	c3                   	ret    
+
+0080010b <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010b:	55                   	push   %ebp
+  80010c:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_exit, error_code);
+  80010e:	ff 75 08             	pushl  0x8(%ebp)
+  800111:	6a 01                	push   $0x1
+  800113:	e8 9d ff ff ff       	call   8000b5 <syscall>
+  800118:	83 c4 08             	add    $0x8,%esp
+}
+  80011b:	c9                   	leave  
+  80011c:	c3                   	ret    
+
+0080011d <sys_fork>:
+
+int
+sys_fork(void) {
+  80011d:	55                   	push   %ebp
+  80011e:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_fork);
+  800120:	6a 02                	push   $0x2
+  800122:	e8 8e ff ff ff       	call   8000b5 <syscall>
+  800127:	83 c4 04             	add    $0x4,%esp
+}
+  80012a:	c9                   	leave  
+  80012b:	c3                   	ret    
+
+0080012c <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80012c:	55                   	push   %ebp
+  80012d:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_wait, pid, store);
+  80012f:	ff 75 0c             	pushl  0xc(%ebp)
+  800132:	ff 75 08             	pushl  0x8(%ebp)
+  800135:	6a 03                	push   $0x3
+  800137:	e8 79 ff ff ff       	call   8000b5 <syscall>
+  80013c:	83 c4 0c             	add    $0xc,%esp
+}
+  80013f:	c9                   	leave  
+  800140:	c3                   	ret    
+
+00800141 <sys_yield>:
+
+int
+sys_yield(void) {
+  800141:	55                   	push   %ebp
+  800142:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_yield);
+  800144:	6a 0a                	push   $0xa
+  800146:	e8 6a ff ff ff       	call   8000b5 <syscall>
+  80014b:	83 c4 04             	add    $0x4,%esp
+}
+  80014e:	c9                   	leave  
+  80014f:	c3                   	ret    
+
+00800150 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800150:	55                   	push   %ebp
+  800151:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_kill, pid);
+  800153:	ff 75 08             	pushl  0x8(%ebp)
+  800156:	6a 0c                	push   $0xc
+  800158:	e8 58 ff ff ff       	call   8000b5 <syscall>
+  80015d:	83 c4 08             	add    $0x8,%esp
+}
+  800160:	c9                   	leave  
+  800161:	c3                   	ret    
+
+00800162 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800162:	55                   	push   %ebp
+  800163:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_getpid);
+  800165:	6a 12                	push   $0x12
+  800167:	e8 49 ff ff ff       	call   8000b5 <syscall>
+  80016c:	83 c4 04             	add    $0x4,%esp
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_putc, c);
+  800174:	ff 75 08             	pushl  0x8(%ebp)
+  800177:	6a 1e                	push   $0x1e
+  800179:	e8 37 ff ff ff       	call   8000b5 <syscall>
+  80017e:	83 c4 08             	add    $0x8,%esp
+}
+  800181:	c9                   	leave  
+  800182:	c3                   	ret    
+
+00800183 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800183:	55                   	push   %ebp
+  800184:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_pgdir);
+  800186:	6a 1f                	push   $0x1f
+  800188:	e8 28 ff ff ff       	call   8000b5 <syscall>
+  80018d:	83 c4 04             	add    $0x4,%esp
+}
+  800190:	c9                   	leave  
+  800191:	c3                   	ret    
+
+00800192 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  800192:	55                   	push   %ebp
+  800193:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_gettime);
+  800195:	6a 11                	push   $0x11
+  800197:	e8 19 ff ff ff       	call   8000b5 <syscall>
+  80019c:	83 c4 04             	add    $0x4,%esp
+}
+  80019f:	c9                   	leave  
+  8001a0:	c3                   	ret    
+
+008001a1 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001a1:	55                   	push   %ebp
+  8001a2:	89 e5                	mov    %esp,%ebp
+    syscall(SYS_lab6_set_priority, priority);
+  8001a4:	ff 75 08             	pushl  0x8(%ebp)
+  8001a7:	68 ff 00 00 00       	push   $0xff
+  8001ac:	e8 04 ff ff ff       	call   8000b5 <syscall>
+  8001b1:	83 c4 08             	add    $0x8,%esp
+}
+  8001b4:	90                   	nop
+  8001b5:	c9                   	leave  
+  8001b6:	c3                   	ret    
+
+008001b7 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001b7:	55                   	push   %ebp
+  8001b8:	89 e5                	mov    %esp,%ebp
+  8001ba:	83 ec 08             	sub    $0x8,%esp
+    sys_exit(error_code);
+  8001bd:	83 ec 0c             	sub    $0xc,%esp
+  8001c0:	ff 75 08             	pushl  0x8(%ebp)
+  8001c3:	e8 43 ff ff ff       	call   80010b <sys_exit>
+  8001c8:	83 c4 10             	add    $0x10,%esp
+    cprintf("BUG: exit failed.\n");
+  8001cb:	83 ec 0c             	sub    $0xc,%esp
+  8001ce:	68 b8 0f 80 00       	push   $0x800fb8
+  8001d3:	e8 01 01 00 00       	call   8002d9 <cprintf>
+  8001d8:	83 c4 10             	add    $0x10,%esp
+    while (1);
+  8001db:	eb fe                	jmp    8001db <exit+0x24>
+
+008001dd <fork>:
+}
+
+int
+fork(void) {
+  8001dd:	55                   	push   %ebp
+  8001de:	89 e5                	mov    %esp,%ebp
+  8001e0:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8001e3:	e8 35 ff ff ff       	call   80011d <sys_fork>
+}
+  8001e8:	c9                   	leave  
+  8001e9:	c3                   	ret    
+
+008001ea <wait>:
+
+int
+wait(void) {
+  8001ea:	55                   	push   %ebp
+  8001eb:	89 e5                	mov    %esp,%ebp
+  8001ed:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(0, NULL);
+  8001f0:	83 ec 08             	sub    $0x8,%esp
+  8001f3:	6a 00                	push   $0x0
+  8001f5:	6a 00                	push   $0x0
+  8001f7:	e8 30 ff ff ff       	call   80012c <sys_wait>
+  8001fc:	83 c4 10             	add    $0x10,%esp
+}
+  8001ff:	c9                   	leave  
+  800200:	c3                   	ret    
+
+00800201 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800201:	55                   	push   %ebp
+  800202:	89 e5                	mov    %esp,%ebp
+  800204:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(pid, store);
+  800207:	83 ec 08             	sub    $0x8,%esp
+  80020a:	ff 75 0c             	pushl  0xc(%ebp)
+  80020d:	ff 75 08             	pushl  0x8(%ebp)
+  800210:	e8 17 ff ff ff       	call   80012c <sys_wait>
+  800215:	83 c4 10             	add    $0x10,%esp
+}
+  800218:	c9                   	leave  
+  800219:	c3                   	ret    
+
+0080021a <yield>:
+
+void
+yield(void) {
+  80021a:	55                   	push   %ebp
+  80021b:	89 e5                	mov    %esp,%ebp
+  80021d:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800220:	e8 1c ff ff ff       	call   800141 <sys_yield>
+}
+  800225:	90                   	nop
+  800226:	c9                   	leave  
+  800227:	c3                   	ret    
+
+00800228 <kill>:
+
+int
+kill(int pid) {
+  800228:	55                   	push   %ebp
+  800229:	89 e5                	mov    %esp,%ebp
+  80022b:	83 ec 08             	sub    $0x8,%esp
+    return sys_kill(pid);
+  80022e:	83 ec 0c             	sub    $0xc,%esp
+  800231:	ff 75 08             	pushl  0x8(%ebp)
+  800234:	e8 17 ff ff ff       	call   800150 <sys_kill>
+  800239:	83 c4 10             	add    $0x10,%esp
+}
+  80023c:	c9                   	leave  
+  80023d:	c3                   	ret    
+
+0080023e <getpid>:
+
+int
+getpid(void) {
+  80023e:	55                   	push   %ebp
+  80023f:	89 e5                	mov    %esp,%ebp
+  800241:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800244:	e8 19 ff ff ff       	call   800162 <sys_getpid>
+}
+  800249:	c9                   	leave  
+  80024a:	c3                   	ret    
+
+0080024b <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80024b:	55                   	push   %ebp
+  80024c:	89 e5                	mov    %esp,%ebp
+  80024e:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800251:	e8 2d ff ff ff       	call   800183 <sys_pgdir>
+}
+  800256:	90                   	nop
+  800257:	c9                   	leave  
+  800258:	c3                   	ret    
+
+00800259 <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  800259:	55                   	push   %ebp
+  80025a:	89 e5                	mov    %esp,%ebp
+  80025c:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  80025f:	e8 2e ff ff ff       	call   800192 <sys_gettime>
+}
+  800264:	c9                   	leave  
+  800265:	c3                   	ret    
+
+00800266 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800266:	55                   	push   %ebp
+  800267:	89 e5                	mov    %esp,%ebp
+  800269:	83 ec 08             	sub    $0x8,%esp
+    sys_lab6_set_priority(priority);
+  80026c:	83 ec 0c             	sub    $0xc,%esp
+  80026f:	ff 75 08             	pushl  0x8(%ebp)
+  800272:	e8 2a ff ff ff       	call   8001a1 <sys_lab6_set_priority>
+  800277:	83 c4 10             	add    $0x10,%esp
+}
+  80027a:	90                   	nop
+  80027b:	c9                   	leave  
+  80027c:	c3                   	ret    
+
+0080027d <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  80027d:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800282:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800285:	e8 c3 00 00 00       	call   80034d <umain>
+1:  jmp 1b
+  80028a:	eb fe                	jmp    80028a <_start+0xd>
+
+0080028c <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  80028c:	55                   	push   %ebp
+  80028d:	89 e5                	mov    %esp,%ebp
+  80028f:	83 ec 08             	sub    $0x8,%esp
+    sys_putc(c);
+  800292:	83 ec 0c             	sub    $0xc,%esp
+  800295:	ff 75 08             	pushl  0x8(%ebp)
+  800298:	e8 d4 fe ff ff       	call   800171 <sys_putc>
+  80029d:	83 c4 10             	add    $0x10,%esp
+    (*cnt) ++;
+  8002a0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002a3:	8b 00                	mov    (%eax),%eax
+  8002a5:	8d 50 01             	lea    0x1(%eax),%edx
+  8002a8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002ab:	89 10                	mov    %edx,(%eax)
+}
+  8002ad:	90                   	nop
+  8002ae:	c9                   	leave  
+  8002af:	c3                   	ret    
+
+008002b0 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002b0:	55                   	push   %ebp
+  8002b1:	89 e5                	mov    %esp,%ebp
+  8002b3:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  8002b6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002bd:	ff 75 0c             	pushl  0xc(%ebp)
+  8002c0:	ff 75 08             	pushl  0x8(%ebp)
+  8002c3:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  8002c6:	50                   	push   %eax
+  8002c7:	68 8c 02 80 00       	push   $0x80028c
+  8002cc:	e8 fc 06 00 00       	call   8009cd <vprintfmt>
+  8002d1:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  8002d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002d7:	c9                   	leave  
+  8002d8:	c3                   	ret    
+
+008002d9 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  8002d9:	55                   	push   %ebp
+  8002da:	89 e5                	mov    %esp,%ebp
+  8002dc:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8002df:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8002e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  8002e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8002e8:	83 ec 08             	sub    $0x8,%esp
+  8002eb:	50                   	push   %eax
+  8002ec:	ff 75 08             	pushl  0x8(%ebp)
+  8002ef:	e8 bc ff ff ff       	call   8002b0 <vcprintf>
+  8002f4:	83 c4 10             	add    $0x10,%esp
+  8002f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  8002fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002fd:	c9                   	leave  
+  8002fe:	c3                   	ret    
+
+008002ff <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  8002ff:	55                   	push   %ebp
+  800300:	89 e5                	mov    %esp,%ebp
+  800302:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  800305:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80030c:	eb 14                	jmp    800322 <cputs+0x23>
+        cputch(c, &cnt);
+  80030e:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800312:	83 ec 08             	sub    $0x8,%esp
+  800315:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800318:	52                   	push   %edx
+  800319:	50                   	push   %eax
+  80031a:	e8 6d ff ff ff       	call   80028c <cputch>
+  80031f:	83 c4 10             	add    $0x10,%esp
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800322:	8b 45 08             	mov    0x8(%ebp),%eax
+  800325:	8d 50 01             	lea    0x1(%eax),%edx
+  800328:	89 55 08             	mov    %edx,0x8(%ebp)
+  80032b:	0f b6 00             	movzbl (%eax),%eax
+  80032e:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800331:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800335:	75 d7                	jne    80030e <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800337:	83 ec 08             	sub    $0x8,%esp
+  80033a:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  80033d:	50                   	push   %eax
+  80033e:	6a 0a                	push   $0xa
+  800340:	e8 47 ff ff ff       	call   80028c <cputch>
+  800345:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  800348:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80034b:	c9                   	leave  
+  80034c:	c3                   	ret    
+
+0080034d <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  80034d:	55                   	push   %ebp
+  80034e:	89 e5                	mov    %esp,%ebp
+  800350:	83 ec 18             	sub    $0x18,%esp
+    int ret = main();
+  800353:	e8 d3 0b 00 00       	call   800f2b <main>
+  800358:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  80035b:	83 ec 0c             	sub    $0xc,%esp
+  80035e:	ff 75 f4             	pushl  -0xc(%ebp)
+  800361:	e8 51 fe ff ff       	call   8001b7 <exit>
+
+00800366 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800366:	55                   	push   %ebp
+  800367:	89 e5                	mov    %esp,%ebp
+  800369:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  80036c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800373:	eb 04                	jmp    800379 <strlen+0x13>
+        cnt ++;
+  800375:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800379:	8b 45 08             	mov    0x8(%ebp),%eax
+  80037c:	8d 50 01             	lea    0x1(%eax),%edx
+  80037f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800382:	0f b6 00             	movzbl (%eax),%eax
+  800385:	84 c0                	test   %al,%al
+  800387:	75 ec                	jne    800375 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800389:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  80038c:	c9                   	leave  
+  80038d:	c3                   	ret    
+
+0080038e <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  80038e:	55                   	push   %ebp
+  80038f:	89 e5                	mov    %esp,%ebp
+  800391:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800394:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  80039b:	eb 04                	jmp    8003a1 <strnlen+0x13>
+        cnt ++;
+  80039d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  8003a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003a4:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003a7:	73 10                	jae    8003b9 <strnlen+0x2b>
+  8003a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003ac:	8d 50 01             	lea    0x1(%eax),%edx
+  8003af:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003b2:	0f b6 00             	movzbl (%eax),%eax
+  8003b5:	84 c0                	test   %al,%al
+  8003b7:	75 e4                	jne    80039d <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003b9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003bc:	c9                   	leave  
+  8003bd:	c3                   	ret    
+
+008003be <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  8003be:	55                   	push   %ebp
+  8003bf:	89 e5                	mov    %esp,%ebp
+  8003c1:	57                   	push   %edi
+  8003c2:	56                   	push   %esi
+  8003c3:	83 ec 20             	sub    $0x20,%esp
+  8003c6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003cc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8003cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  8003d2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003d8:	89 d1                	mov    %edx,%ecx
+  8003da:	89 c2                	mov    %eax,%edx
+  8003dc:	89 ce                	mov    %ecx,%esi
+  8003de:	89 d7                	mov    %edx,%edi
+  8003e0:	ac                   	lods   %ds:(%esi),%al
+  8003e1:	aa                   	stos   %al,%es:(%edi)
+  8003e2:	84 c0                	test   %al,%al
+  8003e4:	75 fa                	jne    8003e0 <strcpy+0x22>
+  8003e6:	89 fa                	mov    %edi,%edx
+  8003e8:	89 f1                	mov    %esi,%ecx
+  8003ea:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8003ed:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8003f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  8003f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  8003f6:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  8003f7:	83 c4 20             	add    $0x20,%esp
+  8003fa:	5e                   	pop    %esi
+  8003fb:	5f                   	pop    %edi
+  8003fc:	5d                   	pop    %ebp
+  8003fd:	c3                   	ret    
+
+008003fe <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  8003fe:	55                   	push   %ebp
+  8003ff:	89 e5                	mov    %esp,%ebp
+  800401:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800404:	8b 45 08             	mov    0x8(%ebp),%eax
+  800407:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  80040a:	eb 21                	jmp    80042d <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  80040c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80040f:	0f b6 10             	movzbl (%eax),%edx
+  800412:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800415:	88 10                	mov    %dl,(%eax)
+  800417:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80041a:	0f b6 00             	movzbl (%eax),%eax
+  80041d:	84 c0                	test   %al,%al
+  80041f:	74 04                	je     800425 <strncpy+0x27>
+            src ++;
+  800421:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800425:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800429:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  80042d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800431:	75 d9                	jne    80040c <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800433:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800436:	c9                   	leave  
+  800437:	c3                   	ret    
+
+00800438 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800438:	55                   	push   %ebp
+  800439:	89 e5                	mov    %esp,%ebp
+  80043b:	57                   	push   %edi
+  80043c:	56                   	push   %esi
+  80043d:	83 ec 20             	sub    $0x20,%esp
+  800440:	8b 45 08             	mov    0x8(%ebp),%eax
+  800443:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800446:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800449:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  80044c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80044f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800452:	89 d1                	mov    %edx,%ecx
+  800454:	89 c2                	mov    %eax,%edx
+  800456:	89 ce                	mov    %ecx,%esi
+  800458:	89 d7                	mov    %edx,%edi
+  80045a:	ac                   	lods   %ds:(%esi),%al
+  80045b:	ae                   	scas   %es:(%edi),%al
+  80045c:	75 08                	jne    800466 <strcmp+0x2e>
+  80045e:	84 c0                	test   %al,%al
+  800460:	75 f8                	jne    80045a <strcmp+0x22>
+  800462:	31 c0                	xor    %eax,%eax
+  800464:	eb 04                	jmp    80046a <strcmp+0x32>
+  800466:	19 c0                	sbb    %eax,%eax
+  800468:	0c 01                	or     $0x1,%al
+  80046a:	89 fa                	mov    %edi,%edx
+  80046c:	89 f1                	mov    %esi,%ecx
+  80046e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800471:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800474:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800477:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  80047a:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  80047b:	83 c4 20             	add    $0x20,%esp
+  80047e:	5e                   	pop    %esi
+  80047f:	5f                   	pop    %edi
+  800480:	5d                   	pop    %ebp
+  800481:	c3                   	ret    
+
+00800482 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800482:	55                   	push   %ebp
+  800483:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800485:	eb 0c                	jmp    800493 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800487:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  80048b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  80048f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800493:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800497:	74 1a                	je     8004b3 <strncmp+0x31>
+  800499:	8b 45 08             	mov    0x8(%ebp),%eax
+  80049c:	0f b6 00             	movzbl (%eax),%eax
+  80049f:	84 c0                	test   %al,%al
+  8004a1:	74 10                	je     8004b3 <strncmp+0x31>
+  8004a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004a6:	0f b6 10             	movzbl (%eax),%edx
+  8004a9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ac:	0f b6 00             	movzbl (%eax),%eax
+  8004af:	38 c2                	cmp    %al,%dl
+  8004b1:	74 d4                	je     800487 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004b3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004b7:	74 18                	je     8004d1 <strncmp+0x4f>
+  8004b9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004bc:	0f b6 00             	movzbl (%eax),%eax
+  8004bf:	0f b6 d0             	movzbl %al,%edx
+  8004c2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004c5:	0f b6 00             	movzbl (%eax),%eax
+  8004c8:	0f b6 c0             	movzbl %al,%eax
+  8004cb:	29 c2                	sub    %eax,%edx
+  8004cd:	89 d0                	mov    %edx,%eax
+  8004cf:	eb 05                	jmp    8004d6 <strncmp+0x54>
+  8004d1:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8004d6:	5d                   	pop    %ebp
+  8004d7:	c3                   	ret    
+
+008004d8 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  8004d8:	55                   	push   %ebp
+  8004d9:	89 e5                	mov    %esp,%ebp
+  8004db:	83 ec 04             	sub    $0x4,%esp
+  8004de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004e1:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  8004e4:	eb 14                	jmp    8004fa <strchr+0x22>
+        if (*s == c) {
+  8004e6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e9:	0f b6 00             	movzbl (%eax),%eax
+  8004ec:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  8004ef:	75 05                	jne    8004f6 <strchr+0x1e>
+            return (char *)s;
+  8004f1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004f4:	eb 13                	jmp    800509 <strchr+0x31>
+        }
+        s ++;
+  8004f6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  8004fa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fd:	0f b6 00             	movzbl (%eax),%eax
+  800500:	84 c0                	test   %al,%al
+  800502:	75 e2                	jne    8004e6 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800504:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800509:	c9                   	leave  
+  80050a:	c3                   	ret    
+
+0080050b <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  80050b:	55                   	push   %ebp
+  80050c:	89 e5                	mov    %esp,%ebp
+  80050e:	83 ec 04             	sub    $0x4,%esp
+  800511:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800514:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800517:	eb 0f                	jmp    800528 <strfind+0x1d>
+        if (*s == c) {
+  800519:	8b 45 08             	mov    0x8(%ebp),%eax
+  80051c:	0f b6 00             	movzbl (%eax),%eax
+  80051f:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800522:	74 10                	je     800534 <strfind+0x29>
+            break;
+        }
+        s ++;
+  800524:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800528:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052b:	0f b6 00             	movzbl (%eax),%eax
+  80052e:	84 c0                	test   %al,%al
+  800530:	75 e7                	jne    800519 <strfind+0xe>
+  800532:	eb 01                	jmp    800535 <strfind+0x2a>
+        if (*s == c) {
+            break;
+  800534:	90                   	nop
+        }
+        s ++;
+    }
+    return (char *)s;
+  800535:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800538:	c9                   	leave  
+  800539:	c3                   	ret    
+
+0080053a <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  80053a:	55                   	push   %ebp
+  80053b:	89 e5                	mov    %esp,%ebp
+  80053d:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800540:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800547:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80054e:	eb 04                	jmp    800554 <strtol+0x1a>
+        s ++;
+  800550:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800554:	8b 45 08             	mov    0x8(%ebp),%eax
+  800557:	0f b6 00             	movzbl (%eax),%eax
+  80055a:	3c 20                	cmp    $0x20,%al
+  80055c:	74 f2                	je     800550 <strtol+0x16>
+  80055e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800561:	0f b6 00             	movzbl (%eax),%eax
+  800564:	3c 09                	cmp    $0x9,%al
+  800566:	74 e8                	je     800550 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800568:	8b 45 08             	mov    0x8(%ebp),%eax
+  80056b:	0f b6 00             	movzbl (%eax),%eax
+  80056e:	3c 2b                	cmp    $0x2b,%al
+  800570:	75 06                	jne    800578 <strtol+0x3e>
+        s ++;
+  800572:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800576:	eb 15                	jmp    80058d <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800578:	8b 45 08             	mov    0x8(%ebp),%eax
+  80057b:	0f b6 00             	movzbl (%eax),%eax
+  80057e:	3c 2d                	cmp    $0x2d,%al
+  800580:	75 0b                	jne    80058d <strtol+0x53>
+        s ++, neg = 1;
+  800582:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800586:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  80058d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800591:	74 06                	je     800599 <strtol+0x5f>
+  800593:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800597:	75 24                	jne    8005bd <strtol+0x83>
+  800599:	8b 45 08             	mov    0x8(%ebp),%eax
+  80059c:	0f b6 00             	movzbl (%eax),%eax
+  80059f:	3c 30                	cmp    $0x30,%al
+  8005a1:	75 1a                	jne    8005bd <strtol+0x83>
+  8005a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a6:	83 c0 01             	add    $0x1,%eax
+  8005a9:	0f b6 00             	movzbl (%eax),%eax
+  8005ac:	3c 78                	cmp    $0x78,%al
+  8005ae:	75 0d                	jne    8005bd <strtol+0x83>
+        s += 2, base = 16;
+  8005b0:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005b4:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005bb:	eb 2a                	jmp    8005e7 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005bd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005c1:	75 17                	jne    8005da <strtol+0xa0>
+  8005c3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005c6:	0f b6 00             	movzbl (%eax),%eax
+  8005c9:	3c 30                	cmp    $0x30,%al
+  8005cb:	75 0d                	jne    8005da <strtol+0xa0>
+        s ++, base = 8;
+  8005cd:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005d1:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  8005d8:	eb 0d                	jmp    8005e7 <strtol+0xad>
+    }
+    else if (base == 0) {
+  8005da:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005de:	75 07                	jne    8005e7 <strtol+0xad>
+        base = 10;
+  8005e0:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  8005e7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ea:	0f b6 00             	movzbl (%eax),%eax
+  8005ed:	3c 2f                	cmp    $0x2f,%al
+  8005ef:	7e 1b                	jle    80060c <strtol+0xd2>
+  8005f1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005f4:	0f b6 00             	movzbl (%eax),%eax
+  8005f7:	3c 39                	cmp    $0x39,%al
+  8005f9:	7f 11                	jg     80060c <strtol+0xd2>
+            dig = *s - '0';
+  8005fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005fe:	0f b6 00             	movzbl (%eax),%eax
+  800601:	0f be c0             	movsbl %al,%eax
+  800604:	83 e8 30             	sub    $0x30,%eax
+  800607:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80060a:	eb 48                	jmp    800654 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  80060c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80060f:	0f b6 00             	movzbl (%eax),%eax
+  800612:	3c 60                	cmp    $0x60,%al
+  800614:	7e 1b                	jle    800631 <strtol+0xf7>
+  800616:	8b 45 08             	mov    0x8(%ebp),%eax
+  800619:	0f b6 00             	movzbl (%eax),%eax
+  80061c:	3c 7a                	cmp    $0x7a,%al
+  80061e:	7f 11                	jg     800631 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800620:	8b 45 08             	mov    0x8(%ebp),%eax
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	0f be c0             	movsbl %al,%eax
+  800629:	83 e8 57             	sub    $0x57,%eax
+  80062c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80062f:	eb 23                	jmp    800654 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800631:	8b 45 08             	mov    0x8(%ebp),%eax
+  800634:	0f b6 00             	movzbl (%eax),%eax
+  800637:	3c 40                	cmp    $0x40,%al
+  800639:	7e 3c                	jle    800677 <strtol+0x13d>
+  80063b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80063e:	0f b6 00             	movzbl (%eax),%eax
+  800641:	3c 5a                	cmp    $0x5a,%al
+  800643:	7f 32                	jg     800677 <strtol+0x13d>
+            dig = *s - 'A' + 10;
+  800645:	8b 45 08             	mov    0x8(%ebp),%eax
+  800648:	0f b6 00             	movzbl (%eax),%eax
+  80064b:	0f be c0             	movsbl %al,%eax
+  80064e:	83 e8 37             	sub    $0x37,%eax
+  800651:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800654:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800657:	3b 45 10             	cmp    0x10(%ebp),%eax
+  80065a:	7d 1a                	jge    800676 <strtol+0x13c>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  80065c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800660:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800663:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800667:	89 c2                	mov    %eax,%edx
+  800669:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80066c:	01 d0                	add    %edx,%eax
+  80066e:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800671:	e9 71 ff ff ff       	jmp    8005e7 <strtol+0xad>
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+            break;
+  800676:	90                   	nop
+        }
+        s ++, val = (val * base) + dig;
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  800677:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80067b:	74 08                	je     800685 <strtol+0x14b>
+        *endptr = (char *) s;
+  80067d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800680:	8b 55 08             	mov    0x8(%ebp),%edx
+  800683:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800685:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800689:	74 07                	je     800692 <strtol+0x158>
+  80068b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80068e:	f7 d8                	neg    %eax
+  800690:	eb 03                	jmp    800695 <strtol+0x15b>
+  800692:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800695:	c9                   	leave  
+  800696:	c3                   	ret    
+
+00800697 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800697:	55                   	push   %ebp
+  800698:	89 e5                	mov    %esp,%ebp
+  80069a:	57                   	push   %edi
+  80069b:	83 ec 24             	sub    $0x24,%esp
+  80069e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006a1:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006a4:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006a8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006ab:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006ae:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006b1:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006b7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006ba:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006be:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006c1:	89 d7                	mov    %edx,%edi
+  8006c3:	f3 aa                	rep stos %al,%es:(%edi)
+  8006c5:	89 fa                	mov    %edi,%edx
+  8006c7:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8006ca:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  8006cd:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006d0:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  8006d1:	83 c4 24             	add    $0x24,%esp
+  8006d4:	5f                   	pop    %edi
+  8006d5:	5d                   	pop    %ebp
+  8006d6:	c3                   	ret    
+
+008006d7 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  8006d7:	55                   	push   %ebp
+  8006d8:	89 e5                	mov    %esp,%ebp
+  8006da:	57                   	push   %edi
+  8006db:	56                   	push   %esi
+  8006dc:	53                   	push   %ebx
+  8006dd:	83 ec 30             	sub    $0x30,%esp
+  8006e0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8006e6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006e9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8006ec:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006ef:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  8006f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8006f5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  8006f8:	73 42                	jae    80073c <memmove+0x65>
+  8006fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8006fd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800700:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800703:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800706:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800709:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  80070c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  80070f:	c1 e8 02             	shr    $0x2,%eax
+  800712:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800714:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800717:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80071a:	89 d7                	mov    %edx,%edi
+  80071c:	89 c6                	mov    %eax,%esi
+  80071e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800720:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800723:	83 e1 03             	and    $0x3,%ecx
+  800726:	74 02                	je     80072a <memmove+0x53>
+  800728:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  80072a:	89 f0                	mov    %esi,%eax
+  80072c:	89 fa                	mov    %edi,%edx
+  80072e:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800731:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800734:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800737:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  80073a:	eb 36                	jmp    800772 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  80073c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80073f:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800742:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800745:	01 c2                	add    %eax,%edx
+  800747:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80074a:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  80074d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800750:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800753:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800756:	89 c1                	mov    %eax,%ecx
+  800758:	89 d8                	mov    %ebx,%eax
+  80075a:	89 d6                	mov    %edx,%esi
+  80075c:	89 c7                	mov    %eax,%edi
+  80075e:	fd                   	std    
+  80075f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800761:	fc                   	cld    
+  800762:	89 f8                	mov    %edi,%eax
+  800764:	89 f2                	mov    %esi,%edx
+  800766:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800769:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  80076c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  80076f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800772:	83 c4 30             	add    $0x30,%esp
+  800775:	5b                   	pop    %ebx
+  800776:	5e                   	pop    %esi
+  800777:	5f                   	pop    %edi
+  800778:	5d                   	pop    %ebp
+  800779:	c3                   	ret    
+
+0080077a <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  80077a:	55                   	push   %ebp
+  80077b:	89 e5                	mov    %esp,%ebp
+  80077d:	57                   	push   %edi
+  80077e:	56                   	push   %esi
+  80077f:	83 ec 20             	sub    $0x20,%esp
+  800782:	8b 45 08             	mov    0x8(%ebp),%eax
+  800785:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800788:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80078b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80078e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800791:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800794:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800797:	c1 e8 02             	shr    $0x2,%eax
+  80079a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  80079c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80079f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007a2:	89 d7                	mov    %edx,%edi
+  8007a4:	89 c6                	mov    %eax,%esi
+  8007a6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007a8:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007ab:	83 e1 03             	and    $0x3,%ecx
+  8007ae:	74 02                	je     8007b2 <memcpy+0x38>
+  8007b0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007b2:	89 f0                	mov    %esi,%eax
+  8007b4:	89 fa                	mov    %edi,%edx
+  8007b6:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007b9:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007bc:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  8007bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007c2:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007c3:	83 c4 20             	add    $0x20,%esp
+  8007c6:	5e                   	pop    %esi
+  8007c7:	5f                   	pop    %edi
+  8007c8:	5d                   	pop    %ebp
+  8007c9:	c3                   	ret    
+
+008007ca <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  8007ca:	55                   	push   %ebp
+  8007cb:	89 e5                	mov    %esp,%ebp
+  8007cd:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  8007d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007d3:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  8007d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007d9:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  8007dc:	eb 30                	jmp    80080e <memcmp+0x44>
+        if (*s1 != *s2) {
+  8007de:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8007e1:	0f b6 10             	movzbl (%eax),%edx
+  8007e4:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8007e7:	0f b6 00             	movzbl (%eax),%eax
+  8007ea:	38 c2                	cmp    %al,%dl
+  8007ec:	74 18                	je     800806 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8007ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8007f1:	0f b6 00             	movzbl (%eax),%eax
+  8007f4:	0f b6 d0             	movzbl %al,%edx
+  8007f7:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8007fa:	0f b6 00             	movzbl (%eax),%eax
+  8007fd:	0f b6 c0             	movzbl %al,%eax
+  800800:	29 c2                	sub    %eax,%edx
+  800802:	89 d0                	mov    %edx,%eax
+  800804:	eb 1a                	jmp    800820 <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800806:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  80080a:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  80080e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800811:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800814:	89 55 10             	mov    %edx,0x10(%ebp)
+  800817:	85 c0                	test   %eax,%eax
+  800819:	75 c3                	jne    8007de <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  80081b:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800820:	c9                   	leave  
+  800821:	c3                   	ret    
+
+00800822 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800822:	55                   	push   %ebp
+  800823:	89 e5                	mov    %esp,%ebp
+  800825:	83 ec 38             	sub    $0x38,%esp
+  800828:	8b 45 10             	mov    0x10(%ebp),%eax
+  80082b:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  80082e:	8b 45 14             	mov    0x14(%ebp),%eax
+  800831:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  800834:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800837:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  80083a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80083d:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800840:	8b 45 18             	mov    0x18(%ebp),%eax
+  800843:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800846:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800849:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80084c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80084f:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  800852:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800855:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800858:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  80085c:	74 1c                	je     80087a <printnum+0x58>
+  80085e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800861:	ba 00 00 00 00       	mov    $0x0,%edx
+  800866:	f7 75 e4             	divl   -0x1c(%ebp)
+  800869:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  80086c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80086f:	ba 00 00 00 00       	mov    $0x0,%edx
+  800874:	f7 75 e4             	divl   -0x1c(%ebp)
+  800877:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80087a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80087d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800880:	f7 75 e4             	divl   -0x1c(%ebp)
+  800883:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800886:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800889:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80088c:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80088f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800892:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800895:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800898:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  80089b:	8b 45 18             	mov    0x18(%ebp),%eax
+  80089e:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008a3:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008a6:	77 41                	ja     8008e9 <printnum+0xc7>
+  8008a8:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008ab:	72 05                	jb     8008b2 <printnum+0x90>
+  8008ad:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  8008b0:	77 37                	ja     8008e9 <printnum+0xc7>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008b2:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008b5:	83 e8 01             	sub    $0x1,%eax
+  8008b8:	83 ec 04             	sub    $0x4,%esp
+  8008bb:	ff 75 20             	pushl  0x20(%ebp)
+  8008be:	50                   	push   %eax
+  8008bf:	ff 75 18             	pushl  0x18(%ebp)
+  8008c2:	ff 75 ec             	pushl  -0x14(%ebp)
+  8008c5:	ff 75 e8             	pushl  -0x18(%ebp)
+  8008c8:	ff 75 0c             	pushl  0xc(%ebp)
+  8008cb:	ff 75 08             	pushl  0x8(%ebp)
+  8008ce:	e8 4f ff ff ff       	call   800822 <printnum>
+  8008d3:	83 c4 20             	add    $0x20,%esp
+  8008d6:	eb 1b                	jmp    8008f3 <printnum+0xd1>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  8008d8:	83 ec 08             	sub    $0x8,%esp
+  8008db:	ff 75 0c             	pushl  0xc(%ebp)
+  8008de:	ff 75 20             	pushl  0x20(%ebp)
+  8008e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008e4:	ff d0                	call   *%eax
+  8008e6:	83 c4 10             	add    $0x10,%esp
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8008e9:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8008ed:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8008f1:	7f e5                	jg     8008d8 <printnum+0xb6>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8008f3:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8008f6:	05 e4 10 80 00       	add    $0x8010e4,%eax
+  8008fb:	0f b6 00             	movzbl (%eax),%eax
+  8008fe:	0f be c0             	movsbl %al,%eax
+  800901:	83 ec 08             	sub    $0x8,%esp
+  800904:	ff 75 0c             	pushl  0xc(%ebp)
+  800907:	50                   	push   %eax
+  800908:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090b:	ff d0                	call   *%eax
+  80090d:	83 c4 10             	add    $0x10,%esp
+}
+  800910:	90                   	nop
+  800911:	c9                   	leave  
+  800912:	c3                   	ret    
+
+00800913 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800913:	55                   	push   %ebp
+  800914:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800916:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80091a:	7e 14                	jle    800930 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80091c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80091f:	8b 00                	mov    (%eax),%eax
+  800921:	8d 48 08             	lea    0x8(%eax),%ecx
+  800924:	8b 55 08             	mov    0x8(%ebp),%edx
+  800927:	89 0a                	mov    %ecx,(%edx)
+  800929:	8b 50 04             	mov    0x4(%eax),%edx
+  80092c:	8b 00                	mov    (%eax),%eax
+  80092e:	eb 30                	jmp    800960 <getuint+0x4d>
+    }
+    else if (lflag) {
+  800930:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800934:	74 16                	je     80094c <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800936:	8b 45 08             	mov    0x8(%ebp),%eax
+  800939:	8b 00                	mov    (%eax),%eax
+  80093b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80093e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800941:	89 0a                	mov    %ecx,(%edx)
+  800943:	8b 00                	mov    (%eax),%eax
+  800945:	ba 00 00 00 00       	mov    $0x0,%edx
+  80094a:	eb 14                	jmp    800960 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80094c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80094f:	8b 00                	mov    (%eax),%eax
+  800951:	8d 48 04             	lea    0x4(%eax),%ecx
+  800954:	8b 55 08             	mov    0x8(%ebp),%edx
+  800957:	89 0a                	mov    %ecx,(%edx)
+  800959:	8b 00                	mov    (%eax),%eax
+  80095b:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800960:	5d                   	pop    %ebp
+  800961:	c3                   	ret    
+
+00800962 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800962:	55                   	push   %ebp
+  800963:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800965:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800969:	7e 14                	jle    80097f <getint+0x1d>
+        return va_arg(*ap, long long);
+  80096b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80096e:	8b 00                	mov    (%eax),%eax
+  800970:	8d 48 08             	lea    0x8(%eax),%ecx
+  800973:	8b 55 08             	mov    0x8(%ebp),%edx
+  800976:	89 0a                	mov    %ecx,(%edx)
+  800978:	8b 50 04             	mov    0x4(%eax),%edx
+  80097b:	8b 00                	mov    (%eax),%eax
+  80097d:	eb 28                	jmp    8009a7 <getint+0x45>
+    }
+    else if (lflag) {
+  80097f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800983:	74 12                	je     800997 <getint+0x35>
+        return va_arg(*ap, long);
+  800985:	8b 45 08             	mov    0x8(%ebp),%eax
+  800988:	8b 00                	mov    (%eax),%eax
+  80098a:	8d 48 04             	lea    0x4(%eax),%ecx
+  80098d:	8b 55 08             	mov    0x8(%ebp),%edx
+  800990:	89 0a                	mov    %ecx,(%edx)
+  800992:	8b 00                	mov    (%eax),%eax
+  800994:	99                   	cltd   
+  800995:	eb 10                	jmp    8009a7 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800997:	8b 45 08             	mov    0x8(%ebp),%eax
+  80099a:	8b 00                	mov    (%eax),%eax
+  80099c:	8d 48 04             	lea    0x4(%eax),%ecx
+  80099f:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009a2:	89 0a                	mov    %ecx,(%edx)
+  8009a4:	8b 00                	mov    (%eax),%eax
+  8009a6:	99                   	cltd   
+    }
+}
+  8009a7:	5d                   	pop    %ebp
+  8009a8:	c3                   	ret    
+
+008009a9 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009a9:	55                   	push   %ebp
+  8009aa:	89 e5                	mov    %esp,%ebp
+  8009ac:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009af:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8009b8:	50                   	push   %eax
+  8009b9:	ff 75 10             	pushl  0x10(%ebp)
+  8009bc:	ff 75 0c             	pushl  0xc(%ebp)
+  8009bf:	ff 75 08             	pushl  0x8(%ebp)
+  8009c2:	e8 06 00 00 00       	call   8009cd <vprintfmt>
+  8009c7:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8009ca:	90                   	nop
+  8009cb:	c9                   	leave  
+  8009cc:	c3                   	ret    
+
+008009cd <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8009cd:	55                   	push   %ebp
+  8009ce:	89 e5                	mov    %esp,%ebp
+  8009d0:	56                   	push   %esi
+  8009d1:	53                   	push   %ebx
+  8009d2:	83 ec 20             	sub    $0x20,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009d5:	eb 17                	jmp    8009ee <vprintfmt+0x21>
+            if (ch == '\0') {
+  8009d7:	85 db                	test   %ebx,%ebx
+  8009d9:	0f 84 8e 03 00 00    	je     800d6d <vprintfmt+0x3a0>
+                return;
+            }
+            putch(ch, putdat);
+  8009df:	83 ec 08             	sub    $0x8,%esp
+  8009e2:	ff 75 0c             	pushl  0xc(%ebp)
+  8009e5:	53                   	push   %ebx
+  8009e6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009e9:	ff d0                	call   *%eax
+  8009eb:	83 c4 10             	add    $0x10,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009ee:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009f1:	8d 50 01             	lea    0x1(%eax),%edx
+  8009f4:	89 55 10             	mov    %edx,0x10(%ebp)
+  8009f7:	0f b6 00             	movzbl (%eax),%eax
+  8009fa:	0f b6 d8             	movzbl %al,%ebx
+  8009fd:	83 fb 25             	cmp    $0x25,%ebx
+  800a00:	75 d5                	jne    8009d7 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a02:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a06:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a10:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a13:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a1a:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a1d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a20:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a23:	8d 50 01             	lea    0x1(%eax),%edx
+  800a26:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a29:	0f b6 00             	movzbl (%eax),%eax
+  800a2c:	0f b6 d8             	movzbl %al,%ebx
+  800a2f:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a32:	83 f8 55             	cmp    $0x55,%eax
+  800a35:	0f 87 05 03 00 00    	ja     800d40 <vprintfmt+0x373>
+  800a3b:	8b 04 85 08 11 80 00 	mov    0x801108(,%eax,4),%eax
+  800a42:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a44:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a48:	eb d6                	jmp    800a20 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a4a:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800a4e:	eb d0                	jmp    800a20 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a50:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800a57:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a5a:	89 d0                	mov    %edx,%eax
+  800a5c:	c1 e0 02             	shl    $0x2,%eax
+  800a5f:	01 d0                	add    %edx,%eax
+  800a61:	01 c0                	add    %eax,%eax
+  800a63:	01 d8                	add    %ebx,%eax
+  800a65:	83 e8 30             	sub    $0x30,%eax
+  800a68:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800a6b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a6e:	0f b6 00             	movzbl (%eax),%eax
+  800a71:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800a74:	83 fb 2f             	cmp    $0x2f,%ebx
+  800a77:	7e 39                	jle    800ab2 <vprintfmt+0xe5>
+  800a79:	83 fb 39             	cmp    $0x39,%ebx
+  800a7c:	7f 34                	jg     800ab2 <vprintfmt+0xe5>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a7e:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  800a82:	eb d3                	jmp    800a57 <vprintfmt+0x8a>
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800a84:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a87:	8d 50 04             	lea    0x4(%eax),%edx
+  800a8a:	89 55 14             	mov    %edx,0x14(%ebp)
+  800a8d:	8b 00                	mov    (%eax),%eax
+  800a8f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800a92:	eb 1f                	jmp    800ab3 <vprintfmt+0xe6>
+
+        case '.':
+            if (width < 0)
+  800a94:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800a98:	79 86                	jns    800a20 <vprintfmt+0x53>
+                width = 0;
+  800a9a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800aa1:	e9 7a ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800aa6:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800aad:	e9 6e ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+            goto process_precision;
+  800ab2:	90                   	nop
+        case '#':
+            altflag = 1;
+            goto reswitch;
+
+        process_precision:
+            if (width < 0)
+  800ab3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ab7:	0f 89 63 ff ff ff    	jns    800a20 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800abd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ac0:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800ac3:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800aca:	e9 51 ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800acf:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800ad3:	e9 48 ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800ad8:	8b 45 14             	mov    0x14(%ebp),%eax
+  800adb:	8d 50 04             	lea    0x4(%eax),%edx
+  800ade:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ae1:	8b 00                	mov    (%eax),%eax
+  800ae3:	83 ec 08             	sub    $0x8,%esp
+  800ae6:	ff 75 0c             	pushl  0xc(%ebp)
+  800ae9:	50                   	push   %eax
+  800aea:	8b 45 08             	mov    0x8(%ebp),%eax
+  800aed:	ff d0                	call   *%eax
+  800aef:	83 c4 10             	add    $0x10,%esp
+            break;
+  800af2:	e9 71 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800af7:	8b 45 14             	mov    0x14(%ebp),%eax
+  800afa:	8d 50 04             	lea    0x4(%eax),%edx
+  800afd:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b00:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b02:	85 db                	test   %ebx,%ebx
+  800b04:	79 02                	jns    800b08 <vprintfmt+0x13b>
+                err = -err;
+  800b06:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b08:	83 fb 18             	cmp    $0x18,%ebx
+  800b0b:	7f 0b                	jg     800b18 <vprintfmt+0x14b>
+  800b0d:	8b 34 9d 80 10 80 00 	mov    0x801080(,%ebx,4),%esi
+  800b14:	85 f6                	test   %esi,%esi
+  800b16:	75 19                	jne    800b31 <vprintfmt+0x164>
+                printfmt(putch, putdat, "error %d", err);
+  800b18:	53                   	push   %ebx
+  800b19:	68 f5 10 80 00       	push   $0x8010f5
+  800b1e:	ff 75 0c             	pushl  0xc(%ebp)
+  800b21:	ff 75 08             	pushl  0x8(%ebp)
+  800b24:	e8 80 fe ff ff       	call   8009a9 <printfmt>
+  800b29:	83 c4 10             	add    $0x10,%esp
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b2c:	e9 37 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  800b31:	56                   	push   %esi
+  800b32:	68 fe 10 80 00       	push   $0x8010fe
+  800b37:	ff 75 0c             	pushl  0xc(%ebp)
+  800b3a:	ff 75 08             	pushl  0x8(%ebp)
+  800b3d:	e8 67 fe ff ff       	call   8009a9 <printfmt>
+  800b42:	83 c4 10             	add    $0x10,%esp
+            }
+            break;
+  800b45:	e9 1e 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800b4a:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b4d:	8d 50 04             	lea    0x4(%eax),%edx
+  800b50:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b53:	8b 30                	mov    (%eax),%esi
+  800b55:	85 f6                	test   %esi,%esi
+  800b57:	75 05                	jne    800b5e <vprintfmt+0x191>
+                p = "(null)";
+  800b59:	be 01 11 80 00       	mov    $0x801101,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800b5e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b62:	7e 76                	jle    800bda <vprintfmt+0x20d>
+  800b64:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800b68:	74 70                	je     800bda <vprintfmt+0x20d>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b6a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b6d:	83 ec 08             	sub    $0x8,%esp
+  800b70:	50                   	push   %eax
+  800b71:	56                   	push   %esi
+  800b72:	e8 17 f8 ff ff       	call   80038e <strnlen>
+  800b77:	83 c4 10             	add    $0x10,%esp
+  800b7a:	89 c2                	mov    %eax,%edx
+  800b7c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800b7f:	29 d0                	sub    %edx,%eax
+  800b81:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b84:	eb 17                	jmp    800b9d <vprintfmt+0x1d0>
+                    putch(padc, putdat);
+  800b86:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800b8a:	83 ec 08             	sub    $0x8,%esp
+  800b8d:	ff 75 0c             	pushl  0xc(%ebp)
+  800b90:	50                   	push   %eax
+  800b91:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b94:	ff d0                	call   *%eax
+  800b96:	83 c4 10             	add    $0x10,%esp
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b99:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800b9d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ba1:	7f e3                	jg     800b86 <vprintfmt+0x1b9>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800ba3:	eb 35                	jmp    800bda <vprintfmt+0x20d>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800ba5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800ba9:	74 1c                	je     800bc7 <vprintfmt+0x1fa>
+  800bab:	83 fb 1f             	cmp    $0x1f,%ebx
+  800bae:	7e 05                	jle    800bb5 <vprintfmt+0x1e8>
+  800bb0:	83 fb 7e             	cmp    $0x7e,%ebx
+  800bb3:	7e 12                	jle    800bc7 <vprintfmt+0x1fa>
+                    putch('?', putdat);
+  800bb5:	83 ec 08             	sub    $0x8,%esp
+  800bb8:	ff 75 0c             	pushl  0xc(%ebp)
+  800bbb:	6a 3f                	push   $0x3f
+  800bbd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bc0:	ff d0                	call   *%eax
+  800bc2:	83 c4 10             	add    $0x10,%esp
+  800bc5:	eb 0f                	jmp    800bd6 <vprintfmt+0x209>
+                }
+                else {
+                    putch(ch, putdat);
+  800bc7:	83 ec 08             	sub    $0x8,%esp
+  800bca:	ff 75 0c             	pushl  0xc(%ebp)
+  800bcd:	53                   	push   %ebx
+  800bce:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bd1:	ff d0                	call   *%eax
+  800bd3:	83 c4 10             	add    $0x10,%esp
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bd6:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800bda:	89 f0                	mov    %esi,%eax
+  800bdc:	8d 70 01             	lea    0x1(%eax),%esi
+  800bdf:	0f b6 00             	movzbl (%eax),%eax
+  800be2:	0f be d8             	movsbl %al,%ebx
+  800be5:	85 db                	test   %ebx,%ebx
+  800be7:	74 26                	je     800c0f <vprintfmt+0x242>
+  800be9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800bed:	78 b6                	js     800ba5 <vprintfmt+0x1d8>
+  800bef:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  800bf3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800bf7:	79 ac                	jns    800ba5 <vprintfmt+0x1d8>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800bf9:	eb 14                	jmp    800c0f <vprintfmt+0x242>
+                putch(' ', putdat);
+  800bfb:	83 ec 08             	sub    $0x8,%esp
+  800bfe:	ff 75 0c             	pushl  0xc(%ebp)
+  800c01:	6a 20                	push   $0x20
+  800c03:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c06:	ff d0                	call   *%eax
+  800c08:	83 c4 10             	add    $0x10,%esp
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c0b:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c0f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c13:	7f e6                	jg     800bfb <vprintfmt+0x22e>
+                putch(' ', putdat);
+            }
+            break;
+  800c15:	e9 4e 01 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c1a:	83 ec 08             	sub    $0x8,%esp
+  800c1d:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c20:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c23:	50                   	push   %eax
+  800c24:	e8 39 fd ff ff       	call   800962 <getint>
+  800c29:	83 c4 10             	add    $0x10,%esp
+  800c2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c2f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c32:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c35:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c38:	85 d2                	test   %edx,%edx
+  800c3a:	79 23                	jns    800c5f <vprintfmt+0x292>
+                putch('-', putdat);
+  800c3c:	83 ec 08             	sub    $0x8,%esp
+  800c3f:	ff 75 0c             	pushl  0xc(%ebp)
+  800c42:	6a 2d                	push   $0x2d
+  800c44:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c47:	ff d0                	call   *%eax
+  800c49:	83 c4 10             	add    $0x10,%esp
+                num = -(long long)num;
+  800c4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c4f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c52:	f7 d8                	neg    %eax
+  800c54:	83 d2 00             	adc    $0x0,%edx
+  800c57:	f7 da                	neg    %edx
+  800c59:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c5c:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800c5f:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c66:	e9 9f 00 00 00       	jmp    800d0a <vprintfmt+0x33d>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800c6b:	83 ec 08             	sub    $0x8,%esp
+  800c6e:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c71:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c74:	50                   	push   %eax
+  800c75:	e8 99 fc ff ff       	call   800913 <getuint>
+  800c7a:	83 c4 10             	add    $0x10,%esp
+  800c7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c80:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800c83:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c8a:	eb 7e                	jmp    800d0a <vprintfmt+0x33d>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800c8c:	83 ec 08             	sub    $0x8,%esp
+  800c8f:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c92:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c95:	50                   	push   %eax
+  800c96:	e8 78 fc ff ff       	call   800913 <getuint>
+  800c9b:	83 c4 10             	add    $0x10,%esp
+  800c9e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ca1:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800ca4:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800cab:	eb 5d                	jmp    800d0a <vprintfmt+0x33d>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800cad:	83 ec 08             	sub    $0x8,%esp
+  800cb0:	ff 75 0c             	pushl  0xc(%ebp)
+  800cb3:	6a 30                	push   $0x30
+  800cb5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb8:	ff d0                	call   *%eax
+  800cba:	83 c4 10             	add    $0x10,%esp
+            putch('x', putdat);
+  800cbd:	83 ec 08             	sub    $0x8,%esp
+  800cc0:	ff 75 0c             	pushl  0xc(%ebp)
+  800cc3:	6a 78                	push   $0x78
+  800cc5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cc8:	ff d0                	call   *%eax
+  800cca:	83 c4 10             	add    $0x10,%esp
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800ccd:	8b 45 14             	mov    0x14(%ebp),%eax
+  800cd0:	8d 50 04             	lea    0x4(%eax),%edx
+  800cd3:	89 55 14             	mov    %edx,0x14(%ebp)
+  800cd6:	8b 00                	mov    (%eax),%eax
+  800cd8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cdb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800ce2:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800ce9:	eb 1f                	jmp    800d0a <vprintfmt+0x33d>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800ceb:	83 ec 08             	sub    $0x8,%esp
+  800cee:	ff 75 e0             	pushl  -0x20(%ebp)
+  800cf1:	8d 45 14             	lea    0x14(%ebp),%eax
+  800cf4:	50                   	push   %eax
+  800cf5:	e8 19 fc ff ff       	call   800913 <getuint>
+  800cfa:	83 c4 10             	add    $0x10,%esp
+  800cfd:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d00:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d03:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d0a:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d11:	83 ec 04             	sub    $0x4,%esp
+  800d14:	52                   	push   %edx
+  800d15:	ff 75 e8             	pushl  -0x18(%ebp)
+  800d18:	50                   	push   %eax
+  800d19:	ff 75 f4             	pushl  -0xc(%ebp)
+  800d1c:	ff 75 f0             	pushl  -0x10(%ebp)
+  800d1f:	ff 75 0c             	pushl  0xc(%ebp)
+  800d22:	ff 75 08             	pushl  0x8(%ebp)
+  800d25:	e8 f8 fa ff ff       	call   800822 <printnum>
+  800d2a:	83 c4 20             	add    $0x20,%esp
+            break;
+  800d2d:	eb 39                	jmp    800d68 <vprintfmt+0x39b>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800d2f:	83 ec 08             	sub    $0x8,%esp
+  800d32:	ff 75 0c             	pushl  0xc(%ebp)
+  800d35:	53                   	push   %ebx
+  800d36:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d39:	ff d0                	call   *%eax
+  800d3b:	83 c4 10             	add    $0x10,%esp
+            break;
+  800d3e:	eb 28                	jmp    800d68 <vprintfmt+0x39b>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800d40:	83 ec 08             	sub    $0x8,%esp
+  800d43:	ff 75 0c             	pushl  0xc(%ebp)
+  800d46:	6a 25                	push   $0x25
+  800d48:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d4b:	ff d0                	call   *%eax
+  800d4d:	83 c4 10             	add    $0x10,%esp
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800d50:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d54:	eb 04                	jmp    800d5a <vprintfmt+0x38d>
+  800d56:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d5a:	8b 45 10             	mov    0x10(%ebp),%eax
+  800d5d:	83 e8 01             	sub    $0x1,%eax
+  800d60:	0f b6 00             	movzbl (%eax),%eax
+  800d63:	3c 25                	cmp    $0x25,%al
+  800d65:	75 ef                	jne    800d56 <vprintfmt+0x389>
+                /* do nothing */;
+            break;
+  800d67:	90                   	nop
+        }
+    }
+  800d68:	e9 68 fc ff ff       	jmp    8009d5 <vprintfmt+0x8>
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+            if (ch == '\0') {
+                return;
+  800d6d:	90                   	nop
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  800d6e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  800d71:	5b                   	pop    %ebx
+  800d72:	5e                   	pop    %esi
+  800d73:	5d                   	pop    %ebp
+  800d74:	c3                   	ret    
+
+00800d75 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800d75:	55                   	push   %ebp
+  800d76:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800d78:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d7b:	8b 40 08             	mov    0x8(%eax),%eax
+  800d7e:	8d 50 01             	lea    0x1(%eax),%edx
+  800d81:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d84:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800d87:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d8a:	8b 10                	mov    (%eax),%edx
+  800d8c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d8f:	8b 40 04             	mov    0x4(%eax),%eax
+  800d92:	39 c2                	cmp    %eax,%edx
+  800d94:	73 12                	jae    800da8 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800d96:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d99:	8b 00                	mov    (%eax),%eax
+  800d9b:	8d 48 01             	lea    0x1(%eax),%ecx
+  800d9e:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800da1:	89 0a                	mov    %ecx,(%edx)
+  800da3:	8b 55 08             	mov    0x8(%ebp),%edx
+  800da6:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800da8:	90                   	nop
+  800da9:	5d                   	pop    %ebp
+  800daa:	c3                   	ret    
+
+00800dab <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800dab:	55                   	push   %ebp
+  800dac:	89 e5                	mov    %esp,%ebp
+  800dae:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800db1:	8d 45 14             	lea    0x14(%ebp),%eax
+  800db4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800db7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800dba:	50                   	push   %eax
+  800dbb:	ff 75 10             	pushl  0x10(%ebp)
+  800dbe:	ff 75 0c             	pushl  0xc(%ebp)
+  800dc1:	ff 75 08             	pushl  0x8(%ebp)
+  800dc4:	e8 0b 00 00 00       	call   800dd4 <vsnprintf>
+  800dc9:	83 c4 10             	add    $0x10,%esp
+  800dcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800dcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800dd2:	c9                   	leave  
+  800dd3:	c3                   	ret    
+
+00800dd4 <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800dd4:	55                   	push   %ebp
+  800dd5:	89 e5                	mov    %esp,%ebp
+  800dd7:	83 ec 18             	sub    $0x18,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800dda:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ddd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800de0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800de3:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800de6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de9:	01 d0                	add    %edx,%eax
+  800deb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800dee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800df5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800df9:	74 0a                	je     800e05 <vsnprintf+0x31>
+  800dfb:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800dfe:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e01:	39 c2                	cmp    %eax,%edx
+  800e03:	76 07                	jbe    800e0c <vsnprintf+0x38>
+        return -E_INVAL;
+  800e05:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e0a:	eb 20                	jmp    800e2c <vsnprintf+0x58>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e0c:	ff 75 14             	pushl  0x14(%ebp)
+  800e0f:	ff 75 10             	pushl  0x10(%ebp)
+  800e12:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800e15:	50                   	push   %eax
+  800e16:	68 75 0d 80 00       	push   $0x800d75
+  800e1b:	e8 ad fb ff ff       	call   8009cd <vprintfmt>
+  800e20:	83 c4 10             	add    $0x10,%esp
+    // null terminate the buffer
+    *b.buf = '\0';
+  800e23:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e26:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800e29:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e2c:	c9                   	leave  
+  800e2d:	c3                   	ret    
+
+00800e2e <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800e2e:	55                   	push   %ebp
+  800e2f:	89 e5                	mov    %esp,%ebp
+  800e31:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800e34:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e37:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800e3d:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800e40:	b8 20 00 00 00       	mov    $0x20,%eax
+  800e45:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800e48:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800e4b:	89 c1                	mov    %eax,%ecx
+  800e4d:	d3 ea                	shr    %cl,%edx
+  800e4f:	89 d0                	mov    %edx,%eax
+}
+  800e51:	c9                   	leave  
+  800e52:	c3                   	ret    
+
+00800e53 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800e53:	55                   	push   %ebp
+  800e54:	89 e5                	mov    %esp,%ebp
+  800e56:	57                   	push   %edi
+  800e57:	56                   	push   %esi
+  800e58:	53                   	push   %ebx
+  800e59:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800e5c:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e61:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800e67:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800e6d:	6b f0 05             	imul   $0x5,%eax,%esi
+  800e70:	01 fe                	add    %edi,%esi
+  800e72:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800e77:	f7 e7                	mul    %edi
+  800e79:	01 d6                	add    %edx,%esi
+  800e7b:	89 f2                	mov    %esi,%edx
+  800e7d:	83 c0 0b             	add    $0xb,%eax
+  800e80:	83 d2 00             	adc    $0x0,%edx
+  800e83:	89 c7                	mov    %eax,%edi
+  800e85:	83 e7 ff             	and    $0xffffffff,%edi
+  800e88:	89 f9                	mov    %edi,%ecx
+  800e8a:	0f b7 da             	movzwl %dx,%ebx
+  800e8d:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800e93:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800e99:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e9e:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ea4:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ea8:	c1 ea 0c             	shr    $0xc,%edx
+  800eab:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800eae:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800eb1:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800eb8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ebb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ebe:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ec1:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800ec4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec7:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800eca:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ece:	74 1c                	je     800eec <rand+0x99>
+  800ed0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ed3:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ed8:	f7 75 dc             	divl   -0x24(%ebp)
+  800edb:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800ede:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ee1:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ee6:	f7 75 dc             	divl   -0x24(%ebp)
+  800ee9:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800eec:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800eef:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800ef2:	f7 75 dc             	divl   -0x24(%ebp)
+  800ef5:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ef8:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800efb:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800efe:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800f01:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f04:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f07:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800f0a:	83 c4 24             	add    $0x24,%esp
+  800f0d:	5b                   	pop    %ebx
+  800f0e:	5e                   	pop    %esi
+  800f0f:	5f                   	pop    %edi
+  800f10:	5d                   	pop    %ebp
+  800f11:	c3                   	ret    
+
+00800f12 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800f12:	55                   	push   %ebp
+  800f13:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800f15:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f18:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f1d:	a3 00 20 80 00       	mov    %eax,0x802000
+  800f22:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800f28:	90                   	nop
+  800f29:	5d                   	pop    %ebp
+  800f2a:	c3                   	ret    
+
+00800f2b <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  800f2b:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  800f2f:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f32:	ff 71 fc             	pushl  -0x4(%ecx)
+  800f35:	55                   	push   %ebp
+  800f36:	89 e5                	mov    %esp,%ebp
+  800f38:	51                   	push   %ecx
+  800f39:	83 ec 04             	sub    $0x4,%esp
+    cprintf("I read %8x from 0.\n", *(unsigned int *)0);
+  800f3c:	b8 00 00 00 00       	mov    $0x0,%eax
+  800f41:	8b 00                	mov    (%eax),%eax
+  800f43:	83 ec 08             	sub    $0x8,%esp
+  800f46:	50                   	push   %eax
+  800f47:	68 60 12 80 00       	push   $0x801260
+  800f4c:	e8 88 f3 ff ff       	call   8002d9 <cprintf>
+  800f51:	83 c4 10             	add    $0x10,%esp
+    panic("FAIL: T.T\n");
+  800f54:	83 ec 04             	sub    $0x4,%esp
+  800f57:	68 74 12 80 00       	push   $0x801274
+  800f5c:	6a 07                	push   $0x7
+  800f5e:	68 7f 12 80 00       	push   $0x80127f
+  800f63:	e8 b8 f0 ff ff       	call   800020 <__panic>
diff -r -u -P lab6_original/obj/user/faultread.d lab6/obj/user/faultread.d
--- lab6_original/obj/user/faultread.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/faultread.d	2016-04-29 16:22:06.848533461 +0800
@@ -0,0 +1,2 @@
+obj/user/faultread.o obj/user/faultread.d: user/faultread.c libs/stdio.h \
+ libs/defs.h libs/stdarg.h user/libs/ulib.h
diff -r -u -P lab6_original/obj/user/faultreadkernel.asm lab6/obj/user/faultreadkernel.asm
--- lab6_original/obj/user/faultreadkernel.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/faultreadkernel.asm	2016-04-29 16:22:07.728737642 +0800
@@ -0,0 +1,2584 @@
+
+obj/__user_faultreadkernel.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 18             	sub    $0x18,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	83 ec 04             	sub    $0x4,%esp
+  80002f:	ff 75 0c             	pushl  0xc(%ebp)
+  800032:	ff 75 08             	pushl  0x8(%ebp)
+  800035:	68 80 0f 80 00       	push   $0x800f80
+  80003a:	e8 9a 02 00 00       	call   8002d9 <cprintf>
+  80003f:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800042:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800045:	83 ec 08             	sub    $0x8,%esp
+  800048:	50                   	push   %eax
+  800049:	ff 75 10             	pushl  0x10(%ebp)
+  80004c:	e8 5f 02 00 00       	call   8002b0 <vcprintf>
+  800051:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  800054:	83 ec 0c             	sub    $0xc,%esp
+  800057:	68 9a 0f 80 00       	push   $0x800f9a
+  80005c:	e8 78 02 00 00       	call   8002d9 <cprintf>
+  800061:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	83 ec 0c             	sub    $0xc,%esp
+  800067:	6a f6                	push   $0xfffffff6
+  800069:	e8 49 01 00 00       	call   8001b7 <exit>
+
+0080006e <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80006e:	55                   	push   %ebp
+  80006f:	89 e5                	mov    %esp,%ebp
+  800071:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800074:	8d 45 14             	lea    0x14(%ebp),%eax
+  800077:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007a:	83 ec 04             	sub    $0x4,%esp
+  80007d:	ff 75 0c             	pushl  0xc(%ebp)
+  800080:	ff 75 08             	pushl  0x8(%ebp)
+  800083:	68 9c 0f 80 00       	push   $0x800f9c
+  800088:	e8 4c 02 00 00       	call   8002d9 <cprintf>
+  80008d:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800090:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800093:	83 ec 08             	sub    $0x8,%esp
+  800096:	50                   	push   %eax
+  800097:	ff 75 10             	pushl  0x10(%ebp)
+  80009a:	e8 11 02 00 00       	call   8002b0 <vcprintf>
+  80009f:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  8000a2:	83 ec 0c             	sub    $0xc,%esp
+  8000a5:	68 9a 0f 80 00       	push   $0x800f9a
+  8000aa:	e8 2a 02 00 00       	call   8002d9 <cprintf>
+  8000af:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8000b2:	90                   	nop
+  8000b3:	c9                   	leave  
+  8000b4:	c3                   	ret    
+
+008000b5 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b5:	55                   	push   %ebp
+  8000b6:	89 e5                	mov    %esp,%ebp
+  8000b8:	57                   	push   %edi
+  8000b9:	56                   	push   %esi
+  8000ba:	53                   	push   %ebx
+  8000bb:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000be:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cb:	eb 16                	jmp    8000e3 <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8000cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d0:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d3:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d6:	8b 10                	mov    (%eax),%edx
+  8000d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000db:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000df:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8000e3:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e7:	7e e4                	jle    8000cd <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000e9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ec:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000ef:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f2:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f5:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8000f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fb:	cd 80                	int    $0x80
+  8000fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  800100:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800103:	83 c4 20             	add    $0x20,%esp
+  800106:	5b                   	pop    %ebx
+  800107:	5e                   	pop    %esi
+  800108:	5f                   	pop    %edi
+  800109:	5d                   	pop    %ebp
+  80010a:	c3                   	ret    
+
+0080010b <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010b:	55                   	push   %ebp
+  80010c:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_exit, error_code);
+  80010e:	ff 75 08             	pushl  0x8(%ebp)
+  800111:	6a 01                	push   $0x1
+  800113:	e8 9d ff ff ff       	call   8000b5 <syscall>
+  800118:	83 c4 08             	add    $0x8,%esp
+}
+  80011b:	c9                   	leave  
+  80011c:	c3                   	ret    
+
+0080011d <sys_fork>:
+
+int
+sys_fork(void) {
+  80011d:	55                   	push   %ebp
+  80011e:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_fork);
+  800120:	6a 02                	push   $0x2
+  800122:	e8 8e ff ff ff       	call   8000b5 <syscall>
+  800127:	83 c4 04             	add    $0x4,%esp
+}
+  80012a:	c9                   	leave  
+  80012b:	c3                   	ret    
+
+0080012c <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80012c:	55                   	push   %ebp
+  80012d:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_wait, pid, store);
+  80012f:	ff 75 0c             	pushl  0xc(%ebp)
+  800132:	ff 75 08             	pushl  0x8(%ebp)
+  800135:	6a 03                	push   $0x3
+  800137:	e8 79 ff ff ff       	call   8000b5 <syscall>
+  80013c:	83 c4 0c             	add    $0xc,%esp
+}
+  80013f:	c9                   	leave  
+  800140:	c3                   	ret    
+
+00800141 <sys_yield>:
+
+int
+sys_yield(void) {
+  800141:	55                   	push   %ebp
+  800142:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_yield);
+  800144:	6a 0a                	push   $0xa
+  800146:	e8 6a ff ff ff       	call   8000b5 <syscall>
+  80014b:	83 c4 04             	add    $0x4,%esp
+}
+  80014e:	c9                   	leave  
+  80014f:	c3                   	ret    
+
+00800150 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800150:	55                   	push   %ebp
+  800151:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_kill, pid);
+  800153:	ff 75 08             	pushl  0x8(%ebp)
+  800156:	6a 0c                	push   $0xc
+  800158:	e8 58 ff ff ff       	call   8000b5 <syscall>
+  80015d:	83 c4 08             	add    $0x8,%esp
+}
+  800160:	c9                   	leave  
+  800161:	c3                   	ret    
+
+00800162 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800162:	55                   	push   %ebp
+  800163:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_getpid);
+  800165:	6a 12                	push   $0x12
+  800167:	e8 49 ff ff ff       	call   8000b5 <syscall>
+  80016c:	83 c4 04             	add    $0x4,%esp
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_putc, c);
+  800174:	ff 75 08             	pushl  0x8(%ebp)
+  800177:	6a 1e                	push   $0x1e
+  800179:	e8 37 ff ff ff       	call   8000b5 <syscall>
+  80017e:	83 c4 08             	add    $0x8,%esp
+}
+  800181:	c9                   	leave  
+  800182:	c3                   	ret    
+
+00800183 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800183:	55                   	push   %ebp
+  800184:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_pgdir);
+  800186:	6a 1f                	push   $0x1f
+  800188:	e8 28 ff ff ff       	call   8000b5 <syscall>
+  80018d:	83 c4 04             	add    $0x4,%esp
+}
+  800190:	c9                   	leave  
+  800191:	c3                   	ret    
+
+00800192 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  800192:	55                   	push   %ebp
+  800193:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_gettime);
+  800195:	6a 11                	push   $0x11
+  800197:	e8 19 ff ff ff       	call   8000b5 <syscall>
+  80019c:	83 c4 04             	add    $0x4,%esp
+}
+  80019f:	c9                   	leave  
+  8001a0:	c3                   	ret    
+
+008001a1 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001a1:	55                   	push   %ebp
+  8001a2:	89 e5                	mov    %esp,%ebp
+    syscall(SYS_lab6_set_priority, priority);
+  8001a4:	ff 75 08             	pushl  0x8(%ebp)
+  8001a7:	68 ff 00 00 00       	push   $0xff
+  8001ac:	e8 04 ff ff ff       	call   8000b5 <syscall>
+  8001b1:	83 c4 08             	add    $0x8,%esp
+}
+  8001b4:	90                   	nop
+  8001b5:	c9                   	leave  
+  8001b6:	c3                   	ret    
+
+008001b7 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001b7:	55                   	push   %ebp
+  8001b8:	89 e5                	mov    %esp,%ebp
+  8001ba:	83 ec 08             	sub    $0x8,%esp
+    sys_exit(error_code);
+  8001bd:	83 ec 0c             	sub    $0xc,%esp
+  8001c0:	ff 75 08             	pushl  0x8(%ebp)
+  8001c3:	e8 43 ff ff ff       	call   80010b <sys_exit>
+  8001c8:	83 c4 10             	add    $0x10,%esp
+    cprintf("BUG: exit failed.\n");
+  8001cb:	83 ec 0c             	sub    $0xc,%esp
+  8001ce:	68 b8 0f 80 00       	push   $0x800fb8
+  8001d3:	e8 01 01 00 00       	call   8002d9 <cprintf>
+  8001d8:	83 c4 10             	add    $0x10,%esp
+    while (1);
+  8001db:	eb fe                	jmp    8001db <exit+0x24>
+
+008001dd <fork>:
+}
+
+int
+fork(void) {
+  8001dd:	55                   	push   %ebp
+  8001de:	89 e5                	mov    %esp,%ebp
+  8001e0:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8001e3:	e8 35 ff ff ff       	call   80011d <sys_fork>
+}
+  8001e8:	c9                   	leave  
+  8001e9:	c3                   	ret    
+
+008001ea <wait>:
+
+int
+wait(void) {
+  8001ea:	55                   	push   %ebp
+  8001eb:	89 e5                	mov    %esp,%ebp
+  8001ed:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(0, NULL);
+  8001f0:	83 ec 08             	sub    $0x8,%esp
+  8001f3:	6a 00                	push   $0x0
+  8001f5:	6a 00                	push   $0x0
+  8001f7:	e8 30 ff ff ff       	call   80012c <sys_wait>
+  8001fc:	83 c4 10             	add    $0x10,%esp
+}
+  8001ff:	c9                   	leave  
+  800200:	c3                   	ret    
+
+00800201 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800201:	55                   	push   %ebp
+  800202:	89 e5                	mov    %esp,%ebp
+  800204:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(pid, store);
+  800207:	83 ec 08             	sub    $0x8,%esp
+  80020a:	ff 75 0c             	pushl  0xc(%ebp)
+  80020d:	ff 75 08             	pushl  0x8(%ebp)
+  800210:	e8 17 ff ff ff       	call   80012c <sys_wait>
+  800215:	83 c4 10             	add    $0x10,%esp
+}
+  800218:	c9                   	leave  
+  800219:	c3                   	ret    
+
+0080021a <yield>:
+
+void
+yield(void) {
+  80021a:	55                   	push   %ebp
+  80021b:	89 e5                	mov    %esp,%ebp
+  80021d:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800220:	e8 1c ff ff ff       	call   800141 <sys_yield>
+}
+  800225:	90                   	nop
+  800226:	c9                   	leave  
+  800227:	c3                   	ret    
+
+00800228 <kill>:
+
+int
+kill(int pid) {
+  800228:	55                   	push   %ebp
+  800229:	89 e5                	mov    %esp,%ebp
+  80022b:	83 ec 08             	sub    $0x8,%esp
+    return sys_kill(pid);
+  80022e:	83 ec 0c             	sub    $0xc,%esp
+  800231:	ff 75 08             	pushl  0x8(%ebp)
+  800234:	e8 17 ff ff ff       	call   800150 <sys_kill>
+  800239:	83 c4 10             	add    $0x10,%esp
+}
+  80023c:	c9                   	leave  
+  80023d:	c3                   	ret    
+
+0080023e <getpid>:
+
+int
+getpid(void) {
+  80023e:	55                   	push   %ebp
+  80023f:	89 e5                	mov    %esp,%ebp
+  800241:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800244:	e8 19 ff ff ff       	call   800162 <sys_getpid>
+}
+  800249:	c9                   	leave  
+  80024a:	c3                   	ret    
+
+0080024b <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80024b:	55                   	push   %ebp
+  80024c:	89 e5                	mov    %esp,%ebp
+  80024e:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800251:	e8 2d ff ff ff       	call   800183 <sys_pgdir>
+}
+  800256:	90                   	nop
+  800257:	c9                   	leave  
+  800258:	c3                   	ret    
+
+00800259 <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  800259:	55                   	push   %ebp
+  80025a:	89 e5                	mov    %esp,%ebp
+  80025c:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  80025f:	e8 2e ff ff ff       	call   800192 <sys_gettime>
+}
+  800264:	c9                   	leave  
+  800265:	c3                   	ret    
+
+00800266 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800266:	55                   	push   %ebp
+  800267:	89 e5                	mov    %esp,%ebp
+  800269:	83 ec 08             	sub    $0x8,%esp
+    sys_lab6_set_priority(priority);
+  80026c:	83 ec 0c             	sub    $0xc,%esp
+  80026f:	ff 75 08             	pushl  0x8(%ebp)
+  800272:	e8 2a ff ff ff       	call   8001a1 <sys_lab6_set_priority>
+  800277:	83 c4 10             	add    $0x10,%esp
+}
+  80027a:	90                   	nop
+  80027b:	c9                   	leave  
+  80027c:	c3                   	ret    
+
+0080027d <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  80027d:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800282:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800285:	e8 c3 00 00 00       	call   80034d <umain>
+1:  jmp 1b
+  80028a:	eb fe                	jmp    80028a <_start+0xd>
+
+0080028c <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  80028c:	55                   	push   %ebp
+  80028d:	89 e5                	mov    %esp,%ebp
+  80028f:	83 ec 08             	sub    $0x8,%esp
+    sys_putc(c);
+  800292:	83 ec 0c             	sub    $0xc,%esp
+  800295:	ff 75 08             	pushl  0x8(%ebp)
+  800298:	e8 d4 fe ff ff       	call   800171 <sys_putc>
+  80029d:	83 c4 10             	add    $0x10,%esp
+    (*cnt) ++;
+  8002a0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002a3:	8b 00                	mov    (%eax),%eax
+  8002a5:	8d 50 01             	lea    0x1(%eax),%edx
+  8002a8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002ab:	89 10                	mov    %edx,(%eax)
+}
+  8002ad:	90                   	nop
+  8002ae:	c9                   	leave  
+  8002af:	c3                   	ret    
+
+008002b0 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002b0:	55                   	push   %ebp
+  8002b1:	89 e5                	mov    %esp,%ebp
+  8002b3:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  8002b6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002bd:	ff 75 0c             	pushl  0xc(%ebp)
+  8002c0:	ff 75 08             	pushl  0x8(%ebp)
+  8002c3:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  8002c6:	50                   	push   %eax
+  8002c7:	68 8c 02 80 00       	push   $0x80028c
+  8002cc:	e8 fc 06 00 00       	call   8009cd <vprintfmt>
+  8002d1:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  8002d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002d7:	c9                   	leave  
+  8002d8:	c3                   	ret    
+
+008002d9 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  8002d9:	55                   	push   %ebp
+  8002da:	89 e5                	mov    %esp,%ebp
+  8002dc:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8002df:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8002e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  8002e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8002e8:	83 ec 08             	sub    $0x8,%esp
+  8002eb:	50                   	push   %eax
+  8002ec:	ff 75 08             	pushl  0x8(%ebp)
+  8002ef:	e8 bc ff ff ff       	call   8002b0 <vcprintf>
+  8002f4:	83 c4 10             	add    $0x10,%esp
+  8002f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  8002fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002fd:	c9                   	leave  
+  8002fe:	c3                   	ret    
+
+008002ff <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  8002ff:	55                   	push   %ebp
+  800300:	89 e5                	mov    %esp,%ebp
+  800302:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  800305:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80030c:	eb 14                	jmp    800322 <cputs+0x23>
+        cputch(c, &cnt);
+  80030e:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800312:	83 ec 08             	sub    $0x8,%esp
+  800315:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800318:	52                   	push   %edx
+  800319:	50                   	push   %eax
+  80031a:	e8 6d ff ff ff       	call   80028c <cputch>
+  80031f:	83 c4 10             	add    $0x10,%esp
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800322:	8b 45 08             	mov    0x8(%ebp),%eax
+  800325:	8d 50 01             	lea    0x1(%eax),%edx
+  800328:	89 55 08             	mov    %edx,0x8(%ebp)
+  80032b:	0f b6 00             	movzbl (%eax),%eax
+  80032e:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800331:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800335:	75 d7                	jne    80030e <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800337:	83 ec 08             	sub    $0x8,%esp
+  80033a:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  80033d:	50                   	push   %eax
+  80033e:	6a 0a                	push   $0xa
+  800340:	e8 47 ff ff ff       	call   80028c <cputch>
+  800345:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  800348:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80034b:	c9                   	leave  
+  80034c:	c3                   	ret    
+
+0080034d <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  80034d:	55                   	push   %ebp
+  80034e:	89 e5                	mov    %esp,%ebp
+  800350:	83 ec 18             	sub    $0x18,%esp
+    int ret = main();
+  800353:	e8 d3 0b 00 00       	call   800f2b <main>
+  800358:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  80035b:	83 ec 0c             	sub    $0xc,%esp
+  80035e:	ff 75 f4             	pushl  -0xc(%ebp)
+  800361:	e8 51 fe ff ff       	call   8001b7 <exit>
+
+00800366 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800366:	55                   	push   %ebp
+  800367:	89 e5                	mov    %esp,%ebp
+  800369:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  80036c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800373:	eb 04                	jmp    800379 <strlen+0x13>
+        cnt ++;
+  800375:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800379:	8b 45 08             	mov    0x8(%ebp),%eax
+  80037c:	8d 50 01             	lea    0x1(%eax),%edx
+  80037f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800382:	0f b6 00             	movzbl (%eax),%eax
+  800385:	84 c0                	test   %al,%al
+  800387:	75 ec                	jne    800375 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800389:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  80038c:	c9                   	leave  
+  80038d:	c3                   	ret    
+
+0080038e <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  80038e:	55                   	push   %ebp
+  80038f:	89 e5                	mov    %esp,%ebp
+  800391:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800394:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  80039b:	eb 04                	jmp    8003a1 <strnlen+0x13>
+        cnt ++;
+  80039d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  8003a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003a4:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003a7:	73 10                	jae    8003b9 <strnlen+0x2b>
+  8003a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003ac:	8d 50 01             	lea    0x1(%eax),%edx
+  8003af:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003b2:	0f b6 00             	movzbl (%eax),%eax
+  8003b5:	84 c0                	test   %al,%al
+  8003b7:	75 e4                	jne    80039d <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003b9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003bc:	c9                   	leave  
+  8003bd:	c3                   	ret    
+
+008003be <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  8003be:	55                   	push   %ebp
+  8003bf:	89 e5                	mov    %esp,%ebp
+  8003c1:	57                   	push   %edi
+  8003c2:	56                   	push   %esi
+  8003c3:	83 ec 20             	sub    $0x20,%esp
+  8003c6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003cc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8003cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  8003d2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003d8:	89 d1                	mov    %edx,%ecx
+  8003da:	89 c2                	mov    %eax,%edx
+  8003dc:	89 ce                	mov    %ecx,%esi
+  8003de:	89 d7                	mov    %edx,%edi
+  8003e0:	ac                   	lods   %ds:(%esi),%al
+  8003e1:	aa                   	stos   %al,%es:(%edi)
+  8003e2:	84 c0                	test   %al,%al
+  8003e4:	75 fa                	jne    8003e0 <strcpy+0x22>
+  8003e6:	89 fa                	mov    %edi,%edx
+  8003e8:	89 f1                	mov    %esi,%ecx
+  8003ea:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8003ed:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8003f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  8003f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  8003f6:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  8003f7:	83 c4 20             	add    $0x20,%esp
+  8003fa:	5e                   	pop    %esi
+  8003fb:	5f                   	pop    %edi
+  8003fc:	5d                   	pop    %ebp
+  8003fd:	c3                   	ret    
+
+008003fe <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  8003fe:	55                   	push   %ebp
+  8003ff:	89 e5                	mov    %esp,%ebp
+  800401:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800404:	8b 45 08             	mov    0x8(%ebp),%eax
+  800407:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  80040a:	eb 21                	jmp    80042d <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  80040c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80040f:	0f b6 10             	movzbl (%eax),%edx
+  800412:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800415:	88 10                	mov    %dl,(%eax)
+  800417:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80041a:	0f b6 00             	movzbl (%eax),%eax
+  80041d:	84 c0                	test   %al,%al
+  80041f:	74 04                	je     800425 <strncpy+0x27>
+            src ++;
+  800421:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800425:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800429:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  80042d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800431:	75 d9                	jne    80040c <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800433:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800436:	c9                   	leave  
+  800437:	c3                   	ret    
+
+00800438 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800438:	55                   	push   %ebp
+  800439:	89 e5                	mov    %esp,%ebp
+  80043b:	57                   	push   %edi
+  80043c:	56                   	push   %esi
+  80043d:	83 ec 20             	sub    $0x20,%esp
+  800440:	8b 45 08             	mov    0x8(%ebp),%eax
+  800443:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800446:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800449:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  80044c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80044f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800452:	89 d1                	mov    %edx,%ecx
+  800454:	89 c2                	mov    %eax,%edx
+  800456:	89 ce                	mov    %ecx,%esi
+  800458:	89 d7                	mov    %edx,%edi
+  80045a:	ac                   	lods   %ds:(%esi),%al
+  80045b:	ae                   	scas   %es:(%edi),%al
+  80045c:	75 08                	jne    800466 <strcmp+0x2e>
+  80045e:	84 c0                	test   %al,%al
+  800460:	75 f8                	jne    80045a <strcmp+0x22>
+  800462:	31 c0                	xor    %eax,%eax
+  800464:	eb 04                	jmp    80046a <strcmp+0x32>
+  800466:	19 c0                	sbb    %eax,%eax
+  800468:	0c 01                	or     $0x1,%al
+  80046a:	89 fa                	mov    %edi,%edx
+  80046c:	89 f1                	mov    %esi,%ecx
+  80046e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800471:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800474:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800477:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  80047a:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  80047b:	83 c4 20             	add    $0x20,%esp
+  80047e:	5e                   	pop    %esi
+  80047f:	5f                   	pop    %edi
+  800480:	5d                   	pop    %ebp
+  800481:	c3                   	ret    
+
+00800482 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800482:	55                   	push   %ebp
+  800483:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800485:	eb 0c                	jmp    800493 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800487:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  80048b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  80048f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800493:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800497:	74 1a                	je     8004b3 <strncmp+0x31>
+  800499:	8b 45 08             	mov    0x8(%ebp),%eax
+  80049c:	0f b6 00             	movzbl (%eax),%eax
+  80049f:	84 c0                	test   %al,%al
+  8004a1:	74 10                	je     8004b3 <strncmp+0x31>
+  8004a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004a6:	0f b6 10             	movzbl (%eax),%edx
+  8004a9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ac:	0f b6 00             	movzbl (%eax),%eax
+  8004af:	38 c2                	cmp    %al,%dl
+  8004b1:	74 d4                	je     800487 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004b3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004b7:	74 18                	je     8004d1 <strncmp+0x4f>
+  8004b9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004bc:	0f b6 00             	movzbl (%eax),%eax
+  8004bf:	0f b6 d0             	movzbl %al,%edx
+  8004c2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004c5:	0f b6 00             	movzbl (%eax),%eax
+  8004c8:	0f b6 c0             	movzbl %al,%eax
+  8004cb:	29 c2                	sub    %eax,%edx
+  8004cd:	89 d0                	mov    %edx,%eax
+  8004cf:	eb 05                	jmp    8004d6 <strncmp+0x54>
+  8004d1:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8004d6:	5d                   	pop    %ebp
+  8004d7:	c3                   	ret    
+
+008004d8 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  8004d8:	55                   	push   %ebp
+  8004d9:	89 e5                	mov    %esp,%ebp
+  8004db:	83 ec 04             	sub    $0x4,%esp
+  8004de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004e1:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  8004e4:	eb 14                	jmp    8004fa <strchr+0x22>
+        if (*s == c) {
+  8004e6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e9:	0f b6 00             	movzbl (%eax),%eax
+  8004ec:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  8004ef:	75 05                	jne    8004f6 <strchr+0x1e>
+            return (char *)s;
+  8004f1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004f4:	eb 13                	jmp    800509 <strchr+0x31>
+        }
+        s ++;
+  8004f6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  8004fa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fd:	0f b6 00             	movzbl (%eax),%eax
+  800500:	84 c0                	test   %al,%al
+  800502:	75 e2                	jne    8004e6 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800504:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800509:	c9                   	leave  
+  80050a:	c3                   	ret    
+
+0080050b <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  80050b:	55                   	push   %ebp
+  80050c:	89 e5                	mov    %esp,%ebp
+  80050e:	83 ec 04             	sub    $0x4,%esp
+  800511:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800514:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800517:	eb 0f                	jmp    800528 <strfind+0x1d>
+        if (*s == c) {
+  800519:	8b 45 08             	mov    0x8(%ebp),%eax
+  80051c:	0f b6 00             	movzbl (%eax),%eax
+  80051f:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800522:	74 10                	je     800534 <strfind+0x29>
+            break;
+        }
+        s ++;
+  800524:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800528:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052b:	0f b6 00             	movzbl (%eax),%eax
+  80052e:	84 c0                	test   %al,%al
+  800530:	75 e7                	jne    800519 <strfind+0xe>
+  800532:	eb 01                	jmp    800535 <strfind+0x2a>
+        if (*s == c) {
+            break;
+  800534:	90                   	nop
+        }
+        s ++;
+    }
+    return (char *)s;
+  800535:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800538:	c9                   	leave  
+  800539:	c3                   	ret    
+
+0080053a <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  80053a:	55                   	push   %ebp
+  80053b:	89 e5                	mov    %esp,%ebp
+  80053d:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800540:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800547:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80054e:	eb 04                	jmp    800554 <strtol+0x1a>
+        s ++;
+  800550:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800554:	8b 45 08             	mov    0x8(%ebp),%eax
+  800557:	0f b6 00             	movzbl (%eax),%eax
+  80055a:	3c 20                	cmp    $0x20,%al
+  80055c:	74 f2                	je     800550 <strtol+0x16>
+  80055e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800561:	0f b6 00             	movzbl (%eax),%eax
+  800564:	3c 09                	cmp    $0x9,%al
+  800566:	74 e8                	je     800550 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800568:	8b 45 08             	mov    0x8(%ebp),%eax
+  80056b:	0f b6 00             	movzbl (%eax),%eax
+  80056e:	3c 2b                	cmp    $0x2b,%al
+  800570:	75 06                	jne    800578 <strtol+0x3e>
+        s ++;
+  800572:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800576:	eb 15                	jmp    80058d <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800578:	8b 45 08             	mov    0x8(%ebp),%eax
+  80057b:	0f b6 00             	movzbl (%eax),%eax
+  80057e:	3c 2d                	cmp    $0x2d,%al
+  800580:	75 0b                	jne    80058d <strtol+0x53>
+        s ++, neg = 1;
+  800582:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800586:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  80058d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800591:	74 06                	je     800599 <strtol+0x5f>
+  800593:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800597:	75 24                	jne    8005bd <strtol+0x83>
+  800599:	8b 45 08             	mov    0x8(%ebp),%eax
+  80059c:	0f b6 00             	movzbl (%eax),%eax
+  80059f:	3c 30                	cmp    $0x30,%al
+  8005a1:	75 1a                	jne    8005bd <strtol+0x83>
+  8005a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a6:	83 c0 01             	add    $0x1,%eax
+  8005a9:	0f b6 00             	movzbl (%eax),%eax
+  8005ac:	3c 78                	cmp    $0x78,%al
+  8005ae:	75 0d                	jne    8005bd <strtol+0x83>
+        s += 2, base = 16;
+  8005b0:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005b4:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005bb:	eb 2a                	jmp    8005e7 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005bd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005c1:	75 17                	jne    8005da <strtol+0xa0>
+  8005c3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005c6:	0f b6 00             	movzbl (%eax),%eax
+  8005c9:	3c 30                	cmp    $0x30,%al
+  8005cb:	75 0d                	jne    8005da <strtol+0xa0>
+        s ++, base = 8;
+  8005cd:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005d1:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  8005d8:	eb 0d                	jmp    8005e7 <strtol+0xad>
+    }
+    else if (base == 0) {
+  8005da:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005de:	75 07                	jne    8005e7 <strtol+0xad>
+        base = 10;
+  8005e0:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  8005e7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ea:	0f b6 00             	movzbl (%eax),%eax
+  8005ed:	3c 2f                	cmp    $0x2f,%al
+  8005ef:	7e 1b                	jle    80060c <strtol+0xd2>
+  8005f1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005f4:	0f b6 00             	movzbl (%eax),%eax
+  8005f7:	3c 39                	cmp    $0x39,%al
+  8005f9:	7f 11                	jg     80060c <strtol+0xd2>
+            dig = *s - '0';
+  8005fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005fe:	0f b6 00             	movzbl (%eax),%eax
+  800601:	0f be c0             	movsbl %al,%eax
+  800604:	83 e8 30             	sub    $0x30,%eax
+  800607:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80060a:	eb 48                	jmp    800654 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  80060c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80060f:	0f b6 00             	movzbl (%eax),%eax
+  800612:	3c 60                	cmp    $0x60,%al
+  800614:	7e 1b                	jle    800631 <strtol+0xf7>
+  800616:	8b 45 08             	mov    0x8(%ebp),%eax
+  800619:	0f b6 00             	movzbl (%eax),%eax
+  80061c:	3c 7a                	cmp    $0x7a,%al
+  80061e:	7f 11                	jg     800631 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800620:	8b 45 08             	mov    0x8(%ebp),%eax
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	0f be c0             	movsbl %al,%eax
+  800629:	83 e8 57             	sub    $0x57,%eax
+  80062c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80062f:	eb 23                	jmp    800654 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800631:	8b 45 08             	mov    0x8(%ebp),%eax
+  800634:	0f b6 00             	movzbl (%eax),%eax
+  800637:	3c 40                	cmp    $0x40,%al
+  800639:	7e 3c                	jle    800677 <strtol+0x13d>
+  80063b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80063e:	0f b6 00             	movzbl (%eax),%eax
+  800641:	3c 5a                	cmp    $0x5a,%al
+  800643:	7f 32                	jg     800677 <strtol+0x13d>
+            dig = *s - 'A' + 10;
+  800645:	8b 45 08             	mov    0x8(%ebp),%eax
+  800648:	0f b6 00             	movzbl (%eax),%eax
+  80064b:	0f be c0             	movsbl %al,%eax
+  80064e:	83 e8 37             	sub    $0x37,%eax
+  800651:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800654:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800657:	3b 45 10             	cmp    0x10(%ebp),%eax
+  80065a:	7d 1a                	jge    800676 <strtol+0x13c>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  80065c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800660:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800663:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800667:	89 c2                	mov    %eax,%edx
+  800669:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80066c:	01 d0                	add    %edx,%eax
+  80066e:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800671:	e9 71 ff ff ff       	jmp    8005e7 <strtol+0xad>
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+            break;
+  800676:	90                   	nop
+        }
+        s ++, val = (val * base) + dig;
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  800677:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80067b:	74 08                	je     800685 <strtol+0x14b>
+        *endptr = (char *) s;
+  80067d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800680:	8b 55 08             	mov    0x8(%ebp),%edx
+  800683:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800685:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800689:	74 07                	je     800692 <strtol+0x158>
+  80068b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80068e:	f7 d8                	neg    %eax
+  800690:	eb 03                	jmp    800695 <strtol+0x15b>
+  800692:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800695:	c9                   	leave  
+  800696:	c3                   	ret    
+
+00800697 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800697:	55                   	push   %ebp
+  800698:	89 e5                	mov    %esp,%ebp
+  80069a:	57                   	push   %edi
+  80069b:	83 ec 24             	sub    $0x24,%esp
+  80069e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006a1:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006a4:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006a8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006ab:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006ae:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006b1:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006b7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006ba:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006be:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006c1:	89 d7                	mov    %edx,%edi
+  8006c3:	f3 aa                	rep stos %al,%es:(%edi)
+  8006c5:	89 fa                	mov    %edi,%edx
+  8006c7:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8006ca:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  8006cd:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006d0:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  8006d1:	83 c4 24             	add    $0x24,%esp
+  8006d4:	5f                   	pop    %edi
+  8006d5:	5d                   	pop    %ebp
+  8006d6:	c3                   	ret    
+
+008006d7 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  8006d7:	55                   	push   %ebp
+  8006d8:	89 e5                	mov    %esp,%ebp
+  8006da:	57                   	push   %edi
+  8006db:	56                   	push   %esi
+  8006dc:	53                   	push   %ebx
+  8006dd:	83 ec 30             	sub    $0x30,%esp
+  8006e0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8006e6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006e9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8006ec:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006ef:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  8006f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8006f5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  8006f8:	73 42                	jae    80073c <memmove+0x65>
+  8006fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8006fd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800700:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800703:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800706:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800709:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  80070c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  80070f:	c1 e8 02             	shr    $0x2,%eax
+  800712:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800714:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800717:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80071a:	89 d7                	mov    %edx,%edi
+  80071c:	89 c6                	mov    %eax,%esi
+  80071e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800720:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800723:	83 e1 03             	and    $0x3,%ecx
+  800726:	74 02                	je     80072a <memmove+0x53>
+  800728:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  80072a:	89 f0                	mov    %esi,%eax
+  80072c:	89 fa                	mov    %edi,%edx
+  80072e:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800731:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800734:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800737:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  80073a:	eb 36                	jmp    800772 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  80073c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80073f:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800742:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800745:	01 c2                	add    %eax,%edx
+  800747:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80074a:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  80074d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800750:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800753:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800756:	89 c1                	mov    %eax,%ecx
+  800758:	89 d8                	mov    %ebx,%eax
+  80075a:	89 d6                	mov    %edx,%esi
+  80075c:	89 c7                	mov    %eax,%edi
+  80075e:	fd                   	std    
+  80075f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800761:	fc                   	cld    
+  800762:	89 f8                	mov    %edi,%eax
+  800764:	89 f2                	mov    %esi,%edx
+  800766:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800769:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  80076c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  80076f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800772:	83 c4 30             	add    $0x30,%esp
+  800775:	5b                   	pop    %ebx
+  800776:	5e                   	pop    %esi
+  800777:	5f                   	pop    %edi
+  800778:	5d                   	pop    %ebp
+  800779:	c3                   	ret    
+
+0080077a <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  80077a:	55                   	push   %ebp
+  80077b:	89 e5                	mov    %esp,%ebp
+  80077d:	57                   	push   %edi
+  80077e:	56                   	push   %esi
+  80077f:	83 ec 20             	sub    $0x20,%esp
+  800782:	8b 45 08             	mov    0x8(%ebp),%eax
+  800785:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800788:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80078b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80078e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800791:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800794:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800797:	c1 e8 02             	shr    $0x2,%eax
+  80079a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  80079c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80079f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007a2:	89 d7                	mov    %edx,%edi
+  8007a4:	89 c6                	mov    %eax,%esi
+  8007a6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007a8:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007ab:	83 e1 03             	and    $0x3,%ecx
+  8007ae:	74 02                	je     8007b2 <memcpy+0x38>
+  8007b0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007b2:	89 f0                	mov    %esi,%eax
+  8007b4:	89 fa                	mov    %edi,%edx
+  8007b6:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007b9:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007bc:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  8007bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007c2:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007c3:	83 c4 20             	add    $0x20,%esp
+  8007c6:	5e                   	pop    %esi
+  8007c7:	5f                   	pop    %edi
+  8007c8:	5d                   	pop    %ebp
+  8007c9:	c3                   	ret    
+
+008007ca <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  8007ca:	55                   	push   %ebp
+  8007cb:	89 e5                	mov    %esp,%ebp
+  8007cd:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  8007d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007d3:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  8007d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007d9:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  8007dc:	eb 30                	jmp    80080e <memcmp+0x44>
+        if (*s1 != *s2) {
+  8007de:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8007e1:	0f b6 10             	movzbl (%eax),%edx
+  8007e4:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8007e7:	0f b6 00             	movzbl (%eax),%eax
+  8007ea:	38 c2                	cmp    %al,%dl
+  8007ec:	74 18                	je     800806 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8007ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8007f1:	0f b6 00             	movzbl (%eax),%eax
+  8007f4:	0f b6 d0             	movzbl %al,%edx
+  8007f7:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8007fa:	0f b6 00             	movzbl (%eax),%eax
+  8007fd:	0f b6 c0             	movzbl %al,%eax
+  800800:	29 c2                	sub    %eax,%edx
+  800802:	89 d0                	mov    %edx,%eax
+  800804:	eb 1a                	jmp    800820 <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800806:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  80080a:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  80080e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800811:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800814:	89 55 10             	mov    %edx,0x10(%ebp)
+  800817:	85 c0                	test   %eax,%eax
+  800819:	75 c3                	jne    8007de <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  80081b:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800820:	c9                   	leave  
+  800821:	c3                   	ret    
+
+00800822 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800822:	55                   	push   %ebp
+  800823:	89 e5                	mov    %esp,%ebp
+  800825:	83 ec 38             	sub    $0x38,%esp
+  800828:	8b 45 10             	mov    0x10(%ebp),%eax
+  80082b:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  80082e:	8b 45 14             	mov    0x14(%ebp),%eax
+  800831:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  800834:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800837:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  80083a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80083d:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800840:	8b 45 18             	mov    0x18(%ebp),%eax
+  800843:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800846:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800849:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80084c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80084f:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  800852:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800855:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800858:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  80085c:	74 1c                	je     80087a <printnum+0x58>
+  80085e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800861:	ba 00 00 00 00       	mov    $0x0,%edx
+  800866:	f7 75 e4             	divl   -0x1c(%ebp)
+  800869:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  80086c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80086f:	ba 00 00 00 00       	mov    $0x0,%edx
+  800874:	f7 75 e4             	divl   -0x1c(%ebp)
+  800877:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80087a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80087d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800880:	f7 75 e4             	divl   -0x1c(%ebp)
+  800883:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800886:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800889:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80088c:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80088f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800892:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800895:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800898:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  80089b:	8b 45 18             	mov    0x18(%ebp),%eax
+  80089e:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008a3:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008a6:	77 41                	ja     8008e9 <printnum+0xc7>
+  8008a8:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008ab:	72 05                	jb     8008b2 <printnum+0x90>
+  8008ad:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  8008b0:	77 37                	ja     8008e9 <printnum+0xc7>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008b2:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008b5:	83 e8 01             	sub    $0x1,%eax
+  8008b8:	83 ec 04             	sub    $0x4,%esp
+  8008bb:	ff 75 20             	pushl  0x20(%ebp)
+  8008be:	50                   	push   %eax
+  8008bf:	ff 75 18             	pushl  0x18(%ebp)
+  8008c2:	ff 75 ec             	pushl  -0x14(%ebp)
+  8008c5:	ff 75 e8             	pushl  -0x18(%ebp)
+  8008c8:	ff 75 0c             	pushl  0xc(%ebp)
+  8008cb:	ff 75 08             	pushl  0x8(%ebp)
+  8008ce:	e8 4f ff ff ff       	call   800822 <printnum>
+  8008d3:	83 c4 20             	add    $0x20,%esp
+  8008d6:	eb 1b                	jmp    8008f3 <printnum+0xd1>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  8008d8:	83 ec 08             	sub    $0x8,%esp
+  8008db:	ff 75 0c             	pushl  0xc(%ebp)
+  8008de:	ff 75 20             	pushl  0x20(%ebp)
+  8008e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008e4:	ff d0                	call   *%eax
+  8008e6:	83 c4 10             	add    $0x10,%esp
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8008e9:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8008ed:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8008f1:	7f e5                	jg     8008d8 <printnum+0xb6>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8008f3:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8008f6:	05 e4 10 80 00       	add    $0x8010e4,%eax
+  8008fb:	0f b6 00             	movzbl (%eax),%eax
+  8008fe:	0f be c0             	movsbl %al,%eax
+  800901:	83 ec 08             	sub    $0x8,%esp
+  800904:	ff 75 0c             	pushl  0xc(%ebp)
+  800907:	50                   	push   %eax
+  800908:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090b:	ff d0                	call   *%eax
+  80090d:	83 c4 10             	add    $0x10,%esp
+}
+  800910:	90                   	nop
+  800911:	c9                   	leave  
+  800912:	c3                   	ret    
+
+00800913 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800913:	55                   	push   %ebp
+  800914:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800916:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80091a:	7e 14                	jle    800930 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80091c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80091f:	8b 00                	mov    (%eax),%eax
+  800921:	8d 48 08             	lea    0x8(%eax),%ecx
+  800924:	8b 55 08             	mov    0x8(%ebp),%edx
+  800927:	89 0a                	mov    %ecx,(%edx)
+  800929:	8b 50 04             	mov    0x4(%eax),%edx
+  80092c:	8b 00                	mov    (%eax),%eax
+  80092e:	eb 30                	jmp    800960 <getuint+0x4d>
+    }
+    else if (lflag) {
+  800930:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800934:	74 16                	je     80094c <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800936:	8b 45 08             	mov    0x8(%ebp),%eax
+  800939:	8b 00                	mov    (%eax),%eax
+  80093b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80093e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800941:	89 0a                	mov    %ecx,(%edx)
+  800943:	8b 00                	mov    (%eax),%eax
+  800945:	ba 00 00 00 00       	mov    $0x0,%edx
+  80094a:	eb 14                	jmp    800960 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80094c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80094f:	8b 00                	mov    (%eax),%eax
+  800951:	8d 48 04             	lea    0x4(%eax),%ecx
+  800954:	8b 55 08             	mov    0x8(%ebp),%edx
+  800957:	89 0a                	mov    %ecx,(%edx)
+  800959:	8b 00                	mov    (%eax),%eax
+  80095b:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800960:	5d                   	pop    %ebp
+  800961:	c3                   	ret    
+
+00800962 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800962:	55                   	push   %ebp
+  800963:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800965:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800969:	7e 14                	jle    80097f <getint+0x1d>
+        return va_arg(*ap, long long);
+  80096b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80096e:	8b 00                	mov    (%eax),%eax
+  800970:	8d 48 08             	lea    0x8(%eax),%ecx
+  800973:	8b 55 08             	mov    0x8(%ebp),%edx
+  800976:	89 0a                	mov    %ecx,(%edx)
+  800978:	8b 50 04             	mov    0x4(%eax),%edx
+  80097b:	8b 00                	mov    (%eax),%eax
+  80097d:	eb 28                	jmp    8009a7 <getint+0x45>
+    }
+    else if (lflag) {
+  80097f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800983:	74 12                	je     800997 <getint+0x35>
+        return va_arg(*ap, long);
+  800985:	8b 45 08             	mov    0x8(%ebp),%eax
+  800988:	8b 00                	mov    (%eax),%eax
+  80098a:	8d 48 04             	lea    0x4(%eax),%ecx
+  80098d:	8b 55 08             	mov    0x8(%ebp),%edx
+  800990:	89 0a                	mov    %ecx,(%edx)
+  800992:	8b 00                	mov    (%eax),%eax
+  800994:	99                   	cltd   
+  800995:	eb 10                	jmp    8009a7 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800997:	8b 45 08             	mov    0x8(%ebp),%eax
+  80099a:	8b 00                	mov    (%eax),%eax
+  80099c:	8d 48 04             	lea    0x4(%eax),%ecx
+  80099f:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009a2:	89 0a                	mov    %ecx,(%edx)
+  8009a4:	8b 00                	mov    (%eax),%eax
+  8009a6:	99                   	cltd   
+    }
+}
+  8009a7:	5d                   	pop    %ebp
+  8009a8:	c3                   	ret    
+
+008009a9 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009a9:	55                   	push   %ebp
+  8009aa:	89 e5                	mov    %esp,%ebp
+  8009ac:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009af:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8009b8:	50                   	push   %eax
+  8009b9:	ff 75 10             	pushl  0x10(%ebp)
+  8009bc:	ff 75 0c             	pushl  0xc(%ebp)
+  8009bf:	ff 75 08             	pushl  0x8(%ebp)
+  8009c2:	e8 06 00 00 00       	call   8009cd <vprintfmt>
+  8009c7:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8009ca:	90                   	nop
+  8009cb:	c9                   	leave  
+  8009cc:	c3                   	ret    
+
+008009cd <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8009cd:	55                   	push   %ebp
+  8009ce:	89 e5                	mov    %esp,%ebp
+  8009d0:	56                   	push   %esi
+  8009d1:	53                   	push   %ebx
+  8009d2:	83 ec 20             	sub    $0x20,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009d5:	eb 17                	jmp    8009ee <vprintfmt+0x21>
+            if (ch == '\0') {
+  8009d7:	85 db                	test   %ebx,%ebx
+  8009d9:	0f 84 8e 03 00 00    	je     800d6d <vprintfmt+0x3a0>
+                return;
+            }
+            putch(ch, putdat);
+  8009df:	83 ec 08             	sub    $0x8,%esp
+  8009e2:	ff 75 0c             	pushl  0xc(%ebp)
+  8009e5:	53                   	push   %ebx
+  8009e6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009e9:	ff d0                	call   *%eax
+  8009eb:	83 c4 10             	add    $0x10,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009ee:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009f1:	8d 50 01             	lea    0x1(%eax),%edx
+  8009f4:	89 55 10             	mov    %edx,0x10(%ebp)
+  8009f7:	0f b6 00             	movzbl (%eax),%eax
+  8009fa:	0f b6 d8             	movzbl %al,%ebx
+  8009fd:	83 fb 25             	cmp    $0x25,%ebx
+  800a00:	75 d5                	jne    8009d7 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a02:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a06:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a10:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a13:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a1a:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a1d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a20:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a23:	8d 50 01             	lea    0x1(%eax),%edx
+  800a26:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a29:	0f b6 00             	movzbl (%eax),%eax
+  800a2c:	0f b6 d8             	movzbl %al,%ebx
+  800a2f:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a32:	83 f8 55             	cmp    $0x55,%eax
+  800a35:	0f 87 05 03 00 00    	ja     800d40 <vprintfmt+0x373>
+  800a3b:	8b 04 85 08 11 80 00 	mov    0x801108(,%eax,4),%eax
+  800a42:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a44:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a48:	eb d6                	jmp    800a20 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a4a:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800a4e:	eb d0                	jmp    800a20 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a50:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800a57:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a5a:	89 d0                	mov    %edx,%eax
+  800a5c:	c1 e0 02             	shl    $0x2,%eax
+  800a5f:	01 d0                	add    %edx,%eax
+  800a61:	01 c0                	add    %eax,%eax
+  800a63:	01 d8                	add    %ebx,%eax
+  800a65:	83 e8 30             	sub    $0x30,%eax
+  800a68:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800a6b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a6e:	0f b6 00             	movzbl (%eax),%eax
+  800a71:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800a74:	83 fb 2f             	cmp    $0x2f,%ebx
+  800a77:	7e 39                	jle    800ab2 <vprintfmt+0xe5>
+  800a79:	83 fb 39             	cmp    $0x39,%ebx
+  800a7c:	7f 34                	jg     800ab2 <vprintfmt+0xe5>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a7e:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  800a82:	eb d3                	jmp    800a57 <vprintfmt+0x8a>
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800a84:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a87:	8d 50 04             	lea    0x4(%eax),%edx
+  800a8a:	89 55 14             	mov    %edx,0x14(%ebp)
+  800a8d:	8b 00                	mov    (%eax),%eax
+  800a8f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800a92:	eb 1f                	jmp    800ab3 <vprintfmt+0xe6>
+
+        case '.':
+            if (width < 0)
+  800a94:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800a98:	79 86                	jns    800a20 <vprintfmt+0x53>
+                width = 0;
+  800a9a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800aa1:	e9 7a ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800aa6:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800aad:	e9 6e ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+            goto process_precision;
+  800ab2:	90                   	nop
+        case '#':
+            altflag = 1;
+            goto reswitch;
+
+        process_precision:
+            if (width < 0)
+  800ab3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ab7:	0f 89 63 ff ff ff    	jns    800a20 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800abd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ac0:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800ac3:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800aca:	e9 51 ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800acf:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800ad3:	e9 48 ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800ad8:	8b 45 14             	mov    0x14(%ebp),%eax
+  800adb:	8d 50 04             	lea    0x4(%eax),%edx
+  800ade:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ae1:	8b 00                	mov    (%eax),%eax
+  800ae3:	83 ec 08             	sub    $0x8,%esp
+  800ae6:	ff 75 0c             	pushl  0xc(%ebp)
+  800ae9:	50                   	push   %eax
+  800aea:	8b 45 08             	mov    0x8(%ebp),%eax
+  800aed:	ff d0                	call   *%eax
+  800aef:	83 c4 10             	add    $0x10,%esp
+            break;
+  800af2:	e9 71 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800af7:	8b 45 14             	mov    0x14(%ebp),%eax
+  800afa:	8d 50 04             	lea    0x4(%eax),%edx
+  800afd:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b00:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b02:	85 db                	test   %ebx,%ebx
+  800b04:	79 02                	jns    800b08 <vprintfmt+0x13b>
+                err = -err;
+  800b06:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b08:	83 fb 18             	cmp    $0x18,%ebx
+  800b0b:	7f 0b                	jg     800b18 <vprintfmt+0x14b>
+  800b0d:	8b 34 9d 80 10 80 00 	mov    0x801080(,%ebx,4),%esi
+  800b14:	85 f6                	test   %esi,%esi
+  800b16:	75 19                	jne    800b31 <vprintfmt+0x164>
+                printfmt(putch, putdat, "error %d", err);
+  800b18:	53                   	push   %ebx
+  800b19:	68 f5 10 80 00       	push   $0x8010f5
+  800b1e:	ff 75 0c             	pushl  0xc(%ebp)
+  800b21:	ff 75 08             	pushl  0x8(%ebp)
+  800b24:	e8 80 fe ff ff       	call   8009a9 <printfmt>
+  800b29:	83 c4 10             	add    $0x10,%esp
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b2c:	e9 37 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  800b31:	56                   	push   %esi
+  800b32:	68 fe 10 80 00       	push   $0x8010fe
+  800b37:	ff 75 0c             	pushl  0xc(%ebp)
+  800b3a:	ff 75 08             	pushl  0x8(%ebp)
+  800b3d:	e8 67 fe ff ff       	call   8009a9 <printfmt>
+  800b42:	83 c4 10             	add    $0x10,%esp
+            }
+            break;
+  800b45:	e9 1e 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800b4a:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b4d:	8d 50 04             	lea    0x4(%eax),%edx
+  800b50:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b53:	8b 30                	mov    (%eax),%esi
+  800b55:	85 f6                	test   %esi,%esi
+  800b57:	75 05                	jne    800b5e <vprintfmt+0x191>
+                p = "(null)";
+  800b59:	be 01 11 80 00       	mov    $0x801101,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800b5e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b62:	7e 76                	jle    800bda <vprintfmt+0x20d>
+  800b64:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800b68:	74 70                	je     800bda <vprintfmt+0x20d>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b6a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b6d:	83 ec 08             	sub    $0x8,%esp
+  800b70:	50                   	push   %eax
+  800b71:	56                   	push   %esi
+  800b72:	e8 17 f8 ff ff       	call   80038e <strnlen>
+  800b77:	83 c4 10             	add    $0x10,%esp
+  800b7a:	89 c2                	mov    %eax,%edx
+  800b7c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800b7f:	29 d0                	sub    %edx,%eax
+  800b81:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b84:	eb 17                	jmp    800b9d <vprintfmt+0x1d0>
+                    putch(padc, putdat);
+  800b86:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800b8a:	83 ec 08             	sub    $0x8,%esp
+  800b8d:	ff 75 0c             	pushl  0xc(%ebp)
+  800b90:	50                   	push   %eax
+  800b91:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b94:	ff d0                	call   *%eax
+  800b96:	83 c4 10             	add    $0x10,%esp
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b99:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800b9d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ba1:	7f e3                	jg     800b86 <vprintfmt+0x1b9>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800ba3:	eb 35                	jmp    800bda <vprintfmt+0x20d>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800ba5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800ba9:	74 1c                	je     800bc7 <vprintfmt+0x1fa>
+  800bab:	83 fb 1f             	cmp    $0x1f,%ebx
+  800bae:	7e 05                	jle    800bb5 <vprintfmt+0x1e8>
+  800bb0:	83 fb 7e             	cmp    $0x7e,%ebx
+  800bb3:	7e 12                	jle    800bc7 <vprintfmt+0x1fa>
+                    putch('?', putdat);
+  800bb5:	83 ec 08             	sub    $0x8,%esp
+  800bb8:	ff 75 0c             	pushl  0xc(%ebp)
+  800bbb:	6a 3f                	push   $0x3f
+  800bbd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bc0:	ff d0                	call   *%eax
+  800bc2:	83 c4 10             	add    $0x10,%esp
+  800bc5:	eb 0f                	jmp    800bd6 <vprintfmt+0x209>
+                }
+                else {
+                    putch(ch, putdat);
+  800bc7:	83 ec 08             	sub    $0x8,%esp
+  800bca:	ff 75 0c             	pushl  0xc(%ebp)
+  800bcd:	53                   	push   %ebx
+  800bce:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bd1:	ff d0                	call   *%eax
+  800bd3:	83 c4 10             	add    $0x10,%esp
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bd6:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800bda:	89 f0                	mov    %esi,%eax
+  800bdc:	8d 70 01             	lea    0x1(%eax),%esi
+  800bdf:	0f b6 00             	movzbl (%eax),%eax
+  800be2:	0f be d8             	movsbl %al,%ebx
+  800be5:	85 db                	test   %ebx,%ebx
+  800be7:	74 26                	je     800c0f <vprintfmt+0x242>
+  800be9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800bed:	78 b6                	js     800ba5 <vprintfmt+0x1d8>
+  800bef:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  800bf3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800bf7:	79 ac                	jns    800ba5 <vprintfmt+0x1d8>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800bf9:	eb 14                	jmp    800c0f <vprintfmt+0x242>
+                putch(' ', putdat);
+  800bfb:	83 ec 08             	sub    $0x8,%esp
+  800bfe:	ff 75 0c             	pushl  0xc(%ebp)
+  800c01:	6a 20                	push   $0x20
+  800c03:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c06:	ff d0                	call   *%eax
+  800c08:	83 c4 10             	add    $0x10,%esp
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c0b:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c0f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c13:	7f e6                	jg     800bfb <vprintfmt+0x22e>
+                putch(' ', putdat);
+            }
+            break;
+  800c15:	e9 4e 01 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c1a:	83 ec 08             	sub    $0x8,%esp
+  800c1d:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c20:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c23:	50                   	push   %eax
+  800c24:	e8 39 fd ff ff       	call   800962 <getint>
+  800c29:	83 c4 10             	add    $0x10,%esp
+  800c2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c2f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c32:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c35:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c38:	85 d2                	test   %edx,%edx
+  800c3a:	79 23                	jns    800c5f <vprintfmt+0x292>
+                putch('-', putdat);
+  800c3c:	83 ec 08             	sub    $0x8,%esp
+  800c3f:	ff 75 0c             	pushl  0xc(%ebp)
+  800c42:	6a 2d                	push   $0x2d
+  800c44:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c47:	ff d0                	call   *%eax
+  800c49:	83 c4 10             	add    $0x10,%esp
+                num = -(long long)num;
+  800c4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c4f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c52:	f7 d8                	neg    %eax
+  800c54:	83 d2 00             	adc    $0x0,%edx
+  800c57:	f7 da                	neg    %edx
+  800c59:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c5c:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800c5f:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c66:	e9 9f 00 00 00       	jmp    800d0a <vprintfmt+0x33d>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800c6b:	83 ec 08             	sub    $0x8,%esp
+  800c6e:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c71:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c74:	50                   	push   %eax
+  800c75:	e8 99 fc ff ff       	call   800913 <getuint>
+  800c7a:	83 c4 10             	add    $0x10,%esp
+  800c7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c80:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800c83:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c8a:	eb 7e                	jmp    800d0a <vprintfmt+0x33d>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800c8c:	83 ec 08             	sub    $0x8,%esp
+  800c8f:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c92:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c95:	50                   	push   %eax
+  800c96:	e8 78 fc ff ff       	call   800913 <getuint>
+  800c9b:	83 c4 10             	add    $0x10,%esp
+  800c9e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ca1:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800ca4:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800cab:	eb 5d                	jmp    800d0a <vprintfmt+0x33d>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800cad:	83 ec 08             	sub    $0x8,%esp
+  800cb0:	ff 75 0c             	pushl  0xc(%ebp)
+  800cb3:	6a 30                	push   $0x30
+  800cb5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb8:	ff d0                	call   *%eax
+  800cba:	83 c4 10             	add    $0x10,%esp
+            putch('x', putdat);
+  800cbd:	83 ec 08             	sub    $0x8,%esp
+  800cc0:	ff 75 0c             	pushl  0xc(%ebp)
+  800cc3:	6a 78                	push   $0x78
+  800cc5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cc8:	ff d0                	call   *%eax
+  800cca:	83 c4 10             	add    $0x10,%esp
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800ccd:	8b 45 14             	mov    0x14(%ebp),%eax
+  800cd0:	8d 50 04             	lea    0x4(%eax),%edx
+  800cd3:	89 55 14             	mov    %edx,0x14(%ebp)
+  800cd6:	8b 00                	mov    (%eax),%eax
+  800cd8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cdb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800ce2:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800ce9:	eb 1f                	jmp    800d0a <vprintfmt+0x33d>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800ceb:	83 ec 08             	sub    $0x8,%esp
+  800cee:	ff 75 e0             	pushl  -0x20(%ebp)
+  800cf1:	8d 45 14             	lea    0x14(%ebp),%eax
+  800cf4:	50                   	push   %eax
+  800cf5:	e8 19 fc ff ff       	call   800913 <getuint>
+  800cfa:	83 c4 10             	add    $0x10,%esp
+  800cfd:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d00:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d03:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d0a:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d11:	83 ec 04             	sub    $0x4,%esp
+  800d14:	52                   	push   %edx
+  800d15:	ff 75 e8             	pushl  -0x18(%ebp)
+  800d18:	50                   	push   %eax
+  800d19:	ff 75 f4             	pushl  -0xc(%ebp)
+  800d1c:	ff 75 f0             	pushl  -0x10(%ebp)
+  800d1f:	ff 75 0c             	pushl  0xc(%ebp)
+  800d22:	ff 75 08             	pushl  0x8(%ebp)
+  800d25:	e8 f8 fa ff ff       	call   800822 <printnum>
+  800d2a:	83 c4 20             	add    $0x20,%esp
+            break;
+  800d2d:	eb 39                	jmp    800d68 <vprintfmt+0x39b>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800d2f:	83 ec 08             	sub    $0x8,%esp
+  800d32:	ff 75 0c             	pushl  0xc(%ebp)
+  800d35:	53                   	push   %ebx
+  800d36:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d39:	ff d0                	call   *%eax
+  800d3b:	83 c4 10             	add    $0x10,%esp
+            break;
+  800d3e:	eb 28                	jmp    800d68 <vprintfmt+0x39b>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800d40:	83 ec 08             	sub    $0x8,%esp
+  800d43:	ff 75 0c             	pushl  0xc(%ebp)
+  800d46:	6a 25                	push   $0x25
+  800d48:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d4b:	ff d0                	call   *%eax
+  800d4d:	83 c4 10             	add    $0x10,%esp
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800d50:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d54:	eb 04                	jmp    800d5a <vprintfmt+0x38d>
+  800d56:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d5a:	8b 45 10             	mov    0x10(%ebp),%eax
+  800d5d:	83 e8 01             	sub    $0x1,%eax
+  800d60:	0f b6 00             	movzbl (%eax),%eax
+  800d63:	3c 25                	cmp    $0x25,%al
+  800d65:	75 ef                	jne    800d56 <vprintfmt+0x389>
+                /* do nothing */;
+            break;
+  800d67:	90                   	nop
+        }
+    }
+  800d68:	e9 68 fc ff ff       	jmp    8009d5 <vprintfmt+0x8>
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+            if (ch == '\0') {
+                return;
+  800d6d:	90                   	nop
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  800d6e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  800d71:	5b                   	pop    %ebx
+  800d72:	5e                   	pop    %esi
+  800d73:	5d                   	pop    %ebp
+  800d74:	c3                   	ret    
+
+00800d75 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800d75:	55                   	push   %ebp
+  800d76:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800d78:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d7b:	8b 40 08             	mov    0x8(%eax),%eax
+  800d7e:	8d 50 01             	lea    0x1(%eax),%edx
+  800d81:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d84:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800d87:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d8a:	8b 10                	mov    (%eax),%edx
+  800d8c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d8f:	8b 40 04             	mov    0x4(%eax),%eax
+  800d92:	39 c2                	cmp    %eax,%edx
+  800d94:	73 12                	jae    800da8 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800d96:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d99:	8b 00                	mov    (%eax),%eax
+  800d9b:	8d 48 01             	lea    0x1(%eax),%ecx
+  800d9e:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800da1:	89 0a                	mov    %ecx,(%edx)
+  800da3:	8b 55 08             	mov    0x8(%ebp),%edx
+  800da6:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800da8:	90                   	nop
+  800da9:	5d                   	pop    %ebp
+  800daa:	c3                   	ret    
+
+00800dab <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800dab:	55                   	push   %ebp
+  800dac:	89 e5                	mov    %esp,%ebp
+  800dae:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800db1:	8d 45 14             	lea    0x14(%ebp),%eax
+  800db4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800db7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800dba:	50                   	push   %eax
+  800dbb:	ff 75 10             	pushl  0x10(%ebp)
+  800dbe:	ff 75 0c             	pushl  0xc(%ebp)
+  800dc1:	ff 75 08             	pushl  0x8(%ebp)
+  800dc4:	e8 0b 00 00 00       	call   800dd4 <vsnprintf>
+  800dc9:	83 c4 10             	add    $0x10,%esp
+  800dcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800dcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800dd2:	c9                   	leave  
+  800dd3:	c3                   	ret    
+
+00800dd4 <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800dd4:	55                   	push   %ebp
+  800dd5:	89 e5                	mov    %esp,%ebp
+  800dd7:	83 ec 18             	sub    $0x18,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800dda:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ddd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800de0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800de3:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800de6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de9:	01 d0                	add    %edx,%eax
+  800deb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800dee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800df5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800df9:	74 0a                	je     800e05 <vsnprintf+0x31>
+  800dfb:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800dfe:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e01:	39 c2                	cmp    %eax,%edx
+  800e03:	76 07                	jbe    800e0c <vsnprintf+0x38>
+        return -E_INVAL;
+  800e05:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e0a:	eb 20                	jmp    800e2c <vsnprintf+0x58>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e0c:	ff 75 14             	pushl  0x14(%ebp)
+  800e0f:	ff 75 10             	pushl  0x10(%ebp)
+  800e12:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800e15:	50                   	push   %eax
+  800e16:	68 75 0d 80 00       	push   $0x800d75
+  800e1b:	e8 ad fb ff ff       	call   8009cd <vprintfmt>
+  800e20:	83 c4 10             	add    $0x10,%esp
+    // null terminate the buffer
+    *b.buf = '\0';
+  800e23:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e26:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800e29:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e2c:	c9                   	leave  
+  800e2d:	c3                   	ret    
+
+00800e2e <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800e2e:	55                   	push   %ebp
+  800e2f:	89 e5                	mov    %esp,%ebp
+  800e31:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800e34:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e37:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800e3d:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800e40:	b8 20 00 00 00       	mov    $0x20,%eax
+  800e45:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800e48:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800e4b:	89 c1                	mov    %eax,%ecx
+  800e4d:	d3 ea                	shr    %cl,%edx
+  800e4f:	89 d0                	mov    %edx,%eax
+}
+  800e51:	c9                   	leave  
+  800e52:	c3                   	ret    
+
+00800e53 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800e53:	55                   	push   %ebp
+  800e54:	89 e5                	mov    %esp,%ebp
+  800e56:	57                   	push   %edi
+  800e57:	56                   	push   %esi
+  800e58:	53                   	push   %ebx
+  800e59:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800e5c:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e61:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800e67:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800e6d:	6b f0 05             	imul   $0x5,%eax,%esi
+  800e70:	01 fe                	add    %edi,%esi
+  800e72:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800e77:	f7 e7                	mul    %edi
+  800e79:	01 d6                	add    %edx,%esi
+  800e7b:	89 f2                	mov    %esi,%edx
+  800e7d:	83 c0 0b             	add    $0xb,%eax
+  800e80:	83 d2 00             	adc    $0x0,%edx
+  800e83:	89 c7                	mov    %eax,%edi
+  800e85:	83 e7 ff             	and    $0xffffffff,%edi
+  800e88:	89 f9                	mov    %edi,%ecx
+  800e8a:	0f b7 da             	movzwl %dx,%ebx
+  800e8d:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800e93:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800e99:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e9e:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ea4:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ea8:	c1 ea 0c             	shr    $0xc,%edx
+  800eab:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800eae:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800eb1:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800eb8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ebb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ebe:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ec1:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800ec4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec7:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800eca:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ece:	74 1c                	je     800eec <rand+0x99>
+  800ed0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ed3:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ed8:	f7 75 dc             	divl   -0x24(%ebp)
+  800edb:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800ede:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ee1:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ee6:	f7 75 dc             	divl   -0x24(%ebp)
+  800ee9:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800eec:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800eef:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800ef2:	f7 75 dc             	divl   -0x24(%ebp)
+  800ef5:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ef8:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800efb:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800efe:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800f01:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f04:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f07:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800f0a:	83 c4 24             	add    $0x24,%esp
+  800f0d:	5b                   	pop    %ebx
+  800f0e:	5e                   	pop    %esi
+  800f0f:	5f                   	pop    %edi
+  800f10:	5d                   	pop    %ebp
+  800f11:	c3                   	ret    
+
+00800f12 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800f12:	55                   	push   %ebp
+  800f13:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800f15:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f18:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f1d:	a3 00 20 80 00       	mov    %eax,0x802000
+  800f22:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800f28:	90                   	nop
+  800f29:	5d                   	pop    %ebp
+  800f2a:	c3                   	ret    
+
+00800f2b <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  800f2b:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  800f2f:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f32:	ff 71 fc             	pushl  -0x4(%ecx)
+  800f35:	55                   	push   %ebp
+  800f36:	89 e5                	mov    %esp,%ebp
+  800f38:	51                   	push   %ecx
+  800f39:	83 ec 04             	sub    $0x4,%esp
+    cprintf("I read %08x from 0xfac00000!\n", *(unsigned *)0xfac00000);
+  800f3c:	b8 00 00 c0 fa       	mov    $0xfac00000,%eax
+  800f41:	8b 00                	mov    (%eax),%eax
+  800f43:	83 ec 08             	sub    $0x8,%esp
+  800f46:	50                   	push   %eax
+  800f47:	68 60 12 80 00       	push   $0x801260
+  800f4c:	e8 88 f3 ff ff       	call   8002d9 <cprintf>
+  800f51:	83 c4 10             	add    $0x10,%esp
+    panic("FAIL: T.T\n");
+  800f54:	83 ec 04             	sub    $0x4,%esp
+  800f57:	68 7e 12 80 00       	push   $0x80127e
+  800f5c:	6a 07                	push   $0x7
+  800f5e:	68 89 12 80 00       	push   $0x801289
+  800f63:	e8 b8 f0 ff ff       	call   800020 <__panic>
diff -r -u -P lab6_original/obj/user/faultreadkernel.d lab6/obj/user/faultreadkernel.d
--- lab6_original/obj/user/faultreadkernel.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/faultreadkernel.d	2016-04-29 16:22:06.832601602 +0800
@@ -0,0 +1,3 @@
+obj/user/faultreadkernel.o obj/user/faultreadkernel.d: \
+ user/faultreadkernel.c libs/stdio.h libs/defs.h libs/stdarg.h \
+ user/libs/ulib.h
Binary files lab6_original/obj/user/faultreadkernel.o and lab6/obj/user/faultreadkernel.o differ
diff -r -u -P lab6_original/obj/user/faultreadkernel.sym lab6/obj/user/faultreadkernel.sym
--- lab6_original/obj/user/faultreadkernel.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/faultreadkernel.sym	2016-04-29 16:22:07.748651614 +0800
@@ -0,0 +1,76 @@
+00800020 .text
+00800f80 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202c8d .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b5 syscall
+00000000 ulib.c
+00000000 stdio.c
+0080028c cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+00801080 error_string
+00800822 printnum
+00800913 getuint
+00800962 getint
+00800d75 sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 faultreadkernel.c
+008003be strcpy
+0080021a yield
+00800201 waitpid
+00800141 sys_yield
+008006d7 memmove
+00800dab snprintf
+008009cd vprintfmt
+0080011d sys_fork
+008002d9 cprintf
+0080023e getpid
+0080077a memcpy
+00800266 lab6_set_priority
+00800dd4 vsnprintf
+0080034d umain
+00202c8c __STAB_END__
+00800150 sys_kill
+00202c8d __STABSTR_BEGIN__
+00800020 __panic
+0080053a strtol
+0080038e strnlen
+0080024b print_pgdir
+00800228 kill
+0080050b strfind
+008001ea wait
+0080027d _start
+00800e53 rand
+00800482 strncmp
+00800171 sys_putc
+008003fe strncpy
+008007ca memcmp
+008001dd fork
+00800697 memset
+00800f2b main
+00800f12 srand
+00800e2e hash32
+008009a9 printfmt
+00203a75 __STABSTR_END__
+00800438 strcmp
+00800259 gettime_msec
+00800192 sys_gettime
+008002b0 vcprintf
+0080006e __warn
+008002ff cputs
+008001a1 sys_lab6_set_priority
+008001b7 exit
+0080012c sys_wait
+0080010b sys_exit
+00200010 __STAB_BEGIN__
+00800366 strlen
+00800183 sys_pgdir
+008004d8 strchr
+00800162 sys_getpid
Binary files lab6_original/obj/user/faultread.o and lab6/obj/user/faultread.o differ
diff -r -u -P lab6_original/obj/user/faultread.sym lab6/obj/user/faultread.sym
--- lab6_original/obj/user/faultread.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/faultread.sym	2016-04-29 16:22:07.716789259 +0800
@@ -0,0 +1,76 @@
+00800020 .text
+00800f80 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202c8d .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b5 syscall
+00000000 ulib.c
+00000000 stdio.c
+0080028c cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+00801080 error_string
+00800822 printnum
+00800913 getuint
+00800962 getint
+00800d75 sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 faultread.c
+008003be strcpy
+0080021a yield
+00800201 waitpid
+00800141 sys_yield
+008006d7 memmove
+00800dab snprintf
+008009cd vprintfmt
+0080011d sys_fork
+008002d9 cprintf
+0080023e getpid
+0080077a memcpy
+00800266 lab6_set_priority
+00800dd4 vsnprintf
+0080034d umain
+00202c8c __STAB_END__
+00800150 sys_kill
+00202c8d __STABSTR_BEGIN__
+00800020 __panic
+0080053a strtol
+0080038e strnlen
+0080024b print_pgdir
+00800228 kill
+0080050b strfind
+008001ea wait
+0080027d _start
+00800e53 rand
+00800482 strncmp
+00800171 sys_putc
+008003fe strncpy
+008007ca memcmp
+008001dd fork
+00800697 memset
+00800f2b main
+00800f12 srand
+00800e2e hash32
+008009a9 printfmt
+00203a6f __STABSTR_END__
+00800438 strcmp
+00800259 gettime_msec
+00800192 sys_gettime
+008002b0 vcprintf
+0080006e __warn
+008002ff cputs
+008001a1 sys_lab6_set_priority
+008001b7 exit
+0080012c sys_wait
+0080010b sys_exit
+00200010 __STAB_BEGIN__
+00800366 strlen
+00800183 sys_pgdir
+008004d8 strchr
+00800162 sys_getpid
diff -r -u -P lab6_original/obj/user/forktest.asm lab6/obj/user/forktest.asm
--- lab6_original/obj/user/forktest.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/forktest.asm	2016-04-29 16:22:07.732720437 +0800
@@ -0,0 +1,2675 @@
+
+obj/__user_forktest.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 18             	sub    $0x18,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	83 ec 04             	sub    $0x4,%esp
+  80002f:	ff 75 0c             	pushl  0xc(%ebp)
+  800032:	ff 75 08             	pushl  0x8(%ebp)
+  800035:	68 20 10 80 00       	push   $0x801020
+  80003a:	e8 9a 02 00 00       	call   8002d9 <cprintf>
+  80003f:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800042:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800045:	83 ec 08             	sub    $0x8,%esp
+  800048:	50                   	push   %eax
+  800049:	ff 75 10             	pushl  0x10(%ebp)
+  80004c:	e8 5f 02 00 00       	call   8002b0 <vcprintf>
+  800051:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  800054:	83 ec 0c             	sub    $0xc,%esp
+  800057:	68 3a 10 80 00       	push   $0x80103a
+  80005c:	e8 78 02 00 00       	call   8002d9 <cprintf>
+  800061:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	83 ec 0c             	sub    $0xc,%esp
+  800067:	6a f6                	push   $0xfffffff6
+  800069:	e8 49 01 00 00       	call   8001b7 <exit>
+
+0080006e <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80006e:	55                   	push   %ebp
+  80006f:	89 e5                	mov    %esp,%ebp
+  800071:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800074:	8d 45 14             	lea    0x14(%ebp),%eax
+  800077:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007a:	83 ec 04             	sub    $0x4,%esp
+  80007d:	ff 75 0c             	pushl  0xc(%ebp)
+  800080:	ff 75 08             	pushl  0x8(%ebp)
+  800083:	68 3c 10 80 00       	push   $0x80103c
+  800088:	e8 4c 02 00 00       	call   8002d9 <cprintf>
+  80008d:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800090:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800093:	83 ec 08             	sub    $0x8,%esp
+  800096:	50                   	push   %eax
+  800097:	ff 75 10             	pushl  0x10(%ebp)
+  80009a:	e8 11 02 00 00       	call   8002b0 <vcprintf>
+  80009f:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  8000a2:	83 ec 0c             	sub    $0xc,%esp
+  8000a5:	68 3a 10 80 00       	push   $0x80103a
+  8000aa:	e8 2a 02 00 00       	call   8002d9 <cprintf>
+  8000af:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8000b2:	90                   	nop
+  8000b3:	c9                   	leave  
+  8000b4:	c3                   	ret    
+
+008000b5 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b5:	55                   	push   %ebp
+  8000b6:	89 e5                	mov    %esp,%ebp
+  8000b8:	57                   	push   %edi
+  8000b9:	56                   	push   %esi
+  8000ba:	53                   	push   %ebx
+  8000bb:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000be:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cb:	eb 16                	jmp    8000e3 <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8000cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d0:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d3:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d6:	8b 10                	mov    (%eax),%edx
+  8000d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000db:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000df:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8000e3:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e7:	7e e4                	jle    8000cd <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000e9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ec:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000ef:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f2:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f5:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8000f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fb:	cd 80                	int    $0x80
+  8000fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  800100:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800103:	83 c4 20             	add    $0x20,%esp
+  800106:	5b                   	pop    %ebx
+  800107:	5e                   	pop    %esi
+  800108:	5f                   	pop    %edi
+  800109:	5d                   	pop    %ebp
+  80010a:	c3                   	ret    
+
+0080010b <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010b:	55                   	push   %ebp
+  80010c:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_exit, error_code);
+  80010e:	ff 75 08             	pushl  0x8(%ebp)
+  800111:	6a 01                	push   $0x1
+  800113:	e8 9d ff ff ff       	call   8000b5 <syscall>
+  800118:	83 c4 08             	add    $0x8,%esp
+}
+  80011b:	c9                   	leave  
+  80011c:	c3                   	ret    
+
+0080011d <sys_fork>:
+
+int
+sys_fork(void) {
+  80011d:	55                   	push   %ebp
+  80011e:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_fork);
+  800120:	6a 02                	push   $0x2
+  800122:	e8 8e ff ff ff       	call   8000b5 <syscall>
+  800127:	83 c4 04             	add    $0x4,%esp
+}
+  80012a:	c9                   	leave  
+  80012b:	c3                   	ret    
+
+0080012c <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80012c:	55                   	push   %ebp
+  80012d:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_wait, pid, store);
+  80012f:	ff 75 0c             	pushl  0xc(%ebp)
+  800132:	ff 75 08             	pushl  0x8(%ebp)
+  800135:	6a 03                	push   $0x3
+  800137:	e8 79 ff ff ff       	call   8000b5 <syscall>
+  80013c:	83 c4 0c             	add    $0xc,%esp
+}
+  80013f:	c9                   	leave  
+  800140:	c3                   	ret    
+
+00800141 <sys_yield>:
+
+int
+sys_yield(void) {
+  800141:	55                   	push   %ebp
+  800142:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_yield);
+  800144:	6a 0a                	push   $0xa
+  800146:	e8 6a ff ff ff       	call   8000b5 <syscall>
+  80014b:	83 c4 04             	add    $0x4,%esp
+}
+  80014e:	c9                   	leave  
+  80014f:	c3                   	ret    
+
+00800150 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800150:	55                   	push   %ebp
+  800151:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_kill, pid);
+  800153:	ff 75 08             	pushl  0x8(%ebp)
+  800156:	6a 0c                	push   $0xc
+  800158:	e8 58 ff ff ff       	call   8000b5 <syscall>
+  80015d:	83 c4 08             	add    $0x8,%esp
+}
+  800160:	c9                   	leave  
+  800161:	c3                   	ret    
+
+00800162 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800162:	55                   	push   %ebp
+  800163:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_getpid);
+  800165:	6a 12                	push   $0x12
+  800167:	e8 49 ff ff ff       	call   8000b5 <syscall>
+  80016c:	83 c4 04             	add    $0x4,%esp
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_putc, c);
+  800174:	ff 75 08             	pushl  0x8(%ebp)
+  800177:	6a 1e                	push   $0x1e
+  800179:	e8 37 ff ff ff       	call   8000b5 <syscall>
+  80017e:	83 c4 08             	add    $0x8,%esp
+}
+  800181:	c9                   	leave  
+  800182:	c3                   	ret    
+
+00800183 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800183:	55                   	push   %ebp
+  800184:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_pgdir);
+  800186:	6a 1f                	push   $0x1f
+  800188:	e8 28 ff ff ff       	call   8000b5 <syscall>
+  80018d:	83 c4 04             	add    $0x4,%esp
+}
+  800190:	c9                   	leave  
+  800191:	c3                   	ret    
+
+00800192 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  800192:	55                   	push   %ebp
+  800193:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_gettime);
+  800195:	6a 11                	push   $0x11
+  800197:	e8 19 ff ff ff       	call   8000b5 <syscall>
+  80019c:	83 c4 04             	add    $0x4,%esp
+}
+  80019f:	c9                   	leave  
+  8001a0:	c3                   	ret    
+
+008001a1 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001a1:	55                   	push   %ebp
+  8001a2:	89 e5                	mov    %esp,%ebp
+    syscall(SYS_lab6_set_priority, priority);
+  8001a4:	ff 75 08             	pushl  0x8(%ebp)
+  8001a7:	68 ff 00 00 00       	push   $0xff
+  8001ac:	e8 04 ff ff ff       	call   8000b5 <syscall>
+  8001b1:	83 c4 08             	add    $0x8,%esp
+}
+  8001b4:	90                   	nop
+  8001b5:	c9                   	leave  
+  8001b6:	c3                   	ret    
+
+008001b7 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001b7:	55                   	push   %ebp
+  8001b8:	89 e5                	mov    %esp,%ebp
+  8001ba:	83 ec 08             	sub    $0x8,%esp
+    sys_exit(error_code);
+  8001bd:	83 ec 0c             	sub    $0xc,%esp
+  8001c0:	ff 75 08             	pushl  0x8(%ebp)
+  8001c3:	e8 43 ff ff ff       	call   80010b <sys_exit>
+  8001c8:	83 c4 10             	add    $0x10,%esp
+    cprintf("BUG: exit failed.\n");
+  8001cb:	83 ec 0c             	sub    $0xc,%esp
+  8001ce:	68 58 10 80 00       	push   $0x801058
+  8001d3:	e8 01 01 00 00       	call   8002d9 <cprintf>
+  8001d8:	83 c4 10             	add    $0x10,%esp
+    while (1);
+  8001db:	eb fe                	jmp    8001db <exit+0x24>
+
+008001dd <fork>:
+}
+
+int
+fork(void) {
+  8001dd:	55                   	push   %ebp
+  8001de:	89 e5                	mov    %esp,%ebp
+  8001e0:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8001e3:	e8 35 ff ff ff       	call   80011d <sys_fork>
+}
+  8001e8:	c9                   	leave  
+  8001e9:	c3                   	ret    
+
+008001ea <wait>:
+
+int
+wait(void) {
+  8001ea:	55                   	push   %ebp
+  8001eb:	89 e5                	mov    %esp,%ebp
+  8001ed:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(0, NULL);
+  8001f0:	83 ec 08             	sub    $0x8,%esp
+  8001f3:	6a 00                	push   $0x0
+  8001f5:	6a 00                	push   $0x0
+  8001f7:	e8 30 ff ff ff       	call   80012c <sys_wait>
+  8001fc:	83 c4 10             	add    $0x10,%esp
+}
+  8001ff:	c9                   	leave  
+  800200:	c3                   	ret    
+
+00800201 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800201:	55                   	push   %ebp
+  800202:	89 e5                	mov    %esp,%ebp
+  800204:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(pid, store);
+  800207:	83 ec 08             	sub    $0x8,%esp
+  80020a:	ff 75 0c             	pushl  0xc(%ebp)
+  80020d:	ff 75 08             	pushl  0x8(%ebp)
+  800210:	e8 17 ff ff ff       	call   80012c <sys_wait>
+  800215:	83 c4 10             	add    $0x10,%esp
+}
+  800218:	c9                   	leave  
+  800219:	c3                   	ret    
+
+0080021a <yield>:
+
+void
+yield(void) {
+  80021a:	55                   	push   %ebp
+  80021b:	89 e5                	mov    %esp,%ebp
+  80021d:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800220:	e8 1c ff ff ff       	call   800141 <sys_yield>
+}
+  800225:	90                   	nop
+  800226:	c9                   	leave  
+  800227:	c3                   	ret    
+
+00800228 <kill>:
+
+int
+kill(int pid) {
+  800228:	55                   	push   %ebp
+  800229:	89 e5                	mov    %esp,%ebp
+  80022b:	83 ec 08             	sub    $0x8,%esp
+    return sys_kill(pid);
+  80022e:	83 ec 0c             	sub    $0xc,%esp
+  800231:	ff 75 08             	pushl  0x8(%ebp)
+  800234:	e8 17 ff ff ff       	call   800150 <sys_kill>
+  800239:	83 c4 10             	add    $0x10,%esp
+}
+  80023c:	c9                   	leave  
+  80023d:	c3                   	ret    
+
+0080023e <getpid>:
+
+int
+getpid(void) {
+  80023e:	55                   	push   %ebp
+  80023f:	89 e5                	mov    %esp,%ebp
+  800241:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800244:	e8 19 ff ff ff       	call   800162 <sys_getpid>
+}
+  800249:	c9                   	leave  
+  80024a:	c3                   	ret    
+
+0080024b <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80024b:	55                   	push   %ebp
+  80024c:	89 e5                	mov    %esp,%ebp
+  80024e:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800251:	e8 2d ff ff ff       	call   800183 <sys_pgdir>
+}
+  800256:	90                   	nop
+  800257:	c9                   	leave  
+  800258:	c3                   	ret    
+
+00800259 <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  800259:	55                   	push   %ebp
+  80025a:	89 e5                	mov    %esp,%ebp
+  80025c:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  80025f:	e8 2e ff ff ff       	call   800192 <sys_gettime>
+}
+  800264:	c9                   	leave  
+  800265:	c3                   	ret    
+
+00800266 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800266:	55                   	push   %ebp
+  800267:	89 e5                	mov    %esp,%ebp
+  800269:	83 ec 08             	sub    $0x8,%esp
+    sys_lab6_set_priority(priority);
+  80026c:	83 ec 0c             	sub    $0xc,%esp
+  80026f:	ff 75 08             	pushl  0x8(%ebp)
+  800272:	e8 2a ff ff ff       	call   8001a1 <sys_lab6_set_priority>
+  800277:	83 c4 10             	add    $0x10,%esp
+}
+  80027a:	90                   	nop
+  80027b:	c9                   	leave  
+  80027c:	c3                   	ret    
+
+0080027d <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  80027d:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800282:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800285:	e8 c3 00 00 00       	call   80034d <umain>
+1:  jmp 1b
+  80028a:	eb fe                	jmp    80028a <_start+0xd>
+
+0080028c <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  80028c:	55                   	push   %ebp
+  80028d:	89 e5                	mov    %esp,%ebp
+  80028f:	83 ec 08             	sub    $0x8,%esp
+    sys_putc(c);
+  800292:	83 ec 0c             	sub    $0xc,%esp
+  800295:	ff 75 08             	pushl  0x8(%ebp)
+  800298:	e8 d4 fe ff ff       	call   800171 <sys_putc>
+  80029d:	83 c4 10             	add    $0x10,%esp
+    (*cnt) ++;
+  8002a0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002a3:	8b 00                	mov    (%eax),%eax
+  8002a5:	8d 50 01             	lea    0x1(%eax),%edx
+  8002a8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002ab:	89 10                	mov    %edx,(%eax)
+}
+  8002ad:	90                   	nop
+  8002ae:	c9                   	leave  
+  8002af:	c3                   	ret    
+
+008002b0 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002b0:	55                   	push   %ebp
+  8002b1:	89 e5                	mov    %esp,%ebp
+  8002b3:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  8002b6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002bd:	ff 75 0c             	pushl  0xc(%ebp)
+  8002c0:	ff 75 08             	pushl  0x8(%ebp)
+  8002c3:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  8002c6:	50                   	push   %eax
+  8002c7:	68 8c 02 80 00       	push   $0x80028c
+  8002cc:	e8 fc 06 00 00       	call   8009cd <vprintfmt>
+  8002d1:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  8002d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002d7:	c9                   	leave  
+  8002d8:	c3                   	ret    
+
+008002d9 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  8002d9:	55                   	push   %ebp
+  8002da:	89 e5                	mov    %esp,%ebp
+  8002dc:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8002df:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8002e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  8002e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8002e8:	83 ec 08             	sub    $0x8,%esp
+  8002eb:	50                   	push   %eax
+  8002ec:	ff 75 08             	pushl  0x8(%ebp)
+  8002ef:	e8 bc ff ff ff       	call   8002b0 <vcprintf>
+  8002f4:	83 c4 10             	add    $0x10,%esp
+  8002f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  8002fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002fd:	c9                   	leave  
+  8002fe:	c3                   	ret    
+
+008002ff <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  8002ff:	55                   	push   %ebp
+  800300:	89 e5                	mov    %esp,%ebp
+  800302:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  800305:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80030c:	eb 14                	jmp    800322 <cputs+0x23>
+        cputch(c, &cnt);
+  80030e:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800312:	83 ec 08             	sub    $0x8,%esp
+  800315:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800318:	52                   	push   %edx
+  800319:	50                   	push   %eax
+  80031a:	e8 6d ff ff ff       	call   80028c <cputch>
+  80031f:	83 c4 10             	add    $0x10,%esp
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800322:	8b 45 08             	mov    0x8(%ebp),%eax
+  800325:	8d 50 01             	lea    0x1(%eax),%edx
+  800328:	89 55 08             	mov    %edx,0x8(%ebp)
+  80032b:	0f b6 00             	movzbl (%eax),%eax
+  80032e:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800331:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800335:	75 d7                	jne    80030e <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800337:	83 ec 08             	sub    $0x8,%esp
+  80033a:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  80033d:	50                   	push   %eax
+  80033e:	6a 0a                	push   $0xa
+  800340:	e8 47 ff ff ff       	call   80028c <cputch>
+  800345:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  800348:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80034b:	c9                   	leave  
+  80034c:	c3                   	ret    
+
+0080034d <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  80034d:	55                   	push   %ebp
+  80034e:	89 e5                	mov    %esp,%ebp
+  800350:	83 ec 18             	sub    $0x18,%esp
+    int ret = main();
+  800353:	e8 d3 0b 00 00       	call   800f2b <main>
+  800358:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  80035b:	83 ec 0c             	sub    $0xc,%esp
+  80035e:	ff 75 f4             	pushl  -0xc(%ebp)
+  800361:	e8 51 fe ff ff       	call   8001b7 <exit>
+
+00800366 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800366:	55                   	push   %ebp
+  800367:	89 e5                	mov    %esp,%ebp
+  800369:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  80036c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800373:	eb 04                	jmp    800379 <strlen+0x13>
+        cnt ++;
+  800375:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800379:	8b 45 08             	mov    0x8(%ebp),%eax
+  80037c:	8d 50 01             	lea    0x1(%eax),%edx
+  80037f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800382:	0f b6 00             	movzbl (%eax),%eax
+  800385:	84 c0                	test   %al,%al
+  800387:	75 ec                	jne    800375 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800389:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  80038c:	c9                   	leave  
+  80038d:	c3                   	ret    
+
+0080038e <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  80038e:	55                   	push   %ebp
+  80038f:	89 e5                	mov    %esp,%ebp
+  800391:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800394:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  80039b:	eb 04                	jmp    8003a1 <strnlen+0x13>
+        cnt ++;
+  80039d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  8003a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003a4:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003a7:	73 10                	jae    8003b9 <strnlen+0x2b>
+  8003a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003ac:	8d 50 01             	lea    0x1(%eax),%edx
+  8003af:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003b2:	0f b6 00             	movzbl (%eax),%eax
+  8003b5:	84 c0                	test   %al,%al
+  8003b7:	75 e4                	jne    80039d <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003b9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003bc:	c9                   	leave  
+  8003bd:	c3                   	ret    
+
+008003be <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  8003be:	55                   	push   %ebp
+  8003bf:	89 e5                	mov    %esp,%ebp
+  8003c1:	57                   	push   %edi
+  8003c2:	56                   	push   %esi
+  8003c3:	83 ec 20             	sub    $0x20,%esp
+  8003c6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003cc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8003cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  8003d2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003d8:	89 d1                	mov    %edx,%ecx
+  8003da:	89 c2                	mov    %eax,%edx
+  8003dc:	89 ce                	mov    %ecx,%esi
+  8003de:	89 d7                	mov    %edx,%edi
+  8003e0:	ac                   	lods   %ds:(%esi),%al
+  8003e1:	aa                   	stos   %al,%es:(%edi)
+  8003e2:	84 c0                	test   %al,%al
+  8003e4:	75 fa                	jne    8003e0 <strcpy+0x22>
+  8003e6:	89 fa                	mov    %edi,%edx
+  8003e8:	89 f1                	mov    %esi,%ecx
+  8003ea:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8003ed:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8003f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  8003f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  8003f6:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  8003f7:	83 c4 20             	add    $0x20,%esp
+  8003fa:	5e                   	pop    %esi
+  8003fb:	5f                   	pop    %edi
+  8003fc:	5d                   	pop    %ebp
+  8003fd:	c3                   	ret    
+
+008003fe <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  8003fe:	55                   	push   %ebp
+  8003ff:	89 e5                	mov    %esp,%ebp
+  800401:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800404:	8b 45 08             	mov    0x8(%ebp),%eax
+  800407:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  80040a:	eb 21                	jmp    80042d <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  80040c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80040f:	0f b6 10             	movzbl (%eax),%edx
+  800412:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800415:	88 10                	mov    %dl,(%eax)
+  800417:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80041a:	0f b6 00             	movzbl (%eax),%eax
+  80041d:	84 c0                	test   %al,%al
+  80041f:	74 04                	je     800425 <strncpy+0x27>
+            src ++;
+  800421:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800425:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800429:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  80042d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800431:	75 d9                	jne    80040c <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800433:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800436:	c9                   	leave  
+  800437:	c3                   	ret    
+
+00800438 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800438:	55                   	push   %ebp
+  800439:	89 e5                	mov    %esp,%ebp
+  80043b:	57                   	push   %edi
+  80043c:	56                   	push   %esi
+  80043d:	83 ec 20             	sub    $0x20,%esp
+  800440:	8b 45 08             	mov    0x8(%ebp),%eax
+  800443:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800446:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800449:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  80044c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80044f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800452:	89 d1                	mov    %edx,%ecx
+  800454:	89 c2                	mov    %eax,%edx
+  800456:	89 ce                	mov    %ecx,%esi
+  800458:	89 d7                	mov    %edx,%edi
+  80045a:	ac                   	lods   %ds:(%esi),%al
+  80045b:	ae                   	scas   %es:(%edi),%al
+  80045c:	75 08                	jne    800466 <strcmp+0x2e>
+  80045e:	84 c0                	test   %al,%al
+  800460:	75 f8                	jne    80045a <strcmp+0x22>
+  800462:	31 c0                	xor    %eax,%eax
+  800464:	eb 04                	jmp    80046a <strcmp+0x32>
+  800466:	19 c0                	sbb    %eax,%eax
+  800468:	0c 01                	or     $0x1,%al
+  80046a:	89 fa                	mov    %edi,%edx
+  80046c:	89 f1                	mov    %esi,%ecx
+  80046e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800471:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800474:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800477:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  80047a:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  80047b:	83 c4 20             	add    $0x20,%esp
+  80047e:	5e                   	pop    %esi
+  80047f:	5f                   	pop    %edi
+  800480:	5d                   	pop    %ebp
+  800481:	c3                   	ret    
+
+00800482 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800482:	55                   	push   %ebp
+  800483:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800485:	eb 0c                	jmp    800493 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800487:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  80048b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  80048f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800493:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800497:	74 1a                	je     8004b3 <strncmp+0x31>
+  800499:	8b 45 08             	mov    0x8(%ebp),%eax
+  80049c:	0f b6 00             	movzbl (%eax),%eax
+  80049f:	84 c0                	test   %al,%al
+  8004a1:	74 10                	je     8004b3 <strncmp+0x31>
+  8004a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004a6:	0f b6 10             	movzbl (%eax),%edx
+  8004a9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ac:	0f b6 00             	movzbl (%eax),%eax
+  8004af:	38 c2                	cmp    %al,%dl
+  8004b1:	74 d4                	je     800487 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004b3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004b7:	74 18                	je     8004d1 <strncmp+0x4f>
+  8004b9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004bc:	0f b6 00             	movzbl (%eax),%eax
+  8004bf:	0f b6 d0             	movzbl %al,%edx
+  8004c2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004c5:	0f b6 00             	movzbl (%eax),%eax
+  8004c8:	0f b6 c0             	movzbl %al,%eax
+  8004cb:	29 c2                	sub    %eax,%edx
+  8004cd:	89 d0                	mov    %edx,%eax
+  8004cf:	eb 05                	jmp    8004d6 <strncmp+0x54>
+  8004d1:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8004d6:	5d                   	pop    %ebp
+  8004d7:	c3                   	ret    
+
+008004d8 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  8004d8:	55                   	push   %ebp
+  8004d9:	89 e5                	mov    %esp,%ebp
+  8004db:	83 ec 04             	sub    $0x4,%esp
+  8004de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004e1:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  8004e4:	eb 14                	jmp    8004fa <strchr+0x22>
+        if (*s == c) {
+  8004e6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e9:	0f b6 00             	movzbl (%eax),%eax
+  8004ec:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  8004ef:	75 05                	jne    8004f6 <strchr+0x1e>
+            return (char *)s;
+  8004f1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004f4:	eb 13                	jmp    800509 <strchr+0x31>
+        }
+        s ++;
+  8004f6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  8004fa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fd:	0f b6 00             	movzbl (%eax),%eax
+  800500:	84 c0                	test   %al,%al
+  800502:	75 e2                	jne    8004e6 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800504:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800509:	c9                   	leave  
+  80050a:	c3                   	ret    
+
+0080050b <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  80050b:	55                   	push   %ebp
+  80050c:	89 e5                	mov    %esp,%ebp
+  80050e:	83 ec 04             	sub    $0x4,%esp
+  800511:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800514:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800517:	eb 0f                	jmp    800528 <strfind+0x1d>
+        if (*s == c) {
+  800519:	8b 45 08             	mov    0x8(%ebp),%eax
+  80051c:	0f b6 00             	movzbl (%eax),%eax
+  80051f:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800522:	74 10                	je     800534 <strfind+0x29>
+            break;
+        }
+        s ++;
+  800524:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800528:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052b:	0f b6 00             	movzbl (%eax),%eax
+  80052e:	84 c0                	test   %al,%al
+  800530:	75 e7                	jne    800519 <strfind+0xe>
+  800532:	eb 01                	jmp    800535 <strfind+0x2a>
+        if (*s == c) {
+            break;
+  800534:	90                   	nop
+        }
+        s ++;
+    }
+    return (char *)s;
+  800535:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800538:	c9                   	leave  
+  800539:	c3                   	ret    
+
+0080053a <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  80053a:	55                   	push   %ebp
+  80053b:	89 e5                	mov    %esp,%ebp
+  80053d:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800540:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800547:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80054e:	eb 04                	jmp    800554 <strtol+0x1a>
+        s ++;
+  800550:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800554:	8b 45 08             	mov    0x8(%ebp),%eax
+  800557:	0f b6 00             	movzbl (%eax),%eax
+  80055a:	3c 20                	cmp    $0x20,%al
+  80055c:	74 f2                	je     800550 <strtol+0x16>
+  80055e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800561:	0f b6 00             	movzbl (%eax),%eax
+  800564:	3c 09                	cmp    $0x9,%al
+  800566:	74 e8                	je     800550 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800568:	8b 45 08             	mov    0x8(%ebp),%eax
+  80056b:	0f b6 00             	movzbl (%eax),%eax
+  80056e:	3c 2b                	cmp    $0x2b,%al
+  800570:	75 06                	jne    800578 <strtol+0x3e>
+        s ++;
+  800572:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800576:	eb 15                	jmp    80058d <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800578:	8b 45 08             	mov    0x8(%ebp),%eax
+  80057b:	0f b6 00             	movzbl (%eax),%eax
+  80057e:	3c 2d                	cmp    $0x2d,%al
+  800580:	75 0b                	jne    80058d <strtol+0x53>
+        s ++, neg = 1;
+  800582:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800586:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  80058d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800591:	74 06                	je     800599 <strtol+0x5f>
+  800593:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800597:	75 24                	jne    8005bd <strtol+0x83>
+  800599:	8b 45 08             	mov    0x8(%ebp),%eax
+  80059c:	0f b6 00             	movzbl (%eax),%eax
+  80059f:	3c 30                	cmp    $0x30,%al
+  8005a1:	75 1a                	jne    8005bd <strtol+0x83>
+  8005a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a6:	83 c0 01             	add    $0x1,%eax
+  8005a9:	0f b6 00             	movzbl (%eax),%eax
+  8005ac:	3c 78                	cmp    $0x78,%al
+  8005ae:	75 0d                	jne    8005bd <strtol+0x83>
+        s += 2, base = 16;
+  8005b0:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005b4:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005bb:	eb 2a                	jmp    8005e7 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005bd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005c1:	75 17                	jne    8005da <strtol+0xa0>
+  8005c3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005c6:	0f b6 00             	movzbl (%eax),%eax
+  8005c9:	3c 30                	cmp    $0x30,%al
+  8005cb:	75 0d                	jne    8005da <strtol+0xa0>
+        s ++, base = 8;
+  8005cd:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005d1:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  8005d8:	eb 0d                	jmp    8005e7 <strtol+0xad>
+    }
+    else if (base == 0) {
+  8005da:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005de:	75 07                	jne    8005e7 <strtol+0xad>
+        base = 10;
+  8005e0:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  8005e7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ea:	0f b6 00             	movzbl (%eax),%eax
+  8005ed:	3c 2f                	cmp    $0x2f,%al
+  8005ef:	7e 1b                	jle    80060c <strtol+0xd2>
+  8005f1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005f4:	0f b6 00             	movzbl (%eax),%eax
+  8005f7:	3c 39                	cmp    $0x39,%al
+  8005f9:	7f 11                	jg     80060c <strtol+0xd2>
+            dig = *s - '0';
+  8005fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005fe:	0f b6 00             	movzbl (%eax),%eax
+  800601:	0f be c0             	movsbl %al,%eax
+  800604:	83 e8 30             	sub    $0x30,%eax
+  800607:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80060a:	eb 48                	jmp    800654 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  80060c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80060f:	0f b6 00             	movzbl (%eax),%eax
+  800612:	3c 60                	cmp    $0x60,%al
+  800614:	7e 1b                	jle    800631 <strtol+0xf7>
+  800616:	8b 45 08             	mov    0x8(%ebp),%eax
+  800619:	0f b6 00             	movzbl (%eax),%eax
+  80061c:	3c 7a                	cmp    $0x7a,%al
+  80061e:	7f 11                	jg     800631 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800620:	8b 45 08             	mov    0x8(%ebp),%eax
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	0f be c0             	movsbl %al,%eax
+  800629:	83 e8 57             	sub    $0x57,%eax
+  80062c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80062f:	eb 23                	jmp    800654 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800631:	8b 45 08             	mov    0x8(%ebp),%eax
+  800634:	0f b6 00             	movzbl (%eax),%eax
+  800637:	3c 40                	cmp    $0x40,%al
+  800639:	7e 3c                	jle    800677 <strtol+0x13d>
+  80063b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80063e:	0f b6 00             	movzbl (%eax),%eax
+  800641:	3c 5a                	cmp    $0x5a,%al
+  800643:	7f 32                	jg     800677 <strtol+0x13d>
+            dig = *s - 'A' + 10;
+  800645:	8b 45 08             	mov    0x8(%ebp),%eax
+  800648:	0f b6 00             	movzbl (%eax),%eax
+  80064b:	0f be c0             	movsbl %al,%eax
+  80064e:	83 e8 37             	sub    $0x37,%eax
+  800651:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800654:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800657:	3b 45 10             	cmp    0x10(%ebp),%eax
+  80065a:	7d 1a                	jge    800676 <strtol+0x13c>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  80065c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800660:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800663:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800667:	89 c2                	mov    %eax,%edx
+  800669:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80066c:	01 d0                	add    %edx,%eax
+  80066e:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800671:	e9 71 ff ff ff       	jmp    8005e7 <strtol+0xad>
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+            break;
+  800676:	90                   	nop
+        }
+        s ++, val = (val * base) + dig;
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  800677:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80067b:	74 08                	je     800685 <strtol+0x14b>
+        *endptr = (char *) s;
+  80067d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800680:	8b 55 08             	mov    0x8(%ebp),%edx
+  800683:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800685:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800689:	74 07                	je     800692 <strtol+0x158>
+  80068b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80068e:	f7 d8                	neg    %eax
+  800690:	eb 03                	jmp    800695 <strtol+0x15b>
+  800692:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800695:	c9                   	leave  
+  800696:	c3                   	ret    
+
+00800697 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800697:	55                   	push   %ebp
+  800698:	89 e5                	mov    %esp,%ebp
+  80069a:	57                   	push   %edi
+  80069b:	83 ec 24             	sub    $0x24,%esp
+  80069e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006a1:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006a4:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006a8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006ab:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006ae:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006b1:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006b7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006ba:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006be:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006c1:	89 d7                	mov    %edx,%edi
+  8006c3:	f3 aa                	rep stos %al,%es:(%edi)
+  8006c5:	89 fa                	mov    %edi,%edx
+  8006c7:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8006ca:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  8006cd:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006d0:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  8006d1:	83 c4 24             	add    $0x24,%esp
+  8006d4:	5f                   	pop    %edi
+  8006d5:	5d                   	pop    %ebp
+  8006d6:	c3                   	ret    
+
+008006d7 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  8006d7:	55                   	push   %ebp
+  8006d8:	89 e5                	mov    %esp,%ebp
+  8006da:	57                   	push   %edi
+  8006db:	56                   	push   %esi
+  8006dc:	53                   	push   %ebx
+  8006dd:	83 ec 30             	sub    $0x30,%esp
+  8006e0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8006e6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006e9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8006ec:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006ef:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  8006f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8006f5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  8006f8:	73 42                	jae    80073c <memmove+0x65>
+  8006fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8006fd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800700:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800703:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800706:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800709:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  80070c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  80070f:	c1 e8 02             	shr    $0x2,%eax
+  800712:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800714:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800717:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80071a:	89 d7                	mov    %edx,%edi
+  80071c:	89 c6                	mov    %eax,%esi
+  80071e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800720:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800723:	83 e1 03             	and    $0x3,%ecx
+  800726:	74 02                	je     80072a <memmove+0x53>
+  800728:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  80072a:	89 f0                	mov    %esi,%eax
+  80072c:	89 fa                	mov    %edi,%edx
+  80072e:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800731:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800734:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800737:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  80073a:	eb 36                	jmp    800772 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  80073c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80073f:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800742:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800745:	01 c2                	add    %eax,%edx
+  800747:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80074a:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  80074d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800750:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800753:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800756:	89 c1                	mov    %eax,%ecx
+  800758:	89 d8                	mov    %ebx,%eax
+  80075a:	89 d6                	mov    %edx,%esi
+  80075c:	89 c7                	mov    %eax,%edi
+  80075e:	fd                   	std    
+  80075f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800761:	fc                   	cld    
+  800762:	89 f8                	mov    %edi,%eax
+  800764:	89 f2                	mov    %esi,%edx
+  800766:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800769:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  80076c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  80076f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800772:	83 c4 30             	add    $0x30,%esp
+  800775:	5b                   	pop    %ebx
+  800776:	5e                   	pop    %esi
+  800777:	5f                   	pop    %edi
+  800778:	5d                   	pop    %ebp
+  800779:	c3                   	ret    
+
+0080077a <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  80077a:	55                   	push   %ebp
+  80077b:	89 e5                	mov    %esp,%ebp
+  80077d:	57                   	push   %edi
+  80077e:	56                   	push   %esi
+  80077f:	83 ec 20             	sub    $0x20,%esp
+  800782:	8b 45 08             	mov    0x8(%ebp),%eax
+  800785:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800788:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80078b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80078e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800791:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800794:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800797:	c1 e8 02             	shr    $0x2,%eax
+  80079a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  80079c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80079f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007a2:	89 d7                	mov    %edx,%edi
+  8007a4:	89 c6                	mov    %eax,%esi
+  8007a6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007a8:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007ab:	83 e1 03             	and    $0x3,%ecx
+  8007ae:	74 02                	je     8007b2 <memcpy+0x38>
+  8007b0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007b2:	89 f0                	mov    %esi,%eax
+  8007b4:	89 fa                	mov    %edi,%edx
+  8007b6:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007b9:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007bc:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  8007bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007c2:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007c3:	83 c4 20             	add    $0x20,%esp
+  8007c6:	5e                   	pop    %esi
+  8007c7:	5f                   	pop    %edi
+  8007c8:	5d                   	pop    %ebp
+  8007c9:	c3                   	ret    
+
+008007ca <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  8007ca:	55                   	push   %ebp
+  8007cb:	89 e5                	mov    %esp,%ebp
+  8007cd:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  8007d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007d3:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  8007d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007d9:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  8007dc:	eb 30                	jmp    80080e <memcmp+0x44>
+        if (*s1 != *s2) {
+  8007de:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8007e1:	0f b6 10             	movzbl (%eax),%edx
+  8007e4:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8007e7:	0f b6 00             	movzbl (%eax),%eax
+  8007ea:	38 c2                	cmp    %al,%dl
+  8007ec:	74 18                	je     800806 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8007ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8007f1:	0f b6 00             	movzbl (%eax),%eax
+  8007f4:	0f b6 d0             	movzbl %al,%edx
+  8007f7:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8007fa:	0f b6 00             	movzbl (%eax),%eax
+  8007fd:	0f b6 c0             	movzbl %al,%eax
+  800800:	29 c2                	sub    %eax,%edx
+  800802:	89 d0                	mov    %edx,%eax
+  800804:	eb 1a                	jmp    800820 <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800806:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  80080a:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  80080e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800811:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800814:	89 55 10             	mov    %edx,0x10(%ebp)
+  800817:	85 c0                	test   %eax,%eax
+  800819:	75 c3                	jne    8007de <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  80081b:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800820:	c9                   	leave  
+  800821:	c3                   	ret    
+
+00800822 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800822:	55                   	push   %ebp
+  800823:	89 e5                	mov    %esp,%ebp
+  800825:	83 ec 38             	sub    $0x38,%esp
+  800828:	8b 45 10             	mov    0x10(%ebp),%eax
+  80082b:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  80082e:	8b 45 14             	mov    0x14(%ebp),%eax
+  800831:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  800834:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800837:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  80083a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80083d:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800840:	8b 45 18             	mov    0x18(%ebp),%eax
+  800843:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800846:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800849:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80084c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80084f:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  800852:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800855:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800858:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  80085c:	74 1c                	je     80087a <printnum+0x58>
+  80085e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800861:	ba 00 00 00 00       	mov    $0x0,%edx
+  800866:	f7 75 e4             	divl   -0x1c(%ebp)
+  800869:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  80086c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80086f:	ba 00 00 00 00       	mov    $0x0,%edx
+  800874:	f7 75 e4             	divl   -0x1c(%ebp)
+  800877:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80087a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80087d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800880:	f7 75 e4             	divl   -0x1c(%ebp)
+  800883:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800886:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800889:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80088c:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80088f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800892:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800895:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800898:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  80089b:	8b 45 18             	mov    0x18(%ebp),%eax
+  80089e:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008a3:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008a6:	77 41                	ja     8008e9 <printnum+0xc7>
+  8008a8:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008ab:	72 05                	jb     8008b2 <printnum+0x90>
+  8008ad:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  8008b0:	77 37                	ja     8008e9 <printnum+0xc7>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008b2:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008b5:	83 e8 01             	sub    $0x1,%eax
+  8008b8:	83 ec 04             	sub    $0x4,%esp
+  8008bb:	ff 75 20             	pushl  0x20(%ebp)
+  8008be:	50                   	push   %eax
+  8008bf:	ff 75 18             	pushl  0x18(%ebp)
+  8008c2:	ff 75 ec             	pushl  -0x14(%ebp)
+  8008c5:	ff 75 e8             	pushl  -0x18(%ebp)
+  8008c8:	ff 75 0c             	pushl  0xc(%ebp)
+  8008cb:	ff 75 08             	pushl  0x8(%ebp)
+  8008ce:	e8 4f ff ff ff       	call   800822 <printnum>
+  8008d3:	83 c4 20             	add    $0x20,%esp
+  8008d6:	eb 1b                	jmp    8008f3 <printnum+0xd1>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  8008d8:	83 ec 08             	sub    $0x8,%esp
+  8008db:	ff 75 0c             	pushl  0xc(%ebp)
+  8008de:	ff 75 20             	pushl  0x20(%ebp)
+  8008e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008e4:	ff d0                	call   *%eax
+  8008e6:	83 c4 10             	add    $0x10,%esp
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8008e9:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8008ed:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8008f1:	7f e5                	jg     8008d8 <printnum+0xb6>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8008f3:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8008f6:	05 84 11 80 00       	add    $0x801184,%eax
+  8008fb:	0f b6 00             	movzbl (%eax),%eax
+  8008fe:	0f be c0             	movsbl %al,%eax
+  800901:	83 ec 08             	sub    $0x8,%esp
+  800904:	ff 75 0c             	pushl  0xc(%ebp)
+  800907:	50                   	push   %eax
+  800908:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090b:	ff d0                	call   *%eax
+  80090d:	83 c4 10             	add    $0x10,%esp
+}
+  800910:	90                   	nop
+  800911:	c9                   	leave  
+  800912:	c3                   	ret    
+
+00800913 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800913:	55                   	push   %ebp
+  800914:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800916:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80091a:	7e 14                	jle    800930 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80091c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80091f:	8b 00                	mov    (%eax),%eax
+  800921:	8d 48 08             	lea    0x8(%eax),%ecx
+  800924:	8b 55 08             	mov    0x8(%ebp),%edx
+  800927:	89 0a                	mov    %ecx,(%edx)
+  800929:	8b 50 04             	mov    0x4(%eax),%edx
+  80092c:	8b 00                	mov    (%eax),%eax
+  80092e:	eb 30                	jmp    800960 <getuint+0x4d>
+    }
+    else if (lflag) {
+  800930:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800934:	74 16                	je     80094c <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800936:	8b 45 08             	mov    0x8(%ebp),%eax
+  800939:	8b 00                	mov    (%eax),%eax
+  80093b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80093e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800941:	89 0a                	mov    %ecx,(%edx)
+  800943:	8b 00                	mov    (%eax),%eax
+  800945:	ba 00 00 00 00       	mov    $0x0,%edx
+  80094a:	eb 14                	jmp    800960 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80094c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80094f:	8b 00                	mov    (%eax),%eax
+  800951:	8d 48 04             	lea    0x4(%eax),%ecx
+  800954:	8b 55 08             	mov    0x8(%ebp),%edx
+  800957:	89 0a                	mov    %ecx,(%edx)
+  800959:	8b 00                	mov    (%eax),%eax
+  80095b:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800960:	5d                   	pop    %ebp
+  800961:	c3                   	ret    
+
+00800962 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800962:	55                   	push   %ebp
+  800963:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800965:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800969:	7e 14                	jle    80097f <getint+0x1d>
+        return va_arg(*ap, long long);
+  80096b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80096e:	8b 00                	mov    (%eax),%eax
+  800970:	8d 48 08             	lea    0x8(%eax),%ecx
+  800973:	8b 55 08             	mov    0x8(%ebp),%edx
+  800976:	89 0a                	mov    %ecx,(%edx)
+  800978:	8b 50 04             	mov    0x4(%eax),%edx
+  80097b:	8b 00                	mov    (%eax),%eax
+  80097d:	eb 28                	jmp    8009a7 <getint+0x45>
+    }
+    else if (lflag) {
+  80097f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800983:	74 12                	je     800997 <getint+0x35>
+        return va_arg(*ap, long);
+  800985:	8b 45 08             	mov    0x8(%ebp),%eax
+  800988:	8b 00                	mov    (%eax),%eax
+  80098a:	8d 48 04             	lea    0x4(%eax),%ecx
+  80098d:	8b 55 08             	mov    0x8(%ebp),%edx
+  800990:	89 0a                	mov    %ecx,(%edx)
+  800992:	8b 00                	mov    (%eax),%eax
+  800994:	99                   	cltd   
+  800995:	eb 10                	jmp    8009a7 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800997:	8b 45 08             	mov    0x8(%ebp),%eax
+  80099a:	8b 00                	mov    (%eax),%eax
+  80099c:	8d 48 04             	lea    0x4(%eax),%ecx
+  80099f:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009a2:	89 0a                	mov    %ecx,(%edx)
+  8009a4:	8b 00                	mov    (%eax),%eax
+  8009a6:	99                   	cltd   
+    }
+}
+  8009a7:	5d                   	pop    %ebp
+  8009a8:	c3                   	ret    
+
+008009a9 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009a9:	55                   	push   %ebp
+  8009aa:	89 e5                	mov    %esp,%ebp
+  8009ac:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009af:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8009b8:	50                   	push   %eax
+  8009b9:	ff 75 10             	pushl  0x10(%ebp)
+  8009bc:	ff 75 0c             	pushl  0xc(%ebp)
+  8009bf:	ff 75 08             	pushl  0x8(%ebp)
+  8009c2:	e8 06 00 00 00       	call   8009cd <vprintfmt>
+  8009c7:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8009ca:	90                   	nop
+  8009cb:	c9                   	leave  
+  8009cc:	c3                   	ret    
+
+008009cd <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8009cd:	55                   	push   %ebp
+  8009ce:	89 e5                	mov    %esp,%ebp
+  8009d0:	56                   	push   %esi
+  8009d1:	53                   	push   %ebx
+  8009d2:	83 ec 20             	sub    $0x20,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009d5:	eb 17                	jmp    8009ee <vprintfmt+0x21>
+            if (ch == '\0') {
+  8009d7:	85 db                	test   %ebx,%ebx
+  8009d9:	0f 84 8e 03 00 00    	je     800d6d <vprintfmt+0x3a0>
+                return;
+            }
+            putch(ch, putdat);
+  8009df:	83 ec 08             	sub    $0x8,%esp
+  8009e2:	ff 75 0c             	pushl  0xc(%ebp)
+  8009e5:	53                   	push   %ebx
+  8009e6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009e9:	ff d0                	call   *%eax
+  8009eb:	83 c4 10             	add    $0x10,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009ee:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009f1:	8d 50 01             	lea    0x1(%eax),%edx
+  8009f4:	89 55 10             	mov    %edx,0x10(%ebp)
+  8009f7:	0f b6 00             	movzbl (%eax),%eax
+  8009fa:	0f b6 d8             	movzbl %al,%ebx
+  8009fd:	83 fb 25             	cmp    $0x25,%ebx
+  800a00:	75 d5                	jne    8009d7 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a02:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a06:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a10:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a13:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a1a:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a1d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a20:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a23:	8d 50 01             	lea    0x1(%eax),%edx
+  800a26:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a29:	0f b6 00             	movzbl (%eax),%eax
+  800a2c:	0f b6 d8             	movzbl %al,%ebx
+  800a2f:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a32:	83 f8 55             	cmp    $0x55,%eax
+  800a35:	0f 87 05 03 00 00    	ja     800d40 <vprintfmt+0x373>
+  800a3b:	8b 04 85 a8 11 80 00 	mov    0x8011a8(,%eax,4),%eax
+  800a42:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a44:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a48:	eb d6                	jmp    800a20 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a4a:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800a4e:	eb d0                	jmp    800a20 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a50:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800a57:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a5a:	89 d0                	mov    %edx,%eax
+  800a5c:	c1 e0 02             	shl    $0x2,%eax
+  800a5f:	01 d0                	add    %edx,%eax
+  800a61:	01 c0                	add    %eax,%eax
+  800a63:	01 d8                	add    %ebx,%eax
+  800a65:	83 e8 30             	sub    $0x30,%eax
+  800a68:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800a6b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a6e:	0f b6 00             	movzbl (%eax),%eax
+  800a71:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800a74:	83 fb 2f             	cmp    $0x2f,%ebx
+  800a77:	7e 39                	jle    800ab2 <vprintfmt+0xe5>
+  800a79:	83 fb 39             	cmp    $0x39,%ebx
+  800a7c:	7f 34                	jg     800ab2 <vprintfmt+0xe5>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a7e:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  800a82:	eb d3                	jmp    800a57 <vprintfmt+0x8a>
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800a84:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a87:	8d 50 04             	lea    0x4(%eax),%edx
+  800a8a:	89 55 14             	mov    %edx,0x14(%ebp)
+  800a8d:	8b 00                	mov    (%eax),%eax
+  800a8f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800a92:	eb 1f                	jmp    800ab3 <vprintfmt+0xe6>
+
+        case '.':
+            if (width < 0)
+  800a94:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800a98:	79 86                	jns    800a20 <vprintfmt+0x53>
+                width = 0;
+  800a9a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800aa1:	e9 7a ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800aa6:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800aad:	e9 6e ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+            goto process_precision;
+  800ab2:	90                   	nop
+        case '#':
+            altflag = 1;
+            goto reswitch;
+
+        process_precision:
+            if (width < 0)
+  800ab3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ab7:	0f 89 63 ff ff ff    	jns    800a20 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800abd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ac0:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800ac3:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800aca:	e9 51 ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800acf:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800ad3:	e9 48 ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800ad8:	8b 45 14             	mov    0x14(%ebp),%eax
+  800adb:	8d 50 04             	lea    0x4(%eax),%edx
+  800ade:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ae1:	8b 00                	mov    (%eax),%eax
+  800ae3:	83 ec 08             	sub    $0x8,%esp
+  800ae6:	ff 75 0c             	pushl  0xc(%ebp)
+  800ae9:	50                   	push   %eax
+  800aea:	8b 45 08             	mov    0x8(%ebp),%eax
+  800aed:	ff d0                	call   *%eax
+  800aef:	83 c4 10             	add    $0x10,%esp
+            break;
+  800af2:	e9 71 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800af7:	8b 45 14             	mov    0x14(%ebp),%eax
+  800afa:	8d 50 04             	lea    0x4(%eax),%edx
+  800afd:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b00:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b02:	85 db                	test   %ebx,%ebx
+  800b04:	79 02                	jns    800b08 <vprintfmt+0x13b>
+                err = -err;
+  800b06:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b08:	83 fb 18             	cmp    $0x18,%ebx
+  800b0b:	7f 0b                	jg     800b18 <vprintfmt+0x14b>
+  800b0d:	8b 34 9d 20 11 80 00 	mov    0x801120(,%ebx,4),%esi
+  800b14:	85 f6                	test   %esi,%esi
+  800b16:	75 19                	jne    800b31 <vprintfmt+0x164>
+                printfmt(putch, putdat, "error %d", err);
+  800b18:	53                   	push   %ebx
+  800b19:	68 95 11 80 00       	push   $0x801195
+  800b1e:	ff 75 0c             	pushl  0xc(%ebp)
+  800b21:	ff 75 08             	pushl  0x8(%ebp)
+  800b24:	e8 80 fe ff ff       	call   8009a9 <printfmt>
+  800b29:	83 c4 10             	add    $0x10,%esp
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b2c:	e9 37 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  800b31:	56                   	push   %esi
+  800b32:	68 9e 11 80 00       	push   $0x80119e
+  800b37:	ff 75 0c             	pushl  0xc(%ebp)
+  800b3a:	ff 75 08             	pushl  0x8(%ebp)
+  800b3d:	e8 67 fe ff ff       	call   8009a9 <printfmt>
+  800b42:	83 c4 10             	add    $0x10,%esp
+            }
+            break;
+  800b45:	e9 1e 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800b4a:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b4d:	8d 50 04             	lea    0x4(%eax),%edx
+  800b50:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b53:	8b 30                	mov    (%eax),%esi
+  800b55:	85 f6                	test   %esi,%esi
+  800b57:	75 05                	jne    800b5e <vprintfmt+0x191>
+                p = "(null)";
+  800b59:	be a1 11 80 00       	mov    $0x8011a1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800b5e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b62:	7e 76                	jle    800bda <vprintfmt+0x20d>
+  800b64:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800b68:	74 70                	je     800bda <vprintfmt+0x20d>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b6a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b6d:	83 ec 08             	sub    $0x8,%esp
+  800b70:	50                   	push   %eax
+  800b71:	56                   	push   %esi
+  800b72:	e8 17 f8 ff ff       	call   80038e <strnlen>
+  800b77:	83 c4 10             	add    $0x10,%esp
+  800b7a:	89 c2                	mov    %eax,%edx
+  800b7c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800b7f:	29 d0                	sub    %edx,%eax
+  800b81:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b84:	eb 17                	jmp    800b9d <vprintfmt+0x1d0>
+                    putch(padc, putdat);
+  800b86:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800b8a:	83 ec 08             	sub    $0x8,%esp
+  800b8d:	ff 75 0c             	pushl  0xc(%ebp)
+  800b90:	50                   	push   %eax
+  800b91:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b94:	ff d0                	call   *%eax
+  800b96:	83 c4 10             	add    $0x10,%esp
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b99:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800b9d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ba1:	7f e3                	jg     800b86 <vprintfmt+0x1b9>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800ba3:	eb 35                	jmp    800bda <vprintfmt+0x20d>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800ba5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800ba9:	74 1c                	je     800bc7 <vprintfmt+0x1fa>
+  800bab:	83 fb 1f             	cmp    $0x1f,%ebx
+  800bae:	7e 05                	jle    800bb5 <vprintfmt+0x1e8>
+  800bb0:	83 fb 7e             	cmp    $0x7e,%ebx
+  800bb3:	7e 12                	jle    800bc7 <vprintfmt+0x1fa>
+                    putch('?', putdat);
+  800bb5:	83 ec 08             	sub    $0x8,%esp
+  800bb8:	ff 75 0c             	pushl  0xc(%ebp)
+  800bbb:	6a 3f                	push   $0x3f
+  800bbd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bc0:	ff d0                	call   *%eax
+  800bc2:	83 c4 10             	add    $0x10,%esp
+  800bc5:	eb 0f                	jmp    800bd6 <vprintfmt+0x209>
+                }
+                else {
+                    putch(ch, putdat);
+  800bc7:	83 ec 08             	sub    $0x8,%esp
+  800bca:	ff 75 0c             	pushl  0xc(%ebp)
+  800bcd:	53                   	push   %ebx
+  800bce:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bd1:	ff d0                	call   *%eax
+  800bd3:	83 c4 10             	add    $0x10,%esp
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bd6:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800bda:	89 f0                	mov    %esi,%eax
+  800bdc:	8d 70 01             	lea    0x1(%eax),%esi
+  800bdf:	0f b6 00             	movzbl (%eax),%eax
+  800be2:	0f be d8             	movsbl %al,%ebx
+  800be5:	85 db                	test   %ebx,%ebx
+  800be7:	74 26                	je     800c0f <vprintfmt+0x242>
+  800be9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800bed:	78 b6                	js     800ba5 <vprintfmt+0x1d8>
+  800bef:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  800bf3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800bf7:	79 ac                	jns    800ba5 <vprintfmt+0x1d8>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800bf9:	eb 14                	jmp    800c0f <vprintfmt+0x242>
+                putch(' ', putdat);
+  800bfb:	83 ec 08             	sub    $0x8,%esp
+  800bfe:	ff 75 0c             	pushl  0xc(%ebp)
+  800c01:	6a 20                	push   $0x20
+  800c03:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c06:	ff d0                	call   *%eax
+  800c08:	83 c4 10             	add    $0x10,%esp
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c0b:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c0f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c13:	7f e6                	jg     800bfb <vprintfmt+0x22e>
+                putch(' ', putdat);
+            }
+            break;
+  800c15:	e9 4e 01 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c1a:	83 ec 08             	sub    $0x8,%esp
+  800c1d:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c20:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c23:	50                   	push   %eax
+  800c24:	e8 39 fd ff ff       	call   800962 <getint>
+  800c29:	83 c4 10             	add    $0x10,%esp
+  800c2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c2f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c32:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c35:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c38:	85 d2                	test   %edx,%edx
+  800c3a:	79 23                	jns    800c5f <vprintfmt+0x292>
+                putch('-', putdat);
+  800c3c:	83 ec 08             	sub    $0x8,%esp
+  800c3f:	ff 75 0c             	pushl  0xc(%ebp)
+  800c42:	6a 2d                	push   $0x2d
+  800c44:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c47:	ff d0                	call   *%eax
+  800c49:	83 c4 10             	add    $0x10,%esp
+                num = -(long long)num;
+  800c4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c4f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c52:	f7 d8                	neg    %eax
+  800c54:	83 d2 00             	adc    $0x0,%edx
+  800c57:	f7 da                	neg    %edx
+  800c59:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c5c:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800c5f:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c66:	e9 9f 00 00 00       	jmp    800d0a <vprintfmt+0x33d>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800c6b:	83 ec 08             	sub    $0x8,%esp
+  800c6e:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c71:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c74:	50                   	push   %eax
+  800c75:	e8 99 fc ff ff       	call   800913 <getuint>
+  800c7a:	83 c4 10             	add    $0x10,%esp
+  800c7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c80:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800c83:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c8a:	eb 7e                	jmp    800d0a <vprintfmt+0x33d>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800c8c:	83 ec 08             	sub    $0x8,%esp
+  800c8f:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c92:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c95:	50                   	push   %eax
+  800c96:	e8 78 fc ff ff       	call   800913 <getuint>
+  800c9b:	83 c4 10             	add    $0x10,%esp
+  800c9e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ca1:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800ca4:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800cab:	eb 5d                	jmp    800d0a <vprintfmt+0x33d>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800cad:	83 ec 08             	sub    $0x8,%esp
+  800cb0:	ff 75 0c             	pushl  0xc(%ebp)
+  800cb3:	6a 30                	push   $0x30
+  800cb5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb8:	ff d0                	call   *%eax
+  800cba:	83 c4 10             	add    $0x10,%esp
+            putch('x', putdat);
+  800cbd:	83 ec 08             	sub    $0x8,%esp
+  800cc0:	ff 75 0c             	pushl  0xc(%ebp)
+  800cc3:	6a 78                	push   $0x78
+  800cc5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cc8:	ff d0                	call   *%eax
+  800cca:	83 c4 10             	add    $0x10,%esp
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800ccd:	8b 45 14             	mov    0x14(%ebp),%eax
+  800cd0:	8d 50 04             	lea    0x4(%eax),%edx
+  800cd3:	89 55 14             	mov    %edx,0x14(%ebp)
+  800cd6:	8b 00                	mov    (%eax),%eax
+  800cd8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cdb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800ce2:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800ce9:	eb 1f                	jmp    800d0a <vprintfmt+0x33d>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800ceb:	83 ec 08             	sub    $0x8,%esp
+  800cee:	ff 75 e0             	pushl  -0x20(%ebp)
+  800cf1:	8d 45 14             	lea    0x14(%ebp),%eax
+  800cf4:	50                   	push   %eax
+  800cf5:	e8 19 fc ff ff       	call   800913 <getuint>
+  800cfa:	83 c4 10             	add    $0x10,%esp
+  800cfd:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d00:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d03:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d0a:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d11:	83 ec 04             	sub    $0x4,%esp
+  800d14:	52                   	push   %edx
+  800d15:	ff 75 e8             	pushl  -0x18(%ebp)
+  800d18:	50                   	push   %eax
+  800d19:	ff 75 f4             	pushl  -0xc(%ebp)
+  800d1c:	ff 75 f0             	pushl  -0x10(%ebp)
+  800d1f:	ff 75 0c             	pushl  0xc(%ebp)
+  800d22:	ff 75 08             	pushl  0x8(%ebp)
+  800d25:	e8 f8 fa ff ff       	call   800822 <printnum>
+  800d2a:	83 c4 20             	add    $0x20,%esp
+            break;
+  800d2d:	eb 39                	jmp    800d68 <vprintfmt+0x39b>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800d2f:	83 ec 08             	sub    $0x8,%esp
+  800d32:	ff 75 0c             	pushl  0xc(%ebp)
+  800d35:	53                   	push   %ebx
+  800d36:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d39:	ff d0                	call   *%eax
+  800d3b:	83 c4 10             	add    $0x10,%esp
+            break;
+  800d3e:	eb 28                	jmp    800d68 <vprintfmt+0x39b>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800d40:	83 ec 08             	sub    $0x8,%esp
+  800d43:	ff 75 0c             	pushl  0xc(%ebp)
+  800d46:	6a 25                	push   $0x25
+  800d48:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d4b:	ff d0                	call   *%eax
+  800d4d:	83 c4 10             	add    $0x10,%esp
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800d50:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d54:	eb 04                	jmp    800d5a <vprintfmt+0x38d>
+  800d56:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d5a:	8b 45 10             	mov    0x10(%ebp),%eax
+  800d5d:	83 e8 01             	sub    $0x1,%eax
+  800d60:	0f b6 00             	movzbl (%eax),%eax
+  800d63:	3c 25                	cmp    $0x25,%al
+  800d65:	75 ef                	jne    800d56 <vprintfmt+0x389>
+                /* do nothing */;
+            break;
+  800d67:	90                   	nop
+        }
+    }
+  800d68:	e9 68 fc ff ff       	jmp    8009d5 <vprintfmt+0x8>
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+            if (ch == '\0') {
+                return;
+  800d6d:	90                   	nop
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  800d6e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  800d71:	5b                   	pop    %ebx
+  800d72:	5e                   	pop    %esi
+  800d73:	5d                   	pop    %ebp
+  800d74:	c3                   	ret    
+
+00800d75 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800d75:	55                   	push   %ebp
+  800d76:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800d78:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d7b:	8b 40 08             	mov    0x8(%eax),%eax
+  800d7e:	8d 50 01             	lea    0x1(%eax),%edx
+  800d81:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d84:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800d87:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d8a:	8b 10                	mov    (%eax),%edx
+  800d8c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d8f:	8b 40 04             	mov    0x4(%eax),%eax
+  800d92:	39 c2                	cmp    %eax,%edx
+  800d94:	73 12                	jae    800da8 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800d96:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d99:	8b 00                	mov    (%eax),%eax
+  800d9b:	8d 48 01             	lea    0x1(%eax),%ecx
+  800d9e:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800da1:	89 0a                	mov    %ecx,(%edx)
+  800da3:	8b 55 08             	mov    0x8(%ebp),%edx
+  800da6:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800da8:	90                   	nop
+  800da9:	5d                   	pop    %ebp
+  800daa:	c3                   	ret    
+
+00800dab <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800dab:	55                   	push   %ebp
+  800dac:	89 e5                	mov    %esp,%ebp
+  800dae:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800db1:	8d 45 14             	lea    0x14(%ebp),%eax
+  800db4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800db7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800dba:	50                   	push   %eax
+  800dbb:	ff 75 10             	pushl  0x10(%ebp)
+  800dbe:	ff 75 0c             	pushl  0xc(%ebp)
+  800dc1:	ff 75 08             	pushl  0x8(%ebp)
+  800dc4:	e8 0b 00 00 00       	call   800dd4 <vsnprintf>
+  800dc9:	83 c4 10             	add    $0x10,%esp
+  800dcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800dcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800dd2:	c9                   	leave  
+  800dd3:	c3                   	ret    
+
+00800dd4 <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800dd4:	55                   	push   %ebp
+  800dd5:	89 e5                	mov    %esp,%ebp
+  800dd7:	83 ec 18             	sub    $0x18,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800dda:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ddd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800de0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800de3:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800de6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de9:	01 d0                	add    %edx,%eax
+  800deb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800dee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800df5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800df9:	74 0a                	je     800e05 <vsnprintf+0x31>
+  800dfb:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800dfe:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e01:	39 c2                	cmp    %eax,%edx
+  800e03:	76 07                	jbe    800e0c <vsnprintf+0x38>
+        return -E_INVAL;
+  800e05:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e0a:	eb 20                	jmp    800e2c <vsnprintf+0x58>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e0c:	ff 75 14             	pushl  0x14(%ebp)
+  800e0f:	ff 75 10             	pushl  0x10(%ebp)
+  800e12:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800e15:	50                   	push   %eax
+  800e16:	68 75 0d 80 00       	push   $0x800d75
+  800e1b:	e8 ad fb ff ff       	call   8009cd <vprintfmt>
+  800e20:	83 c4 10             	add    $0x10,%esp
+    // null terminate the buffer
+    *b.buf = '\0';
+  800e23:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e26:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800e29:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e2c:	c9                   	leave  
+  800e2d:	c3                   	ret    
+
+00800e2e <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800e2e:	55                   	push   %ebp
+  800e2f:	89 e5                	mov    %esp,%ebp
+  800e31:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800e34:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e37:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800e3d:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800e40:	b8 20 00 00 00       	mov    $0x20,%eax
+  800e45:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800e48:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800e4b:	89 c1                	mov    %eax,%ecx
+  800e4d:	d3 ea                	shr    %cl,%edx
+  800e4f:	89 d0                	mov    %edx,%eax
+}
+  800e51:	c9                   	leave  
+  800e52:	c3                   	ret    
+
+00800e53 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800e53:	55                   	push   %ebp
+  800e54:	89 e5                	mov    %esp,%ebp
+  800e56:	57                   	push   %edi
+  800e57:	56                   	push   %esi
+  800e58:	53                   	push   %ebx
+  800e59:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800e5c:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e61:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800e67:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800e6d:	6b f0 05             	imul   $0x5,%eax,%esi
+  800e70:	01 fe                	add    %edi,%esi
+  800e72:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800e77:	f7 e7                	mul    %edi
+  800e79:	01 d6                	add    %edx,%esi
+  800e7b:	89 f2                	mov    %esi,%edx
+  800e7d:	83 c0 0b             	add    $0xb,%eax
+  800e80:	83 d2 00             	adc    $0x0,%edx
+  800e83:	89 c7                	mov    %eax,%edi
+  800e85:	83 e7 ff             	and    $0xffffffff,%edi
+  800e88:	89 f9                	mov    %edi,%ecx
+  800e8a:	0f b7 da             	movzwl %dx,%ebx
+  800e8d:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800e93:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800e99:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e9e:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ea4:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ea8:	c1 ea 0c             	shr    $0xc,%edx
+  800eab:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800eae:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800eb1:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800eb8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ebb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ebe:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ec1:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800ec4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec7:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800eca:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ece:	74 1c                	je     800eec <rand+0x99>
+  800ed0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ed3:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ed8:	f7 75 dc             	divl   -0x24(%ebp)
+  800edb:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800ede:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ee1:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ee6:	f7 75 dc             	divl   -0x24(%ebp)
+  800ee9:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800eec:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800eef:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800ef2:	f7 75 dc             	divl   -0x24(%ebp)
+  800ef5:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ef8:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800efb:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800efe:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800f01:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f04:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f07:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800f0a:	83 c4 24             	add    $0x24,%esp
+  800f0d:	5b                   	pop    %ebx
+  800f0e:	5e                   	pop    %esi
+  800f0f:	5f                   	pop    %edi
+  800f10:	5d                   	pop    %ebp
+  800f11:	c3                   	ret    
+
+00800f12 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800f12:	55                   	push   %ebp
+  800f13:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800f15:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f18:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f1d:	a3 00 20 80 00       	mov    %eax,0x802000
+  800f22:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800f28:	90                   	nop
+  800f29:	5d                   	pop    %ebp
+  800f2a:	c3                   	ret    
+
+00800f2b <main>:
+#include <stdio.h>
+
+const int max_child = 32;
+
+int
+main(void) {
+  800f2b:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  800f2f:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f32:	ff 71 fc             	pushl  -0x4(%ecx)
+  800f35:	55                   	push   %ebp
+  800f36:	89 e5                	mov    %esp,%ebp
+  800f38:	51                   	push   %ecx
+  800f39:	83 ec 14             	sub    $0x14,%esp
+    int n, pid;
+    for (n = 0; n < max_child; n ++) {
+  800f3c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  800f43:	eb 4b                	jmp    800f90 <main+0x65>
+        if ((pid = fork()) == 0) {
+  800f45:	e8 93 f2 ff ff       	call   8001dd <fork>
+  800f4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800f4d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800f51:	75 1d                	jne    800f70 <main+0x45>
+            cprintf("I am child %d\n", n);
+  800f53:	83 ec 08             	sub    $0x8,%esp
+  800f56:	ff 75 f4             	pushl  -0xc(%ebp)
+  800f59:	68 04 13 80 00       	push   $0x801304
+  800f5e:	e8 76 f3 ff ff       	call   8002d9 <cprintf>
+  800f63:	83 c4 10             	add    $0x10,%esp
+            exit(0);
+  800f66:	83 ec 0c             	sub    $0xc,%esp
+  800f69:	6a 00                	push   $0x0
+  800f6b:	e8 47 f2 ff ff       	call   8001b7 <exit>
+        }
+        assert(pid > 0);
+  800f70:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800f74:	7f 16                	jg     800f8c <main+0x61>
+  800f76:	68 13 13 80 00       	push   $0x801313
+  800f7b:	68 1b 13 80 00       	push   $0x80131b
+  800f80:	6a 0e                	push   $0xe
+  800f82:	68 30 13 80 00       	push   $0x801330
+  800f87:	e8 94 f0 ff ff       	call   800020 <__panic>
+const int max_child = 32;
+
+int
+main(void) {
+    int n, pid;
+    for (n = 0; n < max_child; n ++) {
+  800f8c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  800f90:	b8 20 00 00 00       	mov    $0x20,%eax
+  800f95:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+  800f98:	7c ab                	jl     800f45 <main+0x1a>
+            exit(0);
+        }
+        assert(pid > 0);
+    }
+
+    if (n > max_child) {
+  800f9a:	b8 20 00 00 00       	mov    $0x20,%eax
+  800f9f:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+  800fa2:	7e 35                	jle    800fd9 <main+0xae>
+        panic("fork claimed to work %d times!\n", n);
+  800fa4:	ff 75 f4             	pushl  -0xc(%ebp)
+  800fa7:	68 40 13 80 00       	push   $0x801340
+  800fac:	6a 12                	push   $0x12
+  800fae:	68 30 13 80 00       	push   $0x801330
+  800fb3:	e8 68 f0 ff ff       	call   800020 <__panic>
+    }
+
+    for (; n > 0; n --) {
+        if (wait() != 0) {
+  800fb8:	e8 2d f2 ff ff       	call   8001ea <wait>
+  800fbd:	85 c0                	test   %eax,%eax
+  800fbf:	74 14                	je     800fd5 <main+0xaa>
+            panic("wait stopped early\n");
+  800fc1:	83 ec 04             	sub    $0x4,%esp
+  800fc4:	68 60 13 80 00       	push   $0x801360
+  800fc9:	6a 17                	push   $0x17
+  800fcb:	68 30 13 80 00       	push   $0x801330
+  800fd0:	e8 4b f0 ff ff       	call   800020 <__panic>
+
+    if (n > max_child) {
+        panic("fork claimed to work %d times!\n", n);
+    }
+
+    for (; n > 0; n --) {
+  800fd5:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+  800fd9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+  800fdd:	7f d9                	jg     800fb8 <main+0x8d>
+        if (wait() != 0) {
+            panic("wait stopped early\n");
+        }
+    }
+
+    if (wait() == 0) {
+  800fdf:	e8 06 f2 ff ff       	call   8001ea <wait>
+  800fe4:	85 c0                	test   %eax,%eax
+  800fe6:	75 14                	jne    800ffc <main+0xd1>
+        panic("wait got too many\n");
+  800fe8:	83 ec 04             	sub    $0x4,%esp
+  800feb:	68 74 13 80 00       	push   $0x801374
+  800ff0:	6a 1c                	push   $0x1c
+  800ff2:	68 30 13 80 00       	push   $0x801330
+  800ff7:	e8 24 f0 ff ff       	call   800020 <__panic>
+    }
+
+    cprintf("forktest pass.\n");
+  800ffc:	83 ec 0c             	sub    $0xc,%esp
+  800fff:	68 87 13 80 00       	push   $0x801387
+  801004:	e8 d0 f2 ff ff       	call   8002d9 <cprintf>
+  801009:	83 c4 10             	add    $0x10,%esp
+    return 0;
+  80100c:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  801011:	8b 4d fc             	mov    -0x4(%ebp),%ecx
+  801014:	c9                   	leave  
+  801015:	8d 61 fc             	lea    -0x4(%ecx),%esp
+  801018:	c3                   	ret    
diff -r -u -P lab6_original/obj/user/forktest.d lab6/obj/user/forktest.d
--- lab6_original/obj/user/forktest.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/forktest.d	2016-04-29 16:22:06.840567531 +0800
@@ -0,0 +1,2 @@
+obj/user/forktest.o obj/user/forktest.d: user/forktest.c user/libs/ulib.h \
+ libs/defs.h libs/stdio.h libs/stdarg.h
Binary files lab6_original/obj/user/forktest.o and lab6/obj/user/forktest.o differ
diff -r -u -P lab6_original/obj/user/forktest.sym lab6/obj/user/forktest.sym
--- lab6_original/obj/user/forktest.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/forktest.sym	2016-04-29 16:22:07.752634408 +0800
@@ -0,0 +1,77 @@
+00800020 .text
+00801020 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202da1 .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b5 syscall
+00000000 ulib.c
+00000000 stdio.c
+0080028c cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+00801120 error_string
+00800822 printnum
+00800913 getuint
+00800962 getint
+00800d75 sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 forktest.c
+008003be strcpy
+0080021a yield
+00800201 waitpid
+00800141 sys_yield
+008006d7 memmove
+00800dab snprintf
+008009cd vprintfmt
+0080011d sys_fork
+008002d9 cprintf
+0080023e getpid
+0080077a memcpy
+00800266 lab6_set_priority
+00800dd4 vsnprintf
+0080034d umain
+00202da0 __STAB_END__
+00800150 sys_kill
+00202da1 __STABSTR_BEGIN__
+00800020 __panic
+00801300 max_child
+0080053a strtol
+0080038e strnlen
+0080024b print_pgdir
+00800228 kill
+0080050b strfind
+008001ea wait
+0080027d _start
+00800e53 rand
+00800482 strncmp
+00800171 sys_putc
+008003fe strncpy
+008007ca memcmp
+008001dd fork
+00800697 memset
+00800f2b main
+00800f12 srand
+00800e2e hash32
+008009a9 printfmt
+00203ba5 __STABSTR_END__
+00800438 strcmp
+00800259 gettime_msec
+00800192 sys_gettime
+008002b0 vcprintf
+0080006e __warn
+008002ff cputs
+008001a1 sys_lab6_set_priority
+008001b7 exit
+0080012c sys_wait
+0080010b sys_exit
+00200010 __STAB_BEGIN__
+00800366 strlen
+00800183 sys_pgdir
+008004d8 strchr
+00800162 sys_getpid
diff -r -u -P lab6_original/obj/user/forktree.asm lab6/obj/user/forktree.asm
--- lab6_original/obj/user/forktree.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/forktree.asm	2016-04-29 16:22:07.688909699 +0800
@@ -0,0 +1,2679 @@
+
+obj/__user_forktree.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 18             	sub    $0x18,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	83 ec 04             	sub    $0x4,%esp
+  80002f:	ff 75 0c             	pushl  0xc(%ebp)
+  800032:	ff 75 08             	pushl  0x8(%ebp)
+  800035:	68 20 10 80 00       	push   $0x801020
+  80003a:	e8 9a 02 00 00       	call   8002d9 <cprintf>
+  80003f:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800042:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800045:	83 ec 08             	sub    $0x8,%esp
+  800048:	50                   	push   %eax
+  800049:	ff 75 10             	pushl  0x10(%ebp)
+  80004c:	e8 5f 02 00 00       	call   8002b0 <vcprintf>
+  800051:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  800054:	83 ec 0c             	sub    $0xc,%esp
+  800057:	68 3a 10 80 00       	push   $0x80103a
+  80005c:	e8 78 02 00 00       	call   8002d9 <cprintf>
+  800061:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	83 ec 0c             	sub    $0xc,%esp
+  800067:	6a f6                	push   $0xfffffff6
+  800069:	e8 49 01 00 00       	call   8001b7 <exit>
+
+0080006e <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80006e:	55                   	push   %ebp
+  80006f:	89 e5                	mov    %esp,%ebp
+  800071:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800074:	8d 45 14             	lea    0x14(%ebp),%eax
+  800077:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007a:	83 ec 04             	sub    $0x4,%esp
+  80007d:	ff 75 0c             	pushl  0xc(%ebp)
+  800080:	ff 75 08             	pushl  0x8(%ebp)
+  800083:	68 3c 10 80 00       	push   $0x80103c
+  800088:	e8 4c 02 00 00       	call   8002d9 <cprintf>
+  80008d:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800090:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800093:	83 ec 08             	sub    $0x8,%esp
+  800096:	50                   	push   %eax
+  800097:	ff 75 10             	pushl  0x10(%ebp)
+  80009a:	e8 11 02 00 00       	call   8002b0 <vcprintf>
+  80009f:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  8000a2:	83 ec 0c             	sub    $0xc,%esp
+  8000a5:	68 3a 10 80 00       	push   $0x80103a
+  8000aa:	e8 2a 02 00 00       	call   8002d9 <cprintf>
+  8000af:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8000b2:	90                   	nop
+  8000b3:	c9                   	leave  
+  8000b4:	c3                   	ret    
+
+008000b5 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b5:	55                   	push   %ebp
+  8000b6:	89 e5                	mov    %esp,%ebp
+  8000b8:	57                   	push   %edi
+  8000b9:	56                   	push   %esi
+  8000ba:	53                   	push   %ebx
+  8000bb:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000be:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cb:	eb 16                	jmp    8000e3 <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8000cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d0:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d3:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d6:	8b 10                	mov    (%eax),%edx
+  8000d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000db:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000df:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8000e3:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e7:	7e e4                	jle    8000cd <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000e9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ec:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000ef:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f2:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f5:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8000f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fb:	cd 80                	int    $0x80
+  8000fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  800100:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800103:	83 c4 20             	add    $0x20,%esp
+  800106:	5b                   	pop    %ebx
+  800107:	5e                   	pop    %esi
+  800108:	5f                   	pop    %edi
+  800109:	5d                   	pop    %ebp
+  80010a:	c3                   	ret    
+
+0080010b <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010b:	55                   	push   %ebp
+  80010c:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_exit, error_code);
+  80010e:	ff 75 08             	pushl  0x8(%ebp)
+  800111:	6a 01                	push   $0x1
+  800113:	e8 9d ff ff ff       	call   8000b5 <syscall>
+  800118:	83 c4 08             	add    $0x8,%esp
+}
+  80011b:	c9                   	leave  
+  80011c:	c3                   	ret    
+
+0080011d <sys_fork>:
+
+int
+sys_fork(void) {
+  80011d:	55                   	push   %ebp
+  80011e:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_fork);
+  800120:	6a 02                	push   $0x2
+  800122:	e8 8e ff ff ff       	call   8000b5 <syscall>
+  800127:	83 c4 04             	add    $0x4,%esp
+}
+  80012a:	c9                   	leave  
+  80012b:	c3                   	ret    
+
+0080012c <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80012c:	55                   	push   %ebp
+  80012d:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_wait, pid, store);
+  80012f:	ff 75 0c             	pushl  0xc(%ebp)
+  800132:	ff 75 08             	pushl  0x8(%ebp)
+  800135:	6a 03                	push   $0x3
+  800137:	e8 79 ff ff ff       	call   8000b5 <syscall>
+  80013c:	83 c4 0c             	add    $0xc,%esp
+}
+  80013f:	c9                   	leave  
+  800140:	c3                   	ret    
+
+00800141 <sys_yield>:
+
+int
+sys_yield(void) {
+  800141:	55                   	push   %ebp
+  800142:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_yield);
+  800144:	6a 0a                	push   $0xa
+  800146:	e8 6a ff ff ff       	call   8000b5 <syscall>
+  80014b:	83 c4 04             	add    $0x4,%esp
+}
+  80014e:	c9                   	leave  
+  80014f:	c3                   	ret    
+
+00800150 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800150:	55                   	push   %ebp
+  800151:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_kill, pid);
+  800153:	ff 75 08             	pushl  0x8(%ebp)
+  800156:	6a 0c                	push   $0xc
+  800158:	e8 58 ff ff ff       	call   8000b5 <syscall>
+  80015d:	83 c4 08             	add    $0x8,%esp
+}
+  800160:	c9                   	leave  
+  800161:	c3                   	ret    
+
+00800162 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800162:	55                   	push   %ebp
+  800163:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_getpid);
+  800165:	6a 12                	push   $0x12
+  800167:	e8 49 ff ff ff       	call   8000b5 <syscall>
+  80016c:	83 c4 04             	add    $0x4,%esp
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_putc, c);
+  800174:	ff 75 08             	pushl  0x8(%ebp)
+  800177:	6a 1e                	push   $0x1e
+  800179:	e8 37 ff ff ff       	call   8000b5 <syscall>
+  80017e:	83 c4 08             	add    $0x8,%esp
+}
+  800181:	c9                   	leave  
+  800182:	c3                   	ret    
+
+00800183 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800183:	55                   	push   %ebp
+  800184:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_pgdir);
+  800186:	6a 1f                	push   $0x1f
+  800188:	e8 28 ff ff ff       	call   8000b5 <syscall>
+  80018d:	83 c4 04             	add    $0x4,%esp
+}
+  800190:	c9                   	leave  
+  800191:	c3                   	ret    
+
+00800192 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  800192:	55                   	push   %ebp
+  800193:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_gettime);
+  800195:	6a 11                	push   $0x11
+  800197:	e8 19 ff ff ff       	call   8000b5 <syscall>
+  80019c:	83 c4 04             	add    $0x4,%esp
+}
+  80019f:	c9                   	leave  
+  8001a0:	c3                   	ret    
+
+008001a1 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001a1:	55                   	push   %ebp
+  8001a2:	89 e5                	mov    %esp,%ebp
+    syscall(SYS_lab6_set_priority, priority);
+  8001a4:	ff 75 08             	pushl  0x8(%ebp)
+  8001a7:	68 ff 00 00 00       	push   $0xff
+  8001ac:	e8 04 ff ff ff       	call   8000b5 <syscall>
+  8001b1:	83 c4 08             	add    $0x8,%esp
+}
+  8001b4:	90                   	nop
+  8001b5:	c9                   	leave  
+  8001b6:	c3                   	ret    
+
+008001b7 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001b7:	55                   	push   %ebp
+  8001b8:	89 e5                	mov    %esp,%ebp
+  8001ba:	83 ec 08             	sub    $0x8,%esp
+    sys_exit(error_code);
+  8001bd:	83 ec 0c             	sub    $0xc,%esp
+  8001c0:	ff 75 08             	pushl  0x8(%ebp)
+  8001c3:	e8 43 ff ff ff       	call   80010b <sys_exit>
+  8001c8:	83 c4 10             	add    $0x10,%esp
+    cprintf("BUG: exit failed.\n");
+  8001cb:	83 ec 0c             	sub    $0xc,%esp
+  8001ce:	68 58 10 80 00       	push   $0x801058
+  8001d3:	e8 01 01 00 00       	call   8002d9 <cprintf>
+  8001d8:	83 c4 10             	add    $0x10,%esp
+    while (1);
+  8001db:	eb fe                	jmp    8001db <exit+0x24>
+
+008001dd <fork>:
+}
+
+int
+fork(void) {
+  8001dd:	55                   	push   %ebp
+  8001de:	89 e5                	mov    %esp,%ebp
+  8001e0:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8001e3:	e8 35 ff ff ff       	call   80011d <sys_fork>
+}
+  8001e8:	c9                   	leave  
+  8001e9:	c3                   	ret    
+
+008001ea <wait>:
+
+int
+wait(void) {
+  8001ea:	55                   	push   %ebp
+  8001eb:	89 e5                	mov    %esp,%ebp
+  8001ed:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(0, NULL);
+  8001f0:	83 ec 08             	sub    $0x8,%esp
+  8001f3:	6a 00                	push   $0x0
+  8001f5:	6a 00                	push   $0x0
+  8001f7:	e8 30 ff ff ff       	call   80012c <sys_wait>
+  8001fc:	83 c4 10             	add    $0x10,%esp
+}
+  8001ff:	c9                   	leave  
+  800200:	c3                   	ret    
+
+00800201 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800201:	55                   	push   %ebp
+  800202:	89 e5                	mov    %esp,%ebp
+  800204:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(pid, store);
+  800207:	83 ec 08             	sub    $0x8,%esp
+  80020a:	ff 75 0c             	pushl  0xc(%ebp)
+  80020d:	ff 75 08             	pushl  0x8(%ebp)
+  800210:	e8 17 ff ff ff       	call   80012c <sys_wait>
+  800215:	83 c4 10             	add    $0x10,%esp
+}
+  800218:	c9                   	leave  
+  800219:	c3                   	ret    
+
+0080021a <yield>:
+
+void
+yield(void) {
+  80021a:	55                   	push   %ebp
+  80021b:	89 e5                	mov    %esp,%ebp
+  80021d:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800220:	e8 1c ff ff ff       	call   800141 <sys_yield>
+}
+  800225:	90                   	nop
+  800226:	c9                   	leave  
+  800227:	c3                   	ret    
+
+00800228 <kill>:
+
+int
+kill(int pid) {
+  800228:	55                   	push   %ebp
+  800229:	89 e5                	mov    %esp,%ebp
+  80022b:	83 ec 08             	sub    $0x8,%esp
+    return sys_kill(pid);
+  80022e:	83 ec 0c             	sub    $0xc,%esp
+  800231:	ff 75 08             	pushl  0x8(%ebp)
+  800234:	e8 17 ff ff ff       	call   800150 <sys_kill>
+  800239:	83 c4 10             	add    $0x10,%esp
+}
+  80023c:	c9                   	leave  
+  80023d:	c3                   	ret    
+
+0080023e <getpid>:
+
+int
+getpid(void) {
+  80023e:	55                   	push   %ebp
+  80023f:	89 e5                	mov    %esp,%ebp
+  800241:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800244:	e8 19 ff ff ff       	call   800162 <sys_getpid>
+}
+  800249:	c9                   	leave  
+  80024a:	c3                   	ret    
+
+0080024b <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80024b:	55                   	push   %ebp
+  80024c:	89 e5                	mov    %esp,%ebp
+  80024e:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800251:	e8 2d ff ff ff       	call   800183 <sys_pgdir>
+}
+  800256:	90                   	nop
+  800257:	c9                   	leave  
+  800258:	c3                   	ret    
+
+00800259 <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  800259:	55                   	push   %ebp
+  80025a:	89 e5                	mov    %esp,%ebp
+  80025c:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  80025f:	e8 2e ff ff ff       	call   800192 <sys_gettime>
+}
+  800264:	c9                   	leave  
+  800265:	c3                   	ret    
+
+00800266 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800266:	55                   	push   %ebp
+  800267:	89 e5                	mov    %esp,%ebp
+  800269:	83 ec 08             	sub    $0x8,%esp
+    sys_lab6_set_priority(priority);
+  80026c:	83 ec 0c             	sub    $0xc,%esp
+  80026f:	ff 75 08             	pushl  0x8(%ebp)
+  800272:	e8 2a ff ff ff       	call   8001a1 <sys_lab6_set_priority>
+  800277:	83 c4 10             	add    $0x10,%esp
+}
+  80027a:	90                   	nop
+  80027b:	c9                   	leave  
+  80027c:	c3                   	ret    
+
+0080027d <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  80027d:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800282:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800285:	e8 c3 00 00 00       	call   80034d <umain>
+1:  jmp 1b
+  80028a:	eb fe                	jmp    80028a <_start+0xd>
+
+0080028c <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  80028c:	55                   	push   %ebp
+  80028d:	89 e5                	mov    %esp,%ebp
+  80028f:	83 ec 08             	sub    $0x8,%esp
+    sys_putc(c);
+  800292:	83 ec 0c             	sub    $0xc,%esp
+  800295:	ff 75 08             	pushl  0x8(%ebp)
+  800298:	e8 d4 fe ff ff       	call   800171 <sys_putc>
+  80029d:	83 c4 10             	add    $0x10,%esp
+    (*cnt) ++;
+  8002a0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002a3:	8b 00                	mov    (%eax),%eax
+  8002a5:	8d 50 01             	lea    0x1(%eax),%edx
+  8002a8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002ab:	89 10                	mov    %edx,(%eax)
+}
+  8002ad:	90                   	nop
+  8002ae:	c9                   	leave  
+  8002af:	c3                   	ret    
+
+008002b0 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002b0:	55                   	push   %ebp
+  8002b1:	89 e5                	mov    %esp,%ebp
+  8002b3:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  8002b6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002bd:	ff 75 0c             	pushl  0xc(%ebp)
+  8002c0:	ff 75 08             	pushl  0x8(%ebp)
+  8002c3:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  8002c6:	50                   	push   %eax
+  8002c7:	68 8c 02 80 00       	push   $0x80028c
+  8002cc:	e8 fc 06 00 00       	call   8009cd <vprintfmt>
+  8002d1:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  8002d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002d7:	c9                   	leave  
+  8002d8:	c3                   	ret    
+
+008002d9 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  8002d9:	55                   	push   %ebp
+  8002da:	89 e5                	mov    %esp,%ebp
+  8002dc:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8002df:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8002e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  8002e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8002e8:	83 ec 08             	sub    $0x8,%esp
+  8002eb:	50                   	push   %eax
+  8002ec:	ff 75 08             	pushl  0x8(%ebp)
+  8002ef:	e8 bc ff ff ff       	call   8002b0 <vcprintf>
+  8002f4:	83 c4 10             	add    $0x10,%esp
+  8002f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  8002fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002fd:	c9                   	leave  
+  8002fe:	c3                   	ret    
+
+008002ff <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  8002ff:	55                   	push   %ebp
+  800300:	89 e5                	mov    %esp,%ebp
+  800302:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  800305:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80030c:	eb 14                	jmp    800322 <cputs+0x23>
+        cputch(c, &cnt);
+  80030e:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800312:	83 ec 08             	sub    $0x8,%esp
+  800315:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800318:	52                   	push   %edx
+  800319:	50                   	push   %eax
+  80031a:	e8 6d ff ff ff       	call   80028c <cputch>
+  80031f:	83 c4 10             	add    $0x10,%esp
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800322:	8b 45 08             	mov    0x8(%ebp),%eax
+  800325:	8d 50 01             	lea    0x1(%eax),%edx
+  800328:	89 55 08             	mov    %edx,0x8(%ebp)
+  80032b:	0f b6 00             	movzbl (%eax),%eax
+  80032e:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800331:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800335:	75 d7                	jne    80030e <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800337:	83 ec 08             	sub    $0x8,%esp
+  80033a:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  80033d:	50                   	push   %eax
+  80033e:	6a 0a                	push   $0xa
+  800340:	e8 47 ff ff ff       	call   80028c <cputch>
+  800345:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  800348:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80034b:	c9                   	leave  
+  80034c:	c3                   	ret    
+
+0080034d <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  80034d:	55                   	push   %ebp
+  80034e:	89 e5                	mov    %esp,%ebp
+  800350:	83 ec 18             	sub    $0x18,%esp
+    int ret = main();
+  800353:	e8 7c 0c 00 00       	call   800fd4 <main>
+  800358:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  80035b:	83 ec 0c             	sub    $0xc,%esp
+  80035e:	ff 75 f4             	pushl  -0xc(%ebp)
+  800361:	e8 51 fe ff ff       	call   8001b7 <exit>
+
+00800366 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800366:	55                   	push   %ebp
+  800367:	89 e5                	mov    %esp,%ebp
+  800369:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  80036c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800373:	eb 04                	jmp    800379 <strlen+0x13>
+        cnt ++;
+  800375:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800379:	8b 45 08             	mov    0x8(%ebp),%eax
+  80037c:	8d 50 01             	lea    0x1(%eax),%edx
+  80037f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800382:	0f b6 00             	movzbl (%eax),%eax
+  800385:	84 c0                	test   %al,%al
+  800387:	75 ec                	jne    800375 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800389:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  80038c:	c9                   	leave  
+  80038d:	c3                   	ret    
+
+0080038e <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  80038e:	55                   	push   %ebp
+  80038f:	89 e5                	mov    %esp,%ebp
+  800391:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800394:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  80039b:	eb 04                	jmp    8003a1 <strnlen+0x13>
+        cnt ++;
+  80039d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  8003a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003a4:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003a7:	73 10                	jae    8003b9 <strnlen+0x2b>
+  8003a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003ac:	8d 50 01             	lea    0x1(%eax),%edx
+  8003af:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003b2:	0f b6 00             	movzbl (%eax),%eax
+  8003b5:	84 c0                	test   %al,%al
+  8003b7:	75 e4                	jne    80039d <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003b9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003bc:	c9                   	leave  
+  8003bd:	c3                   	ret    
+
+008003be <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  8003be:	55                   	push   %ebp
+  8003bf:	89 e5                	mov    %esp,%ebp
+  8003c1:	57                   	push   %edi
+  8003c2:	56                   	push   %esi
+  8003c3:	83 ec 20             	sub    $0x20,%esp
+  8003c6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003cc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8003cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  8003d2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003d8:	89 d1                	mov    %edx,%ecx
+  8003da:	89 c2                	mov    %eax,%edx
+  8003dc:	89 ce                	mov    %ecx,%esi
+  8003de:	89 d7                	mov    %edx,%edi
+  8003e0:	ac                   	lods   %ds:(%esi),%al
+  8003e1:	aa                   	stos   %al,%es:(%edi)
+  8003e2:	84 c0                	test   %al,%al
+  8003e4:	75 fa                	jne    8003e0 <strcpy+0x22>
+  8003e6:	89 fa                	mov    %edi,%edx
+  8003e8:	89 f1                	mov    %esi,%ecx
+  8003ea:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8003ed:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8003f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  8003f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  8003f6:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  8003f7:	83 c4 20             	add    $0x20,%esp
+  8003fa:	5e                   	pop    %esi
+  8003fb:	5f                   	pop    %edi
+  8003fc:	5d                   	pop    %ebp
+  8003fd:	c3                   	ret    
+
+008003fe <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  8003fe:	55                   	push   %ebp
+  8003ff:	89 e5                	mov    %esp,%ebp
+  800401:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800404:	8b 45 08             	mov    0x8(%ebp),%eax
+  800407:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  80040a:	eb 21                	jmp    80042d <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  80040c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80040f:	0f b6 10             	movzbl (%eax),%edx
+  800412:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800415:	88 10                	mov    %dl,(%eax)
+  800417:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80041a:	0f b6 00             	movzbl (%eax),%eax
+  80041d:	84 c0                	test   %al,%al
+  80041f:	74 04                	je     800425 <strncpy+0x27>
+            src ++;
+  800421:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800425:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800429:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  80042d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800431:	75 d9                	jne    80040c <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800433:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800436:	c9                   	leave  
+  800437:	c3                   	ret    
+
+00800438 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800438:	55                   	push   %ebp
+  800439:	89 e5                	mov    %esp,%ebp
+  80043b:	57                   	push   %edi
+  80043c:	56                   	push   %esi
+  80043d:	83 ec 20             	sub    $0x20,%esp
+  800440:	8b 45 08             	mov    0x8(%ebp),%eax
+  800443:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800446:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800449:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  80044c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80044f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800452:	89 d1                	mov    %edx,%ecx
+  800454:	89 c2                	mov    %eax,%edx
+  800456:	89 ce                	mov    %ecx,%esi
+  800458:	89 d7                	mov    %edx,%edi
+  80045a:	ac                   	lods   %ds:(%esi),%al
+  80045b:	ae                   	scas   %es:(%edi),%al
+  80045c:	75 08                	jne    800466 <strcmp+0x2e>
+  80045e:	84 c0                	test   %al,%al
+  800460:	75 f8                	jne    80045a <strcmp+0x22>
+  800462:	31 c0                	xor    %eax,%eax
+  800464:	eb 04                	jmp    80046a <strcmp+0x32>
+  800466:	19 c0                	sbb    %eax,%eax
+  800468:	0c 01                	or     $0x1,%al
+  80046a:	89 fa                	mov    %edi,%edx
+  80046c:	89 f1                	mov    %esi,%ecx
+  80046e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800471:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800474:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800477:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  80047a:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  80047b:	83 c4 20             	add    $0x20,%esp
+  80047e:	5e                   	pop    %esi
+  80047f:	5f                   	pop    %edi
+  800480:	5d                   	pop    %ebp
+  800481:	c3                   	ret    
+
+00800482 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800482:	55                   	push   %ebp
+  800483:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800485:	eb 0c                	jmp    800493 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800487:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  80048b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  80048f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800493:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800497:	74 1a                	je     8004b3 <strncmp+0x31>
+  800499:	8b 45 08             	mov    0x8(%ebp),%eax
+  80049c:	0f b6 00             	movzbl (%eax),%eax
+  80049f:	84 c0                	test   %al,%al
+  8004a1:	74 10                	je     8004b3 <strncmp+0x31>
+  8004a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004a6:	0f b6 10             	movzbl (%eax),%edx
+  8004a9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ac:	0f b6 00             	movzbl (%eax),%eax
+  8004af:	38 c2                	cmp    %al,%dl
+  8004b1:	74 d4                	je     800487 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004b3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004b7:	74 18                	je     8004d1 <strncmp+0x4f>
+  8004b9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004bc:	0f b6 00             	movzbl (%eax),%eax
+  8004bf:	0f b6 d0             	movzbl %al,%edx
+  8004c2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004c5:	0f b6 00             	movzbl (%eax),%eax
+  8004c8:	0f b6 c0             	movzbl %al,%eax
+  8004cb:	29 c2                	sub    %eax,%edx
+  8004cd:	89 d0                	mov    %edx,%eax
+  8004cf:	eb 05                	jmp    8004d6 <strncmp+0x54>
+  8004d1:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8004d6:	5d                   	pop    %ebp
+  8004d7:	c3                   	ret    
+
+008004d8 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  8004d8:	55                   	push   %ebp
+  8004d9:	89 e5                	mov    %esp,%ebp
+  8004db:	83 ec 04             	sub    $0x4,%esp
+  8004de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004e1:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  8004e4:	eb 14                	jmp    8004fa <strchr+0x22>
+        if (*s == c) {
+  8004e6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e9:	0f b6 00             	movzbl (%eax),%eax
+  8004ec:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  8004ef:	75 05                	jne    8004f6 <strchr+0x1e>
+            return (char *)s;
+  8004f1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004f4:	eb 13                	jmp    800509 <strchr+0x31>
+        }
+        s ++;
+  8004f6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  8004fa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fd:	0f b6 00             	movzbl (%eax),%eax
+  800500:	84 c0                	test   %al,%al
+  800502:	75 e2                	jne    8004e6 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800504:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800509:	c9                   	leave  
+  80050a:	c3                   	ret    
+
+0080050b <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  80050b:	55                   	push   %ebp
+  80050c:	89 e5                	mov    %esp,%ebp
+  80050e:	83 ec 04             	sub    $0x4,%esp
+  800511:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800514:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800517:	eb 0f                	jmp    800528 <strfind+0x1d>
+        if (*s == c) {
+  800519:	8b 45 08             	mov    0x8(%ebp),%eax
+  80051c:	0f b6 00             	movzbl (%eax),%eax
+  80051f:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800522:	74 10                	je     800534 <strfind+0x29>
+            break;
+        }
+        s ++;
+  800524:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800528:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052b:	0f b6 00             	movzbl (%eax),%eax
+  80052e:	84 c0                	test   %al,%al
+  800530:	75 e7                	jne    800519 <strfind+0xe>
+  800532:	eb 01                	jmp    800535 <strfind+0x2a>
+        if (*s == c) {
+            break;
+  800534:	90                   	nop
+        }
+        s ++;
+    }
+    return (char *)s;
+  800535:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800538:	c9                   	leave  
+  800539:	c3                   	ret    
+
+0080053a <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  80053a:	55                   	push   %ebp
+  80053b:	89 e5                	mov    %esp,%ebp
+  80053d:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800540:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800547:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80054e:	eb 04                	jmp    800554 <strtol+0x1a>
+        s ++;
+  800550:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800554:	8b 45 08             	mov    0x8(%ebp),%eax
+  800557:	0f b6 00             	movzbl (%eax),%eax
+  80055a:	3c 20                	cmp    $0x20,%al
+  80055c:	74 f2                	je     800550 <strtol+0x16>
+  80055e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800561:	0f b6 00             	movzbl (%eax),%eax
+  800564:	3c 09                	cmp    $0x9,%al
+  800566:	74 e8                	je     800550 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800568:	8b 45 08             	mov    0x8(%ebp),%eax
+  80056b:	0f b6 00             	movzbl (%eax),%eax
+  80056e:	3c 2b                	cmp    $0x2b,%al
+  800570:	75 06                	jne    800578 <strtol+0x3e>
+        s ++;
+  800572:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800576:	eb 15                	jmp    80058d <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800578:	8b 45 08             	mov    0x8(%ebp),%eax
+  80057b:	0f b6 00             	movzbl (%eax),%eax
+  80057e:	3c 2d                	cmp    $0x2d,%al
+  800580:	75 0b                	jne    80058d <strtol+0x53>
+        s ++, neg = 1;
+  800582:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800586:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  80058d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800591:	74 06                	je     800599 <strtol+0x5f>
+  800593:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800597:	75 24                	jne    8005bd <strtol+0x83>
+  800599:	8b 45 08             	mov    0x8(%ebp),%eax
+  80059c:	0f b6 00             	movzbl (%eax),%eax
+  80059f:	3c 30                	cmp    $0x30,%al
+  8005a1:	75 1a                	jne    8005bd <strtol+0x83>
+  8005a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a6:	83 c0 01             	add    $0x1,%eax
+  8005a9:	0f b6 00             	movzbl (%eax),%eax
+  8005ac:	3c 78                	cmp    $0x78,%al
+  8005ae:	75 0d                	jne    8005bd <strtol+0x83>
+        s += 2, base = 16;
+  8005b0:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005b4:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005bb:	eb 2a                	jmp    8005e7 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005bd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005c1:	75 17                	jne    8005da <strtol+0xa0>
+  8005c3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005c6:	0f b6 00             	movzbl (%eax),%eax
+  8005c9:	3c 30                	cmp    $0x30,%al
+  8005cb:	75 0d                	jne    8005da <strtol+0xa0>
+        s ++, base = 8;
+  8005cd:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005d1:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  8005d8:	eb 0d                	jmp    8005e7 <strtol+0xad>
+    }
+    else if (base == 0) {
+  8005da:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005de:	75 07                	jne    8005e7 <strtol+0xad>
+        base = 10;
+  8005e0:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  8005e7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ea:	0f b6 00             	movzbl (%eax),%eax
+  8005ed:	3c 2f                	cmp    $0x2f,%al
+  8005ef:	7e 1b                	jle    80060c <strtol+0xd2>
+  8005f1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005f4:	0f b6 00             	movzbl (%eax),%eax
+  8005f7:	3c 39                	cmp    $0x39,%al
+  8005f9:	7f 11                	jg     80060c <strtol+0xd2>
+            dig = *s - '0';
+  8005fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005fe:	0f b6 00             	movzbl (%eax),%eax
+  800601:	0f be c0             	movsbl %al,%eax
+  800604:	83 e8 30             	sub    $0x30,%eax
+  800607:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80060a:	eb 48                	jmp    800654 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  80060c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80060f:	0f b6 00             	movzbl (%eax),%eax
+  800612:	3c 60                	cmp    $0x60,%al
+  800614:	7e 1b                	jle    800631 <strtol+0xf7>
+  800616:	8b 45 08             	mov    0x8(%ebp),%eax
+  800619:	0f b6 00             	movzbl (%eax),%eax
+  80061c:	3c 7a                	cmp    $0x7a,%al
+  80061e:	7f 11                	jg     800631 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800620:	8b 45 08             	mov    0x8(%ebp),%eax
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	0f be c0             	movsbl %al,%eax
+  800629:	83 e8 57             	sub    $0x57,%eax
+  80062c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80062f:	eb 23                	jmp    800654 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800631:	8b 45 08             	mov    0x8(%ebp),%eax
+  800634:	0f b6 00             	movzbl (%eax),%eax
+  800637:	3c 40                	cmp    $0x40,%al
+  800639:	7e 3c                	jle    800677 <strtol+0x13d>
+  80063b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80063e:	0f b6 00             	movzbl (%eax),%eax
+  800641:	3c 5a                	cmp    $0x5a,%al
+  800643:	7f 32                	jg     800677 <strtol+0x13d>
+            dig = *s - 'A' + 10;
+  800645:	8b 45 08             	mov    0x8(%ebp),%eax
+  800648:	0f b6 00             	movzbl (%eax),%eax
+  80064b:	0f be c0             	movsbl %al,%eax
+  80064e:	83 e8 37             	sub    $0x37,%eax
+  800651:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800654:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800657:	3b 45 10             	cmp    0x10(%ebp),%eax
+  80065a:	7d 1a                	jge    800676 <strtol+0x13c>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  80065c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800660:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800663:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800667:	89 c2                	mov    %eax,%edx
+  800669:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80066c:	01 d0                	add    %edx,%eax
+  80066e:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800671:	e9 71 ff ff ff       	jmp    8005e7 <strtol+0xad>
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+            break;
+  800676:	90                   	nop
+        }
+        s ++, val = (val * base) + dig;
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  800677:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80067b:	74 08                	je     800685 <strtol+0x14b>
+        *endptr = (char *) s;
+  80067d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800680:	8b 55 08             	mov    0x8(%ebp),%edx
+  800683:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800685:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800689:	74 07                	je     800692 <strtol+0x158>
+  80068b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80068e:	f7 d8                	neg    %eax
+  800690:	eb 03                	jmp    800695 <strtol+0x15b>
+  800692:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800695:	c9                   	leave  
+  800696:	c3                   	ret    
+
+00800697 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800697:	55                   	push   %ebp
+  800698:	89 e5                	mov    %esp,%ebp
+  80069a:	57                   	push   %edi
+  80069b:	83 ec 24             	sub    $0x24,%esp
+  80069e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006a1:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006a4:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006a8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006ab:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006ae:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006b1:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006b7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006ba:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006be:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006c1:	89 d7                	mov    %edx,%edi
+  8006c3:	f3 aa                	rep stos %al,%es:(%edi)
+  8006c5:	89 fa                	mov    %edi,%edx
+  8006c7:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8006ca:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  8006cd:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006d0:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  8006d1:	83 c4 24             	add    $0x24,%esp
+  8006d4:	5f                   	pop    %edi
+  8006d5:	5d                   	pop    %ebp
+  8006d6:	c3                   	ret    
+
+008006d7 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  8006d7:	55                   	push   %ebp
+  8006d8:	89 e5                	mov    %esp,%ebp
+  8006da:	57                   	push   %edi
+  8006db:	56                   	push   %esi
+  8006dc:	53                   	push   %ebx
+  8006dd:	83 ec 30             	sub    $0x30,%esp
+  8006e0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8006e6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006e9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8006ec:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006ef:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  8006f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8006f5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  8006f8:	73 42                	jae    80073c <memmove+0x65>
+  8006fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8006fd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800700:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800703:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800706:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800709:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  80070c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  80070f:	c1 e8 02             	shr    $0x2,%eax
+  800712:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800714:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800717:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80071a:	89 d7                	mov    %edx,%edi
+  80071c:	89 c6                	mov    %eax,%esi
+  80071e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800720:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800723:	83 e1 03             	and    $0x3,%ecx
+  800726:	74 02                	je     80072a <memmove+0x53>
+  800728:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  80072a:	89 f0                	mov    %esi,%eax
+  80072c:	89 fa                	mov    %edi,%edx
+  80072e:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800731:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800734:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800737:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  80073a:	eb 36                	jmp    800772 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  80073c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80073f:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800742:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800745:	01 c2                	add    %eax,%edx
+  800747:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80074a:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  80074d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800750:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800753:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800756:	89 c1                	mov    %eax,%ecx
+  800758:	89 d8                	mov    %ebx,%eax
+  80075a:	89 d6                	mov    %edx,%esi
+  80075c:	89 c7                	mov    %eax,%edi
+  80075e:	fd                   	std    
+  80075f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800761:	fc                   	cld    
+  800762:	89 f8                	mov    %edi,%eax
+  800764:	89 f2                	mov    %esi,%edx
+  800766:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800769:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  80076c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  80076f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800772:	83 c4 30             	add    $0x30,%esp
+  800775:	5b                   	pop    %ebx
+  800776:	5e                   	pop    %esi
+  800777:	5f                   	pop    %edi
+  800778:	5d                   	pop    %ebp
+  800779:	c3                   	ret    
+
+0080077a <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  80077a:	55                   	push   %ebp
+  80077b:	89 e5                	mov    %esp,%ebp
+  80077d:	57                   	push   %edi
+  80077e:	56                   	push   %esi
+  80077f:	83 ec 20             	sub    $0x20,%esp
+  800782:	8b 45 08             	mov    0x8(%ebp),%eax
+  800785:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800788:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80078b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80078e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800791:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800794:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800797:	c1 e8 02             	shr    $0x2,%eax
+  80079a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  80079c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80079f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007a2:	89 d7                	mov    %edx,%edi
+  8007a4:	89 c6                	mov    %eax,%esi
+  8007a6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007a8:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007ab:	83 e1 03             	and    $0x3,%ecx
+  8007ae:	74 02                	je     8007b2 <memcpy+0x38>
+  8007b0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007b2:	89 f0                	mov    %esi,%eax
+  8007b4:	89 fa                	mov    %edi,%edx
+  8007b6:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007b9:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007bc:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  8007bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007c2:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007c3:	83 c4 20             	add    $0x20,%esp
+  8007c6:	5e                   	pop    %esi
+  8007c7:	5f                   	pop    %edi
+  8007c8:	5d                   	pop    %ebp
+  8007c9:	c3                   	ret    
+
+008007ca <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  8007ca:	55                   	push   %ebp
+  8007cb:	89 e5                	mov    %esp,%ebp
+  8007cd:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  8007d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007d3:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  8007d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007d9:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  8007dc:	eb 30                	jmp    80080e <memcmp+0x44>
+        if (*s1 != *s2) {
+  8007de:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8007e1:	0f b6 10             	movzbl (%eax),%edx
+  8007e4:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8007e7:	0f b6 00             	movzbl (%eax),%eax
+  8007ea:	38 c2                	cmp    %al,%dl
+  8007ec:	74 18                	je     800806 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8007ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8007f1:	0f b6 00             	movzbl (%eax),%eax
+  8007f4:	0f b6 d0             	movzbl %al,%edx
+  8007f7:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8007fa:	0f b6 00             	movzbl (%eax),%eax
+  8007fd:	0f b6 c0             	movzbl %al,%eax
+  800800:	29 c2                	sub    %eax,%edx
+  800802:	89 d0                	mov    %edx,%eax
+  800804:	eb 1a                	jmp    800820 <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800806:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  80080a:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  80080e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800811:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800814:	89 55 10             	mov    %edx,0x10(%ebp)
+  800817:	85 c0                	test   %eax,%eax
+  800819:	75 c3                	jne    8007de <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  80081b:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800820:	c9                   	leave  
+  800821:	c3                   	ret    
+
+00800822 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800822:	55                   	push   %ebp
+  800823:	89 e5                	mov    %esp,%ebp
+  800825:	83 ec 38             	sub    $0x38,%esp
+  800828:	8b 45 10             	mov    0x10(%ebp),%eax
+  80082b:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  80082e:	8b 45 14             	mov    0x14(%ebp),%eax
+  800831:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  800834:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800837:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  80083a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80083d:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800840:	8b 45 18             	mov    0x18(%ebp),%eax
+  800843:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800846:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800849:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80084c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80084f:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  800852:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800855:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800858:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  80085c:	74 1c                	je     80087a <printnum+0x58>
+  80085e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800861:	ba 00 00 00 00       	mov    $0x0,%edx
+  800866:	f7 75 e4             	divl   -0x1c(%ebp)
+  800869:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  80086c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80086f:	ba 00 00 00 00       	mov    $0x0,%edx
+  800874:	f7 75 e4             	divl   -0x1c(%ebp)
+  800877:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80087a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80087d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800880:	f7 75 e4             	divl   -0x1c(%ebp)
+  800883:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800886:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800889:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80088c:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80088f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800892:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800895:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800898:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  80089b:	8b 45 18             	mov    0x18(%ebp),%eax
+  80089e:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008a3:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008a6:	77 41                	ja     8008e9 <printnum+0xc7>
+  8008a8:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008ab:	72 05                	jb     8008b2 <printnum+0x90>
+  8008ad:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  8008b0:	77 37                	ja     8008e9 <printnum+0xc7>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008b2:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008b5:	83 e8 01             	sub    $0x1,%eax
+  8008b8:	83 ec 04             	sub    $0x4,%esp
+  8008bb:	ff 75 20             	pushl  0x20(%ebp)
+  8008be:	50                   	push   %eax
+  8008bf:	ff 75 18             	pushl  0x18(%ebp)
+  8008c2:	ff 75 ec             	pushl  -0x14(%ebp)
+  8008c5:	ff 75 e8             	pushl  -0x18(%ebp)
+  8008c8:	ff 75 0c             	pushl  0xc(%ebp)
+  8008cb:	ff 75 08             	pushl  0x8(%ebp)
+  8008ce:	e8 4f ff ff ff       	call   800822 <printnum>
+  8008d3:	83 c4 20             	add    $0x20,%esp
+  8008d6:	eb 1b                	jmp    8008f3 <printnum+0xd1>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  8008d8:	83 ec 08             	sub    $0x8,%esp
+  8008db:	ff 75 0c             	pushl  0xc(%ebp)
+  8008de:	ff 75 20             	pushl  0x20(%ebp)
+  8008e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008e4:	ff d0                	call   *%eax
+  8008e6:	83 c4 10             	add    $0x10,%esp
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8008e9:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8008ed:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8008f1:	7f e5                	jg     8008d8 <printnum+0xb6>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8008f3:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8008f6:	05 84 11 80 00       	add    $0x801184,%eax
+  8008fb:	0f b6 00             	movzbl (%eax),%eax
+  8008fe:	0f be c0             	movsbl %al,%eax
+  800901:	83 ec 08             	sub    $0x8,%esp
+  800904:	ff 75 0c             	pushl  0xc(%ebp)
+  800907:	50                   	push   %eax
+  800908:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090b:	ff d0                	call   *%eax
+  80090d:	83 c4 10             	add    $0x10,%esp
+}
+  800910:	90                   	nop
+  800911:	c9                   	leave  
+  800912:	c3                   	ret    
+
+00800913 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800913:	55                   	push   %ebp
+  800914:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800916:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80091a:	7e 14                	jle    800930 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80091c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80091f:	8b 00                	mov    (%eax),%eax
+  800921:	8d 48 08             	lea    0x8(%eax),%ecx
+  800924:	8b 55 08             	mov    0x8(%ebp),%edx
+  800927:	89 0a                	mov    %ecx,(%edx)
+  800929:	8b 50 04             	mov    0x4(%eax),%edx
+  80092c:	8b 00                	mov    (%eax),%eax
+  80092e:	eb 30                	jmp    800960 <getuint+0x4d>
+    }
+    else if (lflag) {
+  800930:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800934:	74 16                	je     80094c <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800936:	8b 45 08             	mov    0x8(%ebp),%eax
+  800939:	8b 00                	mov    (%eax),%eax
+  80093b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80093e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800941:	89 0a                	mov    %ecx,(%edx)
+  800943:	8b 00                	mov    (%eax),%eax
+  800945:	ba 00 00 00 00       	mov    $0x0,%edx
+  80094a:	eb 14                	jmp    800960 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80094c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80094f:	8b 00                	mov    (%eax),%eax
+  800951:	8d 48 04             	lea    0x4(%eax),%ecx
+  800954:	8b 55 08             	mov    0x8(%ebp),%edx
+  800957:	89 0a                	mov    %ecx,(%edx)
+  800959:	8b 00                	mov    (%eax),%eax
+  80095b:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800960:	5d                   	pop    %ebp
+  800961:	c3                   	ret    
+
+00800962 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800962:	55                   	push   %ebp
+  800963:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800965:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800969:	7e 14                	jle    80097f <getint+0x1d>
+        return va_arg(*ap, long long);
+  80096b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80096e:	8b 00                	mov    (%eax),%eax
+  800970:	8d 48 08             	lea    0x8(%eax),%ecx
+  800973:	8b 55 08             	mov    0x8(%ebp),%edx
+  800976:	89 0a                	mov    %ecx,(%edx)
+  800978:	8b 50 04             	mov    0x4(%eax),%edx
+  80097b:	8b 00                	mov    (%eax),%eax
+  80097d:	eb 28                	jmp    8009a7 <getint+0x45>
+    }
+    else if (lflag) {
+  80097f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800983:	74 12                	je     800997 <getint+0x35>
+        return va_arg(*ap, long);
+  800985:	8b 45 08             	mov    0x8(%ebp),%eax
+  800988:	8b 00                	mov    (%eax),%eax
+  80098a:	8d 48 04             	lea    0x4(%eax),%ecx
+  80098d:	8b 55 08             	mov    0x8(%ebp),%edx
+  800990:	89 0a                	mov    %ecx,(%edx)
+  800992:	8b 00                	mov    (%eax),%eax
+  800994:	99                   	cltd   
+  800995:	eb 10                	jmp    8009a7 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800997:	8b 45 08             	mov    0x8(%ebp),%eax
+  80099a:	8b 00                	mov    (%eax),%eax
+  80099c:	8d 48 04             	lea    0x4(%eax),%ecx
+  80099f:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009a2:	89 0a                	mov    %ecx,(%edx)
+  8009a4:	8b 00                	mov    (%eax),%eax
+  8009a6:	99                   	cltd   
+    }
+}
+  8009a7:	5d                   	pop    %ebp
+  8009a8:	c3                   	ret    
+
+008009a9 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009a9:	55                   	push   %ebp
+  8009aa:	89 e5                	mov    %esp,%ebp
+  8009ac:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009af:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8009b8:	50                   	push   %eax
+  8009b9:	ff 75 10             	pushl  0x10(%ebp)
+  8009bc:	ff 75 0c             	pushl  0xc(%ebp)
+  8009bf:	ff 75 08             	pushl  0x8(%ebp)
+  8009c2:	e8 06 00 00 00       	call   8009cd <vprintfmt>
+  8009c7:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8009ca:	90                   	nop
+  8009cb:	c9                   	leave  
+  8009cc:	c3                   	ret    
+
+008009cd <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8009cd:	55                   	push   %ebp
+  8009ce:	89 e5                	mov    %esp,%ebp
+  8009d0:	56                   	push   %esi
+  8009d1:	53                   	push   %ebx
+  8009d2:	83 ec 20             	sub    $0x20,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009d5:	eb 17                	jmp    8009ee <vprintfmt+0x21>
+            if (ch == '\0') {
+  8009d7:	85 db                	test   %ebx,%ebx
+  8009d9:	0f 84 8e 03 00 00    	je     800d6d <vprintfmt+0x3a0>
+                return;
+            }
+            putch(ch, putdat);
+  8009df:	83 ec 08             	sub    $0x8,%esp
+  8009e2:	ff 75 0c             	pushl  0xc(%ebp)
+  8009e5:	53                   	push   %ebx
+  8009e6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009e9:	ff d0                	call   *%eax
+  8009eb:	83 c4 10             	add    $0x10,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009ee:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009f1:	8d 50 01             	lea    0x1(%eax),%edx
+  8009f4:	89 55 10             	mov    %edx,0x10(%ebp)
+  8009f7:	0f b6 00             	movzbl (%eax),%eax
+  8009fa:	0f b6 d8             	movzbl %al,%ebx
+  8009fd:	83 fb 25             	cmp    $0x25,%ebx
+  800a00:	75 d5                	jne    8009d7 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a02:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a06:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a10:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a13:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a1a:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a1d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a20:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a23:	8d 50 01             	lea    0x1(%eax),%edx
+  800a26:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a29:	0f b6 00             	movzbl (%eax),%eax
+  800a2c:	0f b6 d8             	movzbl %al,%ebx
+  800a2f:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a32:	83 f8 55             	cmp    $0x55,%eax
+  800a35:	0f 87 05 03 00 00    	ja     800d40 <vprintfmt+0x373>
+  800a3b:	8b 04 85 a8 11 80 00 	mov    0x8011a8(,%eax,4),%eax
+  800a42:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a44:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a48:	eb d6                	jmp    800a20 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a4a:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800a4e:	eb d0                	jmp    800a20 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a50:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800a57:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a5a:	89 d0                	mov    %edx,%eax
+  800a5c:	c1 e0 02             	shl    $0x2,%eax
+  800a5f:	01 d0                	add    %edx,%eax
+  800a61:	01 c0                	add    %eax,%eax
+  800a63:	01 d8                	add    %ebx,%eax
+  800a65:	83 e8 30             	sub    $0x30,%eax
+  800a68:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800a6b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a6e:	0f b6 00             	movzbl (%eax),%eax
+  800a71:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800a74:	83 fb 2f             	cmp    $0x2f,%ebx
+  800a77:	7e 39                	jle    800ab2 <vprintfmt+0xe5>
+  800a79:	83 fb 39             	cmp    $0x39,%ebx
+  800a7c:	7f 34                	jg     800ab2 <vprintfmt+0xe5>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a7e:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  800a82:	eb d3                	jmp    800a57 <vprintfmt+0x8a>
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800a84:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a87:	8d 50 04             	lea    0x4(%eax),%edx
+  800a8a:	89 55 14             	mov    %edx,0x14(%ebp)
+  800a8d:	8b 00                	mov    (%eax),%eax
+  800a8f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800a92:	eb 1f                	jmp    800ab3 <vprintfmt+0xe6>
+
+        case '.':
+            if (width < 0)
+  800a94:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800a98:	79 86                	jns    800a20 <vprintfmt+0x53>
+                width = 0;
+  800a9a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800aa1:	e9 7a ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800aa6:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800aad:	e9 6e ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+            goto process_precision;
+  800ab2:	90                   	nop
+        case '#':
+            altflag = 1;
+            goto reswitch;
+
+        process_precision:
+            if (width < 0)
+  800ab3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ab7:	0f 89 63 ff ff ff    	jns    800a20 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800abd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ac0:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800ac3:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800aca:	e9 51 ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800acf:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800ad3:	e9 48 ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800ad8:	8b 45 14             	mov    0x14(%ebp),%eax
+  800adb:	8d 50 04             	lea    0x4(%eax),%edx
+  800ade:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ae1:	8b 00                	mov    (%eax),%eax
+  800ae3:	83 ec 08             	sub    $0x8,%esp
+  800ae6:	ff 75 0c             	pushl  0xc(%ebp)
+  800ae9:	50                   	push   %eax
+  800aea:	8b 45 08             	mov    0x8(%ebp),%eax
+  800aed:	ff d0                	call   *%eax
+  800aef:	83 c4 10             	add    $0x10,%esp
+            break;
+  800af2:	e9 71 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800af7:	8b 45 14             	mov    0x14(%ebp),%eax
+  800afa:	8d 50 04             	lea    0x4(%eax),%edx
+  800afd:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b00:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b02:	85 db                	test   %ebx,%ebx
+  800b04:	79 02                	jns    800b08 <vprintfmt+0x13b>
+                err = -err;
+  800b06:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b08:	83 fb 18             	cmp    $0x18,%ebx
+  800b0b:	7f 0b                	jg     800b18 <vprintfmt+0x14b>
+  800b0d:	8b 34 9d 20 11 80 00 	mov    0x801120(,%ebx,4),%esi
+  800b14:	85 f6                	test   %esi,%esi
+  800b16:	75 19                	jne    800b31 <vprintfmt+0x164>
+                printfmt(putch, putdat, "error %d", err);
+  800b18:	53                   	push   %ebx
+  800b19:	68 95 11 80 00       	push   $0x801195
+  800b1e:	ff 75 0c             	pushl  0xc(%ebp)
+  800b21:	ff 75 08             	pushl  0x8(%ebp)
+  800b24:	e8 80 fe ff ff       	call   8009a9 <printfmt>
+  800b29:	83 c4 10             	add    $0x10,%esp
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b2c:	e9 37 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  800b31:	56                   	push   %esi
+  800b32:	68 9e 11 80 00       	push   $0x80119e
+  800b37:	ff 75 0c             	pushl  0xc(%ebp)
+  800b3a:	ff 75 08             	pushl  0x8(%ebp)
+  800b3d:	e8 67 fe ff ff       	call   8009a9 <printfmt>
+  800b42:	83 c4 10             	add    $0x10,%esp
+            }
+            break;
+  800b45:	e9 1e 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800b4a:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b4d:	8d 50 04             	lea    0x4(%eax),%edx
+  800b50:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b53:	8b 30                	mov    (%eax),%esi
+  800b55:	85 f6                	test   %esi,%esi
+  800b57:	75 05                	jne    800b5e <vprintfmt+0x191>
+                p = "(null)";
+  800b59:	be a1 11 80 00       	mov    $0x8011a1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800b5e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b62:	7e 76                	jle    800bda <vprintfmt+0x20d>
+  800b64:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800b68:	74 70                	je     800bda <vprintfmt+0x20d>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b6a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b6d:	83 ec 08             	sub    $0x8,%esp
+  800b70:	50                   	push   %eax
+  800b71:	56                   	push   %esi
+  800b72:	e8 17 f8 ff ff       	call   80038e <strnlen>
+  800b77:	83 c4 10             	add    $0x10,%esp
+  800b7a:	89 c2                	mov    %eax,%edx
+  800b7c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800b7f:	29 d0                	sub    %edx,%eax
+  800b81:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b84:	eb 17                	jmp    800b9d <vprintfmt+0x1d0>
+                    putch(padc, putdat);
+  800b86:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800b8a:	83 ec 08             	sub    $0x8,%esp
+  800b8d:	ff 75 0c             	pushl  0xc(%ebp)
+  800b90:	50                   	push   %eax
+  800b91:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b94:	ff d0                	call   *%eax
+  800b96:	83 c4 10             	add    $0x10,%esp
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b99:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800b9d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ba1:	7f e3                	jg     800b86 <vprintfmt+0x1b9>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800ba3:	eb 35                	jmp    800bda <vprintfmt+0x20d>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800ba5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800ba9:	74 1c                	je     800bc7 <vprintfmt+0x1fa>
+  800bab:	83 fb 1f             	cmp    $0x1f,%ebx
+  800bae:	7e 05                	jle    800bb5 <vprintfmt+0x1e8>
+  800bb0:	83 fb 7e             	cmp    $0x7e,%ebx
+  800bb3:	7e 12                	jle    800bc7 <vprintfmt+0x1fa>
+                    putch('?', putdat);
+  800bb5:	83 ec 08             	sub    $0x8,%esp
+  800bb8:	ff 75 0c             	pushl  0xc(%ebp)
+  800bbb:	6a 3f                	push   $0x3f
+  800bbd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bc0:	ff d0                	call   *%eax
+  800bc2:	83 c4 10             	add    $0x10,%esp
+  800bc5:	eb 0f                	jmp    800bd6 <vprintfmt+0x209>
+                }
+                else {
+                    putch(ch, putdat);
+  800bc7:	83 ec 08             	sub    $0x8,%esp
+  800bca:	ff 75 0c             	pushl  0xc(%ebp)
+  800bcd:	53                   	push   %ebx
+  800bce:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bd1:	ff d0                	call   *%eax
+  800bd3:	83 c4 10             	add    $0x10,%esp
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bd6:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800bda:	89 f0                	mov    %esi,%eax
+  800bdc:	8d 70 01             	lea    0x1(%eax),%esi
+  800bdf:	0f b6 00             	movzbl (%eax),%eax
+  800be2:	0f be d8             	movsbl %al,%ebx
+  800be5:	85 db                	test   %ebx,%ebx
+  800be7:	74 26                	je     800c0f <vprintfmt+0x242>
+  800be9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800bed:	78 b6                	js     800ba5 <vprintfmt+0x1d8>
+  800bef:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  800bf3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800bf7:	79 ac                	jns    800ba5 <vprintfmt+0x1d8>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800bf9:	eb 14                	jmp    800c0f <vprintfmt+0x242>
+                putch(' ', putdat);
+  800bfb:	83 ec 08             	sub    $0x8,%esp
+  800bfe:	ff 75 0c             	pushl  0xc(%ebp)
+  800c01:	6a 20                	push   $0x20
+  800c03:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c06:	ff d0                	call   *%eax
+  800c08:	83 c4 10             	add    $0x10,%esp
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c0b:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c0f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c13:	7f e6                	jg     800bfb <vprintfmt+0x22e>
+                putch(' ', putdat);
+            }
+            break;
+  800c15:	e9 4e 01 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c1a:	83 ec 08             	sub    $0x8,%esp
+  800c1d:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c20:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c23:	50                   	push   %eax
+  800c24:	e8 39 fd ff ff       	call   800962 <getint>
+  800c29:	83 c4 10             	add    $0x10,%esp
+  800c2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c2f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c32:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c35:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c38:	85 d2                	test   %edx,%edx
+  800c3a:	79 23                	jns    800c5f <vprintfmt+0x292>
+                putch('-', putdat);
+  800c3c:	83 ec 08             	sub    $0x8,%esp
+  800c3f:	ff 75 0c             	pushl  0xc(%ebp)
+  800c42:	6a 2d                	push   $0x2d
+  800c44:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c47:	ff d0                	call   *%eax
+  800c49:	83 c4 10             	add    $0x10,%esp
+                num = -(long long)num;
+  800c4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c4f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c52:	f7 d8                	neg    %eax
+  800c54:	83 d2 00             	adc    $0x0,%edx
+  800c57:	f7 da                	neg    %edx
+  800c59:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c5c:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800c5f:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c66:	e9 9f 00 00 00       	jmp    800d0a <vprintfmt+0x33d>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800c6b:	83 ec 08             	sub    $0x8,%esp
+  800c6e:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c71:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c74:	50                   	push   %eax
+  800c75:	e8 99 fc ff ff       	call   800913 <getuint>
+  800c7a:	83 c4 10             	add    $0x10,%esp
+  800c7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c80:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800c83:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c8a:	eb 7e                	jmp    800d0a <vprintfmt+0x33d>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800c8c:	83 ec 08             	sub    $0x8,%esp
+  800c8f:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c92:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c95:	50                   	push   %eax
+  800c96:	e8 78 fc ff ff       	call   800913 <getuint>
+  800c9b:	83 c4 10             	add    $0x10,%esp
+  800c9e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ca1:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800ca4:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800cab:	eb 5d                	jmp    800d0a <vprintfmt+0x33d>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800cad:	83 ec 08             	sub    $0x8,%esp
+  800cb0:	ff 75 0c             	pushl  0xc(%ebp)
+  800cb3:	6a 30                	push   $0x30
+  800cb5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb8:	ff d0                	call   *%eax
+  800cba:	83 c4 10             	add    $0x10,%esp
+            putch('x', putdat);
+  800cbd:	83 ec 08             	sub    $0x8,%esp
+  800cc0:	ff 75 0c             	pushl  0xc(%ebp)
+  800cc3:	6a 78                	push   $0x78
+  800cc5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cc8:	ff d0                	call   *%eax
+  800cca:	83 c4 10             	add    $0x10,%esp
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800ccd:	8b 45 14             	mov    0x14(%ebp),%eax
+  800cd0:	8d 50 04             	lea    0x4(%eax),%edx
+  800cd3:	89 55 14             	mov    %edx,0x14(%ebp)
+  800cd6:	8b 00                	mov    (%eax),%eax
+  800cd8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cdb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800ce2:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800ce9:	eb 1f                	jmp    800d0a <vprintfmt+0x33d>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800ceb:	83 ec 08             	sub    $0x8,%esp
+  800cee:	ff 75 e0             	pushl  -0x20(%ebp)
+  800cf1:	8d 45 14             	lea    0x14(%ebp),%eax
+  800cf4:	50                   	push   %eax
+  800cf5:	e8 19 fc ff ff       	call   800913 <getuint>
+  800cfa:	83 c4 10             	add    $0x10,%esp
+  800cfd:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d00:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d03:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d0a:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d11:	83 ec 04             	sub    $0x4,%esp
+  800d14:	52                   	push   %edx
+  800d15:	ff 75 e8             	pushl  -0x18(%ebp)
+  800d18:	50                   	push   %eax
+  800d19:	ff 75 f4             	pushl  -0xc(%ebp)
+  800d1c:	ff 75 f0             	pushl  -0x10(%ebp)
+  800d1f:	ff 75 0c             	pushl  0xc(%ebp)
+  800d22:	ff 75 08             	pushl  0x8(%ebp)
+  800d25:	e8 f8 fa ff ff       	call   800822 <printnum>
+  800d2a:	83 c4 20             	add    $0x20,%esp
+            break;
+  800d2d:	eb 39                	jmp    800d68 <vprintfmt+0x39b>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800d2f:	83 ec 08             	sub    $0x8,%esp
+  800d32:	ff 75 0c             	pushl  0xc(%ebp)
+  800d35:	53                   	push   %ebx
+  800d36:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d39:	ff d0                	call   *%eax
+  800d3b:	83 c4 10             	add    $0x10,%esp
+            break;
+  800d3e:	eb 28                	jmp    800d68 <vprintfmt+0x39b>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800d40:	83 ec 08             	sub    $0x8,%esp
+  800d43:	ff 75 0c             	pushl  0xc(%ebp)
+  800d46:	6a 25                	push   $0x25
+  800d48:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d4b:	ff d0                	call   *%eax
+  800d4d:	83 c4 10             	add    $0x10,%esp
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800d50:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d54:	eb 04                	jmp    800d5a <vprintfmt+0x38d>
+  800d56:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d5a:	8b 45 10             	mov    0x10(%ebp),%eax
+  800d5d:	83 e8 01             	sub    $0x1,%eax
+  800d60:	0f b6 00             	movzbl (%eax),%eax
+  800d63:	3c 25                	cmp    $0x25,%al
+  800d65:	75 ef                	jne    800d56 <vprintfmt+0x389>
+                /* do nothing */;
+            break;
+  800d67:	90                   	nop
+        }
+    }
+  800d68:	e9 68 fc ff ff       	jmp    8009d5 <vprintfmt+0x8>
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+            if (ch == '\0') {
+                return;
+  800d6d:	90                   	nop
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  800d6e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  800d71:	5b                   	pop    %ebx
+  800d72:	5e                   	pop    %esi
+  800d73:	5d                   	pop    %ebp
+  800d74:	c3                   	ret    
+
+00800d75 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800d75:	55                   	push   %ebp
+  800d76:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800d78:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d7b:	8b 40 08             	mov    0x8(%eax),%eax
+  800d7e:	8d 50 01             	lea    0x1(%eax),%edx
+  800d81:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d84:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800d87:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d8a:	8b 10                	mov    (%eax),%edx
+  800d8c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d8f:	8b 40 04             	mov    0x4(%eax),%eax
+  800d92:	39 c2                	cmp    %eax,%edx
+  800d94:	73 12                	jae    800da8 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800d96:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d99:	8b 00                	mov    (%eax),%eax
+  800d9b:	8d 48 01             	lea    0x1(%eax),%ecx
+  800d9e:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800da1:	89 0a                	mov    %ecx,(%edx)
+  800da3:	8b 55 08             	mov    0x8(%ebp),%edx
+  800da6:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800da8:	90                   	nop
+  800da9:	5d                   	pop    %ebp
+  800daa:	c3                   	ret    
+
+00800dab <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800dab:	55                   	push   %ebp
+  800dac:	89 e5                	mov    %esp,%ebp
+  800dae:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800db1:	8d 45 14             	lea    0x14(%ebp),%eax
+  800db4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800db7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800dba:	50                   	push   %eax
+  800dbb:	ff 75 10             	pushl  0x10(%ebp)
+  800dbe:	ff 75 0c             	pushl  0xc(%ebp)
+  800dc1:	ff 75 08             	pushl  0x8(%ebp)
+  800dc4:	e8 0b 00 00 00       	call   800dd4 <vsnprintf>
+  800dc9:	83 c4 10             	add    $0x10,%esp
+  800dcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800dcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800dd2:	c9                   	leave  
+  800dd3:	c3                   	ret    
+
+00800dd4 <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800dd4:	55                   	push   %ebp
+  800dd5:	89 e5                	mov    %esp,%ebp
+  800dd7:	83 ec 18             	sub    $0x18,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800dda:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ddd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800de0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800de3:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800de6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de9:	01 d0                	add    %edx,%eax
+  800deb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800dee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800df5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800df9:	74 0a                	je     800e05 <vsnprintf+0x31>
+  800dfb:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800dfe:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e01:	39 c2                	cmp    %eax,%edx
+  800e03:	76 07                	jbe    800e0c <vsnprintf+0x38>
+        return -E_INVAL;
+  800e05:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e0a:	eb 20                	jmp    800e2c <vsnprintf+0x58>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e0c:	ff 75 14             	pushl  0x14(%ebp)
+  800e0f:	ff 75 10             	pushl  0x10(%ebp)
+  800e12:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800e15:	50                   	push   %eax
+  800e16:	68 75 0d 80 00       	push   $0x800d75
+  800e1b:	e8 ad fb ff ff       	call   8009cd <vprintfmt>
+  800e20:	83 c4 10             	add    $0x10,%esp
+    // null terminate the buffer
+    *b.buf = '\0';
+  800e23:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e26:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800e29:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e2c:	c9                   	leave  
+  800e2d:	c3                   	ret    
+
+00800e2e <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800e2e:	55                   	push   %ebp
+  800e2f:	89 e5                	mov    %esp,%ebp
+  800e31:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800e34:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e37:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800e3d:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800e40:	b8 20 00 00 00       	mov    $0x20,%eax
+  800e45:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800e48:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800e4b:	89 c1                	mov    %eax,%ecx
+  800e4d:	d3 ea                	shr    %cl,%edx
+  800e4f:	89 d0                	mov    %edx,%eax
+}
+  800e51:	c9                   	leave  
+  800e52:	c3                   	ret    
+
+00800e53 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800e53:	55                   	push   %ebp
+  800e54:	89 e5                	mov    %esp,%ebp
+  800e56:	57                   	push   %edi
+  800e57:	56                   	push   %esi
+  800e58:	53                   	push   %ebx
+  800e59:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800e5c:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e61:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800e67:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800e6d:	6b f0 05             	imul   $0x5,%eax,%esi
+  800e70:	01 fe                	add    %edi,%esi
+  800e72:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800e77:	f7 e7                	mul    %edi
+  800e79:	01 d6                	add    %edx,%esi
+  800e7b:	89 f2                	mov    %esi,%edx
+  800e7d:	83 c0 0b             	add    $0xb,%eax
+  800e80:	83 d2 00             	adc    $0x0,%edx
+  800e83:	89 c7                	mov    %eax,%edi
+  800e85:	83 e7 ff             	and    $0xffffffff,%edi
+  800e88:	89 f9                	mov    %edi,%ecx
+  800e8a:	0f b7 da             	movzwl %dx,%ebx
+  800e8d:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800e93:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800e99:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e9e:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ea4:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ea8:	c1 ea 0c             	shr    $0xc,%edx
+  800eab:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800eae:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800eb1:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800eb8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ebb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ebe:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ec1:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800ec4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec7:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800eca:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ece:	74 1c                	je     800eec <rand+0x99>
+  800ed0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ed3:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ed8:	f7 75 dc             	divl   -0x24(%ebp)
+  800edb:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800ede:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ee1:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ee6:	f7 75 dc             	divl   -0x24(%ebp)
+  800ee9:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800eec:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800eef:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800ef2:	f7 75 dc             	divl   -0x24(%ebp)
+  800ef5:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ef8:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800efb:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800efe:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800f01:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f04:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f07:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800f0a:	83 c4 24             	add    $0x24,%esp
+  800f0d:	5b                   	pop    %ebx
+  800f0e:	5e                   	pop    %esi
+  800f0f:	5f                   	pop    %edi
+  800f10:	5d                   	pop    %ebp
+  800f11:	c3                   	ret    
+
+00800f12 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800f12:	55                   	push   %ebp
+  800f13:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800f15:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f18:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f1d:	a3 00 20 80 00       	mov    %eax,0x802000
+  800f22:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800f28:	90                   	nop
+  800f29:	5d                   	pop    %ebp
+  800f2a:	c3                   	ret    
+
+00800f2b <forkchild>:
+#define DEPTH 4
+
+void forktree(const char *cur);
+
+void
+forkchild(const char *cur, char branch) {
+  800f2b:	55                   	push   %ebp
+  800f2c:	89 e5                	mov    %esp,%ebp
+  800f2e:	83 ec 28             	sub    $0x28,%esp
+  800f31:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f34:	88 45 e4             	mov    %al,-0x1c(%ebp)
+    char nxt[DEPTH + 1];
+
+    if (strlen(cur) >= DEPTH)
+  800f37:	83 ec 0c             	sub    $0xc,%esp
+  800f3a:	ff 75 08             	pushl  0x8(%ebp)
+  800f3d:	e8 24 f4 ff ff       	call   800366 <strlen>
+  800f42:	83 c4 10             	add    $0x10,%esp
+  800f45:	83 f8 03             	cmp    $0x3,%eax
+  800f48:	77 45                	ja     800f8f <forkchild+0x64>
+        return;
+
+    snprintf(nxt, DEPTH + 1, "%s%c", cur, branch);
+  800f4a:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
+  800f4e:	83 ec 0c             	sub    $0xc,%esp
+  800f51:	50                   	push   %eax
+  800f52:	ff 75 08             	pushl  0x8(%ebp)
+  800f55:	68 00 13 80 00       	push   $0x801300
+  800f5a:	6a 05                	push   $0x5
+  800f5c:	8d 45 f3             	lea    -0xd(%ebp),%eax
+  800f5f:	50                   	push   %eax
+  800f60:	e8 46 fe ff ff       	call   800dab <snprintf>
+  800f65:	83 c4 20             	add    $0x20,%esp
+    if (fork() == 0) {
+  800f68:	e8 70 f2 ff ff       	call   8001dd <fork>
+  800f6d:	85 c0                	test   %eax,%eax
+  800f6f:	75 1f                	jne    800f90 <forkchild+0x65>
+        forktree(nxt);
+  800f71:	83 ec 0c             	sub    $0xc,%esp
+  800f74:	8d 45 f3             	lea    -0xd(%ebp),%eax
+  800f77:	50                   	push   %eax
+  800f78:	e8 15 00 00 00       	call   800f92 <forktree>
+  800f7d:	83 c4 10             	add    $0x10,%esp
+        yield();
+  800f80:	e8 95 f2 ff ff       	call   80021a <yield>
+        exit(0);
+  800f85:	83 ec 0c             	sub    $0xc,%esp
+  800f88:	6a 00                	push   $0x0
+  800f8a:	e8 28 f2 ff ff       	call   8001b7 <exit>
+void
+forkchild(const char *cur, char branch) {
+    char nxt[DEPTH + 1];
+
+    if (strlen(cur) >= DEPTH)
+        return;
+  800f8f:	90                   	nop
+    if (fork() == 0) {
+        forktree(nxt);
+        yield();
+        exit(0);
+    }
+}
+  800f90:	c9                   	leave  
+  800f91:	c3                   	ret    
+
+00800f92 <forktree>:
+
+void
+forktree(const char *cur) {
+  800f92:	55                   	push   %ebp
+  800f93:	89 e5                	mov    %esp,%ebp
+  800f95:	83 ec 08             	sub    $0x8,%esp
+    cprintf("%04x: I am '%s'\n", getpid(), cur);
+  800f98:	e8 a1 f2 ff ff       	call   80023e <getpid>
+  800f9d:	83 ec 04             	sub    $0x4,%esp
+  800fa0:	ff 75 08             	pushl  0x8(%ebp)
+  800fa3:	50                   	push   %eax
+  800fa4:	68 05 13 80 00       	push   $0x801305
+  800fa9:	e8 2b f3 ff ff       	call   8002d9 <cprintf>
+  800fae:	83 c4 10             	add    $0x10,%esp
+
+    forkchild(cur, '0');
+  800fb1:	83 ec 08             	sub    $0x8,%esp
+  800fb4:	6a 30                	push   $0x30
+  800fb6:	ff 75 08             	pushl  0x8(%ebp)
+  800fb9:	e8 6d ff ff ff       	call   800f2b <forkchild>
+  800fbe:	83 c4 10             	add    $0x10,%esp
+    forkchild(cur, '1');
+  800fc1:	83 ec 08             	sub    $0x8,%esp
+  800fc4:	6a 31                	push   $0x31
+  800fc6:	ff 75 08             	pushl  0x8(%ebp)
+  800fc9:	e8 5d ff ff ff       	call   800f2b <forkchild>
+  800fce:	83 c4 10             	add    $0x10,%esp
+}
+  800fd1:	90                   	nop
+  800fd2:	c9                   	leave  
+  800fd3:	c3                   	ret    
+
+00800fd4 <main>:
+
+int
+main(void) {
+  800fd4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  800fd8:	83 e4 f0             	and    $0xfffffff0,%esp
+  800fdb:	ff 71 fc             	pushl  -0x4(%ecx)
+  800fde:	55                   	push   %ebp
+  800fdf:	89 e5                	mov    %esp,%ebp
+  800fe1:	51                   	push   %ecx
+  800fe2:	83 ec 04             	sub    $0x4,%esp
+    forktree("");
+  800fe5:	83 ec 0c             	sub    $0xc,%esp
+  800fe8:	68 16 13 80 00       	push   $0x801316
+  800fed:	e8 a0 ff ff ff       	call   800f92 <forktree>
+  800ff2:	83 c4 10             	add    $0x10,%esp
+    return 0;
+  800ff5:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800ffa:	8b 4d fc             	mov    -0x4(%ebp),%ecx
+  800ffd:	c9                   	leave  
+  800ffe:	8d 61 fc             	lea    -0x4(%ecx),%esp
+  801001:	c3                   	ret    
diff -r -u -P lab6_original/obj/user/forktree.d lab6/obj/user/forktree.d
--- lab6_original/obj/user/forktree.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/forktree.d	2016-04-29 16:22:06.848533461 +0800
@@ -0,0 +1,2 @@
+obj/user/forktree.o obj/user/forktree.d: user/forktree.c user/libs/ulib.h \
+ libs/defs.h libs/stdio.h libs/stdarg.h libs/string.h
Binary files lab6_original/obj/user/forktree.o and lab6/obj/user/forktree.o differ
diff -r -u -P lab6_original/obj/user/forktree.sym lab6/obj/user/forktree.sym
--- lab6_original/obj/user/forktree.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/forktree.sym	2016-04-29 16:22:07.744668820 +0800
@@ -0,0 +1,78 @@
+00800020 .text
+00801020 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202db9 .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b5 syscall
+00000000 ulib.c
+00000000 stdio.c
+0080028c cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+00801120 error_string
+00800822 printnum
+00800913 getuint
+00800962 getint
+00800d75 sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 forktree.c
+008003be strcpy
+0080021a yield
+00800201 waitpid
+00800141 sys_yield
+008006d7 memmove
+00800dab snprintf
+008009cd vprintfmt
+0080011d sys_fork
+008002d9 cprintf
+0080023e getpid
+0080077a memcpy
+00800266 lab6_set_priority
+00800dd4 vsnprintf
+0080034d umain
+00202db8 __STAB_END__
+00800150 sys_kill
+00202db9 __STABSTR_BEGIN__
+00800020 __panic
+0080053a strtol
+0080038e strnlen
+00800f92 forktree
+0080024b print_pgdir
+00800228 kill
+0080050b strfind
+008001ea wait
+0080027d _start
+00800e53 rand
+00800482 strncmp
+00800171 sys_putc
+008003fe strncpy
+008007ca memcmp
+008001dd fork
+00800697 memset
+00800fd4 main
+00800f12 srand
+00800e2e hash32
+008009a9 printfmt
+00203c2b __STABSTR_END__
+00800438 strcmp
+00800259 gettime_msec
+00800192 sys_gettime
+008002b0 vcprintf
+0080006e __warn
+008002ff cputs
+008001a1 sys_lab6_set_priority
+008001b7 exit
+0080012c sys_wait
+0080010b sys_exit
+00200010 __STAB_BEGIN__
+00800366 strlen
+00800183 sys_pgdir
+008004d8 strchr
+00800162 sys_getpid
+00800f2b forkchild
diff -r -u -P lab6_original/obj/user/hello.asm lab6/obj/user/hello.asm
--- lab6_original/obj/user/hello.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/hello.asm	2016-04-29 16:22:07.665012933 +0800
@@ -0,0 +1,2594 @@
+
+obj/__user_hello.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 18             	sub    $0x18,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	83 ec 04             	sub    $0x4,%esp
+  80002f:	ff 75 0c             	pushl  0xc(%ebp)
+  800032:	ff 75 08             	pushl  0x8(%ebp)
+  800035:	68 80 0f 80 00       	push   $0x800f80
+  80003a:	e8 9a 02 00 00       	call   8002d9 <cprintf>
+  80003f:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800042:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800045:	83 ec 08             	sub    $0x8,%esp
+  800048:	50                   	push   %eax
+  800049:	ff 75 10             	pushl  0x10(%ebp)
+  80004c:	e8 5f 02 00 00       	call   8002b0 <vcprintf>
+  800051:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  800054:	83 ec 0c             	sub    $0xc,%esp
+  800057:	68 9a 0f 80 00       	push   $0x800f9a
+  80005c:	e8 78 02 00 00       	call   8002d9 <cprintf>
+  800061:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	83 ec 0c             	sub    $0xc,%esp
+  800067:	6a f6                	push   $0xfffffff6
+  800069:	e8 49 01 00 00       	call   8001b7 <exit>
+
+0080006e <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80006e:	55                   	push   %ebp
+  80006f:	89 e5                	mov    %esp,%ebp
+  800071:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800074:	8d 45 14             	lea    0x14(%ebp),%eax
+  800077:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007a:	83 ec 04             	sub    $0x4,%esp
+  80007d:	ff 75 0c             	pushl  0xc(%ebp)
+  800080:	ff 75 08             	pushl  0x8(%ebp)
+  800083:	68 9c 0f 80 00       	push   $0x800f9c
+  800088:	e8 4c 02 00 00       	call   8002d9 <cprintf>
+  80008d:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800090:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800093:	83 ec 08             	sub    $0x8,%esp
+  800096:	50                   	push   %eax
+  800097:	ff 75 10             	pushl  0x10(%ebp)
+  80009a:	e8 11 02 00 00       	call   8002b0 <vcprintf>
+  80009f:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  8000a2:	83 ec 0c             	sub    $0xc,%esp
+  8000a5:	68 9a 0f 80 00       	push   $0x800f9a
+  8000aa:	e8 2a 02 00 00       	call   8002d9 <cprintf>
+  8000af:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8000b2:	90                   	nop
+  8000b3:	c9                   	leave  
+  8000b4:	c3                   	ret    
+
+008000b5 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b5:	55                   	push   %ebp
+  8000b6:	89 e5                	mov    %esp,%ebp
+  8000b8:	57                   	push   %edi
+  8000b9:	56                   	push   %esi
+  8000ba:	53                   	push   %ebx
+  8000bb:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000be:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cb:	eb 16                	jmp    8000e3 <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8000cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d0:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d3:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d6:	8b 10                	mov    (%eax),%edx
+  8000d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000db:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000df:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8000e3:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e7:	7e e4                	jle    8000cd <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000e9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ec:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000ef:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f2:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f5:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8000f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fb:	cd 80                	int    $0x80
+  8000fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  800100:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800103:	83 c4 20             	add    $0x20,%esp
+  800106:	5b                   	pop    %ebx
+  800107:	5e                   	pop    %esi
+  800108:	5f                   	pop    %edi
+  800109:	5d                   	pop    %ebp
+  80010a:	c3                   	ret    
+
+0080010b <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010b:	55                   	push   %ebp
+  80010c:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_exit, error_code);
+  80010e:	ff 75 08             	pushl  0x8(%ebp)
+  800111:	6a 01                	push   $0x1
+  800113:	e8 9d ff ff ff       	call   8000b5 <syscall>
+  800118:	83 c4 08             	add    $0x8,%esp
+}
+  80011b:	c9                   	leave  
+  80011c:	c3                   	ret    
+
+0080011d <sys_fork>:
+
+int
+sys_fork(void) {
+  80011d:	55                   	push   %ebp
+  80011e:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_fork);
+  800120:	6a 02                	push   $0x2
+  800122:	e8 8e ff ff ff       	call   8000b5 <syscall>
+  800127:	83 c4 04             	add    $0x4,%esp
+}
+  80012a:	c9                   	leave  
+  80012b:	c3                   	ret    
+
+0080012c <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80012c:	55                   	push   %ebp
+  80012d:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_wait, pid, store);
+  80012f:	ff 75 0c             	pushl  0xc(%ebp)
+  800132:	ff 75 08             	pushl  0x8(%ebp)
+  800135:	6a 03                	push   $0x3
+  800137:	e8 79 ff ff ff       	call   8000b5 <syscall>
+  80013c:	83 c4 0c             	add    $0xc,%esp
+}
+  80013f:	c9                   	leave  
+  800140:	c3                   	ret    
+
+00800141 <sys_yield>:
+
+int
+sys_yield(void) {
+  800141:	55                   	push   %ebp
+  800142:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_yield);
+  800144:	6a 0a                	push   $0xa
+  800146:	e8 6a ff ff ff       	call   8000b5 <syscall>
+  80014b:	83 c4 04             	add    $0x4,%esp
+}
+  80014e:	c9                   	leave  
+  80014f:	c3                   	ret    
+
+00800150 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800150:	55                   	push   %ebp
+  800151:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_kill, pid);
+  800153:	ff 75 08             	pushl  0x8(%ebp)
+  800156:	6a 0c                	push   $0xc
+  800158:	e8 58 ff ff ff       	call   8000b5 <syscall>
+  80015d:	83 c4 08             	add    $0x8,%esp
+}
+  800160:	c9                   	leave  
+  800161:	c3                   	ret    
+
+00800162 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800162:	55                   	push   %ebp
+  800163:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_getpid);
+  800165:	6a 12                	push   $0x12
+  800167:	e8 49 ff ff ff       	call   8000b5 <syscall>
+  80016c:	83 c4 04             	add    $0x4,%esp
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_putc, c);
+  800174:	ff 75 08             	pushl  0x8(%ebp)
+  800177:	6a 1e                	push   $0x1e
+  800179:	e8 37 ff ff ff       	call   8000b5 <syscall>
+  80017e:	83 c4 08             	add    $0x8,%esp
+}
+  800181:	c9                   	leave  
+  800182:	c3                   	ret    
+
+00800183 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800183:	55                   	push   %ebp
+  800184:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_pgdir);
+  800186:	6a 1f                	push   $0x1f
+  800188:	e8 28 ff ff ff       	call   8000b5 <syscall>
+  80018d:	83 c4 04             	add    $0x4,%esp
+}
+  800190:	c9                   	leave  
+  800191:	c3                   	ret    
+
+00800192 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  800192:	55                   	push   %ebp
+  800193:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_gettime);
+  800195:	6a 11                	push   $0x11
+  800197:	e8 19 ff ff ff       	call   8000b5 <syscall>
+  80019c:	83 c4 04             	add    $0x4,%esp
+}
+  80019f:	c9                   	leave  
+  8001a0:	c3                   	ret    
+
+008001a1 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001a1:	55                   	push   %ebp
+  8001a2:	89 e5                	mov    %esp,%ebp
+    syscall(SYS_lab6_set_priority, priority);
+  8001a4:	ff 75 08             	pushl  0x8(%ebp)
+  8001a7:	68 ff 00 00 00       	push   $0xff
+  8001ac:	e8 04 ff ff ff       	call   8000b5 <syscall>
+  8001b1:	83 c4 08             	add    $0x8,%esp
+}
+  8001b4:	90                   	nop
+  8001b5:	c9                   	leave  
+  8001b6:	c3                   	ret    
+
+008001b7 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001b7:	55                   	push   %ebp
+  8001b8:	89 e5                	mov    %esp,%ebp
+  8001ba:	83 ec 08             	sub    $0x8,%esp
+    sys_exit(error_code);
+  8001bd:	83 ec 0c             	sub    $0xc,%esp
+  8001c0:	ff 75 08             	pushl  0x8(%ebp)
+  8001c3:	e8 43 ff ff ff       	call   80010b <sys_exit>
+  8001c8:	83 c4 10             	add    $0x10,%esp
+    cprintf("BUG: exit failed.\n");
+  8001cb:	83 ec 0c             	sub    $0xc,%esp
+  8001ce:	68 b8 0f 80 00       	push   $0x800fb8
+  8001d3:	e8 01 01 00 00       	call   8002d9 <cprintf>
+  8001d8:	83 c4 10             	add    $0x10,%esp
+    while (1);
+  8001db:	eb fe                	jmp    8001db <exit+0x24>
+
+008001dd <fork>:
+}
+
+int
+fork(void) {
+  8001dd:	55                   	push   %ebp
+  8001de:	89 e5                	mov    %esp,%ebp
+  8001e0:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8001e3:	e8 35 ff ff ff       	call   80011d <sys_fork>
+}
+  8001e8:	c9                   	leave  
+  8001e9:	c3                   	ret    
+
+008001ea <wait>:
+
+int
+wait(void) {
+  8001ea:	55                   	push   %ebp
+  8001eb:	89 e5                	mov    %esp,%ebp
+  8001ed:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(0, NULL);
+  8001f0:	83 ec 08             	sub    $0x8,%esp
+  8001f3:	6a 00                	push   $0x0
+  8001f5:	6a 00                	push   $0x0
+  8001f7:	e8 30 ff ff ff       	call   80012c <sys_wait>
+  8001fc:	83 c4 10             	add    $0x10,%esp
+}
+  8001ff:	c9                   	leave  
+  800200:	c3                   	ret    
+
+00800201 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800201:	55                   	push   %ebp
+  800202:	89 e5                	mov    %esp,%ebp
+  800204:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(pid, store);
+  800207:	83 ec 08             	sub    $0x8,%esp
+  80020a:	ff 75 0c             	pushl  0xc(%ebp)
+  80020d:	ff 75 08             	pushl  0x8(%ebp)
+  800210:	e8 17 ff ff ff       	call   80012c <sys_wait>
+  800215:	83 c4 10             	add    $0x10,%esp
+}
+  800218:	c9                   	leave  
+  800219:	c3                   	ret    
+
+0080021a <yield>:
+
+void
+yield(void) {
+  80021a:	55                   	push   %ebp
+  80021b:	89 e5                	mov    %esp,%ebp
+  80021d:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800220:	e8 1c ff ff ff       	call   800141 <sys_yield>
+}
+  800225:	90                   	nop
+  800226:	c9                   	leave  
+  800227:	c3                   	ret    
+
+00800228 <kill>:
+
+int
+kill(int pid) {
+  800228:	55                   	push   %ebp
+  800229:	89 e5                	mov    %esp,%ebp
+  80022b:	83 ec 08             	sub    $0x8,%esp
+    return sys_kill(pid);
+  80022e:	83 ec 0c             	sub    $0xc,%esp
+  800231:	ff 75 08             	pushl  0x8(%ebp)
+  800234:	e8 17 ff ff ff       	call   800150 <sys_kill>
+  800239:	83 c4 10             	add    $0x10,%esp
+}
+  80023c:	c9                   	leave  
+  80023d:	c3                   	ret    
+
+0080023e <getpid>:
+
+int
+getpid(void) {
+  80023e:	55                   	push   %ebp
+  80023f:	89 e5                	mov    %esp,%ebp
+  800241:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800244:	e8 19 ff ff ff       	call   800162 <sys_getpid>
+}
+  800249:	c9                   	leave  
+  80024a:	c3                   	ret    
+
+0080024b <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80024b:	55                   	push   %ebp
+  80024c:	89 e5                	mov    %esp,%ebp
+  80024e:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800251:	e8 2d ff ff ff       	call   800183 <sys_pgdir>
+}
+  800256:	90                   	nop
+  800257:	c9                   	leave  
+  800258:	c3                   	ret    
+
+00800259 <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  800259:	55                   	push   %ebp
+  80025a:	89 e5                	mov    %esp,%ebp
+  80025c:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  80025f:	e8 2e ff ff ff       	call   800192 <sys_gettime>
+}
+  800264:	c9                   	leave  
+  800265:	c3                   	ret    
+
+00800266 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800266:	55                   	push   %ebp
+  800267:	89 e5                	mov    %esp,%ebp
+  800269:	83 ec 08             	sub    $0x8,%esp
+    sys_lab6_set_priority(priority);
+  80026c:	83 ec 0c             	sub    $0xc,%esp
+  80026f:	ff 75 08             	pushl  0x8(%ebp)
+  800272:	e8 2a ff ff ff       	call   8001a1 <sys_lab6_set_priority>
+  800277:	83 c4 10             	add    $0x10,%esp
+}
+  80027a:	90                   	nop
+  80027b:	c9                   	leave  
+  80027c:	c3                   	ret    
+
+0080027d <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  80027d:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800282:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800285:	e8 c3 00 00 00       	call   80034d <umain>
+1:  jmp 1b
+  80028a:	eb fe                	jmp    80028a <_start+0xd>
+
+0080028c <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  80028c:	55                   	push   %ebp
+  80028d:	89 e5                	mov    %esp,%ebp
+  80028f:	83 ec 08             	sub    $0x8,%esp
+    sys_putc(c);
+  800292:	83 ec 0c             	sub    $0xc,%esp
+  800295:	ff 75 08             	pushl  0x8(%ebp)
+  800298:	e8 d4 fe ff ff       	call   800171 <sys_putc>
+  80029d:	83 c4 10             	add    $0x10,%esp
+    (*cnt) ++;
+  8002a0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002a3:	8b 00                	mov    (%eax),%eax
+  8002a5:	8d 50 01             	lea    0x1(%eax),%edx
+  8002a8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002ab:	89 10                	mov    %edx,(%eax)
+}
+  8002ad:	90                   	nop
+  8002ae:	c9                   	leave  
+  8002af:	c3                   	ret    
+
+008002b0 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002b0:	55                   	push   %ebp
+  8002b1:	89 e5                	mov    %esp,%ebp
+  8002b3:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  8002b6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002bd:	ff 75 0c             	pushl  0xc(%ebp)
+  8002c0:	ff 75 08             	pushl  0x8(%ebp)
+  8002c3:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  8002c6:	50                   	push   %eax
+  8002c7:	68 8c 02 80 00       	push   $0x80028c
+  8002cc:	e8 fc 06 00 00       	call   8009cd <vprintfmt>
+  8002d1:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  8002d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002d7:	c9                   	leave  
+  8002d8:	c3                   	ret    
+
+008002d9 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  8002d9:	55                   	push   %ebp
+  8002da:	89 e5                	mov    %esp,%ebp
+  8002dc:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8002df:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8002e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  8002e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8002e8:	83 ec 08             	sub    $0x8,%esp
+  8002eb:	50                   	push   %eax
+  8002ec:	ff 75 08             	pushl  0x8(%ebp)
+  8002ef:	e8 bc ff ff ff       	call   8002b0 <vcprintf>
+  8002f4:	83 c4 10             	add    $0x10,%esp
+  8002f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  8002fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002fd:	c9                   	leave  
+  8002fe:	c3                   	ret    
+
+008002ff <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  8002ff:	55                   	push   %ebp
+  800300:	89 e5                	mov    %esp,%ebp
+  800302:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  800305:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80030c:	eb 14                	jmp    800322 <cputs+0x23>
+        cputch(c, &cnt);
+  80030e:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800312:	83 ec 08             	sub    $0x8,%esp
+  800315:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800318:	52                   	push   %edx
+  800319:	50                   	push   %eax
+  80031a:	e8 6d ff ff ff       	call   80028c <cputch>
+  80031f:	83 c4 10             	add    $0x10,%esp
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800322:	8b 45 08             	mov    0x8(%ebp),%eax
+  800325:	8d 50 01             	lea    0x1(%eax),%edx
+  800328:	89 55 08             	mov    %edx,0x8(%ebp)
+  80032b:	0f b6 00             	movzbl (%eax),%eax
+  80032e:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800331:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800335:	75 d7                	jne    80030e <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800337:	83 ec 08             	sub    $0x8,%esp
+  80033a:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  80033d:	50                   	push   %eax
+  80033e:	6a 0a                	push   $0xa
+  800340:	e8 47 ff ff ff       	call   80028c <cputch>
+  800345:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  800348:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80034b:	c9                   	leave  
+  80034c:	c3                   	ret    
+
+0080034d <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  80034d:	55                   	push   %ebp
+  80034e:	89 e5                	mov    %esp,%ebp
+  800350:	83 ec 18             	sub    $0x18,%esp
+    int ret = main();
+  800353:	e8 d3 0b 00 00       	call   800f2b <main>
+  800358:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  80035b:	83 ec 0c             	sub    $0xc,%esp
+  80035e:	ff 75 f4             	pushl  -0xc(%ebp)
+  800361:	e8 51 fe ff ff       	call   8001b7 <exit>
+
+00800366 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800366:	55                   	push   %ebp
+  800367:	89 e5                	mov    %esp,%ebp
+  800369:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  80036c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800373:	eb 04                	jmp    800379 <strlen+0x13>
+        cnt ++;
+  800375:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800379:	8b 45 08             	mov    0x8(%ebp),%eax
+  80037c:	8d 50 01             	lea    0x1(%eax),%edx
+  80037f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800382:	0f b6 00             	movzbl (%eax),%eax
+  800385:	84 c0                	test   %al,%al
+  800387:	75 ec                	jne    800375 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800389:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  80038c:	c9                   	leave  
+  80038d:	c3                   	ret    
+
+0080038e <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  80038e:	55                   	push   %ebp
+  80038f:	89 e5                	mov    %esp,%ebp
+  800391:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800394:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  80039b:	eb 04                	jmp    8003a1 <strnlen+0x13>
+        cnt ++;
+  80039d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  8003a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003a4:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003a7:	73 10                	jae    8003b9 <strnlen+0x2b>
+  8003a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003ac:	8d 50 01             	lea    0x1(%eax),%edx
+  8003af:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003b2:	0f b6 00             	movzbl (%eax),%eax
+  8003b5:	84 c0                	test   %al,%al
+  8003b7:	75 e4                	jne    80039d <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003b9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003bc:	c9                   	leave  
+  8003bd:	c3                   	ret    
+
+008003be <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  8003be:	55                   	push   %ebp
+  8003bf:	89 e5                	mov    %esp,%ebp
+  8003c1:	57                   	push   %edi
+  8003c2:	56                   	push   %esi
+  8003c3:	83 ec 20             	sub    $0x20,%esp
+  8003c6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003cc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8003cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  8003d2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003d8:	89 d1                	mov    %edx,%ecx
+  8003da:	89 c2                	mov    %eax,%edx
+  8003dc:	89 ce                	mov    %ecx,%esi
+  8003de:	89 d7                	mov    %edx,%edi
+  8003e0:	ac                   	lods   %ds:(%esi),%al
+  8003e1:	aa                   	stos   %al,%es:(%edi)
+  8003e2:	84 c0                	test   %al,%al
+  8003e4:	75 fa                	jne    8003e0 <strcpy+0x22>
+  8003e6:	89 fa                	mov    %edi,%edx
+  8003e8:	89 f1                	mov    %esi,%ecx
+  8003ea:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8003ed:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8003f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  8003f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  8003f6:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  8003f7:	83 c4 20             	add    $0x20,%esp
+  8003fa:	5e                   	pop    %esi
+  8003fb:	5f                   	pop    %edi
+  8003fc:	5d                   	pop    %ebp
+  8003fd:	c3                   	ret    
+
+008003fe <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  8003fe:	55                   	push   %ebp
+  8003ff:	89 e5                	mov    %esp,%ebp
+  800401:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800404:	8b 45 08             	mov    0x8(%ebp),%eax
+  800407:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  80040a:	eb 21                	jmp    80042d <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  80040c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80040f:	0f b6 10             	movzbl (%eax),%edx
+  800412:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800415:	88 10                	mov    %dl,(%eax)
+  800417:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80041a:	0f b6 00             	movzbl (%eax),%eax
+  80041d:	84 c0                	test   %al,%al
+  80041f:	74 04                	je     800425 <strncpy+0x27>
+            src ++;
+  800421:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800425:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800429:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  80042d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800431:	75 d9                	jne    80040c <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800433:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800436:	c9                   	leave  
+  800437:	c3                   	ret    
+
+00800438 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800438:	55                   	push   %ebp
+  800439:	89 e5                	mov    %esp,%ebp
+  80043b:	57                   	push   %edi
+  80043c:	56                   	push   %esi
+  80043d:	83 ec 20             	sub    $0x20,%esp
+  800440:	8b 45 08             	mov    0x8(%ebp),%eax
+  800443:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800446:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800449:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  80044c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80044f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800452:	89 d1                	mov    %edx,%ecx
+  800454:	89 c2                	mov    %eax,%edx
+  800456:	89 ce                	mov    %ecx,%esi
+  800458:	89 d7                	mov    %edx,%edi
+  80045a:	ac                   	lods   %ds:(%esi),%al
+  80045b:	ae                   	scas   %es:(%edi),%al
+  80045c:	75 08                	jne    800466 <strcmp+0x2e>
+  80045e:	84 c0                	test   %al,%al
+  800460:	75 f8                	jne    80045a <strcmp+0x22>
+  800462:	31 c0                	xor    %eax,%eax
+  800464:	eb 04                	jmp    80046a <strcmp+0x32>
+  800466:	19 c0                	sbb    %eax,%eax
+  800468:	0c 01                	or     $0x1,%al
+  80046a:	89 fa                	mov    %edi,%edx
+  80046c:	89 f1                	mov    %esi,%ecx
+  80046e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800471:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800474:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800477:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  80047a:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  80047b:	83 c4 20             	add    $0x20,%esp
+  80047e:	5e                   	pop    %esi
+  80047f:	5f                   	pop    %edi
+  800480:	5d                   	pop    %ebp
+  800481:	c3                   	ret    
+
+00800482 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800482:	55                   	push   %ebp
+  800483:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800485:	eb 0c                	jmp    800493 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800487:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  80048b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  80048f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800493:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800497:	74 1a                	je     8004b3 <strncmp+0x31>
+  800499:	8b 45 08             	mov    0x8(%ebp),%eax
+  80049c:	0f b6 00             	movzbl (%eax),%eax
+  80049f:	84 c0                	test   %al,%al
+  8004a1:	74 10                	je     8004b3 <strncmp+0x31>
+  8004a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004a6:	0f b6 10             	movzbl (%eax),%edx
+  8004a9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ac:	0f b6 00             	movzbl (%eax),%eax
+  8004af:	38 c2                	cmp    %al,%dl
+  8004b1:	74 d4                	je     800487 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004b3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004b7:	74 18                	je     8004d1 <strncmp+0x4f>
+  8004b9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004bc:	0f b6 00             	movzbl (%eax),%eax
+  8004bf:	0f b6 d0             	movzbl %al,%edx
+  8004c2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004c5:	0f b6 00             	movzbl (%eax),%eax
+  8004c8:	0f b6 c0             	movzbl %al,%eax
+  8004cb:	29 c2                	sub    %eax,%edx
+  8004cd:	89 d0                	mov    %edx,%eax
+  8004cf:	eb 05                	jmp    8004d6 <strncmp+0x54>
+  8004d1:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8004d6:	5d                   	pop    %ebp
+  8004d7:	c3                   	ret    
+
+008004d8 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  8004d8:	55                   	push   %ebp
+  8004d9:	89 e5                	mov    %esp,%ebp
+  8004db:	83 ec 04             	sub    $0x4,%esp
+  8004de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004e1:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  8004e4:	eb 14                	jmp    8004fa <strchr+0x22>
+        if (*s == c) {
+  8004e6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e9:	0f b6 00             	movzbl (%eax),%eax
+  8004ec:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  8004ef:	75 05                	jne    8004f6 <strchr+0x1e>
+            return (char *)s;
+  8004f1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004f4:	eb 13                	jmp    800509 <strchr+0x31>
+        }
+        s ++;
+  8004f6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  8004fa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fd:	0f b6 00             	movzbl (%eax),%eax
+  800500:	84 c0                	test   %al,%al
+  800502:	75 e2                	jne    8004e6 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800504:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800509:	c9                   	leave  
+  80050a:	c3                   	ret    
+
+0080050b <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  80050b:	55                   	push   %ebp
+  80050c:	89 e5                	mov    %esp,%ebp
+  80050e:	83 ec 04             	sub    $0x4,%esp
+  800511:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800514:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800517:	eb 0f                	jmp    800528 <strfind+0x1d>
+        if (*s == c) {
+  800519:	8b 45 08             	mov    0x8(%ebp),%eax
+  80051c:	0f b6 00             	movzbl (%eax),%eax
+  80051f:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800522:	74 10                	je     800534 <strfind+0x29>
+            break;
+        }
+        s ++;
+  800524:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800528:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052b:	0f b6 00             	movzbl (%eax),%eax
+  80052e:	84 c0                	test   %al,%al
+  800530:	75 e7                	jne    800519 <strfind+0xe>
+  800532:	eb 01                	jmp    800535 <strfind+0x2a>
+        if (*s == c) {
+            break;
+  800534:	90                   	nop
+        }
+        s ++;
+    }
+    return (char *)s;
+  800535:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800538:	c9                   	leave  
+  800539:	c3                   	ret    
+
+0080053a <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  80053a:	55                   	push   %ebp
+  80053b:	89 e5                	mov    %esp,%ebp
+  80053d:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800540:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800547:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80054e:	eb 04                	jmp    800554 <strtol+0x1a>
+        s ++;
+  800550:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800554:	8b 45 08             	mov    0x8(%ebp),%eax
+  800557:	0f b6 00             	movzbl (%eax),%eax
+  80055a:	3c 20                	cmp    $0x20,%al
+  80055c:	74 f2                	je     800550 <strtol+0x16>
+  80055e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800561:	0f b6 00             	movzbl (%eax),%eax
+  800564:	3c 09                	cmp    $0x9,%al
+  800566:	74 e8                	je     800550 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800568:	8b 45 08             	mov    0x8(%ebp),%eax
+  80056b:	0f b6 00             	movzbl (%eax),%eax
+  80056e:	3c 2b                	cmp    $0x2b,%al
+  800570:	75 06                	jne    800578 <strtol+0x3e>
+        s ++;
+  800572:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800576:	eb 15                	jmp    80058d <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800578:	8b 45 08             	mov    0x8(%ebp),%eax
+  80057b:	0f b6 00             	movzbl (%eax),%eax
+  80057e:	3c 2d                	cmp    $0x2d,%al
+  800580:	75 0b                	jne    80058d <strtol+0x53>
+        s ++, neg = 1;
+  800582:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800586:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  80058d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800591:	74 06                	je     800599 <strtol+0x5f>
+  800593:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800597:	75 24                	jne    8005bd <strtol+0x83>
+  800599:	8b 45 08             	mov    0x8(%ebp),%eax
+  80059c:	0f b6 00             	movzbl (%eax),%eax
+  80059f:	3c 30                	cmp    $0x30,%al
+  8005a1:	75 1a                	jne    8005bd <strtol+0x83>
+  8005a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a6:	83 c0 01             	add    $0x1,%eax
+  8005a9:	0f b6 00             	movzbl (%eax),%eax
+  8005ac:	3c 78                	cmp    $0x78,%al
+  8005ae:	75 0d                	jne    8005bd <strtol+0x83>
+        s += 2, base = 16;
+  8005b0:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005b4:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005bb:	eb 2a                	jmp    8005e7 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005bd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005c1:	75 17                	jne    8005da <strtol+0xa0>
+  8005c3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005c6:	0f b6 00             	movzbl (%eax),%eax
+  8005c9:	3c 30                	cmp    $0x30,%al
+  8005cb:	75 0d                	jne    8005da <strtol+0xa0>
+        s ++, base = 8;
+  8005cd:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005d1:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  8005d8:	eb 0d                	jmp    8005e7 <strtol+0xad>
+    }
+    else if (base == 0) {
+  8005da:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005de:	75 07                	jne    8005e7 <strtol+0xad>
+        base = 10;
+  8005e0:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  8005e7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ea:	0f b6 00             	movzbl (%eax),%eax
+  8005ed:	3c 2f                	cmp    $0x2f,%al
+  8005ef:	7e 1b                	jle    80060c <strtol+0xd2>
+  8005f1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005f4:	0f b6 00             	movzbl (%eax),%eax
+  8005f7:	3c 39                	cmp    $0x39,%al
+  8005f9:	7f 11                	jg     80060c <strtol+0xd2>
+            dig = *s - '0';
+  8005fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005fe:	0f b6 00             	movzbl (%eax),%eax
+  800601:	0f be c0             	movsbl %al,%eax
+  800604:	83 e8 30             	sub    $0x30,%eax
+  800607:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80060a:	eb 48                	jmp    800654 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  80060c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80060f:	0f b6 00             	movzbl (%eax),%eax
+  800612:	3c 60                	cmp    $0x60,%al
+  800614:	7e 1b                	jle    800631 <strtol+0xf7>
+  800616:	8b 45 08             	mov    0x8(%ebp),%eax
+  800619:	0f b6 00             	movzbl (%eax),%eax
+  80061c:	3c 7a                	cmp    $0x7a,%al
+  80061e:	7f 11                	jg     800631 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800620:	8b 45 08             	mov    0x8(%ebp),%eax
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	0f be c0             	movsbl %al,%eax
+  800629:	83 e8 57             	sub    $0x57,%eax
+  80062c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80062f:	eb 23                	jmp    800654 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800631:	8b 45 08             	mov    0x8(%ebp),%eax
+  800634:	0f b6 00             	movzbl (%eax),%eax
+  800637:	3c 40                	cmp    $0x40,%al
+  800639:	7e 3c                	jle    800677 <strtol+0x13d>
+  80063b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80063e:	0f b6 00             	movzbl (%eax),%eax
+  800641:	3c 5a                	cmp    $0x5a,%al
+  800643:	7f 32                	jg     800677 <strtol+0x13d>
+            dig = *s - 'A' + 10;
+  800645:	8b 45 08             	mov    0x8(%ebp),%eax
+  800648:	0f b6 00             	movzbl (%eax),%eax
+  80064b:	0f be c0             	movsbl %al,%eax
+  80064e:	83 e8 37             	sub    $0x37,%eax
+  800651:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800654:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800657:	3b 45 10             	cmp    0x10(%ebp),%eax
+  80065a:	7d 1a                	jge    800676 <strtol+0x13c>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  80065c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800660:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800663:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800667:	89 c2                	mov    %eax,%edx
+  800669:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80066c:	01 d0                	add    %edx,%eax
+  80066e:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800671:	e9 71 ff ff ff       	jmp    8005e7 <strtol+0xad>
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+            break;
+  800676:	90                   	nop
+        }
+        s ++, val = (val * base) + dig;
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  800677:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80067b:	74 08                	je     800685 <strtol+0x14b>
+        *endptr = (char *) s;
+  80067d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800680:	8b 55 08             	mov    0x8(%ebp),%edx
+  800683:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800685:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800689:	74 07                	je     800692 <strtol+0x158>
+  80068b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80068e:	f7 d8                	neg    %eax
+  800690:	eb 03                	jmp    800695 <strtol+0x15b>
+  800692:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800695:	c9                   	leave  
+  800696:	c3                   	ret    
+
+00800697 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800697:	55                   	push   %ebp
+  800698:	89 e5                	mov    %esp,%ebp
+  80069a:	57                   	push   %edi
+  80069b:	83 ec 24             	sub    $0x24,%esp
+  80069e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006a1:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006a4:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006a8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006ab:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006ae:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006b1:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006b7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006ba:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006be:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006c1:	89 d7                	mov    %edx,%edi
+  8006c3:	f3 aa                	rep stos %al,%es:(%edi)
+  8006c5:	89 fa                	mov    %edi,%edx
+  8006c7:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8006ca:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  8006cd:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006d0:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  8006d1:	83 c4 24             	add    $0x24,%esp
+  8006d4:	5f                   	pop    %edi
+  8006d5:	5d                   	pop    %ebp
+  8006d6:	c3                   	ret    
+
+008006d7 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  8006d7:	55                   	push   %ebp
+  8006d8:	89 e5                	mov    %esp,%ebp
+  8006da:	57                   	push   %edi
+  8006db:	56                   	push   %esi
+  8006dc:	53                   	push   %ebx
+  8006dd:	83 ec 30             	sub    $0x30,%esp
+  8006e0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8006e6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006e9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8006ec:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006ef:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  8006f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8006f5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  8006f8:	73 42                	jae    80073c <memmove+0x65>
+  8006fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8006fd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800700:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800703:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800706:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800709:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  80070c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  80070f:	c1 e8 02             	shr    $0x2,%eax
+  800712:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800714:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800717:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80071a:	89 d7                	mov    %edx,%edi
+  80071c:	89 c6                	mov    %eax,%esi
+  80071e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800720:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800723:	83 e1 03             	and    $0x3,%ecx
+  800726:	74 02                	je     80072a <memmove+0x53>
+  800728:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  80072a:	89 f0                	mov    %esi,%eax
+  80072c:	89 fa                	mov    %edi,%edx
+  80072e:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800731:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800734:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800737:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  80073a:	eb 36                	jmp    800772 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  80073c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80073f:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800742:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800745:	01 c2                	add    %eax,%edx
+  800747:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80074a:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  80074d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800750:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800753:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800756:	89 c1                	mov    %eax,%ecx
+  800758:	89 d8                	mov    %ebx,%eax
+  80075a:	89 d6                	mov    %edx,%esi
+  80075c:	89 c7                	mov    %eax,%edi
+  80075e:	fd                   	std    
+  80075f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800761:	fc                   	cld    
+  800762:	89 f8                	mov    %edi,%eax
+  800764:	89 f2                	mov    %esi,%edx
+  800766:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800769:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  80076c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  80076f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800772:	83 c4 30             	add    $0x30,%esp
+  800775:	5b                   	pop    %ebx
+  800776:	5e                   	pop    %esi
+  800777:	5f                   	pop    %edi
+  800778:	5d                   	pop    %ebp
+  800779:	c3                   	ret    
+
+0080077a <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  80077a:	55                   	push   %ebp
+  80077b:	89 e5                	mov    %esp,%ebp
+  80077d:	57                   	push   %edi
+  80077e:	56                   	push   %esi
+  80077f:	83 ec 20             	sub    $0x20,%esp
+  800782:	8b 45 08             	mov    0x8(%ebp),%eax
+  800785:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800788:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80078b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80078e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800791:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800794:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800797:	c1 e8 02             	shr    $0x2,%eax
+  80079a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  80079c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80079f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007a2:	89 d7                	mov    %edx,%edi
+  8007a4:	89 c6                	mov    %eax,%esi
+  8007a6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007a8:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007ab:	83 e1 03             	and    $0x3,%ecx
+  8007ae:	74 02                	je     8007b2 <memcpy+0x38>
+  8007b0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007b2:	89 f0                	mov    %esi,%eax
+  8007b4:	89 fa                	mov    %edi,%edx
+  8007b6:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007b9:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007bc:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  8007bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007c2:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007c3:	83 c4 20             	add    $0x20,%esp
+  8007c6:	5e                   	pop    %esi
+  8007c7:	5f                   	pop    %edi
+  8007c8:	5d                   	pop    %ebp
+  8007c9:	c3                   	ret    
+
+008007ca <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  8007ca:	55                   	push   %ebp
+  8007cb:	89 e5                	mov    %esp,%ebp
+  8007cd:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  8007d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007d3:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  8007d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007d9:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  8007dc:	eb 30                	jmp    80080e <memcmp+0x44>
+        if (*s1 != *s2) {
+  8007de:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8007e1:	0f b6 10             	movzbl (%eax),%edx
+  8007e4:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8007e7:	0f b6 00             	movzbl (%eax),%eax
+  8007ea:	38 c2                	cmp    %al,%dl
+  8007ec:	74 18                	je     800806 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8007ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8007f1:	0f b6 00             	movzbl (%eax),%eax
+  8007f4:	0f b6 d0             	movzbl %al,%edx
+  8007f7:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8007fa:	0f b6 00             	movzbl (%eax),%eax
+  8007fd:	0f b6 c0             	movzbl %al,%eax
+  800800:	29 c2                	sub    %eax,%edx
+  800802:	89 d0                	mov    %edx,%eax
+  800804:	eb 1a                	jmp    800820 <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800806:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  80080a:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  80080e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800811:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800814:	89 55 10             	mov    %edx,0x10(%ebp)
+  800817:	85 c0                	test   %eax,%eax
+  800819:	75 c3                	jne    8007de <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  80081b:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800820:	c9                   	leave  
+  800821:	c3                   	ret    
+
+00800822 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800822:	55                   	push   %ebp
+  800823:	89 e5                	mov    %esp,%ebp
+  800825:	83 ec 38             	sub    $0x38,%esp
+  800828:	8b 45 10             	mov    0x10(%ebp),%eax
+  80082b:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  80082e:	8b 45 14             	mov    0x14(%ebp),%eax
+  800831:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  800834:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800837:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  80083a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80083d:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800840:	8b 45 18             	mov    0x18(%ebp),%eax
+  800843:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800846:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800849:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80084c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80084f:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  800852:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800855:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800858:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  80085c:	74 1c                	je     80087a <printnum+0x58>
+  80085e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800861:	ba 00 00 00 00       	mov    $0x0,%edx
+  800866:	f7 75 e4             	divl   -0x1c(%ebp)
+  800869:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  80086c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80086f:	ba 00 00 00 00       	mov    $0x0,%edx
+  800874:	f7 75 e4             	divl   -0x1c(%ebp)
+  800877:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80087a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80087d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800880:	f7 75 e4             	divl   -0x1c(%ebp)
+  800883:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800886:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800889:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80088c:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80088f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800892:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800895:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800898:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  80089b:	8b 45 18             	mov    0x18(%ebp),%eax
+  80089e:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008a3:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008a6:	77 41                	ja     8008e9 <printnum+0xc7>
+  8008a8:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008ab:	72 05                	jb     8008b2 <printnum+0x90>
+  8008ad:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  8008b0:	77 37                	ja     8008e9 <printnum+0xc7>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008b2:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008b5:	83 e8 01             	sub    $0x1,%eax
+  8008b8:	83 ec 04             	sub    $0x4,%esp
+  8008bb:	ff 75 20             	pushl  0x20(%ebp)
+  8008be:	50                   	push   %eax
+  8008bf:	ff 75 18             	pushl  0x18(%ebp)
+  8008c2:	ff 75 ec             	pushl  -0x14(%ebp)
+  8008c5:	ff 75 e8             	pushl  -0x18(%ebp)
+  8008c8:	ff 75 0c             	pushl  0xc(%ebp)
+  8008cb:	ff 75 08             	pushl  0x8(%ebp)
+  8008ce:	e8 4f ff ff ff       	call   800822 <printnum>
+  8008d3:	83 c4 20             	add    $0x20,%esp
+  8008d6:	eb 1b                	jmp    8008f3 <printnum+0xd1>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  8008d8:	83 ec 08             	sub    $0x8,%esp
+  8008db:	ff 75 0c             	pushl  0xc(%ebp)
+  8008de:	ff 75 20             	pushl  0x20(%ebp)
+  8008e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008e4:	ff d0                	call   *%eax
+  8008e6:	83 c4 10             	add    $0x10,%esp
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8008e9:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8008ed:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8008f1:	7f e5                	jg     8008d8 <printnum+0xb6>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8008f3:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8008f6:	05 e4 10 80 00       	add    $0x8010e4,%eax
+  8008fb:	0f b6 00             	movzbl (%eax),%eax
+  8008fe:	0f be c0             	movsbl %al,%eax
+  800901:	83 ec 08             	sub    $0x8,%esp
+  800904:	ff 75 0c             	pushl  0xc(%ebp)
+  800907:	50                   	push   %eax
+  800908:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090b:	ff d0                	call   *%eax
+  80090d:	83 c4 10             	add    $0x10,%esp
+}
+  800910:	90                   	nop
+  800911:	c9                   	leave  
+  800912:	c3                   	ret    
+
+00800913 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800913:	55                   	push   %ebp
+  800914:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800916:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80091a:	7e 14                	jle    800930 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80091c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80091f:	8b 00                	mov    (%eax),%eax
+  800921:	8d 48 08             	lea    0x8(%eax),%ecx
+  800924:	8b 55 08             	mov    0x8(%ebp),%edx
+  800927:	89 0a                	mov    %ecx,(%edx)
+  800929:	8b 50 04             	mov    0x4(%eax),%edx
+  80092c:	8b 00                	mov    (%eax),%eax
+  80092e:	eb 30                	jmp    800960 <getuint+0x4d>
+    }
+    else if (lflag) {
+  800930:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800934:	74 16                	je     80094c <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800936:	8b 45 08             	mov    0x8(%ebp),%eax
+  800939:	8b 00                	mov    (%eax),%eax
+  80093b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80093e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800941:	89 0a                	mov    %ecx,(%edx)
+  800943:	8b 00                	mov    (%eax),%eax
+  800945:	ba 00 00 00 00       	mov    $0x0,%edx
+  80094a:	eb 14                	jmp    800960 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80094c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80094f:	8b 00                	mov    (%eax),%eax
+  800951:	8d 48 04             	lea    0x4(%eax),%ecx
+  800954:	8b 55 08             	mov    0x8(%ebp),%edx
+  800957:	89 0a                	mov    %ecx,(%edx)
+  800959:	8b 00                	mov    (%eax),%eax
+  80095b:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800960:	5d                   	pop    %ebp
+  800961:	c3                   	ret    
+
+00800962 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800962:	55                   	push   %ebp
+  800963:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800965:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800969:	7e 14                	jle    80097f <getint+0x1d>
+        return va_arg(*ap, long long);
+  80096b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80096e:	8b 00                	mov    (%eax),%eax
+  800970:	8d 48 08             	lea    0x8(%eax),%ecx
+  800973:	8b 55 08             	mov    0x8(%ebp),%edx
+  800976:	89 0a                	mov    %ecx,(%edx)
+  800978:	8b 50 04             	mov    0x4(%eax),%edx
+  80097b:	8b 00                	mov    (%eax),%eax
+  80097d:	eb 28                	jmp    8009a7 <getint+0x45>
+    }
+    else if (lflag) {
+  80097f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800983:	74 12                	je     800997 <getint+0x35>
+        return va_arg(*ap, long);
+  800985:	8b 45 08             	mov    0x8(%ebp),%eax
+  800988:	8b 00                	mov    (%eax),%eax
+  80098a:	8d 48 04             	lea    0x4(%eax),%ecx
+  80098d:	8b 55 08             	mov    0x8(%ebp),%edx
+  800990:	89 0a                	mov    %ecx,(%edx)
+  800992:	8b 00                	mov    (%eax),%eax
+  800994:	99                   	cltd   
+  800995:	eb 10                	jmp    8009a7 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800997:	8b 45 08             	mov    0x8(%ebp),%eax
+  80099a:	8b 00                	mov    (%eax),%eax
+  80099c:	8d 48 04             	lea    0x4(%eax),%ecx
+  80099f:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009a2:	89 0a                	mov    %ecx,(%edx)
+  8009a4:	8b 00                	mov    (%eax),%eax
+  8009a6:	99                   	cltd   
+    }
+}
+  8009a7:	5d                   	pop    %ebp
+  8009a8:	c3                   	ret    
+
+008009a9 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009a9:	55                   	push   %ebp
+  8009aa:	89 e5                	mov    %esp,%ebp
+  8009ac:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009af:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8009b8:	50                   	push   %eax
+  8009b9:	ff 75 10             	pushl  0x10(%ebp)
+  8009bc:	ff 75 0c             	pushl  0xc(%ebp)
+  8009bf:	ff 75 08             	pushl  0x8(%ebp)
+  8009c2:	e8 06 00 00 00       	call   8009cd <vprintfmt>
+  8009c7:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8009ca:	90                   	nop
+  8009cb:	c9                   	leave  
+  8009cc:	c3                   	ret    
+
+008009cd <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8009cd:	55                   	push   %ebp
+  8009ce:	89 e5                	mov    %esp,%ebp
+  8009d0:	56                   	push   %esi
+  8009d1:	53                   	push   %ebx
+  8009d2:	83 ec 20             	sub    $0x20,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009d5:	eb 17                	jmp    8009ee <vprintfmt+0x21>
+            if (ch == '\0') {
+  8009d7:	85 db                	test   %ebx,%ebx
+  8009d9:	0f 84 8e 03 00 00    	je     800d6d <vprintfmt+0x3a0>
+                return;
+            }
+            putch(ch, putdat);
+  8009df:	83 ec 08             	sub    $0x8,%esp
+  8009e2:	ff 75 0c             	pushl  0xc(%ebp)
+  8009e5:	53                   	push   %ebx
+  8009e6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009e9:	ff d0                	call   *%eax
+  8009eb:	83 c4 10             	add    $0x10,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009ee:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009f1:	8d 50 01             	lea    0x1(%eax),%edx
+  8009f4:	89 55 10             	mov    %edx,0x10(%ebp)
+  8009f7:	0f b6 00             	movzbl (%eax),%eax
+  8009fa:	0f b6 d8             	movzbl %al,%ebx
+  8009fd:	83 fb 25             	cmp    $0x25,%ebx
+  800a00:	75 d5                	jne    8009d7 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a02:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a06:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a10:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a13:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a1a:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a1d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a20:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a23:	8d 50 01             	lea    0x1(%eax),%edx
+  800a26:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a29:	0f b6 00             	movzbl (%eax),%eax
+  800a2c:	0f b6 d8             	movzbl %al,%ebx
+  800a2f:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a32:	83 f8 55             	cmp    $0x55,%eax
+  800a35:	0f 87 05 03 00 00    	ja     800d40 <vprintfmt+0x373>
+  800a3b:	8b 04 85 08 11 80 00 	mov    0x801108(,%eax,4),%eax
+  800a42:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a44:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a48:	eb d6                	jmp    800a20 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a4a:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800a4e:	eb d0                	jmp    800a20 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a50:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800a57:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a5a:	89 d0                	mov    %edx,%eax
+  800a5c:	c1 e0 02             	shl    $0x2,%eax
+  800a5f:	01 d0                	add    %edx,%eax
+  800a61:	01 c0                	add    %eax,%eax
+  800a63:	01 d8                	add    %ebx,%eax
+  800a65:	83 e8 30             	sub    $0x30,%eax
+  800a68:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800a6b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a6e:	0f b6 00             	movzbl (%eax),%eax
+  800a71:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800a74:	83 fb 2f             	cmp    $0x2f,%ebx
+  800a77:	7e 39                	jle    800ab2 <vprintfmt+0xe5>
+  800a79:	83 fb 39             	cmp    $0x39,%ebx
+  800a7c:	7f 34                	jg     800ab2 <vprintfmt+0xe5>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a7e:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  800a82:	eb d3                	jmp    800a57 <vprintfmt+0x8a>
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800a84:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a87:	8d 50 04             	lea    0x4(%eax),%edx
+  800a8a:	89 55 14             	mov    %edx,0x14(%ebp)
+  800a8d:	8b 00                	mov    (%eax),%eax
+  800a8f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800a92:	eb 1f                	jmp    800ab3 <vprintfmt+0xe6>
+
+        case '.':
+            if (width < 0)
+  800a94:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800a98:	79 86                	jns    800a20 <vprintfmt+0x53>
+                width = 0;
+  800a9a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800aa1:	e9 7a ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800aa6:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800aad:	e9 6e ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+            goto process_precision;
+  800ab2:	90                   	nop
+        case '#':
+            altflag = 1;
+            goto reswitch;
+
+        process_precision:
+            if (width < 0)
+  800ab3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ab7:	0f 89 63 ff ff ff    	jns    800a20 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800abd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ac0:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800ac3:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800aca:	e9 51 ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800acf:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800ad3:	e9 48 ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800ad8:	8b 45 14             	mov    0x14(%ebp),%eax
+  800adb:	8d 50 04             	lea    0x4(%eax),%edx
+  800ade:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ae1:	8b 00                	mov    (%eax),%eax
+  800ae3:	83 ec 08             	sub    $0x8,%esp
+  800ae6:	ff 75 0c             	pushl  0xc(%ebp)
+  800ae9:	50                   	push   %eax
+  800aea:	8b 45 08             	mov    0x8(%ebp),%eax
+  800aed:	ff d0                	call   *%eax
+  800aef:	83 c4 10             	add    $0x10,%esp
+            break;
+  800af2:	e9 71 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800af7:	8b 45 14             	mov    0x14(%ebp),%eax
+  800afa:	8d 50 04             	lea    0x4(%eax),%edx
+  800afd:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b00:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b02:	85 db                	test   %ebx,%ebx
+  800b04:	79 02                	jns    800b08 <vprintfmt+0x13b>
+                err = -err;
+  800b06:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b08:	83 fb 18             	cmp    $0x18,%ebx
+  800b0b:	7f 0b                	jg     800b18 <vprintfmt+0x14b>
+  800b0d:	8b 34 9d 80 10 80 00 	mov    0x801080(,%ebx,4),%esi
+  800b14:	85 f6                	test   %esi,%esi
+  800b16:	75 19                	jne    800b31 <vprintfmt+0x164>
+                printfmt(putch, putdat, "error %d", err);
+  800b18:	53                   	push   %ebx
+  800b19:	68 f5 10 80 00       	push   $0x8010f5
+  800b1e:	ff 75 0c             	pushl  0xc(%ebp)
+  800b21:	ff 75 08             	pushl  0x8(%ebp)
+  800b24:	e8 80 fe ff ff       	call   8009a9 <printfmt>
+  800b29:	83 c4 10             	add    $0x10,%esp
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b2c:	e9 37 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  800b31:	56                   	push   %esi
+  800b32:	68 fe 10 80 00       	push   $0x8010fe
+  800b37:	ff 75 0c             	pushl  0xc(%ebp)
+  800b3a:	ff 75 08             	pushl  0x8(%ebp)
+  800b3d:	e8 67 fe ff ff       	call   8009a9 <printfmt>
+  800b42:	83 c4 10             	add    $0x10,%esp
+            }
+            break;
+  800b45:	e9 1e 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800b4a:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b4d:	8d 50 04             	lea    0x4(%eax),%edx
+  800b50:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b53:	8b 30                	mov    (%eax),%esi
+  800b55:	85 f6                	test   %esi,%esi
+  800b57:	75 05                	jne    800b5e <vprintfmt+0x191>
+                p = "(null)";
+  800b59:	be 01 11 80 00       	mov    $0x801101,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800b5e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b62:	7e 76                	jle    800bda <vprintfmt+0x20d>
+  800b64:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800b68:	74 70                	je     800bda <vprintfmt+0x20d>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b6a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b6d:	83 ec 08             	sub    $0x8,%esp
+  800b70:	50                   	push   %eax
+  800b71:	56                   	push   %esi
+  800b72:	e8 17 f8 ff ff       	call   80038e <strnlen>
+  800b77:	83 c4 10             	add    $0x10,%esp
+  800b7a:	89 c2                	mov    %eax,%edx
+  800b7c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800b7f:	29 d0                	sub    %edx,%eax
+  800b81:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b84:	eb 17                	jmp    800b9d <vprintfmt+0x1d0>
+                    putch(padc, putdat);
+  800b86:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800b8a:	83 ec 08             	sub    $0x8,%esp
+  800b8d:	ff 75 0c             	pushl  0xc(%ebp)
+  800b90:	50                   	push   %eax
+  800b91:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b94:	ff d0                	call   *%eax
+  800b96:	83 c4 10             	add    $0x10,%esp
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b99:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800b9d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ba1:	7f e3                	jg     800b86 <vprintfmt+0x1b9>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800ba3:	eb 35                	jmp    800bda <vprintfmt+0x20d>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800ba5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800ba9:	74 1c                	je     800bc7 <vprintfmt+0x1fa>
+  800bab:	83 fb 1f             	cmp    $0x1f,%ebx
+  800bae:	7e 05                	jle    800bb5 <vprintfmt+0x1e8>
+  800bb0:	83 fb 7e             	cmp    $0x7e,%ebx
+  800bb3:	7e 12                	jle    800bc7 <vprintfmt+0x1fa>
+                    putch('?', putdat);
+  800bb5:	83 ec 08             	sub    $0x8,%esp
+  800bb8:	ff 75 0c             	pushl  0xc(%ebp)
+  800bbb:	6a 3f                	push   $0x3f
+  800bbd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bc0:	ff d0                	call   *%eax
+  800bc2:	83 c4 10             	add    $0x10,%esp
+  800bc5:	eb 0f                	jmp    800bd6 <vprintfmt+0x209>
+                }
+                else {
+                    putch(ch, putdat);
+  800bc7:	83 ec 08             	sub    $0x8,%esp
+  800bca:	ff 75 0c             	pushl  0xc(%ebp)
+  800bcd:	53                   	push   %ebx
+  800bce:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bd1:	ff d0                	call   *%eax
+  800bd3:	83 c4 10             	add    $0x10,%esp
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bd6:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800bda:	89 f0                	mov    %esi,%eax
+  800bdc:	8d 70 01             	lea    0x1(%eax),%esi
+  800bdf:	0f b6 00             	movzbl (%eax),%eax
+  800be2:	0f be d8             	movsbl %al,%ebx
+  800be5:	85 db                	test   %ebx,%ebx
+  800be7:	74 26                	je     800c0f <vprintfmt+0x242>
+  800be9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800bed:	78 b6                	js     800ba5 <vprintfmt+0x1d8>
+  800bef:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  800bf3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800bf7:	79 ac                	jns    800ba5 <vprintfmt+0x1d8>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800bf9:	eb 14                	jmp    800c0f <vprintfmt+0x242>
+                putch(' ', putdat);
+  800bfb:	83 ec 08             	sub    $0x8,%esp
+  800bfe:	ff 75 0c             	pushl  0xc(%ebp)
+  800c01:	6a 20                	push   $0x20
+  800c03:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c06:	ff d0                	call   *%eax
+  800c08:	83 c4 10             	add    $0x10,%esp
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c0b:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c0f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c13:	7f e6                	jg     800bfb <vprintfmt+0x22e>
+                putch(' ', putdat);
+            }
+            break;
+  800c15:	e9 4e 01 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c1a:	83 ec 08             	sub    $0x8,%esp
+  800c1d:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c20:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c23:	50                   	push   %eax
+  800c24:	e8 39 fd ff ff       	call   800962 <getint>
+  800c29:	83 c4 10             	add    $0x10,%esp
+  800c2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c2f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c32:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c35:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c38:	85 d2                	test   %edx,%edx
+  800c3a:	79 23                	jns    800c5f <vprintfmt+0x292>
+                putch('-', putdat);
+  800c3c:	83 ec 08             	sub    $0x8,%esp
+  800c3f:	ff 75 0c             	pushl  0xc(%ebp)
+  800c42:	6a 2d                	push   $0x2d
+  800c44:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c47:	ff d0                	call   *%eax
+  800c49:	83 c4 10             	add    $0x10,%esp
+                num = -(long long)num;
+  800c4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c4f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c52:	f7 d8                	neg    %eax
+  800c54:	83 d2 00             	adc    $0x0,%edx
+  800c57:	f7 da                	neg    %edx
+  800c59:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c5c:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800c5f:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c66:	e9 9f 00 00 00       	jmp    800d0a <vprintfmt+0x33d>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800c6b:	83 ec 08             	sub    $0x8,%esp
+  800c6e:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c71:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c74:	50                   	push   %eax
+  800c75:	e8 99 fc ff ff       	call   800913 <getuint>
+  800c7a:	83 c4 10             	add    $0x10,%esp
+  800c7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c80:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800c83:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c8a:	eb 7e                	jmp    800d0a <vprintfmt+0x33d>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800c8c:	83 ec 08             	sub    $0x8,%esp
+  800c8f:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c92:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c95:	50                   	push   %eax
+  800c96:	e8 78 fc ff ff       	call   800913 <getuint>
+  800c9b:	83 c4 10             	add    $0x10,%esp
+  800c9e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ca1:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800ca4:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800cab:	eb 5d                	jmp    800d0a <vprintfmt+0x33d>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800cad:	83 ec 08             	sub    $0x8,%esp
+  800cb0:	ff 75 0c             	pushl  0xc(%ebp)
+  800cb3:	6a 30                	push   $0x30
+  800cb5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb8:	ff d0                	call   *%eax
+  800cba:	83 c4 10             	add    $0x10,%esp
+            putch('x', putdat);
+  800cbd:	83 ec 08             	sub    $0x8,%esp
+  800cc0:	ff 75 0c             	pushl  0xc(%ebp)
+  800cc3:	6a 78                	push   $0x78
+  800cc5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cc8:	ff d0                	call   *%eax
+  800cca:	83 c4 10             	add    $0x10,%esp
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800ccd:	8b 45 14             	mov    0x14(%ebp),%eax
+  800cd0:	8d 50 04             	lea    0x4(%eax),%edx
+  800cd3:	89 55 14             	mov    %edx,0x14(%ebp)
+  800cd6:	8b 00                	mov    (%eax),%eax
+  800cd8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cdb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800ce2:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800ce9:	eb 1f                	jmp    800d0a <vprintfmt+0x33d>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800ceb:	83 ec 08             	sub    $0x8,%esp
+  800cee:	ff 75 e0             	pushl  -0x20(%ebp)
+  800cf1:	8d 45 14             	lea    0x14(%ebp),%eax
+  800cf4:	50                   	push   %eax
+  800cf5:	e8 19 fc ff ff       	call   800913 <getuint>
+  800cfa:	83 c4 10             	add    $0x10,%esp
+  800cfd:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d00:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d03:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d0a:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d11:	83 ec 04             	sub    $0x4,%esp
+  800d14:	52                   	push   %edx
+  800d15:	ff 75 e8             	pushl  -0x18(%ebp)
+  800d18:	50                   	push   %eax
+  800d19:	ff 75 f4             	pushl  -0xc(%ebp)
+  800d1c:	ff 75 f0             	pushl  -0x10(%ebp)
+  800d1f:	ff 75 0c             	pushl  0xc(%ebp)
+  800d22:	ff 75 08             	pushl  0x8(%ebp)
+  800d25:	e8 f8 fa ff ff       	call   800822 <printnum>
+  800d2a:	83 c4 20             	add    $0x20,%esp
+            break;
+  800d2d:	eb 39                	jmp    800d68 <vprintfmt+0x39b>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800d2f:	83 ec 08             	sub    $0x8,%esp
+  800d32:	ff 75 0c             	pushl  0xc(%ebp)
+  800d35:	53                   	push   %ebx
+  800d36:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d39:	ff d0                	call   *%eax
+  800d3b:	83 c4 10             	add    $0x10,%esp
+            break;
+  800d3e:	eb 28                	jmp    800d68 <vprintfmt+0x39b>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800d40:	83 ec 08             	sub    $0x8,%esp
+  800d43:	ff 75 0c             	pushl  0xc(%ebp)
+  800d46:	6a 25                	push   $0x25
+  800d48:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d4b:	ff d0                	call   *%eax
+  800d4d:	83 c4 10             	add    $0x10,%esp
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800d50:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d54:	eb 04                	jmp    800d5a <vprintfmt+0x38d>
+  800d56:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d5a:	8b 45 10             	mov    0x10(%ebp),%eax
+  800d5d:	83 e8 01             	sub    $0x1,%eax
+  800d60:	0f b6 00             	movzbl (%eax),%eax
+  800d63:	3c 25                	cmp    $0x25,%al
+  800d65:	75 ef                	jne    800d56 <vprintfmt+0x389>
+                /* do nothing */;
+            break;
+  800d67:	90                   	nop
+        }
+    }
+  800d68:	e9 68 fc ff ff       	jmp    8009d5 <vprintfmt+0x8>
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+            if (ch == '\0') {
+                return;
+  800d6d:	90                   	nop
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  800d6e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  800d71:	5b                   	pop    %ebx
+  800d72:	5e                   	pop    %esi
+  800d73:	5d                   	pop    %ebp
+  800d74:	c3                   	ret    
+
+00800d75 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800d75:	55                   	push   %ebp
+  800d76:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800d78:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d7b:	8b 40 08             	mov    0x8(%eax),%eax
+  800d7e:	8d 50 01             	lea    0x1(%eax),%edx
+  800d81:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d84:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800d87:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d8a:	8b 10                	mov    (%eax),%edx
+  800d8c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d8f:	8b 40 04             	mov    0x4(%eax),%eax
+  800d92:	39 c2                	cmp    %eax,%edx
+  800d94:	73 12                	jae    800da8 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800d96:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d99:	8b 00                	mov    (%eax),%eax
+  800d9b:	8d 48 01             	lea    0x1(%eax),%ecx
+  800d9e:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800da1:	89 0a                	mov    %ecx,(%edx)
+  800da3:	8b 55 08             	mov    0x8(%ebp),%edx
+  800da6:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800da8:	90                   	nop
+  800da9:	5d                   	pop    %ebp
+  800daa:	c3                   	ret    
+
+00800dab <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800dab:	55                   	push   %ebp
+  800dac:	89 e5                	mov    %esp,%ebp
+  800dae:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800db1:	8d 45 14             	lea    0x14(%ebp),%eax
+  800db4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800db7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800dba:	50                   	push   %eax
+  800dbb:	ff 75 10             	pushl  0x10(%ebp)
+  800dbe:	ff 75 0c             	pushl  0xc(%ebp)
+  800dc1:	ff 75 08             	pushl  0x8(%ebp)
+  800dc4:	e8 0b 00 00 00       	call   800dd4 <vsnprintf>
+  800dc9:	83 c4 10             	add    $0x10,%esp
+  800dcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800dcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800dd2:	c9                   	leave  
+  800dd3:	c3                   	ret    
+
+00800dd4 <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800dd4:	55                   	push   %ebp
+  800dd5:	89 e5                	mov    %esp,%ebp
+  800dd7:	83 ec 18             	sub    $0x18,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800dda:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ddd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800de0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800de3:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800de6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de9:	01 d0                	add    %edx,%eax
+  800deb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800dee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800df5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800df9:	74 0a                	je     800e05 <vsnprintf+0x31>
+  800dfb:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800dfe:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e01:	39 c2                	cmp    %eax,%edx
+  800e03:	76 07                	jbe    800e0c <vsnprintf+0x38>
+        return -E_INVAL;
+  800e05:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e0a:	eb 20                	jmp    800e2c <vsnprintf+0x58>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e0c:	ff 75 14             	pushl  0x14(%ebp)
+  800e0f:	ff 75 10             	pushl  0x10(%ebp)
+  800e12:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800e15:	50                   	push   %eax
+  800e16:	68 75 0d 80 00       	push   $0x800d75
+  800e1b:	e8 ad fb ff ff       	call   8009cd <vprintfmt>
+  800e20:	83 c4 10             	add    $0x10,%esp
+    // null terminate the buffer
+    *b.buf = '\0';
+  800e23:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e26:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800e29:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e2c:	c9                   	leave  
+  800e2d:	c3                   	ret    
+
+00800e2e <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800e2e:	55                   	push   %ebp
+  800e2f:	89 e5                	mov    %esp,%ebp
+  800e31:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800e34:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e37:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800e3d:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800e40:	b8 20 00 00 00       	mov    $0x20,%eax
+  800e45:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800e48:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800e4b:	89 c1                	mov    %eax,%ecx
+  800e4d:	d3 ea                	shr    %cl,%edx
+  800e4f:	89 d0                	mov    %edx,%eax
+}
+  800e51:	c9                   	leave  
+  800e52:	c3                   	ret    
+
+00800e53 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800e53:	55                   	push   %ebp
+  800e54:	89 e5                	mov    %esp,%ebp
+  800e56:	57                   	push   %edi
+  800e57:	56                   	push   %esi
+  800e58:	53                   	push   %ebx
+  800e59:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800e5c:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e61:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800e67:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800e6d:	6b f0 05             	imul   $0x5,%eax,%esi
+  800e70:	01 fe                	add    %edi,%esi
+  800e72:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800e77:	f7 e7                	mul    %edi
+  800e79:	01 d6                	add    %edx,%esi
+  800e7b:	89 f2                	mov    %esi,%edx
+  800e7d:	83 c0 0b             	add    $0xb,%eax
+  800e80:	83 d2 00             	adc    $0x0,%edx
+  800e83:	89 c7                	mov    %eax,%edi
+  800e85:	83 e7 ff             	and    $0xffffffff,%edi
+  800e88:	89 f9                	mov    %edi,%ecx
+  800e8a:	0f b7 da             	movzwl %dx,%ebx
+  800e8d:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800e93:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800e99:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e9e:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ea4:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ea8:	c1 ea 0c             	shr    $0xc,%edx
+  800eab:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800eae:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800eb1:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800eb8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ebb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ebe:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ec1:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800ec4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec7:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800eca:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ece:	74 1c                	je     800eec <rand+0x99>
+  800ed0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ed3:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ed8:	f7 75 dc             	divl   -0x24(%ebp)
+  800edb:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800ede:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ee1:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ee6:	f7 75 dc             	divl   -0x24(%ebp)
+  800ee9:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800eec:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800eef:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800ef2:	f7 75 dc             	divl   -0x24(%ebp)
+  800ef5:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ef8:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800efb:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800efe:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800f01:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f04:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f07:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800f0a:	83 c4 24             	add    $0x24,%esp
+  800f0d:	5b                   	pop    %ebx
+  800f0e:	5e                   	pop    %esi
+  800f0f:	5f                   	pop    %edi
+  800f10:	5d                   	pop    %ebp
+  800f11:	c3                   	ret    
+
+00800f12 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800f12:	55                   	push   %ebp
+  800f13:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800f15:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f18:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f1d:	a3 00 20 80 00       	mov    %eax,0x802000
+  800f22:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800f28:	90                   	nop
+  800f29:	5d                   	pop    %ebp
+  800f2a:	c3                   	ret    
+
+00800f2b <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  800f2b:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  800f2f:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f32:	ff 71 fc             	pushl  -0x4(%ecx)
+  800f35:	55                   	push   %ebp
+  800f36:	89 e5                	mov    %esp,%ebp
+  800f38:	51                   	push   %ecx
+  800f39:	83 ec 04             	sub    $0x4,%esp
+    cprintf("Hello world!!.\n");
+  800f3c:	83 ec 0c             	sub    $0xc,%esp
+  800f3f:	68 60 12 80 00       	push   $0x801260
+  800f44:	e8 90 f3 ff ff       	call   8002d9 <cprintf>
+  800f49:	83 c4 10             	add    $0x10,%esp
+    cprintf("I am process %d.\n", getpid());
+  800f4c:	e8 ed f2 ff ff       	call   80023e <getpid>
+  800f51:	83 ec 08             	sub    $0x8,%esp
+  800f54:	50                   	push   %eax
+  800f55:	68 70 12 80 00       	push   $0x801270
+  800f5a:	e8 7a f3 ff ff       	call   8002d9 <cprintf>
+  800f5f:	83 c4 10             	add    $0x10,%esp
+    cprintf("hello pass.\n");
+  800f62:	83 ec 0c             	sub    $0xc,%esp
+  800f65:	68 82 12 80 00       	push   $0x801282
+  800f6a:	e8 6a f3 ff ff       	call   8002d9 <cprintf>
+  800f6f:	83 c4 10             	add    $0x10,%esp
+    return 0;
+  800f72:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800f77:	8b 4d fc             	mov    -0x4(%ebp),%ecx
+  800f7a:	c9                   	leave  
+  800f7b:	8d 61 fc             	lea    -0x4(%ecx),%esp
+  800f7e:	c3                   	ret    
diff -r -u -P lab6_original/obj/user/hello.d lab6/obj/user/hello.d
--- lab6_original/obj/user/hello.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/hello.d	2016-04-29 16:22:06.860482355 +0800
@@ -0,0 +1,2 @@
+obj/user/hello.o obj/user/hello.d: user/hello.c libs/stdio.h libs/defs.h \
+ libs/stdarg.h user/libs/ulib.h
Binary files lab6_original/obj/user/hello.o and lab6/obj/user/hello.o differ
diff -r -u -P lab6_original/obj/user/hello.sym lab6/obj/user/hello.sym
--- lab6_original/obj/user/hello.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/hello.sym	2016-04-29 16:22:07.728737642 +0800
@@ -0,0 +1,76 @@
+00800020 .text
+00800f80 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202cb1 .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b5 syscall
+00000000 ulib.c
+00000000 stdio.c
+0080028c cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+00801080 error_string
+00800822 printnum
+00800913 getuint
+00800962 getint
+00800d75 sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 hello.c
+008003be strcpy
+0080021a yield
+00800201 waitpid
+00800141 sys_yield
+008006d7 memmove
+00800dab snprintf
+008009cd vprintfmt
+0080011d sys_fork
+008002d9 cprintf
+0080023e getpid
+0080077a memcpy
+00800266 lab6_set_priority
+00800dd4 vsnprintf
+0080034d umain
+00202cb0 __STAB_END__
+00800150 sys_kill
+00202cb1 __STABSTR_BEGIN__
+00800020 __panic
+0080053a strtol
+0080038e strnlen
+0080024b print_pgdir
+00800228 kill
+0080050b strfind
+008001ea wait
+0080027d _start
+00800e53 rand
+00800482 strncmp
+00800171 sys_putc
+008003fe strncpy
+008007ca memcmp
+008001dd fork
+00800697 memset
+00800f2b main
+00800f12 srand
+00800e2e hash32
+008009a9 printfmt
+00203a8f __STABSTR_END__
+00800438 strcmp
+00800259 gettime_msec
+00800192 sys_gettime
+008002b0 vcprintf
+0080006e __warn
+008002ff cputs
+008001a1 sys_lab6_set_priority
+008001b7 exit
+0080012c sys_wait
+0080010b sys_exit
+00200010 __STAB_BEGIN__
+00800366 strlen
+00800183 sys_pgdir
+008004d8 strchr
+00800162 sys_getpid
diff -r -u -P lab6_original/obj/user/libs/initcode.d lab6/obj/user/libs/initcode.d
--- lab6_original/obj/user/libs/initcode.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/libs/initcode.d	2016-04-29 16:22:06.756925271 +0800
@@ -0,0 +1 @@
+obj/user/libs/initcode.o obj/user/libs/initcode.d: user/libs/initcode.S
Binary files lab6_original/obj/user/libs/initcode.o and lab6/obj/user/libs/initcode.o differ
diff -r -u -P lab6_original/obj/user/libs/panic.d lab6/obj/user/libs/panic.d
--- lab6_original/obj/user/libs/panic.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/libs/panic.d	2016-04-29 16:22:06.737010447 +0800
@@ -0,0 +1,2 @@
+obj/user/libs/panic.o obj/user/libs/panic.d: user/libs/panic.c \
+ libs/defs.h libs/stdarg.h libs/stdio.h user/libs/ulib.h libs/error.h
Binary files lab6_original/obj/user/libs/panic.o and lab6/obj/user/libs/panic.o differ
diff -r -u -P lab6_original/obj/user/libs/stdio.d lab6/obj/user/libs/stdio.d
--- lab6_original/obj/user/libs/stdio.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/libs/stdio.d	2016-04-29 16:22:06.740993412 +0800
@@ -0,0 +1,2 @@
+obj/user/libs/stdio.o obj/user/libs/stdio.d: user/libs/stdio.c \
+ libs/defs.h libs/stdio.h libs/stdarg.h user/libs/syscall.h
Binary files lab6_original/obj/user/libs/stdio.o and lab6/obj/user/libs/stdio.o differ
diff -r -u -P lab6_original/obj/user/libs/syscall.d lab6/obj/user/libs/syscall.d
--- lab6_original/obj/user/libs/syscall.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/libs/syscall.d	2016-04-29 16:22:06.733027482 +0800
@@ -0,0 +1,2 @@
+obj/user/libs/syscall.o obj/user/libs/syscall.d: user/libs/syscall.c \
+ libs/defs.h libs/unistd.h libs/stdarg.h user/libs/syscall.h
Binary files lab6_original/obj/user/libs/syscall.o and lab6/obj/user/libs/syscall.o differ
diff -r -u -P lab6_original/obj/user/libs/ulib.d lab6/obj/user/libs/ulib.d
--- lab6_original/obj/user/libs/ulib.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/libs/ulib.d	2016-04-29 16:22:06.740993412 +0800
@@ -0,0 +1,2 @@
+obj/user/libs/ulib.o obj/user/libs/ulib.d: user/libs/ulib.c libs/defs.h \
+ user/libs/syscall.h libs/stdio.h libs/stdarg.h user/libs/ulib.h
Binary files lab6_original/obj/user/libs/ulib.o and lab6/obj/user/libs/ulib.o differ
diff -r -u -P lab6_original/obj/user/libs/umain.d lab6/obj/user/libs/umain.d
--- lab6_original/obj/user/libs/umain.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/libs/umain.d	2016-04-29 16:22:06.733027482 +0800
@@ -0,0 +1,2 @@
+obj/user/libs/umain.o obj/user/libs/umain.d: user/libs/umain.c \
+ user/libs/ulib.h libs/defs.h
Binary files lab6_original/obj/user/libs/umain.o and lab6/obj/user/libs/umain.o differ
diff -r -u -P lab6_original/obj/user/matrix.asm lab6/obj/user/matrix.asm
--- lab6_original/obj/user/matrix.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/matrix.asm	2016-04-29 16:22:07.724754848 +0800
@@ -0,0 +1,3029 @@
+
+obj/__user_matrix.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 18             	sub    $0x18,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	83 ec 04             	sub    $0x4,%esp
+  80002f:	ff 75 0c             	pushl  0xc(%ebp)
+  800032:	ff 75 08             	pushl  0x8(%ebp)
+  800035:	68 20 13 80 00       	push   $0x801320
+  80003a:	e8 9a 02 00 00       	call   8002d9 <cprintf>
+  80003f:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800042:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800045:	83 ec 08             	sub    $0x8,%esp
+  800048:	50                   	push   %eax
+  800049:	ff 75 10             	pushl  0x10(%ebp)
+  80004c:	e8 5f 02 00 00       	call   8002b0 <vcprintf>
+  800051:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  800054:	83 ec 0c             	sub    $0xc,%esp
+  800057:	68 3a 13 80 00       	push   $0x80133a
+  80005c:	e8 78 02 00 00       	call   8002d9 <cprintf>
+  800061:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	83 ec 0c             	sub    $0xc,%esp
+  800067:	6a f6                	push   $0xfffffff6
+  800069:	e8 49 01 00 00       	call   8001b7 <exit>
+
+0080006e <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80006e:	55                   	push   %ebp
+  80006f:	89 e5                	mov    %esp,%ebp
+  800071:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800074:	8d 45 14             	lea    0x14(%ebp),%eax
+  800077:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007a:	83 ec 04             	sub    $0x4,%esp
+  80007d:	ff 75 0c             	pushl  0xc(%ebp)
+  800080:	ff 75 08             	pushl  0x8(%ebp)
+  800083:	68 3c 13 80 00       	push   $0x80133c
+  800088:	e8 4c 02 00 00       	call   8002d9 <cprintf>
+  80008d:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800090:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800093:	83 ec 08             	sub    $0x8,%esp
+  800096:	50                   	push   %eax
+  800097:	ff 75 10             	pushl  0x10(%ebp)
+  80009a:	e8 11 02 00 00       	call   8002b0 <vcprintf>
+  80009f:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  8000a2:	83 ec 0c             	sub    $0xc,%esp
+  8000a5:	68 3a 13 80 00       	push   $0x80133a
+  8000aa:	e8 2a 02 00 00       	call   8002d9 <cprintf>
+  8000af:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8000b2:	90                   	nop
+  8000b3:	c9                   	leave  
+  8000b4:	c3                   	ret    
+
+008000b5 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b5:	55                   	push   %ebp
+  8000b6:	89 e5                	mov    %esp,%ebp
+  8000b8:	57                   	push   %edi
+  8000b9:	56                   	push   %esi
+  8000ba:	53                   	push   %ebx
+  8000bb:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000be:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cb:	eb 16                	jmp    8000e3 <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8000cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d0:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d3:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d6:	8b 10                	mov    (%eax),%edx
+  8000d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000db:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000df:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8000e3:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e7:	7e e4                	jle    8000cd <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000e9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ec:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000ef:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f2:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f5:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8000f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fb:	cd 80                	int    $0x80
+  8000fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  800100:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800103:	83 c4 20             	add    $0x20,%esp
+  800106:	5b                   	pop    %ebx
+  800107:	5e                   	pop    %esi
+  800108:	5f                   	pop    %edi
+  800109:	5d                   	pop    %ebp
+  80010a:	c3                   	ret    
+
+0080010b <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010b:	55                   	push   %ebp
+  80010c:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_exit, error_code);
+  80010e:	ff 75 08             	pushl  0x8(%ebp)
+  800111:	6a 01                	push   $0x1
+  800113:	e8 9d ff ff ff       	call   8000b5 <syscall>
+  800118:	83 c4 08             	add    $0x8,%esp
+}
+  80011b:	c9                   	leave  
+  80011c:	c3                   	ret    
+
+0080011d <sys_fork>:
+
+int
+sys_fork(void) {
+  80011d:	55                   	push   %ebp
+  80011e:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_fork);
+  800120:	6a 02                	push   $0x2
+  800122:	e8 8e ff ff ff       	call   8000b5 <syscall>
+  800127:	83 c4 04             	add    $0x4,%esp
+}
+  80012a:	c9                   	leave  
+  80012b:	c3                   	ret    
+
+0080012c <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80012c:	55                   	push   %ebp
+  80012d:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_wait, pid, store);
+  80012f:	ff 75 0c             	pushl  0xc(%ebp)
+  800132:	ff 75 08             	pushl  0x8(%ebp)
+  800135:	6a 03                	push   $0x3
+  800137:	e8 79 ff ff ff       	call   8000b5 <syscall>
+  80013c:	83 c4 0c             	add    $0xc,%esp
+}
+  80013f:	c9                   	leave  
+  800140:	c3                   	ret    
+
+00800141 <sys_yield>:
+
+int
+sys_yield(void) {
+  800141:	55                   	push   %ebp
+  800142:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_yield);
+  800144:	6a 0a                	push   $0xa
+  800146:	e8 6a ff ff ff       	call   8000b5 <syscall>
+  80014b:	83 c4 04             	add    $0x4,%esp
+}
+  80014e:	c9                   	leave  
+  80014f:	c3                   	ret    
+
+00800150 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800150:	55                   	push   %ebp
+  800151:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_kill, pid);
+  800153:	ff 75 08             	pushl  0x8(%ebp)
+  800156:	6a 0c                	push   $0xc
+  800158:	e8 58 ff ff ff       	call   8000b5 <syscall>
+  80015d:	83 c4 08             	add    $0x8,%esp
+}
+  800160:	c9                   	leave  
+  800161:	c3                   	ret    
+
+00800162 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800162:	55                   	push   %ebp
+  800163:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_getpid);
+  800165:	6a 12                	push   $0x12
+  800167:	e8 49 ff ff ff       	call   8000b5 <syscall>
+  80016c:	83 c4 04             	add    $0x4,%esp
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_putc, c);
+  800174:	ff 75 08             	pushl  0x8(%ebp)
+  800177:	6a 1e                	push   $0x1e
+  800179:	e8 37 ff ff ff       	call   8000b5 <syscall>
+  80017e:	83 c4 08             	add    $0x8,%esp
+}
+  800181:	c9                   	leave  
+  800182:	c3                   	ret    
+
+00800183 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800183:	55                   	push   %ebp
+  800184:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_pgdir);
+  800186:	6a 1f                	push   $0x1f
+  800188:	e8 28 ff ff ff       	call   8000b5 <syscall>
+  80018d:	83 c4 04             	add    $0x4,%esp
+}
+  800190:	c9                   	leave  
+  800191:	c3                   	ret    
+
+00800192 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  800192:	55                   	push   %ebp
+  800193:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_gettime);
+  800195:	6a 11                	push   $0x11
+  800197:	e8 19 ff ff ff       	call   8000b5 <syscall>
+  80019c:	83 c4 04             	add    $0x4,%esp
+}
+  80019f:	c9                   	leave  
+  8001a0:	c3                   	ret    
+
+008001a1 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001a1:	55                   	push   %ebp
+  8001a2:	89 e5                	mov    %esp,%ebp
+    syscall(SYS_lab6_set_priority, priority);
+  8001a4:	ff 75 08             	pushl  0x8(%ebp)
+  8001a7:	68 ff 00 00 00       	push   $0xff
+  8001ac:	e8 04 ff ff ff       	call   8000b5 <syscall>
+  8001b1:	83 c4 08             	add    $0x8,%esp
+}
+  8001b4:	90                   	nop
+  8001b5:	c9                   	leave  
+  8001b6:	c3                   	ret    
+
+008001b7 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001b7:	55                   	push   %ebp
+  8001b8:	89 e5                	mov    %esp,%ebp
+  8001ba:	83 ec 08             	sub    $0x8,%esp
+    sys_exit(error_code);
+  8001bd:	83 ec 0c             	sub    $0xc,%esp
+  8001c0:	ff 75 08             	pushl  0x8(%ebp)
+  8001c3:	e8 43 ff ff ff       	call   80010b <sys_exit>
+  8001c8:	83 c4 10             	add    $0x10,%esp
+    cprintf("BUG: exit failed.\n");
+  8001cb:	83 ec 0c             	sub    $0xc,%esp
+  8001ce:	68 58 13 80 00       	push   $0x801358
+  8001d3:	e8 01 01 00 00       	call   8002d9 <cprintf>
+  8001d8:	83 c4 10             	add    $0x10,%esp
+    while (1);
+  8001db:	eb fe                	jmp    8001db <exit+0x24>
+
+008001dd <fork>:
+}
+
+int
+fork(void) {
+  8001dd:	55                   	push   %ebp
+  8001de:	89 e5                	mov    %esp,%ebp
+  8001e0:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8001e3:	e8 35 ff ff ff       	call   80011d <sys_fork>
+}
+  8001e8:	c9                   	leave  
+  8001e9:	c3                   	ret    
+
+008001ea <wait>:
+
+int
+wait(void) {
+  8001ea:	55                   	push   %ebp
+  8001eb:	89 e5                	mov    %esp,%ebp
+  8001ed:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(0, NULL);
+  8001f0:	83 ec 08             	sub    $0x8,%esp
+  8001f3:	6a 00                	push   $0x0
+  8001f5:	6a 00                	push   $0x0
+  8001f7:	e8 30 ff ff ff       	call   80012c <sys_wait>
+  8001fc:	83 c4 10             	add    $0x10,%esp
+}
+  8001ff:	c9                   	leave  
+  800200:	c3                   	ret    
+
+00800201 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800201:	55                   	push   %ebp
+  800202:	89 e5                	mov    %esp,%ebp
+  800204:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(pid, store);
+  800207:	83 ec 08             	sub    $0x8,%esp
+  80020a:	ff 75 0c             	pushl  0xc(%ebp)
+  80020d:	ff 75 08             	pushl  0x8(%ebp)
+  800210:	e8 17 ff ff ff       	call   80012c <sys_wait>
+  800215:	83 c4 10             	add    $0x10,%esp
+}
+  800218:	c9                   	leave  
+  800219:	c3                   	ret    
+
+0080021a <yield>:
+
+void
+yield(void) {
+  80021a:	55                   	push   %ebp
+  80021b:	89 e5                	mov    %esp,%ebp
+  80021d:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800220:	e8 1c ff ff ff       	call   800141 <sys_yield>
+}
+  800225:	90                   	nop
+  800226:	c9                   	leave  
+  800227:	c3                   	ret    
+
+00800228 <kill>:
+
+int
+kill(int pid) {
+  800228:	55                   	push   %ebp
+  800229:	89 e5                	mov    %esp,%ebp
+  80022b:	83 ec 08             	sub    $0x8,%esp
+    return sys_kill(pid);
+  80022e:	83 ec 0c             	sub    $0xc,%esp
+  800231:	ff 75 08             	pushl  0x8(%ebp)
+  800234:	e8 17 ff ff ff       	call   800150 <sys_kill>
+  800239:	83 c4 10             	add    $0x10,%esp
+}
+  80023c:	c9                   	leave  
+  80023d:	c3                   	ret    
+
+0080023e <getpid>:
+
+int
+getpid(void) {
+  80023e:	55                   	push   %ebp
+  80023f:	89 e5                	mov    %esp,%ebp
+  800241:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800244:	e8 19 ff ff ff       	call   800162 <sys_getpid>
+}
+  800249:	c9                   	leave  
+  80024a:	c3                   	ret    
+
+0080024b <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80024b:	55                   	push   %ebp
+  80024c:	89 e5                	mov    %esp,%ebp
+  80024e:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800251:	e8 2d ff ff ff       	call   800183 <sys_pgdir>
+}
+  800256:	90                   	nop
+  800257:	c9                   	leave  
+  800258:	c3                   	ret    
+
+00800259 <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  800259:	55                   	push   %ebp
+  80025a:	89 e5                	mov    %esp,%ebp
+  80025c:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  80025f:	e8 2e ff ff ff       	call   800192 <sys_gettime>
+}
+  800264:	c9                   	leave  
+  800265:	c3                   	ret    
+
+00800266 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800266:	55                   	push   %ebp
+  800267:	89 e5                	mov    %esp,%ebp
+  800269:	83 ec 08             	sub    $0x8,%esp
+    sys_lab6_set_priority(priority);
+  80026c:	83 ec 0c             	sub    $0xc,%esp
+  80026f:	ff 75 08             	pushl  0x8(%ebp)
+  800272:	e8 2a ff ff ff       	call   8001a1 <sys_lab6_set_priority>
+  800277:	83 c4 10             	add    $0x10,%esp
+}
+  80027a:	90                   	nop
+  80027b:	c9                   	leave  
+  80027c:	c3                   	ret    
+
+0080027d <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  80027d:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800282:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800285:	e8 c3 00 00 00       	call   80034d <umain>
+1:  jmp 1b
+  80028a:	eb fe                	jmp    80028a <_start+0xd>
+
+0080028c <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  80028c:	55                   	push   %ebp
+  80028d:	89 e5                	mov    %esp,%ebp
+  80028f:	83 ec 08             	sub    $0x8,%esp
+    sys_putc(c);
+  800292:	83 ec 0c             	sub    $0xc,%esp
+  800295:	ff 75 08             	pushl  0x8(%ebp)
+  800298:	e8 d4 fe ff ff       	call   800171 <sys_putc>
+  80029d:	83 c4 10             	add    $0x10,%esp
+    (*cnt) ++;
+  8002a0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002a3:	8b 00                	mov    (%eax),%eax
+  8002a5:	8d 50 01             	lea    0x1(%eax),%edx
+  8002a8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002ab:	89 10                	mov    %edx,(%eax)
+}
+  8002ad:	90                   	nop
+  8002ae:	c9                   	leave  
+  8002af:	c3                   	ret    
+
+008002b0 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002b0:	55                   	push   %ebp
+  8002b1:	89 e5                	mov    %esp,%ebp
+  8002b3:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  8002b6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002bd:	ff 75 0c             	pushl  0xc(%ebp)
+  8002c0:	ff 75 08             	pushl  0x8(%ebp)
+  8002c3:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  8002c6:	50                   	push   %eax
+  8002c7:	68 8c 02 80 00       	push   $0x80028c
+  8002cc:	e8 fc 06 00 00       	call   8009cd <vprintfmt>
+  8002d1:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  8002d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002d7:	c9                   	leave  
+  8002d8:	c3                   	ret    
+
+008002d9 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  8002d9:	55                   	push   %ebp
+  8002da:	89 e5                	mov    %esp,%ebp
+  8002dc:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8002df:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8002e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  8002e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8002e8:	83 ec 08             	sub    $0x8,%esp
+  8002eb:	50                   	push   %eax
+  8002ec:	ff 75 08             	pushl  0x8(%ebp)
+  8002ef:	e8 bc ff ff ff       	call   8002b0 <vcprintf>
+  8002f4:	83 c4 10             	add    $0x10,%esp
+  8002f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  8002fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002fd:	c9                   	leave  
+  8002fe:	c3                   	ret    
+
+008002ff <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  8002ff:	55                   	push   %ebp
+  800300:	89 e5                	mov    %esp,%ebp
+  800302:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  800305:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80030c:	eb 14                	jmp    800322 <cputs+0x23>
+        cputch(c, &cnt);
+  80030e:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800312:	83 ec 08             	sub    $0x8,%esp
+  800315:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800318:	52                   	push   %edx
+  800319:	50                   	push   %eax
+  80031a:	e8 6d ff ff ff       	call   80028c <cputch>
+  80031f:	83 c4 10             	add    $0x10,%esp
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800322:	8b 45 08             	mov    0x8(%ebp),%eax
+  800325:	8d 50 01             	lea    0x1(%eax),%edx
+  800328:	89 55 08             	mov    %edx,0x8(%ebp)
+  80032b:	0f b6 00             	movzbl (%eax),%eax
+  80032e:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800331:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800335:	75 d7                	jne    80030e <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800337:	83 ec 08             	sub    $0x8,%esp
+  80033a:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  80033d:	50                   	push   %eax
+  80033e:	6a 0a                	push   $0xa
+  800340:	e8 47 ff ff ff       	call   80028c <cputch>
+  800345:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  800348:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80034b:	c9                   	leave  
+  80034c:	c3                   	ret    
+
+0080034d <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  80034d:	55                   	push   %ebp
+  80034e:	89 e5                	mov    %esp,%ebp
+  800350:	83 ec 18             	sub    $0x18,%esp
+    int ret = main();
+  800353:	e8 07 0e 00 00       	call   80115f <main>
+  800358:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  80035b:	83 ec 0c             	sub    $0xc,%esp
+  80035e:	ff 75 f4             	pushl  -0xc(%ebp)
+  800361:	e8 51 fe ff ff       	call   8001b7 <exit>
+
+00800366 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800366:	55                   	push   %ebp
+  800367:	89 e5                	mov    %esp,%ebp
+  800369:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  80036c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800373:	eb 04                	jmp    800379 <strlen+0x13>
+        cnt ++;
+  800375:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800379:	8b 45 08             	mov    0x8(%ebp),%eax
+  80037c:	8d 50 01             	lea    0x1(%eax),%edx
+  80037f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800382:	0f b6 00             	movzbl (%eax),%eax
+  800385:	84 c0                	test   %al,%al
+  800387:	75 ec                	jne    800375 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800389:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  80038c:	c9                   	leave  
+  80038d:	c3                   	ret    
+
+0080038e <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  80038e:	55                   	push   %ebp
+  80038f:	89 e5                	mov    %esp,%ebp
+  800391:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800394:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  80039b:	eb 04                	jmp    8003a1 <strnlen+0x13>
+        cnt ++;
+  80039d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  8003a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003a4:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003a7:	73 10                	jae    8003b9 <strnlen+0x2b>
+  8003a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003ac:	8d 50 01             	lea    0x1(%eax),%edx
+  8003af:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003b2:	0f b6 00             	movzbl (%eax),%eax
+  8003b5:	84 c0                	test   %al,%al
+  8003b7:	75 e4                	jne    80039d <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003b9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003bc:	c9                   	leave  
+  8003bd:	c3                   	ret    
+
+008003be <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  8003be:	55                   	push   %ebp
+  8003bf:	89 e5                	mov    %esp,%ebp
+  8003c1:	57                   	push   %edi
+  8003c2:	56                   	push   %esi
+  8003c3:	83 ec 20             	sub    $0x20,%esp
+  8003c6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003cc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8003cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  8003d2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003d8:	89 d1                	mov    %edx,%ecx
+  8003da:	89 c2                	mov    %eax,%edx
+  8003dc:	89 ce                	mov    %ecx,%esi
+  8003de:	89 d7                	mov    %edx,%edi
+  8003e0:	ac                   	lods   %ds:(%esi),%al
+  8003e1:	aa                   	stos   %al,%es:(%edi)
+  8003e2:	84 c0                	test   %al,%al
+  8003e4:	75 fa                	jne    8003e0 <strcpy+0x22>
+  8003e6:	89 fa                	mov    %edi,%edx
+  8003e8:	89 f1                	mov    %esi,%ecx
+  8003ea:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8003ed:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8003f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  8003f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  8003f6:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  8003f7:	83 c4 20             	add    $0x20,%esp
+  8003fa:	5e                   	pop    %esi
+  8003fb:	5f                   	pop    %edi
+  8003fc:	5d                   	pop    %ebp
+  8003fd:	c3                   	ret    
+
+008003fe <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  8003fe:	55                   	push   %ebp
+  8003ff:	89 e5                	mov    %esp,%ebp
+  800401:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800404:	8b 45 08             	mov    0x8(%ebp),%eax
+  800407:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  80040a:	eb 21                	jmp    80042d <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  80040c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80040f:	0f b6 10             	movzbl (%eax),%edx
+  800412:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800415:	88 10                	mov    %dl,(%eax)
+  800417:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80041a:	0f b6 00             	movzbl (%eax),%eax
+  80041d:	84 c0                	test   %al,%al
+  80041f:	74 04                	je     800425 <strncpy+0x27>
+            src ++;
+  800421:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800425:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800429:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  80042d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800431:	75 d9                	jne    80040c <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800433:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800436:	c9                   	leave  
+  800437:	c3                   	ret    
+
+00800438 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800438:	55                   	push   %ebp
+  800439:	89 e5                	mov    %esp,%ebp
+  80043b:	57                   	push   %edi
+  80043c:	56                   	push   %esi
+  80043d:	83 ec 20             	sub    $0x20,%esp
+  800440:	8b 45 08             	mov    0x8(%ebp),%eax
+  800443:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800446:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800449:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  80044c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80044f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800452:	89 d1                	mov    %edx,%ecx
+  800454:	89 c2                	mov    %eax,%edx
+  800456:	89 ce                	mov    %ecx,%esi
+  800458:	89 d7                	mov    %edx,%edi
+  80045a:	ac                   	lods   %ds:(%esi),%al
+  80045b:	ae                   	scas   %es:(%edi),%al
+  80045c:	75 08                	jne    800466 <strcmp+0x2e>
+  80045e:	84 c0                	test   %al,%al
+  800460:	75 f8                	jne    80045a <strcmp+0x22>
+  800462:	31 c0                	xor    %eax,%eax
+  800464:	eb 04                	jmp    80046a <strcmp+0x32>
+  800466:	19 c0                	sbb    %eax,%eax
+  800468:	0c 01                	or     $0x1,%al
+  80046a:	89 fa                	mov    %edi,%edx
+  80046c:	89 f1                	mov    %esi,%ecx
+  80046e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800471:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800474:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800477:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  80047a:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  80047b:	83 c4 20             	add    $0x20,%esp
+  80047e:	5e                   	pop    %esi
+  80047f:	5f                   	pop    %edi
+  800480:	5d                   	pop    %ebp
+  800481:	c3                   	ret    
+
+00800482 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800482:	55                   	push   %ebp
+  800483:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800485:	eb 0c                	jmp    800493 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800487:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  80048b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  80048f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800493:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800497:	74 1a                	je     8004b3 <strncmp+0x31>
+  800499:	8b 45 08             	mov    0x8(%ebp),%eax
+  80049c:	0f b6 00             	movzbl (%eax),%eax
+  80049f:	84 c0                	test   %al,%al
+  8004a1:	74 10                	je     8004b3 <strncmp+0x31>
+  8004a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004a6:	0f b6 10             	movzbl (%eax),%edx
+  8004a9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ac:	0f b6 00             	movzbl (%eax),%eax
+  8004af:	38 c2                	cmp    %al,%dl
+  8004b1:	74 d4                	je     800487 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004b3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004b7:	74 18                	je     8004d1 <strncmp+0x4f>
+  8004b9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004bc:	0f b6 00             	movzbl (%eax),%eax
+  8004bf:	0f b6 d0             	movzbl %al,%edx
+  8004c2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004c5:	0f b6 00             	movzbl (%eax),%eax
+  8004c8:	0f b6 c0             	movzbl %al,%eax
+  8004cb:	29 c2                	sub    %eax,%edx
+  8004cd:	89 d0                	mov    %edx,%eax
+  8004cf:	eb 05                	jmp    8004d6 <strncmp+0x54>
+  8004d1:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8004d6:	5d                   	pop    %ebp
+  8004d7:	c3                   	ret    
+
+008004d8 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  8004d8:	55                   	push   %ebp
+  8004d9:	89 e5                	mov    %esp,%ebp
+  8004db:	83 ec 04             	sub    $0x4,%esp
+  8004de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004e1:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  8004e4:	eb 14                	jmp    8004fa <strchr+0x22>
+        if (*s == c) {
+  8004e6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e9:	0f b6 00             	movzbl (%eax),%eax
+  8004ec:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  8004ef:	75 05                	jne    8004f6 <strchr+0x1e>
+            return (char *)s;
+  8004f1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004f4:	eb 13                	jmp    800509 <strchr+0x31>
+        }
+        s ++;
+  8004f6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  8004fa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fd:	0f b6 00             	movzbl (%eax),%eax
+  800500:	84 c0                	test   %al,%al
+  800502:	75 e2                	jne    8004e6 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800504:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800509:	c9                   	leave  
+  80050a:	c3                   	ret    
+
+0080050b <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  80050b:	55                   	push   %ebp
+  80050c:	89 e5                	mov    %esp,%ebp
+  80050e:	83 ec 04             	sub    $0x4,%esp
+  800511:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800514:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800517:	eb 0f                	jmp    800528 <strfind+0x1d>
+        if (*s == c) {
+  800519:	8b 45 08             	mov    0x8(%ebp),%eax
+  80051c:	0f b6 00             	movzbl (%eax),%eax
+  80051f:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800522:	74 10                	je     800534 <strfind+0x29>
+            break;
+        }
+        s ++;
+  800524:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800528:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052b:	0f b6 00             	movzbl (%eax),%eax
+  80052e:	84 c0                	test   %al,%al
+  800530:	75 e7                	jne    800519 <strfind+0xe>
+  800532:	eb 01                	jmp    800535 <strfind+0x2a>
+        if (*s == c) {
+            break;
+  800534:	90                   	nop
+        }
+        s ++;
+    }
+    return (char *)s;
+  800535:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800538:	c9                   	leave  
+  800539:	c3                   	ret    
+
+0080053a <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  80053a:	55                   	push   %ebp
+  80053b:	89 e5                	mov    %esp,%ebp
+  80053d:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800540:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800547:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80054e:	eb 04                	jmp    800554 <strtol+0x1a>
+        s ++;
+  800550:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800554:	8b 45 08             	mov    0x8(%ebp),%eax
+  800557:	0f b6 00             	movzbl (%eax),%eax
+  80055a:	3c 20                	cmp    $0x20,%al
+  80055c:	74 f2                	je     800550 <strtol+0x16>
+  80055e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800561:	0f b6 00             	movzbl (%eax),%eax
+  800564:	3c 09                	cmp    $0x9,%al
+  800566:	74 e8                	je     800550 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800568:	8b 45 08             	mov    0x8(%ebp),%eax
+  80056b:	0f b6 00             	movzbl (%eax),%eax
+  80056e:	3c 2b                	cmp    $0x2b,%al
+  800570:	75 06                	jne    800578 <strtol+0x3e>
+        s ++;
+  800572:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800576:	eb 15                	jmp    80058d <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800578:	8b 45 08             	mov    0x8(%ebp),%eax
+  80057b:	0f b6 00             	movzbl (%eax),%eax
+  80057e:	3c 2d                	cmp    $0x2d,%al
+  800580:	75 0b                	jne    80058d <strtol+0x53>
+        s ++, neg = 1;
+  800582:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800586:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  80058d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800591:	74 06                	je     800599 <strtol+0x5f>
+  800593:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800597:	75 24                	jne    8005bd <strtol+0x83>
+  800599:	8b 45 08             	mov    0x8(%ebp),%eax
+  80059c:	0f b6 00             	movzbl (%eax),%eax
+  80059f:	3c 30                	cmp    $0x30,%al
+  8005a1:	75 1a                	jne    8005bd <strtol+0x83>
+  8005a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a6:	83 c0 01             	add    $0x1,%eax
+  8005a9:	0f b6 00             	movzbl (%eax),%eax
+  8005ac:	3c 78                	cmp    $0x78,%al
+  8005ae:	75 0d                	jne    8005bd <strtol+0x83>
+        s += 2, base = 16;
+  8005b0:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005b4:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005bb:	eb 2a                	jmp    8005e7 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005bd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005c1:	75 17                	jne    8005da <strtol+0xa0>
+  8005c3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005c6:	0f b6 00             	movzbl (%eax),%eax
+  8005c9:	3c 30                	cmp    $0x30,%al
+  8005cb:	75 0d                	jne    8005da <strtol+0xa0>
+        s ++, base = 8;
+  8005cd:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005d1:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  8005d8:	eb 0d                	jmp    8005e7 <strtol+0xad>
+    }
+    else if (base == 0) {
+  8005da:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005de:	75 07                	jne    8005e7 <strtol+0xad>
+        base = 10;
+  8005e0:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  8005e7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ea:	0f b6 00             	movzbl (%eax),%eax
+  8005ed:	3c 2f                	cmp    $0x2f,%al
+  8005ef:	7e 1b                	jle    80060c <strtol+0xd2>
+  8005f1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005f4:	0f b6 00             	movzbl (%eax),%eax
+  8005f7:	3c 39                	cmp    $0x39,%al
+  8005f9:	7f 11                	jg     80060c <strtol+0xd2>
+            dig = *s - '0';
+  8005fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005fe:	0f b6 00             	movzbl (%eax),%eax
+  800601:	0f be c0             	movsbl %al,%eax
+  800604:	83 e8 30             	sub    $0x30,%eax
+  800607:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80060a:	eb 48                	jmp    800654 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  80060c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80060f:	0f b6 00             	movzbl (%eax),%eax
+  800612:	3c 60                	cmp    $0x60,%al
+  800614:	7e 1b                	jle    800631 <strtol+0xf7>
+  800616:	8b 45 08             	mov    0x8(%ebp),%eax
+  800619:	0f b6 00             	movzbl (%eax),%eax
+  80061c:	3c 7a                	cmp    $0x7a,%al
+  80061e:	7f 11                	jg     800631 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800620:	8b 45 08             	mov    0x8(%ebp),%eax
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	0f be c0             	movsbl %al,%eax
+  800629:	83 e8 57             	sub    $0x57,%eax
+  80062c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80062f:	eb 23                	jmp    800654 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800631:	8b 45 08             	mov    0x8(%ebp),%eax
+  800634:	0f b6 00             	movzbl (%eax),%eax
+  800637:	3c 40                	cmp    $0x40,%al
+  800639:	7e 3c                	jle    800677 <strtol+0x13d>
+  80063b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80063e:	0f b6 00             	movzbl (%eax),%eax
+  800641:	3c 5a                	cmp    $0x5a,%al
+  800643:	7f 32                	jg     800677 <strtol+0x13d>
+            dig = *s - 'A' + 10;
+  800645:	8b 45 08             	mov    0x8(%ebp),%eax
+  800648:	0f b6 00             	movzbl (%eax),%eax
+  80064b:	0f be c0             	movsbl %al,%eax
+  80064e:	83 e8 37             	sub    $0x37,%eax
+  800651:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800654:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800657:	3b 45 10             	cmp    0x10(%ebp),%eax
+  80065a:	7d 1a                	jge    800676 <strtol+0x13c>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  80065c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800660:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800663:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800667:	89 c2                	mov    %eax,%edx
+  800669:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80066c:	01 d0                	add    %edx,%eax
+  80066e:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800671:	e9 71 ff ff ff       	jmp    8005e7 <strtol+0xad>
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+            break;
+  800676:	90                   	nop
+        }
+        s ++, val = (val * base) + dig;
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  800677:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80067b:	74 08                	je     800685 <strtol+0x14b>
+        *endptr = (char *) s;
+  80067d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800680:	8b 55 08             	mov    0x8(%ebp),%edx
+  800683:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800685:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800689:	74 07                	je     800692 <strtol+0x158>
+  80068b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80068e:	f7 d8                	neg    %eax
+  800690:	eb 03                	jmp    800695 <strtol+0x15b>
+  800692:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800695:	c9                   	leave  
+  800696:	c3                   	ret    
+
+00800697 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800697:	55                   	push   %ebp
+  800698:	89 e5                	mov    %esp,%ebp
+  80069a:	57                   	push   %edi
+  80069b:	83 ec 24             	sub    $0x24,%esp
+  80069e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006a1:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006a4:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006a8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006ab:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006ae:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006b1:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006b7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006ba:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006be:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006c1:	89 d7                	mov    %edx,%edi
+  8006c3:	f3 aa                	rep stos %al,%es:(%edi)
+  8006c5:	89 fa                	mov    %edi,%edx
+  8006c7:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8006ca:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  8006cd:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006d0:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  8006d1:	83 c4 24             	add    $0x24,%esp
+  8006d4:	5f                   	pop    %edi
+  8006d5:	5d                   	pop    %ebp
+  8006d6:	c3                   	ret    
+
+008006d7 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  8006d7:	55                   	push   %ebp
+  8006d8:	89 e5                	mov    %esp,%ebp
+  8006da:	57                   	push   %edi
+  8006db:	56                   	push   %esi
+  8006dc:	53                   	push   %ebx
+  8006dd:	83 ec 30             	sub    $0x30,%esp
+  8006e0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8006e6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006e9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8006ec:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006ef:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  8006f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8006f5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  8006f8:	73 42                	jae    80073c <memmove+0x65>
+  8006fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8006fd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800700:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800703:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800706:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800709:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  80070c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  80070f:	c1 e8 02             	shr    $0x2,%eax
+  800712:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800714:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800717:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80071a:	89 d7                	mov    %edx,%edi
+  80071c:	89 c6                	mov    %eax,%esi
+  80071e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800720:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800723:	83 e1 03             	and    $0x3,%ecx
+  800726:	74 02                	je     80072a <memmove+0x53>
+  800728:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  80072a:	89 f0                	mov    %esi,%eax
+  80072c:	89 fa                	mov    %edi,%edx
+  80072e:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800731:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800734:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800737:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  80073a:	eb 36                	jmp    800772 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  80073c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80073f:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800742:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800745:	01 c2                	add    %eax,%edx
+  800747:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80074a:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  80074d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800750:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800753:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800756:	89 c1                	mov    %eax,%ecx
+  800758:	89 d8                	mov    %ebx,%eax
+  80075a:	89 d6                	mov    %edx,%esi
+  80075c:	89 c7                	mov    %eax,%edi
+  80075e:	fd                   	std    
+  80075f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800761:	fc                   	cld    
+  800762:	89 f8                	mov    %edi,%eax
+  800764:	89 f2                	mov    %esi,%edx
+  800766:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800769:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  80076c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  80076f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800772:	83 c4 30             	add    $0x30,%esp
+  800775:	5b                   	pop    %ebx
+  800776:	5e                   	pop    %esi
+  800777:	5f                   	pop    %edi
+  800778:	5d                   	pop    %ebp
+  800779:	c3                   	ret    
+
+0080077a <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  80077a:	55                   	push   %ebp
+  80077b:	89 e5                	mov    %esp,%ebp
+  80077d:	57                   	push   %edi
+  80077e:	56                   	push   %esi
+  80077f:	83 ec 20             	sub    $0x20,%esp
+  800782:	8b 45 08             	mov    0x8(%ebp),%eax
+  800785:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800788:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80078b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80078e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800791:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800794:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800797:	c1 e8 02             	shr    $0x2,%eax
+  80079a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  80079c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80079f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007a2:	89 d7                	mov    %edx,%edi
+  8007a4:	89 c6                	mov    %eax,%esi
+  8007a6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007a8:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007ab:	83 e1 03             	and    $0x3,%ecx
+  8007ae:	74 02                	je     8007b2 <memcpy+0x38>
+  8007b0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007b2:	89 f0                	mov    %esi,%eax
+  8007b4:	89 fa                	mov    %edi,%edx
+  8007b6:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007b9:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007bc:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  8007bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007c2:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007c3:	83 c4 20             	add    $0x20,%esp
+  8007c6:	5e                   	pop    %esi
+  8007c7:	5f                   	pop    %edi
+  8007c8:	5d                   	pop    %ebp
+  8007c9:	c3                   	ret    
+
+008007ca <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  8007ca:	55                   	push   %ebp
+  8007cb:	89 e5                	mov    %esp,%ebp
+  8007cd:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  8007d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007d3:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  8007d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007d9:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  8007dc:	eb 30                	jmp    80080e <memcmp+0x44>
+        if (*s1 != *s2) {
+  8007de:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8007e1:	0f b6 10             	movzbl (%eax),%edx
+  8007e4:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8007e7:	0f b6 00             	movzbl (%eax),%eax
+  8007ea:	38 c2                	cmp    %al,%dl
+  8007ec:	74 18                	je     800806 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8007ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8007f1:	0f b6 00             	movzbl (%eax),%eax
+  8007f4:	0f b6 d0             	movzbl %al,%edx
+  8007f7:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8007fa:	0f b6 00             	movzbl (%eax),%eax
+  8007fd:	0f b6 c0             	movzbl %al,%eax
+  800800:	29 c2                	sub    %eax,%edx
+  800802:	89 d0                	mov    %edx,%eax
+  800804:	eb 1a                	jmp    800820 <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800806:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  80080a:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  80080e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800811:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800814:	89 55 10             	mov    %edx,0x10(%ebp)
+  800817:	85 c0                	test   %eax,%eax
+  800819:	75 c3                	jne    8007de <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  80081b:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800820:	c9                   	leave  
+  800821:	c3                   	ret    
+
+00800822 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800822:	55                   	push   %ebp
+  800823:	89 e5                	mov    %esp,%ebp
+  800825:	83 ec 38             	sub    $0x38,%esp
+  800828:	8b 45 10             	mov    0x10(%ebp),%eax
+  80082b:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  80082e:	8b 45 14             	mov    0x14(%ebp),%eax
+  800831:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  800834:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800837:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  80083a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80083d:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800840:	8b 45 18             	mov    0x18(%ebp),%eax
+  800843:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800846:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800849:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80084c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80084f:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  800852:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800855:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800858:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  80085c:	74 1c                	je     80087a <printnum+0x58>
+  80085e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800861:	ba 00 00 00 00       	mov    $0x0,%edx
+  800866:	f7 75 e4             	divl   -0x1c(%ebp)
+  800869:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  80086c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80086f:	ba 00 00 00 00       	mov    $0x0,%edx
+  800874:	f7 75 e4             	divl   -0x1c(%ebp)
+  800877:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80087a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80087d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800880:	f7 75 e4             	divl   -0x1c(%ebp)
+  800883:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800886:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800889:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80088c:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80088f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800892:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800895:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800898:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  80089b:	8b 45 18             	mov    0x18(%ebp),%eax
+  80089e:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008a3:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008a6:	77 41                	ja     8008e9 <printnum+0xc7>
+  8008a8:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008ab:	72 05                	jb     8008b2 <printnum+0x90>
+  8008ad:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  8008b0:	77 37                	ja     8008e9 <printnum+0xc7>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008b2:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008b5:	83 e8 01             	sub    $0x1,%eax
+  8008b8:	83 ec 04             	sub    $0x4,%esp
+  8008bb:	ff 75 20             	pushl  0x20(%ebp)
+  8008be:	50                   	push   %eax
+  8008bf:	ff 75 18             	pushl  0x18(%ebp)
+  8008c2:	ff 75 ec             	pushl  -0x14(%ebp)
+  8008c5:	ff 75 e8             	pushl  -0x18(%ebp)
+  8008c8:	ff 75 0c             	pushl  0xc(%ebp)
+  8008cb:	ff 75 08             	pushl  0x8(%ebp)
+  8008ce:	e8 4f ff ff ff       	call   800822 <printnum>
+  8008d3:	83 c4 20             	add    $0x20,%esp
+  8008d6:	eb 1b                	jmp    8008f3 <printnum+0xd1>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  8008d8:	83 ec 08             	sub    $0x8,%esp
+  8008db:	ff 75 0c             	pushl  0xc(%ebp)
+  8008de:	ff 75 20             	pushl  0x20(%ebp)
+  8008e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008e4:	ff d0                	call   *%eax
+  8008e6:	83 c4 10             	add    $0x10,%esp
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8008e9:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8008ed:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8008f1:	7f e5                	jg     8008d8 <printnum+0xb6>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8008f3:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8008f6:	05 84 14 80 00       	add    $0x801484,%eax
+  8008fb:	0f b6 00             	movzbl (%eax),%eax
+  8008fe:	0f be c0             	movsbl %al,%eax
+  800901:	83 ec 08             	sub    $0x8,%esp
+  800904:	ff 75 0c             	pushl  0xc(%ebp)
+  800907:	50                   	push   %eax
+  800908:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090b:	ff d0                	call   *%eax
+  80090d:	83 c4 10             	add    $0x10,%esp
+}
+  800910:	90                   	nop
+  800911:	c9                   	leave  
+  800912:	c3                   	ret    
+
+00800913 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800913:	55                   	push   %ebp
+  800914:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800916:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80091a:	7e 14                	jle    800930 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80091c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80091f:	8b 00                	mov    (%eax),%eax
+  800921:	8d 48 08             	lea    0x8(%eax),%ecx
+  800924:	8b 55 08             	mov    0x8(%ebp),%edx
+  800927:	89 0a                	mov    %ecx,(%edx)
+  800929:	8b 50 04             	mov    0x4(%eax),%edx
+  80092c:	8b 00                	mov    (%eax),%eax
+  80092e:	eb 30                	jmp    800960 <getuint+0x4d>
+    }
+    else if (lflag) {
+  800930:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800934:	74 16                	je     80094c <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800936:	8b 45 08             	mov    0x8(%ebp),%eax
+  800939:	8b 00                	mov    (%eax),%eax
+  80093b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80093e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800941:	89 0a                	mov    %ecx,(%edx)
+  800943:	8b 00                	mov    (%eax),%eax
+  800945:	ba 00 00 00 00       	mov    $0x0,%edx
+  80094a:	eb 14                	jmp    800960 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80094c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80094f:	8b 00                	mov    (%eax),%eax
+  800951:	8d 48 04             	lea    0x4(%eax),%ecx
+  800954:	8b 55 08             	mov    0x8(%ebp),%edx
+  800957:	89 0a                	mov    %ecx,(%edx)
+  800959:	8b 00                	mov    (%eax),%eax
+  80095b:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800960:	5d                   	pop    %ebp
+  800961:	c3                   	ret    
+
+00800962 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800962:	55                   	push   %ebp
+  800963:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800965:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800969:	7e 14                	jle    80097f <getint+0x1d>
+        return va_arg(*ap, long long);
+  80096b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80096e:	8b 00                	mov    (%eax),%eax
+  800970:	8d 48 08             	lea    0x8(%eax),%ecx
+  800973:	8b 55 08             	mov    0x8(%ebp),%edx
+  800976:	89 0a                	mov    %ecx,(%edx)
+  800978:	8b 50 04             	mov    0x4(%eax),%edx
+  80097b:	8b 00                	mov    (%eax),%eax
+  80097d:	eb 28                	jmp    8009a7 <getint+0x45>
+    }
+    else if (lflag) {
+  80097f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800983:	74 12                	je     800997 <getint+0x35>
+        return va_arg(*ap, long);
+  800985:	8b 45 08             	mov    0x8(%ebp),%eax
+  800988:	8b 00                	mov    (%eax),%eax
+  80098a:	8d 48 04             	lea    0x4(%eax),%ecx
+  80098d:	8b 55 08             	mov    0x8(%ebp),%edx
+  800990:	89 0a                	mov    %ecx,(%edx)
+  800992:	8b 00                	mov    (%eax),%eax
+  800994:	99                   	cltd   
+  800995:	eb 10                	jmp    8009a7 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800997:	8b 45 08             	mov    0x8(%ebp),%eax
+  80099a:	8b 00                	mov    (%eax),%eax
+  80099c:	8d 48 04             	lea    0x4(%eax),%ecx
+  80099f:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009a2:	89 0a                	mov    %ecx,(%edx)
+  8009a4:	8b 00                	mov    (%eax),%eax
+  8009a6:	99                   	cltd   
+    }
+}
+  8009a7:	5d                   	pop    %ebp
+  8009a8:	c3                   	ret    
+
+008009a9 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009a9:	55                   	push   %ebp
+  8009aa:	89 e5                	mov    %esp,%ebp
+  8009ac:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009af:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8009b8:	50                   	push   %eax
+  8009b9:	ff 75 10             	pushl  0x10(%ebp)
+  8009bc:	ff 75 0c             	pushl  0xc(%ebp)
+  8009bf:	ff 75 08             	pushl  0x8(%ebp)
+  8009c2:	e8 06 00 00 00       	call   8009cd <vprintfmt>
+  8009c7:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8009ca:	90                   	nop
+  8009cb:	c9                   	leave  
+  8009cc:	c3                   	ret    
+
+008009cd <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8009cd:	55                   	push   %ebp
+  8009ce:	89 e5                	mov    %esp,%ebp
+  8009d0:	56                   	push   %esi
+  8009d1:	53                   	push   %ebx
+  8009d2:	83 ec 20             	sub    $0x20,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009d5:	eb 17                	jmp    8009ee <vprintfmt+0x21>
+            if (ch == '\0') {
+  8009d7:	85 db                	test   %ebx,%ebx
+  8009d9:	0f 84 8e 03 00 00    	je     800d6d <vprintfmt+0x3a0>
+                return;
+            }
+            putch(ch, putdat);
+  8009df:	83 ec 08             	sub    $0x8,%esp
+  8009e2:	ff 75 0c             	pushl  0xc(%ebp)
+  8009e5:	53                   	push   %ebx
+  8009e6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009e9:	ff d0                	call   *%eax
+  8009eb:	83 c4 10             	add    $0x10,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009ee:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009f1:	8d 50 01             	lea    0x1(%eax),%edx
+  8009f4:	89 55 10             	mov    %edx,0x10(%ebp)
+  8009f7:	0f b6 00             	movzbl (%eax),%eax
+  8009fa:	0f b6 d8             	movzbl %al,%ebx
+  8009fd:	83 fb 25             	cmp    $0x25,%ebx
+  800a00:	75 d5                	jne    8009d7 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a02:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a06:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a10:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a13:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a1a:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a1d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a20:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a23:	8d 50 01             	lea    0x1(%eax),%edx
+  800a26:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a29:	0f b6 00             	movzbl (%eax),%eax
+  800a2c:	0f b6 d8             	movzbl %al,%ebx
+  800a2f:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a32:	83 f8 55             	cmp    $0x55,%eax
+  800a35:	0f 87 05 03 00 00    	ja     800d40 <vprintfmt+0x373>
+  800a3b:	8b 04 85 a8 14 80 00 	mov    0x8014a8(,%eax,4),%eax
+  800a42:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a44:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a48:	eb d6                	jmp    800a20 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a4a:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800a4e:	eb d0                	jmp    800a20 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a50:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800a57:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a5a:	89 d0                	mov    %edx,%eax
+  800a5c:	c1 e0 02             	shl    $0x2,%eax
+  800a5f:	01 d0                	add    %edx,%eax
+  800a61:	01 c0                	add    %eax,%eax
+  800a63:	01 d8                	add    %ebx,%eax
+  800a65:	83 e8 30             	sub    $0x30,%eax
+  800a68:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800a6b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a6e:	0f b6 00             	movzbl (%eax),%eax
+  800a71:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800a74:	83 fb 2f             	cmp    $0x2f,%ebx
+  800a77:	7e 39                	jle    800ab2 <vprintfmt+0xe5>
+  800a79:	83 fb 39             	cmp    $0x39,%ebx
+  800a7c:	7f 34                	jg     800ab2 <vprintfmt+0xe5>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a7e:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  800a82:	eb d3                	jmp    800a57 <vprintfmt+0x8a>
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800a84:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a87:	8d 50 04             	lea    0x4(%eax),%edx
+  800a8a:	89 55 14             	mov    %edx,0x14(%ebp)
+  800a8d:	8b 00                	mov    (%eax),%eax
+  800a8f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800a92:	eb 1f                	jmp    800ab3 <vprintfmt+0xe6>
+
+        case '.':
+            if (width < 0)
+  800a94:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800a98:	79 86                	jns    800a20 <vprintfmt+0x53>
+                width = 0;
+  800a9a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800aa1:	e9 7a ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800aa6:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800aad:	e9 6e ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+            goto process_precision;
+  800ab2:	90                   	nop
+        case '#':
+            altflag = 1;
+            goto reswitch;
+
+        process_precision:
+            if (width < 0)
+  800ab3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ab7:	0f 89 63 ff ff ff    	jns    800a20 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800abd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ac0:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800ac3:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800aca:	e9 51 ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800acf:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800ad3:	e9 48 ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800ad8:	8b 45 14             	mov    0x14(%ebp),%eax
+  800adb:	8d 50 04             	lea    0x4(%eax),%edx
+  800ade:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ae1:	8b 00                	mov    (%eax),%eax
+  800ae3:	83 ec 08             	sub    $0x8,%esp
+  800ae6:	ff 75 0c             	pushl  0xc(%ebp)
+  800ae9:	50                   	push   %eax
+  800aea:	8b 45 08             	mov    0x8(%ebp),%eax
+  800aed:	ff d0                	call   *%eax
+  800aef:	83 c4 10             	add    $0x10,%esp
+            break;
+  800af2:	e9 71 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800af7:	8b 45 14             	mov    0x14(%ebp),%eax
+  800afa:	8d 50 04             	lea    0x4(%eax),%edx
+  800afd:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b00:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b02:	85 db                	test   %ebx,%ebx
+  800b04:	79 02                	jns    800b08 <vprintfmt+0x13b>
+                err = -err;
+  800b06:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b08:	83 fb 18             	cmp    $0x18,%ebx
+  800b0b:	7f 0b                	jg     800b18 <vprintfmt+0x14b>
+  800b0d:	8b 34 9d 20 14 80 00 	mov    0x801420(,%ebx,4),%esi
+  800b14:	85 f6                	test   %esi,%esi
+  800b16:	75 19                	jne    800b31 <vprintfmt+0x164>
+                printfmt(putch, putdat, "error %d", err);
+  800b18:	53                   	push   %ebx
+  800b19:	68 95 14 80 00       	push   $0x801495
+  800b1e:	ff 75 0c             	pushl  0xc(%ebp)
+  800b21:	ff 75 08             	pushl  0x8(%ebp)
+  800b24:	e8 80 fe ff ff       	call   8009a9 <printfmt>
+  800b29:	83 c4 10             	add    $0x10,%esp
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b2c:	e9 37 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  800b31:	56                   	push   %esi
+  800b32:	68 9e 14 80 00       	push   $0x80149e
+  800b37:	ff 75 0c             	pushl  0xc(%ebp)
+  800b3a:	ff 75 08             	pushl  0x8(%ebp)
+  800b3d:	e8 67 fe ff ff       	call   8009a9 <printfmt>
+  800b42:	83 c4 10             	add    $0x10,%esp
+            }
+            break;
+  800b45:	e9 1e 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800b4a:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b4d:	8d 50 04             	lea    0x4(%eax),%edx
+  800b50:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b53:	8b 30                	mov    (%eax),%esi
+  800b55:	85 f6                	test   %esi,%esi
+  800b57:	75 05                	jne    800b5e <vprintfmt+0x191>
+                p = "(null)";
+  800b59:	be a1 14 80 00       	mov    $0x8014a1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800b5e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b62:	7e 76                	jle    800bda <vprintfmt+0x20d>
+  800b64:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800b68:	74 70                	je     800bda <vprintfmt+0x20d>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b6a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b6d:	83 ec 08             	sub    $0x8,%esp
+  800b70:	50                   	push   %eax
+  800b71:	56                   	push   %esi
+  800b72:	e8 17 f8 ff ff       	call   80038e <strnlen>
+  800b77:	83 c4 10             	add    $0x10,%esp
+  800b7a:	89 c2                	mov    %eax,%edx
+  800b7c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800b7f:	29 d0                	sub    %edx,%eax
+  800b81:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b84:	eb 17                	jmp    800b9d <vprintfmt+0x1d0>
+                    putch(padc, putdat);
+  800b86:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800b8a:	83 ec 08             	sub    $0x8,%esp
+  800b8d:	ff 75 0c             	pushl  0xc(%ebp)
+  800b90:	50                   	push   %eax
+  800b91:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b94:	ff d0                	call   *%eax
+  800b96:	83 c4 10             	add    $0x10,%esp
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b99:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800b9d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ba1:	7f e3                	jg     800b86 <vprintfmt+0x1b9>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800ba3:	eb 35                	jmp    800bda <vprintfmt+0x20d>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800ba5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800ba9:	74 1c                	je     800bc7 <vprintfmt+0x1fa>
+  800bab:	83 fb 1f             	cmp    $0x1f,%ebx
+  800bae:	7e 05                	jle    800bb5 <vprintfmt+0x1e8>
+  800bb0:	83 fb 7e             	cmp    $0x7e,%ebx
+  800bb3:	7e 12                	jle    800bc7 <vprintfmt+0x1fa>
+                    putch('?', putdat);
+  800bb5:	83 ec 08             	sub    $0x8,%esp
+  800bb8:	ff 75 0c             	pushl  0xc(%ebp)
+  800bbb:	6a 3f                	push   $0x3f
+  800bbd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bc0:	ff d0                	call   *%eax
+  800bc2:	83 c4 10             	add    $0x10,%esp
+  800bc5:	eb 0f                	jmp    800bd6 <vprintfmt+0x209>
+                }
+                else {
+                    putch(ch, putdat);
+  800bc7:	83 ec 08             	sub    $0x8,%esp
+  800bca:	ff 75 0c             	pushl  0xc(%ebp)
+  800bcd:	53                   	push   %ebx
+  800bce:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bd1:	ff d0                	call   *%eax
+  800bd3:	83 c4 10             	add    $0x10,%esp
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bd6:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800bda:	89 f0                	mov    %esi,%eax
+  800bdc:	8d 70 01             	lea    0x1(%eax),%esi
+  800bdf:	0f b6 00             	movzbl (%eax),%eax
+  800be2:	0f be d8             	movsbl %al,%ebx
+  800be5:	85 db                	test   %ebx,%ebx
+  800be7:	74 26                	je     800c0f <vprintfmt+0x242>
+  800be9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800bed:	78 b6                	js     800ba5 <vprintfmt+0x1d8>
+  800bef:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  800bf3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800bf7:	79 ac                	jns    800ba5 <vprintfmt+0x1d8>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800bf9:	eb 14                	jmp    800c0f <vprintfmt+0x242>
+                putch(' ', putdat);
+  800bfb:	83 ec 08             	sub    $0x8,%esp
+  800bfe:	ff 75 0c             	pushl  0xc(%ebp)
+  800c01:	6a 20                	push   $0x20
+  800c03:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c06:	ff d0                	call   *%eax
+  800c08:	83 c4 10             	add    $0x10,%esp
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c0b:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c0f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c13:	7f e6                	jg     800bfb <vprintfmt+0x22e>
+                putch(' ', putdat);
+            }
+            break;
+  800c15:	e9 4e 01 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c1a:	83 ec 08             	sub    $0x8,%esp
+  800c1d:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c20:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c23:	50                   	push   %eax
+  800c24:	e8 39 fd ff ff       	call   800962 <getint>
+  800c29:	83 c4 10             	add    $0x10,%esp
+  800c2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c2f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c32:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c35:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c38:	85 d2                	test   %edx,%edx
+  800c3a:	79 23                	jns    800c5f <vprintfmt+0x292>
+                putch('-', putdat);
+  800c3c:	83 ec 08             	sub    $0x8,%esp
+  800c3f:	ff 75 0c             	pushl  0xc(%ebp)
+  800c42:	6a 2d                	push   $0x2d
+  800c44:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c47:	ff d0                	call   *%eax
+  800c49:	83 c4 10             	add    $0x10,%esp
+                num = -(long long)num;
+  800c4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c4f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c52:	f7 d8                	neg    %eax
+  800c54:	83 d2 00             	adc    $0x0,%edx
+  800c57:	f7 da                	neg    %edx
+  800c59:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c5c:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800c5f:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c66:	e9 9f 00 00 00       	jmp    800d0a <vprintfmt+0x33d>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800c6b:	83 ec 08             	sub    $0x8,%esp
+  800c6e:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c71:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c74:	50                   	push   %eax
+  800c75:	e8 99 fc ff ff       	call   800913 <getuint>
+  800c7a:	83 c4 10             	add    $0x10,%esp
+  800c7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c80:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800c83:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c8a:	eb 7e                	jmp    800d0a <vprintfmt+0x33d>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800c8c:	83 ec 08             	sub    $0x8,%esp
+  800c8f:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c92:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c95:	50                   	push   %eax
+  800c96:	e8 78 fc ff ff       	call   800913 <getuint>
+  800c9b:	83 c4 10             	add    $0x10,%esp
+  800c9e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ca1:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800ca4:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800cab:	eb 5d                	jmp    800d0a <vprintfmt+0x33d>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800cad:	83 ec 08             	sub    $0x8,%esp
+  800cb0:	ff 75 0c             	pushl  0xc(%ebp)
+  800cb3:	6a 30                	push   $0x30
+  800cb5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb8:	ff d0                	call   *%eax
+  800cba:	83 c4 10             	add    $0x10,%esp
+            putch('x', putdat);
+  800cbd:	83 ec 08             	sub    $0x8,%esp
+  800cc0:	ff 75 0c             	pushl  0xc(%ebp)
+  800cc3:	6a 78                	push   $0x78
+  800cc5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cc8:	ff d0                	call   *%eax
+  800cca:	83 c4 10             	add    $0x10,%esp
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800ccd:	8b 45 14             	mov    0x14(%ebp),%eax
+  800cd0:	8d 50 04             	lea    0x4(%eax),%edx
+  800cd3:	89 55 14             	mov    %edx,0x14(%ebp)
+  800cd6:	8b 00                	mov    (%eax),%eax
+  800cd8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cdb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800ce2:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800ce9:	eb 1f                	jmp    800d0a <vprintfmt+0x33d>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800ceb:	83 ec 08             	sub    $0x8,%esp
+  800cee:	ff 75 e0             	pushl  -0x20(%ebp)
+  800cf1:	8d 45 14             	lea    0x14(%ebp),%eax
+  800cf4:	50                   	push   %eax
+  800cf5:	e8 19 fc ff ff       	call   800913 <getuint>
+  800cfa:	83 c4 10             	add    $0x10,%esp
+  800cfd:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d00:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d03:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d0a:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d11:	83 ec 04             	sub    $0x4,%esp
+  800d14:	52                   	push   %edx
+  800d15:	ff 75 e8             	pushl  -0x18(%ebp)
+  800d18:	50                   	push   %eax
+  800d19:	ff 75 f4             	pushl  -0xc(%ebp)
+  800d1c:	ff 75 f0             	pushl  -0x10(%ebp)
+  800d1f:	ff 75 0c             	pushl  0xc(%ebp)
+  800d22:	ff 75 08             	pushl  0x8(%ebp)
+  800d25:	e8 f8 fa ff ff       	call   800822 <printnum>
+  800d2a:	83 c4 20             	add    $0x20,%esp
+            break;
+  800d2d:	eb 39                	jmp    800d68 <vprintfmt+0x39b>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800d2f:	83 ec 08             	sub    $0x8,%esp
+  800d32:	ff 75 0c             	pushl  0xc(%ebp)
+  800d35:	53                   	push   %ebx
+  800d36:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d39:	ff d0                	call   *%eax
+  800d3b:	83 c4 10             	add    $0x10,%esp
+            break;
+  800d3e:	eb 28                	jmp    800d68 <vprintfmt+0x39b>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800d40:	83 ec 08             	sub    $0x8,%esp
+  800d43:	ff 75 0c             	pushl  0xc(%ebp)
+  800d46:	6a 25                	push   $0x25
+  800d48:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d4b:	ff d0                	call   *%eax
+  800d4d:	83 c4 10             	add    $0x10,%esp
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800d50:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d54:	eb 04                	jmp    800d5a <vprintfmt+0x38d>
+  800d56:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d5a:	8b 45 10             	mov    0x10(%ebp),%eax
+  800d5d:	83 e8 01             	sub    $0x1,%eax
+  800d60:	0f b6 00             	movzbl (%eax),%eax
+  800d63:	3c 25                	cmp    $0x25,%al
+  800d65:	75 ef                	jne    800d56 <vprintfmt+0x389>
+                /* do nothing */;
+            break;
+  800d67:	90                   	nop
+        }
+    }
+  800d68:	e9 68 fc ff ff       	jmp    8009d5 <vprintfmt+0x8>
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+            if (ch == '\0') {
+                return;
+  800d6d:	90                   	nop
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  800d6e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  800d71:	5b                   	pop    %ebx
+  800d72:	5e                   	pop    %esi
+  800d73:	5d                   	pop    %ebp
+  800d74:	c3                   	ret    
+
+00800d75 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800d75:	55                   	push   %ebp
+  800d76:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800d78:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d7b:	8b 40 08             	mov    0x8(%eax),%eax
+  800d7e:	8d 50 01             	lea    0x1(%eax),%edx
+  800d81:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d84:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800d87:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d8a:	8b 10                	mov    (%eax),%edx
+  800d8c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d8f:	8b 40 04             	mov    0x4(%eax),%eax
+  800d92:	39 c2                	cmp    %eax,%edx
+  800d94:	73 12                	jae    800da8 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800d96:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d99:	8b 00                	mov    (%eax),%eax
+  800d9b:	8d 48 01             	lea    0x1(%eax),%ecx
+  800d9e:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800da1:	89 0a                	mov    %ecx,(%edx)
+  800da3:	8b 55 08             	mov    0x8(%ebp),%edx
+  800da6:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800da8:	90                   	nop
+  800da9:	5d                   	pop    %ebp
+  800daa:	c3                   	ret    
+
+00800dab <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800dab:	55                   	push   %ebp
+  800dac:	89 e5                	mov    %esp,%ebp
+  800dae:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800db1:	8d 45 14             	lea    0x14(%ebp),%eax
+  800db4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800db7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800dba:	50                   	push   %eax
+  800dbb:	ff 75 10             	pushl  0x10(%ebp)
+  800dbe:	ff 75 0c             	pushl  0xc(%ebp)
+  800dc1:	ff 75 08             	pushl  0x8(%ebp)
+  800dc4:	e8 0b 00 00 00       	call   800dd4 <vsnprintf>
+  800dc9:	83 c4 10             	add    $0x10,%esp
+  800dcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800dcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800dd2:	c9                   	leave  
+  800dd3:	c3                   	ret    
+
+00800dd4 <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800dd4:	55                   	push   %ebp
+  800dd5:	89 e5                	mov    %esp,%ebp
+  800dd7:	83 ec 18             	sub    $0x18,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800dda:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ddd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800de0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800de3:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800de6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de9:	01 d0                	add    %edx,%eax
+  800deb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800dee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800df5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800df9:	74 0a                	je     800e05 <vsnprintf+0x31>
+  800dfb:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800dfe:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e01:	39 c2                	cmp    %eax,%edx
+  800e03:	76 07                	jbe    800e0c <vsnprintf+0x38>
+        return -E_INVAL;
+  800e05:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e0a:	eb 20                	jmp    800e2c <vsnprintf+0x58>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e0c:	ff 75 14             	pushl  0x14(%ebp)
+  800e0f:	ff 75 10             	pushl  0x10(%ebp)
+  800e12:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800e15:	50                   	push   %eax
+  800e16:	68 75 0d 80 00       	push   $0x800d75
+  800e1b:	e8 ad fb ff ff       	call   8009cd <vprintfmt>
+  800e20:	83 c4 10             	add    $0x10,%esp
+    // null terminate the buffer
+    *b.buf = '\0';
+  800e23:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e26:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800e29:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e2c:	c9                   	leave  
+  800e2d:	c3                   	ret    
+
+00800e2e <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800e2e:	55                   	push   %ebp
+  800e2f:	89 e5                	mov    %esp,%ebp
+  800e31:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800e34:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e37:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800e3d:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800e40:	b8 20 00 00 00       	mov    $0x20,%eax
+  800e45:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800e48:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800e4b:	89 c1                	mov    %eax,%ecx
+  800e4d:	d3 ea                	shr    %cl,%edx
+  800e4f:	89 d0                	mov    %edx,%eax
+}
+  800e51:	c9                   	leave  
+  800e52:	c3                   	ret    
+
+00800e53 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800e53:	55                   	push   %ebp
+  800e54:	89 e5                	mov    %esp,%ebp
+  800e56:	57                   	push   %edi
+  800e57:	56                   	push   %esi
+  800e58:	53                   	push   %ebx
+  800e59:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800e5c:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e61:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800e67:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800e6d:	6b f0 05             	imul   $0x5,%eax,%esi
+  800e70:	01 fe                	add    %edi,%esi
+  800e72:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800e77:	f7 e7                	mul    %edi
+  800e79:	01 d6                	add    %edx,%esi
+  800e7b:	89 f2                	mov    %esi,%edx
+  800e7d:	83 c0 0b             	add    $0xb,%eax
+  800e80:	83 d2 00             	adc    $0x0,%edx
+  800e83:	89 c7                	mov    %eax,%edi
+  800e85:	83 e7 ff             	and    $0xffffffff,%edi
+  800e88:	89 f9                	mov    %edi,%ecx
+  800e8a:	0f b7 da             	movzwl %dx,%ebx
+  800e8d:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800e93:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800e99:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e9e:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ea4:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ea8:	c1 ea 0c             	shr    $0xc,%edx
+  800eab:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800eae:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800eb1:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800eb8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ebb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ebe:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ec1:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800ec4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec7:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800eca:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ece:	74 1c                	je     800eec <rand+0x99>
+  800ed0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ed3:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ed8:	f7 75 dc             	divl   -0x24(%ebp)
+  800edb:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800ede:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ee1:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ee6:	f7 75 dc             	divl   -0x24(%ebp)
+  800ee9:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800eec:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800eef:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800ef2:	f7 75 dc             	divl   -0x24(%ebp)
+  800ef5:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ef8:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800efb:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800efe:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800f01:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f04:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f07:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800f0a:	83 c4 24             	add    $0x24,%esp
+  800f0d:	5b                   	pop    %ebx
+  800f0e:	5e                   	pop    %esi
+  800f0f:	5f                   	pop    %edi
+  800f10:	5d                   	pop    %ebp
+  800f11:	c3                   	ret    
+
+00800f12 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800f12:	55                   	push   %ebp
+  800f13:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800f15:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f18:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f1d:	a3 00 20 80 00       	mov    %eax,0x802000
+  800f22:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800f28:	90                   	nop
+  800f29:	5d                   	pop    %ebp
+  800f2a:	c3                   	ret    
+
+00800f2b <work>:
+static int mata[MATSIZE][MATSIZE];
+static int matb[MATSIZE][MATSIZE];
+static int matc[MATSIZE][MATSIZE];
+
+void
+work(unsigned int times) {
+  800f2b:	55                   	push   %ebp
+  800f2c:	89 e5                	mov    %esp,%ebp
+  800f2e:	53                   	push   %ebx
+  800f2f:	83 ec 14             	sub    $0x14,%esp
+    int i, j, k, size = MATSIZE;
+  800f32:	c7 45 e8 0a 00 00 00 	movl   $0xa,-0x18(%ebp)
+    for (i = 0; i < size; i ++) {
+  800f39:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  800f40:	eb 65                	jmp    800fa7 <work+0x7c>
+        for (j = 0; j < size; j ++) {
+  800f42:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  800f49:	eb 50                	jmp    800f9b <work+0x70>
+            mata[i][j] = matb[i][j] = 1;
+  800f4b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f4e:	89 d0                	mov    %edx,%eax
+  800f50:	c1 e0 02             	shl    $0x2,%eax
+  800f53:	01 d0                	add    %edx,%eax
+  800f55:	01 c0                	add    %eax,%eax
+  800f57:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800f5a:	01 d0                	add    %edx,%eax
+  800f5c:	c7 04 85 c0 21 80 00 	movl   $0x1,0x8021c0(,%eax,4)
+  800f63:	01 00 00 00 
+  800f67:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f6a:	89 d0                	mov    %edx,%eax
+  800f6c:	c1 e0 02             	shl    $0x2,%eax
+  800f6f:	01 d0                	add    %edx,%eax
+  800f71:	01 c0                	add    %eax,%eax
+  800f73:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800f76:	01 d0                	add    %edx,%eax
+  800f78:	8b 0c 85 c0 21 80 00 	mov    0x8021c0(,%eax,4),%ecx
+  800f7f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f82:	89 d0                	mov    %edx,%eax
+  800f84:	c1 e0 02             	shl    $0x2,%eax
+  800f87:	01 d0                	add    %edx,%eax
+  800f89:	01 c0                	add    %eax,%eax
+  800f8b:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800f8e:	01 d0                	add    %edx,%eax
+  800f90:	89 0c 85 20 20 80 00 	mov    %ecx,0x802020(,%eax,4)
+
+void
+work(unsigned int times) {
+    int i, j, k, size = MATSIZE;
+    for (i = 0; i < size; i ++) {
+        for (j = 0; j < size; j ++) {
+  800f97:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  800f9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f9e:	3b 45 e8             	cmp    -0x18(%ebp),%eax
+  800fa1:	7c a8                	jl     800f4b <work+0x20>
+static int matc[MATSIZE][MATSIZE];
+
+void
+work(unsigned int times) {
+    int i, j, k, size = MATSIZE;
+    for (i = 0; i < size; i ++) {
+  800fa3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  800fa7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800faa:	3b 45 e8             	cmp    -0x18(%ebp),%eax
+  800fad:	7c 93                	jl     800f42 <work+0x17>
+        for (j = 0; j < size; j ++) {
+            mata[i][j] = matb[i][j] = 1;
+        }
+    }
+
+    yield();
+  800faf:	e8 66 f2 ff ff       	call   80021a <yield>
+
+    cprintf("pid %d is running (%d times)!.\n", getpid(), times);
+  800fb4:	e8 85 f2 ff ff       	call   80023e <getpid>
+  800fb9:	83 ec 04             	sub    $0x4,%esp
+  800fbc:	ff 75 08             	pushl  0x8(%ebp)
+  800fbf:	50                   	push   %eax
+  800fc0:	68 00 16 80 00       	push   $0x801600
+  800fc5:	e8 0f f3 ff ff       	call   8002d9 <cprintf>
+  800fca:	83 c4 10             	add    $0x10,%esp
+
+    while (times -- > 0) {
+  800fcd:	e9 5c 01 00 00       	jmp    80112e <work+0x203>
+        for (i = 0; i < size; i ++) {
+  800fd2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  800fd9:	e9 b6 00 00 00       	jmp    801094 <work+0x169>
+            for (j = 0; j < size; j ++) {
+  800fde:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  800fe5:	e9 9a 00 00 00       	jmp    801084 <work+0x159>
+                matc[i][j] = 0;
+  800fea:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800fed:	89 d0                	mov    %edx,%eax
+  800fef:	c1 e0 02             	shl    $0x2,%eax
+  800ff2:	01 d0                	add    %edx,%eax
+  800ff4:	01 c0                	add    %eax,%eax
+  800ff6:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800ff9:	01 d0                	add    %edx,%eax
+  800ffb:	c7 04 85 60 23 80 00 	movl   $0x0,0x802360(,%eax,4)
+  801002:	00 00 00 00 
+                for (k = 0; k < size; k ++) {
+  801006:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+  80100d:	eb 69                	jmp    801078 <work+0x14d>
+                    matc[i][j] += mata[i][k] * matb[k][j];
+  80100f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  801012:	89 d0                	mov    %edx,%eax
+  801014:	c1 e0 02             	shl    $0x2,%eax
+  801017:	01 d0                	add    %edx,%eax
+  801019:	01 c0                	add    %eax,%eax
+  80101b:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80101e:	01 d0                	add    %edx,%eax
+  801020:	8b 0c 85 60 23 80 00 	mov    0x802360(,%eax,4),%ecx
+  801027:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80102a:	89 d0                	mov    %edx,%eax
+  80102c:	c1 e0 02             	shl    $0x2,%eax
+  80102f:	01 d0                	add    %edx,%eax
+  801031:	01 c0                	add    %eax,%eax
+  801033:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  801036:	01 d0                	add    %edx,%eax
+  801038:	8b 1c 85 20 20 80 00 	mov    0x802020(,%eax,4),%ebx
+  80103f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  801042:	89 d0                	mov    %edx,%eax
+  801044:	c1 e0 02             	shl    $0x2,%eax
+  801047:	01 d0                	add    %edx,%eax
+  801049:	01 c0                	add    %eax,%eax
+  80104b:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80104e:	01 d0                	add    %edx,%eax
+  801050:	8b 04 85 c0 21 80 00 	mov    0x8021c0(,%eax,4),%eax
+  801057:	0f af c3             	imul   %ebx,%eax
+  80105a:	01 c1                	add    %eax,%ecx
+  80105c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80105f:	89 d0                	mov    %edx,%eax
+  801061:	c1 e0 02             	shl    $0x2,%eax
+  801064:	01 d0                	add    %edx,%eax
+  801066:	01 c0                	add    %eax,%eax
+  801068:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80106b:	01 d0                	add    %edx,%eax
+  80106d:	89 0c 85 60 23 80 00 	mov    %ecx,0x802360(,%eax,4)
+
+    while (times -- > 0) {
+        for (i = 0; i < size; i ++) {
+            for (j = 0; j < size; j ++) {
+                matc[i][j] = 0;
+                for (k = 0; k < size; k ++) {
+  801074:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+  801078:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80107b:	3b 45 e8             	cmp    -0x18(%ebp),%eax
+  80107e:	7c 8f                	jl     80100f <work+0xe4>
+
+    cprintf("pid %d is running (%d times)!.\n", getpid(), times);
+
+    while (times -- > 0) {
+        for (i = 0; i < size; i ++) {
+            for (j = 0; j < size; j ++) {
+  801080:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  801084:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  801087:	3b 45 e8             	cmp    -0x18(%ebp),%eax
+  80108a:	0f 8c 5a ff ff ff    	jl     800fea <work+0xbf>
+    yield();
+
+    cprintf("pid %d is running (%d times)!.\n", getpid(), times);
+
+    while (times -- > 0) {
+        for (i = 0; i < size; i ++) {
+  801090:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  801094:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  801097:	3b 45 e8             	cmp    -0x18(%ebp),%eax
+  80109a:	0f 8c 3e ff ff ff    	jl     800fde <work+0xb3>
+                for (k = 0; k < size; k ++) {
+                    matc[i][j] += mata[i][k] * matb[k][j];
+                }
+            }
+        }
+        for (i = 0; i < size; i ++) {
+  8010a0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  8010a7:	eb 79                	jmp    801122 <work+0x1f7>
+            for (j = 0; j < size; j ++) {
+  8010a9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8010b0:	eb 64                	jmp    801116 <work+0x1eb>
+                mata[i][j] = matb[i][j] = matc[i][j];
+  8010b2:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8010b5:	89 d0                	mov    %edx,%eax
+  8010b7:	c1 e0 02             	shl    $0x2,%eax
+  8010ba:	01 d0                	add    %edx,%eax
+  8010bc:	01 c0                	add    %eax,%eax
+  8010be:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8010c1:	01 d0                	add    %edx,%eax
+  8010c3:	8b 0c 85 60 23 80 00 	mov    0x802360(,%eax,4),%ecx
+  8010ca:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8010cd:	89 d0                	mov    %edx,%eax
+  8010cf:	c1 e0 02             	shl    $0x2,%eax
+  8010d2:	01 d0                	add    %edx,%eax
+  8010d4:	01 c0                	add    %eax,%eax
+  8010d6:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8010d9:	01 d0                	add    %edx,%eax
+  8010db:	89 0c 85 c0 21 80 00 	mov    %ecx,0x8021c0(,%eax,4)
+  8010e2:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8010e5:	89 d0                	mov    %edx,%eax
+  8010e7:	c1 e0 02             	shl    $0x2,%eax
+  8010ea:	01 d0                	add    %edx,%eax
+  8010ec:	01 c0                	add    %eax,%eax
+  8010ee:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8010f1:	01 d0                	add    %edx,%eax
+  8010f3:	8b 0c 85 c0 21 80 00 	mov    0x8021c0(,%eax,4),%ecx
+  8010fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8010fd:	89 d0                	mov    %edx,%eax
+  8010ff:	c1 e0 02             	shl    $0x2,%eax
+  801102:	01 d0                	add    %edx,%eax
+  801104:	01 c0                	add    %eax,%eax
+  801106:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  801109:	01 d0                	add    %edx,%eax
+  80110b:	89 0c 85 20 20 80 00 	mov    %ecx,0x802020(,%eax,4)
+                    matc[i][j] += mata[i][k] * matb[k][j];
+                }
+            }
+        }
+        for (i = 0; i < size; i ++) {
+            for (j = 0; j < size; j ++) {
+  801112:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  801116:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  801119:	3b 45 e8             	cmp    -0x18(%ebp),%eax
+  80111c:	7c 94                	jl     8010b2 <work+0x187>
+                for (k = 0; k < size; k ++) {
+                    matc[i][j] += mata[i][k] * matb[k][j];
+                }
+            }
+        }
+        for (i = 0; i < size; i ++) {
+  80111e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  801122:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  801125:	3b 45 e8             	cmp    -0x18(%ebp),%eax
+  801128:	0f 8c 7b ff ff ff    	jl     8010a9 <work+0x17e>
+
+    yield();
+
+    cprintf("pid %d is running (%d times)!.\n", getpid(), times);
+
+    while (times -- > 0) {
+  80112e:	8b 45 08             	mov    0x8(%ebp),%eax
+  801131:	8d 50 ff             	lea    -0x1(%eax),%edx
+  801134:	89 55 08             	mov    %edx,0x8(%ebp)
+  801137:	85 c0                	test   %eax,%eax
+  801139:	0f 85 93 fe ff ff    	jne    800fd2 <work+0xa7>
+            for (j = 0; j < size; j ++) {
+                mata[i][j] = matb[i][j] = matc[i][j];
+            }
+        }
+    }
+    cprintf("pid %d done!.\n", getpid());
+  80113f:	e8 fa f0 ff ff       	call   80023e <getpid>
+  801144:	83 ec 08             	sub    $0x8,%esp
+  801147:	50                   	push   %eax
+  801148:	68 20 16 80 00       	push   $0x801620
+  80114d:	e8 87 f1 ff ff       	call   8002d9 <cprintf>
+  801152:	83 c4 10             	add    $0x10,%esp
+    exit(0);
+  801155:	83 ec 0c             	sub    $0xc,%esp
+  801158:	6a 00                	push   $0x0
+  80115a:	e8 58 f0 ff ff       	call   8001b7 <exit>
+
+0080115f <main>:
+}
+
+const int total = 21;
+
+int
+main(void) {
+  80115f:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  801163:	83 e4 f0             	and    $0xfffffff0,%esp
+  801166:	ff 71 fc             	pushl  -0x4(%ecx)
+  801169:	55                   	push   %ebp
+  80116a:	89 e5                	mov    %esp,%ebp
+  80116c:	53                   	push   %ebx
+  80116d:	51                   	push   %ecx
+  80116e:	83 ec 10             	sub    $0x10,%esp
+  801171:	89 e0                	mov    %esp,%eax
+  801173:	89 c3                	mov    %eax,%ebx
+    int pids[total];
+  801175:	b8 15 00 00 00       	mov    $0x15,%eax
+  80117a:	83 e8 01             	sub    $0x1,%eax
+  80117d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  801180:	b8 15 00 00 00       	mov    $0x15,%eax
+  801185:	c1 e0 02             	shl    $0x2,%eax
+  801188:	8d 50 03             	lea    0x3(%eax),%edx
+  80118b:	b8 10 00 00 00       	mov    $0x10,%eax
+  801190:	83 e8 01             	sub    $0x1,%eax
+  801193:	01 d0                	add    %edx,%eax
+  801195:	b9 10 00 00 00       	mov    $0x10,%ecx
+  80119a:	ba 00 00 00 00       	mov    $0x0,%edx
+  80119f:	f7 f1                	div    %ecx
+  8011a1:	6b c0 10             	imul   $0x10,%eax,%eax
+  8011a4:	29 c4                	sub    %eax,%esp
+  8011a6:	89 e0                	mov    %esp,%eax
+  8011a8:	83 c0 03             	add    $0x3,%eax
+  8011ab:	c1 e8 02             	shr    $0x2,%eax
+  8011ae:	c1 e0 02             	shl    $0x2,%eax
+  8011b1:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    memset(pids, 0, sizeof(pids));
+  8011b4:	b8 15 00 00 00       	mov    $0x15,%eax
+  8011b9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+  8011c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8011c3:	83 ec 04             	sub    $0x4,%esp
+  8011c6:	52                   	push   %edx
+  8011c7:	6a 00                	push   $0x0
+  8011c9:	50                   	push   %eax
+  8011ca:	e8 c8 f4 ff ff       	call   800697 <memset>
+  8011cf:	83 c4 10             	add    $0x10,%esp
+
+    int i;
+    for (i = 0; i < total; i ++) {
+  8011d2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  8011d9:	eb 78                	jmp    801253 <main+0xf4>
+        if ((pids[i] = fork()) == 0) {
+  8011db:	e8 fd ef ff ff       	call   8001dd <fork>
+  8011e0:	89 c1                	mov    %eax,%ecx
+  8011e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8011e5:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8011e8:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
+  8011eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8011ee:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8011f1:	8b 04 90             	mov    (%eax,%edx,4),%eax
+  8011f4:	85 c0                	test   %eax,%eax
+  8011f6:	75 4a                	jne    801242 <main+0xe3>
+            srand(i * i);
+  8011f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8011fb:	0f af 45 f4          	imul   -0xc(%ebp),%eax
+  8011ff:	83 ec 0c             	sub    $0xc,%esp
+  801202:	50                   	push   %eax
+  801203:	e8 0a fd ff ff       	call   800f12 <srand>
+  801208:	83 c4 10             	add    $0x10,%esp
+            int times = (((unsigned int)rand()) % total);
+  80120b:	e8 43 fc ff ff       	call   800e53 <rand>
+  801210:	ba 15 00 00 00       	mov    $0x15,%edx
+  801215:	89 d1                	mov    %edx,%ecx
+  801217:	ba 00 00 00 00       	mov    $0x0,%edx
+  80121c:	f7 f1                	div    %ecx
+  80121e:	89 d0                	mov    %edx,%eax
+  801220:	89 45 e8             	mov    %eax,-0x18(%ebp)
+            times = (times * times + 10) * 100;
+  801223:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  801226:	0f af 45 e8          	imul   -0x18(%ebp),%eax
+  80122a:	83 c0 0a             	add    $0xa,%eax
+  80122d:	6b c0 64             	imul   $0x64,%eax,%eax
+  801230:	89 45 e8             	mov    %eax,-0x18(%ebp)
+            work(times);
+  801233:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  801236:	83 ec 0c             	sub    $0xc,%esp
+  801239:	50                   	push   %eax
+  80123a:	e8 ec fc ff ff       	call   800f2b <work>
+  80123f:	83 c4 10             	add    $0x10,%esp
+        }
+        if (pids[i] < 0) {
+  801242:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  801245:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  801248:	8b 04 90             	mov    (%eax,%edx,4),%eax
+  80124b:	85 c0                	test   %eax,%eax
+  80124d:	78 6d                	js     8012bc <main+0x15d>
+main(void) {
+    int pids[total];
+    memset(pids, 0, sizeof(pids));
+
+    int i;
+    for (i = 0; i < total; i ++) {
+  80124f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  801253:	b8 15 00 00 00       	mov    $0x15,%eax
+  801258:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+  80125b:	0f 8c 7a ff ff ff    	jl     8011db <main+0x7c>
+        if (pids[i] < 0) {
+            goto failed;
+        }
+    }
+
+    cprintf("fork ok.\n");
+  801261:	83 ec 0c             	sub    $0xc,%esp
+  801264:	68 34 16 80 00       	push   $0x801634
+  801269:	e8 6b f0 ff ff       	call   8002d9 <cprintf>
+  80126e:	83 c4 10             	add    $0x10,%esp
+
+    for (i = 0; i < total; i ++) {
+  801271:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  801278:	eb 1f                	jmp    801299 <main+0x13a>
+        if (wait() != 0) {
+  80127a:	e8 6b ef ff ff       	call   8001ea <wait>
+  80127f:	85 c0                	test   %eax,%eax
+  801281:	74 12                	je     801295 <main+0x136>
+            cprintf("wait failed.\n");
+  801283:	83 ec 0c             	sub    $0xc,%esp
+  801286:	68 3e 16 80 00       	push   $0x80163e
+  80128b:	e8 49 f0 ff ff       	call   8002d9 <cprintf>
+  801290:	83 c4 10             	add    $0x10,%esp
+            goto failed;
+  801293:	eb 28                	jmp    8012bd <main+0x15e>
+        }
+    }
+
+    cprintf("fork ok.\n");
+
+    for (i = 0; i < total; i ++) {
+  801295:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  801299:	b8 15 00 00 00       	mov    $0x15,%eax
+  80129e:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+  8012a1:	7c d7                	jl     80127a <main+0x11b>
+            cprintf("wait failed.\n");
+            goto failed;
+        }
+    }
+
+    cprintf("matrix pass.\n");
+  8012a3:	83 ec 0c             	sub    $0xc,%esp
+  8012a6:	68 4c 16 80 00       	push   $0x80164c
+  8012ab:	e8 29 f0 ff ff       	call   8002d9 <cprintf>
+  8012b0:	83 c4 10             	add    $0x10,%esp
+    return 0;
+  8012b3:	b8 00 00 00 00       	mov    $0x0,%eax
+  8012b8:	89 dc                	mov    %ebx,%esp
+  8012ba:	eb 4e                	jmp    80130a <main+0x1ab>
+            int times = (((unsigned int)rand()) % total);
+            times = (times * times + 10) * 100;
+            work(times);
+        }
+        if (pids[i] < 0) {
+            goto failed;
+  8012bc:	90                   	nop
+
+    cprintf("matrix pass.\n");
+    return 0;
+
+failed:
+    for (i = 0; i < total; i ++) {
+  8012bd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  8012c4:	eb 26                	jmp    8012ec <main+0x18d>
+        if (pids[i] > 0) {
+  8012c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8012c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8012cc:	8b 04 90             	mov    (%eax,%edx,4),%eax
+  8012cf:	85 c0                	test   %eax,%eax
+  8012d1:	7e 15                	jle    8012e8 <main+0x189>
+            kill(pids[i]);
+  8012d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8012d6:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8012d9:	8b 04 90             	mov    (%eax,%edx,4),%eax
+  8012dc:	83 ec 0c             	sub    $0xc,%esp
+  8012df:	50                   	push   %eax
+  8012e0:	e8 43 ef ff ff       	call   800228 <kill>
+  8012e5:	83 c4 10             	add    $0x10,%esp
+
+    cprintf("matrix pass.\n");
+    return 0;
+
+failed:
+    for (i = 0; i < total; i ++) {
+  8012e8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  8012ec:	b8 15 00 00 00       	mov    $0x15,%eax
+  8012f1:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+  8012f4:	7c d0                	jl     8012c6 <main+0x167>
+        if (pids[i] > 0) {
+            kill(pids[i]);
+        }
+    }
+    panic("FAIL: T.T\n");
+  8012f6:	83 ec 04             	sub    $0x4,%esp
+  8012f9:	68 5a 16 80 00       	push   $0x80165a
+  8012fe:	6a 52                	push   $0x52
+  801300:	68 65 16 80 00       	push   $0x801665
+  801305:	e8 16 ed ff ff       	call   800020 <__panic>
+}
+  80130a:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  80130d:	59                   	pop    %ecx
+  80130e:	5b                   	pop    %ebx
+  80130f:	5d                   	pop    %ebp
+  801310:	8d 61 fc             	lea    -0x4(%ecx),%esp
+  801313:	c3                   	ret    
diff -r -u -P lab6_original/obj/user/matrix.d lab6/obj/user/matrix.d
--- lab6_original/obj/user/matrix.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/matrix.d	2016-04-29 16:22:06.844550496 +0800
@@ -0,0 +1,2 @@
+obj/user/matrix.o obj/user/matrix.d: user/matrix.c user/libs/ulib.h \
+ libs/defs.h libs/stdio.h libs/stdarg.h libs/string.h libs/stdlib.h
Binary files lab6_original/obj/user/matrix.o and lab6/obj/user/matrix.o differ
diff -r -u -P lab6_original/obj/user/matrix.sym lab6/obj/user/matrix.sym
--- lab6_original/obj/user/matrix.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/matrix.sym	2016-04-29 16:22:07.756617203 +0800
@@ -0,0 +1,82 @@
+00800020 .text
+00801320 .rodata
+00802000 .data
+00802020 .bss
+00200000 .stab_info
+00200010 .stab
+00203041 .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b5 syscall
+00000000 ulib.c
+00000000 stdio.c
+0080028c cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+00801420 error_string
+00800822 printnum
+00800913 getuint
+00800962 getint
+00800d75 sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 matrix.c
+00802020 mata
+008021c0 matb
+00802360 matc
+008003be strcpy
+0080021a yield
+00800201 waitpid
+00800141 sys_yield
+008006d7 memmove
+00800dab snprintf
+008009cd vprintfmt
+0080011d sys_fork
+008002d9 cprintf
+0080023e getpid
+0080077a memcpy
+00800266 lab6_set_priority
+00800dd4 vsnprintf
+0080034d umain
+00203040 __STAB_END__
+00800150 sys_kill
+00203041 __STABSTR_BEGIN__
+00800020 __panic
+0080053a strtol
+0080038e strnlen
+0080024b print_pgdir
+00800228 kill
+0080050b strfind
+008001ea wait
+0080027d _start
+00800e53 rand
+00800482 strncmp
+00800171 sys_putc
+008003fe strncpy
+008007ca memcmp
+008001dd fork
+00800697 memset
+0080115f main
+00800f12 srand
+00800e2e hash32
+008009a9 printfmt
+00203ed2 __STABSTR_END__
+00800438 strcmp
+00800259 gettime_msec
+00800192 sys_gettime
+008002b0 vcprintf
+0080006e __warn
+008002ff cputs
+008001a1 sys_lab6_set_priority
+00801630 total
+008001b7 exit
+0080012c sys_wait
+0080010b sys_exit
+00200010 __STAB_BEGIN__
+00800366 strlen
+00800183 sys_pgdir
+008004d8 strchr
+00800162 sys_getpid
+00800f2b work
diff -r -u -P lab6_original/obj/user/pgdir.asm lab6/obj/user/pgdir.asm
--- lab6_original/obj/user/pgdir.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/pgdir.asm	2016-04-29 16:22:07.728737642 +0800
@@ -0,0 +1,2591 @@
+
+obj/__user_pgdir.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 18             	sub    $0x18,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	83 ec 04             	sub    $0x4,%esp
+  80002f:	ff 75 0c             	pushl  0xc(%ebp)
+  800032:	ff 75 08             	pushl  0x8(%ebp)
+  800035:	68 80 0f 80 00       	push   $0x800f80
+  80003a:	e8 9a 02 00 00       	call   8002d9 <cprintf>
+  80003f:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800042:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800045:	83 ec 08             	sub    $0x8,%esp
+  800048:	50                   	push   %eax
+  800049:	ff 75 10             	pushl  0x10(%ebp)
+  80004c:	e8 5f 02 00 00       	call   8002b0 <vcprintf>
+  800051:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  800054:	83 ec 0c             	sub    $0xc,%esp
+  800057:	68 9a 0f 80 00       	push   $0x800f9a
+  80005c:	e8 78 02 00 00       	call   8002d9 <cprintf>
+  800061:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	83 ec 0c             	sub    $0xc,%esp
+  800067:	6a f6                	push   $0xfffffff6
+  800069:	e8 49 01 00 00       	call   8001b7 <exit>
+
+0080006e <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80006e:	55                   	push   %ebp
+  80006f:	89 e5                	mov    %esp,%ebp
+  800071:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800074:	8d 45 14             	lea    0x14(%ebp),%eax
+  800077:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007a:	83 ec 04             	sub    $0x4,%esp
+  80007d:	ff 75 0c             	pushl  0xc(%ebp)
+  800080:	ff 75 08             	pushl  0x8(%ebp)
+  800083:	68 9c 0f 80 00       	push   $0x800f9c
+  800088:	e8 4c 02 00 00       	call   8002d9 <cprintf>
+  80008d:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800090:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800093:	83 ec 08             	sub    $0x8,%esp
+  800096:	50                   	push   %eax
+  800097:	ff 75 10             	pushl  0x10(%ebp)
+  80009a:	e8 11 02 00 00       	call   8002b0 <vcprintf>
+  80009f:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  8000a2:	83 ec 0c             	sub    $0xc,%esp
+  8000a5:	68 9a 0f 80 00       	push   $0x800f9a
+  8000aa:	e8 2a 02 00 00       	call   8002d9 <cprintf>
+  8000af:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8000b2:	90                   	nop
+  8000b3:	c9                   	leave  
+  8000b4:	c3                   	ret    
+
+008000b5 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b5:	55                   	push   %ebp
+  8000b6:	89 e5                	mov    %esp,%ebp
+  8000b8:	57                   	push   %edi
+  8000b9:	56                   	push   %esi
+  8000ba:	53                   	push   %ebx
+  8000bb:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000be:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cb:	eb 16                	jmp    8000e3 <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8000cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d0:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d3:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d6:	8b 10                	mov    (%eax),%edx
+  8000d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000db:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000df:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8000e3:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e7:	7e e4                	jle    8000cd <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000e9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ec:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000ef:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f2:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f5:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8000f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fb:	cd 80                	int    $0x80
+  8000fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  800100:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800103:	83 c4 20             	add    $0x20,%esp
+  800106:	5b                   	pop    %ebx
+  800107:	5e                   	pop    %esi
+  800108:	5f                   	pop    %edi
+  800109:	5d                   	pop    %ebp
+  80010a:	c3                   	ret    
+
+0080010b <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010b:	55                   	push   %ebp
+  80010c:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_exit, error_code);
+  80010e:	ff 75 08             	pushl  0x8(%ebp)
+  800111:	6a 01                	push   $0x1
+  800113:	e8 9d ff ff ff       	call   8000b5 <syscall>
+  800118:	83 c4 08             	add    $0x8,%esp
+}
+  80011b:	c9                   	leave  
+  80011c:	c3                   	ret    
+
+0080011d <sys_fork>:
+
+int
+sys_fork(void) {
+  80011d:	55                   	push   %ebp
+  80011e:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_fork);
+  800120:	6a 02                	push   $0x2
+  800122:	e8 8e ff ff ff       	call   8000b5 <syscall>
+  800127:	83 c4 04             	add    $0x4,%esp
+}
+  80012a:	c9                   	leave  
+  80012b:	c3                   	ret    
+
+0080012c <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80012c:	55                   	push   %ebp
+  80012d:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_wait, pid, store);
+  80012f:	ff 75 0c             	pushl  0xc(%ebp)
+  800132:	ff 75 08             	pushl  0x8(%ebp)
+  800135:	6a 03                	push   $0x3
+  800137:	e8 79 ff ff ff       	call   8000b5 <syscall>
+  80013c:	83 c4 0c             	add    $0xc,%esp
+}
+  80013f:	c9                   	leave  
+  800140:	c3                   	ret    
+
+00800141 <sys_yield>:
+
+int
+sys_yield(void) {
+  800141:	55                   	push   %ebp
+  800142:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_yield);
+  800144:	6a 0a                	push   $0xa
+  800146:	e8 6a ff ff ff       	call   8000b5 <syscall>
+  80014b:	83 c4 04             	add    $0x4,%esp
+}
+  80014e:	c9                   	leave  
+  80014f:	c3                   	ret    
+
+00800150 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800150:	55                   	push   %ebp
+  800151:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_kill, pid);
+  800153:	ff 75 08             	pushl  0x8(%ebp)
+  800156:	6a 0c                	push   $0xc
+  800158:	e8 58 ff ff ff       	call   8000b5 <syscall>
+  80015d:	83 c4 08             	add    $0x8,%esp
+}
+  800160:	c9                   	leave  
+  800161:	c3                   	ret    
+
+00800162 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800162:	55                   	push   %ebp
+  800163:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_getpid);
+  800165:	6a 12                	push   $0x12
+  800167:	e8 49 ff ff ff       	call   8000b5 <syscall>
+  80016c:	83 c4 04             	add    $0x4,%esp
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_putc, c);
+  800174:	ff 75 08             	pushl  0x8(%ebp)
+  800177:	6a 1e                	push   $0x1e
+  800179:	e8 37 ff ff ff       	call   8000b5 <syscall>
+  80017e:	83 c4 08             	add    $0x8,%esp
+}
+  800181:	c9                   	leave  
+  800182:	c3                   	ret    
+
+00800183 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800183:	55                   	push   %ebp
+  800184:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_pgdir);
+  800186:	6a 1f                	push   $0x1f
+  800188:	e8 28 ff ff ff       	call   8000b5 <syscall>
+  80018d:	83 c4 04             	add    $0x4,%esp
+}
+  800190:	c9                   	leave  
+  800191:	c3                   	ret    
+
+00800192 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  800192:	55                   	push   %ebp
+  800193:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_gettime);
+  800195:	6a 11                	push   $0x11
+  800197:	e8 19 ff ff ff       	call   8000b5 <syscall>
+  80019c:	83 c4 04             	add    $0x4,%esp
+}
+  80019f:	c9                   	leave  
+  8001a0:	c3                   	ret    
+
+008001a1 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001a1:	55                   	push   %ebp
+  8001a2:	89 e5                	mov    %esp,%ebp
+    syscall(SYS_lab6_set_priority, priority);
+  8001a4:	ff 75 08             	pushl  0x8(%ebp)
+  8001a7:	68 ff 00 00 00       	push   $0xff
+  8001ac:	e8 04 ff ff ff       	call   8000b5 <syscall>
+  8001b1:	83 c4 08             	add    $0x8,%esp
+}
+  8001b4:	90                   	nop
+  8001b5:	c9                   	leave  
+  8001b6:	c3                   	ret    
+
+008001b7 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001b7:	55                   	push   %ebp
+  8001b8:	89 e5                	mov    %esp,%ebp
+  8001ba:	83 ec 08             	sub    $0x8,%esp
+    sys_exit(error_code);
+  8001bd:	83 ec 0c             	sub    $0xc,%esp
+  8001c0:	ff 75 08             	pushl  0x8(%ebp)
+  8001c3:	e8 43 ff ff ff       	call   80010b <sys_exit>
+  8001c8:	83 c4 10             	add    $0x10,%esp
+    cprintf("BUG: exit failed.\n");
+  8001cb:	83 ec 0c             	sub    $0xc,%esp
+  8001ce:	68 b8 0f 80 00       	push   $0x800fb8
+  8001d3:	e8 01 01 00 00       	call   8002d9 <cprintf>
+  8001d8:	83 c4 10             	add    $0x10,%esp
+    while (1);
+  8001db:	eb fe                	jmp    8001db <exit+0x24>
+
+008001dd <fork>:
+}
+
+int
+fork(void) {
+  8001dd:	55                   	push   %ebp
+  8001de:	89 e5                	mov    %esp,%ebp
+  8001e0:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8001e3:	e8 35 ff ff ff       	call   80011d <sys_fork>
+}
+  8001e8:	c9                   	leave  
+  8001e9:	c3                   	ret    
+
+008001ea <wait>:
+
+int
+wait(void) {
+  8001ea:	55                   	push   %ebp
+  8001eb:	89 e5                	mov    %esp,%ebp
+  8001ed:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(0, NULL);
+  8001f0:	83 ec 08             	sub    $0x8,%esp
+  8001f3:	6a 00                	push   $0x0
+  8001f5:	6a 00                	push   $0x0
+  8001f7:	e8 30 ff ff ff       	call   80012c <sys_wait>
+  8001fc:	83 c4 10             	add    $0x10,%esp
+}
+  8001ff:	c9                   	leave  
+  800200:	c3                   	ret    
+
+00800201 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800201:	55                   	push   %ebp
+  800202:	89 e5                	mov    %esp,%ebp
+  800204:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(pid, store);
+  800207:	83 ec 08             	sub    $0x8,%esp
+  80020a:	ff 75 0c             	pushl  0xc(%ebp)
+  80020d:	ff 75 08             	pushl  0x8(%ebp)
+  800210:	e8 17 ff ff ff       	call   80012c <sys_wait>
+  800215:	83 c4 10             	add    $0x10,%esp
+}
+  800218:	c9                   	leave  
+  800219:	c3                   	ret    
+
+0080021a <yield>:
+
+void
+yield(void) {
+  80021a:	55                   	push   %ebp
+  80021b:	89 e5                	mov    %esp,%ebp
+  80021d:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800220:	e8 1c ff ff ff       	call   800141 <sys_yield>
+}
+  800225:	90                   	nop
+  800226:	c9                   	leave  
+  800227:	c3                   	ret    
+
+00800228 <kill>:
+
+int
+kill(int pid) {
+  800228:	55                   	push   %ebp
+  800229:	89 e5                	mov    %esp,%ebp
+  80022b:	83 ec 08             	sub    $0x8,%esp
+    return sys_kill(pid);
+  80022e:	83 ec 0c             	sub    $0xc,%esp
+  800231:	ff 75 08             	pushl  0x8(%ebp)
+  800234:	e8 17 ff ff ff       	call   800150 <sys_kill>
+  800239:	83 c4 10             	add    $0x10,%esp
+}
+  80023c:	c9                   	leave  
+  80023d:	c3                   	ret    
+
+0080023e <getpid>:
+
+int
+getpid(void) {
+  80023e:	55                   	push   %ebp
+  80023f:	89 e5                	mov    %esp,%ebp
+  800241:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800244:	e8 19 ff ff ff       	call   800162 <sys_getpid>
+}
+  800249:	c9                   	leave  
+  80024a:	c3                   	ret    
+
+0080024b <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80024b:	55                   	push   %ebp
+  80024c:	89 e5                	mov    %esp,%ebp
+  80024e:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800251:	e8 2d ff ff ff       	call   800183 <sys_pgdir>
+}
+  800256:	90                   	nop
+  800257:	c9                   	leave  
+  800258:	c3                   	ret    
+
+00800259 <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  800259:	55                   	push   %ebp
+  80025a:	89 e5                	mov    %esp,%ebp
+  80025c:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  80025f:	e8 2e ff ff ff       	call   800192 <sys_gettime>
+}
+  800264:	c9                   	leave  
+  800265:	c3                   	ret    
+
+00800266 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800266:	55                   	push   %ebp
+  800267:	89 e5                	mov    %esp,%ebp
+  800269:	83 ec 08             	sub    $0x8,%esp
+    sys_lab6_set_priority(priority);
+  80026c:	83 ec 0c             	sub    $0xc,%esp
+  80026f:	ff 75 08             	pushl  0x8(%ebp)
+  800272:	e8 2a ff ff ff       	call   8001a1 <sys_lab6_set_priority>
+  800277:	83 c4 10             	add    $0x10,%esp
+}
+  80027a:	90                   	nop
+  80027b:	c9                   	leave  
+  80027c:	c3                   	ret    
+
+0080027d <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  80027d:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800282:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800285:	e8 c3 00 00 00       	call   80034d <umain>
+1:  jmp 1b
+  80028a:	eb fe                	jmp    80028a <_start+0xd>
+
+0080028c <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  80028c:	55                   	push   %ebp
+  80028d:	89 e5                	mov    %esp,%ebp
+  80028f:	83 ec 08             	sub    $0x8,%esp
+    sys_putc(c);
+  800292:	83 ec 0c             	sub    $0xc,%esp
+  800295:	ff 75 08             	pushl  0x8(%ebp)
+  800298:	e8 d4 fe ff ff       	call   800171 <sys_putc>
+  80029d:	83 c4 10             	add    $0x10,%esp
+    (*cnt) ++;
+  8002a0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002a3:	8b 00                	mov    (%eax),%eax
+  8002a5:	8d 50 01             	lea    0x1(%eax),%edx
+  8002a8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002ab:	89 10                	mov    %edx,(%eax)
+}
+  8002ad:	90                   	nop
+  8002ae:	c9                   	leave  
+  8002af:	c3                   	ret    
+
+008002b0 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002b0:	55                   	push   %ebp
+  8002b1:	89 e5                	mov    %esp,%ebp
+  8002b3:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  8002b6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002bd:	ff 75 0c             	pushl  0xc(%ebp)
+  8002c0:	ff 75 08             	pushl  0x8(%ebp)
+  8002c3:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  8002c6:	50                   	push   %eax
+  8002c7:	68 8c 02 80 00       	push   $0x80028c
+  8002cc:	e8 fc 06 00 00       	call   8009cd <vprintfmt>
+  8002d1:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  8002d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002d7:	c9                   	leave  
+  8002d8:	c3                   	ret    
+
+008002d9 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  8002d9:	55                   	push   %ebp
+  8002da:	89 e5                	mov    %esp,%ebp
+  8002dc:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8002df:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8002e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  8002e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8002e8:	83 ec 08             	sub    $0x8,%esp
+  8002eb:	50                   	push   %eax
+  8002ec:	ff 75 08             	pushl  0x8(%ebp)
+  8002ef:	e8 bc ff ff ff       	call   8002b0 <vcprintf>
+  8002f4:	83 c4 10             	add    $0x10,%esp
+  8002f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  8002fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002fd:	c9                   	leave  
+  8002fe:	c3                   	ret    
+
+008002ff <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  8002ff:	55                   	push   %ebp
+  800300:	89 e5                	mov    %esp,%ebp
+  800302:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  800305:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80030c:	eb 14                	jmp    800322 <cputs+0x23>
+        cputch(c, &cnt);
+  80030e:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800312:	83 ec 08             	sub    $0x8,%esp
+  800315:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800318:	52                   	push   %edx
+  800319:	50                   	push   %eax
+  80031a:	e8 6d ff ff ff       	call   80028c <cputch>
+  80031f:	83 c4 10             	add    $0x10,%esp
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800322:	8b 45 08             	mov    0x8(%ebp),%eax
+  800325:	8d 50 01             	lea    0x1(%eax),%edx
+  800328:	89 55 08             	mov    %edx,0x8(%ebp)
+  80032b:	0f b6 00             	movzbl (%eax),%eax
+  80032e:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800331:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800335:	75 d7                	jne    80030e <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800337:	83 ec 08             	sub    $0x8,%esp
+  80033a:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  80033d:	50                   	push   %eax
+  80033e:	6a 0a                	push   $0xa
+  800340:	e8 47 ff ff ff       	call   80028c <cputch>
+  800345:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  800348:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80034b:	c9                   	leave  
+  80034c:	c3                   	ret    
+
+0080034d <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  80034d:	55                   	push   %ebp
+  80034e:	89 e5                	mov    %esp,%ebp
+  800350:	83 ec 18             	sub    $0x18,%esp
+    int ret = main();
+  800353:	e8 d3 0b 00 00       	call   800f2b <main>
+  800358:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  80035b:	83 ec 0c             	sub    $0xc,%esp
+  80035e:	ff 75 f4             	pushl  -0xc(%ebp)
+  800361:	e8 51 fe ff ff       	call   8001b7 <exit>
+
+00800366 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800366:	55                   	push   %ebp
+  800367:	89 e5                	mov    %esp,%ebp
+  800369:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  80036c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800373:	eb 04                	jmp    800379 <strlen+0x13>
+        cnt ++;
+  800375:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800379:	8b 45 08             	mov    0x8(%ebp),%eax
+  80037c:	8d 50 01             	lea    0x1(%eax),%edx
+  80037f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800382:	0f b6 00             	movzbl (%eax),%eax
+  800385:	84 c0                	test   %al,%al
+  800387:	75 ec                	jne    800375 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800389:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  80038c:	c9                   	leave  
+  80038d:	c3                   	ret    
+
+0080038e <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  80038e:	55                   	push   %ebp
+  80038f:	89 e5                	mov    %esp,%ebp
+  800391:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800394:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  80039b:	eb 04                	jmp    8003a1 <strnlen+0x13>
+        cnt ++;
+  80039d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  8003a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003a4:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003a7:	73 10                	jae    8003b9 <strnlen+0x2b>
+  8003a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003ac:	8d 50 01             	lea    0x1(%eax),%edx
+  8003af:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003b2:	0f b6 00             	movzbl (%eax),%eax
+  8003b5:	84 c0                	test   %al,%al
+  8003b7:	75 e4                	jne    80039d <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003b9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003bc:	c9                   	leave  
+  8003bd:	c3                   	ret    
+
+008003be <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  8003be:	55                   	push   %ebp
+  8003bf:	89 e5                	mov    %esp,%ebp
+  8003c1:	57                   	push   %edi
+  8003c2:	56                   	push   %esi
+  8003c3:	83 ec 20             	sub    $0x20,%esp
+  8003c6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003cc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8003cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  8003d2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003d8:	89 d1                	mov    %edx,%ecx
+  8003da:	89 c2                	mov    %eax,%edx
+  8003dc:	89 ce                	mov    %ecx,%esi
+  8003de:	89 d7                	mov    %edx,%edi
+  8003e0:	ac                   	lods   %ds:(%esi),%al
+  8003e1:	aa                   	stos   %al,%es:(%edi)
+  8003e2:	84 c0                	test   %al,%al
+  8003e4:	75 fa                	jne    8003e0 <strcpy+0x22>
+  8003e6:	89 fa                	mov    %edi,%edx
+  8003e8:	89 f1                	mov    %esi,%ecx
+  8003ea:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8003ed:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8003f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  8003f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  8003f6:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  8003f7:	83 c4 20             	add    $0x20,%esp
+  8003fa:	5e                   	pop    %esi
+  8003fb:	5f                   	pop    %edi
+  8003fc:	5d                   	pop    %ebp
+  8003fd:	c3                   	ret    
+
+008003fe <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  8003fe:	55                   	push   %ebp
+  8003ff:	89 e5                	mov    %esp,%ebp
+  800401:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800404:	8b 45 08             	mov    0x8(%ebp),%eax
+  800407:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  80040a:	eb 21                	jmp    80042d <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  80040c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80040f:	0f b6 10             	movzbl (%eax),%edx
+  800412:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800415:	88 10                	mov    %dl,(%eax)
+  800417:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80041a:	0f b6 00             	movzbl (%eax),%eax
+  80041d:	84 c0                	test   %al,%al
+  80041f:	74 04                	je     800425 <strncpy+0x27>
+            src ++;
+  800421:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800425:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800429:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  80042d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800431:	75 d9                	jne    80040c <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800433:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800436:	c9                   	leave  
+  800437:	c3                   	ret    
+
+00800438 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800438:	55                   	push   %ebp
+  800439:	89 e5                	mov    %esp,%ebp
+  80043b:	57                   	push   %edi
+  80043c:	56                   	push   %esi
+  80043d:	83 ec 20             	sub    $0x20,%esp
+  800440:	8b 45 08             	mov    0x8(%ebp),%eax
+  800443:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800446:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800449:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  80044c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80044f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800452:	89 d1                	mov    %edx,%ecx
+  800454:	89 c2                	mov    %eax,%edx
+  800456:	89 ce                	mov    %ecx,%esi
+  800458:	89 d7                	mov    %edx,%edi
+  80045a:	ac                   	lods   %ds:(%esi),%al
+  80045b:	ae                   	scas   %es:(%edi),%al
+  80045c:	75 08                	jne    800466 <strcmp+0x2e>
+  80045e:	84 c0                	test   %al,%al
+  800460:	75 f8                	jne    80045a <strcmp+0x22>
+  800462:	31 c0                	xor    %eax,%eax
+  800464:	eb 04                	jmp    80046a <strcmp+0x32>
+  800466:	19 c0                	sbb    %eax,%eax
+  800468:	0c 01                	or     $0x1,%al
+  80046a:	89 fa                	mov    %edi,%edx
+  80046c:	89 f1                	mov    %esi,%ecx
+  80046e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800471:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800474:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800477:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  80047a:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  80047b:	83 c4 20             	add    $0x20,%esp
+  80047e:	5e                   	pop    %esi
+  80047f:	5f                   	pop    %edi
+  800480:	5d                   	pop    %ebp
+  800481:	c3                   	ret    
+
+00800482 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800482:	55                   	push   %ebp
+  800483:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800485:	eb 0c                	jmp    800493 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800487:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  80048b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  80048f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800493:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800497:	74 1a                	je     8004b3 <strncmp+0x31>
+  800499:	8b 45 08             	mov    0x8(%ebp),%eax
+  80049c:	0f b6 00             	movzbl (%eax),%eax
+  80049f:	84 c0                	test   %al,%al
+  8004a1:	74 10                	je     8004b3 <strncmp+0x31>
+  8004a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004a6:	0f b6 10             	movzbl (%eax),%edx
+  8004a9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ac:	0f b6 00             	movzbl (%eax),%eax
+  8004af:	38 c2                	cmp    %al,%dl
+  8004b1:	74 d4                	je     800487 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004b3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004b7:	74 18                	je     8004d1 <strncmp+0x4f>
+  8004b9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004bc:	0f b6 00             	movzbl (%eax),%eax
+  8004bf:	0f b6 d0             	movzbl %al,%edx
+  8004c2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004c5:	0f b6 00             	movzbl (%eax),%eax
+  8004c8:	0f b6 c0             	movzbl %al,%eax
+  8004cb:	29 c2                	sub    %eax,%edx
+  8004cd:	89 d0                	mov    %edx,%eax
+  8004cf:	eb 05                	jmp    8004d6 <strncmp+0x54>
+  8004d1:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8004d6:	5d                   	pop    %ebp
+  8004d7:	c3                   	ret    
+
+008004d8 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  8004d8:	55                   	push   %ebp
+  8004d9:	89 e5                	mov    %esp,%ebp
+  8004db:	83 ec 04             	sub    $0x4,%esp
+  8004de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004e1:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  8004e4:	eb 14                	jmp    8004fa <strchr+0x22>
+        if (*s == c) {
+  8004e6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e9:	0f b6 00             	movzbl (%eax),%eax
+  8004ec:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  8004ef:	75 05                	jne    8004f6 <strchr+0x1e>
+            return (char *)s;
+  8004f1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004f4:	eb 13                	jmp    800509 <strchr+0x31>
+        }
+        s ++;
+  8004f6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  8004fa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fd:	0f b6 00             	movzbl (%eax),%eax
+  800500:	84 c0                	test   %al,%al
+  800502:	75 e2                	jne    8004e6 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800504:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800509:	c9                   	leave  
+  80050a:	c3                   	ret    
+
+0080050b <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  80050b:	55                   	push   %ebp
+  80050c:	89 e5                	mov    %esp,%ebp
+  80050e:	83 ec 04             	sub    $0x4,%esp
+  800511:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800514:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800517:	eb 0f                	jmp    800528 <strfind+0x1d>
+        if (*s == c) {
+  800519:	8b 45 08             	mov    0x8(%ebp),%eax
+  80051c:	0f b6 00             	movzbl (%eax),%eax
+  80051f:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800522:	74 10                	je     800534 <strfind+0x29>
+            break;
+        }
+        s ++;
+  800524:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800528:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052b:	0f b6 00             	movzbl (%eax),%eax
+  80052e:	84 c0                	test   %al,%al
+  800530:	75 e7                	jne    800519 <strfind+0xe>
+  800532:	eb 01                	jmp    800535 <strfind+0x2a>
+        if (*s == c) {
+            break;
+  800534:	90                   	nop
+        }
+        s ++;
+    }
+    return (char *)s;
+  800535:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800538:	c9                   	leave  
+  800539:	c3                   	ret    
+
+0080053a <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  80053a:	55                   	push   %ebp
+  80053b:	89 e5                	mov    %esp,%ebp
+  80053d:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800540:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800547:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80054e:	eb 04                	jmp    800554 <strtol+0x1a>
+        s ++;
+  800550:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800554:	8b 45 08             	mov    0x8(%ebp),%eax
+  800557:	0f b6 00             	movzbl (%eax),%eax
+  80055a:	3c 20                	cmp    $0x20,%al
+  80055c:	74 f2                	je     800550 <strtol+0x16>
+  80055e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800561:	0f b6 00             	movzbl (%eax),%eax
+  800564:	3c 09                	cmp    $0x9,%al
+  800566:	74 e8                	je     800550 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800568:	8b 45 08             	mov    0x8(%ebp),%eax
+  80056b:	0f b6 00             	movzbl (%eax),%eax
+  80056e:	3c 2b                	cmp    $0x2b,%al
+  800570:	75 06                	jne    800578 <strtol+0x3e>
+        s ++;
+  800572:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800576:	eb 15                	jmp    80058d <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800578:	8b 45 08             	mov    0x8(%ebp),%eax
+  80057b:	0f b6 00             	movzbl (%eax),%eax
+  80057e:	3c 2d                	cmp    $0x2d,%al
+  800580:	75 0b                	jne    80058d <strtol+0x53>
+        s ++, neg = 1;
+  800582:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800586:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  80058d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800591:	74 06                	je     800599 <strtol+0x5f>
+  800593:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800597:	75 24                	jne    8005bd <strtol+0x83>
+  800599:	8b 45 08             	mov    0x8(%ebp),%eax
+  80059c:	0f b6 00             	movzbl (%eax),%eax
+  80059f:	3c 30                	cmp    $0x30,%al
+  8005a1:	75 1a                	jne    8005bd <strtol+0x83>
+  8005a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a6:	83 c0 01             	add    $0x1,%eax
+  8005a9:	0f b6 00             	movzbl (%eax),%eax
+  8005ac:	3c 78                	cmp    $0x78,%al
+  8005ae:	75 0d                	jne    8005bd <strtol+0x83>
+        s += 2, base = 16;
+  8005b0:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005b4:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005bb:	eb 2a                	jmp    8005e7 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005bd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005c1:	75 17                	jne    8005da <strtol+0xa0>
+  8005c3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005c6:	0f b6 00             	movzbl (%eax),%eax
+  8005c9:	3c 30                	cmp    $0x30,%al
+  8005cb:	75 0d                	jne    8005da <strtol+0xa0>
+        s ++, base = 8;
+  8005cd:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005d1:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  8005d8:	eb 0d                	jmp    8005e7 <strtol+0xad>
+    }
+    else if (base == 0) {
+  8005da:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005de:	75 07                	jne    8005e7 <strtol+0xad>
+        base = 10;
+  8005e0:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  8005e7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ea:	0f b6 00             	movzbl (%eax),%eax
+  8005ed:	3c 2f                	cmp    $0x2f,%al
+  8005ef:	7e 1b                	jle    80060c <strtol+0xd2>
+  8005f1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005f4:	0f b6 00             	movzbl (%eax),%eax
+  8005f7:	3c 39                	cmp    $0x39,%al
+  8005f9:	7f 11                	jg     80060c <strtol+0xd2>
+            dig = *s - '0';
+  8005fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005fe:	0f b6 00             	movzbl (%eax),%eax
+  800601:	0f be c0             	movsbl %al,%eax
+  800604:	83 e8 30             	sub    $0x30,%eax
+  800607:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80060a:	eb 48                	jmp    800654 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  80060c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80060f:	0f b6 00             	movzbl (%eax),%eax
+  800612:	3c 60                	cmp    $0x60,%al
+  800614:	7e 1b                	jle    800631 <strtol+0xf7>
+  800616:	8b 45 08             	mov    0x8(%ebp),%eax
+  800619:	0f b6 00             	movzbl (%eax),%eax
+  80061c:	3c 7a                	cmp    $0x7a,%al
+  80061e:	7f 11                	jg     800631 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800620:	8b 45 08             	mov    0x8(%ebp),%eax
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	0f be c0             	movsbl %al,%eax
+  800629:	83 e8 57             	sub    $0x57,%eax
+  80062c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80062f:	eb 23                	jmp    800654 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800631:	8b 45 08             	mov    0x8(%ebp),%eax
+  800634:	0f b6 00             	movzbl (%eax),%eax
+  800637:	3c 40                	cmp    $0x40,%al
+  800639:	7e 3c                	jle    800677 <strtol+0x13d>
+  80063b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80063e:	0f b6 00             	movzbl (%eax),%eax
+  800641:	3c 5a                	cmp    $0x5a,%al
+  800643:	7f 32                	jg     800677 <strtol+0x13d>
+            dig = *s - 'A' + 10;
+  800645:	8b 45 08             	mov    0x8(%ebp),%eax
+  800648:	0f b6 00             	movzbl (%eax),%eax
+  80064b:	0f be c0             	movsbl %al,%eax
+  80064e:	83 e8 37             	sub    $0x37,%eax
+  800651:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800654:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800657:	3b 45 10             	cmp    0x10(%ebp),%eax
+  80065a:	7d 1a                	jge    800676 <strtol+0x13c>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  80065c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800660:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800663:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800667:	89 c2                	mov    %eax,%edx
+  800669:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80066c:	01 d0                	add    %edx,%eax
+  80066e:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800671:	e9 71 ff ff ff       	jmp    8005e7 <strtol+0xad>
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+            break;
+  800676:	90                   	nop
+        }
+        s ++, val = (val * base) + dig;
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  800677:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80067b:	74 08                	je     800685 <strtol+0x14b>
+        *endptr = (char *) s;
+  80067d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800680:	8b 55 08             	mov    0x8(%ebp),%edx
+  800683:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800685:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800689:	74 07                	je     800692 <strtol+0x158>
+  80068b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80068e:	f7 d8                	neg    %eax
+  800690:	eb 03                	jmp    800695 <strtol+0x15b>
+  800692:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800695:	c9                   	leave  
+  800696:	c3                   	ret    
+
+00800697 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800697:	55                   	push   %ebp
+  800698:	89 e5                	mov    %esp,%ebp
+  80069a:	57                   	push   %edi
+  80069b:	83 ec 24             	sub    $0x24,%esp
+  80069e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006a1:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006a4:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006a8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006ab:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006ae:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006b1:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006b7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006ba:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006be:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006c1:	89 d7                	mov    %edx,%edi
+  8006c3:	f3 aa                	rep stos %al,%es:(%edi)
+  8006c5:	89 fa                	mov    %edi,%edx
+  8006c7:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8006ca:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  8006cd:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006d0:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  8006d1:	83 c4 24             	add    $0x24,%esp
+  8006d4:	5f                   	pop    %edi
+  8006d5:	5d                   	pop    %ebp
+  8006d6:	c3                   	ret    
+
+008006d7 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  8006d7:	55                   	push   %ebp
+  8006d8:	89 e5                	mov    %esp,%ebp
+  8006da:	57                   	push   %edi
+  8006db:	56                   	push   %esi
+  8006dc:	53                   	push   %ebx
+  8006dd:	83 ec 30             	sub    $0x30,%esp
+  8006e0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8006e6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006e9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8006ec:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006ef:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  8006f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8006f5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  8006f8:	73 42                	jae    80073c <memmove+0x65>
+  8006fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8006fd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800700:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800703:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800706:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800709:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  80070c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  80070f:	c1 e8 02             	shr    $0x2,%eax
+  800712:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800714:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800717:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80071a:	89 d7                	mov    %edx,%edi
+  80071c:	89 c6                	mov    %eax,%esi
+  80071e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800720:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800723:	83 e1 03             	and    $0x3,%ecx
+  800726:	74 02                	je     80072a <memmove+0x53>
+  800728:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  80072a:	89 f0                	mov    %esi,%eax
+  80072c:	89 fa                	mov    %edi,%edx
+  80072e:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800731:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800734:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800737:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  80073a:	eb 36                	jmp    800772 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  80073c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80073f:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800742:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800745:	01 c2                	add    %eax,%edx
+  800747:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80074a:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  80074d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800750:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800753:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800756:	89 c1                	mov    %eax,%ecx
+  800758:	89 d8                	mov    %ebx,%eax
+  80075a:	89 d6                	mov    %edx,%esi
+  80075c:	89 c7                	mov    %eax,%edi
+  80075e:	fd                   	std    
+  80075f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800761:	fc                   	cld    
+  800762:	89 f8                	mov    %edi,%eax
+  800764:	89 f2                	mov    %esi,%edx
+  800766:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800769:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  80076c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  80076f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800772:	83 c4 30             	add    $0x30,%esp
+  800775:	5b                   	pop    %ebx
+  800776:	5e                   	pop    %esi
+  800777:	5f                   	pop    %edi
+  800778:	5d                   	pop    %ebp
+  800779:	c3                   	ret    
+
+0080077a <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  80077a:	55                   	push   %ebp
+  80077b:	89 e5                	mov    %esp,%ebp
+  80077d:	57                   	push   %edi
+  80077e:	56                   	push   %esi
+  80077f:	83 ec 20             	sub    $0x20,%esp
+  800782:	8b 45 08             	mov    0x8(%ebp),%eax
+  800785:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800788:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80078b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80078e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800791:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800794:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800797:	c1 e8 02             	shr    $0x2,%eax
+  80079a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  80079c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80079f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007a2:	89 d7                	mov    %edx,%edi
+  8007a4:	89 c6                	mov    %eax,%esi
+  8007a6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007a8:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007ab:	83 e1 03             	and    $0x3,%ecx
+  8007ae:	74 02                	je     8007b2 <memcpy+0x38>
+  8007b0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007b2:	89 f0                	mov    %esi,%eax
+  8007b4:	89 fa                	mov    %edi,%edx
+  8007b6:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007b9:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007bc:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  8007bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007c2:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007c3:	83 c4 20             	add    $0x20,%esp
+  8007c6:	5e                   	pop    %esi
+  8007c7:	5f                   	pop    %edi
+  8007c8:	5d                   	pop    %ebp
+  8007c9:	c3                   	ret    
+
+008007ca <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  8007ca:	55                   	push   %ebp
+  8007cb:	89 e5                	mov    %esp,%ebp
+  8007cd:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  8007d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007d3:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  8007d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007d9:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  8007dc:	eb 30                	jmp    80080e <memcmp+0x44>
+        if (*s1 != *s2) {
+  8007de:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8007e1:	0f b6 10             	movzbl (%eax),%edx
+  8007e4:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8007e7:	0f b6 00             	movzbl (%eax),%eax
+  8007ea:	38 c2                	cmp    %al,%dl
+  8007ec:	74 18                	je     800806 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8007ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8007f1:	0f b6 00             	movzbl (%eax),%eax
+  8007f4:	0f b6 d0             	movzbl %al,%edx
+  8007f7:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8007fa:	0f b6 00             	movzbl (%eax),%eax
+  8007fd:	0f b6 c0             	movzbl %al,%eax
+  800800:	29 c2                	sub    %eax,%edx
+  800802:	89 d0                	mov    %edx,%eax
+  800804:	eb 1a                	jmp    800820 <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800806:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  80080a:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  80080e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800811:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800814:	89 55 10             	mov    %edx,0x10(%ebp)
+  800817:	85 c0                	test   %eax,%eax
+  800819:	75 c3                	jne    8007de <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  80081b:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800820:	c9                   	leave  
+  800821:	c3                   	ret    
+
+00800822 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800822:	55                   	push   %ebp
+  800823:	89 e5                	mov    %esp,%ebp
+  800825:	83 ec 38             	sub    $0x38,%esp
+  800828:	8b 45 10             	mov    0x10(%ebp),%eax
+  80082b:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  80082e:	8b 45 14             	mov    0x14(%ebp),%eax
+  800831:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  800834:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800837:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  80083a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80083d:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800840:	8b 45 18             	mov    0x18(%ebp),%eax
+  800843:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800846:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800849:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80084c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80084f:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  800852:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800855:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800858:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  80085c:	74 1c                	je     80087a <printnum+0x58>
+  80085e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800861:	ba 00 00 00 00       	mov    $0x0,%edx
+  800866:	f7 75 e4             	divl   -0x1c(%ebp)
+  800869:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  80086c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80086f:	ba 00 00 00 00       	mov    $0x0,%edx
+  800874:	f7 75 e4             	divl   -0x1c(%ebp)
+  800877:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80087a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80087d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800880:	f7 75 e4             	divl   -0x1c(%ebp)
+  800883:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800886:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800889:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80088c:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80088f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800892:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800895:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800898:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  80089b:	8b 45 18             	mov    0x18(%ebp),%eax
+  80089e:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008a3:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008a6:	77 41                	ja     8008e9 <printnum+0xc7>
+  8008a8:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008ab:	72 05                	jb     8008b2 <printnum+0x90>
+  8008ad:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  8008b0:	77 37                	ja     8008e9 <printnum+0xc7>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008b2:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008b5:	83 e8 01             	sub    $0x1,%eax
+  8008b8:	83 ec 04             	sub    $0x4,%esp
+  8008bb:	ff 75 20             	pushl  0x20(%ebp)
+  8008be:	50                   	push   %eax
+  8008bf:	ff 75 18             	pushl  0x18(%ebp)
+  8008c2:	ff 75 ec             	pushl  -0x14(%ebp)
+  8008c5:	ff 75 e8             	pushl  -0x18(%ebp)
+  8008c8:	ff 75 0c             	pushl  0xc(%ebp)
+  8008cb:	ff 75 08             	pushl  0x8(%ebp)
+  8008ce:	e8 4f ff ff ff       	call   800822 <printnum>
+  8008d3:	83 c4 20             	add    $0x20,%esp
+  8008d6:	eb 1b                	jmp    8008f3 <printnum+0xd1>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  8008d8:	83 ec 08             	sub    $0x8,%esp
+  8008db:	ff 75 0c             	pushl  0xc(%ebp)
+  8008de:	ff 75 20             	pushl  0x20(%ebp)
+  8008e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008e4:	ff d0                	call   *%eax
+  8008e6:	83 c4 10             	add    $0x10,%esp
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8008e9:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8008ed:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8008f1:	7f e5                	jg     8008d8 <printnum+0xb6>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8008f3:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8008f6:	05 e4 10 80 00       	add    $0x8010e4,%eax
+  8008fb:	0f b6 00             	movzbl (%eax),%eax
+  8008fe:	0f be c0             	movsbl %al,%eax
+  800901:	83 ec 08             	sub    $0x8,%esp
+  800904:	ff 75 0c             	pushl  0xc(%ebp)
+  800907:	50                   	push   %eax
+  800908:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090b:	ff d0                	call   *%eax
+  80090d:	83 c4 10             	add    $0x10,%esp
+}
+  800910:	90                   	nop
+  800911:	c9                   	leave  
+  800912:	c3                   	ret    
+
+00800913 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800913:	55                   	push   %ebp
+  800914:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800916:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80091a:	7e 14                	jle    800930 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80091c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80091f:	8b 00                	mov    (%eax),%eax
+  800921:	8d 48 08             	lea    0x8(%eax),%ecx
+  800924:	8b 55 08             	mov    0x8(%ebp),%edx
+  800927:	89 0a                	mov    %ecx,(%edx)
+  800929:	8b 50 04             	mov    0x4(%eax),%edx
+  80092c:	8b 00                	mov    (%eax),%eax
+  80092e:	eb 30                	jmp    800960 <getuint+0x4d>
+    }
+    else if (lflag) {
+  800930:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800934:	74 16                	je     80094c <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800936:	8b 45 08             	mov    0x8(%ebp),%eax
+  800939:	8b 00                	mov    (%eax),%eax
+  80093b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80093e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800941:	89 0a                	mov    %ecx,(%edx)
+  800943:	8b 00                	mov    (%eax),%eax
+  800945:	ba 00 00 00 00       	mov    $0x0,%edx
+  80094a:	eb 14                	jmp    800960 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80094c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80094f:	8b 00                	mov    (%eax),%eax
+  800951:	8d 48 04             	lea    0x4(%eax),%ecx
+  800954:	8b 55 08             	mov    0x8(%ebp),%edx
+  800957:	89 0a                	mov    %ecx,(%edx)
+  800959:	8b 00                	mov    (%eax),%eax
+  80095b:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800960:	5d                   	pop    %ebp
+  800961:	c3                   	ret    
+
+00800962 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800962:	55                   	push   %ebp
+  800963:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800965:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800969:	7e 14                	jle    80097f <getint+0x1d>
+        return va_arg(*ap, long long);
+  80096b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80096e:	8b 00                	mov    (%eax),%eax
+  800970:	8d 48 08             	lea    0x8(%eax),%ecx
+  800973:	8b 55 08             	mov    0x8(%ebp),%edx
+  800976:	89 0a                	mov    %ecx,(%edx)
+  800978:	8b 50 04             	mov    0x4(%eax),%edx
+  80097b:	8b 00                	mov    (%eax),%eax
+  80097d:	eb 28                	jmp    8009a7 <getint+0x45>
+    }
+    else if (lflag) {
+  80097f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800983:	74 12                	je     800997 <getint+0x35>
+        return va_arg(*ap, long);
+  800985:	8b 45 08             	mov    0x8(%ebp),%eax
+  800988:	8b 00                	mov    (%eax),%eax
+  80098a:	8d 48 04             	lea    0x4(%eax),%ecx
+  80098d:	8b 55 08             	mov    0x8(%ebp),%edx
+  800990:	89 0a                	mov    %ecx,(%edx)
+  800992:	8b 00                	mov    (%eax),%eax
+  800994:	99                   	cltd   
+  800995:	eb 10                	jmp    8009a7 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800997:	8b 45 08             	mov    0x8(%ebp),%eax
+  80099a:	8b 00                	mov    (%eax),%eax
+  80099c:	8d 48 04             	lea    0x4(%eax),%ecx
+  80099f:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009a2:	89 0a                	mov    %ecx,(%edx)
+  8009a4:	8b 00                	mov    (%eax),%eax
+  8009a6:	99                   	cltd   
+    }
+}
+  8009a7:	5d                   	pop    %ebp
+  8009a8:	c3                   	ret    
+
+008009a9 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009a9:	55                   	push   %ebp
+  8009aa:	89 e5                	mov    %esp,%ebp
+  8009ac:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009af:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8009b8:	50                   	push   %eax
+  8009b9:	ff 75 10             	pushl  0x10(%ebp)
+  8009bc:	ff 75 0c             	pushl  0xc(%ebp)
+  8009bf:	ff 75 08             	pushl  0x8(%ebp)
+  8009c2:	e8 06 00 00 00       	call   8009cd <vprintfmt>
+  8009c7:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8009ca:	90                   	nop
+  8009cb:	c9                   	leave  
+  8009cc:	c3                   	ret    
+
+008009cd <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8009cd:	55                   	push   %ebp
+  8009ce:	89 e5                	mov    %esp,%ebp
+  8009d0:	56                   	push   %esi
+  8009d1:	53                   	push   %ebx
+  8009d2:	83 ec 20             	sub    $0x20,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009d5:	eb 17                	jmp    8009ee <vprintfmt+0x21>
+            if (ch == '\0') {
+  8009d7:	85 db                	test   %ebx,%ebx
+  8009d9:	0f 84 8e 03 00 00    	je     800d6d <vprintfmt+0x3a0>
+                return;
+            }
+            putch(ch, putdat);
+  8009df:	83 ec 08             	sub    $0x8,%esp
+  8009e2:	ff 75 0c             	pushl  0xc(%ebp)
+  8009e5:	53                   	push   %ebx
+  8009e6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009e9:	ff d0                	call   *%eax
+  8009eb:	83 c4 10             	add    $0x10,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009ee:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009f1:	8d 50 01             	lea    0x1(%eax),%edx
+  8009f4:	89 55 10             	mov    %edx,0x10(%ebp)
+  8009f7:	0f b6 00             	movzbl (%eax),%eax
+  8009fa:	0f b6 d8             	movzbl %al,%ebx
+  8009fd:	83 fb 25             	cmp    $0x25,%ebx
+  800a00:	75 d5                	jne    8009d7 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a02:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a06:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a10:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a13:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a1a:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a1d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a20:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a23:	8d 50 01             	lea    0x1(%eax),%edx
+  800a26:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a29:	0f b6 00             	movzbl (%eax),%eax
+  800a2c:	0f b6 d8             	movzbl %al,%ebx
+  800a2f:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a32:	83 f8 55             	cmp    $0x55,%eax
+  800a35:	0f 87 05 03 00 00    	ja     800d40 <vprintfmt+0x373>
+  800a3b:	8b 04 85 08 11 80 00 	mov    0x801108(,%eax,4),%eax
+  800a42:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a44:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a48:	eb d6                	jmp    800a20 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a4a:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800a4e:	eb d0                	jmp    800a20 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a50:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800a57:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a5a:	89 d0                	mov    %edx,%eax
+  800a5c:	c1 e0 02             	shl    $0x2,%eax
+  800a5f:	01 d0                	add    %edx,%eax
+  800a61:	01 c0                	add    %eax,%eax
+  800a63:	01 d8                	add    %ebx,%eax
+  800a65:	83 e8 30             	sub    $0x30,%eax
+  800a68:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800a6b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a6e:	0f b6 00             	movzbl (%eax),%eax
+  800a71:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800a74:	83 fb 2f             	cmp    $0x2f,%ebx
+  800a77:	7e 39                	jle    800ab2 <vprintfmt+0xe5>
+  800a79:	83 fb 39             	cmp    $0x39,%ebx
+  800a7c:	7f 34                	jg     800ab2 <vprintfmt+0xe5>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a7e:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  800a82:	eb d3                	jmp    800a57 <vprintfmt+0x8a>
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800a84:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a87:	8d 50 04             	lea    0x4(%eax),%edx
+  800a8a:	89 55 14             	mov    %edx,0x14(%ebp)
+  800a8d:	8b 00                	mov    (%eax),%eax
+  800a8f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800a92:	eb 1f                	jmp    800ab3 <vprintfmt+0xe6>
+
+        case '.':
+            if (width < 0)
+  800a94:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800a98:	79 86                	jns    800a20 <vprintfmt+0x53>
+                width = 0;
+  800a9a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800aa1:	e9 7a ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800aa6:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800aad:	e9 6e ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+            goto process_precision;
+  800ab2:	90                   	nop
+        case '#':
+            altflag = 1;
+            goto reswitch;
+
+        process_precision:
+            if (width < 0)
+  800ab3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ab7:	0f 89 63 ff ff ff    	jns    800a20 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800abd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ac0:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800ac3:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800aca:	e9 51 ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800acf:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800ad3:	e9 48 ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800ad8:	8b 45 14             	mov    0x14(%ebp),%eax
+  800adb:	8d 50 04             	lea    0x4(%eax),%edx
+  800ade:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ae1:	8b 00                	mov    (%eax),%eax
+  800ae3:	83 ec 08             	sub    $0x8,%esp
+  800ae6:	ff 75 0c             	pushl  0xc(%ebp)
+  800ae9:	50                   	push   %eax
+  800aea:	8b 45 08             	mov    0x8(%ebp),%eax
+  800aed:	ff d0                	call   *%eax
+  800aef:	83 c4 10             	add    $0x10,%esp
+            break;
+  800af2:	e9 71 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800af7:	8b 45 14             	mov    0x14(%ebp),%eax
+  800afa:	8d 50 04             	lea    0x4(%eax),%edx
+  800afd:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b00:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b02:	85 db                	test   %ebx,%ebx
+  800b04:	79 02                	jns    800b08 <vprintfmt+0x13b>
+                err = -err;
+  800b06:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b08:	83 fb 18             	cmp    $0x18,%ebx
+  800b0b:	7f 0b                	jg     800b18 <vprintfmt+0x14b>
+  800b0d:	8b 34 9d 80 10 80 00 	mov    0x801080(,%ebx,4),%esi
+  800b14:	85 f6                	test   %esi,%esi
+  800b16:	75 19                	jne    800b31 <vprintfmt+0x164>
+                printfmt(putch, putdat, "error %d", err);
+  800b18:	53                   	push   %ebx
+  800b19:	68 f5 10 80 00       	push   $0x8010f5
+  800b1e:	ff 75 0c             	pushl  0xc(%ebp)
+  800b21:	ff 75 08             	pushl  0x8(%ebp)
+  800b24:	e8 80 fe ff ff       	call   8009a9 <printfmt>
+  800b29:	83 c4 10             	add    $0x10,%esp
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b2c:	e9 37 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  800b31:	56                   	push   %esi
+  800b32:	68 fe 10 80 00       	push   $0x8010fe
+  800b37:	ff 75 0c             	pushl  0xc(%ebp)
+  800b3a:	ff 75 08             	pushl  0x8(%ebp)
+  800b3d:	e8 67 fe ff ff       	call   8009a9 <printfmt>
+  800b42:	83 c4 10             	add    $0x10,%esp
+            }
+            break;
+  800b45:	e9 1e 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800b4a:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b4d:	8d 50 04             	lea    0x4(%eax),%edx
+  800b50:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b53:	8b 30                	mov    (%eax),%esi
+  800b55:	85 f6                	test   %esi,%esi
+  800b57:	75 05                	jne    800b5e <vprintfmt+0x191>
+                p = "(null)";
+  800b59:	be 01 11 80 00       	mov    $0x801101,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800b5e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b62:	7e 76                	jle    800bda <vprintfmt+0x20d>
+  800b64:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800b68:	74 70                	je     800bda <vprintfmt+0x20d>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b6a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b6d:	83 ec 08             	sub    $0x8,%esp
+  800b70:	50                   	push   %eax
+  800b71:	56                   	push   %esi
+  800b72:	e8 17 f8 ff ff       	call   80038e <strnlen>
+  800b77:	83 c4 10             	add    $0x10,%esp
+  800b7a:	89 c2                	mov    %eax,%edx
+  800b7c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800b7f:	29 d0                	sub    %edx,%eax
+  800b81:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b84:	eb 17                	jmp    800b9d <vprintfmt+0x1d0>
+                    putch(padc, putdat);
+  800b86:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800b8a:	83 ec 08             	sub    $0x8,%esp
+  800b8d:	ff 75 0c             	pushl  0xc(%ebp)
+  800b90:	50                   	push   %eax
+  800b91:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b94:	ff d0                	call   *%eax
+  800b96:	83 c4 10             	add    $0x10,%esp
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b99:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800b9d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ba1:	7f e3                	jg     800b86 <vprintfmt+0x1b9>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800ba3:	eb 35                	jmp    800bda <vprintfmt+0x20d>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800ba5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800ba9:	74 1c                	je     800bc7 <vprintfmt+0x1fa>
+  800bab:	83 fb 1f             	cmp    $0x1f,%ebx
+  800bae:	7e 05                	jle    800bb5 <vprintfmt+0x1e8>
+  800bb0:	83 fb 7e             	cmp    $0x7e,%ebx
+  800bb3:	7e 12                	jle    800bc7 <vprintfmt+0x1fa>
+                    putch('?', putdat);
+  800bb5:	83 ec 08             	sub    $0x8,%esp
+  800bb8:	ff 75 0c             	pushl  0xc(%ebp)
+  800bbb:	6a 3f                	push   $0x3f
+  800bbd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bc0:	ff d0                	call   *%eax
+  800bc2:	83 c4 10             	add    $0x10,%esp
+  800bc5:	eb 0f                	jmp    800bd6 <vprintfmt+0x209>
+                }
+                else {
+                    putch(ch, putdat);
+  800bc7:	83 ec 08             	sub    $0x8,%esp
+  800bca:	ff 75 0c             	pushl  0xc(%ebp)
+  800bcd:	53                   	push   %ebx
+  800bce:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bd1:	ff d0                	call   *%eax
+  800bd3:	83 c4 10             	add    $0x10,%esp
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bd6:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800bda:	89 f0                	mov    %esi,%eax
+  800bdc:	8d 70 01             	lea    0x1(%eax),%esi
+  800bdf:	0f b6 00             	movzbl (%eax),%eax
+  800be2:	0f be d8             	movsbl %al,%ebx
+  800be5:	85 db                	test   %ebx,%ebx
+  800be7:	74 26                	je     800c0f <vprintfmt+0x242>
+  800be9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800bed:	78 b6                	js     800ba5 <vprintfmt+0x1d8>
+  800bef:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  800bf3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800bf7:	79 ac                	jns    800ba5 <vprintfmt+0x1d8>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800bf9:	eb 14                	jmp    800c0f <vprintfmt+0x242>
+                putch(' ', putdat);
+  800bfb:	83 ec 08             	sub    $0x8,%esp
+  800bfe:	ff 75 0c             	pushl  0xc(%ebp)
+  800c01:	6a 20                	push   $0x20
+  800c03:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c06:	ff d0                	call   *%eax
+  800c08:	83 c4 10             	add    $0x10,%esp
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c0b:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c0f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c13:	7f e6                	jg     800bfb <vprintfmt+0x22e>
+                putch(' ', putdat);
+            }
+            break;
+  800c15:	e9 4e 01 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c1a:	83 ec 08             	sub    $0x8,%esp
+  800c1d:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c20:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c23:	50                   	push   %eax
+  800c24:	e8 39 fd ff ff       	call   800962 <getint>
+  800c29:	83 c4 10             	add    $0x10,%esp
+  800c2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c2f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c32:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c35:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c38:	85 d2                	test   %edx,%edx
+  800c3a:	79 23                	jns    800c5f <vprintfmt+0x292>
+                putch('-', putdat);
+  800c3c:	83 ec 08             	sub    $0x8,%esp
+  800c3f:	ff 75 0c             	pushl  0xc(%ebp)
+  800c42:	6a 2d                	push   $0x2d
+  800c44:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c47:	ff d0                	call   *%eax
+  800c49:	83 c4 10             	add    $0x10,%esp
+                num = -(long long)num;
+  800c4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c4f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c52:	f7 d8                	neg    %eax
+  800c54:	83 d2 00             	adc    $0x0,%edx
+  800c57:	f7 da                	neg    %edx
+  800c59:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c5c:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800c5f:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c66:	e9 9f 00 00 00       	jmp    800d0a <vprintfmt+0x33d>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800c6b:	83 ec 08             	sub    $0x8,%esp
+  800c6e:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c71:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c74:	50                   	push   %eax
+  800c75:	e8 99 fc ff ff       	call   800913 <getuint>
+  800c7a:	83 c4 10             	add    $0x10,%esp
+  800c7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c80:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800c83:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c8a:	eb 7e                	jmp    800d0a <vprintfmt+0x33d>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800c8c:	83 ec 08             	sub    $0x8,%esp
+  800c8f:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c92:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c95:	50                   	push   %eax
+  800c96:	e8 78 fc ff ff       	call   800913 <getuint>
+  800c9b:	83 c4 10             	add    $0x10,%esp
+  800c9e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ca1:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800ca4:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800cab:	eb 5d                	jmp    800d0a <vprintfmt+0x33d>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800cad:	83 ec 08             	sub    $0x8,%esp
+  800cb0:	ff 75 0c             	pushl  0xc(%ebp)
+  800cb3:	6a 30                	push   $0x30
+  800cb5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb8:	ff d0                	call   *%eax
+  800cba:	83 c4 10             	add    $0x10,%esp
+            putch('x', putdat);
+  800cbd:	83 ec 08             	sub    $0x8,%esp
+  800cc0:	ff 75 0c             	pushl  0xc(%ebp)
+  800cc3:	6a 78                	push   $0x78
+  800cc5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cc8:	ff d0                	call   *%eax
+  800cca:	83 c4 10             	add    $0x10,%esp
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800ccd:	8b 45 14             	mov    0x14(%ebp),%eax
+  800cd0:	8d 50 04             	lea    0x4(%eax),%edx
+  800cd3:	89 55 14             	mov    %edx,0x14(%ebp)
+  800cd6:	8b 00                	mov    (%eax),%eax
+  800cd8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cdb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800ce2:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800ce9:	eb 1f                	jmp    800d0a <vprintfmt+0x33d>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800ceb:	83 ec 08             	sub    $0x8,%esp
+  800cee:	ff 75 e0             	pushl  -0x20(%ebp)
+  800cf1:	8d 45 14             	lea    0x14(%ebp),%eax
+  800cf4:	50                   	push   %eax
+  800cf5:	e8 19 fc ff ff       	call   800913 <getuint>
+  800cfa:	83 c4 10             	add    $0x10,%esp
+  800cfd:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d00:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d03:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d0a:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d11:	83 ec 04             	sub    $0x4,%esp
+  800d14:	52                   	push   %edx
+  800d15:	ff 75 e8             	pushl  -0x18(%ebp)
+  800d18:	50                   	push   %eax
+  800d19:	ff 75 f4             	pushl  -0xc(%ebp)
+  800d1c:	ff 75 f0             	pushl  -0x10(%ebp)
+  800d1f:	ff 75 0c             	pushl  0xc(%ebp)
+  800d22:	ff 75 08             	pushl  0x8(%ebp)
+  800d25:	e8 f8 fa ff ff       	call   800822 <printnum>
+  800d2a:	83 c4 20             	add    $0x20,%esp
+            break;
+  800d2d:	eb 39                	jmp    800d68 <vprintfmt+0x39b>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800d2f:	83 ec 08             	sub    $0x8,%esp
+  800d32:	ff 75 0c             	pushl  0xc(%ebp)
+  800d35:	53                   	push   %ebx
+  800d36:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d39:	ff d0                	call   *%eax
+  800d3b:	83 c4 10             	add    $0x10,%esp
+            break;
+  800d3e:	eb 28                	jmp    800d68 <vprintfmt+0x39b>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800d40:	83 ec 08             	sub    $0x8,%esp
+  800d43:	ff 75 0c             	pushl  0xc(%ebp)
+  800d46:	6a 25                	push   $0x25
+  800d48:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d4b:	ff d0                	call   *%eax
+  800d4d:	83 c4 10             	add    $0x10,%esp
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800d50:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d54:	eb 04                	jmp    800d5a <vprintfmt+0x38d>
+  800d56:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d5a:	8b 45 10             	mov    0x10(%ebp),%eax
+  800d5d:	83 e8 01             	sub    $0x1,%eax
+  800d60:	0f b6 00             	movzbl (%eax),%eax
+  800d63:	3c 25                	cmp    $0x25,%al
+  800d65:	75 ef                	jne    800d56 <vprintfmt+0x389>
+                /* do nothing */;
+            break;
+  800d67:	90                   	nop
+        }
+    }
+  800d68:	e9 68 fc ff ff       	jmp    8009d5 <vprintfmt+0x8>
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+            if (ch == '\0') {
+                return;
+  800d6d:	90                   	nop
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  800d6e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  800d71:	5b                   	pop    %ebx
+  800d72:	5e                   	pop    %esi
+  800d73:	5d                   	pop    %ebp
+  800d74:	c3                   	ret    
+
+00800d75 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800d75:	55                   	push   %ebp
+  800d76:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800d78:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d7b:	8b 40 08             	mov    0x8(%eax),%eax
+  800d7e:	8d 50 01             	lea    0x1(%eax),%edx
+  800d81:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d84:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800d87:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d8a:	8b 10                	mov    (%eax),%edx
+  800d8c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d8f:	8b 40 04             	mov    0x4(%eax),%eax
+  800d92:	39 c2                	cmp    %eax,%edx
+  800d94:	73 12                	jae    800da8 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800d96:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d99:	8b 00                	mov    (%eax),%eax
+  800d9b:	8d 48 01             	lea    0x1(%eax),%ecx
+  800d9e:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800da1:	89 0a                	mov    %ecx,(%edx)
+  800da3:	8b 55 08             	mov    0x8(%ebp),%edx
+  800da6:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800da8:	90                   	nop
+  800da9:	5d                   	pop    %ebp
+  800daa:	c3                   	ret    
+
+00800dab <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800dab:	55                   	push   %ebp
+  800dac:	89 e5                	mov    %esp,%ebp
+  800dae:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800db1:	8d 45 14             	lea    0x14(%ebp),%eax
+  800db4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800db7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800dba:	50                   	push   %eax
+  800dbb:	ff 75 10             	pushl  0x10(%ebp)
+  800dbe:	ff 75 0c             	pushl  0xc(%ebp)
+  800dc1:	ff 75 08             	pushl  0x8(%ebp)
+  800dc4:	e8 0b 00 00 00       	call   800dd4 <vsnprintf>
+  800dc9:	83 c4 10             	add    $0x10,%esp
+  800dcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800dcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800dd2:	c9                   	leave  
+  800dd3:	c3                   	ret    
+
+00800dd4 <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800dd4:	55                   	push   %ebp
+  800dd5:	89 e5                	mov    %esp,%ebp
+  800dd7:	83 ec 18             	sub    $0x18,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800dda:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ddd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800de0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800de3:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800de6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de9:	01 d0                	add    %edx,%eax
+  800deb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800dee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800df5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800df9:	74 0a                	je     800e05 <vsnprintf+0x31>
+  800dfb:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800dfe:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e01:	39 c2                	cmp    %eax,%edx
+  800e03:	76 07                	jbe    800e0c <vsnprintf+0x38>
+        return -E_INVAL;
+  800e05:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e0a:	eb 20                	jmp    800e2c <vsnprintf+0x58>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e0c:	ff 75 14             	pushl  0x14(%ebp)
+  800e0f:	ff 75 10             	pushl  0x10(%ebp)
+  800e12:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800e15:	50                   	push   %eax
+  800e16:	68 75 0d 80 00       	push   $0x800d75
+  800e1b:	e8 ad fb ff ff       	call   8009cd <vprintfmt>
+  800e20:	83 c4 10             	add    $0x10,%esp
+    // null terminate the buffer
+    *b.buf = '\0';
+  800e23:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e26:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800e29:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e2c:	c9                   	leave  
+  800e2d:	c3                   	ret    
+
+00800e2e <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800e2e:	55                   	push   %ebp
+  800e2f:	89 e5                	mov    %esp,%ebp
+  800e31:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800e34:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e37:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800e3d:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800e40:	b8 20 00 00 00       	mov    $0x20,%eax
+  800e45:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800e48:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800e4b:	89 c1                	mov    %eax,%ecx
+  800e4d:	d3 ea                	shr    %cl,%edx
+  800e4f:	89 d0                	mov    %edx,%eax
+}
+  800e51:	c9                   	leave  
+  800e52:	c3                   	ret    
+
+00800e53 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800e53:	55                   	push   %ebp
+  800e54:	89 e5                	mov    %esp,%ebp
+  800e56:	57                   	push   %edi
+  800e57:	56                   	push   %esi
+  800e58:	53                   	push   %ebx
+  800e59:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800e5c:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e61:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800e67:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800e6d:	6b f0 05             	imul   $0x5,%eax,%esi
+  800e70:	01 fe                	add    %edi,%esi
+  800e72:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800e77:	f7 e7                	mul    %edi
+  800e79:	01 d6                	add    %edx,%esi
+  800e7b:	89 f2                	mov    %esi,%edx
+  800e7d:	83 c0 0b             	add    $0xb,%eax
+  800e80:	83 d2 00             	adc    $0x0,%edx
+  800e83:	89 c7                	mov    %eax,%edi
+  800e85:	83 e7 ff             	and    $0xffffffff,%edi
+  800e88:	89 f9                	mov    %edi,%ecx
+  800e8a:	0f b7 da             	movzwl %dx,%ebx
+  800e8d:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800e93:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800e99:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e9e:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ea4:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ea8:	c1 ea 0c             	shr    $0xc,%edx
+  800eab:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800eae:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800eb1:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800eb8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ebb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ebe:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ec1:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800ec4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec7:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800eca:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ece:	74 1c                	je     800eec <rand+0x99>
+  800ed0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ed3:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ed8:	f7 75 dc             	divl   -0x24(%ebp)
+  800edb:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800ede:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ee1:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ee6:	f7 75 dc             	divl   -0x24(%ebp)
+  800ee9:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800eec:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800eef:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800ef2:	f7 75 dc             	divl   -0x24(%ebp)
+  800ef5:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ef8:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800efb:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800efe:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800f01:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f04:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f07:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800f0a:	83 c4 24             	add    $0x24,%esp
+  800f0d:	5b                   	pop    %ebx
+  800f0e:	5e                   	pop    %esi
+  800f0f:	5f                   	pop    %edi
+  800f10:	5d                   	pop    %ebp
+  800f11:	c3                   	ret    
+
+00800f12 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800f12:	55                   	push   %ebp
+  800f13:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800f15:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f18:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f1d:	a3 00 20 80 00       	mov    %eax,0x802000
+  800f22:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800f28:	90                   	nop
+  800f29:	5d                   	pop    %ebp
+  800f2a:	c3                   	ret    
+
+00800f2b <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  800f2b:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  800f2f:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f32:	ff 71 fc             	pushl  -0x4(%ecx)
+  800f35:	55                   	push   %ebp
+  800f36:	89 e5                	mov    %esp,%ebp
+  800f38:	51                   	push   %ecx
+  800f39:	83 ec 04             	sub    $0x4,%esp
+    cprintf("I am %d, print pgdir.\n", getpid());
+  800f3c:	e8 fd f2 ff ff       	call   80023e <getpid>
+  800f41:	83 ec 08             	sub    $0x8,%esp
+  800f44:	50                   	push   %eax
+  800f45:	68 60 12 80 00       	push   $0x801260
+  800f4a:	e8 8a f3 ff ff       	call   8002d9 <cprintf>
+  800f4f:	83 c4 10             	add    $0x10,%esp
+    print_pgdir();
+  800f52:	e8 f4 f2 ff ff       	call   80024b <print_pgdir>
+    cprintf("pgdir pass.\n");
+  800f57:	83 ec 0c             	sub    $0xc,%esp
+  800f5a:	68 77 12 80 00       	push   $0x801277
+  800f5f:	e8 75 f3 ff ff       	call   8002d9 <cprintf>
+  800f64:	83 c4 10             	add    $0x10,%esp
+    return 0;
+  800f67:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800f6c:	8b 4d fc             	mov    -0x4(%ebp),%ecx
+  800f6f:	c9                   	leave  
+  800f70:	8d 61 fc             	lea    -0x4(%ecx),%esp
+  800f73:	c3                   	ret    
diff -r -u -P lab6_original/obj/user/pgdir.d lab6/obj/user/pgdir.d
--- lab6_original/obj/user/pgdir.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/pgdir.d	2016-04-29 16:22:06.852516425 +0800
@@ -0,0 +1,2 @@
+obj/user/pgdir.o obj/user/pgdir.d: user/pgdir.c libs/stdio.h libs/defs.h \
+ libs/stdarg.h user/libs/ulib.h
Binary files lab6_original/obj/user/pgdir.o and lab6/obj/user/pgdir.o differ
diff -r -u -P lab6_original/obj/user/pgdir.sym lab6/obj/user/pgdir.sym
--- lab6_original/obj/user/pgdir.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/pgdir.sym	2016-04-29 16:22:07.752634408 +0800
@@ -0,0 +1,76 @@
+00800020 .text
+00800f80 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202cb1 .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b5 syscall
+00000000 ulib.c
+00000000 stdio.c
+0080028c cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+00801080 error_string
+00800822 printnum
+00800913 getuint
+00800962 getint
+00800d75 sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 pgdir.c
+008003be strcpy
+0080021a yield
+00800201 waitpid
+00800141 sys_yield
+008006d7 memmove
+00800dab snprintf
+008009cd vprintfmt
+0080011d sys_fork
+008002d9 cprintf
+0080023e getpid
+0080077a memcpy
+00800266 lab6_set_priority
+00800dd4 vsnprintf
+0080034d umain
+00202cb0 __STAB_END__
+00800150 sys_kill
+00202cb1 __STABSTR_BEGIN__
+00800020 __panic
+0080053a strtol
+0080038e strnlen
+0080024b print_pgdir
+00800228 kill
+0080050b strfind
+008001ea wait
+0080027d _start
+00800e53 rand
+00800482 strncmp
+00800171 sys_putc
+008003fe strncpy
+008007ca memcmp
+008001dd fork
+00800697 memset
+00800f2b main
+00800f12 srand
+00800e2e hash32
+008009a9 printfmt
+00203a8f __STABSTR_END__
+00800438 strcmp
+00800259 gettime_msec
+00800192 sys_gettime
+008002b0 vcprintf
+0080006e __warn
+008002ff cputs
+008001a1 sys_lab6_set_priority
+008001b7 exit
+0080012c sys_wait
+0080010b sys_exit
+00200010 __STAB_BEGIN__
+00800366 strlen
+00800183 sys_pgdir
+008004d8 strchr
+00800162 sys_getpid
diff -r -u -P lab6_original/obj/user/priority.asm lab6/obj/user/priority.asm
--- lab6_original/obj/user/priority.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/priority.asm	2016-04-29 16:22:07.657047345 +0800
@@ -0,0 +1,2871 @@
+
+obj/__user_priority.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 18             	sub    $0x18,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	83 ec 04             	sub    $0x4,%esp
+  80002f:	ff 75 0c             	pushl  0xc(%ebp)
+  800032:	ff 75 08             	pushl  0x8(%ebp)
+  800035:	68 e0 11 80 00       	push   $0x8011e0
+  80003a:	e8 9a 02 00 00       	call   8002d9 <cprintf>
+  80003f:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800042:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800045:	83 ec 08             	sub    $0x8,%esp
+  800048:	50                   	push   %eax
+  800049:	ff 75 10             	pushl  0x10(%ebp)
+  80004c:	e8 5f 02 00 00       	call   8002b0 <vcprintf>
+  800051:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  800054:	83 ec 0c             	sub    $0xc,%esp
+  800057:	68 fa 11 80 00       	push   $0x8011fa
+  80005c:	e8 78 02 00 00       	call   8002d9 <cprintf>
+  800061:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	83 ec 0c             	sub    $0xc,%esp
+  800067:	6a f6                	push   $0xfffffff6
+  800069:	e8 49 01 00 00       	call   8001b7 <exit>
+
+0080006e <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80006e:	55                   	push   %ebp
+  80006f:	89 e5                	mov    %esp,%ebp
+  800071:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800074:	8d 45 14             	lea    0x14(%ebp),%eax
+  800077:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007a:	83 ec 04             	sub    $0x4,%esp
+  80007d:	ff 75 0c             	pushl  0xc(%ebp)
+  800080:	ff 75 08             	pushl  0x8(%ebp)
+  800083:	68 fc 11 80 00       	push   $0x8011fc
+  800088:	e8 4c 02 00 00       	call   8002d9 <cprintf>
+  80008d:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800090:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800093:	83 ec 08             	sub    $0x8,%esp
+  800096:	50                   	push   %eax
+  800097:	ff 75 10             	pushl  0x10(%ebp)
+  80009a:	e8 11 02 00 00       	call   8002b0 <vcprintf>
+  80009f:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  8000a2:	83 ec 0c             	sub    $0xc,%esp
+  8000a5:	68 fa 11 80 00       	push   $0x8011fa
+  8000aa:	e8 2a 02 00 00       	call   8002d9 <cprintf>
+  8000af:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8000b2:	90                   	nop
+  8000b3:	c9                   	leave  
+  8000b4:	c3                   	ret    
+
+008000b5 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b5:	55                   	push   %ebp
+  8000b6:	89 e5                	mov    %esp,%ebp
+  8000b8:	57                   	push   %edi
+  8000b9:	56                   	push   %esi
+  8000ba:	53                   	push   %ebx
+  8000bb:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000be:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cb:	eb 16                	jmp    8000e3 <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8000cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d0:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d3:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d6:	8b 10                	mov    (%eax),%edx
+  8000d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000db:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000df:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8000e3:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e7:	7e e4                	jle    8000cd <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000e9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ec:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000ef:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f2:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f5:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8000f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fb:	cd 80                	int    $0x80
+  8000fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  800100:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800103:	83 c4 20             	add    $0x20,%esp
+  800106:	5b                   	pop    %ebx
+  800107:	5e                   	pop    %esi
+  800108:	5f                   	pop    %edi
+  800109:	5d                   	pop    %ebp
+  80010a:	c3                   	ret    
+
+0080010b <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010b:	55                   	push   %ebp
+  80010c:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_exit, error_code);
+  80010e:	ff 75 08             	pushl  0x8(%ebp)
+  800111:	6a 01                	push   $0x1
+  800113:	e8 9d ff ff ff       	call   8000b5 <syscall>
+  800118:	83 c4 08             	add    $0x8,%esp
+}
+  80011b:	c9                   	leave  
+  80011c:	c3                   	ret    
+
+0080011d <sys_fork>:
+
+int
+sys_fork(void) {
+  80011d:	55                   	push   %ebp
+  80011e:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_fork);
+  800120:	6a 02                	push   $0x2
+  800122:	e8 8e ff ff ff       	call   8000b5 <syscall>
+  800127:	83 c4 04             	add    $0x4,%esp
+}
+  80012a:	c9                   	leave  
+  80012b:	c3                   	ret    
+
+0080012c <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80012c:	55                   	push   %ebp
+  80012d:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_wait, pid, store);
+  80012f:	ff 75 0c             	pushl  0xc(%ebp)
+  800132:	ff 75 08             	pushl  0x8(%ebp)
+  800135:	6a 03                	push   $0x3
+  800137:	e8 79 ff ff ff       	call   8000b5 <syscall>
+  80013c:	83 c4 0c             	add    $0xc,%esp
+}
+  80013f:	c9                   	leave  
+  800140:	c3                   	ret    
+
+00800141 <sys_yield>:
+
+int
+sys_yield(void) {
+  800141:	55                   	push   %ebp
+  800142:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_yield);
+  800144:	6a 0a                	push   $0xa
+  800146:	e8 6a ff ff ff       	call   8000b5 <syscall>
+  80014b:	83 c4 04             	add    $0x4,%esp
+}
+  80014e:	c9                   	leave  
+  80014f:	c3                   	ret    
+
+00800150 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800150:	55                   	push   %ebp
+  800151:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_kill, pid);
+  800153:	ff 75 08             	pushl  0x8(%ebp)
+  800156:	6a 0c                	push   $0xc
+  800158:	e8 58 ff ff ff       	call   8000b5 <syscall>
+  80015d:	83 c4 08             	add    $0x8,%esp
+}
+  800160:	c9                   	leave  
+  800161:	c3                   	ret    
+
+00800162 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800162:	55                   	push   %ebp
+  800163:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_getpid);
+  800165:	6a 12                	push   $0x12
+  800167:	e8 49 ff ff ff       	call   8000b5 <syscall>
+  80016c:	83 c4 04             	add    $0x4,%esp
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_putc, c);
+  800174:	ff 75 08             	pushl  0x8(%ebp)
+  800177:	6a 1e                	push   $0x1e
+  800179:	e8 37 ff ff ff       	call   8000b5 <syscall>
+  80017e:	83 c4 08             	add    $0x8,%esp
+}
+  800181:	c9                   	leave  
+  800182:	c3                   	ret    
+
+00800183 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800183:	55                   	push   %ebp
+  800184:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_pgdir);
+  800186:	6a 1f                	push   $0x1f
+  800188:	e8 28 ff ff ff       	call   8000b5 <syscall>
+  80018d:	83 c4 04             	add    $0x4,%esp
+}
+  800190:	c9                   	leave  
+  800191:	c3                   	ret    
+
+00800192 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  800192:	55                   	push   %ebp
+  800193:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_gettime);
+  800195:	6a 11                	push   $0x11
+  800197:	e8 19 ff ff ff       	call   8000b5 <syscall>
+  80019c:	83 c4 04             	add    $0x4,%esp
+}
+  80019f:	c9                   	leave  
+  8001a0:	c3                   	ret    
+
+008001a1 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001a1:	55                   	push   %ebp
+  8001a2:	89 e5                	mov    %esp,%ebp
+    syscall(SYS_lab6_set_priority, priority);
+  8001a4:	ff 75 08             	pushl  0x8(%ebp)
+  8001a7:	68 ff 00 00 00       	push   $0xff
+  8001ac:	e8 04 ff ff ff       	call   8000b5 <syscall>
+  8001b1:	83 c4 08             	add    $0x8,%esp
+}
+  8001b4:	90                   	nop
+  8001b5:	c9                   	leave  
+  8001b6:	c3                   	ret    
+
+008001b7 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001b7:	55                   	push   %ebp
+  8001b8:	89 e5                	mov    %esp,%ebp
+  8001ba:	83 ec 08             	sub    $0x8,%esp
+    sys_exit(error_code);
+  8001bd:	83 ec 0c             	sub    $0xc,%esp
+  8001c0:	ff 75 08             	pushl  0x8(%ebp)
+  8001c3:	e8 43 ff ff ff       	call   80010b <sys_exit>
+  8001c8:	83 c4 10             	add    $0x10,%esp
+    cprintf("BUG: exit failed.\n");
+  8001cb:	83 ec 0c             	sub    $0xc,%esp
+  8001ce:	68 18 12 80 00       	push   $0x801218
+  8001d3:	e8 01 01 00 00       	call   8002d9 <cprintf>
+  8001d8:	83 c4 10             	add    $0x10,%esp
+    while (1);
+  8001db:	eb fe                	jmp    8001db <exit+0x24>
+
+008001dd <fork>:
+}
+
+int
+fork(void) {
+  8001dd:	55                   	push   %ebp
+  8001de:	89 e5                	mov    %esp,%ebp
+  8001e0:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8001e3:	e8 35 ff ff ff       	call   80011d <sys_fork>
+}
+  8001e8:	c9                   	leave  
+  8001e9:	c3                   	ret    
+
+008001ea <wait>:
+
+int
+wait(void) {
+  8001ea:	55                   	push   %ebp
+  8001eb:	89 e5                	mov    %esp,%ebp
+  8001ed:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(0, NULL);
+  8001f0:	83 ec 08             	sub    $0x8,%esp
+  8001f3:	6a 00                	push   $0x0
+  8001f5:	6a 00                	push   $0x0
+  8001f7:	e8 30 ff ff ff       	call   80012c <sys_wait>
+  8001fc:	83 c4 10             	add    $0x10,%esp
+}
+  8001ff:	c9                   	leave  
+  800200:	c3                   	ret    
+
+00800201 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800201:	55                   	push   %ebp
+  800202:	89 e5                	mov    %esp,%ebp
+  800204:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(pid, store);
+  800207:	83 ec 08             	sub    $0x8,%esp
+  80020a:	ff 75 0c             	pushl  0xc(%ebp)
+  80020d:	ff 75 08             	pushl  0x8(%ebp)
+  800210:	e8 17 ff ff ff       	call   80012c <sys_wait>
+  800215:	83 c4 10             	add    $0x10,%esp
+}
+  800218:	c9                   	leave  
+  800219:	c3                   	ret    
+
+0080021a <yield>:
+
+void
+yield(void) {
+  80021a:	55                   	push   %ebp
+  80021b:	89 e5                	mov    %esp,%ebp
+  80021d:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800220:	e8 1c ff ff ff       	call   800141 <sys_yield>
+}
+  800225:	90                   	nop
+  800226:	c9                   	leave  
+  800227:	c3                   	ret    
+
+00800228 <kill>:
+
+int
+kill(int pid) {
+  800228:	55                   	push   %ebp
+  800229:	89 e5                	mov    %esp,%ebp
+  80022b:	83 ec 08             	sub    $0x8,%esp
+    return sys_kill(pid);
+  80022e:	83 ec 0c             	sub    $0xc,%esp
+  800231:	ff 75 08             	pushl  0x8(%ebp)
+  800234:	e8 17 ff ff ff       	call   800150 <sys_kill>
+  800239:	83 c4 10             	add    $0x10,%esp
+}
+  80023c:	c9                   	leave  
+  80023d:	c3                   	ret    
+
+0080023e <getpid>:
+
+int
+getpid(void) {
+  80023e:	55                   	push   %ebp
+  80023f:	89 e5                	mov    %esp,%ebp
+  800241:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800244:	e8 19 ff ff ff       	call   800162 <sys_getpid>
+}
+  800249:	c9                   	leave  
+  80024a:	c3                   	ret    
+
+0080024b <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80024b:	55                   	push   %ebp
+  80024c:	89 e5                	mov    %esp,%ebp
+  80024e:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800251:	e8 2d ff ff ff       	call   800183 <sys_pgdir>
+}
+  800256:	90                   	nop
+  800257:	c9                   	leave  
+  800258:	c3                   	ret    
+
+00800259 <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  800259:	55                   	push   %ebp
+  80025a:	89 e5                	mov    %esp,%ebp
+  80025c:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  80025f:	e8 2e ff ff ff       	call   800192 <sys_gettime>
+}
+  800264:	c9                   	leave  
+  800265:	c3                   	ret    
+
+00800266 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800266:	55                   	push   %ebp
+  800267:	89 e5                	mov    %esp,%ebp
+  800269:	83 ec 08             	sub    $0x8,%esp
+    sys_lab6_set_priority(priority);
+  80026c:	83 ec 0c             	sub    $0xc,%esp
+  80026f:	ff 75 08             	pushl  0x8(%ebp)
+  800272:	e8 2a ff ff ff       	call   8001a1 <sys_lab6_set_priority>
+  800277:	83 c4 10             	add    $0x10,%esp
+}
+  80027a:	90                   	nop
+  80027b:	c9                   	leave  
+  80027c:	c3                   	ret    
+
+0080027d <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  80027d:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800282:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800285:	e8 c3 00 00 00       	call   80034d <umain>
+1:  jmp 1b
+  80028a:	eb fe                	jmp    80028a <_start+0xd>
+
+0080028c <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  80028c:	55                   	push   %ebp
+  80028d:	89 e5                	mov    %esp,%ebp
+  80028f:	83 ec 08             	sub    $0x8,%esp
+    sys_putc(c);
+  800292:	83 ec 0c             	sub    $0xc,%esp
+  800295:	ff 75 08             	pushl  0x8(%ebp)
+  800298:	e8 d4 fe ff ff       	call   800171 <sys_putc>
+  80029d:	83 c4 10             	add    $0x10,%esp
+    (*cnt) ++;
+  8002a0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002a3:	8b 00                	mov    (%eax),%eax
+  8002a5:	8d 50 01             	lea    0x1(%eax),%edx
+  8002a8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002ab:	89 10                	mov    %edx,(%eax)
+}
+  8002ad:	90                   	nop
+  8002ae:	c9                   	leave  
+  8002af:	c3                   	ret    
+
+008002b0 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002b0:	55                   	push   %ebp
+  8002b1:	89 e5                	mov    %esp,%ebp
+  8002b3:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  8002b6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002bd:	ff 75 0c             	pushl  0xc(%ebp)
+  8002c0:	ff 75 08             	pushl  0x8(%ebp)
+  8002c3:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  8002c6:	50                   	push   %eax
+  8002c7:	68 8c 02 80 00       	push   $0x80028c
+  8002cc:	e8 fc 06 00 00       	call   8009cd <vprintfmt>
+  8002d1:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  8002d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002d7:	c9                   	leave  
+  8002d8:	c3                   	ret    
+
+008002d9 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  8002d9:	55                   	push   %ebp
+  8002da:	89 e5                	mov    %esp,%ebp
+  8002dc:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8002df:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8002e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  8002e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8002e8:	83 ec 08             	sub    $0x8,%esp
+  8002eb:	50                   	push   %eax
+  8002ec:	ff 75 08             	pushl  0x8(%ebp)
+  8002ef:	e8 bc ff ff ff       	call   8002b0 <vcprintf>
+  8002f4:	83 c4 10             	add    $0x10,%esp
+  8002f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  8002fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002fd:	c9                   	leave  
+  8002fe:	c3                   	ret    
+
+008002ff <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  8002ff:	55                   	push   %ebp
+  800300:	89 e5                	mov    %esp,%ebp
+  800302:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  800305:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80030c:	eb 14                	jmp    800322 <cputs+0x23>
+        cputch(c, &cnt);
+  80030e:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800312:	83 ec 08             	sub    $0x8,%esp
+  800315:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800318:	52                   	push   %edx
+  800319:	50                   	push   %eax
+  80031a:	e8 6d ff ff ff       	call   80028c <cputch>
+  80031f:	83 c4 10             	add    $0x10,%esp
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800322:	8b 45 08             	mov    0x8(%ebp),%eax
+  800325:	8d 50 01             	lea    0x1(%eax),%edx
+  800328:	89 55 08             	mov    %edx,0x8(%ebp)
+  80032b:	0f b6 00             	movzbl (%eax),%eax
+  80032e:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800331:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800335:	75 d7                	jne    80030e <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800337:	83 ec 08             	sub    $0x8,%esp
+  80033a:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  80033d:	50                   	push   %eax
+  80033e:	6a 0a                	push   $0xa
+  800340:	e8 47 ff ff ff       	call   80028c <cputch>
+  800345:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  800348:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80034b:	c9                   	leave  
+  80034c:	c3                   	ret    
+
+0080034d <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  80034d:	55                   	push   %ebp
+  80034e:	89 e5                	mov    %esp,%ebp
+  800350:	83 ec 18             	sub    $0x18,%esp
+    int ret = main();
+  800353:	e8 00 0c 00 00       	call   800f58 <main>
+  800358:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  80035b:	83 ec 0c             	sub    $0xc,%esp
+  80035e:	ff 75 f4             	pushl  -0xc(%ebp)
+  800361:	e8 51 fe ff ff       	call   8001b7 <exit>
+
+00800366 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800366:	55                   	push   %ebp
+  800367:	89 e5                	mov    %esp,%ebp
+  800369:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  80036c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800373:	eb 04                	jmp    800379 <strlen+0x13>
+        cnt ++;
+  800375:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800379:	8b 45 08             	mov    0x8(%ebp),%eax
+  80037c:	8d 50 01             	lea    0x1(%eax),%edx
+  80037f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800382:	0f b6 00             	movzbl (%eax),%eax
+  800385:	84 c0                	test   %al,%al
+  800387:	75 ec                	jne    800375 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800389:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  80038c:	c9                   	leave  
+  80038d:	c3                   	ret    
+
+0080038e <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  80038e:	55                   	push   %ebp
+  80038f:	89 e5                	mov    %esp,%ebp
+  800391:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800394:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  80039b:	eb 04                	jmp    8003a1 <strnlen+0x13>
+        cnt ++;
+  80039d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  8003a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003a4:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003a7:	73 10                	jae    8003b9 <strnlen+0x2b>
+  8003a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003ac:	8d 50 01             	lea    0x1(%eax),%edx
+  8003af:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003b2:	0f b6 00             	movzbl (%eax),%eax
+  8003b5:	84 c0                	test   %al,%al
+  8003b7:	75 e4                	jne    80039d <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003b9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003bc:	c9                   	leave  
+  8003bd:	c3                   	ret    
+
+008003be <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  8003be:	55                   	push   %ebp
+  8003bf:	89 e5                	mov    %esp,%ebp
+  8003c1:	57                   	push   %edi
+  8003c2:	56                   	push   %esi
+  8003c3:	83 ec 20             	sub    $0x20,%esp
+  8003c6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003cc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8003cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  8003d2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003d8:	89 d1                	mov    %edx,%ecx
+  8003da:	89 c2                	mov    %eax,%edx
+  8003dc:	89 ce                	mov    %ecx,%esi
+  8003de:	89 d7                	mov    %edx,%edi
+  8003e0:	ac                   	lods   %ds:(%esi),%al
+  8003e1:	aa                   	stos   %al,%es:(%edi)
+  8003e2:	84 c0                	test   %al,%al
+  8003e4:	75 fa                	jne    8003e0 <strcpy+0x22>
+  8003e6:	89 fa                	mov    %edi,%edx
+  8003e8:	89 f1                	mov    %esi,%ecx
+  8003ea:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8003ed:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8003f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  8003f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  8003f6:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  8003f7:	83 c4 20             	add    $0x20,%esp
+  8003fa:	5e                   	pop    %esi
+  8003fb:	5f                   	pop    %edi
+  8003fc:	5d                   	pop    %ebp
+  8003fd:	c3                   	ret    
+
+008003fe <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  8003fe:	55                   	push   %ebp
+  8003ff:	89 e5                	mov    %esp,%ebp
+  800401:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800404:	8b 45 08             	mov    0x8(%ebp),%eax
+  800407:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  80040a:	eb 21                	jmp    80042d <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  80040c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80040f:	0f b6 10             	movzbl (%eax),%edx
+  800412:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800415:	88 10                	mov    %dl,(%eax)
+  800417:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80041a:	0f b6 00             	movzbl (%eax),%eax
+  80041d:	84 c0                	test   %al,%al
+  80041f:	74 04                	je     800425 <strncpy+0x27>
+            src ++;
+  800421:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800425:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800429:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  80042d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800431:	75 d9                	jne    80040c <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800433:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800436:	c9                   	leave  
+  800437:	c3                   	ret    
+
+00800438 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800438:	55                   	push   %ebp
+  800439:	89 e5                	mov    %esp,%ebp
+  80043b:	57                   	push   %edi
+  80043c:	56                   	push   %esi
+  80043d:	83 ec 20             	sub    $0x20,%esp
+  800440:	8b 45 08             	mov    0x8(%ebp),%eax
+  800443:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800446:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800449:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  80044c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80044f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800452:	89 d1                	mov    %edx,%ecx
+  800454:	89 c2                	mov    %eax,%edx
+  800456:	89 ce                	mov    %ecx,%esi
+  800458:	89 d7                	mov    %edx,%edi
+  80045a:	ac                   	lods   %ds:(%esi),%al
+  80045b:	ae                   	scas   %es:(%edi),%al
+  80045c:	75 08                	jne    800466 <strcmp+0x2e>
+  80045e:	84 c0                	test   %al,%al
+  800460:	75 f8                	jne    80045a <strcmp+0x22>
+  800462:	31 c0                	xor    %eax,%eax
+  800464:	eb 04                	jmp    80046a <strcmp+0x32>
+  800466:	19 c0                	sbb    %eax,%eax
+  800468:	0c 01                	or     $0x1,%al
+  80046a:	89 fa                	mov    %edi,%edx
+  80046c:	89 f1                	mov    %esi,%ecx
+  80046e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800471:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800474:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800477:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  80047a:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  80047b:	83 c4 20             	add    $0x20,%esp
+  80047e:	5e                   	pop    %esi
+  80047f:	5f                   	pop    %edi
+  800480:	5d                   	pop    %ebp
+  800481:	c3                   	ret    
+
+00800482 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800482:	55                   	push   %ebp
+  800483:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800485:	eb 0c                	jmp    800493 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800487:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  80048b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  80048f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800493:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800497:	74 1a                	je     8004b3 <strncmp+0x31>
+  800499:	8b 45 08             	mov    0x8(%ebp),%eax
+  80049c:	0f b6 00             	movzbl (%eax),%eax
+  80049f:	84 c0                	test   %al,%al
+  8004a1:	74 10                	je     8004b3 <strncmp+0x31>
+  8004a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004a6:	0f b6 10             	movzbl (%eax),%edx
+  8004a9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ac:	0f b6 00             	movzbl (%eax),%eax
+  8004af:	38 c2                	cmp    %al,%dl
+  8004b1:	74 d4                	je     800487 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004b3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004b7:	74 18                	je     8004d1 <strncmp+0x4f>
+  8004b9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004bc:	0f b6 00             	movzbl (%eax),%eax
+  8004bf:	0f b6 d0             	movzbl %al,%edx
+  8004c2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004c5:	0f b6 00             	movzbl (%eax),%eax
+  8004c8:	0f b6 c0             	movzbl %al,%eax
+  8004cb:	29 c2                	sub    %eax,%edx
+  8004cd:	89 d0                	mov    %edx,%eax
+  8004cf:	eb 05                	jmp    8004d6 <strncmp+0x54>
+  8004d1:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8004d6:	5d                   	pop    %ebp
+  8004d7:	c3                   	ret    
+
+008004d8 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  8004d8:	55                   	push   %ebp
+  8004d9:	89 e5                	mov    %esp,%ebp
+  8004db:	83 ec 04             	sub    $0x4,%esp
+  8004de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004e1:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  8004e4:	eb 14                	jmp    8004fa <strchr+0x22>
+        if (*s == c) {
+  8004e6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e9:	0f b6 00             	movzbl (%eax),%eax
+  8004ec:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  8004ef:	75 05                	jne    8004f6 <strchr+0x1e>
+            return (char *)s;
+  8004f1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004f4:	eb 13                	jmp    800509 <strchr+0x31>
+        }
+        s ++;
+  8004f6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  8004fa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fd:	0f b6 00             	movzbl (%eax),%eax
+  800500:	84 c0                	test   %al,%al
+  800502:	75 e2                	jne    8004e6 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800504:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800509:	c9                   	leave  
+  80050a:	c3                   	ret    
+
+0080050b <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  80050b:	55                   	push   %ebp
+  80050c:	89 e5                	mov    %esp,%ebp
+  80050e:	83 ec 04             	sub    $0x4,%esp
+  800511:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800514:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800517:	eb 0f                	jmp    800528 <strfind+0x1d>
+        if (*s == c) {
+  800519:	8b 45 08             	mov    0x8(%ebp),%eax
+  80051c:	0f b6 00             	movzbl (%eax),%eax
+  80051f:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800522:	74 10                	je     800534 <strfind+0x29>
+            break;
+        }
+        s ++;
+  800524:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800528:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052b:	0f b6 00             	movzbl (%eax),%eax
+  80052e:	84 c0                	test   %al,%al
+  800530:	75 e7                	jne    800519 <strfind+0xe>
+  800532:	eb 01                	jmp    800535 <strfind+0x2a>
+        if (*s == c) {
+            break;
+  800534:	90                   	nop
+        }
+        s ++;
+    }
+    return (char *)s;
+  800535:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800538:	c9                   	leave  
+  800539:	c3                   	ret    
+
+0080053a <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  80053a:	55                   	push   %ebp
+  80053b:	89 e5                	mov    %esp,%ebp
+  80053d:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800540:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800547:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80054e:	eb 04                	jmp    800554 <strtol+0x1a>
+        s ++;
+  800550:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800554:	8b 45 08             	mov    0x8(%ebp),%eax
+  800557:	0f b6 00             	movzbl (%eax),%eax
+  80055a:	3c 20                	cmp    $0x20,%al
+  80055c:	74 f2                	je     800550 <strtol+0x16>
+  80055e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800561:	0f b6 00             	movzbl (%eax),%eax
+  800564:	3c 09                	cmp    $0x9,%al
+  800566:	74 e8                	je     800550 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800568:	8b 45 08             	mov    0x8(%ebp),%eax
+  80056b:	0f b6 00             	movzbl (%eax),%eax
+  80056e:	3c 2b                	cmp    $0x2b,%al
+  800570:	75 06                	jne    800578 <strtol+0x3e>
+        s ++;
+  800572:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800576:	eb 15                	jmp    80058d <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800578:	8b 45 08             	mov    0x8(%ebp),%eax
+  80057b:	0f b6 00             	movzbl (%eax),%eax
+  80057e:	3c 2d                	cmp    $0x2d,%al
+  800580:	75 0b                	jne    80058d <strtol+0x53>
+        s ++, neg = 1;
+  800582:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800586:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  80058d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800591:	74 06                	je     800599 <strtol+0x5f>
+  800593:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800597:	75 24                	jne    8005bd <strtol+0x83>
+  800599:	8b 45 08             	mov    0x8(%ebp),%eax
+  80059c:	0f b6 00             	movzbl (%eax),%eax
+  80059f:	3c 30                	cmp    $0x30,%al
+  8005a1:	75 1a                	jne    8005bd <strtol+0x83>
+  8005a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a6:	83 c0 01             	add    $0x1,%eax
+  8005a9:	0f b6 00             	movzbl (%eax),%eax
+  8005ac:	3c 78                	cmp    $0x78,%al
+  8005ae:	75 0d                	jne    8005bd <strtol+0x83>
+        s += 2, base = 16;
+  8005b0:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005b4:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005bb:	eb 2a                	jmp    8005e7 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005bd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005c1:	75 17                	jne    8005da <strtol+0xa0>
+  8005c3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005c6:	0f b6 00             	movzbl (%eax),%eax
+  8005c9:	3c 30                	cmp    $0x30,%al
+  8005cb:	75 0d                	jne    8005da <strtol+0xa0>
+        s ++, base = 8;
+  8005cd:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005d1:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  8005d8:	eb 0d                	jmp    8005e7 <strtol+0xad>
+    }
+    else if (base == 0) {
+  8005da:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005de:	75 07                	jne    8005e7 <strtol+0xad>
+        base = 10;
+  8005e0:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  8005e7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ea:	0f b6 00             	movzbl (%eax),%eax
+  8005ed:	3c 2f                	cmp    $0x2f,%al
+  8005ef:	7e 1b                	jle    80060c <strtol+0xd2>
+  8005f1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005f4:	0f b6 00             	movzbl (%eax),%eax
+  8005f7:	3c 39                	cmp    $0x39,%al
+  8005f9:	7f 11                	jg     80060c <strtol+0xd2>
+            dig = *s - '0';
+  8005fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005fe:	0f b6 00             	movzbl (%eax),%eax
+  800601:	0f be c0             	movsbl %al,%eax
+  800604:	83 e8 30             	sub    $0x30,%eax
+  800607:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80060a:	eb 48                	jmp    800654 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  80060c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80060f:	0f b6 00             	movzbl (%eax),%eax
+  800612:	3c 60                	cmp    $0x60,%al
+  800614:	7e 1b                	jle    800631 <strtol+0xf7>
+  800616:	8b 45 08             	mov    0x8(%ebp),%eax
+  800619:	0f b6 00             	movzbl (%eax),%eax
+  80061c:	3c 7a                	cmp    $0x7a,%al
+  80061e:	7f 11                	jg     800631 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800620:	8b 45 08             	mov    0x8(%ebp),%eax
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	0f be c0             	movsbl %al,%eax
+  800629:	83 e8 57             	sub    $0x57,%eax
+  80062c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80062f:	eb 23                	jmp    800654 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800631:	8b 45 08             	mov    0x8(%ebp),%eax
+  800634:	0f b6 00             	movzbl (%eax),%eax
+  800637:	3c 40                	cmp    $0x40,%al
+  800639:	7e 3c                	jle    800677 <strtol+0x13d>
+  80063b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80063e:	0f b6 00             	movzbl (%eax),%eax
+  800641:	3c 5a                	cmp    $0x5a,%al
+  800643:	7f 32                	jg     800677 <strtol+0x13d>
+            dig = *s - 'A' + 10;
+  800645:	8b 45 08             	mov    0x8(%ebp),%eax
+  800648:	0f b6 00             	movzbl (%eax),%eax
+  80064b:	0f be c0             	movsbl %al,%eax
+  80064e:	83 e8 37             	sub    $0x37,%eax
+  800651:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800654:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800657:	3b 45 10             	cmp    0x10(%ebp),%eax
+  80065a:	7d 1a                	jge    800676 <strtol+0x13c>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  80065c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800660:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800663:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800667:	89 c2                	mov    %eax,%edx
+  800669:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80066c:	01 d0                	add    %edx,%eax
+  80066e:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800671:	e9 71 ff ff ff       	jmp    8005e7 <strtol+0xad>
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+            break;
+  800676:	90                   	nop
+        }
+        s ++, val = (val * base) + dig;
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  800677:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80067b:	74 08                	je     800685 <strtol+0x14b>
+        *endptr = (char *) s;
+  80067d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800680:	8b 55 08             	mov    0x8(%ebp),%edx
+  800683:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800685:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800689:	74 07                	je     800692 <strtol+0x158>
+  80068b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80068e:	f7 d8                	neg    %eax
+  800690:	eb 03                	jmp    800695 <strtol+0x15b>
+  800692:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800695:	c9                   	leave  
+  800696:	c3                   	ret    
+
+00800697 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800697:	55                   	push   %ebp
+  800698:	89 e5                	mov    %esp,%ebp
+  80069a:	57                   	push   %edi
+  80069b:	83 ec 24             	sub    $0x24,%esp
+  80069e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006a1:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006a4:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006a8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006ab:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006ae:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006b1:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006b7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006ba:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006be:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006c1:	89 d7                	mov    %edx,%edi
+  8006c3:	f3 aa                	rep stos %al,%es:(%edi)
+  8006c5:	89 fa                	mov    %edi,%edx
+  8006c7:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8006ca:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  8006cd:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006d0:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  8006d1:	83 c4 24             	add    $0x24,%esp
+  8006d4:	5f                   	pop    %edi
+  8006d5:	5d                   	pop    %ebp
+  8006d6:	c3                   	ret    
+
+008006d7 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  8006d7:	55                   	push   %ebp
+  8006d8:	89 e5                	mov    %esp,%ebp
+  8006da:	57                   	push   %edi
+  8006db:	56                   	push   %esi
+  8006dc:	53                   	push   %ebx
+  8006dd:	83 ec 30             	sub    $0x30,%esp
+  8006e0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8006e6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006e9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8006ec:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006ef:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  8006f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8006f5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  8006f8:	73 42                	jae    80073c <memmove+0x65>
+  8006fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8006fd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800700:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800703:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800706:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800709:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  80070c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  80070f:	c1 e8 02             	shr    $0x2,%eax
+  800712:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800714:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800717:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80071a:	89 d7                	mov    %edx,%edi
+  80071c:	89 c6                	mov    %eax,%esi
+  80071e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800720:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800723:	83 e1 03             	and    $0x3,%ecx
+  800726:	74 02                	je     80072a <memmove+0x53>
+  800728:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  80072a:	89 f0                	mov    %esi,%eax
+  80072c:	89 fa                	mov    %edi,%edx
+  80072e:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800731:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800734:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800737:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  80073a:	eb 36                	jmp    800772 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  80073c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80073f:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800742:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800745:	01 c2                	add    %eax,%edx
+  800747:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80074a:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  80074d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800750:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800753:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800756:	89 c1                	mov    %eax,%ecx
+  800758:	89 d8                	mov    %ebx,%eax
+  80075a:	89 d6                	mov    %edx,%esi
+  80075c:	89 c7                	mov    %eax,%edi
+  80075e:	fd                   	std    
+  80075f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800761:	fc                   	cld    
+  800762:	89 f8                	mov    %edi,%eax
+  800764:	89 f2                	mov    %esi,%edx
+  800766:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800769:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  80076c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  80076f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800772:	83 c4 30             	add    $0x30,%esp
+  800775:	5b                   	pop    %ebx
+  800776:	5e                   	pop    %esi
+  800777:	5f                   	pop    %edi
+  800778:	5d                   	pop    %ebp
+  800779:	c3                   	ret    
+
+0080077a <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  80077a:	55                   	push   %ebp
+  80077b:	89 e5                	mov    %esp,%ebp
+  80077d:	57                   	push   %edi
+  80077e:	56                   	push   %esi
+  80077f:	83 ec 20             	sub    $0x20,%esp
+  800782:	8b 45 08             	mov    0x8(%ebp),%eax
+  800785:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800788:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80078b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80078e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800791:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800794:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800797:	c1 e8 02             	shr    $0x2,%eax
+  80079a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  80079c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80079f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007a2:	89 d7                	mov    %edx,%edi
+  8007a4:	89 c6                	mov    %eax,%esi
+  8007a6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007a8:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007ab:	83 e1 03             	and    $0x3,%ecx
+  8007ae:	74 02                	je     8007b2 <memcpy+0x38>
+  8007b0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007b2:	89 f0                	mov    %esi,%eax
+  8007b4:	89 fa                	mov    %edi,%edx
+  8007b6:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007b9:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007bc:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  8007bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007c2:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007c3:	83 c4 20             	add    $0x20,%esp
+  8007c6:	5e                   	pop    %esi
+  8007c7:	5f                   	pop    %edi
+  8007c8:	5d                   	pop    %ebp
+  8007c9:	c3                   	ret    
+
+008007ca <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  8007ca:	55                   	push   %ebp
+  8007cb:	89 e5                	mov    %esp,%ebp
+  8007cd:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  8007d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007d3:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  8007d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007d9:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  8007dc:	eb 30                	jmp    80080e <memcmp+0x44>
+        if (*s1 != *s2) {
+  8007de:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8007e1:	0f b6 10             	movzbl (%eax),%edx
+  8007e4:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8007e7:	0f b6 00             	movzbl (%eax),%eax
+  8007ea:	38 c2                	cmp    %al,%dl
+  8007ec:	74 18                	je     800806 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8007ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8007f1:	0f b6 00             	movzbl (%eax),%eax
+  8007f4:	0f b6 d0             	movzbl %al,%edx
+  8007f7:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8007fa:	0f b6 00             	movzbl (%eax),%eax
+  8007fd:	0f b6 c0             	movzbl %al,%eax
+  800800:	29 c2                	sub    %eax,%edx
+  800802:	89 d0                	mov    %edx,%eax
+  800804:	eb 1a                	jmp    800820 <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800806:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  80080a:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  80080e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800811:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800814:	89 55 10             	mov    %edx,0x10(%ebp)
+  800817:	85 c0                	test   %eax,%eax
+  800819:	75 c3                	jne    8007de <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  80081b:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800820:	c9                   	leave  
+  800821:	c3                   	ret    
+
+00800822 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800822:	55                   	push   %ebp
+  800823:	89 e5                	mov    %esp,%ebp
+  800825:	83 ec 38             	sub    $0x38,%esp
+  800828:	8b 45 10             	mov    0x10(%ebp),%eax
+  80082b:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  80082e:	8b 45 14             	mov    0x14(%ebp),%eax
+  800831:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  800834:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800837:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  80083a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80083d:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800840:	8b 45 18             	mov    0x18(%ebp),%eax
+  800843:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800846:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800849:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80084c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80084f:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  800852:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800855:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800858:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  80085c:	74 1c                	je     80087a <printnum+0x58>
+  80085e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800861:	ba 00 00 00 00       	mov    $0x0,%edx
+  800866:	f7 75 e4             	divl   -0x1c(%ebp)
+  800869:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  80086c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80086f:	ba 00 00 00 00       	mov    $0x0,%edx
+  800874:	f7 75 e4             	divl   -0x1c(%ebp)
+  800877:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80087a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80087d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800880:	f7 75 e4             	divl   -0x1c(%ebp)
+  800883:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800886:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800889:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80088c:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80088f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800892:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800895:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800898:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  80089b:	8b 45 18             	mov    0x18(%ebp),%eax
+  80089e:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008a3:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008a6:	77 41                	ja     8008e9 <printnum+0xc7>
+  8008a8:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008ab:	72 05                	jb     8008b2 <printnum+0x90>
+  8008ad:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  8008b0:	77 37                	ja     8008e9 <printnum+0xc7>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008b2:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008b5:	83 e8 01             	sub    $0x1,%eax
+  8008b8:	83 ec 04             	sub    $0x4,%esp
+  8008bb:	ff 75 20             	pushl  0x20(%ebp)
+  8008be:	50                   	push   %eax
+  8008bf:	ff 75 18             	pushl  0x18(%ebp)
+  8008c2:	ff 75 ec             	pushl  -0x14(%ebp)
+  8008c5:	ff 75 e8             	pushl  -0x18(%ebp)
+  8008c8:	ff 75 0c             	pushl  0xc(%ebp)
+  8008cb:	ff 75 08             	pushl  0x8(%ebp)
+  8008ce:	e8 4f ff ff ff       	call   800822 <printnum>
+  8008d3:	83 c4 20             	add    $0x20,%esp
+  8008d6:	eb 1b                	jmp    8008f3 <printnum+0xd1>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  8008d8:	83 ec 08             	sub    $0x8,%esp
+  8008db:	ff 75 0c             	pushl  0xc(%ebp)
+  8008de:	ff 75 20             	pushl  0x20(%ebp)
+  8008e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008e4:	ff d0                	call   *%eax
+  8008e6:	83 c4 10             	add    $0x10,%esp
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8008e9:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8008ed:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8008f1:	7f e5                	jg     8008d8 <printnum+0xb6>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8008f3:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8008f6:	05 44 13 80 00       	add    $0x801344,%eax
+  8008fb:	0f b6 00             	movzbl (%eax),%eax
+  8008fe:	0f be c0             	movsbl %al,%eax
+  800901:	83 ec 08             	sub    $0x8,%esp
+  800904:	ff 75 0c             	pushl  0xc(%ebp)
+  800907:	50                   	push   %eax
+  800908:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090b:	ff d0                	call   *%eax
+  80090d:	83 c4 10             	add    $0x10,%esp
+}
+  800910:	90                   	nop
+  800911:	c9                   	leave  
+  800912:	c3                   	ret    
+
+00800913 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800913:	55                   	push   %ebp
+  800914:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800916:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80091a:	7e 14                	jle    800930 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80091c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80091f:	8b 00                	mov    (%eax),%eax
+  800921:	8d 48 08             	lea    0x8(%eax),%ecx
+  800924:	8b 55 08             	mov    0x8(%ebp),%edx
+  800927:	89 0a                	mov    %ecx,(%edx)
+  800929:	8b 50 04             	mov    0x4(%eax),%edx
+  80092c:	8b 00                	mov    (%eax),%eax
+  80092e:	eb 30                	jmp    800960 <getuint+0x4d>
+    }
+    else if (lflag) {
+  800930:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800934:	74 16                	je     80094c <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800936:	8b 45 08             	mov    0x8(%ebp),%eax
+  800939:	8b 00                	mov    (%eax),%eax
+  80093b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80093e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800941:	89 0a                	mov    %ecx,(%edx)
+  800943:	8b 00                	mov    (%eax),%eax
+  800945:	ba 00 00 00 00       	mov    $0x0,%edx
+  80094a:	eb 14                	jmp    800960 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80094c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80094f:	8b 00                	mov    (%eax),%eax
+  800951:	8d 48 04             	lea    0x4(%eax),%ecx
+  800954:	8b 55 08             	mov    0x8(%ebp),%edx
+  800957:	89 0a                	mov    %ecx,(%edx)
+  800959:	8b 00                	mov    (%eax),%eax
+  80095b:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800960:	5d                   	pop    %ebp
+  800961:	c3                   	ret    
+
+00800962 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800962:	55                   	push   %ebp
+  800963:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800965:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800969:	7e 14                	jle    80097f <getint+0x1d>
+        return va_arg(*ap, long long);
+  80096b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80096e:	8b 00                	mov    (%eax),%eax
+  800970:	8d 48 08             	lea    0x8(%eax),%ecx
+  800973:	8b 55 08             	mov    0x8(%ebp),%edx
+  800976:	89 0a                	mov    %ecx,(%edx)
+  800978:	8b 50 04             	mov    0x4(%eax),%edx
+  80097b:	8b 00                	mov    (%eax),%eax
+  80097d:	eb 28                	jmp    8009a7 <getint+0x45>
+    }
+    else if (lflag) {
+  80097f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800983:	74 12                	je     800997 <getint+0x35>
+        return va_arg(*ap, long);
+  800985:	8b 45 08             	mov    0x8(%ebp),%eax
+  800988:	8b 00                	mov    (%eax),%eax
+  80098a:	8d 48 04             	lea    0x4(%eax),%ecx
+  80098d:	8b 55 08             	mov    0x8(%ebp),%edx
+  800990:	89 0a                	mov    %ecx,(%edx)
+  800992:	8b 00                	mov    (%eax),%eax
+  800994:	99                   	cltd   
+  800995:	eb 10                	jmp    8009a7 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800997:	8b 45 08             	mov    0x8(%ebp),%eax
+  80099a:	8b 00                	mov    (%eax),%eax
+  80099c:	8d 48 04             	lea    0x4(%eax),%ecx
+  80099f:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009a2:	89 0a                	mov    %ecx,(%edx)
+  8009a4:	8b 00                	mov    (%eax),%eax
+  8009a6:	99                   	cltd   
+    }
+}
+  8009a7:	5d                   	pop    %ebp
+  8009a8:	c3                   	ret    
+
+008009a9 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009a9:	55                   	push   %ebp
+  8009aa:	89 e5                	mov    %esp,%ebp
+  8009ac:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009af:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8009b8:	50                   	push   %eax
+  8009b9:	ff 75 10             	pushl  0x10(%ebp)
+  8009bc:	ff 75 0c             	pushl  0xc(%ebp)
+  8009bf:	ff 75 08             	pushl  0x8(%ebp)
+  8009c2:	e8 06 00 00 00       	call   8009cd <vprintfmt>
+  8009c7:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8009ca:	90                   	nop
+  8009cb:	c9                   	leave  
+  8009cc:	c3                   	ret    
+
+008009cd <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8009cd:	55                   	push   %ebp
+  8009ce:	89 e5                	mov    %esp,%ebp
+  8009d0:	56                   	push   %esi
+  8009d1:	53                   	push   %ebx
+  8009d2:	83 ec 20             	sub    $0x20,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009d5:	eb 17                	jmp    8009ee <vprintfmt+0x21>
+            if (ch == '\0') {
+  8009d7:	85 db                	test   %ebx,%ebx
+  8009d9:	0f 84 8e 03 00 00    	je     800d6d <vprintfmt+0x3a0>
+                return;
+            }
+            putch(ch, putdat);
+  8009df:	83 ec 08             	sub    $0x8,%esp
+  8009e2:	ff 75 0c             	pushl  0xc(%ebp)
+  8009e5:	53                   	push   %ebx
+  8009e6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009e9:	ff d0                	call   *%eax
+  8009eb:	83 c4 10             	add    $0x10,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009ee:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009f1:	8d 50 01             	lea    0x1(%eax),%edx
+  8009f4:	89 55 10             	mov    %edx,0x10(%ebp)
+  8009f7:	0f b6 00             	movzbl (%eax),%eax
+  8009fa:	0f b6 d8             	movzbl %al,%ebx
+  8009fd:	83 fb 25             	cmp    $0x25,%ebx
+  800a00:	75 d5                	jne    8009d7 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a02:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a06:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a10:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a13:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a1a:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a1d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a20:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a23:	8d 50 01             	lea    0x1(%eax),%edx
+  800a26:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a29:	0f b6 00             	movzbl (%eax),%eax
+  800a2c:	0f b6 d8             	movzbl %al,%ebx
+  800a2f:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a32:	83 f8 55             	cmp    $0x55,%eax
+  800a35:	0f 87 05 03 00 00    	ja     800d40 <vprintfmt+0x373>
+  800a3b:	8b 04 85 68 13 80 00 	mov    0x801368(,%eax,4),%eax
+  800a42:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a44:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a48:	eb d6                	jmp    800a20 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a4a:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800a4e:	eb d0                	jmp    800a20 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a50:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800a57:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a5a:	89 d0                	mov    %edx,%eax
+  800a5c:	c1 e0 02             	shl    $0x2,%eax
+  800a5f:	01 d0                	add    %edx,%eax
+  800a61:	01 c0                	add    %eax,%eax
+  800a63:	01 d8                	add    %ebx,%eax
+  800a65:	83 e8 30             	sub    $0x30,%eax
+  800a68:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800a6b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a6e:	0f b6 00             	movzbl (%eax),%eax
+  800a71:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800a74:	83 fb 2f             	cmp    $0x2f,%ebx
+  800a77:	7e 39                	jle    800ab2 <vprintfmt+0xe5>
+  800a79:	83 fb 39             	cmp    $0x39,%ebx
+  800a7c:	7f 34                	jg     800ab2 <vprintfmt+0xe5>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a7e:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  800a82:	eb d3                	jmp    800a57 <vprintfmt+0x8a>
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800a84:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a87:	8d 50 04             	lea    0x4(%eax),%edx
+  800a8a:	89 55 14             	mov    %edx,0x14(%ebp)
+  800a8d:	8b 00                	mov    (%eax),%eax
+  800a8f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800a92:	eb 1f                	jmp    800ab3 <vprintfmt+0xe6>
+
+        case '.':
+            if (width < 0)
+  800a94:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800a98:	79 86                	jns    800a20 <vprintfmt+0x53>
+                width = 0;
+  800a9a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800aa1:	e9 7a ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800aa6:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800aad:	e9 6e ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+            goto process_precision;
+  800ab2:	90                   	nop
+        case '#':
+            altflag = 1;
+            goto reswitch;
+
+        process_precision:
+            if (width < 0)
+  800ab3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ab7:	0f 89 63 ff ff ff    	jns    800a20 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800abd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ac0:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800ac3:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800aca:	e9 51 ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800acf:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800ad3:	e9 48 ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800ad8:	8b 45 14             	mov    0x14(%ebp),%eax
+  800adb:	8d 50 04             	lea    0x4(%eax),%edx
+  800ade:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ae1:	8b 00                	mov    (%eax),%eax
+  800ae3:	83 ec 08             	sub    $0x8,%esp
+  800ae6:	ff 75 0c             	pushl  0xc(%ebp)
+  800ae9:	50                   	push   %eax
+  800aea:	8b 45 08             	mov    0x8(%ebp),%eax
+  800aed:	ff d0                	call   *%eax
+  800aef:	83 c4 10             	add    $0x10,%esp
+            break;
+  800af2:	e9 71 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800af7:	8b 45 14             	mov    0x14(%ebp),%eax
+  800afa:	8d 50 04             	lea    0x4(%eax),%edx
+  800afd:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b00:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b02:	85 db                	test   %ebx,%ebx
+  800b04:	79 02                	jns    800b08 <vprintfmt+0x13b>
+                err = -err;
+  800b06:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b08:	83 fb 18             	cmp    $0x18,%ebx
+  800b0b:	7f 0b                	jg     800b18 <vprintfmt+0x14b>
+  800b0d:	8b 34 9d e0 12 80 00 	mov    0x8012e0(,%ebx,4),%esi
+  800b14:	85 f6                	test   %esi,%esi
+  800b16:	75 19                	jne    800b31 <vprintfmt+0x164>
+                printfmt(putch, putdat, "error %d", err);
+  800b18:	53                   	push   %ebx
+  800b19:	68 55 13 80 00       	push   $0x801355
+  800b1e:	ff 75 0c             	pushl  0xc(%ebp)
+  800b21:	ff 75 08             	pushl  0x8(%ebp)
+  800b24:	e8 80 fe ff ff       	call   8009a9 <printfmt>
+  800b29:	83 c4 10             	add    $0x10,%esp
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b2c:	e9 37 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  800b31:	56                   	push   %esi
+  800b32:	68 5e 13 80 00       	push   $0x80135e
+  800b37:	ff 75 0c             	pushl  0xc(%ebp)
+  800b3a:	ff 75 08             	pushl  0x8(%ebp)
+  800b3d:	e8 67 fe ff ff       	call   8009a9 <printfmt>
+  800b42:	83 c4 10             	add    $0x10,%esp
+            }
+            break;
+  800b45:	e9 1e 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800b4a:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b4d:	8d 50 04             	lea    0x4(%eax),%edx
+  800b50:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b53:	8b 30                	mov    (%eax),%esi
+  800b55:	85 f6                	test   %esi,%esi
+  800b57:	75 05                	jne    800b5e <vprintfmt+0x191>
+                p = "(null)";
+  800b59:	be 61 13 80 00       	mov    $0x801361,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800b5e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b62:	7e 76                	jle    800bda <vprintfmt+0x20d>
+  800b64:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800b68:	74 70                	je     800bda <vprintfmt+0x20d>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b6a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b6d:	83 ec 08             	sub    $0x8,%esp
+  800b70:	50                   	push   %eax
+  800b71:	56                   	push   %esi
+  800b72:	e8 17 f8 ff ff       	call   80038e <strnlen>
+  800b77:	83 c4 10             	add    $0x10,%esp
+  800b7a:	89 c2                	mov    %eax,%edx
+  800b7c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800b7f:	29 d0                	sub    %edx,%eax
+  800b81:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b84:	eb 17                	jmp    800b9d <vprintfmt+0x1d0>
+                    putch(padc, putdat);
+  800b86:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800b8a:	83 ec 08             	sub    $0x8,%esp
+  800b8d:	ff 75 0c             	pushl  0xc(%ebp)
+  800b90:	50                   	push   %eax
+  800b91:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b94:	ff d0                	call   *%eax
+  800b96:	83 c4 10             	add    $0x10,%esp
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b99:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800b9d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ba1:	7f e3                	jg     800b86 <vprintfmt+0x1b9>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800ba3:	eb 35                	jmp    800bda <vprintfmt+0x20d>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800ba5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800ba9:	74 1c                	je     800bc7 <vprintfmt+0x1fa>
+  800bab:	83 fb 1f             	cmp    $0x1f,%ebx
+  800bae:	7e 05                	jle    800bb5 <vprintfmt+0x1e8>
+  800bb0:	83 fb 7e             	cmp    $0x7e,%ebx
+  800bb3:	7e 12                	jle    800bc7 <vprintfmt+0x1fa>
+                    putch('?', putdat);
+  800bb5:	83 ec 08             	sub    $0x8,%esp
+  800bb8:	ff 75 0c             	pushl  0xc(%ebp)
+  800bbb:	6a 3f                	push   $0x3f
+  800bbd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bc0:	ff d0                	call   *%eax
+  800bc2:	83 c4 10             	add    $0x10,%esp
+  800bc5:	eb 0f                	jmp    800bd6 <vprintfmt+0x209>
+                }
+                else {
+                    putch(ch, putdat);
+  800bc7:	83 ec 08             	sub    $0x8,%esp
+  800bca:	ff 75 0c             	pushl  0xc(%ebp)
+  800bcd:	53                   	push   %ebx
+  800bce:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bd1:	ff d0                	call   *%eax
+  800bd3:	83 c4 10             	add    $0x10,%esp
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bd6:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800bda:	89 f0                	mov    %esi,%eax
+  800bdc:	8d 70 01             	lea    0x1(%eax),%esi
+  800bdf:	0f b6 00             	movzbl (%eax),%eax
+  800be2:	0f be d8             	movsbl %al,%ebx
+  800be5:	85 db                	test   %ebx,%ebx
+  800be7:	74 26                	je     800c0f <vprintfmt+0x242>
+  800be9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800bed:	78 b6                	js     800ba5 <vprintfmt+0x1d8>
+  800bef:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  800bf3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800bf7:	79 ac                	jns    800ba5 <vprintfmt+0x1d8>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800bf9:	eb 14                	jmp    800c0f <vprintfmt+0x242>
+                putch(' ', putdat);
+  800bfb:	83 ec 08             	sub    $0x8,%esp
+  800bfe:	ff 75 0c             	pushl  0xc(%ebp)
+  800c01:	6a 20                	push   $0x20
+  800c03:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c06:	ff d0                	call   *%eax
+  800c08:	83 c4 10             	add    $0x10,%esp
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c0b:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c0f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c13:	7f e6                	jg     800bfb <vprintfmt+0x22e>
+                putch(' ', putdat);
+            }
+            break;
+  800c15:	e9 4e 01 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c1a:	83 ec 08             	sub    $0x8,%esp
+  800c1d:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c20:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c23:	50                   	push   %eax
+  800c24:	e8 39 fd ff ff       	call   800962 <getint>
+  800c29:	83 c4 10             	add    $0x10,%esp
+  800c2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c2f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c32:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c35:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c38:	85 d2                	test   %edx,%edx
+  800c3a:	79 23                	jns    800c5f <vprintfmt+0x292>
+                putch('-', putdat);
+  800c3c:	83 ec 08             	sub    $0x8,%esp
+  800c3f:	ff 75 0c             	pushl  0xc(%ebp)
+  800c42:	6a 2d                	push   $0x2d
+  800c44:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c47:	ff d0                	call   *%eax
+  800c49:	83 c4 10             	add    $0x10,%esp
+                num = -(long long)num;
+  800c4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c4f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c52:	f7 d8                	neg    %eax
+  800c54:	83 d2 00             	adc    $0x0,%edx
+  800c57:	f7 da                	neg    %edx
+  800c59:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c5c:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800c5f:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c66:	e9 9f 00 00 00       	jmp    800d0a <vprintfmt+0x33d>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800c6b:	83 ec 08             	sub    $0x8,%esp
+  800c6e:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c71:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c74:	50                   	push   %eax
+  800c75:	e8 99 fc ff ff       	call   800913 <getuint>
+  800c7a:	83 c4 10             	add    $0x10,%esp
+  800c7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c80:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800c83:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c8a:	eb 7e                	jmp    800d0a <vprintfmt+0x33d>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800c8c:	83 ec 08             	sub    $0x8,%esp
+  800c8f:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c92:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c95:	50                   	push   %eax
+  800c96:	e8 78 fc ff ff       	call   800913 <getuint>
+  800c9b:	83 c4 10             	add    $0x10,%esp
+  800c9e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ca1:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800ca4:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800cab:	eb 5d                	jmp    800d0a <vprintfmt+0x33d>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800cad:	83 ec 08             	sub    $0x8,%esp
+  800cb0:	ff 75 0c             	pushl  0xc(%ebp)
+  800cb3:	6a 30                	push   $0x30
+  800cb5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb8:	ff d0                	call   *%eax
+  800cba:	83 c4 10             	add    $0x10,%esp
+            putch('x', putdat);
+  800cbd:	83 ec 08             	sub    $0x8,%esp
+  800cc0:	ff 75 0c             	pushl  0xc(%ebp)
+  800cc3:	6a 78                	push   $0x78
+  800cc5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cc8:	ff d0                	call   *%eax
+  800cca:	83 c4 10             	add    $0x10,%esp
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800ccd:	8b 45 14             	mov    0x14(%ebp),%eax
+  800cd0:	8d 50 04             	lea    0x4(%eax),%edx
+  800cd3:	89 55 14             	mov    %edx,0x14(%ebp)
+  800cd6:	8b 00                	mov    (%eax),%eax
+  800cd8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cdb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800ce2:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800ce9:	eb 1f                	jmp    800d0a <vprintfmt+0x33d>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800ceb:	83 ec 08             	sub    $0x8,%esp
+  800cee:	ff 75 e0             	pushl  -0x20(%ebp)
+  800cf1:	8d 45 14             	lea    0x14(%ebp),%eax
+  800cf4:	50                   	push   %eax
+  800cf5:	e8 19 fc ff ff       	call   800913 <getuint>
+  800cfa:	83 c4 10             	add    $0x10,%esp
+  800cfd:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d00:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d03:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d0a:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d11:	83 ec 04             	sub    $0x4,%esp
+  800d14:	52                   	push   %edx
+  800d15:	ff 75 e8             	pushl  -0x18(%ebp)
+  800d18:	50                   	push   %eax
+  800d19:	ff 75 f4             	pushl  -0xc(%ebp)
+  800d1c:	ff 75 f0             	pushl  -0x10(%ebp)
+  800d1f:	ff 75 0c             	pushl  0xc(%ebp)
+  800d22:	ff 75 08             	pushl  0x8(%ebp)
+  800d25:	e8 f8 fa ff ff       	call   800822 <printnum>
+  800d2a:	83 c4 20             	add    $0x20,%esp
+            break;
+  800d2d:	eb 39                	jmp    800d68 <vprintfmt+0x39b>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800d2f:	83 ec 08             	sub    $0x8,%esp
+  800d32:	ff 75 0c             	pushl  0xc(%ebp)
+  800d35:	53                   	push   %ebx
+  800d36:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d39:	ff d0                	call   *%eax
+  800d3b:	83 c4 10             	add    $0x10,%esp
+            break;
+  800d3e:	eb 28                	jmp    800d68 <vprintfmt+0x39b>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800d40:	83 ec 08             	sub    $0x8,%esp
+  800d43:	ff 75 0c             	pushl  0xc(%ebp)
+  800d46:	6a 25                	push   $0x25
+  800d48:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d4b:	ff d0                	call   *%eax
+  800d4d:	83 c4 10             	add    $0x10,%esp
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800d50:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d54:	eb 04                	jmp    800d5a <vprintfmt+0x38d>
+  800d56:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d5a:	8b 45 10             	mov    0x10(%ebp),%eax
+  800d5d:	83 e8 01             	sub    $0x1,%eax
+  800d60:	0f b6 00             	movzbl (%eax),%eax
+  800d63:	3c 25                	cmp    $0x25,%al
+  800d65:	75 ef                	jne    800d56 <vprintfmt+0x389>
+                /* do nothing */;
+            break;
+  800d67:	90                   	nop
+        }
+    }
+  800d68:	e9 68 fc ff ff       	jmp    8009d5 <vprintfmt+0x8>
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+            if (ch == '\0') {
+                return;
+  800d6d:	90                   	nop
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  800d6e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  800d71:	5b                   	pop    %ebx
+  800d72:	5e                   	pop    %esi
+  800d73:	5d                   	pop    %ebp
+  800d74:	c3                   	ret    
+
+00800d75 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800d75:	55                   	push   %ebp
+  800d76:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800d78:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d7b:	8b 40 08             	mov    0x8(%eax),%eax
+  800d7e:	8d 50 01             	lea    0x1(%eax),%edx
+  800d81:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d84:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800d87:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d8a:	8b 10                	mov    (%eax),%edx
+  800d8c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d8f:	8b 40 04             	mov    0x4(%eax),%eax
+  800d92:	39 c2                	cmp    %eax,%edx
+  800d94:	73 12                	jae    800da8 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800d96:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d99:	8b 00                	mov    (%eax),%eax
+  800d9b:	8d 48 01             	lea    0x1(%eax),%ecx
+  800d9e:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800da1:	89 0a                	mov    %ecx,(%edx)
+  800da3:	8b 55 08             	mov    0x8(%ebp),%edx
+  800da6:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800da8:	90                   	nop
+  800da9:	5d                   	pop    %ebp
+  800daa:	c3                   	ret    
+
+00800dab <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800dab:	55                   	push   %ebp
+  800dac:	89 e5                	mov    %esp,%ebp
+  800dae:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800db1:	8d 45 14             	lea    0x14(%ebp),%eax
+  800db4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800db7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800dba:	50                   	push   %eax
+  800dbb:	ff 75 10             	pushl  0x10(%ebp)
+  800dbe:	ff 75 0c             	pushl  0xc(%ebp)
+  800dc1:	ff 75 08             	pushl  0x8(%ebp)
+  800dc4:	e8 0b 00 00 00       	call   800dd4 <vsnprintf>
+  800dc9:	83 c4 10             	add    $0x10,%esp
+  800dcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800dcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800dd2:	c9                   	leave  
+  800dd3:	c3                   	ret    
+
+00800dd4 <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800dd4:	55                   	push   %ebp
+  800dd5:	89 e5                	mov    %esp,%ebp
+  800dd7:	83 ec 18             	sub    $0x18,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800dda:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ddd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800de0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800de3:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800de6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de9:	01 d0                	add    %edx,%eax
+  800deb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800dee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800df5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800df9:	74 0a                	je     800e05 <vsnprintf+0x31>
+  800dfb:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800dfe:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e01:	39 c2                	cmp    %eax,%edx
+  800e03:	76 07                	jbe    800e0c <vsnprintf+0x38>
+        return -E_INVAL;
+  800e05:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e0a:	eb 20                	jmp    800e2c <vsnprintf+0x58>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e0c:	ff 75 14             	pushl  0x14(%ebp)
+  800e0f:	ff 75 10             	pushl  0x10(%ebp)
+  800e12:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800e15:	50                   	push   %eax
+  800e16:	68 75 0d 80 00       	push   $0x800d75
+  800e1b:	e8 ad fb ff ff       	call   8009cd <vprintfmt>
+  800e20:	83 c4 10             	add    $0x10,%esp
+    // null terminate the buffer
+    *b.buf = '\0';
+  800e23:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e26:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800e29:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e2c:	c9                   	leave  
+  800e2d:	c3                   	ret    
+
+00800e2e <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800e2e:	55                   	push   %ebp
+  800e2f:	89 e5                	mov    %esp,%ebp
+  800e31:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800e34:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e37:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800e3d:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800e40:	b8 20 00 00 00       	mov    $0x20,%eax
+  800e45:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800e48:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800e4b:	89 c1                	mov    %eax,%ecx
+  800e4d:	d3 ea                	shr    %cl,%edx
+  800e4f:	89 d0                	mov    %edx,%eax
+}
+  800e51:	c9                   	leave  
+  800e52:	c3                   	ret    
+
+00800e53 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800e53:	55                   	push   %ebp
+  800e54:	89 e5                	mov    %esp,%ebp
+  800e56:	57                   	push   %edi
+  800e57:	56                   	push   %esi
+  800e58:	53                   	push   %ebx
+  800e59:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800e5c:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e61:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800e67:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800e6d:	6b f0 05             	imul   $0x5,%eax,%esi
+  800e70:	01 fe                	add    %edi,%esi
+  800e72:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800e77:	f7 e7                	mul    %edi
+  800e79:	01 d6                	add    %edx,%esi
+  800e7b:	89 f2                	mov    %esi,%edx
+  800e7d:	83 c0 0b             	add    $0xb,%eax
+  800e80:	83 d2 00             	adc    $0x0,%edx
+  800e83:	89 c7                	mov    %eax,%edi
+  800e85:	83 e7 ff             	and    $0xffffffff,%edi
+  800e88:	89 f9                	mov    %edi,%ecx
+  800e8a:	0f b7 da             	movzwl %dx,%ebx
+  800e8d:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800e93:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800e99:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e9e:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ea4:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ea8:	c1 ea 0c             	shr    $0xc,%edx
+  800eab:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800eae:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800eb1:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800eb8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ebb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ebe:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ec1:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800ec4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec7:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800eca:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ece:	74 1c                	je     800eec <rand+0x99>
+  800ed0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ed3:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ed8:	f7 75 dc             	divl   -0x24(%ebp)
+  800edb:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800ede:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ee1:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ee6:	f7 75 dc             	divl   -0x24(%ebp)
+  800ee9:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800eec:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800eef:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800ef2:	f7 75 dc             	divl   -0x24(%ebp)
+  800ef5:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ef8:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800efb:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800efe:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800f01:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f04:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f07:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800f0a:	83 c4 24             	add    $0x24,%esp
+  800f0d:	5b                   	pop    %ebx
+  800f0e:	5e                   	pop    %esi
+  800f0f:	5f                   	pop    %edi
+  800f10:	5d                   	pop    %ebp
+  800f11:	c3                   	ret    
+
+00800f12 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800f12:	55                   	push   %ebp
+  800f13:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800f15:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f18:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f1d:	a3 00 20 80 00       	mov    %eax,0x802000
+  800f22:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800f28:	90                   	nop
+  800f29:	5d                   	pop    %ebp
+  800f2a:	c3                   	ret    
+
+00800f2b <spin_delay>:
+int status[TOTAL];
+int pids[TOTAL];
+
+static void
+spin_delay(void)
+{
+  800f2b:	55                   	push   %ebp
+  800f2c:	89 e5                	mov    %esp,%ebp
+  800f2e:	83 ec 10             	sub    $0x10,%esp
+     int i;
+     volatile int j;
+     for (i = 0; i != 200; ++ i)
+  800f31:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+  800f38:	eb 12                	jmp    800f4c <spin_delay+0x21>
+     {
+          j = !j;
+  800f3a:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800f3d:	85 c0                	test   %eax,%eax
+  800f3f:	0f 94 c0             	sete   %al
+  800f42:	0f b6 c0             	movzbl %al,%eax
+  800f45:	89 45 f8             	mov    %eax,-0x8(%ebp)
+static void
+spin_delay(void)
+{
+     int i;
+     volatile int j;
+     for (i = 0; i != 200; ++ i)
+  800f48:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800f4c:	81 7d fc c8 00 00 00 	cmpl   $0xc8,-0x4(%ebp)
+  800f53:	75 e5                	jne    800f3a <spin_delay+0xf>
+     {
+          j = !j;
+     }
+}
+  800f55:	90                   	nop
+  800f56:	c9                   	leave  
+  800f57:	c3                   	ret    
+
+00800f58 <main>:
+
+int
+main(void) {
+  800f58:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  800f5c:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f5f:	ff 71 fc             	pushl  -0x4(%ecx)
+  800f62:	55                   	push   %ebp
+  800f63:	89 e5                	mov    %esp,%ebp
+  800f65:	53                   	push   %ebx
+  800f66:	51                   	push   %ecx
+  800f67:	83 ec 10             	sub    $0x10,%esp
+     int i,time;
+     memset(pids, 0, sizeof(pids));
+  800f6a:	83 ec 04             	sub    $0x4,%esp
+  800f6d:	6a 14                	push   $0x14
+  800f6f:	6a 00                	push   $0x0
+  800f71:	68 30 20 80 00       	push   $0x802030
+  800f76:	e8 1c f7 ff ff       	call   800697 <memset>
+  800f7b:	83 c4 10             	add    $0x10,%esp
+     lab6_set_priority(TOTAL + 1);
+  800f7e:	83 ec 0c             	sub    $0xc,%esp
+  800f81:	6a 06                	push   $0x6
+  800f83:	e8 de f2 ff ff       	call   800266 <lab6_set_priority>
+  800f88:	83 c4 10             	add    $0x10,%esp
+
+     for (i = 0; i < TOTAL; i ++) {
+  800f8b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  800f92:	e9 ee 00 00 00       	jmp    801085 <main+0x12d>
+          acc[i]=0;
+  800f97:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800f9a:	c7 04 85 08 20 80 00 	movl   $0x0,0x802008(,%eax,4)
+  800fa1:	00 00 00 00 
+          if ((pids[i] = fork()) == 0) {
+  800fa5:	e8 33 f2 ff ff       	call   8001dd <fork>
+  800faa:	89 c2                	mov    %eax,%edx
+  800fac:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800faf:	89 14 85 30 20 80 00 	mov    %edx,0x802030(,%eax,4)
+  800fb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800fb9:	8b 04 85 30 20 80 00 	mov    0x802030(,%eax,4),%eax
+  800fc0:	85 c0                	test   %eax,%eax
+  800fc2:	0f 85 a7 00 00 00    	jne    80106f <main+0x117>
+               lab6_set_priority(i + 1);
+  800fc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800fcb:	83 c0 01             	add    $0x1,%eax
+  800fce:	83 ec 0c             	sub    $0xc,%esp
+  800fd1:	50                   	push   %eax
+  800fd2:	e8 8f f2 ff ff       	call   800266 <lab6_set_priority>
+  800fd7:	83 c4 10             	add    $0x10,%esp
+               acc[i] = 0;
+  800fda:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800fdd:	c7 04 85 08 20 80 00 	movl   $0x0,0x802008(,%eax,4)
+  800fe4:	00 00 00 00 
+               while (1) {
+                    spin_delay();
+  800fe8:	e8 3e ff ff ff       	call   800f2b <spin_delay>
+                    ++ acc[i];
+  800fed:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800ff0:	8b 04 85 08 20 80 00 	mov    0x802008(,%eax,4),%eax
+  800ff7:	8d 50 01             	lea    0x1(%eax),%edx
+  800ffa:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800ffd:	89 14 85 08 20 80 00 	mov    %edx,0x802008(,%eax,4)
+                    if(acc[i]%4000==0) {
+  801004:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  801007:	8b 0c 85 08 20 80 00 	mov    0x802008(,%eax,4),%ecx
+  80100e:	ba d3 4d 62 10       	mov    $0x10624dd3,%edx
+  801013:	89 c8                	mov    %ecx,%eax
+  801015:	f7 e2                	mul    %edx
+  801017:	89 d0                	mov    %edx,%eax
+  801019:	c1 e8 08             	shr    $0x8,%eax
+  80101c:	69 c0 a0 0f 00 00    	imul   $0xfa0,%eax,%eax
+  801022:	29 c1                	sub    %eax,%ecx
+  801024:	89 c8                	mov    %ecx,%eax
+  801026:	85 c0                	test   %eax,%eax
+  801028:	75 be                	jne    800fe8 <main+0x90>
+                        if((time=gettime_msec())>MAX_TIME) {
+  80102a:	e8 2a f2 ff ff       	call   800259 <gettime_msec>
+  80102f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  801032:	81 7d f0 e8 03 00 00 	cmpl   $0x3e8,-0x10(%ebp)
+  801039:	7e ad                	jle    800fe8 <main+0x90>
+                            cprintf("child pid %d, acc %d, time %d\n",getpid(),acc[i],time);
+  80103b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80103e:	8b 1c 85 08 20 80 00 	mov    0x802008(,%eax,4),%ebx
+  801045:	e8 f4 f1 ff ff       	call   80023e <getpid>
+  80104a:	ff 75 f0             	pushl  -0x10(%ebp)
+  80104d:	53                   	push   %ebx
+  80104e:	50                   	push   %eax
+  80104f:	68 c0 14 80 00       	push   $0x8014c0
+  801054:	e8 80 f2 ff ff       	call   8002d9 <cprintf>
+  801059:	83 c4 10             	add    $0x10,%esp
+                            exit(acc[i]);
+  80105c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80105f:	8b 04 85 08 20 80 00 	mov    0x802008(,%eax,4),%eax
+  801066:	83 ec 0c             	sub    $0xc,%esp
+  801069:	50                   	push   %eax
+  80106a:	e8 48 f1 ff ff       	call   8001b7 <exit>
+                        }
+                    }
+               }
+               
+          }
+          if (pids[i] < 0) {
+  80106f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  801072:	8b 04 85 30 20 80 00 	mov    0x802030(,%eax,4),%eax
+  801079:	85 c0                	test   %eax,%eax
+  80107b:	0f 88 09 01 00 00    	js     80118a <main+0x232>
+main(void) {
+     int i,time;
+     memset(pids, 0, sizeof(pids));
+     lab6_set_priority(TOTAL + 1);
+
+     for (i = 0; i < TOTAL; i ++) {
+  801081:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  801085:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
+  801089:	0f 8e 08 ff ff ff    	jle    800f97 <main+0x3f>
+          if (pids[i] < 0) {
+               goto failed;
+          }
+     }
+
+     cprintf("main: fork ok,now need to wait pids.\n");
+  80108f:	83 ec 0c             	sub    $0xc,%esp
+  801092:	68 e0 14 80 00       	push   $0x8014e0
+  801097:	e8 3d f2 ff ff       	call   8002d9 <cprintf>
+  80109c:	83 c4 10             	add    $0x10,%esp
+
+     for (i = 0; i < TOTAL; i ++) {
+  80109f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  8010a6:	eb 60                	jmp    801108 <main+0x1b0>
+         status[i]=0;
+  8010a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8010ab:	c7 04 85 1c 20 80 00 	movl   $0x0,0x80201c(,%eax,4)
+  8010b2:	00 00 00 00 
+         waitpid(pids[i],&status[i]);
+  8010b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8010b9:	c1 e0 02             	shl    $0x2,%eax
+  8010bc:	8d 90 1c 20 80 00    	lea    0x80201c(%eax),%edx
+  8010c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8010c5:	8b 04 85 30 20 80 00 	mov    0x802030(,%eax,4),%eax
+  8010cc:	83 ec 08             	sub    $0x8,%esp
+  8010cf:	52                   	push   %edx
+  8010d0:	50                   	push   %eax
+  8010d1:	e8 2b f1 ff ff       	call   800201 <waitpid>
+  8010d6:	83 c4 10             	add    $0x10,%esp
+         cprintf("main: pid %d, acc %d, time %d\n",pids[i],status[i],gettime_msec()); 
+  8010d9:	e8 7b f1 ff ff       	call   800259 <gettime_msec>
+  8010de:	89 c1                	mov    %eax,%ecx
+  8010e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8010e3:	8b 14 85 1c 20 80 00 	mov    0x80201c(,%eax,4),%edx
+  8010ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8010ed:	8b 04 85 30 20 80 00 	mov    0x802030(,%eax,4),%eax
+  8010f4:	51                   	push   %ecx
+  8010f5:	52                   	push   %edx
+  8010f6:	50                   	push   %eax
+  8010f7:	68 08 15 80 00       	push   $0x801508
+  8010fc:	e8 d8 f1 ff ff       	call   8002d9 <cprintf>
+  801101:	83 c4 10             	add    $0x10,%esp
+          }
+     }
+
+     cprintf("main: fork ok,now need to wait pids.\n");
+
+     for (i = 0; i < TOTAL; i ++) {
+  801104:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  801108:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
+  80110c:	7e 9a                	jle    8010a8 <main+0x150>
+         status[i]=0;
+         waitpid(pids[i],&status[i]);
+         cprintf("main: pid %d, acc %d, time %d\n",pids[i],status[i],gettime_msec()); 
+     }
+     cprintf("main: wait pids over\n");
+  80110e:	83 ec 0c             	sub    $0xc,%esp
+  801111:	68 27 15 80 00       	push   $0x801527
+  801116:	e8 be f1 ff ff       	call   8002d9 <cprintf>
+  80111b:	83 c4 10             	add    $0x10,%esp
+     cprintf("stride sched correct result:");
+  80111e:	83 ec 0c             	sub    $0xc,%esp
+  801121:	68 3d 15 80 00       	push   $0x80153d
+  801126:	e8 ae f1 ff ff       	call   8002d9 <cprintf>
+  80112b:	83 c4 10             	add    $0x10,%esp
+     for (i = 0; i < TOTAL; i ++)
+  80112e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  801135:	eb 36                	jmp    80116d <main+0x215>
+     {
+         cprintf(" %d", (status[i] * 2 / status[0] + 1) / 2);
+  801137:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80113a:	8b 04 85 1c 20 80 00 	mov    0x80201c(,%eax,4),%eax
+  801141:	01 c0                	add    %eax,%eax
+  801143:	8b 1d 1c 20 80 00    	mov    0x80201c,%ebx
+  801149:	99                   	cltd   
+  80114a:	f7 fb                	idiv   %ebx
+  80114c:	83 c0 01             	add    $0x1,%eax
+  80114f:	89 c2                	mov    %eax,%edx
+  801151:	c1 ea 1f             	shr    $0x1f,%edx
+  801154:	01 d0                	add    %edx,%eax
+  801156:	d1 f8                	sar    %eax
+  801158:	83 ec 08             	sub    $0x8,%esp
+  80115b:	50                   	push   %eax
+  80115c:	68 5a 15 80 00       	push   $0x80155a
+  801161:	e8 73 f1 ff ff       	call   8002d9 <cprintf>
+  801166:	83 c4 10             	add    $0x10,%esp
+         waitpid(pids[i],&status[i]);
+         cprintf("main: pid %d, acc %d, time %d\n",pids[i],status[i],gettime_msec()); 
+     }
+     cprintf("main: wait pids over\n");
+     cprintf("stride sched correct result:");
+     for (i = 0; i < TOTAL; i ++)
+  801169:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  80116d:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
+  801171:	7e c4                	jle    801137 <main+0x1df>
+     {
+         cprintf(" %d", (status[i] * 2 / status[0] + 1) / 2);
+     }
+     cprintf("\n");
+  801173:	83 ec 0c             	sub    $0xc,%esp
+  801176:	68 5e 15 80 00       	push   $0x80155e
+  80117b:	e8 59 f1 ff ff       	call   8002d9 <cprintf>
+  801180:	83 c4 10             	add    $0x10,%esp
+
+     return 0;
+  801183:	b8 00 00 00 00       	mov    $0x0,%eax
+  801188:	eb 4c                	jmp    8011d6 <main+0x27e>
+                    }
+               }
+               
+          }
+          if (pids[i] < 0) {
+               goto failed;
+  80118a:	90                   	nop
+     cprintf("\n");
+
+     return 0;
+
+failed:
+     for (i = 0; i < TOTAL; i ++) {
+  80118b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  801192:	eb 28                	jmp    8011bc <main+0x264>
+          if (pids[i] > 0) {
+  801194:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  801197:	8b 04 85 30 20 80 00 	mov    0x802030(,%eax,4),%eax
+  80119e:	85 c0                	test   %eax,%eax
+  8011a0:	7e 16                	jle    8011b8 <main+0x260>
+               kill(pids[i]);
+  8011a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8011a5:	8b 04 85 30 20 80 00 	mov    0x802030(,%eax,4),%eax
+  8011ac:	83 ec 0c             	sub    $0xc,%esp
+  8011af:	50                   	push   %eax
+  8011b0:	e8 73 f0 ff ff       	call   800228 <kill>
+  8011b5:	83 c4 10             	add    $0x10,%esp
+     cprintf("\n");
+
+     return 0;
+
+failed:
+     for (i = 0; i < TOTAL; i ++) {
+  8011b8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  8011bc:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
+  8011c0:	7e d2                	jle    801194 <main+0x23c>
+          if (pids[i] > 0) {
+               kill(pids[i]);
+          }
+     }
+     panic("FAIL: T.T\n");
+  8011c2:	83 ec 04             	sub    $0x4,%esp
+  8011c5:	68 60 15 80 00       	push   $0x801560
+  8011ca:	6a 4b                	push   $0x4b
+  8011cc:	68 6b 15 80 00       	push   $0x80156b
+  8011d1:	e8 4a ee ff ff       	call   800020 <__panic>
+}
+  8011d6:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  8011d9:	59                   	pop    %ecx
+  8011da:	5b                   	pop    %ebx
+  8011db:	5d                   	pop    %ebp
+  8011dc:	8d 61 fc             	lea    -0x4(%ecx),%esp
+  8011df:	c3                   	ret    
diff -r -u -P lab6_original/obj/user/priority.d lab6/obj/user/priority.d
--- lab6_original/obj/user/priority.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/priority.d	2016-04-29 16:22:06.856499390 +0800
@@ -0,0 +1,2 @@
+obj/user/priority.o obj/user/priority.d: user/priority.c user/libs/ulib.h \
+ libs/defs.h libs/stdio.h libs/stdarg.h libs/string.h libs/stdlib.h
Binary files lab6_original/obj/user/priority.o and lab6/obj/user/priority.o differ
diff -r -u -P lab6_original/obj/user/priority.sym lab6/obj/user/priority.sym
--- lab6_original/obj/user/priority.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/priority.sym	2016-04-29 16:22:07.672978522 +0800
@@ -0,0 +1,81 @@
+00800020 .text
+008011e0 .rodata
+00802000 .data
+00802008 .bss
+00200000 .stab_info
+00200010 .stab
+00202f2d .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b5 syscall
+00000000 ulib.c
+00000000 stdio.c
+0080028c cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+008012e0 error_string
+00800822 printnum
+00800913 getuint
+00800962 getint
+00800d75 sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 priority.c
+00800f2b spin_delay
+008003be strcpy
+0080021a yield
+00802008 acc
+00800201 waitpid
+00800141 sys_yield
+008006d7 memmove
+00800dab snprintf
+008009cd vprintfmt
+0080011d sys_fork
+008002d9 cprintf
+0080023e getpid
+0080077a memcpy
+00800266 lab6_set_priority
+00800dd4 vsnprintf
+0080034d umain
+00202f2c __STAB_END__
+00800150 sys_kill
+00202f2d __STABSTR_BEGIN__
+00800020 __panic
+0080053a strtol
+0080038e strnlen
+0080024b print_pgdir
+00800228 kill
+0080050b strfind
+008001ea wait
+0080027d _start
+00800e53 rand
+00800482 strncmp
+00800171 sys_putc
+008003fe strncpy
+008007ca memcmp
+008001dd fork
+00800697 memset
+00800f58 main
+00800f12 srand
+00800e2e hash32
+008009a9 printfmt
+00203d98 __STABSTR_END__
+00800438 strcmp
+00800259 gettime_msec
+00800192 sys_gettime
+008002b0 vcprintf
+0080006e __warn
+008002ff cputs
+008001a1 sys_lab6_set_priority
+008001b7 exit
+0080012c sys_wait
+0080010b sys_exit
+00200010 __STAB_BEGIN__
+00800366 strlen
+00800183 sys_pgdir
+008004d8 strchr
+00800162 sys_getpid
+0080201c status
+00802030 pids
diff -r -u -P lab6_original/obj/user/softint.asm lab6/obj/user/softint.asm
--- lab6_original/obj/user/softint.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/softint.asm	2016-04-29 16:22:07.716789259 +0800
@@ -0,0 +1,2578 @@
+
+obj/__user_softint.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 18             	sub    $0x18,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	83 ec 04             	sub    $0x4,%esp
+  80002f:	ff 75 0c             	pushl  0xc(%ebp)
+  800032:	ff 75 08             	pushl  0x8(%ebp)
+  800035:	68 60 0f 80 00       	push   $0x800f60
+  80003a:	e8 9a 02 00 00       	call   8002d9 <cprintf>
+  80003f:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800042:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800045:	83 ec 08             	sub    $0x8,%esp
+  800048:	50                   	push   %eax
+  800049:	ff 75 10             	pushl  0x10(%ebp)
+  80004c:	e8 5f 02 00 00       	call   8002b0 <vcprintf>
+  800051:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  800054:	83 ec 0c             	sub    $0xc,%esp
+  800057:	68 7a 0f 80 00       	push   $0x800f7a
+  80005c:	e8 78 02 00 00       	call   8002d9 <cprintf>
+  800061:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	83 ec 0c             	sub    $0xc,%esp
+  800067:	6a f6                	push   $0xfffffff6
+  800069:	e8 49 01 00 00       	call   8001b7 <exit>
+
+0080006e <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80006e:	55                   	push   %ebp
+  80006f:	89 e5                	mov    %esp,%ebp
+  800071:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800074:	8d 45 14             	lea    0x14(%ebp),%eax
+  800077:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007a:	83 ec 04             	sub    $0x4,%esp
+  80007d:	ff 75 0c             	pushl  0xc(%ebp)
+  800080:	ff 75 08             	pushl  0x8(%ebp)
+  800083:	68 7c 0f 80 00       	push   $0x800f7c
+  800088:	e8 4c 02 00 00       	call   8002d9 <cprintf>
+  80008d:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800090:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800093:	83 ec 08             	sub    $0x8,%esp
+  800096:	50                   	push   %eax
+  800097:	ff 75 10             	pushl  0x10(%ebp)
+  80009a:	e8 11 02 00 00       	call   8002b0 <vcprintf>
+  80009f:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  8000a2:	83 ec 0c             	sub    $0xc,%esp
+  8000a5:	68 7a 0f 80 00       	push   $0x800f7a
+  8000aa:	e8 2a 02 00 00       	call   8002d9 <cprintf>
+  8000af:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8000b2:	90                   	nop
+  8000b3:	c9                   	leave  
+  8000b4:	c3                   	ret    
+
+008000b5 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b5:	55                   	push   %ebp
+  8000b6:	89 e5                	mov    %esp,%ebp
+  8000b8:	57                   	push   %edi
+  8000b9:	56                   	push   %esi
+  8000ba:	53                   	push   %ebx
+  8000bb:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000be:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cb:	eb 16                	jmp    8000e3 <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8000cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d0:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d3:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d6:	8b 10                	mov    (%eax),%edx
+  8000d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000db:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000df:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8000e3:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e7:	7e e4                	jle    8000cd <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000e9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ec:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000ef:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f2:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f5:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8000f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fb:	cd 80                	int    $0x80
+  8000fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  800100:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800103:	83 c4 20             	add    $0x20,%esp
+  800106:	5b                   	pop    %ebx
+  800107:	5e                   	pop    %esi
+  800108:	5f                   	pop    %edi
+  800109:	5d                   	pop    %ebp
+  80010a:	c3                   	ret    
+
+0080010b <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010b:	55                   	push   %ebp
+  80010c:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_exit, error_code);
+  80010e:	ff 75 08             	pushl  0x8(%ebp)
+  800111:	6a 01                	push   $0x1
+  800113:	e8 9d ff ff ff       	call   8000b5 <syscall>
+  800118:	83 c4 08             	add    $0x8,%esp
+}
+  80011b:	c9                   	leave  
+  80011c:	c3                   	ret    
+
+0080011d <sys_fork>:
+
+int
+sys_fork(void) {
+  80011d:	55                   	push   %ebp
+  80011e:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_fork);
+  800120:	6a 02                	push   $0x2
+  800122:	e8 8e ff ff ff       	call   8000b5 <syscall>
+  800127:	83 c4 04             	add    $0x4,%esp
+}
+  80012a:	c9                   	leave  
+  80012b:	c3                   	ret    
+
+0080012c <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80012c:	55                   	push   %ebp
+  80012d:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_wait, pid, store);
+  80012f:	ff 75 0c             	pushl  0xc(%ebp)
+  800132:	ff 75 08             	pushl  0x8(%ebp)
+  800135:	6a 03                	push   $0x3
+  800137:	e8 79 ff ff ff       	call   8000b5 <syscall>
+  80013c:	83 c4 0c             	add    $0xc,%esp
+}
+  80013f:	c9                   	leave  
+  800140:	c3                   	ret    
+
+00800141 <sys_yield>:
+
+int
+sys_yield(void) {
+  800141:	55                   	push   %ebp
+  800142:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_yield);
+  800144:	6a 0a                	push   $0xa
+  800146:	e8 6a ff ff ff       	call   8000b5 <syscall>
+  80014b:	83 c4 04             	add    $0x4,%esp
+}
+  80014e:	c9                   	leave  
+  80014f:	c3                   	ret    
+
+00800150 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800150:	55                   	push   %ebp
+  800151:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_kill, pid);
+  800153:	ff 75 08             	pushl  0x8(%ebp)
+  800156:	6a 0c                	push   $0xc
+  800158:	e8 58 ff ff ff       	call   8000b5 <syscall>
+  80015d:	83 c4 08             	add    $0x8,%esp
+}
+  800160:	c9                   	leave  
+  800161:	c3                   	ret    
+
+00800162 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800162:	55                   	push   %ebp
+  800163:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_getpid);
+  800165:	6a 12                	push   $0x12
+  800167:	e8 49 ff ff ff       	call   8000b5 <syscall>
+  80016c:	83 c4 04             	add    $0x4,%esp
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_putc, c);
+  800174:	ff 75 08             	pushl  0x8(%ebp)
+  800177:	6a 1e                	push   $0x1e
+  800179:	e8 37 ff ff ff       	call   8000b5 <syscall>
+  80017e:	83 c4 08             	add    $0x8,%esp
+}
+  800181:	c9                   	leave  
+  800182:	c3                   	ret    
+
+00800183 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800183:	55                   	push   %ebp
+  800184:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_pgdir);
+  800186:	6a 1f                	push   $0x1f
+  800188:	e8 28 ff ff ff       	call   8000b5 <syscall>
+  80018d:	83 c4 04             	add    $0x4,%esp
+}
+  800190:	c9                   	leave  
+  800191:	c3                   	ret    
+
+00800192 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  800192:	55                   	push   %ebp
+  800193:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_gettime);
+  800195:	6a 11                	push   $0x11
+  800197:	e8 19 ff ff ff       	call   8000b5 <syscall>
+  80019c:	83 c4 04             	add    $0x4,%esp
+}
+  80019f:	c9                   	leave  
+  8001a0:	c3                   	ret    
+
+008001a1 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001a1:	55                   	push   %ebp
+  8001a2:	89 e5                	mov    %esp,%ebp
+    syscall(SYS_lab6_set_priority, priority);
+  8001a4:	ff 75 08             	pushl  0x8(%ebp)
+  8001a7:	68 ff 00 00 00       	push   $0xff
+  8001ac:	e8 04 ff ff ff       	call   8000b5 <syscall>
+  8001b1:	83 c4 08             	add    $0x8,%esp
+}
+  8001b4:	90                   	nop
+  8001b5:	c9                   	leave  
+  8001b6:	c3                   	ret    
+
+008001b7 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001b7:	55                   	push   %ebp
+  8001b8:	89 e5                	mov    %esp,%ebp
+  8001ba:	83 ec 08             	sub    $0x8,%esp
+    sys_exit(error_code);
+  8001bd:	83 ec 0c             	sub    $0xc,%esp
+  8001c0:	ff 75 08             	pushl  0x8(%ebp)
+  8001c3:	e8 43 ff ff ff       	call   80010b <sys_exit>
+  8001c8:	83 c4 10             	add    $0x10,%esp
+    cprintf("BUG: exit failed.\n");
+  8001cb:	83 ec 0c             	sub    $0xc,%esp
+  8001ce:	68 98 0f 80 00       	push   $0x800f98
+  8001d3:	e8 01 01 00 00       	call   8002d9 <cprintf>
+  8001d8:	83 c4 10             	add    $0x10,%esp
+    while (1);
+  8001db:	eb fe                	jmp    8001db <exit+0x24>
+
+008001dd <fork>:
+}
+
+int
+fork(void) {
+  8001dd:	55                   	push   %ebp
+  8001de:	89 e5                	mov    %esp,%ebp
+  8001e0:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8001e3:	e8 35 ff ff ff       	call   80011d <sys_fork>
+}
+  8001e8:	c9                   	leave  
+  8001e9:	c3                   	ret    
+
+008001ea <wait>:
+
+int
+wait(void) {
+  8001ea:	55                   	push   %ebp
+  8001eb:	89 e5                	mov    %esp,%ebp
+  8001ed:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(0, NULL);
+  8001f0:	83 ec 08             	sub    $0x8,%esp
+  8001f3:	6a 00                	push   $0x0
+  8001f5:	6a 00                	push   $0x0
+  8001f7:	e8 30 ff ff ff       	call   80012c <sys_wait>
+  8001fc:	83 c4 10             	add    $0x10,%esp
+}
+  8001ff:	c9                   	leave  
+  800200:	c3                   	ret    
+
+00800201 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800201:	55                   	push   %ebp
+  800202:	89 e5                	mov    %esp,%ebp
+  800204:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(pid, store);
+  800207:	83 ec 08             	sub    $0x8,%esp
+  80020a:	ff 75 0c             	pushl  0xc(%ebp)
+  80020d:	ff 75 08             	pushl  0x8(%ebp)
+  800210:	e8 17 ff ff ff       	call   80012c <sys_wait>
+  800215:	83 c4 10             	add    $0x10,%esp
+}
+  800218:	c9                   	leave  
+  800219:	c3                   	ret    
+
+0080021a <yield>:
+
+void
+yield(void) {
+  80021a:	55                   	push   %ebp
+  80021b:	89 e5                	mov    %esp,%ebp
+  80021d:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800220:	e8 1c ff ff ff       	call   800141 <sys_yield>
+}
+  800225:	90                   	nop
+  800226:	c9                   	leave  
+  800227:	c3                   	ret    
+
+00800228 <kill>:
+
+int
+kill(int pid) {
+  800228:	55                   	push   %ebp
+  800229:	89 e5                	mov    %esp,%ebp
+  80022b:	83 ec 08             	sub    $0x8,%esp
+    return sys_kill(pid);
+  80022e:	83 ec 0c             	sub    $0xc,%esp
+  800231:	ff 75 08             	pushl  0x8(%ebp)
+  800234:	e8 17 ff ff ff       	call   800150 <sys_kill>
+  800239:	83 c4 10             	add    $0x10,%esp
+}
+  80023c:	c9                   	leave  
+  80023d:	c3                   	ret    
+
+0080023e <getpid>:
+
+int
+getpid(void) {
+  80023e:	55                   	push   %ebp
+  80023f:	89 e5                	mov    %esp,%ebp
+  800241:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800244:	e8 19 ff ff ff       	call   800162 <sys_getpid>
+}
+  800249:	c9                   	leave  
+  80024a:	c3                   	ret    
+
+0080024b <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80024b:	55                   	push   %ebp
+  80024c:	89 e5                	mov    %esp,%ebp
+  80024e:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800251:	e8 2d ff ff ff       	call   800183 <sys_pgdir>
+}
+  800256:	90                   	nop
+  800257:	c9                   	leave  
+  800258:	c3                   	ret    
+
+00800259 <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  800259:	55                   	push   %ebp
+  80025a:	89 e5                	mov    %esp,%ebp
+  80025c:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  80025f:	e8 2e ff ff ff       	call   800192 <sys_gettime>
+}
+  800264:	c9                   	leave  
+  800265:	c3                   	ret    
+
+00800266 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800266:	55                   	push   %ebp
+  800267:	89 e5                	mov    %esp,%ebp
+  800269:	83 ec 08             	sub    $0x8,%esp
+    sys_lab6_set_priority(priority);
+  80026c:	83 ec 0c             	sub    $0xc,%esp
+  80026f:	ff 75 08             	pushl  0x8(%ebp)
+  800272:	e8 2a ff ff ff       	call   8001a1 <sys_lab6_set_priority>
+  800277:	83 c4 10             	add    $0x10,%esp
+}
+  80027a:	90                   	nop
+  80027b:	c9                   	leave  
+  80027c:	c3                   	ret    
+
+0080027d <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  80027d:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800282:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800285:	e8 c3 00 00 00       	call   80034d <umain>
+1:  jmp 1b
+  80028a:	eb fe                	jmp    80028a <_start+0xd>
+
+0080028c <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  80028c:	55                   	push   %ebp
+  80028d:	89 e5                	mov    %esp,%ebp
+  80028f:	83 ec 08             	sub    $0x8,%esp
+    sys_putc(c);
+  800292:	83 ec 0c             	sub    $0xc,%esp
+  800295:	ff 75 08             	pushl  0x8(%ebp)
+  800298:	e8 d4 fe ff ff       	call   800171 <sys_putc>
+  80029d:	83 c4 10             	add    $0x10,%esp
+    (*cnt) ++;
+  8002a0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002a3:	8b 00                	mov    (%eax),%eax
+  8002a5:	8d 50 01             	lea    0x1(%eax),%edx
+  8002a8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002ab:	89 10                	mov    %edx,(%eax)
+}
+  8002ad:	90                   	nop
+  8002ae:	c9                   	leave  
+  8002af:	c3                   	ret    
+
+008002b0 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002b0:	55                   	push   %ebp
+  8002b1:	89 e5                	mov    %esp,%ebp
+  8002b3:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  8002b6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002bd:	ff 75 0c             	pushl  0xc(%ebp)
+  8002c0:	ff 75 08             	pushl  0x8(%ebp)
+  8002c3:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  8002c6:	50                   	push   %eax
+  8002c7:	68 8c 02 80 00       	push   $0x80028c
+  8002cc:	e8 fc 06 00 00       	call   8009cd <vprintfmt>
+  8002d1:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  8002d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002d7:	c9                   	leave  
+  8002d8:	c3                   	ret    
+
+008002d9 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  8002d9:	55                   	push   %ebp
+  8002da:	89 e5                	mov    %esp,%ebp
+  8002dc:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8002df:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8002e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  8002e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8002e8:	83 ec 08             	sub    $0x8,%esp
+  8002eb:	50                   	push   %eax
+  8002ec:	ff 75 08             	pushl  0x8(%ebp)
+  8002ef:	e8 bc ff ff ff       	call   8002b0 <vcprintf>
+  8002f4:	83 c4 10             	add    $0x10,%esp
+  8002f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  8002fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002fd:	c9                   	leave  
+  8002fe:	c3                   	ret    
+
+008002ff <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  8002ff:	55                   	push   %ebp
+  800300:	89 e5                	mov    %esp,%ebp
+  800302:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  800305:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80030c:	eb 14                	jmp    800322 <cputs+0x23>
+        cputch(c, &cnt);
+  80030e:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800312:	83 ec 08             	sub    $0x8,%esp
+  800315:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800318:	52                   	push   %edx
+  800319:	50                   	push   %eax
+  80031a:	e8 6d ff ff ff       	call   80028c <cputch>
+  80031f:	83 c4 10             	add    $0x10,%esp
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800322:	8b 45 08             	mov    0x8(%ebp),%eax
+  800325:	8d 50 01             	lea    0x1(%eax),%edx
+  800328:	89 55 08             	mov    %edx,0x8(%ebp)
+  80032b:	0f b6 00             	movzbl (%eax),%eax
+  80032e:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800331:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800335:	75 d7                	jne    80030e <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800337:	83 ec 08             	sub    $0x8,%esp
+  80033a:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  80033d:	50                   	push   %eax
+  80033e:	6a 0a                	push   $0xa
+  800340:	e8 47 ff ff ff       	call   80028c <cputch>
+  800345:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  800348:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80034b:	c9                   	leave  
+  80034c:	c3                   	ret    
+
+0080034d <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  80034d:	55                   	push   %ebp
+  80034e:	89 e5                	mov    %esp,%ebp
+  800350:	83 ec 18             	sub    $0x18,%esp
+    int ret = main();
+  800353:	e8 d3 0b 00 00       	call   800f2b <main>
+  800358:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  80035b:	83 ec 0c             	sub    $0xc,%esp
+  80035e:	ff 75 f4             	pushl  -0xc(%ebp)
+  800361:	e8 51 fe ff ff       	call   8001b7 <exit>
+
+00800366 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800366:	55                   	push   %ebp
+  800367:	89 e5                	mov    %esp,%ebp
+  800369:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  80036c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800373:	eb 04                	jmp    800379 <strlen+0x13>
+        cnt ++;
+  800375:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800379:	8b 45 08             	mov    0x8(%ebp),%eax
+  80037c:	8d 50 01             	lea    0x1(%eax),%edx
+  80037f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800382:	0f b6 00             	movzbl (%eax),%eax
+  800385:	84 c0                	test   %al,%al
+  800387:	75 ec                	jne    800375 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800389:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  80038c:	c9                   	leave  
+  80038d:	c3                   	ret    
+
+0080038e <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  80038e:	55                   	push   %ebp
+  80038f:	89 e5                	mov    %esp,%ebp
+  800391:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800394:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  80039b:	eb 04                	jmp    8003a1 <strnlen+0x13>
+        cnt ++;
+  80039d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  8003a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003a4:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003a7:	73 10                	jae    8003b9 <strnlen+0x2b>
+  8003a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003ac:	8d 50 01             	lea    0x1(%eax),%edx
+  8003af:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003b2:	0f b6 00             	movzbl (%eax),%eax
+  8003b5:	84 c0                	test   %al,%al
+  8003b7:	75 e4                	jne    80039d <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003b9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003bc:	c9                   	leave  
+  8003bd:	c3                   	ret    
+
+008003be <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  8003be:	55                   	push   %ebp
+  8003bf:	89 e5                	mov    %esp,%ebp
+  8003c1:	57                   	push   %edi
+  8003c2:	56                   	push   %esi
+  8003c3:	83 ec 20             	sub    $0x20,%esp
+  8003c6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003cc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8003cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  8003d2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003d8:	89 d1                	mov    %edx,%ecx
+  8003da:	89 c2                	mov    %eax,%edx
+  8003dc:	89 ce                	mov    %ecx,%esi
+  8003de:	89 d7                	mov    %edx,%edi
+  8003e0:	ac                   	lods   %ds:(%esi),%al
+  8003e1:	aa                   	stos   %al,%es:(%edi)
+  8003e2:	84 c0                	test   %al,%al
+  8003e4:	75 fa                	jne    8003e0 <strcpy+0x22>
+  8003e6:	89 fa                	mov    %edi,%edx
+  8003e8:	89 f1                	mov    %esi,%ecx
+  8003ea:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8003ed:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8003f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  8003f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  8003f6:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  8003f7:	83 c4 20             	add    $0x20,%esp
+  8003fa:	5e                   	pop    %esi
+  8003fb:	5f                   	pop    %edi
+  8003fc:	5d                   	pop    %ebp
+  8003fd:	c3                   	ret    
+
+008003fe <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  8003fe:	55                   	push   %ebp
+  8003ff:	89 e5                	mov    %esp,%ebp
+  800401:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800404:	8b 45 08             	mov    0x8(%ebp),%eax
+  800407:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  80040a:	eb 21                	jmp    80042d <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  80040c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80040f:	0f b6 10             	movzbl (%eax),%edx
+  800412:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800415:	88 10                	mov    %dl,(%eax)
+  800417:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80041a:	0f b6 00             	movzbl (%eax),%eax
+  80041d:	84 c0                	test   %al,%al
+  80041f:	74 04                	je     800425 <strncpy+0x27>
+            src ++;
+  800421:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800425:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800429:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  80042d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800431:	75 d9                	jne    80040c <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800433:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800436:	c9                   	leave  
+  800437:	c3                   	ret    
+
+00800438 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800438:	55                   	push   %ebp
+  800439:	89 e5                	mov    %esp,%ebp
+  80043b:	57                   	push   %edi
+  80043c:	56                   	push   %esi
+  80043d:	83 ec 20             	sub    $0x20,%esp
+  800440:	8b 45 08             	mov    0x8(%ebp),%eax
+  800443:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800446:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800449:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  80044c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80044f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800452:	89 d1                	mov    %edx,%ecx
+  800454:	89 c2                	mov    %eax,%edx
+  800456:	89 ce                	mov    %ecx,%esi
+  800458:	89 d7                	mov    %edx,%edi
+  80045a:	ac                   	lods   %ds:(%esi),%al
+  80045b:	ae                   	scas   %es:(%edi),%al
+  80045c:	75 08                	jne    800466 <strcmp+0x2e>
+  80045e:	84 c0                	test   %al,%al
+  800460:	75 f8                	jne    80045a <strcmp+0x22>
+  800462:	31 c0                	xor    %eax,%eax
+  800464:	eb 04                	jmp    80046a <strcmp+0x32>
+  800466:	19 c0                	sbb    %eax,%eax
+  800468:	0c 01                	or     $0x1,%al
+  80046a:	89 fa                	mov    %edi,%edx
+  80046c:	89 f1                	mov    %esi,%ecx
+  80046e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800471:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800474:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800477:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  80047a:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  80047b:	83 c4 20             	add    $0x20,%esp
+  80047e:	5e                   	pop    %esi
+  80047f:	5f                   	pop    %edi
+  800480:	5d                   	pop    %ebp
+  800481:	c3                   	ret    
+
+00800482 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800482:	55                   	push   %ebp
+  800483:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800485:	eb 0c                	jmp    800493 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800487:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  80048b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  80048f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800493:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800497:	74 1a                	je     8004b3 <strncmp+0x31>
+  800499:	8b 45 08             	mov    0x8(%ebp),%eax
+  80049c:	0f b6 00             	movzbl (%eax),%eax
+  80049f:	84 c0                	test   %al,%al
+  8004a1:	74 10                	je     8004b3 <strncmp+0x31>
+  8004a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004a6:	0f b6 10             	movzbl (%eax),%edx
+  8004a9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ac:	0f b6 00             	movzbl (%eax),%eax
+  8004af:	38 c2                	cmp    %al,%dl
+  8004b1:	74 d4                	je     800487 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004b3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004b7:	74 18                	je     8004d1 <strncmp+0x4f>
+  8004b9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004bc:	0f b6 00             	movzbl (%eax),%eax
+  8004bf:	0f b6 d0             	movzbl %al,%edx
+  8004c2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004c5:	0f b6 00             	movzbl (%eax),%eax
+  8004c8:	0f b6 c0             	movzbl %al,%eax
+  8004cb:	29 c2                	sub    %eax,%edx
+  8004cd:	89 d0                	mov    %edx,%eax
+  8004cf:	eb 05                	jmp    8004d6 <strncmp+0x54>
+  8004d1:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8004d6:	5d                   	pop    %ebp
+  8004d7:	c3                   	ret    
+
+008004d8 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  8004d8:	55                   	push   %ebp
+  8004d9:	89 e5                	mov    %esp,%ebp
+  8004db:	83 ec 04             	sub    $0x4,%esp
+  8004de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004e1:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  8004e4:	eb 14                	jmp    8004fa <strchr+0x22>
+        if (*s == c) {
+  8004e6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e9:	0f b6 00             	movzbl (%eax),%eax
+  8004ec:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  8004ef:	75 05                	jne    8004f6 <strchr+0x1e>
+            return (char *)s;
+  8004f1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004f4:	eb 13                	jmp    800509 <strchr+0x31>
+        }
+        s ++;
+  8004f6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  8004fa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fd:	0f b6 00             	movzbl (%eax),%eax
+  800500:	84 c0                	test   %al,%al
+  800502:	75 e2                	jne    8004e6 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800504:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800509:	c9                   	leave  
+  80050a:	c3                   	ret    
+
+0080050b <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  80050b:	55                   	push   %ebp
+  80050c:	89 e5                	mov    %esp,%ebp
+  80050e:	83 ec 04             	sub    $0x4,%esp
+  800511:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800514:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800517:	eb 0f                	jmp    800528 <strfind+0x1d>
+        if (*s == c) {
+  800519:	8b 45 08             	mov    0x8(%ebp),%eax
+  80051c:	0f b6 00             	movzbl (%eax),%eax
+  80051f:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800522:	74 10                	je     800534 <strfind+0x29>
+            break;
+        }
+        s ++;
+  800524:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800528:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052b:	0f b6 00             	movzbl (%eax),%eax
+  80052e:	84 c0                	test   %al,%al
+  800530:	75 e7                	jne    800519 <strfind+0xe>
+  800532:	eb 01                	jmp    800535 <strfind+0x2a>
+        if (*s == c) {
+            break;
+  800534:	90                   	nop
+        }
+        s ++;
+    }
+    return (char *)s;
+  800535:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800538:	c9                   	leave  
+  800539:	c3                   	ret    
+
+0080053a <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  80053a:	55                   	push   %ebp
+  80053b:	89 e5                	mov    %esp,%ebp
+  80053d:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800540:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800547:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80054e:	eb 04                	jmp    800554 <strtol+0x1a>
+        s ++;
+  800550:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800554:	8b 45 08             	mov    0x8(%ebp),%eax
+  800557:	0f b6 00             	movzbl (%eax),%eax
+  80055a:	3c 20                	cmp    $0x20,%al
+  80055c:	74 f2                	je     800550 <strtol+0x16>
+  80055e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800561:	0f b6 00             	movzbl (%eax),%eax
+  800564:	3c 09                	cmp    $0x9,%al
+  800566:	74 e8                	je     800550 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800568:	8b 45 08             	mov    0x8(%ebp),%eax
+  80056b:	0f b6 00             	movzbl (%eax),%eax
+  80056e:	3c 2b                	cmp    $0x2b,%al
+  800570:	75 06                	jne    800578 <strtol+0x3e>
+        s ++;
+  800572:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800576:	eb 15                	jmp    80058d <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800578:	8b 45 08             	mov    0x8(%ebp),%eax
+  80057b:	0f b6 00             	movzbl (%eax),%eax
+  80057e:	3c 2d                	cmp    $0x2d,%al
+  800580:	75 0b                	jne    80058d <strtol+0x53>
+        s ++, neg = 1;
+  800582:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800586:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  80058d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800591:	74 06                	je     800599 <strtol+0x5f>
+  800593:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800597:	75 24                	jne    8005bd <strtol+0x83>
+  800599:	8b 45 08             	mov    0x8(%ebp),%eax
+  80059c:	0f b6 00             	movzbl (%eax),%eax
+  80059f:	3c 30                	cmp    $0x30,%al
+  8005a1:	75 1a                	jne    8005bd <strtol+0x83>
+  8005a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a6:	83 c0 01             	add    $0x1,%eax
+  8005a9:	0f b6 00             	movzbl (%eax),%eax
+  8005ac:	3c 78                	cmp    $0x78,%al
+  8005ae:	75 0d                	jne    8005bd <strtol+0x83>
+        s += 2, base = 16;
+  8005b0:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005b4:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005bb:	eb 2a                	jmp    8005e7 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005bd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005c1:	75 17                	jne    8005da <strtol+0xa0>
+  8005c3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005c6:	0f b6 00             	movzbl (%eax),%eax
+  8005c9:	3c 30                	cmp    $0x30,%al
+  8005cb:	75 0d                	jne    8005da <strtol+0xa0>
+        s ++, base = 8;
+  8005cd:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005d1:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  8005d8:	eb 0d                	jmp    8005e7 <strtol+0xad>
+    }
+    else if (base == 0) {
+  8005da:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005de:	75 07                	jne    8005e7 <strtol+0xad>
+        base = 10;
+  8005e0:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  8005e7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ea:	0f b6 00             	movzbl (%eax),%eax
+  8005ed:	3c 2f                	cmp    $0x2f,%al
+  8005ef:	7e 1b                	jle    80060c <strtol+0xd2>
+  8005f1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005f4:	0f b6 00             	movzbl (%eax),%eax
+  8005f7:	3c 39                	cmp    $0x39,%al
+  8005f9:	7f 11                	jg     80060c <strtol+0xd2>
+            dig = *s - '0';
+  8005fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005fe:	0f b6 00             	movzbl (%eax),%eax
+  800601:	0f be c0             	movsbl %al,%eax
+  800604:	83 e8 30             	sub    $0x30,%eax
+  800607:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80060a:	eb 48                	jmp    800654 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  80060c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80060f:	0f b6 00             	movzbl (%eax),%eax
+  800612:	3c 60                	cmp    $0x60,%al
+  800614:	7e 1b                	jle    800631 <strtol+0xf7>
+  800616:	8b 45 08             	mov    0x8(%ebp),%eax
+  800619:	0f b6 00             	movzbl (%eax),%eax
+  80061c:	3c 7a                	cmp    $0x7a,%al
+  80061e:	7f 11                	jg     800631 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800620:	8b 45 08             	mov    0x8(%ebp),%eax
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	0f be c0             	movsbl %al,%eax
+  800629:	83 e8 57             	sub    $0x57,%eax
+  80062c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80062f:	eb 23                	jmp    800654 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800631:	8b 45 08             	mov    0x8(%ebp),%eax
+  800634:	0f b6 00             	movzbl (%eax),%eax
+  800637:	3c 40                	cmp    $0x40,%al
+  800639:	7e 3c                	jle    800677 <strtol+0x13d>
+  80063b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80063e:	0f b6 00             	movzbl (%eax),%eax
+  800641:	3c 5a                	cmp    $0x5a,%al
+  800643:	7f 32                	jg     800677 <strtol+0x13d>
+            dig = *s - 'A' + 10;
+  800645:	8b 45 08             	mov    0x8(%ebp),%eax
+  800648:	0f b6 00             	movzbl (%eax),%eax
+  80064b:	0f be c0             	movsbl %al,%eax
+  80064e:	83 e8 37             	sub    $0x37,%eax
+  800651:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800654:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800657:	3b 45 10             	cmp    0x10(%ebp),%eax
+  80065a:	7d 1a                	jge    800676 <strtol+0x13c>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  80065c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800660:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800663:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800667:	89 c2                	mov    %eax,%edx
+  800669:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80066c:	01 d0                	add    %edx,%eax
+  80066e:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800671:	e9 71 ff ff ff       	jmp    8005e7 <strtol+0xad>
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+            break;
+  800676:	90                   	nop
+        }
+        s ++, val = (val * base) + dig;
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  800677:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80067b:	74 08                	je     800685 <strtol+0x14b>
+        *endptr = (char *) s;
+  80067d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800680:	8b 55 08             	mov    0x8(%ebp),%edx
+  800683:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800685:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800689:	74 07                	je     800692 <strtol+0x158>
+  80068b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80068e:	f7 d8                	neg    %eax
+  800690:	eb 03                	jmp    800695 <strtol+0x15b>
+  800692:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800695:	c9                   	leave  
+  800696:	c3                   	ret    
+
+00800697 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800697:	55                   	push   %ebp
+  800698:	89 e5                	mov    %esp,%ebp
+  80069a:	57                   	push   %edi
+  80069b:	83 ec 24             	sub    $0x24,%esp
+  80069e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006a1:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006a4:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006a8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006ab:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006ae:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006b1:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006b7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006ba:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006be:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006c1:	89 d7                	mov    %edx,%edi
+  8006c3:	f3 aa                	rep stos %al,%es:(%edi)
+  8006c5:	89 fa                	mov    %edi,%edx
+  8006c7:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8006ca:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  8006cd:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006d0:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  8006d1:	83 c4 24             	add    $0x24,%esp
+  8006d4:	5f                   	pop    %edi
+  8006d5:	5d                   	pop    %ebp
+  8006d6:	c3                   	ret    
+
+008006d7 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  8006d7:	55                   	push   %ebp
+  8006d8:	89 e5                	mov    %esp,%ebp
+  8006da:	57                   	push   %edi
+  8006db:	56                   	push   %esi
+  8006dc:	53                   	push   %ebx
+  8006dd:	83 ec 30             	sub    $0x30,%esp
+  8006e0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8006e6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006e9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8006ec:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006ef:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  8006f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8006f5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  8006f8:	73 42                	jae    80073c <memmove+0x65>
+  8006fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8006fd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800700:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800703:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800706:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800709:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  80070c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  80070f:	c1 e8 02             	shr    $0x2,%eax
+  800712:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800714:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800717:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80071a:	89 d7                	mov    %edx,%edi
+  80071c:	89 c6                	mov    %eax,%esi
+  80071e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800720:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800723:	83 e1 03             	and    $0x3,%ecx
+  800726:	74 02                	je     80072a <memmove+0x53>
+  800728:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  80072a:	89 f0                	mov    %esi,%eax
+  80072c:	89 fa                	mov    %edi,%edx
+  80072e:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800731:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800734:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800737:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  80073a:	eb 36                	jmp    800772 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  80073c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80073f:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800742:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800745:	01 c2                	add    %eax,%edx
+  800747:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80074a:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  80074d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800750:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800753:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800756:	89 c1                	mov    %eax,%ecx
+  800758:	89 d8                	mov    %ebx,%eax
+  80075a:	89 d6                	mov    %edx,%esi
+  80075c:	89 c7                	mov    %eax,%edi
+  80075e:	fd                   	std    
+  80075f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800761:	fc                   	cld    
+  800762:	89 f8                	mov    %edi,%eax
+  800764:	89 f2                	mov    %esi,%edx
+  800766:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800769:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  80076c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  80076f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800772:	83 c4 30             	add    $0x30,%esp
+  800775:	5b                   	pop    %ebx
+  800776:	5e                   	pop    %esi
+  800777:	5f                   	pop    %edi
+  800778:	5d                   	pop    %ebp
+  800779:	c3                   	ret    
+
+0080077a <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  80077a:	55                   	push   %ebp
+  80077b:	89 e5                	mov    %esp,%ebp
+  80077d:	57                   	push   %edi
+  80077e:	56                   	push   %esi
+  80077f:	83 ec 20             	sub    $0x20,%esp
+  800782:	8b 45 08             	mov    0x8(%ebp),%eax
+  800785:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800788:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80078b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80078e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800791:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800794:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800797:	c1 e8 02             	shr    $0x2,%eax
+  80079a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  80079c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80079f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007a2:	89 d7                	mov    %edx,%edi
+  8007a4:	89 c6                	mov    %eax,%esi
+  8007a6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007a8:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007ab:	83 e1 03             	and    $0x3,%ecx
+  8007ae:	74 02                	je     8007b2 <memcpy+0x38>
+  8007b0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007b2:	89 f0                	mov    %esi,%eax
+  8007b4:	89 fa                	mov    %edi,%edx
+  8007b6:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007b9:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007bc:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  8007bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007c2:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007c3:	83 c4 20             	add    $0x20,%esp
+  8007c6:	5e                   	pop    %esi
+  8007c7:	5f                   	pop    %edi
+  8007c8:	5d                   	pop    %ebp
+  8007c9:	c3                   	ret    
+
+008007ca <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  8007ca:	55                   	push   %ebp
+  8007cb:	89 e5                	mov    %esp,%ebp
+  8007cd:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  8007d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007d3:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  8007d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007d9:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  8007dc:	eb 30                	jmp    80080e <memcmp+0x44>
+        if (*s1 != *s2) {
+  8007de:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8007e1:	0f b6 10             	movzbl (%eax),%edx
+  8007e4:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8007e7:	0f b6 00             	movzbl (%eax),%eax
+  8007ea:	38 c2                	cmp    %al,%dl
+  8007ec:	74 18                	je     800806 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8007ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8007f1:	0f b6 00             	movzbl (%eax),%eax
+  8007f4:	0f b6 d0             	movzbl %al,%edx
+  8007f7:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8007fa:	0f b6 00             	movzbl (%eax),%eax
+  8007fd:	0f b6 c0             	movzbl %al,%eax
+  800800:	29 c2                	sub    %eax,%edx
+  800802:	89 d0                	mov    %edx,%eax
+  800804:	eb 1a                	jmp    800820 <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800806:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  80080a:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  80080e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800811:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800814:	89 55 10             	mov    %edx,0x10(%ebp)
+  800817:	85 c0                	test   %eax,%eax
+  800819:	75 c3                	jne    8007de <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  80081b:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800820:	c9                   	leave  
+  800821:	c3                   	ret    
+
+00800822 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800822:	55                   	push   %ebp
+  800823:	89 e5                	mov    %esp,%ebp
+  800825:	83 ec 38             	sub    $0x38,%esp
+  800828:	8b 45 10             	mov    0x10(%ebp),%eax
+  80082b:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  80082e:	8b 45 14             	mov    0x14(%ebp),%eax
+  800831:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  800834:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800837:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  80083a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80083d:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800840:	8b 45 18             	mov    0x18(%ebp),%eax
+  800843:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800846:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800849:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80084c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80084f:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  800852:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800855:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800858:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  80085c:	74 1c                	je     80087a <printnum+0x58>
+  80085e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800861:	ba 00 00 00 00       	mov    $0x0,%edx
+  800866:	f7 75 e4             	divl   -0x1c(%ebp)
+  800869:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  80086c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80086f:	ba 00 00 00 00       	mov    $0x0,%edx
+  800874:	f7 75 e4             	divl   -0x1c(%ebp)
+  800877:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80087a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80087d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800880:	f7 75 e4             	divl   -0x1c(%ebp)
+  800883:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800886:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800889:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80088c:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80088f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800892:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800895:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800898:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  80089b:	8b 45 18             	mov    0x18(%ebp),%eax
+  80089e:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008a3:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008a6:	77 41                	ja     8008e9 <printnum+0xc7>
+  8008a8:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008ab:	72 05                	jb     8008b2 <printnum+0x90>
+  8008ad:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  8008b0:	77 37                	ja     8008e9 <printnum+0xc7>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008b2:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008b5:	83 e8 01             	sub    $0x1,%eax
+  8008b8:	83 ec 04             	sub    $0x4,%esp
+  8008bb:	ff 75 20             	pushl  0x20(%ebp)
+  8008be:	50                   	push   %eax
+  8008bf:	ff 75 18             	pushl  0x18(%ebp)
+  8008c2:	ff 75 ec             	pushl  -0x14(%ebp)
+  8008c5:	ff 75 e8             	pushl  -0x18(%ebp)
+  8008c8:	ff 75 0c             	pushl  0xc(%ebp)
+  8008cb:	ff 75 08             	pushl  0x8(%ebp)
+  8008ce:	e8 4f ff ff ff       	call   800822 <printnum>
+  8008d3:	83 c4 20             	add    $0x20,%esp
+  8008d6:	eb 1b                	jmp    8008f3 <printnum+0xd1>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  8008d8:	83 ec 08             	sub    $0x8,%esp
+  8008db:	ff 75 0c             	pushl  0xc(%ebp)
+  8008de:	ff 75 20             	pushl  0x20(%ebp)
+  8008e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008e4:	ff d0                	call   *%eax
+  8008e6:	83 c4 10             	add    $0x10,%esp
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8008e9:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8008ed:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8008f1:	7f e5                	jg     8008d8 <printnum+0xb6>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8008f3:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8008f6:	05 c4 10 80 00       	add    $0x8010c4,%eax
+  8008fb:	0f b6 00             	movzbl (%eax),%eax
+  8008fe:	0f be c0             	movsbl %al,%eax
+  800901:	83 ec 08             	sub    $0x8,%esp
+  800904:	ff 75 0c             	pushl  0xc(%ebp)
+  800907:	50                   	push   %eax
+  800908:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090b:	ff d0                	call   *%eax
+  80090d:	83 c4 10             	add    $0x10,%esp
+}
+  800910:	90                   	nop
+  800911:	c9                   	leave  
+  800912:	c3                   	ret    
+
+00800913 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800913:	55                   	push   %ebp
+  800914:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800916:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80091a:	7e 14                	jle    800930 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80091c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80091f:	8b 00                	mov    (%eax),%eax
+  800921:	8d 48 08             	lea    0x8(%eax),%ecx
+  800924:	8b 55 08             	mov    0x8(%ebp),%edx
+  800927:	89 0a                	mov    %ecx,(%edx)
+  800929:	8b 50 04             	mov    0x4(%eax),%edx
+  80092c:	8b 00                	mov    (%eax),%eax
+  80092e:	eb 30                	jmp    800960 <getuint+0x4d>
+    }
+    else if (lflag) {
+  800930:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800934:	74 16                	je     80094c <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800936:	8b 45 08             	mov    0x8(%ebp),%eax
+  800939:	8b 00                	mov    (%eax),%eax
+  80093b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80093e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800941:	89 0a                	mov    %ecx,(%edx)
+  800943:	8b 00                	mov    (%eax),%eax
+  800945:	ba 00 00 00 00       	mov    $0x0,%edx
+  80094a:	eb 14                	jmp    800960 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80094c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80094f:	8b 00                	mov    (%eax),%eax
+  800951:	8d 48 04             	lea    0x4(%eax),%ecx
+  800954:	8b 55 08             	mov    0x8(%ebp),%edx
+  800957:	89 0a                	mov    %ecx,(%edx)
+  800959:	8b 00                	mov    (%eax),%eax
+  80095b:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800960:	5d                   	pop    %ebp
+  800961:	c3                   	ret    
+
+00800962 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800962:	55                   	push   %ebp
+  800963:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800965:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800969:	7e 14                	jle    80097f <getint+0x1d>
+        return va_arg(*ap, long long);
+  80096b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80096e:	8b 00                	mov    (%eax),%eax
+  800970:	8d 48 08             	lea    0x8(%eax),%ecx
+  800973:	8b 55 08             	mov    0x8(%ebp),%edx
+  800976:	89 0a                	mov    %ecx,(%edx)
+  800978:	8b 50 04             	mov    0x4(%eax),%edx
+  80097b:	8b 00                	mov    (%eax),%eax
+  80097d:	eb 28                	jmp    8009a7 <getint+0x45>
+    }
+    else if (lflag) {
+  80097f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800983:	74 12                	je     800997 <getint+0x35>
+        return va_arg(*ap, long);
+  800985:	8b 45 08             	mov    0x8(%ebp),%eax
+  800988:	8b 00                	mov    (%eax),%eax
+  80098a:	8d 48 04             	lea    0x4(%eax),%ecx
+  80098d:	8b 55 08             	mov    0x8(%ebp),%edx
+  800990:	89 0a                	mov    %ecx,(%edx)
+  800992:	8b 00                	mov    (%eax),%eax
+  800994:	99                   	cltd   
+  800995:	eb 10                	jmp    8009a7 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800997:	8b 45 08             	mov    0x8(%ebp),%eax
+  80099a:	8b 00                	mov    (%eax),%eax
+  80099c:	8d 48 04             	lea    0x4(%eax),%ecx
+  80099f:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009a2:	89 0a                	mov    %ecx,(%edx)
+  8009a4:	8b 00                	mov    (%eax),%eax
+  8009a6:	99                   	cltd   
+    }
+}
+  8009a7:	5d                   	pop    %ebp
+  8009a8:	c3                   	ret    
+
+008009a9 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009a9:	55                   	push   %ebp
+  8009aa:	89 e5                	mov    %esp,%ebp
+  8009ac:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009af:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8009b8:	50                   	push   %eax
+  8009b9:	ff 75 10             	pushl  0x10(%ebp)
+  8009bc:	ff 75 0c             	pushl  0xc(%ebp)
+  8009bf:	ff 75 08             	pushl  0x8(%ebp)
+  8009c2:	e8 06 00 00 00       	call   8009cd <vprintfmt>
+  8009c7:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8009ca:	90                   	nop
+  8009cb:	c9                   	leave  
+  8009cc:	c3                   	ret    
+
+008009cd <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8009cd:	55                   	push   %ebp
+  8009ce:	89 e5                	mov    %esp,%ebp
+  8009d0:	56                   	push   %esi
+  8009d1:	53                   	push   %ebx
+  8009d2:	83 ec 20             	sub    $0x20,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009d5:	eb 17                	jmp    8009ee <vprintfmt+0x21>
+            if (ch == '\0') {
+  8009d7:	85 db                	test   %ebx,%ebx
+  8009d9:	0f 84 8e 03 00 00    	je     800d6d <vprintfmt+0x3a0>
+                return;
+            }
+            putch(ch, putdat);
+  8009df:	83 ec 08             	sub    $0x8,%esp
+  8009e2:	ff 75 0c             	pushl  0xc(%ebp)
+  8009e5:	53                   	push   %ebx
+  8009e6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009e9:	ff d0                	call   *%eax
+  8009eb:	83 c4 10             	add    $0x10,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009ee:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009f1:	8d 50 01             	lea    0x1(%eax),%edx
+  8009f4:	89 55 10             	mov    %edx,0x10(%ebp)
+  8009f7:	0f b6 00             	movzbl (%eax),%eax
+  8009fa:	0f b6 d8             	movzbl %al,%ebx
+  8009fd:	83 fb 25             	cmp    $0x25,%ebx
+  800a00:	75 d5                	jne    8009d7 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a02:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a06:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a10:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a13:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a1a:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a1d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a20:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a23:	8d 50 01             	lea    0x1(%eax),%edx
+  800a26:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a29:	0f b6 00             	movzbl (%eax),%eax
+  800a2c:	0f b6 d8             	movzbl %al,%ebx
+  800a2f:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a32:	83 f8 55             	cmp    $0x55,%eax
+  800a35:	0f 87 05 03 00 00    	ja     800d40 <vprintfmt+0x373>
+  800a3b:	8b 04 85 e8 10 80 00 	mov    0x8010e8(,%eax,4),%eax
+  800a42:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a44:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a48:	eb d6                	jmp    800a20 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a4a:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800a4e:	eb d0                	jmp    800a20 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a50:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800a57:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a5a:	89 d0                	mov    %edx,%eax
+  800a5c:	c1 e0 02             	shl    $0x2,%eax
+  800a5f:	01 d0                	add    %edx,%eax
+  800a61:	01 c0                	add    %eax,%eax
+  800a63:	01 d8                	add    %ebx,%eax
+  800a65:	83 e8 30             	sub    $0x30,%eax
+  800a68:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800a6b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a6e:	0f b6 00             	movzbl (%eax),%eax
+  800a71:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800a74:	83 fb 2f             	cmp    $0x2f,%ebx
+  800a77:	7e 39                	jle    800ab2 <vprintfmt+0xe5>
+  800a79:	83 fb 39             	cmp    $0x39,%ebx
+  800a7c:	7f 34                	jg     800ab2 <vprintfmt+0xe5>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a7e:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  800a82:	eb d3                	jmp    800a57 <vprintfmt+0x8a>
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800a84:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a87:	8d 50 04             	lea    0x4(%eax),%edx
+  800a8a:	89 55 14             	mov    %edx,0x14(%ebp)
+  800a8d:	8b 00                	mov    (%eax),%eax
+  800a8f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800a92:	eb 1f                	jmp    800ab3 <vprintfmt+0xe6>
+
+        case '.':
+            if (width < 0)
+  800a94:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800a98:	79 86                	jns    800a20 <vprintfmt+0x53>
+                width = 0;
+  800a9a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800aa1:	e9 7a ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800aa6:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800aad:	e9 6e ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+            goto process_precision;
+  800ab2:	90                   	nop
+        case '#':
+            altflag = 1;
+            goto reswitch;
+
+        process_precision:
+            if (width < 0)
+  800ab3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ab7:	0f 89 63 ff ff ff    	jns    800a20 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800abd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ac0:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800ac3:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800aca:	e9 51 ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800acf:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800ad3:	e9 48 ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800ad8:	8b 45 14             	mov    0x14(%ebp),%eax
+  800adb:	8d 50 04             	lea    0x4(%eax),%edx
+  800ade:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ae1:	8b 00                	mov    (%eax),%eax
+  800ae3:	83 ec 08             	sub    $0x8,%esp
+  800ae6:	ff 75 0c             	pushl  0xc(%ebp)
+  800ae9:	50                   	push   %eax
+  800aea:	8b 45 08             	mov    0x8(%ebp),%eax
+  800aed:	ff d0                	call   *%eax
+  800aef:	83 c4 10             	add    $0x10,%esp
+            break;
+  800af2:	e9 71 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800af7:	8b 45 14             	mov    0x14(%ebp),%eax
+  800afa:	8d 50 04             	lea    0x4(%eax),%edx
+  800afd:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b00:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b02:	85 db                	test   %ebx,%ebx
+  800b04:	79 02                	jns    800b08 <vprintfmt+0x13b>
+                err = -err;
+  800b06:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b08:	83 fb 18             	cmp    $0x18,%ebx
+  800b0b:	7f 0b                	jg     800b18 <vprintfmt+0x14b>
+  800b0d:	8b 34 9d 60 10 80 00 	mov    0x801060(,%ebx,4),%esi
+  800b14:	85 f6                	test   %esi,%esi
+  800b16:	75 19                	jne    800b31 <vprintfmt+0x164>
+                printfmt(putch, putdat, "error %d", err);
+  800b18:	53                   	push   %ebx
+  800b19:	68 d5 10 80 00       	push   $0x8010d5
+  800b1e:	ff 75 0c             	pushl  0xc(%ebp)
+  800b21:	ff 75 08             	pushl  0x8(%ebp)
+  800b24:	e8 80 fe ff ff       	call   8009a9 <printfmt>
+  800b29:	83 c4 10             	add    $0x10,%esp
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b2c:	e9 37 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  800b31:	56                   	push   %esi
+  800b32:	68 de 10 80 00       	push   $0x8010de
+  800b37:	ff 75 0c             	pushl  0xc(%ebp)
+  800b3a:	ff 75 08             	pushl  0x8(%ebp)
+  800b3d:	e8 67 fe ff ff       	call   8009a9 <printfmt>
+  800b42:	83 c4 10             	add    $0x10,%esp
+            }
+            break;
+  800b45:	e9 1e 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800b4a:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b4d:	8d 50 04             	lea    0x4(%eax),%edx
+  800b50:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b53:	8b 30                	mov    (%eax),%esi
+  800b55:	85 f6                	test   %esi,%esi
+  800b57:	75 05                	jne    800b5e <vprintfmt+0x191>
+                p = "(null)";
+  800b59:	be e1 10 80 00       	mov    $0x8010e1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800b5e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b62:	7e 76                	jle    800bda <vprintfmt+0x20d>
+  800b64:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800b68:	74 70                	je     800bda <vprintfmt+0x20d>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b6a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b6d:	83 ec 08             	sub    $0x8,%esp
+  800b70:	50                   	push   %eax
+  800b71:	56                   	push   %esi
+  800b72:	e8 17 f8 ff ff       	call   80038e <strnlen>
+  800b77:	83 c4 10             	add    $0x10,%esp
+  800b7a:	89 c2                	mov    %eax,%edx
+  800b7c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800b7f:	29 d0                	sub    %edx,%eax
+  800b81:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b84:	eb 17                	jmp    800b9d <vprintfmt+0x1d0>
+                    putch(padc, putdat);
+  800b86:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800b8a:	83 ec 08             	sub    $0x8,%esp
+  800b8d:	ff 75 0c             	pushl  0xc(%ebp)
+  800b90:	50                   	push   %eax
+  800b91:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b94:	ff d0                	call   *%eax
+  800b96:	83 c4 10             	add    $0x10,%esp
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b99:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800b9d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ba1:	7f e3                	jg     800b86 <vprintfmt+0x1b9>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800ba3:	eb 35                	jmp    800bda <vprintfmt+0x20d>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800ba5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800ba9:	74 1c                	je     800bc7 <vprintfmt+0x1fa>
+  800bab:	83 fb 1f             	cmp    $0x1f,%ebx
+  800bae:	7e 05                	jle    800bb5 <vprintfmt+0x1e8>
+  800bb0:	83 fb 7e             	cmp    $0x7e,%ebx
+  800bb3:	7e 12                	jle    800bc7 <vprintfmt+0x1fa>
+                    putch('?', putdat);
+  800bb5:	83 ec 08             	sub    $0x8,%esp
+  800bb8:	ff 75 0c             	pushl  0xc(%ebp)
+  800bbb:	6a 3f                	push   $0x3f
+  800bbd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bc0:	ff d0                	call   *%eax
+  800bc2:	83 c4 10             	add    $0x10,%esp
+  800bc5:	eb 0f                	jmp    800bd6 <vprintfmt+0x209>
+                }
+                else {
+                    putch(ch, putdat);
+  800bc7:	83 ec 08             	sub    $0x8,%esp
+  800bca:	ff 75 0c             	pushl  0xc(%ebp)
+  800bcd:	53                   	push   %ebx
+  800bce:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bd1:	ff d0                	call   *%eax
+  800bd3:	83 c4 10             	add    $0x10,%esp
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bd6:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800bda:	89 f0                	mov    %esi,%eax
+  800bdc:	8d 70 01             	lea    0x1(%eax),%esi
+  800bdf:	0f b6 00             	movzbl (%eax),%eax
+  800be2:	0f be d8             	movsbl %al,%ebx
+  800be5:	85 db                	test   %ebx,%ebx
+  800be7:	74 26                	je     800c0f <vprintfmt+0x242>
+  800be9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800bed:	78 b6                	js     800ba5 <vprintfmt+0x1d8>
+  800bef:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  800bf3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800bf7:	79 ac                	jns    800ba5 <vprintfmt+0x1d8>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800bf9:	eb 14                	jmp    800c0f <vprintfmt+0x242>
+                putch(' ', putdat);
+  800bfb:	83 ec 08             	sub    $0x8,%esp
+  800bfe:	ff 75 0c             	pushl  0xc(%ebp)
+  800c01:	6a 20                	push   $0x20
+  800c03:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c06:	ff d0                	call   *%eax
+  800c08:	83 c4 10             	add    $0x10,%esp
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c0b:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c0f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c13:	7f e6                	jg     800bfb <vprintfmt+0x22e>
+                putch(' ', putdat);
+            }
+            break;
+  800c15:	e9 4e 01 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c1a:	83 ec 08             	sub    $0x8,%esp
+  800c1d:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c20:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c23:	50                   	push   %eax
+  800c24:	e8 39 fd ff ff       	call   800962 <getint>
+  800c29:	83 c4 10             	add    $0x10,%esp
+  800c2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c2f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c32:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c35:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c38:	85 d2                	test   %edx,%edx
+  800c3a:	79 23                	jns    800c5f <vprintfmt+0x292>
+                putch('-', putdat);
+  800c3c:	83 ec 08             	sub    $0x8,%esp
+  800c3f:	ff 75 0c             	pushl  0xc(%ebp)
+  800c42:	6a 2d                	push   $0x2d
+  800c44:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c47:	ff d0                	call   *%eax
+  800c49:	83 c4 10             	add    $0x10,%esp
+                num = -(long long)num;
+  800c4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c4f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c52:	f7 d8                	neg    %eax
+  800c54:	83 d2 00             	adc    $0x0,%edx
+  800c57:	f7 da                	neg    %edx
+  800c59:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c5c:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800c5f:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c66:	e9 9f 00 00 00       	jmp    800d0a <vprintfmt+0x33d>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800c6b:	83 ec 08             	sub    $0x8,%esp
+  800c6e:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c71:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c74:	50                   	push   %eax
+  800c75:	e8 99 fc ff ff       	call   800913 <getuint>
+  800c7a:	83 c4 10             	add    $0x10,%esp
+  800c7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c80:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800c83:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c8a:	eb 7e                	jmp    800d0a <vprintfmt+0x33d>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800c8c:	83 ec 08             	sub    $0x8,%esp
+  800c8f:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c92:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c95:	50                   	push   %eax
+  800c96:	e8 78 fc ff ff       	call   800913 <getuint>
+  800c9b:	83 c4 10             	add    $0x10,%esp
+  800c9e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ca1:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800ca4:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800cab:	eb 5d                	jmp    800d0a <vprintfmt+0x33d>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800cad:	83 ec 08             	sub    $0x8,%esp
+  800cb0:	ff 75 0c             	pushl  0xc(%ebp)
+  800cb3:	6a 30                	push   $0x30
+  800cb5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb8:	ff d0                	call   *%eax
+  800cba:	83 c4 10             	add    $0x10,%esp
+            putch('x', putdat);
+  800cbd:	83 ec 08             	sub    $0x8,%esp
+  800cc0:	ff 75 0c             	pushl  0xc(%ebp)
+  800cc3:	6a 78                	push   $0x78
+  800cc5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cc8:	ff d0                	call   *%eax
+  800cca:	83 c4 10             	add    $0x10,%esp
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800ccd:	8b 45 14             	mov    0x14(%ebp),%eax
+  800cd0:	8d 50 04             	lea    0x4(%eax),%edx
+  800cd3:	89 55 14             	mov    %edx,0x14(%ebp)
+  800cd6:	8b 00                	mov    (%eax),%eax
+  800cd8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cdb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800ce2:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800ce9:	eb 1f                	jmp    800d0a <vprintfmt+0x33d>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800ceb:	83 ec 08             	sub    $0x8,%esp
+  800cee:	ff 75 e0             	pushl  -0x20(%ebp)
+  800cf1:	8d 45 14             	lea    0x14(%ebp),%eax
+  800cf4:	50                   	push   %eax
+  800cf5:	e8 19 fc ff ff       	call   800913 <getuint>
+  800cfa:	83 c4 10             	add    $0x10,%esp
+  800cfd:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d00:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d03:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d0a:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d11:	83 ec 04             	sub    $0x4,%esp
+  800d14:	52                   	push   %edx
+  800d15:	ff 75 e8             	pushl  -0x18(%ebp)
+  800d18:	50                   	push   %eax
+  800d19:	ff 75 f4             	pushl  -0xc(%ebp)
+  800d1c:	ff 75 f0             	pushl  -0x10(%ebp)
+  800d1f:	ff 75 0c             	pushl  0xc(%ebp)
+  800d22:	ff 75 08             	pushl  0x8(%ebp)
+  800d25:	e8 f8 fa ff ff       	call   800822 <printnum>
+  800d2a:	83 c4 20             	add    $0x20,%esp
+            break;
+  800d2d:	eb 39                	jmp    800d68 <vprintfmt+0x39b>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800d2f:	83 ec 08             	sub    $0x8,%esp
+  800d32:	ff 75 0c             	pushl  0xc(%ebp)
+  800d35:	53                   	push   %ebx
+  800d36:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d39:	ff d0                	call   *%eax
+  800d3b:	83 c4 10             	add    $0x10,%esp
+            break;
+  800d3e:	eb 28                	jmp    800d68 <vprintfmt+0x39b>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800d40:	83 ec 08             	sub    $0x8,%esp
+  800d43:	ff 75 0c             	pushl  0xc(%ebp)
+  800d46:	6a 25                	push   $0x25
+  800d48:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d4b:	ff d0                	call   *%eax
+  800d4d:	83 c4 10             	add    $0x10,%esp
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800d50:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d54:	eb 04                	jmp    800d5a <vprintfmt+0x38d>
+  800d56:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d5a:	8b 45 10             	mov    0x10(%ebp),%eax
+  800d5d:	83 e8 01             	sub    $0x1,%eax
+  800d60:	0f b6 00             	movzbl (%eax),%eax
+  800d63:	3c 25                	cmp    $0x25,%al
+  800d65:	75 ef                	jne    800d56 <vprintfmt+0x389>
+                /* do nothing */;
+            break;
+  800d67:	90                   	nop
+        }
+    }
+  800d68:	e9 68 fc ff ff       	jmp    8009d5 <vprintfmt+0x8>
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+            if (ch == '\0') {
+                return;
+  800d6d:	90                   	nop
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  800d6e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  800d71:	5b                   	pop    %ebx
+  800d72:	5e                   	pop    %esi
+  800d73:	5d                   	pop    %ebp
+  800d74:	c3                   	ret    
+
+00800d75 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800d75:	55                   	push   %ebp
+  800d76:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800d78:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d7b:	8b 40 08             	mov    0x8(%eax),%eax
+  800d7e:	8d 50 01             	lea    0x1(%eax),%edx
+  800d81:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d84:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800d87:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d8a:	8b 10                	mov    (%eax),%edx
+  800d8c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d8f:	8b 40 04             	mov    0x4(%eax),%eax
+  800d92:	39 c2                	cmp    %eax,%edx
+  800d94:	73 12                	jae    800da8 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800d96:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d99:	8b 00                	mov    (%eax),%eax
+  800d9b:	8d 48 01             	lea    0x1(%eax),%ecx
+  800d9e:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800da1:	89 0a                	mov    %ecx,(%edx)
+  800da3:	8b 55 08             	mov    0x8(%ebp),%edx
+  800da6:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800da8:	90                   	nop
+  800da9:	5d                   	pop    %ebp
+  800daa:	c3                   	ret    
+
+00800dab <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800dab:	55                   	push   %ebp
+  800dac:	89 e5                	mov    %esp,%ebp
+  800dae:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800db1:	8d 45 14             	lea    0x14(%ebp),%eax
+  800db4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800db7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800dba:	50                   	push   %eax
+  800dbb:	ff 75 10             	pushl  0x10(%ebp)
+  800dbe:	ff 75 0c             	pushl  0xc(%ebp)
+  800dc1:	ff 75 08             	pushl  0x8(%ebp)
+  800dc4:	e8 0b 00 00 00       	call   800dd4 <vsnprintf>
+  800dc9:	83 c4 10             	add    $0x10,%esp
+  800dcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800dcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800dd2:	c9                   	leave  
+  800dd3:	c3                   	ret    
+
+00800dd4 <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800dd4:	55                   	push   %ebp
+  800dd5:	89 e5                	mov    %esp,%ebp
+  800dd7:	83 ec 18             	sub    $0x18,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800dda:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ddd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800de0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800de3:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800de6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de9:	01 d0                	add    %edx,%eax
+  800deb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800dee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800df5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800df9:	74 0a                	je     800e05 <vsnprintf+0x31>
+  800dfb:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800dfe:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e01:	39 c2                	cmp    %eax,%edx
+  800e03:	76 07                	jbe    800e0c <vsnprintf+0x38>
+        return -E_INVAL;
+  800e05:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e0a:	eb 20                	jmp    800e2c <vsnprintf+0x58>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e0c:	ff 75 14             	pushl  0x14(%ebp)
+  800e0f:	ff 75 10             	pushl  0x10(%ebp)
+  800e12:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800e15:	50                   	push   %eax
+  800e16:	68 75 0d 80 00       	push   $0x800d75
+  800e1b:	e8 ad fb ff ff       	call   8009cd <vprintfmt>
+  800e20:	83 c4 10             	add    $0x10,%esp
+    // null terminate the buffer
+    *b.buf = '\0';
+  800e23:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e26:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800e29:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e2c:	c9                   	leave  
+  800e2d:	c3                   	ret    
+
+00800e2e <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800e2e:	55                   	push   %ebp
+  800e2f:	89 e5                	mov    %esp,%ebp
+  800e31:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800e34:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e37:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800e3d:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800e40:	b8 20 00 00 00       	mov    $0x20,%eax
+  800e45:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800e48:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800e4b:	89 c1                	mov    %eax,%ecx
+  800e4d:	d3 ea                	shr    %cl,%edx
+  800e4f:	89 d0                	mov    %edx,%eax
+}
+  800e51:	c9                   	leave  
+  800e52:	c3                   	ret    
+
+00800e53 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800e53:	55                   	push   %ebp
+  800e54:	89 e5                	mov    %esp,%ebp
+  800e56:	57                   	push   %edi
+  800e57:	56                   	push   %esi
+  800e58:	53                   	push   %ebx
+  800e59:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800e5c:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e61:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800e67:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800e6d:	6b f0 05             	imul   $0x5,%eax,%esi
+  800e70:	01 fe                	add    %edi,%esi
+  800e72:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800e77:	f7 e7                	mul    %edi
+  800e79:	01 d6                	add    %edx,%esi
+  800e7b:	89 f2                	mov    %esi,%edx
+  800e7d:	83 c0 0b             	add    $0xb,%eax
+  800e80:	83 d2 00             	adc    $0x0,%edx
+  800e83:	89 c7                	mov    %eax,%edi
+  800e85:	83 e7 ff             	and    $0xffffffff,%edi
+  800e88:	89 f9                	mov    %edi,%ecx
+  800e8a:	0f b7 da             	movzwl %dx,%ebx
+  800e8d:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800e93:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800e99:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e9e:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ea4:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ea8:	c1 ea 0c             	shr    $0xc,%edx
+  800eab:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800eae:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800eb1:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800eb8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ebb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ebe:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ec1:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800ec4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec7:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800eca:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ece:	74 1c                	je     800eec <rand+0x99>
+  800ed0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ed3:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ed8:	f7 75 dc             	divl   -0x24(%ebp)
+  800edb:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800ede:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ee1:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ee6:	f7 75 dc             	divl   -0x24(%ebp)
+  800ee9:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800eec:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800eef:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800ef2:	f7 75 dc             	divl   -0x24(%ebp)
+  800ef5:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ef8:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800efb:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800efe:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800f01:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f04:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f07:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800f0a:	83 c4 24             	add    $0x24,%esp
+  800f0d:	5b                   	pop    %ebx
+  800f0e:	5e                   	pop    %esi
+  800f0f:	5f                   	pop    %edi
+  800f10:	5d                   	pop    %ebp
+  800f11:	c3                   	ret    
+
+00800f12 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800f12:	55                   	push   %ebp
+  800f13:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800f15:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f18:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f1d:	a3 00 20 80 00       	mov    %eax,0x802000
+  800f22:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800f28:	90                   	nop
+  800f29:	5d                   	pop    %ebp
+  800f2a:	c3                   	ret    
+
+00800f2b <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  800f2b:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  800f2f:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f32:	ff 71 fc             	pushl  -0x4(%ecx)
+  800f35:	55                   	push   %ebp
+  800f36:	89 e5                	mov    %esp,%ebp
+  800f38:	51                   	push   %ecx
+  800f39:	83 ec 04             	sub    $0x4,%esp
+    asm volatile("int $14");
+  800f3c:	cd 0e                	int    $0xe
+    panic("FAIL: T.T\n");
+  800f3e:	83 ec 04             	sub    $0x4,%esp
+  800f41:	68 40 12 80 00       	push   $0x801240
+  800f46:	6a 07                	push   $0x7
+  800f48:	68 4b 12 80 00       	push   $0x80124b
+  800f4d:	e8 ce f0 ff ff       	call   800020 <__panic>
diff -r -u -P lab6_original/obj/user/softint.d lab6/obj/user/softint.d
--- lab6_original/obj/user/softint.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/softint.d	2016-04-29 16:22:06.840567531 +0800
@@ -0,0 +1,2 @@
+obj/user/softint.o obj/user/softint.d: user/softint.c libs/stdio.h \
+ libs/defs.h libs/stdarg.h user/libs/ulib.h
Binary files lab6_original/obj/user/softint.o and lab6/obj/user/softint.o differ
diff -r -u -P lab6_original/obj/user/softint.sym lab6/obj/user/softint.sym
--- lab6_original/obj/user/softint.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/softint.sym	2016-04-29 16:22:07.744668820 +0800
@@ -0,0 +1,76 @@
+00800020 .text
+00800f60 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202c8d .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b5 syscall
+00000000 ulib.c
+00000000 stdio.c
+0080028c cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+00801060 error_string
+00800822 printnum
+00800913 getuint
+00800962 getint
+00800d75 sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 softint.c
+008003be strcpy
+0080021a yield
+00800201 waitpid
+00800141 sys_yield
+008006d7 memmove
+00800dab snprintf
+008009cd vprintfmt
+0080011d sys_fork
+008002d9 cprintf
+0080023e getpid
+0080077a memcpy
+00800266 lab6_set_priority
+00800dd4 vsnprintf
+0080034d umain
+00202c8c __STAB_END__
+00800150 sys_kill
+00202c8d __STABSTR_BEGIN__
+00800020 __panic
+0080053a strtol
+0080038e strnlen
+0080024b print_pgdir
+00800228 kill
+0080050b strfind
+008001ea wait
+0080027d _start
+00800e53 rand
+00800482 strncmp
+00800171 sys_putc
+008003fe strncpy
+008007ca memcmp
+008001dd fork
+00800697 memset
+00800f2b main
+00800f12 srand
+00800e2e hash32
+008009a9 printfmt
+00203a6d __STABSTR_END__
+00800438 strcmp
+00800259 gettime_msec
+00800192 sys_gettime
+008002b0 vcprintf
+0080006e __warn
+008002ff cputs
+008001a1 sys_lab6_set_priority
+008001b7 exit
+0080012c sys_wait
+0080010b sys_exit
+00200010 __STAB_BEGIN__
+00800366 strlen
+00800183 sys_pgdir
+008004d8 strchr
+00800162 sys_getpid
diff -r -u -P lab6_original/obj/user/spin.asm lab6/obj/user/spin.asm
--- lab6_original/obj/user/spin.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/spin.asm	2016-04-29 16:22:07.688909699 +0800
@@ -0,0 +1,2661 @@
+
+obj/__user_spin.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 18             	sub    $0x18,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	83 ec 04             	sub    $0x4,%esp
+  80002f:	ff 75 0c             	pushl  0xc(%ebp)
+  800032:	ff 75 08             	pushl  0x8(%ebp)
+  800035:	68 40 10 80 00       	push   $0x801040
+  80003a:	e8 9a 02 00 00       	call   8002d9 <cprintf>
+  80003f:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800042:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800045:	83 ec 08             	sub    $0x8,%esp
+  800048:	50                   	push   %eax
+  800049:	ff 75 10             	pushl  0x10(%ebp)
+  80004c:	e8 5f 02 00 00       	call   8002b0 <vcprintf>
+  800051:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  800054:	83 ec 0c             	sub    $0xc,%esp
+  800057:	68 5a 10 80 00       	push   $0x80105a
+  80005c:	e8 78 02 00 00       	call   8002d9 <cprintf>
+  800061:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	83 ec 0c             	sub    $0xc,%esp
+  800067:	6a f6                	push   $0xfffffff6
+  800069:	e8 49 01 00 00       	call   8001b7 <exit>
+
+0080006e <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80006e:	55                   	push   %ebp
+  80006f:	89 e5                	mov    %esp,%ebp
+  800071:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800074:	8d 45 14             	lea    0x14(%ebp),%eax
+  800077:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007a:	83 ec 04             	sub    $0x4,%esp
+  80007d:	ff 75 0c             	pushl  0xc(%ebp)
+  800080:	ff 75 08             	pushl  0x8(%ebp)
+  800083:	68 5c 10 80 00       	push   $0x80105c
+  800088:	e8 4c 02 00 00       	call   8002d9 <cprintf>
+  80008d:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800090:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800093:	83 ec 08             	sub    $0x8,%esp
+  800096:	50                   	push   %eax
+  800097:	ff 75 10             	pushl  0x10(%ebp)
+  80009a:	e8 11 02 00 00       	call   8002b0 <vcprintf>
+  80009f:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  8000a2:	83 ec 0c             	sub    $0xc,%esp
+  8000a5:	68 5a 10 80 00       	push   $0x80105a
+  8000aa:	e8 2a 02 00 00       	call   8002d9 <cprintf>
+  8000af:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8000b2:	90                   	nop
+  8000b3:	c9                   	leave  
+  8000b4:	c3                   	ret    
+
+008000b5 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b5:	55                   	push   %ebp
+  8000b6:	89 e5                	mov    %esp,%ebp
+  8000b8:	57                   	push   %edi
+  8000b9:	56                   	push   %esi
+  8000ba:	53                   	push   %ebx
+  8000bb:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000be:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cb:	eb 16                	jmp    8000e3 <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8000cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d0:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d3:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d6:	8b 10                	mov    (%eax),%edx
+  8000d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000db:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000df:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8000e3:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e7:	7e e4                	jle    8000cd <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000e9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ec:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000ef:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f2:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f5:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8000f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fb:	cd 80                	int    $0x80
+  8000fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  800100:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800103:	83 c4 20             	add    $0x20,%esp
+  800106:	5b                   	pop    %ebx
+  800107:	5e                   	pop    %esi
+  800108:	5f                   	pop    %edi
+  800109:	5d                   	pop    %ebp
+  80010a:	c3                   	ret    
+
+0080010b <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010b:	55                   	push   %ebp
+  80010c:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_exit, error_code);
+  80010e:	ff 75 08             	pushl  0x8(%ebp)
+  800111:	6a 01                	push   $0x1
+  800113:	e8 9d ff ff ff       	call   8000b5 <syscall>
+  800118:	83 c4 08             	add    $0x8,%esp
+}
+  80011b:	c9                   	leave  
+  80011c:	c3                   	ret    
+
+0080011d <sys_fork>:
+
+int
+sys_fork(void) {
+  80011d:	55                   	push   %ebp
+  80011e:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_fork);
+  800120:	6a 02                	push   $0x2
+  800122:	e8 8e ff ff ff       	call   8000b5 <syscall>
+  800127:	83 c4 04             	add    $0x4,%esp
+}
+  80012a:	c9                   	leave  
+  80012b:	c3                   	ret    
+
+0080012c <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80012c:	55                   	push   %ebp
+  80012d:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_wait, pid, store);
+  80012f:	ff 75 0c             	pushl  0xc(%ebp)
+  800132:	ff 75 08             	pushl  0x8(%ebp)
+  800135:	6a 03                	push   $0x3
+  800137:	e8 79 ff ff ff       	call   8000b5 <syscall>
+  80013c:	83 c4 0c             	add    $0xc,%esp
+}
+  80013f:	c9                   	leave  
+  800140:	c3                   	ret    
+
+00800141 <sys_yield>:
+
+int
+sys_yield(void) {
+  800141:	55                   	push   %ebp
+  800142:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_yield);
+  800144:	6a 0a                	push   $0xa
+  800146:	e8 6a ff ff ff       	call   8000b5 <syscall>
+  80014b:	83 c4 04             	add    $0x4,%esp
+}
+  80014e:	c9                   	leave  
+  80014f:	c3                   	ret    
+
+00800150 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800150:	55                   	push   %ebp
+  800151:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_kill, pid);
+  800153:	ff 75 08             	pushl  0x8(%ebp)
+  800156:	6a 0c                	push   $0xc
+  800158:	e8 58 ff ff ff       	call   8000b5 <syscall>
+  80015d:	83 c4 08             	add    $0x8,%esp
+}
+  800160:	c9                   	leave  
+  800161:	c3                   	ret    
+
+00800162 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800162:	55                   	push   %ebp
+  800163:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_getpid);
+  800165:	6a 12                	push   $0x12
+  800167:	e8 49 ff ff ff       	call   8000b5 <syscall>
+  80016c:	83 c4 04             	add    $0x4,%esp
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_putc, c);
+  800174:	ff 75 08             	pushl  0x8(%ebp)
+  800177:	6a 1e                	push   $0x1e
+  800179:	e8 37 ff ff ff       	call   8000b5 <syscall>
+  80017e:	83 c4 08             	add    $0x8,%esp
+}
+  800181:	c9                   	leave  
+  800182:	c3                   	ret    
+
+00800183 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800183:	55                   	push   %ebp
+  800184:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_pgdir);
+  800186:	6a 1f                	push   $0x1f
+  800188:	e8 28 ff ff ff       	call   8000b5 <syscall>
+  80018d:	83 c4 04             	add    $0x4,%esp
+}
+  800190:	c9                   	leave  
+  800191:	c3                   	ret    
+
+00800192 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  800192:	55                   	push   %ebp
+  800193:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_gettime);
+  800195:	6a 11                	push   $0x11
+  800197:	e8 19 ff ff ff       	call   8000b5 <syscall>
+  80019c:	83 c4 04             	add    $0x4,%esp
+}
+  80019f:	c9                   	leave  
+  8001a0:	c3                   	ret    
+
+008001a1 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001a1:	55                   	push   %ebp
+  8001a2:	89 e5                	mov    %esp,%ebp
+    syscall(SYS_lab6_set_priority, priority);
+  8001a4:	ff 75 08             	pushl  0x8(%ebp)
+  8001a7:	68 ff 00 00 00       	push   $0xff
+  8001ac:	e8 04 ff ff ff       	call   8000b5 <syscall>
+  8001b1:	83 c4 08             	add    $0x8,%esp
+}
+  8001b4:	90                   	nop
+  8001b5:	c9                   	leave  
+  8001b6:	c3                   	ret    
+
+008001b7 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001b7:	55                   	push   %ebp
+  8001b8:	89 e5                	mov    %esp,%ebp
+  8001ba:	83 ec 08             	sub    $0x8,%esp
+    sys_exit(error_code);
+  8001bd:	83 ec 0c             	sub    $0xc,%esp
+  8001c0:	ff 75 08             	pushl  0x8(%ebp)
+  8001c3:	e8 43 ff ff ff       	call   80010b <sys_exit>
+  8001c8:	83 c4 10             	add    $0x10,%esp
+    cprintf("BUG: exit failed.\n");
+  8001cb:	83 ec 0c             	sub    $0xc,%esp
+  8001ce:	68 78 10 80 00       	push   $0x801078
+  8001d3:	e8 01 01 00 00       	call   8002d9 <cprintf>
+  8001d8:	83 c4 10             	add    $0x10,%esp
+    while (1);
+  8001db:	eb fe                	jmp    8001db <exit+0x24>
+
+008001dd <fork>:
+}
+
+int
+fork(void) {
+  8001dd:	55                   	push   %ebp
+  8001de:	89 e5                	mov    %esp,%ebp
+  8001e0:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8001e3:	e8 35 ff ff ff       	call   80011d <sys_fork>
+}
+  8001e8:	c9                   	leave  
+  8001e9:	c3                   	ret    
+
+008001ea <wait>:
+
+int
+wait(void) {
+  8001ea:	55                   	push   %ebp
+  8001eb:	89 e5                	mov    %esp,%ebp
+  8001ed:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(0, NULL);
+  8001f0:	83 ec 08             	sub    $0x8,%esp
+  8001f3:	6a 00                	push   $0x0
+  8001f5:	6a 00                	push   $0x0
+  8001f7:	e8 30 ff ff ff       	call   80012c <sys_wait>
+  8001fc:	83 c4 10             	add    $0x10,%esp
+}
+  8001ff:	c9                   	leave  
+  800200:	c3                   	ret    
+
+00800201 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800201:	55                   	push   %ebp
+  800202:	89 e5                	mov    %esp,%ebp
+  800204:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(pid, store);
+  800207:	83 ec 08             	sub    $0x8,%esp
+  80020a:	ff 75 0c             	pushl  0xc(%ebp)
+  80020d:	ff 75 08             	pushl  0x8(%ebp)
+  800210:	e8 17 ff ff ff       	call   80012c <sys_wait>
+  800215:	83 c4 10             	add    $0x10,%esp
+}
+  800218:	c9                   	leave  
+  800219:	c3                   	ret    
+
+0080021a <yield>:
+
+void
+yield(void) {
+  80021a:	55                   	push   %ebp
+  80021b:	89 e5                	mov    %esp,%ebp
+  80021d:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800220:	e8 1c ff ff ff       	call   800141 <sys_yield>
+}
+  800225:	90                   	nop
+  800226:	c9                   	leave  
+  800227:	c3                   	ret    
+
+00800228 <kill>:
+
+int
+kill(int pid) {
+  800228:	55                   	push   %ebp
+  800229:	89 e5                	mov    %esp,%ebp
+  80022b:	83 ec 08             	sub    $0x8,%esp
+    return sys_kill(pid);
+  80022e:	83 ec 0c             	sub    $0xc,%esp
+  800231:	ff 75 08             	pushl  0x8(%ebp)
+  800234:	e8 17 ff ff ff       	call   800150 <sys_kill>
+  800239:	83 c4 10             	add    $0x10,%esp
+}
+  80023c:	c9                   	leave  
+  80023d:	c3                   	ret    
+
+0080023e <getpid>:
+
+int
+getpid(void) {
+  80023e:	55                   	push   %ebp
+  80023f:	89 e5                	mov    %esp,%ebp
+  800241:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800244:	e8 19 ff ff ff       	call   800162 <sys_getpid>
+}
+  800249:	c9                   	leave  
+  80024a:	c3                   	ret    
+
+0080024b <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80024b:	55                   	push   %ebp
+  80024c:	89 e5                	mov    %esp,%ebp
+  80024e:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800251:	e8 2d ff ff ff       	call   800183 <sys_pgdir>
+}
+  800256:	90                   	nop
+  800257:	c9                   	leave  
+  800258:	c3                   	ret    
+
+00800259 <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  800259:	55                   	push   %ebp
+  80025a:	89 e5                	mov    %esp,%ebp
+  80025c:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  80025f:	e8 2e ff ff ff       	call   800192 <sys_gettime>
+}
+  800264:	c9                   	leave  
+  800265:	c3                   	ret    
+
+00800266 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800266:	55                   	push   %ebp
+  800267:	89 e5                	mov    %esp,%ebp
+  800269:	83 ec 08             	sub    $0x8,%esp
+    sys_lab6_set_priority(priority);
+  80026c:	83 ec 0c             	sub    $0xc,%esp
+  80026f:	ff 75 08             	pushl  0x8(%ebp)
+  800272:	e8 2a ff ff ff       	call   8001a1 <sys_lab6_set_priority>
+  800277:	83 c4 10             	add    $0x10,%esp
+}
+  80027a:	90                   	nop
+  80027b:	c9                   	leave  
+  80027c:	c3                   	ret    
+
+0080027d <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  80027d:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800282:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800285:	e8 c3 00 00 00       	call   80034d <umain>
+1:  jmp 1b
+  80028a:	eb fe                	jmp    80028a <_start+0xd>
+
+0080028c <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  80028c:	55                   	push   %ebp
+  80028d:	89 e5                	mov    %esp,%ebp
+  80028f:	83 ec 08             	sub    $0x8,%esp
+    sys_putc(c);
+  800292:	83 ec 0c             	sub    $0xc,%esp
+  800295:	ff 75 08             	pushl  0x8(%ebp)
+  800298:	e8 d4 fe ff ff       	call   800171 <sys_putc>
+  80029d:	83 c4 10             	add    $0x10,%esp
+    (*cnt) ++;
+  8002a0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002a3:	8b 00                	mov    (%eax),%eax
+  8002a5:	8d 50 01             	lea    0x1(%eax),%edx
+  8002a8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002ab:	89 10                	mov    %edx,(%eax)
+}
+  8002ad:	90                   	nop
+  8002ae:	c9                   	leave  
+  8002af:	c3                   	ret    
+
+008002b0 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002b0:	55                   	push   %ebp
+  8002b1:	89 e5                	mov    %esp,%ebp
+  8002b3:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  8002b6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002bd:	ff 75 0c             	pushl  0xc(%ebp)
+  8002c0:	ff 75 08             	pushl  0x8(%ebp)
+  8002c3:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  8002c6:	50                   	push   %eax
+  8002c7:	68 8c 02 80 00       	push   $0x80028c
+  8002cc:	e8 fc 06 00 00       	call   8009cd <vprintfmt>
+  8002d1:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  8002d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002d7:	c9                   	leave  
+  8002d8:	c3                   	ret    
+
+008002d9 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  8002d9:	55                   	push   %ebp
+  8002da:	89 e5                	mov    %esp,%ebp
+  8002dc:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8002df:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8002e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  8002e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8002e8:	83 ec 08             	sub    $0x8,%esp
+  8002eb:	50                   	push   %eax
+  8002ec:	ff 75 08             	pushl  0x8(%ebp)
+  8002ef:	e8 bc ff ff ff       	call   8002b0 <vcprintf>
+  8002f4:	83 c4 10             	add    $0x10,%esp
+  8002f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  8002fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002fd:	c9                   	leave  
+  8002fe:	c3                   	ret    
+
+008002ff <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  8002ff:	55                   	push   %ebp
+  800300:	89 e5                	mov    %esp,%ebp
+  800302:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  800305:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80030c:	eb 14                	jmp    800322 <cputs+0x23>
+        cputch(c, &cnt);
+  80030e:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800312:	83 ec 08             	sub    $0x8,%esp
+  800315:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800318:	52                   	push   %edx
+  800319:	50                   	push   %eax
+  80031a:	e8 6d ff ff ff       	call   80028c <cputch>
+  80031f:	83 c4 10             	add    $0x10,%esp
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800322:	8b 45 08             	mov    0x8(%ebp),%eax
+  800325:	8d 50 01             	lea    0x1(%eax),%edx
+  800328:	89 55 08             	mov    %edx,0x8(%ebp)
+  80032b:	0f b6 00             	movzbl (%eax),%eax
+  80032e:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800331:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800335:	75 d7                	jne    80030e <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800337:	83 ec 08             	sub    $0x8,%esp
+  80033a:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  80033d:	50                   	push   %eax
+  80033e:	6a 0a                	push   $0xa
+  800340:	e8 47 ff ff ff       	call   80028c <cputch>
+  800345:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  800348:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80034b:	c9                   	leave  
+  80034c:	c3                   	ret    
+
+0080034d <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  80034d:	55                   	push   %ebp
+  80034e:	89 e5                	mov    %esp,%ebp
+  800350:	83 ec 18             	sub    $0x18,%esp
+    int ret = main();
+  800353:	e8 d3 0b 00 00       	call   800f2b <main>
+  800358:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  80035b:	83 ec 0c             	sub    $0xc,%esp
+  80035e:	ff 75 f4             	pushl  -0xc(%ebp)
+  800361:	e8 51 fe ff ff       	call   8001b7 <exit>
+
+00800366 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800366:	55                   	push   %ebp
+  800367:	89 e5                	mov    %esp,%ebp
+  800369:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  80036c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800373:	eb 04                	jmp    800379 <strlen+0x13>
+        cnt ++;
+  800375:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800379:	8b 45 08             	mov    0x8(%ebp),%eax
+  80037c:	8d 50 01             	lea    0x1(%eax),%edx
+  80037f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800382:	0f b6 00             	movzbl (%eax),%eax
+  800385:	84 c0                	test   %al,%al
+  800387:	75 ec                	jne    800375 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800389:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  80038c:	c9                   	leave  
+  80038d:	c3                   	ret    
+
+0080038e <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  80038e:	55                   	push   %ebp
+  80038f:	89 e5                	mov    %esp,%ebp
+  800391:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800394:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  80039b:	eb 04                	jmp    8003a1 <strnlen+0x13>
+        cnt ++;
+  80039d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  8003a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003a4:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003a7:	73 10                	jae    8003b9 <strnlen+0x2b>
+  8003a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003ac:	8d 50 01             	lea    0x1(%eax),%edx
+  8003af:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003b2:	0f b6 00             	movzbl (%eax),%eax
+  8003b5:	84 c0                	test   %al,%al
+  8003b7:	75 e4                	jne    80039d <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003b9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003bc:	c9                   	leave  
+  8003bd:	c3                   	ret    
+
+008003be <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  8003be:	55                   	push   %ebp
+  8003bf:	89 e5                	mov    %esp,%ebp
+  8003c1:	57                   	push   %edi
+  8003c2:	56                   	push   %esi
+  8003c3:	83 ec 20             	sub    $0x20,%esp
+  8003c6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003cc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8003cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  8003d2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003d8:	89 d1                	mov    %edx,%ecx
+  8003da:	89 c2                	mov    %eax,%edx
+  8003dc:	89 ce                	mov    %ecx,%esi
+  8003de:	89 d7                	mov    %edx,%edi
+  8003e0:	ac                   	lods   %ds:(%esi),%al
+  8003e1:	aa                   	stos   %al,%es:(%edi)
+  8003e2:	84 c0                	test   %al,%al
+  8003e4:	75 fa                	jne    8003e0 <strcpy+0x22>
+  8003e6:	89 fa                	mov    %edi,%edx
+  8003e8:	89 f1                	mov    %esi,%ecx
+  8003ea:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8003ed:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8003f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  8003f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  8003f6:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  8003f7:	83 c4 20             	add    $0x20,%esp
+  8003fa:	5e                   	pop    %esi
+  8003fb:	5f                   	pop    %edi
+  8003fc:	5d                   	pop    %ebp
+  8003fd:	c3                   	ret    
+
+008003fe <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  8003fe:	55                   	push   %ebp
+  8003ff:	89 e5                	mov    %esp,%ebp
+  800401:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800404:	8b 45 08             	mov    0x8(%ebp),%eax
+  800407:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  80040a:	eb 21                	jmp    80042d <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  80040c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80040f:	0f b6 10             	movzbl (%eax),%edx
+  800412:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800415:	88 10                	mov    %dl,(%eax)
+  800417:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80041a:	0f b6 00             	movzbl (%eax),%eax
+  80041d:	84 c0                	test   %al,%al
+  80041f:	74 04                	je     800425 <strncpy+0x27>
+            src ++;
+  800421:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800425:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800429:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  80042d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800431:	75 d9                	jne    80040c <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800433:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800436:	c9                   	leave  
+  800437:	c3                   	ret    
+
+00800438 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800438:	55                   	push   %ebp
+  800439:	89 e5                	mov    %esp,%ebp
+  80043b:	57                   	push   %edi
+  80043c:	56                   	push   %esi
+  80043d:	83 ec 20             	sub    $0x20,%esp
+  800440:	8b 45 08             	mov    0x8(%ebp),%eax
+  800443:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800446:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800449:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  80044c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80044f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800452:	89 d1                	mov    %edx,%ecx
+  800454:	89 c2                	mov    %eax,%edx
+  800456:	89 ce                	mov    %ecx,%esi
+  800458:	89 d7                	mov    %edx,%edi
+  80045a:	ac                   	lods   %ds:(%esi),%al
+  80045b:	ae                   	scas   %es:(%edi),%al
+  80045c:	75 08                	jne    800466 <strcmp+0x2e>
+  80045e:	84 c0                	test   %al,%al
+  800460:	75 f8                	jne    80045a <strcmp+0x22>
+  800462:	31 c0                	xor    %eax,%eax
+  800464:	eb 04                	jmp    80046a <strcmp+0x32>
+  800466:	19 c0                	sbb    %eax,%eax
+  800468:	0c 01                	or     $0x1,%al
+  80046a:	89 fa                	mov    %edi,%edx
+  80046c:	89 f1                	mov    %esi,%ecx
+  80046e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800471:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800474:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800477:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  80047a:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  80047b:	83 c4 20             	add    $0x20,%esp
+  80047e:	5e                   	pop    %esi
+  80047f:	5f                   	pop    %edi
+  800480:	5d                   	pop    %ebp
+  800481:	c3                   	ret    
+
+00800482 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800482:	55                   	push   %ebp
+  800483:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800485:	eb 0c                	jmp    800493 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800487:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  80048b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  80048f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800493:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800497:	74 1a                	je     8004b3 <strncmp+0x31>
+  800499:	8b 45 08             	mov    0x8(%ebp),%eax
+  80049c:	0f b6 00             	movzbl (%eax),%eax
+  80049f:	84 c0                	test   %al,%al
+  8004a1:	74 10                	je     8004b3 <strncmp+0x31>
+  8004a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004a6:	0f b6 10             	movzbl (%eax),%edx
+  8004a9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ac:	0f b6 00             	movzbl (%eax),%eax
+  8004af:	38 c2                	cmp    %al,%dl
+  8004b1:	74 d4                	je     800487 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004b3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004b7:	74 18                	je     8004d1 <strncmp+0x4f>
+  8004b9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004bc:	0f b6 00             	movzbl (%eax),%eax
+  8004bf:	0f b6 d0             	movzbl %al,%edx
+  8004c2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004c5:	0f b6 00             	movzbl (%eax),%eax
+  8004c8:	0f b6 c0             	movzbl %al,%eax
+  8004cb:	29 c2                	sub    %eax,%edx
+  8004cd:	89 d0                	mov    %edx,%eax
+  8004cf:	eb 05                	jmp    8004d6 <strncmp+0x54>
+  8004d1:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8004d6:	5d                   	pop    %ebp
+  8004d7:	c3                   	ret    
+
+008004d8 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  8004d8:	55                   	push   %ebp
+  8004d9:	89 e5                	mov    %esp,%ebp
+  8004db:	83 ec 04             	sub    $0x4,%esp
+  8004de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004e1:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  8004e4:	eb 14                	jmp    8004fa <strchr+0x22>
+        if (*s == c) {
+  8004e6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e9:	0f b6 00             	movzbl (%eax),%eax
+  8004ec:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  8004ef:	75 05                	jne    8004f6 <strchr+0x1e>
+            return (char *)s;
+  8004f1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004f4:	eb 13                	jmp    800509 <strchr+0x31>
+        }
+        s ++;
+  8004f6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  8004fa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fd:	0f b6 00             	movzbl (%eax),%eax
+  800500:	84 c0                	test   %al,%al
+  800502:	75 e2                	jne    8004e6 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800504:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800509:	c9                   	leave  
+  80050a:	c3                   	ret    
+
+0080050b <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  80050b:	55                   	push   %ebp
+  80050c:	89 e5                	mov    %esp,%ebp
+  80050e:	83 ec 04             	sub    $0x4,%esp
+  800511:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800514:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800517:	eb 0f                	jmp    800528 <strfind+0x1d>
+        if (*s == c) {
+  800519:	8b 45 08             	mov    0x8(%ebp),%eax
+  80051c:	0f b6 00             	movzbl (%eax),%eax
+  80051f:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800522:	74 10                	je     800534 <strfind+0x29>
+            break;
+        }
+        s ++;
+  800524:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800528:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052b:	0f b6 00             	movzbl (%eax),%eax
+  80052e:	84 c0                	test   %al,%al
+  800530:	75 e7                	jne    800519 <strfind+0xe>
+  800532:	eb 01                	jmp    800535 <strfind+0x2a>
+        if (*s == c) {
+            break;
+  800534:	90                   	nop
+        }
+        s ++;
+    }
+    return (char *)s;
+  800535:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800538:	c9                   	leave  
+  800539:	c3                   	ret    
+
+0080053a <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  80053a:	55                   	push   %ebp
+  80053b:	89 e5                	mov    %esp,%ebp
+  80053d:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800540:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800547:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80054e:	eb 04                	jmp    800554 <strtol+0x1a>
+        s ++;
+  800550:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800554:	8b 45 08             	mov    0x8(%ebp),%eax
+  800557:	0f b6 00             	movzbl (%eax),%eax
+  80055a:	3c 20                	cmp    $0x20,%al
+  80055c:	74 f2                	je     800550 <strtol+0x16>
+  80055e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800561:	0f b6 00             	movzbl (%eax),%eax
+  800564:	3c 09                	cmp    $0x9,%al
+  800566:	74 e8                	je     800550 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800568:	8b 45 08             	mov    0x8(%ebp),%eax
+  80056b:	0f b6 00             	movzbl (%eax),%eax
+  80056e:	3c 2b                	cmp    $0x2b,%al
+  800570:	75 06                	jne    800578 <strtol+0x3e>
+        s ++;
+  800572:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800576:	eb 15                	jmp    80058d <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800578:	8b 45 08             	mov    0x8(%ebp),%eax
+  80057b:	0f b6 00             	movzbl (%eax),%eax
+  80057e:	3c 2d                	cmp    $0x2d,%al
+  800580:	75 0b                	jne    80058d <strtol+0x53>
+        s ++, neg = 1;
+  800582:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800586:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  80058d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800591:	74 06                	je     800599 <strtol+0x5f>
+  800593:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800597:	75 24                	jne    8005bd <strtol+0x83>
+  800599:	8b 45 08             	mov    0x8(%ebp),%eax
+  80059c:	0f b6 00             	movzbl (%eax),%eax
+  80059f:	3c 30                	cmp    $0x30,%al
+  8005a1:	75 1a                	jne    8005bd <strtol+0x83>
+  8005a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a6:	83 c0 01             	add    $0x1,%eax
+  8005a9:	0f b6 00             	movzbl (%eax),%eax
+  8005ac:	3c 78                	cmp    $0x78,%al
+  8005ae:	75 0d                	jne    8005bd <strtol+0x83>
+        s += 2, base = 16;
+  8005b0:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005b4:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005bb:	eb 2a                	jmp    8005e7 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005bd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005c1:	75 17                	jne    8005da <strtol+0xa0>
+  8005c3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005c6:	0f b6 00             	movzbl (%eax),%eax
+  8005c9:	3c 30                	cmp    $0x30,%al
+  8005cb:	75 0d                	jne    8005da <strtol+0xa0>
+        s ++, base = 8;
+  8005cd:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005d1:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  8005d8:	eb 0d                	jmp    8005e7 <strtol+0xad>
+    }
+    else if (base == 0) {
+  8005da:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005de:	75 07                	jne    8005e7 <strtol+0xad>
+        base = 10;
+  8005e0:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  8005e7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ea:	0f b6 00             	movzbl (%eax),%eax
+  8005ed:	3c 2f                	cmp    $0x2f,%al
+  8005ef:	7e 1b                	jle    80060c <strtol+0xd2>
+  8005f1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005f4:	0f b6 00             	movzbl (%eax),%eax
+  8005f7:	3c 39                	cmp    $0x39,%al
+  8005f9:	7f 11                	jg     80060c <strtol+0xd2>
+            dig = *s - '0';
+  8005fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005fe:	0f b6 00             	movzbl (%eax),%eax
+  800601:	0f be c0             	movsbl %al,%eax
+  800604:	83 e8 30             	sub    $0x30,%eax
+  800607:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80060a:	eb 48                	jmp    800654 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  80060c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80060f:	0f b6 00             	movzbl (%eax),%eax
+  800612:	3c 60                	cmp    $0x60,%al
+  800614:	7e 1b                	jle    800631 <strtol+0xf7>
+  800616:	8b 45 08             	mov    0x8(%ebp),%eax
+  800619:	0f b6 00             	movzbl (%eax),%eax
+  80061c:	3c 7a                	cmp    $0x7a,%al
+  80061e:	7f 11                	jg     800631 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800620:	8b 45 08             	mov    0x8(%ebp),%eax
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	0f be c0             	movsbl %al,%eax
+  800629:	83 e8 57             	sub    $0x57,%eax
+  80062c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80062f:	eb 23                	jmp    800654 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800631:	8b 45 08             	mov    0x8(%ebp),%eax
+  800634:	0f b6 00             	movzbl (%eax),%eax
+  800637:	3c 40                	cmp    $0x40,%al
+  800639:	7e 3c                	jle    800677 <strtol+0x13d>
+  80063b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80063e:	0f b6 00             	movzbl (%eax),%eax
+  800641:	3c 5a                	cmp    $0x5a,%al
+  800643:	7f 32                	jg     800677 <strtol+0x13d>
+            dig = *s - 'A' + 10;
+  800645:	8b 45 08             	mov    0x8(%ebp),%eax
+  800648:	0f b6 00             	movzbl (%eax),%eax
+  80064b:	0f be c0             	movsbl %al,%eax
+  80064e:	83 e8 37             	sub    $0x37,%eax
+  800651:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800654:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800657:	3b 45 10             	cmp    0x10(%ebp),%eax
+  80065a:	7d 1a                	jge    800676 <strtol+0x13c>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  80065c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800660:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800663:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800667:	89 c2                	mov    %eax,%edx
+  800669:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80066c:	01 d0                	add    %edx,%eax
+  80066e:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800671:	e9 71 ff ff ff       	jmp    8005e7 <strtol+0xad>
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+            break;
+  800676:	90                   	nop
+        }
+        s ++, val = (val * base) + dig;
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  800677:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80067b:	74 08                	je     800685 <strtol+0x14b>
+        *endptr = (char *) s;
+  80067d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800680:	8b 55 08             	mov    0x8(%ebp),%edx
+  800683:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800685:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800689:	74 07                	je     800692 <strtol+0x158>
+  80068b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80068e:	f7 d8                	neg    %eax
+  800690:	eb 03                	jmp    800695 <strtol+0x15b>
+  800692:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800695:	c9                   	leave  
+  800696:	c3                   	ret    
+
+00800697 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800697:	55                   	push   %ebp
+  800698:	89 e5                	mov    %esp,%ebp
+  80069a:	57                   	push   %edi
+  80069b:	83 ec 24             	sub    $0x24,%esp
+  80069e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006a1:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006a4:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006a8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006ab:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006ae:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006b1:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006b7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006ba:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006be:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006c1:	89 d7                	mov    %edx,%edi
+  8006c3:	f3 aa                	rep stos %al,%es:(%edi)
+  8006c5:	89 fa                	mov    %edi,%edx
+  8006c7:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8006ca:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  8006cd:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006d0:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  8006d1:	83 c4 24             	add    $0x24,%esp
+  8006d4:	5f                   	pop    %edi
+  8006d5:	5d                   	pop    %ebp
+  8006d6:	c3                   	ret    
+
+008006d7 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  8006d7:	55                   	push   %ebp
+  8006d8:	89 e5                	mov    %esp,%ebp
+  8006da:	57                   	push   %edi
+  8006db:	56                   	push   %esi
+  8006dc:	53                   	push   %ebx
+  8006dd:	83 ec 30             	sub    $0x30,%esp
+  8006e0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8006e6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006e9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8006ec:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006ef:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  8006f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8006f5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  8006f8:	73 42                	jae    80073c <memmove+0x65>
+  8006fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8006fd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800700:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800703:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800706:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800709:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  80070c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  80070f:	c1 e8 02             	shr    $0x2,%eax
+  800712:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800714:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800717:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80071a:	89 d7                	mov    %edx,%edi
+  80071c:	89 c6                	mov    %eax,%esi
+  80071e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800720:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800723:	83 e1 03             	and    $0x3,%ecx
+  800726:	74 02                	je     80072a <memmove+0x53>
+  800728:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  80072a:	89 f0                	mov    %esi,%eax
+  80072c:	89 fa                	mov    %edi,%edx
+  80072e:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800731:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800734:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800737:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  80073a:	eb 36                	jmp    800772 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  80073c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80073f:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800742:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800745:	01 c2                	add    %eax,%edx
+  800747:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80074a:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  80074d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800750:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800753:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800756:	89 c1                	mov    %eax,%ecx
+  800758:	89 d8                	mov    %ebx,%eax
+  80075a:	89 d6                	mov    %edx,%esi
+  80075c:	89 c7                	mov    %eax,%edi
+  80075e:	fd                   	std    
+  80075f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800761:	fc                   	cld    
+  800762:	89 f8                	mov    %edi,%eax
+  800764:	89 f2                	mov    %esi,%edx
+  800766:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800769:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  80076c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  80076f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800772:	83 c4 30             	add    $0x30,%esp
+  800775:	5b                   	pop    %ebx
+  800776:	5e                   	pop    %esi
+  800777:	5f                   	pop    %edi
+  800778:	5d                   	pop    %ebp
+  800779:	c3                   	ret    
+
+0080077a <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  80077a:	55                   	push   %ebp
+  80077b:	89 e5                	mov    %esp,%ebp
+  80077d:	57                   	push   %edi
+  80077e:	56                   	push   %esi
+  80077f:	83 ec 20             	sub    $0x20,%esp
+  800782:	8b 45 08             	mov    0x8(%ebp),%eax
+  800785:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800788:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80078b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80078e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800791:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800794:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800797:	c1 e8 02             	shr    $0x2,%eax
+  80079a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  80079c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80079f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007a2:	89 d7                	mov    %edx,%edi
+  8007a4:	89 c6                	mov    %eax,%esi
+  8007a6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007a8:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007ab:	83 e1 03             	and    $0x3,%ecx
+  8007ae:	74 02                	je     8007b2 <memcpy+0x38>
+  8007b0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007b2:	89 f0                	mov    %esi,%eax
+  8007b4:	89 fa                	mov    %edi,%edx
+  8007b6:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007b9:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007bc:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  8007bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007c2:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007c3:	83 c4 20             	add    $0x20,%esp
+  8007c6:	5e                   	pop    %esi
+  8007c7:	5f                   	pop    %edi
+  8007c8:	5d                   	pop    %ebp
+  8007c9:	c3                   	ret    
+
+008007ca <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  8007ca:	55                   	push   %ebp
+  8007cb:	89 e5                	mov    %esp,%ebp
+  8007cd:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  8007d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007d3:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  8007d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007d9:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  8007dc:	eb 30                	jmp    80080e <memcmp+0x44>
+        if (*s1 != *s2) {
+  8007de:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8007e1:	0f b6 10             	movzbl (%eax),%edx
+  8007e4:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8007e7:	0f b6 00             	movzbl (%eax),%eax
+  8007ea:	38 c2                	cmp    %al,%dl
+  8007ec:	74 18                	je     800806 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8007ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8007f1:	0f b6 00             	movzbl (%eax),%eax
+  8007f4:	0f b6 d0             	movzbl %al,%edx
+  8007f7:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8007fa:	0f b6 00             	movzbl (%eax),%eax
+  8007fd:	0f b6 c0             	movzbl %al,%eax
+  800800:	29 c2                	sub    %eax,%edx
+  800802:	89 d0                	mov    %edx,%eax
+  800804:	eb 1a                	jmp    800820 <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800806:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  80080a:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  80080e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800811:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800814:	89 55 10             	mov    %edx,0x10(%ebp)
+  800817:	85 c0                	test   %eax,%eax
+  800819:	75 c3                	jne    8007de <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  80081b:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800820:	c9                   	leave  
+  800821:	c3                   	ret    
+
+00800822 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800822:	55                   	push   %ebp
+  800823:	89 e5                	mov    %esp,%ebp
+  800825:	83 ec 38             	sub    $0x38,%esp
+  800828:	8b 45 10             	mov    0x10(%ebp),%eax
+  80082b:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  80082e:	8b 45 14             	mov    0x14(%ebp),%eax
+  800831:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  800834:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800837:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  80083a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80083d:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800840:	8b 45 18             	mov    0x18(%ebp),%eax
+  800843:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800846:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800849:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80084c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80084f:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  800852:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800855:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800858:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  80085c:	74 1c                	je     80087a <printnum+0x58>
+  80085e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800861:	ba 00 00 00 00       	mov    $0x0,%edx
+  800866:	f7 75 e4             	divl   -0x1c(%ebp)
+  800869:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  80086c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80086f:	ba 00 00 00 00       	mov    $0x0,%edx
+  800874:	f7 75 e4             	divl   -0x1c(%ebp)
+  800877:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80087a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80087d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800880:	f7 75 e4             	divl   -0x1c(%ebp)
+  800883:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800886:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800889:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80088c:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80088f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800892:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800895:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800898:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  80089b:	8b 45 18             	mov    0x18(%ebp),%eax
+  80089e:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008a3:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008a6:	77 41                	ja     8008e9 <printnum+0xc7>
+  8008a8:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008ab:	72 05                	jb     8008b2 <printnum+0x90>
+  8008ad:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  8008b0:	77 37                	ja     8008e9 <printnum+0xc7>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008b2:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008b5:	83 e8 01             	sub    $0x1,%eax
+  8008b8:	83 ec 04             	sub    $0x4,%esp
+  8008bb:	ff 75 20             	pushl  0x20(%ebp)
+  8008be:	50                   	push   %eax
+  8008bf:	ff 75 18             	pushl  0x18(%ebp)
+  8008c2:	ff 75 ec             	pushl  -0x14(%ebp)
+  8008c5:	ff 75 e8             	pushl  -0x18(%ebp)
+  8008c8:	ff 75 0c             	pushl  0xc(%ebp)
+  8008cb:	ff 75 08             	pushl  0x8(%ebp)
+  8008ce:	e8 4f ff ff ff       	call   800822 <printnum>
+  8008d3:	83 c4 20             	add    $0x20,%esp
+  8008d6:	eb 1b                	jmp    8008f3 <printnum+0xd1>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  8008d8:	83 ec 08             	sub    $0x8,%esp
+  8008db:	ff 75 0c             	pushl  0xc(%ebp)
+  8008de:	ff 75 20             	pushl  0x20(%ebp)
+  8008e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008e4:	ff d0                	call   *%eax
+  8008e6:	83 c4 10             	add    $0x10,%esp
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8008e9:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8008ed:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8008f1:	7f e5                	jg     8008d8 <printnum+0xb6>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8008f3:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8008f6:	05 a4 11 80 00       	add    $0x8011a4,%eax
+  8008fb:	0f b6 00             	movzbl (%eax),%eax
+  8008fe:	0f be c0             	movsbl %al,%eax
+  800901:	83 ec 08             	sub    $0x8,%esp
+  800904:	ff 75 0c             	pushl  0xc(%ebp)
+  800907:	50                   	push   %eax
+  800908:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090b:	ff d0                	call   *%eax
+  80090d:	83 c4 10             	add    $0x10,%esp
+}
+  800910:	90                   	nop
+  800911:	c9                   	leave  
+  800912:	c3                   	ret    
+
+00800913 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800913:	55                   	push   %ebp
+  800914:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800916:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80091a:	7e 14                	jle    800930 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80091c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80091f:	8b 00                	mov    (%eax),%eax
+  800921:	8d 48 08             	lea    0x8(%eax),%ecx
+  800924:	8b 55 08             	mov    0x8(%ebp),%edx
+  800927:	89 0a                	mov    %ecx,(%edx)
+  800929:	8b 50 04             	mov    0x4(%eax),%edx
+  80092c:	8b 00                	mov    (%eax),%eax
+  80092e:	eb 30                	jmp    800960 <getuint+0x4d>
+    }
+    else if (lflag) {
+  800930:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800934:	74 16                	je     80094c <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800936:	8b 45 08             	mov    0x8(%ebp),%eax
+  800939:	8b 00                	mov    (%eax),%eax
+  80093b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80093e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800941:	89 0a                	mov    %ecx,(%edx)
+  800943:	8b 00                	mov    (%eax),%eax
+  800945:	ba 00 00 00 00       	mov    $0x0,%edx
+  80094a:	eb 14                	jmp    800960 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80094c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80094f:	8b 00                	mov    (%eax),%eax
+  800951:	8d 48 04             	lea    0x4(%eax),%ecx
+  800954:	8b 55 08             	mov    0x8(%ebp),%edx
+  800957:	89 0a                	mov    %ecx,(%edx)
+  800959:	8b 00                	mov    (%eax),%eax
+  80095b:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800960:	5d                   	pop    %ebp
+  800961:	c3                   	ret    
+
+00800962 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800962:	55                   	push   %ebp
+  800963:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800965:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800969:	7e 14                	jle    80097f <getint+0x1d>
+        return va_arg(*ap, long long);
+  80096b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80096e:	8b 00                	mov    (%eax),%eax
+  800970:	8d 48 08             	lea    0x8(%eax),%ecx
+  800973:	8b 55 08             	mov    0x8(%ebp),%edx
+  800976:	89 0a                	mov    %ecx,(%edx)
+  800978:	8b 50 04             	mov    0x4(%eax),%edx
+  80097b:	8b 00                	mov    (%eax),%eax
+  80097d:	eb 28                	jmp    8009a7 <getint+0x45>
+    }
+    else if (lflag) {
+  80097f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800983:	74 12                	je     800997 <getint+0x35>
+        return va_arg(*ap, long);
+  800985:	8b 45 08             	mov    0x8(%ebp),%eax
+  800988:	8b 00                	mov    (%eax),%eax
+  80098a:	8d 48 04             	lea    0x4(%eax),%ecx
+  80098d:	8b 55 08             	mov    0x8(%ebp),%edx
+  800990:	89 0a                	mov    %ecx,(%edx)
+  800992:	8b 00                	mov    (%eax),%eax
+  800994:	99                   	cltd   
+  800995:	eb 10                	jmp    8009a7 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800997:	8b 45 08             	mov    0x8(%ebp),%eax
+  80099a:	8b 00                	mov    (%eax),%eax
+  80099c:	8d 48 04             	lea    0x4(%eax),%ecx
+  80099f:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009a2:	89 0a                	mov    %ecx,(%edx)
+  8009a4:	8b 00                	mov    (%eax),%eax
+  8009a6:	99                   	cltd   
+    }
+}
+  8009a7:	5d                   	pop    %ebp
+  8009a8:	c3                   	ret    
+
+008009a9 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009a9:	55                   	push   %ebp
+  8009aa:	89 e5                	mov    %esp,%ebp
+  8009ac:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009af:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8009b8:	50                   	push   %eax
+  8009b9:	ff 75 10             	pushl  0x10(%ebp)
+  8009bc:	ff 75 0c             	pushl  0xc(%ebp)
+  8009bf:	ff 75 08             	pushl  0x8(%ebp)
+  8009c2:	e8 06 00 00 00       	call   8009cd <vprintfmt>
+  8009c7:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8009ca:	90                   	nop
+  8009cb:	c9                   	leave  
+  8009cc:	c3                   	ret    
+
+008009cd <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8009cd:	55                   	push   %ebp
+  8009ce:	89 e5                	mov    %esp,%ebp
+  8009d0:	56                   	push   %esi
+  8009d1:	53                   	push   %ebx
+  8009d2:	83 ec 20             	sub    $0x20,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009d5:	eb 17                	jmp    8009ee <vprintfmt+0x21>
+            if (ch == '\0') {
+  8009d7:	85 db                	test   %ebx,%ebx
+  8009d9:	0f 84 8e 03 00 00    	je     800d6d <vprintfmt+0x3a0>
+                return;
+            }
+            putch(ch, putdat);
+  8009df:	83 ec 08             	sub    $0x8,%esp
+  8009e2:	ff 75 0c             	pushl  0xc(%ebp)
+  8009e5:	53                   	push   %ebx
+  8009e6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009e9:	ff d0                	call   *%eax
+  8009eb:	83 c4 10             	add    $0x10,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009ee:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009f1:	8d 50 01             	lea    0x1(%eax),%edx
+  8009f4:	89 55 10             	mov    %edx,0x10(%ebp)
+  8009f7:	0f b6 00             	movzbl (%eax),%eax
+  8009fa:	0f b6 d8             	movzbl %al,%ebx
+  8009fd:	83 fb 25             	cmp    $0x25,%ebx
+  800a00:	75 d5                	jne    8009d7 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a02:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a06:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a10:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a13:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a1a:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a1d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a20:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a23:	8d 50 01             	lea    0x1(%eax),%edx
+  800a26:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a29:	0f b6 00             	movzbl (%eax),%eax
+  800a2c:	0f b6 d8             	movzbl %al,%ebx
+  800a2f:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a32:	83 f8 55             	cmp    $0x55,%eax
+  800a35:	0f 87 05 03 00 00    	ja     800d40 <vprintfmt+0x373>
+  800a3b:	8b 04 85 c8 11 80 00 	mov    0x8011c8(,%eax,4),%eax
+  800a42:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a44:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a48:	eb d6                	jmp    800a20 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a4a:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800a4e:	eb d0                	jmp    800a20 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a50:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800a57:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a5a:	89 d0                	mov    %edx,%eax
+  800a5c:	c1 e0 02             	shl    $0x2,%eax
+  800a5f:	01 d0                	add    %edx,%eax
+  800a61:	01 c0                	add    %eax,%eax
+  800a63:	01 d8                	add    %ebx,%eax
+  800a65:	83 e8 30             	sub    $0x30,%eax
+  800a68:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800a6b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a6e:	0f b6 00             	movzbl (%eax),%eax
+  800a71:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800a74:	83 fb 2f             	cmp    $0x2f,%ebx
+  800a77:	7e 39                	jle    800ab2 <vprintfmt+0xe5>
+  800a79:	83 fb 39             	cmp    $0x39,%ebx
+  800a7c:	7f 34                	jg     800ab2 <vprintfmt+0xe5>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a7e:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  800a82:	eb d3                	jmp    800a57 <vprintfmt+0x8a>
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800a84:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a87:	8d 50 04             	lea    0x4(%eax),%edx
+  800a8a:	89 55 14             	mov    %edx,0x14(%ebp)
+  800a8d:	8b 00                	mov    (%eax),%eax
+  800a8f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800a92:	eb 1f                	jmp    800ab3 <vprintfmt+0xe6>
+
+        case '.':
+            if (width < 0)
+  800a94:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800a98:	79 86                	jns    800a20 <vprintfmt+0x53>
+                width = 0;
+  800a9a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800aa1:	e9 7a ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800aa6:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800aad:	e9 6e ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+            goto process_precision;
+  800ab2:	90                   	nop
+        case '#':
+            altflag = 1;
+            goto reswitch;
+
+        process_precision:
+            if (width < 0)
+  800ab3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ab7:	0f 89 63 ff ff ff    	jns    800a20 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800abd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ac0:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800ac3:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800aca:	e9 51 ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800acf:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800ad3:	e9 48 ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800ad8:	8b 45 14             	mov    0x14(%ebp),%eax
+  800adb:	8d 50 04             	lea    0x4(%eax),%edx
+  800ade:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ae1:	8b 00                	mov    (%eax),%eax
+  800ae3:	83 ec 08             	sub    $0x8,%esp
+  800ae6:	ff 75 0c             	pushl  0xc(%ebp)
+  800ae9:	50                   	push   %eax
+  800aea:	8b 45 08             	mov    0x8(%ebp),%eax
+  800aed:	ff d0                	call   *%eax
+  800aef:	83 c4 10             	add    $0x10,%esp
+            break;
+  800af2:	e9 71 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800af7:	8b 45 14             	mov    0x14(%ebp),%eax
+  800afa:	8d 50 04             	lea    0x4(%eax),%edx
+  800afd:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b00:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b02:	85 db                	test   %ebx,%ebx
+  800b04:	79 02                	jns    800b08 <vprintfmt+0x13b>
+                err = -err;
+  800b06:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b08:	83 fb 18             	cmp    $0x18,%ebx
+  800b0b:	7f 0b                	jg     800b18 <vprintfmt+0x14b>
+  800b0d:	8b 34 9d 40 11 80 00 	mov    0x801140(,%ebx,4),%esi
+  800b14:	85 f6                	test   %esi,%esi
+  800b16:	75 19                	jne    800b31 <vprintfmt+0x164>
+                printfmt(putch, putdat, "error %d", err);
+  800b18:	53                   	push   %ebx
+  800b19:	68 b5 11 80 00       	push   $0x8011b5
+  800b1e:	ff 75 0c             	pushl  0xc(%ebp)
+  800b21:	ff 75 08             	pushl  0x8(%ebp)
+  800b24:	e8 80 fe ff ff       	call   8009a9 <printfmt>
+  800b29:	83 c4 10             	add    $0x10,%esp
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b2c:	e9 37 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  800b31:	56                   	push   %esi
+  800b32:	68 be 11 80 00       	push   $0x8011be
+  800b37:	ff 75 0c             	pushl  0xc(%ebp)
+  800b3a:	ff 75 08             	pushl  0x8(%ebp)
+  800b3d:	e8 67 fe ff ff       	call   8009a9 <printfmt>
+  800b42:	83 c4 10             	add    $0x10,%esp
+            }
+            break;
+  800b45:	e9 1e 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800b4a:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b4d:	8d 50 04             	lea    0x4(%eax),%edx
+  800b50:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b53:	8b 30                	mov    (%eax),%esi
+  800b55:	85 f6                	test   %esi,%esi
+  800b57:	75 05                	jne    800b5e <vprintfmt+0x191>
+                p = "(null)";
+  800b59:	be c1 11 80 00       	mov    $0x8011c1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800b5e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b62:	7e 76                	jle    800bda <vprintfmt+0x20d>
+  800b64:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800b68:	74 70                	je     800bda <vprintfmt+0x20d>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b6a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b6d:	83 ec 08             	sub    $0x8,%esp
+  800b70:	50                   	push   %eax
+  800b71:	56                   	push   %esi
+  800b72:	e8 17 f8 ff ff       	call   80038e <strnlen>
+  800b77:	83 c4 10             	add    $0x10,%esp
+  800b7a:	89 c2                	mov    %eax,%edx
+  800b7c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800b7f:	29 d0                	sub    %edx,%eax
+  800b81:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b84:	eb 17                	jmp    800b9d <vprintfmt+0x1d0>
+                    putch(padc, putdat);
+  800b86:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800b8a:	83 ec 08             	sub    $0x8,%esp
+  800b8d:	ff 75 0c             	pushl  0xc(%ebp)
+  800b90:	50                   	push   %eax
+  800b91:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b94:	ff d0                	call   *%eax
+  800b96:	83 c4 10             	add    $0x10,%esp
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b99:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800b9d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ba1:	7f e3                	jg     800b86 <vprintfmt+0x1b9>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800ba3:	eb 35                	jmp    800bda <vprintfmt+0x20d>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800ba5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800ba9:	74 1c                	je     800bc7 <vprintfmt+0x1fa>
+  800bab:	83 fb 1f             	cmp    $0x1f,%ebx
+  800bae:	7e 05                	jle    800bb5 <vprintfmt+0x1e8>
+  800bb0:	83 fb 7e             	cmp    $0x7e,%ebx
+  800bb3:	7e 12                	jle    800bc7 <vprintfmt+0x1fa>
+                    putch('?', putdat);
+  800bb5:	83 ec 08             	sub    $0x8,%esp
+  800bb8:	ff 75 0c             	pushl  0xc(%ebp)
+  800bbb:	6a 3f                	push   $0x3f
+  800bbd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bc0:	ff d0                	call   *%eax
+  800bc2:	83 c4 10             	add    $0x10,%esp
+  800bc5:	eb 0f                	jmp    800bd6 <vprintfmt+0x209>
+                }
+                else {
+                    putch(ch, putdat);
+  800bc7:	83 ec 08             	sub    $0x8,%esp
+  800bca:	ff 75 0c             	pushl  0xc(%ebp)
+  800bcd:	53                   	push   %ebx
+  800bce:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bd1:	ff d0                	call   *%eax
+  800bd3:	83 c4 10             	add    $0x10,%esp
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bd6:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800bda:	89 f0                	mov    %esi,%eax
+  800bdc:	8d 70 01             	lea    0x1(%eax),%esi
+  800bdf:	0f b6 00             	movzbl (%eax),%eax
+  800be2:	0f be d8             	movsbl %al,%ebx
+  800be5:	85 db                	test   %ebx,%ebx
+  800be7:	74 26                	je     800c0f <vprintfmt+0x242>
+  800be9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800bed:	78 b6                	js     800ba5 <vprintfmt+0x1d8>
+  800bef:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  800bf3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800bf7:	79 ac                	jns    800ba5 <vprintfmt+0x1d8>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800bf9:	eb 14                	jmp    800c0f <vprintfmt+0x242>
+                putch(' ', putdat);
+  800bfb:	83 ec 08             	sub    $0x8,%esp
+  800bfe:	ff 75 0c             	pushl  0xc(%ebp)
+  800c01:	6a 20                	push   $0x20
+  800c03:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c06:	ff d0                	call   *%eax
+  800c08:	83 c4 10             	add    $0x10,%esp
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c0b:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c0f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c13:	7f e6                	jg     800bfb <vprintfmt+0x22e>
+                putch(' ', putdat);
+            }
+            break;
+  800c15:	e9 4e 01 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c1a:	83 ec 08             	sub    $0x8,%esp
+  800c1d:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c20:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c23:	50                   	push   %eax
+  800c24:	e8 39 fd ff ff       	call   800962 <getint>
+  800c29:	83 c4 10             	add    $0x10,%esp
+  800c2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c2f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c32:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c35:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c38:	85 d2                	test   %edx,%edx
+  800c3a:	79 23                	jns    800c5f <vprintfmt+0x292>
+                putch('-', putdat);
+  800c3c:	83 ec 08             	sub    $0x8,%esp
+  800c3f:	ff 75 0c             	pushl  0xc(%ebp)
+  800c42:	6a 2d                	push   $0x2d
+  800c44:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c47:	ff d0                	call   *%eax
+  800c49:	83 c4 10             	add    $0x10,%esp
+                num = -(long long)num;
+  800c4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c4f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c52:	f7 d8                	neg    %eax
+  800c54:	83 d2 00             	adc    $0x0,%edx
+  800c57:	f7 da                	neg    %edx
+  800c59:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c5c:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800c5f:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c66:	e9 9f 00 00 00       	jmp    800d0a <vprintfmt+0x33d>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800c6b:	83 ec 08             	sub    $0x8,%esp
+  800c6e:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c71:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c74:	50                   	push   %eax
+  800c75:	e8 99 fc ff ff       	call   800913 <getuint>
+  800c7a:	83 c4 10             	add    $0x10,%esp
+  800c7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c80:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800c83:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c8a:	eb 7e                	jmp    800d0a <vprintfmt+0x33d>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800c8c:	83 ec 08             	sub    $0x8,%esp
+  800c8f:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c92:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c95:	50                   	push   %eax
+  800c96:	e8 78 fc ff ff       	call   800913 <getuint>
+  800c9b:	83 c4 10             	add    $0x10,%esp
+  800c9e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ca1:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800ca4:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800cab:	eb 5d                	jmp    800d0a <vprintfmt+0x33d>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800cad:	83 ec 08             	sub    $0x8,%esp
+  800cb0:	ff 75 0c             	pushl  0xc(%ebp)
+  800cb3:	6a 30                	push   $0x30
+  800cb5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb8:	ff d0                	call   *%eax
+  800cba:	83 c4 10             	add    $0x10,%esp
+            putch('x', putdat);
+  800cbd:	83 ec 08             	sub    $0x8,%esp
+  800cc0:	ff 75 0c             	pushl  0xc(%ebp)
+  800cc3:	6a 78                	push   $0x78
+  800cc5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cc8:	ff d0                	call   *%eax
+  800cca:	83 c4 10             	add    $0x10,%esp
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800ccd:	8b 45 14             	mov    0x14(%ebp),%eax
+  800cd0:	8d 50 04             	lea    0x4(%eax),%edx
+  800cd3:	89 55 14             	mov    %edx,0x14(%ebp)
+  800cd6:	8b 00                	mov    (%eax),%eax
+  800cd8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cdb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800ce2:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800ce9:	eb 1f                	jmp    800d0a <vprintfmt+0x33d>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800ceb:	83 ec 08             	sub    $0x8,%esp
+  800cee:	ff 75 e0             	pushl  -0x20(%ebp)
+  800cf1:	8d 45 14             	lea    0x14(%ebp),%eax
+  800cf4:	50                   	push   %eax
+  800cf5:	e8 19 fc ff ff       	call   800913 <getuint>
+  800cfa:	83 c4 10             	add    $0x10,%esp
+  800cfd:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d00:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d03:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d0a:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d11:	83 ec 04             	sub    $0x4,%esp
+  800d14:	52                   	push   %edx
+  800d15:	ff 75 e8             	pushl  -0x18(%ebp)
+  800d18:	50                   	push   %eax
+  800d19:	ff 75 f4             	pushl  -0xc(%ebp)
+  800d1c:	ff 75 f0             	pushl  -0x10(%ebp)
+  800d1f:	ff 75 0c             	pushl  0xc(%ebp)
+  800d22:	ff 75 08             	pushl  0x8(%ebp)
+  800d25:	e8 f8 fa ff ff       	call   800822 <printnum>
+  800d2a:	83 c4 20             	add    $0x20,%esp
+            break;
+  800d2d:	eb 39                	jmp    800d68 <vprintfmt+0x39b>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800d2f:	83 ec 08             	sub    $0x8,%esp
+  800d32:	ff 75 0c             	pushl  0xc(%ebp)
+  800d35:	53                   	push   %ebx
+  800d36:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d39:	ff d0                	call   *%eax
+  800d3b:	83 c4 10             	add    $0x10,%esp
+            break;
+  800d3e:	eb 28                	jmp    800d68 <vprintfmt+0x39b>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800d40:	83 ec 08             	sub    $0x8,%esp
+  800d43:	ff 75 0c             	pushl  0xc(%ebp)
+  800d46:	6a 25                	push   $0x25
+  800d48:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d4b:	ff d0                	call   *%eax
+  800d4d:	83 c4 10             	add    $0x10,%esp
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800d50:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d54:	eb 04                	jmp    800d5a <vprintfmt+0x38d>
+  800d56:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d5a:	8b 45 10             	mov    0x10(%ebp),%eax
+  800d5d:	83 e8 01             	sub    $0x1,%eax
+  800d60:	0f b6 00             	movzbl (%eax),%eax
+  800d63:	3c 25                	cmp    $0x25,%al
+  800d65:	75 ef                	jne    800d56 <vprintfmt+0x389>
+                /* do nothing */;
+            break;
+  800d67:	90                   	nop
+        }
+    }
+  800d68:	e9 68 fc ff ff       	jmp    8009d5 <vprintfmt+0x8>
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+            if (ch == '\0') {
+                return;
+  800d6d:	90                   	nop
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  800d6e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  800d71:	5b                   	pop    %ebx
+  800d72:	5e                   	pop    %esi
+  800d73:	5d                   	pop    %ebp
+  800d74:	c3                   	ret    
+
+00800d75 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800d75:	55                   	push   %ebp
+  800d76:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800d78:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d7b:	8b 40 08             	mov    0x8(%eax),%eax
+  800d7e:	8d 50 01             	lea    0x1(%eax),%edx
+  800d81:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d84:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800d87:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d8a:	8b 10                	mov    (%eax),%edx
+  800d8c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d8f:	8b 40 04             	mov    0x4(%eax),%eax
+  800d92:	39 c2                	cmp    %eax,%edx
+  800d94:	73 12                	jae    800da8 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800d96:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d99:	8b 00                	mov    (%eax),%eax
+  800d9b:	8d 48 01             	lea    0x1(%eax),%ecx
+  800d9e:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800da1:	89 0a                	mov    %ecx,(%edx)
+  800da3:	8b 55 08             	mov    0x8(%ebp),%edx
+  800da6:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800da8:	90                   	nop
+  800da9:	5d                   	pop    %ebp
+  800daa:	c3                   	ret    
+
+00800dab <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800dab:	55                   	push   %ebp
+  800dac:	89 e5                	mov    %esp,%ebp
+  800dae:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800db1:	8d 45 14             	lea    0x14(%ebp),%eax
+  800db4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800db7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800dba:	50                   	push   %eax
+  800dbb:	ff 75 10             	pushl  0x10(%ebp)
+  800dbe:	ff 75 0c             	pushl  0xc(%ebp)
+  800dc1:	ff 75 08             	pushl  0x8(%ebp)
+  800dc4:	e8 0b 00 00 00       	call   800dd4 <vsnprintf>
+  800dc9:	83 c4 10             	add    $0x10,%esp
+  800dcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800dcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800dd2:	c9                   	leave  
+  800dd3:	c3                   	ret    
+
+00800dd4 <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800dd4:	55                   	push   %ebp
+  800dd5:	89 e5                	mov    %esp,%ebp
+  800dd7:	83 ec 18             	sub    $0x18,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800dda:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ddd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800de0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800de3:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800de6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de9:	01 d0                	add    %edx,%eax
+  800deb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800dee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800df5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800df9:	74 0a                	je     800e05 <vsnprintf+0x31>
+  800dfb:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800dfe:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e01:	39 c2                	cmp    %eax,%edx
+  800e03:	76 07                	jbe    800e0c <vsnprintf+0x38>
+        return -E_INVAL;
+  800e05:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e0a:	eb 20                	jmp    800e2c <vsnprintf+0x58>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e0c:	ff 75 14             	pushl  0x14(%ebp)
+  800e0f:	ff 75 10             	pushl  0x10(%ebp)
+  800e12:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800e15:	50                   	push   %eax
+  800e16:	68 75 0d 80 00       	push   $0x800d75
+  800e1b:	e8 ad fb ff ff       	call   8009cd <vprintfmt>
+  800e20:	83 c4 10             	add    $0x10,%esp
+    // null terminate the buffer
+    *b.buf = '\0';
+  800e23:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e26:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800e29:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e2c:	c9                   	leave  
+  800e2d:	c3                   	ret    
+
+00800e2e <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800e2e:	55                   	push   %ebp
+  800e2f:	89 e5                	mov    %esp,%ebp
+  800e31:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800e34:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e37:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800e3d:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800e40:	b8 20 00 00 00       	mov    $0x20,%eax
+  800e45:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800e48:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800e4b:	89 c1                	mov    %eax,%ecx
+  800e4d:	d3 ea                	shr    %cl,%edx
+  800e4f:	89 d0                	mov    %edx,%eax
+}
+  800e51:	c9                   	leave  
+  800e52:	c3                   	ret    
+
+00800e53 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800e53:	55                   	push   %ebp
+  800e54:	89 e5                	mov    %esp,%ebp
+  800e56:	57                   	push   %edi
+  800e57:	56                   	push   %esi
+  800e58:	53                   	push   %ebx
+  800e59:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800e5c:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e61:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800e67:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800e6d:	6b f0 05             	imul   $0x5,%eax,%esi
+  800e70:	01 fe                	add    %edi,%esi
+  800e72:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800e77:	f7 e7                	mul    %edi
+  800e79:	01 d6                	add    %edx,%esi
+  800e7b:	89 f2                	mov    %esi,%edx
+  800e7d:	83 c0 0b             	add    $0xb,%eax
+  800e80:	83 d2 00             	adc    $0x0,%edx
+  800e83:	89 c7                	mov    %eax,%edi
+  800e85:	83 e7 ff             	and    $0xffffffff,%edi
+  800e88:	89 f9                	mov    %edi,%ecx
+  800e8a:	0f b7 da             	movzwl %dx,%ebx
+  800e8d:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800e93:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800e99:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e9e:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ea4:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ea8:	c1 ea 0c             	shr    $0xc,%edx
+  800eab:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800eae:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800eb1:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800eb8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ebb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ebe:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ec1:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800ec4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec7:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800eca:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ece:	74 1c                	je     800eec <rand+0x99>
+  800ed0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ed3:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ed8:	f7 75 dc             	divl   -0x24(%ebp)
+  800edb:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800ede:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ee1:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ee6:	f7 75 dc             	divl   -0x24(%ebp)
+  800ee9:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800eec:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800eef:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800ef2:	f7 75 dc             	divl   -0x24(%ebp)
+  800ef5:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ef8:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800efb:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800efe:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800f01:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f04:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f07:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800f0a:	83 c4 24             	add    $0x24,%esp
+  800f0d:	5b                   	pop    %ebx
+  800f0e:	5e                   	pop    %esi
+  800f0f:	5f                   	pop    %edi
+  800f10:	5d                   	pop    %ebp
+  800f11:	c3                   	ret    
+
+00800f12 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800f12:	55                   	push   %ebp
+  800f13:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800f15:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f18:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f1d:	a3 00 20 80 00       	mov    %eax,0x802000
+  800f22:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800f28:	90                   	nop
+  800f29:	5d                   	pop    %ebp
+  800f2a:	c3                   	ret    
+
+00800f2b <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  800f2b:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  800f2f:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f32:	ff 71 fc             	pushl  -0x4(%ecx)
+  800f35:	55                   	push   %ebp
+  800f36:	89 e5                	mov    %esp,%ebp
+  800f38:	51                   	push   %ecx
+  800f39:	83 ec 14             	sub    $0x14,%esp
+    int pid, ret;
+    cprintf("I am the parent. Forking the child...\n");
+  800f3c:	83 ec 0c             	sub    $0xc,%esp
+  800f3f:	68 20 13 80 00       	push   $0x801320
+  800f44:	e8 90 f3 ff ff       	call   8002d9 <cprintf>
+  800f49:	83 c4 10             	add    $0x10,%esp
+    if ((pid = fork()) == 0) {
+  800f4c:	e8 8c f2 ff ff       	call   8001dd <fork>
+  800f51:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800f54:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+  800f58:	75 12                	jne    800f6c <main+0x41>
+        cprintf("I am the child. spinning ...\n");
+  800f5a:	83 ec 0c             	sub    $0xc,%esp
+  800f5d:	68 47 13 80 00       	push   $0x801347
+  800f62:	e8 72 f3 ff ff       	call   8002d9 <cprintf>
+  800f67:	83 c4 10             	add    $0x10,%esp
+        while (1);
+  800f6a:	eb fe                	jmp    800f6a <main+0x3f>
+    }
+    cprintf("I am the parent. Running the child...\n");
+  800f6c:	83 ec 0c             	sub    $0xc,%esp
+  800f6f:	68 68 13 80 00       	push   $0x801368
+  800f74:	e8 60 f3 ff ff       	call   8002d9 <cprintf>
+  800f79:	83 c4 10             	add    $0x10,%esp
+
+    yield();
+  800f7c:	e8 99 f2 ff ff       	call   80021a <yield>
+    yield();
+  800f81:	e8 94 f2 ff ff       	call   80021a <yield>
+    yield();
+  800f86:	e8 8f f2 ff ff       	call   80021a <yield>
+
+    cprintf("I am the parent.  Killing the child...\n");
+  800f8b:	83 ec 0c             	sub    $0xc,%esp
+  800f8e:	68 90 13 80 00       	push   $0x801390
+  800f93:	e8 41 f3 ff ff       	call   8002d9 <cprintf>
+  800f98:	83 c4 10             	add    $0x10,%esp
+
+    assert((ret = kill(pid)) == 0);
+  800f9b:	83 ec 0c             	sub    $0xc,%esp
+  800f9e:	ff 75 f4             	pushl  -0xc(%ebp)
+  800fa1:	e8 82 f2 ff ff       	call   800228 <kill>
+  800fa6:	83 c4 10             	add    $0x10,%esp
+  800fa9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800fac:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800fb0:	74 16                	je     800fc8 <main+0x9d>
+  800fb2:	68 b8 13 80 00       	push   $0x8013b8
+  800fb7:	68 cf 13 80 00       	push   $0x8013cf
+  800fbc:	6a 14                	push   $0x14
+  800fbe:	68 e4 13 80 00       	push   $0x8013e4
+  800fc3:	e8 58 f0 ff ff       	call   800020 <__panic>
+    cprintf("kill returns %d\n", ret);
+  800fc8:	83 ec 08             	sub    $0x8,%esp
+  800fcb:	ff 75 f0             	pushl  -0x10(%ebp)
+  800fce:	68 f0 13 80 00       	push   $0x8013f0
+  800fd3:	e8 01 f3 ff ff       	call   8002d9 <cprintf>
+  800fd8:	83 c4 10             	add    $0x10,%esp
+
+    assert((ret = waitpid(pid, NULL)) == 0);
+  800fdb:	83 ec 08             	sub    $0x8,%esp
+  800fde:	6a 00                	push   $0x0
+  800fe0:	ff 75 f4             	pushl  -0xc(%ebp)
+  800fe3:	e8 19 f2 ff ff       	call   800201 <waitpid>
+  800fe8:	83 c4 10             	add    $0x10,%esp
+  800feb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800fee:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800ff2:	74 16                	je     80100a <main+0xdf>
+  800ff4:	68 04 14 80 00       	push   $0x801404
+  800ff9:	68 cf 13 80 00       	push   $0x8013cf
+  800ffe:	6a 17                	push   $0x17
+  801000:	68 e4 13 80 00       	push   $0x8013e4
+  801005:	e8 16 f0 ff ff       	call   800020 <__panic>
+    cprintf("wait returns %d\n", ret);
+  80100a:	83 ec 08             	sub    $0x8,%esp
+  80100d:	ff 75 f0             	pushl  -0x10(%ebp)
+  801010:	68 24 14 80 00       	push   $0x801424
+  801015:	e8 bf f2 ff ff       	call   8002d9 <cprintf>
+  80101a:	83 c4 10             	add    $0x10,%esp
+
+    cprintf("spin may pass.\n");
+  80101d:	83 ec 0c             	sub    $0xc,%esp
+  801020:	68 35 14 80 00       	push   $0x801435
+  801025:	e8 af f2 ff ff       	call   8002d9 <cprintf>
+  80102a:	83 c4 10             	add    $0x10,%esp
+    return 0;
+  80102d:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  801032:	8b 4d fc             	mov    -0x4(%ebp),%ecx
+  801035:	c9                   	leave  
+  801036:	8d 61 fc             	lea    -0x4(%ecx),%esp
+  801039:	c3                   	ret    
diff -r -u -P lab6_original/obj/user/spin.d lab6/obj/user/spin.d
--- lab6_original/obj/user/spin.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/spin.d	2016-04-29 16:22:06.800737884 +0800
@@ -0,0 +1,2 @@
+obj/user/spin.o obj/user/spin.d: user/spin.c libs/stdio.h libs/defs.h \
+ libs/stdarg.h user/libs/ulib.h
Binary files lab6_original/obj/user/spin.o and lab6/obj/user/spin.o differ
diff -r -u -P lab6_original/obj/user/spin.sym lab6/obj/user/spin.sym
--- lab6_original/obj/user/spin.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/spin.sym	2016-04-29 16:22:07.732720437 +0800
@@ -0,0 +1,76 @@
+00800020 .text
+00801040 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202d7d .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b5 syscall
+00000000 ulib.c
+00000000 stdio.c
+0080028c cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+00801140 error_string
+00800822 printnum
+00800913 getuint
+00800962 getint
+00800d75 sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 spin.c
+008003be strcpy
+0080021a yield
+00800201 waitpid
+00800141 sys_yield
+008006d7 memmove
+00800dab snprintf
+008009cd vprintfmt
+0080011d sys_fork
+008002d9 cprintf
+0080023e getpid
+0080077a memcpy
+00800266 lab6_set_priority
+00800dd4 vsnprintf
+0080034d umain
+00202d7c __STAB_END__
+00800150 sys_kill
+00202d7d __STABSTR_BEGIN__
+00800020 __panic
+0080053a strtol
+0080038e strnlen
+0080024b print_pgdir
+00800228 kill
+0080050b strfind
+008001ea wait
+0080027d _start
+00800e53 rand
+00800482 strncmp
+00800171 sys_putc
+008003fe strncpy
+008007ca memcmp
+008001dd fork
+00800697 memset
+00800f2b main
+00800f12 srand
+00800e2e hash32
+008009a9 printfmt
+00203b64 __STABSTR_END__
+00800438 strcmp
+00800259 gettime_msec
+00800192 sys_gettime
+008002b0 vcprintf
+0080006e __warn
+008002ff cputs
+008001a1 sys_lab6_set_priority
+008001b7 exit
+0080012c sys_wait
+0080010b sys_exit
+00200010 __STAB_BEGIN__
+00800366 strlen
+00800183 sys_pgdir
+008004d8 strchr
+00800162 sys_getpid
diff -r -u -P lab6_original/obj/user/testbss.asm lab6/obj/user/testbss.asm
--- lab6_original/obj/user/testbss.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/testbss.asm	2016-04-29 16:22:07.716789259 +0800
@@ -0,0 +1,2673 @@
+
+obj/__user_testbss.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 18             	sub    $0x18,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	83 ec 04             	sub    $0x4,%esp
+  80002f:	ff 75 0c             	pushl  0xc(%ebp)
+  800032:	ff 75 08             	pushl  0x8(%ebp)
+  800035:	68 40 10 80 00       	push   $0x801040
+  80003a:	e8 9a 02 00 00       	call   8002d9 <cprintf>
+  80003f:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800042:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800045:	83 ec 08             	sub    $0x8,%esp
+  800048:	50                   	push   %eax
+  800049:	ff 75 10             	pushl  0x10(%ebp)
+  80004c:	e8 5f 02 00 00       	call   8002b0 <vcprintf>
+  800051:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  800054:	83 ec 0c             	sub    $0xc,%esp
+  800057:	68 5a 10 80 00       	push   $0x80105a
+  80005c:	e8 78 02 00 00       	call   8002d9 <cprintf>
+  800061:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	83 ec 0c             	sub    $0xc,%esp
+  800067:	6a f6                	push   $0xfffffff6
+  800069:	e8 49 01 00 00       	call   8001b7 <exit>
+
+0080006e <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80006e:	55                   	push   %ebp
+  80006f:	89 e5                	mov    %esp,%ebp
+  800071:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800074:	8d 45 14             	lea    0x14(%ebp),%eax
+  800077:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007a:	83 ec 04             	sub    $0x4,%esp
+  80007d:	ff 75 0c             	pushl  0xc(%ebp)
+  800080:	ff 75 08             	pushl  0x8(%ebp)
+  800083:	68 5c 10 80 00       	push   $0x80105c
+  800088:	e8 4c 02 00 00       	call   8002d9 <cprintf>
+  80008d:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800090:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800093:	83 ec 08             	sub    $0x8,%esp
+  800096:	50                   	push   %eax
+  800097:	ff 75 10             	pushl  0x10(%ebp)
+  80009a:	e8 11 02 00 00       	call   8002b0 <vcprintf>
+  80009f:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  8000a2:	83 ec 0c             	sub    $0xc,%esp
+  8000a5:	68 5a 10 80 00       	push   $0x80105a
+  8000aa:	e8 2a 02 00 00       	call   8002d9 <cprintf>
+  8000af:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8000b2:	90                   	nop
+  8000b3:	c9                   	leave  
+  8000b4:	c3                   	ret    
+
+008000b5 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b5:	55                   	push   %ebp
+  8000b6:	89 e5                	mov    %esp,%ebp
+  8000b8:	57                   	push   %edi
+  8000b9:	56                   	push   %esi
+  8000ba:	53                   	push   %ebx
+  8000bb:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000be:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cb:	eb 16                	jmp    8000e3 <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8000cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d0:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d3:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d6:	8b 10                	mov    (%eax),%edx
+  8000d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000db:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000df:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8000e3:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e7:	7e e4                	jle    8000cd <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000e9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ec:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000ef:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f2:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f5:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8000f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fb:	cd 80                	int    $0x80
+  8000fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  800100:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800103:	83 c4 20             	add    $0x20,%esp
+  800106:	5b                   	pop    %ebx
+  800107:	5e                   	pop    %esi
+  800108:	5f                   	pop    %edi
+  800109:	5d                   	pop    %ebp
+  80010a:	c3                   	ret    
+
+0080010b <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010b:	55                   	push   %ebp
+  80010c:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_exit, error_code);
+  80010e:	ff 75 08             	pushl  0x8(%ebp)
+  800111:	6a 01                	push   $0x1
+  800113:	e8 9d ff ff ff       	call   8000b5 <syscall>
+  800118:	83 c4 08             	add    $0x8,%esp
+}
+  80011b:	c9                   	leave  
+  80011c:	c3                   	ret    
+
+0080011d <sys_fork>:
+
+int
+sys_fork(void) {
+  80011d:	55                   	push   %ebp
+  80011e:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_fork);
+  800120:	6a 02                	push   $0x2
+  800122:	e8 8e ff ff ff       	call   8000b5 <syscall>
+  800127:	83 c4 04             	add    $0x4,%esp
+}
+  80012a:	c9                   	leave  
+  80012b:	c3                   	ret    
+
+0080012c <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80012c:	55                   	push   %ebp
+  80012d:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_wait, pid, store);
+  80012f:	ff 75 0c             	pushl  0xc(%ebp)
+  800132:	ff 75 08             	pushl  0x8(%ebp)
+  800135:	6a 03                	push   $0x3
+  800137:	e8 79 ff ff ff       	call   8000b5 <syscall>
+  80013c:	83 c4 0c             	add    $0xc,%esp
+}
+  80013f:	c9                   	leave  
+  800140:	c3                   	ret    
+
+00800141 <sys_yield>:
+
+int
+sys_yield(void) {
+  800141:	55                   	push   %ebp
+  800142:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_yield);
+  800144:	6a 0a                	push   $0xa
+  800146:	e8 6a ff ff ff       	call   8000b5 <syscall>
+  80014b:	83 c4 04             	add    $0x4,%esp
+}
+  80014e:	c9                   	leave  
+  80014f:	c3                   	ret    
+
+00800150 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800150:	55                   	push   %ebp
+  800151:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_kill, pid);
+  800153:	ff 75 08             	pushl  0x8(%ebp)
+  800156:	6a 0c                	push   $0xc
+  800158:	e8 58 ff ff ff       	call   8000b5 <syscall>
+  80015d:	83 c4 08             	add    $0x8,%esp
+}
+  800160:	c9                   	leave  
+  800161:	c3                   	ret    
+
+00800162 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800162:	55                   	push   %ebp
+  800163:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_getpid);
+  800165:	6a 12                	push   $0x12
+  800167:	e8 49 ff ff ff       	call   8000b5 <syscall>
+  80016c:	83 c4 04             	add    $0x4,%esp
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_putc, c);
+  800174:	ff 75 08             	pushl  0x8(%ebp)
+  800177:	6a 1e                	push   $0x1e
+  800179:	e8 37 ff ff ff       	call   8000b5 <syscall>
+  80017e:	83 c4 08             	add    $0x8,%esp
+}
+  800181:	c9                   	leave  
+  800182:	c3                   	ret    
+
+00800183 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800183:	55                   	push   %ebp
+  800184:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_pgdir);
+  800186:	6a 1f                	push   $0x1f
+  800188:	e8 28 ff ff ff       	call   8000b5 <syscall>
+  80018d:	83 c4 04             	add    $0x4,%esp
+}
+  800190:	c9                   	leave  
+  800191:	c3                   	ret    
+
+00800192 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  800192:	55                   	push   %ebp
+  800193:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_gettime);
+  800195:	6a 11                	push   $0x11
+  800197:	e8 19 ff ff ff       	call   8000b5 <syscall>
+  80019c:	83 c4 04             	add    $0x4,%esp
+}
+  80019f:	c9                   	leave  
+  8001a0:	c3                   	ret    
+
+008001a1 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001a1:	55                   	push   %ebp
+  8001a2:	89 e5                	mov    %esp,%ebp
+    syscall(SYS_lab6_set_priority, priority);
+  8001a4:	ff 75 08             	pushl  0x8(%ebp)
+  8001a7:	68 ff 00 00 00       	push   $0xff
+  8001ac:	e8 04 ff ff ff       	call   8000b5 <syscall>
+  8001b1:	83 c4 08             	add    $0x8,%esp
+}
+  8001b4:	90                   	nop
+  8001b5:	c9                   	leave  
+  8001b6:	c3                   	ret    
+
+008001b7 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001b7:	55                   	push   %ebp
+  8001b8:	89 e5                	mov    %esp,%ebp
+  8001ba:	83 ec 08             	sub    $0x8,%esp
+    sys_exit(error_code);
+  8001bd:	83 ec 0c             	sub    $0xc,%esp
+  8001c0:	ff 75 08             	pushl  0x8(%ebp)
+  8001c3:	e8 43 ff ff ff       	call   80010b <sys_exit>
+  8001c8:	83 c4 10             	add    $0x10,%esp
+    cprintf("BUG: exit failed.\n");
+  8001cb:	83 ec 0c             	sub    $0xc,%esp
+  8001ce:	68 78 10 80 00       	push   $0x801078
+  8001d3:	e8 01 01 00 00       	call   8002d9 <cprintf>
+  8001d8:	83 c4 10             	add    $0x10,%esp
+    while (1);
+  8001db:	eb fe                	jmp    8001db <exit+0x24>
+
+008001dd <fork>:
+}
+
+int
+fork(void) {
+  8001dd:	55                   	push   %ebp
+  8001de:	89 e5                	mov    %esp,%ebp
+  8001e0:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8001e3:	e8 35 ff ff ff       	call   80011d <sys_fork>
+}
+  8001e8:	c9                   	leave  
+  8001e9:	c3                   	ret    
+
+008001ea <wait>:
+
+int
+wait(void) {
+  8001ea:	55                   	push   %ebp
+  8001eb:	89 e5                	mov    %esp,%ebp
+  8001ed:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(0, NULL);
+  8001f0:	83 ec 08             	sub    $0x8,%esp
+  8001f3:	6a 00                	push   $0x0
+  8001f5:	6a 00                	push   $0x0
+  8001f7:	e8 30 ff ff ff       	call   80012c <sys_wait>
+  8001fc:	83 c4 10             	add    $0x10,%esp
+}
+  8001ff:	c9                   	leave  
+  800200:	c3                   	ret    
+
+00800201 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800201:	55                   	push   %ebp
+  800202:	89 e5                	mov    %esp,%ebp
+  800204:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(pid, store);
+  800207:	83 ec 08             	sub    $0x8,%esp
+  80020a:	ff 75 0c             	pushl  0xc(%ebp)
+  80020d:	ff 75 08             	pushl  0x8(%ebp)
+  800210:	e8 17 ff ff ff       	call   80012c <sys_wait>
+  800215:	83 c4 10             	add    $0x10,%esp
+}
+  800218:	c9                   	leave  
+  800219:	c3                   	ret    
+
+0080021a <yield>:
+
+void
+yield(void) {
+  80021a:	55                   	push   %ebp
+  80021b:	89 e5                	mov    %esp,%ebp
+  80021d:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800220:	e8 1c ff ff ff       	call   800141 <sys_yield>
+}
+  800225:	90                   	nop
+  800226:	c9                   	leave  
+  800227:	c3                   	ret    
+
+00800228 <kill>:
+
+int
+kill(int pid) {
+  800228:	55                   	push   %ebp
+  800229:	89 e5                	mov    %esp,%ebp
+  80022b:	83 ec 08             	sub    $0x8,%esp
+    return sys_kill(pid);
+  80022e:	83 ec 0c             	sub    $0xc,%esp
+  800231:	ff 75 08             	pushl  0x8(%ebp)
+  800234:	e8 17 ff ff ff       	call   800150 <sys_kill>
+  800239:	83 c4 10             	add    $0x10,%esp
+}
+  80023c:	c9                   	leave  
+  80023d:	c3                   	ret    
+
+0080023e <getpid>:
+
+int
+getpid(void) {
+  80023e:	55                   	push   %ebp
+  80023f:	89 e5                	mov    %esp,%ebp
+  800241:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800244:	e8 19 ff ff ff       	call   800162 <sys_getpid>
+}
+  800249:	c9                   	leave  
+  80024a:	c3                   	ret    
+
+0080024b <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80024b:	55                   	push   %ebp
+  80024c:	89 e5                	mov    %esp,%ebp
+  80024e:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800251:	e8 2d ff ff ff       	call   800183 <sys_pgdir>
+}
+  800256:	90                   	nop
+  800257:	c9                   	leave  
+  800258:	c3                   	ret    
+
+00800259 <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  800259:	55                   	push   %ebp
+  80025a:	89 e5                	mov    %esp,%ebp
+  80025c:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  80025f:	e8 2e ff ff ff       	call   800192 <sys_gettime>
+}
+  800264:	c9                   	leave  
+  800265:	c3                   	ret    
+
+00800266 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800266:	55                   	push   %ebp
+  800267:	89 e5                	mov    %esp,%ebp
+  800269:	83 ec 08             	sub    $0x8,%esp
+    sys_lab6_set_priority(priority);
+  80026c:	83 ec 0c             	sub    $0xc,%esp
+  80026f:	ff 75 08             	pushl  0x8(%ebp)
+  800272:	e8 2a ff ff ff       	call   8001a1 <sys_lab6_set_priority>
+  800277:	83 c4 10             	add    $0x10,%esp
+}
+  80027a:	90                   	nop
+  80027b:	c9                   	leave  
+  80027c:	c3                   	ret    
+
+0080027d <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  80027d:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800282:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800285:	e8 c3 00 00 00       	call   80034d <umain>
+1:  jmp 1b
+  80028a:	eb fe                	jmp    80028a <_start+0xd>
+
+0080028c <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  80028c:	55                   	push   %ebp
+  80028d:	89 e5                	mov    %esp,%ebp
+  80028f:	83 ec 08             	sub    $0x8,%esp
+    sys_putc(c);
+  800292:	83 ec 0c             	sub    $0xc,%esp
+  800295:	ff 75 08             	pushl  0x8(%ebp)
+  800298:	e8 d4 fe ff ff       	call   800171 <sys_putc>
+  80029d:	83 c4 10             	add    $0x10,%esp
+    (*cnt) ++;
+  8002a0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002a3:	8b 00                	mov    (%eax),%eax
+  8002a5:	8d 50 01             	lea    0x1(%eax),%edx
+  8002a8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002ab:	89 10                	mov    %edx,(%eax)
+}
+  8002ad:	90                   	nop
+  8002ae:	c9                   	leave  
+  8002af:	c3                   	ret    
+
+008002b0 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002b0:	55                   	push   %ebp
+  8002b1:	89 e5                	mov    %esp,%ebp
+  8002b3:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  8002b6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002bd:	ff 75 0c             	pushl  0xc(%ebp)
+  8002c0:	ff 75 08             	pushl  0x8(%ebp)
+  8002c3:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  8002c6:	50                   	push   %eax
+  8002c7:	68 8c 02 80 00       	push   $0x80028c
+  8002cc:	e8 fc 06 00 00       	call   8009cd <vprintfmt>
+  8002d1:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  8002d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002d7:	c9                   	leave  
+  8002d8:	c3                   	ret    
+
+008002d9 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  8002d9:	55                   	push   %ebp
+  8002da:	89 e5                	mov    %esp,%ebp
+  8002dc:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8002df:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8002e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  8002e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8002e8:	83 ec 08             	sub    $0x8,%esp
+  8002eb:	50                   	push   %eax
+  8002ec:	ff 75 08             	pushl  0x8(%ebp)
+  8002ef:	e8 bc ff ff ff       	call   8002b0 <vcprintf>
+  8002f4:	83 c4 10             	add    $0x10,%esp
+  8002f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  8002fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002fd:	c9                   	leave  
+  8002fe:	c3                   	ret    
+
+008002ff <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  8002ff:	55                   	push   %ebp
+  800300:	89 e5                	mov    %esp,%ebp
+  800302:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  800305:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80030c:	eb 14                	jmp    800322 <cputs+0x23>
+        cputch(c, &cnt);
+  80030e:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800312:	83 ec 08             	sub    $0x8,%esp
+  800315:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800318:	52                   	push   %edx
+  800319:	50                   	push   %eax
+  80031a:	e8 6d ff ff ff       	call   80028c <cputch>
+  80031f:	83 c4 10             	add    $0x10,%esp
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800322:	8b 45 08             	mov    0x8(%ebp),%eax
+  800325:	8d 50 01             	lea    0x1(%eax),%edx
+  800328:	89 55 08             	mov    %edx,0x8(%ebp)
+  80032b:	0f b6 00             	movzbl (%eax),%eax
+  80032e:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800331:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800335:	75 d7                	jne    80030e <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800337:	83 ec 08             	sub    $0x8,%esp
+  80033a:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  80033d:	50                   	push   %eax
+  80033e:	6a 0a                	push   $0xa
+  800340:	e8 47 ff ff ff       	call   80028c <cputch>
+  800345:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  800348:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80034b:	c9                   	leave  
+  80034c:	c3                   	ret    
+
+0080034d <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  80034d:	55                   	push   %ebp
+  80034e:	89 e5                	mov    %esp,%ebp
+  800350:	83 ec 18             	sub    $0x18,%esp
+    int ret = main();
+  800353:	e8 d3 0b 00 00       	call   800f2b <main>
+  800358:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  80035b:	83 ec 0c             	sub    $0xc,%esp
+  80035e:	ff 75 f4             	pushl  -0xc(%ebp)
+  800361:	e8 51 fe ff ff       	call   8001b7 <exit>
+
+00800366 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800366:	55                   	push   %ebp
+  800367:	89 e5                	mov    %esp,%ebp
+  800369:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  80036c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800373:	eb 04                	jmp    800379 <strlen+0x13>
+        cnt ++;
+  800375:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800379:	8b 45 08             	mov    0x8(%ebp),%eax
+  80037c:	8d 50 01             	lea    0x1(%eax),%edx
+  80037f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800382:	0f b6 00             	movzbl (%eax),%eax
+  800385:	84 c0                	test   %al,%al
+  800387:	75 ec                	jne    800375 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800389:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  80038c:	c9                   	leave  
+  80038d:	c3                   	ret    
+
+0080038e <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  80038e:	55                   	push   %ebp
+  80038f:	89 e5                	mov    %esp,%ebp
+  800391:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800394:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  80039b:	eb 04                	jmp    8003a1 <strnlen+0x13>
+        cnt ++;
+  80039d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  8003a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003a4:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003a7:	73 10                	jae    8003b9 <strnlen+0x2b>
+  8003a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003ac:	8d 50 01             	lea    0x1(%eax),%edx
+  8003af:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003b2:	0f b6 00             	movzbl (%eax),%eax
+  8003b5:	84 c0                	test   %al,%al
+  8003b7:	75 e4                	jne    80039d <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003b9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003bc:	c9                   	leave  
+  8003bd:	c3                   	ret    
+
+008003be <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  8003be:	55                   	push   %ebp
+  8003bf:	89 e5                	mov    %esp,%ebp
+  8003c1:	57                   	push   %edi
+  8003c2:	56                   	push   %esi
+  8003c3:	83 ec 20             	sub    $0x20,%esp
+  8003c6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003cc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8003cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  8003d2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003d8:	89 d1                	mov    %edx,%ecx
+  8003da:	89 c2                	mov    %eax,%edx
+  8003dc:	89 ce                	mov    %ecx,%esi
+  8003de:	89 d7                	mov    %edx,%edi
+  8003e0:	ac                   	lods   %ds:(%esi),%al
+  8003e1:	aa                   	stos   %al,%es:(%edi)
+  8003e2:	84 c0                	test   %al,%al
+  8003e4:	75 fa                	jne    8003e0 <strcpy+0x22>
+  8003e6:	89 fa                	mov    %edi,%edx
+  8003e8:	89 f1                	mov    %esi,%ecx
+  8003ea:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8003ed:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8003f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  8003f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  8003f6:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  8003f7:	83 c4 20             	add    $0x20,%esp
+  8003fa:	5e                   	pop    %esi
+  8003fb:	5f                   	pop    %edi
+  8003fc:	5d                   	pop    %ebp
+  8003fd:	c3                   	ret    
+
+008003fe <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  8003fe:	55                   	push   %ebp
+  8003ff:	89 e5                	mov    %esp,%ebp
+  800401:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800404:	8b 45 08             	mov    0x8(%ebp),%eax
+  800407:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  80040a:	eb 21                	jmp    80042d <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  80040c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80040f:	0f b6 10             	movzbl (%eax),%edx
+  800412:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800415:	88 10                	mov    %dl,(%eax)
+  800417:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80041a:	0f b6 00             	movzbl (%eax),%eax
+  80041d:	84 c0                	test   %al,%al
+  80041f:	74 04                	je     800425 <strncpy+0x27>
+            src ++;
+  800421:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800425:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800429:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  80042d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800431:	75 d9                	jne    80040c <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800433:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800436:	c9                   	leave  
+  800437:	c3                   	ret    
+
+00800438 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800438:	55                   	push   %ebp
+  800439:	89 e5                	mov    %esp,%ebp
+  80043b:	57                   	push   %edi
+  80043c:	56                   	push   %esi
+  80043d:	83 ec 20             	sub    $0x20,%esp
+  800440:	8b 45 08             	mov    0x8(%ebp),%eax
+  800443:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800446:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800449:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  80044c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80044f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800452:	89 d1                	mov    %edx,%ecx
+  800454:	89 c2                	mov    %eax,%edx
+  800456:	89 ce                	mov    %ecx,%esi
+  800458:	89 d7                	mov    %edx,%edi
+  80045a:	ac                   	lods   %ds:(%esi),%al
+  80045b:	ae                   	scas   %es:(%edi),%al
+  80045c:	75 08                	jne    800466 <strcmp+0x2e>
+  80045e:	84 c0                	test   %al,%al
+  800460:	75 f8                	jne    80045a <strcmp+0x22>
+  800462:	31 c0                	xor    %eax,%eax
+  800464:	eb 04                	jmp    80046a <strcmp+0x32>
+  800466:	19 c0                	sbb    %eax,%eax
+  800468:	0c 01                	or     $0x1,%al
+  80046a:	89 fa                	mov    %edi,%edx
+  80046c:	89 f1                	mov    %esi,%ecx
+  80046e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800471:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800474:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800477:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  80047a:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  80047b:	83 c4 20             	add    $0x20,%esp
+  80047e:	5e                   	pop    %esi
+  80047f:	5f                   	pop    %edi
+  800480:	5d                   	pop    %ebp
+  800481:	c3                   	ret    
+
+00800482 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800482:	55                   	push   %ebp
+  800483:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800485:	eb 0c                	jmp    800493 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800487:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  80048b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  80048f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800493:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800497:	74 1a                	je     8004b3 <strncmp+0x31>
+  800499:	8b 45 08             	mov    0x8(%ebp),%eax
+  80049c:	0f b6 00             	movzbl (%eax),%eax
+  80049f:	84 c0                	test   %al,%al
+  8004a1:	74 10                	je     8004b3 <strncmp+0x31>
+  8004a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004a6:	0f b6 10             	movzbl (%eax),%edx
+  8004a9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ac:	0f b6 00             	movzbl (%eax),%eax
+  8004af:	38 c2                	cmp    %al,%dl
+  8004b1:	74 d4                	je     800487 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004b3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004b7:	74 18                	je     8004d1 <strncmp+0x4f>
+  8004b9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004bc:	0f b6 00             	movzbl (%eax),%eax
+  8004bf:	0f b6 d0             	movzbl %al,%edx
+  8004c2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004c5:	0f b6 00             	movzbl (%eax),%eax
+  8004c8:	0f b6 c0             	movzbl %al,%eax
+  8004cb:	29 c2                	sub    %eax,%edx
+  8004cd:	89 d0                	mov    %edx,%eax
+  8004cf:	eb 05                	jmp    8004d6 <strncmp+0x54>
+  8004d1:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8004d6:	5d                   	pop    %ebp
+  8004d7:	c3                   	ret    
+
+008004d8 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  8004d8:	55                   	push   %ebp
+  8004d9:	89 e5                	mov    %esp,%ebp
+  8004db:	83 ec 04             	sub    $0x4,%esp
+  8004de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004e1:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  8004e4:	eb 14                	jmp    8004fa <strchr+0x22>
+        if (*s == c) {
+  8004e6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e9:	0f b6 00             	movzbl (%eax),%eax
+  8004ec:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  8004ef:	75 05                	jne    8004f6 <strchr+0x1e>
+            return (char *)s;
+  8004f1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004f4:	eb 13                	jmp    800509 <strchr+0x31>
+        }
+        s ++;
+  8004f6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  8004fa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fd:	0f b6 00             	movzbl (%eax),%eax
+  800500:	84 c0                	test   %al,%al
+  800502:	75 e2                	jne    8004e6 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800504:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800509:	c9                   	leave  
+  80050a:	c3                   	ret    
+
+0080050b <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  80050b:	55                   	push   %ebp
+  80050c:	89 e5                	mov    %esp,%ebp
+  80050e:	83 ec 04             	sub    $0x4,%esp
+  800511:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800514:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800517:	eb 0f                	jmp    800528 <strfind+0x1d>
+        if (*s == c) {
+  800519:	8b 45 08             	mov    0x8(%ebp),%eax
+  80051c:	0f b6 00             	movzbl (%eax),%eax
+  80051f:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800522:	74 10                	je     800534 <strfind+0x29>
+            break;
+        }
+        s ++;
+  800524:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800528:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052b:	0f b6 00             	movzbl (%eax),%eax
+  80052e:	84 c0                	test   %al,%al
+  800530:	75 e7                	jne    800519 <strfind+0xe>
+  800532:	eb 01                	jmp    800535 <strfind+0x2a>
+        if (*s == c) {
+            break;
+  800534:	90                   	nop
+        }
+        s ++;
+    }
+    return (char *)s;
+  800535:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800538:	c9                   	leave  
+  800539:	c3                   	ret    
+
+0080053a <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  80053a:	55                   	push   %ebp
+  80053b:	89 e5                	mov    %esp,%ebp
+  80053d:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800540:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800547:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80054e:	eb 04                	jmp    800554 <strtol+0x1a>
+        s ++;
+  800550:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800554:	8b 45 08             	mov    0x8(%ebp),%eax
+  800557:	0f b6 00             	movzbl (%eax),%eax
+  80055a:	3c 20                	cmp    $0x20,%al
+  80055c:	74 f2                	je     800550 <strtol+0x16>
+  80055e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800561:	0f b6 00             	movzbl (%eax),%eax
+  800564:	3c 09                	cmp    $0x9,%al
+  800566:	74 e8                	je     800550 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800568:	8b 45 08             	mov    0x8(%ebp),%eax
+  80056b:	0f b6 00             	movzbl (%eax),%eax
+  80056e:	3c 2b                	cmp    $0x2b,%al
+  800570:	75 06                	jne    800578 <strtol+0x3e>
+        s ++;
+  800572:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800576:	eb 15                	jmp    80058d <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800578:	8b 45 08             	mov    0x8(%ebp),%eax
+  80057b:	0f b6 00             	movzbl (%eax),%eax
+  80057e:	3c 2d                	cmp    $0x2d,%al
+  800580:	75 0b                	jne    80058d <strtol+0x53>
+        s ++, neg = 1;
+  800582:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800586:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  80058d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800591:	74 06                	je     800599 <strtol+0x5f>
+  800593:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800597:	75 24                	jne    8005bd <strtol+0x83>
+  800599:	8b 45 08             	mov    0x8(%ebp),%eax
+  80059c:	0f b6 00             	movzbl (%eax),%eax
+  80059f:	3c 30                	cmp    $0x30,%al
+  8005a1:	75 1a                	jne    8005bd <strtol+0x83>
+  8005a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a6:	83 c0 01             	add    $0x1,%eax
+  8005a9:	0f b6 00             	movzbl (%eax),%eax
+  8005ac:	3c 78                	cmp    $0x78,%al
+  8005ae:	75 0d                	jne    8005bd <strtol+0x83>
+        s += 2, base = 16;
+  8005b0:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005b4:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005bb:	eb 2a                	jmp    8005e7 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005bd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005c1:	75 17                	jne    8005da <strtol+0xa0>
+  8005c3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005c6:	0f b6 00             	movzbl (%eax),%eax
+  8005c9:	3c 30                	cmp    $0x30,%al
+  8005cb:	75 0d                	jne    8005da <strtol+0xa0>
+        s ++, base = 8;
+  8005cd:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005d1:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  8005d8:	eb 0d                	jmp    8005e7 <strtol+0xad>
+    }
+    else if (base == 0) {
+  8005da:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005de:	75 07                	jne    8005e7 <strtol+0xad>
+        base = 10;
+  8005e0:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  8005e7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ea:	0f b6 00             	movzbl (%eax),%eax
+  8005ed:	3c 2f                	cmp    $0x2f,%al
+  8005ef:	7e 1b                	jle    80060c <strtol+0xd2>
+  8005f1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005f4:	0f b6 00             	movzbl (%eax),%eax
+  8005f7:	3c 39                	cmp    $0x39,%al
+  8005f9:	7f 11                	jg     80060c <strtol+0xd2>
+            dig = *s - '0';
+  8005fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005fe:	0f b6 00             	movzbl (%eax),%eax
+  800601:	0f be c0             	movsbl %al,%eax
+  800604:	83 e8 30             	sub    $0x30,%eax
+  800607:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80060a:	eb 48                	jmp    800654 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  80060c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80060f:	0f b6 00             	movzbl (%eax),%eax
+  800612:	3c 60                	cmp    $0x60,%al
+  800614:	7e 1b                	jle    800631 <strtol+0xf7>
+  800616:	8b 45 08             	mov    0x8(%ebp),%eax
+  800619:	0f b6 00             	movzbl (%eax),%eax
+  80061c:	3c 7a                	cmp    $0x7a,%al
+  80061e:	7f 11                	jg     800631 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800620:	8b 45 08             	mov    0x8(%ebp),%eax
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	0f be c0             	movsbl %al,%eax
+  800629:	83 e8 57             	sub    $0x57,%eax
+  80062c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80062f:	eb 23                	jmp    800654 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800631:	8b 45 08             	mov    0x8(%ebp),%eax
+  800634:	0f b6 00             	movzbl (%eax),%eax
+  800637:	3c 40                	cmp    $0x40,%al
+  800639:	7e 3c                	jle    800677 <strtol+0x13d>
+  80063b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80063e:	0f b6 00             	movzbl (%eax),%eax
+  800641:	3c 5a                	cmp    $0x5a,%al
+  800643:	7f 32                	jg     800677 <strtol+0x13d>
+            dig = *s - 'A' + 10;
+  800645:	8b 45 08             	mov    0x8(%ebp),%eax
+  800648:	0f b6 00             	movzbl (%eax),%eax
+  80064b:	0f be c0             	movsbl %al,%eax
+  80064e:	83 e8 37             	sub    $0x37,%eax
+  800651:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800654:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800657:	3b 45 10             	cmp    0x10(%ebp),%eax
+  80065a:	7d 1a                	jge    800676 <strtol+0x13c>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  80065c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800660:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800663:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800667:	89 c2                	mov    %eax,%edx
+  800669:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80066c:	01 d0                	add    %edx,%eax
+  80066e:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800671:	e9 71 ff ff ff       	jmp    8005e7 <strtol+0xad>
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+            break;
+  800676:	90                   	nop
+        }
+        s ++, val = (val * base) + dig;
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  800677:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80067b:	74 08                	je     800685 <strtol+0x14b>
+        *endptr = (char *) s;
+  80067d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800680:	8b 55 08             	mov    0x8(%ebp),%edx
+  800683:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800685:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800689:	74 07                	je     800692 <strtol+0x158>
+  80068b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80068e:	f7 d8                	neg    %eax
+  800690:	eb 03                	jmp    800695 <strtol+0x15b>
+  800692:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800695:	c9                   	leave  
+  800696:	c3                   	ret    
+
+00800697 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800697:	55                   	push   %ebp
+  800698:	89 e5                	mov    %esp,%ebp
+  80069a:	57                   	push   %edi
+  80069b:	83 ec 24             	sub    $0x24,%esp
+  80069e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006a1:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006a4:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006a8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006ab:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006ae:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006b1:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006b7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006ba:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006be:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006c1:	89 d7                	mov    %edx,%edi
+  8006c3:	f3 aa                	rep stos %al,%es:(%edi)
+  8006c5:	89 fa                	mov    %edi,%edx
+  8006c7:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8006ca:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  8006cd:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006d0:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  8006d1:	83 c4 24             	add    $0x24,%esp
+  8006d4:	5f                   	pop    %edi
+  8006d5:	5d                   	pop    %ebp
+  8006d6:	c3                   	ret    
+
+008006d7 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  8006d7:	55                   	push   %ebp
+  8006d8:	89 e5                	mov    %esp,%ebp
+  8006da:	57                   	push   %edi
+  8006db:	56                   	push   %esi
+  8006dc:	53                   	push   %ebx
+  8006dd:	83 ec 30             	sub    $0x30,%esp
+  8006e0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8006e6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006e9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8006ec:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006ef:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  8006f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8006f5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  8006f8:	73 42                	jae    80073c <memmove+0x65>
+  8006fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8006fd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800700:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800703:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800706:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800709:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  80070c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  80070f:	c1 e8 02             	shr    $0x2,%eax
+  800712:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800714:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800717:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80071a:	89 d7                	mov    %edx,%edi
+  80071c:	89 c6                	mov    %eax,%esi
+  80071e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800720:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800723:	83 e1 03             	and    $0x3,%ecx
+  800726:	74 02                	je     80072a <memmove+0x53>
+  800728:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  80072a:	89 f0                	mov    %esi,%eax
+  80072c:	89 fa                	mov    %edi,%edx
+  80072e:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800731:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800734:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800737:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  80073a:	eb 36                	jmp    800772 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  80073c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80073f:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800742:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800745:	01 c2                	add    %eax,%edx
+  800747:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80074a:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  80074d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800750:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800753:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800756:	89 c1                	mov    %eax,%ecx
+  800758:	89 d8                	mov    %ebx,%eax
+  80075a:	89 d6                	mov    %edx,%esi
+  80075c:	89 c7                	mov    %eax,%edi
+  80075e:	fd                   	std    
+  80075f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800761:	fc                   	cld    
+  800762:	89 f8                	mov    %edi,%eax
+  800764:	89 f2                	mov    %esi,%edx
+  800766:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800769:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  80076c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  80076f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800772:	83 c4 30             	add    $0x30,%esp
+  800775:	5b                   	pop    %ebx
+  800776:	5e                   	pop    %esi
+  800777:	5f                   	pop    %edi
+  800778:	5d                   	pop    %ebp
+  800779:	c3                   	ret    
+
+0080077a <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  80077a:	55                   	push   %ebp
+  80077b:	89 e5                	mov    %esp,%ebp
+  80077d:	57                   	push   %edi
+  80077e:	56                   	push   %esi
+  80077f:	83 ec 20             	sub    $0x20,%esp
+  800782:	8b 45 08             	mov    0x8(%ebp),%eax
+  800785:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800788:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80078b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80078e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800791:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800794:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800797:	c1 e8 02             	shr    $0x2,%eax
+  80079a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  80079c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80079f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007a2:	89 d7                	mov    %edx,%edi
+  8007a4:	89 c6                	mov    %eax,%esi
+  8007a6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007a8:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007ab:	83 e1 03             	and    $0x3,%ecx
+  8007ae:	74 02                	je     8007b2 <memcpy+0x38>
+  8007b0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007b2:	89 f0                	mov    %esi,%eax
+  8007b4:	89 fa                	mov    %edi,%edx
+  8007b6:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007b9:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007bc:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  8007bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007c2:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007c3:	83 c4 20             	add    $0x20,%esp
+  8007c6:	5e                   	pop    %esi
+  8007c7:	5f                   	pop    %edi
+  8007c8:	5d                   	pop    %ebp
+  8007c9:	c3                   	ret    
+
+008007ca <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  8007ca:	55                   	push   %ebp
+  8007cb:	89 e5                	mov    %esp,%ebp
+  8007cd:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  8007d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007d3:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  8007d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007d9:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  8007dc:	eb 30                	jmp    80080e <memcmp+0x44>
+        if (*s1 != *s2) {
+  8007de:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8007e1:	0f b6 10             	movzbl (%eax),%edx
+  8007e4:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8007e7:	0f b6 00             	movzbl (%eax),%eax
+  8007ea:	38 c2                	cmp    %al,%dl
+  8007ec:	74 18                	je     800806 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8007ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8007f1:	0f b6 00             	movzbl (%eax),%eax
+  8007f4:	0f b6 d0             	movzbl %al,%edx
+  8007f7:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8007fa:	0f b6 00             	movzbl (%eax),%eax
+  8007fd:	0f b6 c0             	movzbl %al,%eax
+  800800:	29 c2                	sub    %eax,%edx
+  800802:	89 d0                	mov    %edx,%eax
+  800804:	eb 1a                	jmp    800820 <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800806:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  80080a:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  80080e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800811:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800814:	89 55 10             	mov    %edx,0x10(%ebp)
+  800817:	85 c0                	test   %eax,%eax
+  800819:	75 c3                	jne    8007de <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  80081b:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800820:	c9                   	leave  
+  800821:	c3                   	ret    
+
+00800822 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800822:	55                   	push   %ebp
+  800823:	89 e5                	mov    %esp,%ebp
+  800825:	83 ec 38             	sub    $0x38,%esp
+  800828:	8b 45 10             	mov    0x10(%ebp),%eax
+  80082b:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  80082e:	8b 45 14             	mov    0x14(%ebp),%eax
+  800831:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  800834:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800837:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  80083a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80083d:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800840:	8b 45 18             	mov    0x18(%ebp),%eax
+  800843:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800846:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800849:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80084c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80084f:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  800852:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800855:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800858:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  80085c:	74 1c                	je     80087a <printnum+0x58>
+  80085e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800861:	ba 00 00 00 00       	mov    $0x0,%edx
+  800866:	f7 75 e4             	divl   -0x1c(%ebp)
+  800869:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  80086c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80086f:	ba 00 00 00 00       	mov    $0x0,%edx
+  800874:	f7 75 e4             	divl   -0x1c(%ebp)
+  800877:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80087a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80087d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800880:	f7 75 e4             	divl   -0x1c(%ebp)
+  800883:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800886:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800889:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80088c:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80088f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800892:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800895:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800898:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  80089b:	8b 45 18             	mov    0x18(%ebp),%eax
+  80089e:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008a3:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008a6:	77 41                	ja     8008e9 <printnum+0xc7>
+  8008a8:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008ab:	72 05                	jb     8008b2 <printnum+0x90>
+  8008ad:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  8008b0:	77 37                	ja     8008e9 <printnum+0xc7>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008b2:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008b5:	83 e8 01             	sub    $0x1,%eax
+  8008b8:	83 ec 04             	sub    $0x4,%esp
+  8008bb:	ff 75 20             	pushl  0x20(%ebp)
+  8008be:	50                   	push   %eax
+  8008bf:	ff 75 18             	pushl  0x18(%ebp)
+  8008c2:	ff 75 ec             	pushl  -0x14(%ebp)
+  8008c5:	ff 75 e8             	pushl  -0x18(%ebp)
+  8008c8:	ff 75 0c             	pushl  0xc(%ebp)
+  8008cb:	ff 75 08             	pushl  0x8(%ebp)
+  8008ce:	e8 4f ff ff ff       	call   800822 <printnum>
+  8008d3:	83 c4 20             	add    $0x20,%esp
+  8008d6:	eb 1b                	jmp    8008f3 <printnum+0xd1>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  8008d8:	83 ec 08             	sub    $0x8,%esp
+  8008db:	ff 75 0c             	pushl  0xc(%ebp)
+  8008de:	ff 75 20             	pushl  0x20(%ebp)
+  8008e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008e4:	ff d0                	call   *%eax
+  8008e6:	83 c4 10             	add    $0x10,%esp
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8008e9:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8008ed:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8008f1:	7f e5                	jg     8008d8 <printnum+0xb6>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8008f3:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8008f6:	05 a4 11 80 00       	add    $0x8011a4,%eax
+  8008fb:	0f b6 00             	movzbl (%eax),%eax
+  8008fe:	0f be c0             	movsbl %al,%eax
+  800901:	83 ec 08             	sub    $0x8,%esp
+  800904:	ff 75 0c             	pushl  0xc(%ebp)
+  800907:	50                   	push   %eax
+  800908:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090b:	ff d0                	call   *%eax
+  80090d:	83 c4 10             	add    $0x10,%esp
+}
+  800910:	90                   	nop
+  800911:	c9                   	leave  
+  800912:	c3                   	ret    
+
+00800913 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800913:	55                   	push   %ebp
+  800914:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800916:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80091a:	7e 14                	jle    800930 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80091c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80091f:	8b 00                	mov    (%eax),%eax
+  800921:	8d 48 08             	lea    0x8(%eax),%ecx
+  800924:	8b 55 08             	mov    0x8(%ebp),%edx
+  800927:	89 0a                	mov    %ecx,(%edx)
+  800929:	8b 50 04             	mov    0x4(%eax),%edx
+  80092c:	8b 00                	mov    (%eax),%eax
+  80092e:	eb 30                	jmp    800960 <getuint+0x4d>
+    }
+    else if (lflag) {
+  800930:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800934:	74 16                	je     80094c <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800936:	8b 45 08             	mov    0x8(%ebp),%eax
+  800939:	8b 00                	mov    (%eax),%eax
+  80093b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80093e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800941:	89 0a                	mov    %ecx,(%edx)
+  800943:	8b 00                	mov    (%eax),%eax
+  800945:	ba 00 00 00 00       	mov    $0x0,%edx
+  80094a:	eb 14                	jmp    800960 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80094c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80094f:	8b 00                	mov    (%eax),%eax
+  800951:	8d 48 04             	lea    0x4(%eax),%ecx
+  800954:	8b 55 08             	mov    0x8(%ebp),%edx
+  800957:	89 0a                	mov    %ecx,(%edx)
+  800959:	8b 00                	mov    (%eax),%eax
+  80095b:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800960:	5d                   	pop    %ebp
+  800961:	c3                   	ret    
+
+00800962 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800962:	55                   	push   %ebp
+  800963:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800965:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800969:	7e 14                	jle    80097f <getint+0x1d>
+        return va_arg(*ap, long long);
+  80096b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80096e:	8b 00                	mov    (%eax),%eax
+  800970:	8d 48 08             	lea    0x8(%eax),%ecx
+  800973:	8b 55 08             	mov    0x8(%ebp),%edx
+  800976:	89 0a                	mov    %ecx,(%edx)
+  800978:	8b 50 04             	mov    0x4(%eax),%edx
+  80097b:	8b 00                	mov    (%eax),%eax
+  80097d:	eb 28                	jmp    8009a7 <getint+0x45>
+    }
+    else if (lflag) {
+  80097f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800983:	74 12                	je     800997 <getint+0x35>
+        return va_arg(*ap, long);
+  800985:	8b 45 08             	mov    0x8(%ebp),%eax
+  800988:	8b 00                	mov    (%eax),%eax
+  80098a:	8d 48 04             	lea    0x4(%eax),%ecx
+  80098d:	8b 55 08             	mov    0x8(%ebp),%edx
+  800990:	89 0a                	mov    %ecx,(%edx)
+  800992:	8b 00                	mov    (%eax),%eax
+  800994:	99                   	cltd   
+  800995:	eb 10                	jmp    8009a7 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800997:	8b 45 08             	mov    0x8(%ebp),%eax
+  80099a:	8b 00                	mov    (%eax),%eax
+  80099c:	8d 48 04             	lea    0x4(%eax),%ecx
+  80099f:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009a2:	89 0a                	mov    %ecx,(%edx)
+  8009a4:	8b 00                	mov    (%eax),%eax
+  8009a6:	99                   	cltd   
+    }
+}
+  8009a7:	5d                   	pop    %ebp
+  8009a8:	c3                   	ret    
+
+008009a9 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009a9:	55                   	push   %ebp
+  8009aa:	89 e5                	mov    %esp,%ebp
+  8009ac:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009af:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8009b8:	50                   	push   %eax
+  8009b9:	ff 75 10             	pushl  0x10(%ebp)
+  8009bc:	ff 75 0c             	pushl  0xc(%ebp)
+  8009bf:	ff 75 08             	pushl  0x8(%ebp)
+  8009c2:	e8 06 00 00 00       	call   8009cd <vprintfmt>
+  8009c7:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8009ca:	90                   	nop
+  8009cb:	c9                   	leave  
+  8009cc:	c3                   	ret    
+
+008009cd <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8009cd:	55                   	push   %ebp
+  8009ce:	89 e5                	mov    %esp,%ebp
+  8009d0:	56                   	push   %esi
+  8009d1:	53                   	push   %ebx
+  8009d2:	83 ec 20             	sub    $0x20,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009d5:	eb 17                	jmp    8009ee <vprintfmt+0x21>
+            if (ch == '\0') {
+  8009d7:	85 db                	test   %ebx,%ebx
+  8009d9:	0f 84 8e 03 00 00    	je     800d6d <vprintfmt+0x3a0>
+                return;
+            }
+            putch(ch, putdat);
+  8009df:	83 ec 08             	sub    $0x8,%esp
+  8009e2:	ff 75 0c             	pushl  0xc(%ebp)
+  8009e5:	53                   	push   %ebx
+  8009e6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009e9:	ff d0                	call   *%eax
+  8009eb:	83 c4 10             	add    $0x10,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009ee:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009f1:	8d 50 01             	lea    0x1(%eax),%edx
+  8009f4:	89 55 10             	mov    %edx,0x10(%ebp)
+  8009f7:	0f b6 00             	movzbl (%eax),%eax
+  8009fa:	0f b6 d8             	movzbl %al,%ebx
+  8009fd:	83 fb 25             	cmp    $0x25,%ebx
+  800a00:	75 d5                	jne    8009d7 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a02:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a06:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a10:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a13:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a1a:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a1d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a20:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a23:	8d 50 01             	lea    0x1(%eax),%edx
+  800a26:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a29:	0f b6 00             	movzbl (%eax),%eax
+  800a2c:	0f b6 d8             	movzbl %al,%ebx
+  800a2f:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a32:	83 f8 55             	cmp    $0x55,%eax
+  800a35:	0f 87 05 03 00 00    	ja     800d40 <vprintfmt+0x373>
+  800a3b:	8b 04 85 c8 11 80 00 	mov    0x8011c8(,%eax,4),%eax
+  800a42:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a44:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a48:	eb d6                	jmp    800a20 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a4a:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800a4e:	eb d0                	jmp    800a20 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a50:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800a57:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a5a:	89 d0                	mov    %edx,%eax
+  800a5c:	c1 e0 02             	shl    $0x2,%eax
+  800a5f:	01 d0                	add    %edx,%eax
+  800a61:	01 c0                	add    %eax,%eax
+  800a63:	01 d8                	add    %ebx,%eax
+  800a65:	83 e8 30             	sub    $0x30,%eax
+  800a68:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800a6b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a6e:	0f b6 00             	movzbl (%eax),%eax
+  800a71:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800a74:	83 fb 2f             	cmp    $0x2f,%ebx
+  800a77:	7e 39                	jle    800ab2 <vprintfmt+0xe5>
+  800a79:	83 fb 39             	cmp    $0x39,%ebx
+  800a7c:	7f 34                	jg     800ab2 <vprintfmt+0xe5>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a7e:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  800a82:	eb d3                	jmp    800a57 <vprintfmt+0x8a>
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800a84:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a87:	8d 50 04             	lea    0x4(%eax),%edx
+  800a8a:	89 55 14             	mov    %edx,0x14(%ebp)
+  800a8d:	8b 00                	mov    (%eax),%eax
+  800a8f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800a92:	eb 1f                	jmp    800ab3 <vprintfmt+0xe6>
+
+        case '.':
+            if (width < 0)
+  800a94:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800a98:	79 86                	jns    800a20 <vprintfmt+0x53>
+                width = 0;
+  800a9a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800aa1:	e9 7a ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800aa6:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800aad:	e9 6e ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+            goto process_precision;
+  800ab2:	90                   	nop
+        case '#':
+            altflag = 1;
+            goto reswitch;
+
+        process_precision:
+            if (width < 0)
+  800ab3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ab7:	0f 89 63 ff ff ff    	jns    800a20 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800abd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ac0:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800ac3:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800aca:	e9 51 ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800acf:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800ad3:	e9 48 ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800ad8:	8b 45 14             	mov    0x14(%ebp),%eax
+  800adb:	8d 50 04             	lea    0x4(%eax),%edx
+  800ade:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ae1:	8b 00                	mov    (%eax),%eax
+  800ae3:	83 ec 08             	sub    $0x8,%esp
+  800ae6:	ff 75 0c             	pushl  0xc(%ebp)
+  800ae9:	50                   	push   %eax
+  800aea:	8b 45 08             	mov    0x8(%ebp),%eax
+  800aed:	ff d0                	call   *%eax
+  800aef:	83 c4 10             	add    $0x10,%esp
+            break;
+  800af2:	e9 71 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800af7:	8b 45 14             	mov    0x14(%ebp),%eax
+  800afa:	8d 50 04             	lea    0x4(%eax),%edx
+  800afd:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b00:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b02:	85 db                	test   %ebx,%ebx
+  800b04:	79 02                	jns    800b08 <vprintfmt+0x13b>
+                err = -err;
+  800b06:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b08:	83 fb 18             	cmp    $0x18,%ebx
+  800b0b:	7f 0b                	jg     800b18 <vprintfmt+0x14b>
+  800b0d:	8b 34 9d 40 11 80 00 	mov    0x801140(,%ebx,4),%esi
+  800b14:	85 f6                	test   %esi,%esi
+  800b16:	75 19                	jne    800b31 <vprintfmt+0x164>
+                printfmt(putch, putdat, "error %d", err);
+  800b18:	53                   	push   %ebx
+  800b19:	68 b5 11 80 00       	push   $0x8011b5
+  800b1e:	ff 75 0c             	pushl  0xc(%ebp)
+  800b21:	ff 75 08             	pushl  0x8(%ebp)
+  800b24:	e8 80 fe ff ff       	call   8009a9 <printfmt>
+  800b29:	83 c4 10             	add    $0x10,%esp
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b2c:	e9 37 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  800b31:	56                   	push   %esi
+  800b32:	68 be 11 80 00       	push   $0x8011be
+  800b37:	ff 75 0c             	pushl  0xc(%ebp)
+  800b3a:	ff 75 08             	pushl  0x8(%ebp)
+  800b3d:	e8 67 fe ff ff       	call   8009a9 <printfmt>
+  800b42:	83 c4 10             	add    $0x10,%esp
+            }
+            break;
+  800b45:	e9 1e 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800b4a:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b4d:	8d 50 04             	lea    0x4(%eax),%edx
+  800b50:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b53:	8b 30                	mov    (%eax),%esi
+  800b55:	85 f6                	test   %esi,%esi
+  800b57:	75 05                	jne    800b5e <vprintfmt+0x191>
+                p = "(null)";
+  800b59:	be c1 11 80 00       	mov    $0x8011c1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800b5e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b62:	7e 76                	jle    800bda <vprintfmt+0x20d>
+  800b64:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800b68:	74 70                	je     800bda <vprintfmt+0x20d>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b6a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b6d:	83 ec 08             	sub    $0x8,%esp
+  800b70:	50                   	push   %eax
+  800b71:	56                   	push   %esi
+  800b72:	e8 17 f8 ff ff       	call   80038e <strnlen>
+  800b77:	83 c4 10             	add    $0x10,%esp
+  800b7a:	89 c2                	mov    %eax,%edx
+  800b7c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800b7f:	29 d0                	sub    %edx,%eax
+  800b81:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b84:	eb 17                	jmp    800b9d <vprintfmt+0x1d0>
+                    putch(padc, putdat);
+  800b86:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800b8a:	83 ec 08             	sub    $0x8,%esp
+  800b8d:	ff 75 0c             	pushl  0xc(%ebp)
+  800b90:	50                   	push   %eax
+  800b91:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b94:	ff d0                	call   *%eax
+  800b96:	83 c4 10             	add    $0x10,%esp
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b99:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800b9d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ba1:	7f e3                	jg     800b86 <vprintfmt+0x1b9>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800ba3:	eb 35                	jmp    800bda <vprintfmt+0x20d>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800ba5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800ba9:	74 1c                	je     800bc7 <vprintfmt+0x1fa>
+  800bab:	83 fb 1f             	cmp    $0x1f,%ebx
+  800bae:	7e 05                	jle    800bb5 <vprintfmt+0x1e8>
+  800bb0:	83 fb 7e             	cmp    $0x7e,%ebx
+  800bb3:	7e 12                	jle    800bc7 <vprintfmt+0x1fa>
+                    putch('?', putdat);
+  800bb5:	83 ec 08             	sub    $0x8,%esp
+  800bb8:	ff 75 0c             	pushl  0xc(%ebp)
+  800bbb:	6a 3f                	push   $0x3f
+  800bbd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bc0:	ff d0                	call   *%eax
+  800bc2:	83 c4 10             	add    $0x10,%esp
+  800bc5:	eb 0f                	jmp    800bd6 <vprintfmt+0x209>
+                }
+                else {
+                    putch(ch, putdat);
+  800bc7:	83 ec 08             	sub    $0x8,%esp
+  800bca:	ff 75 0c             	pushl  0xc(%ebp)
+  800bcd:	53                   	push   %ebx
+  800bce:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bd1:	ff d0                	call   *%eax
+  800bd3:	83 c4 10             	add    $0x10,%esp
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bd6:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800bda:	89 f0                	mov    %esi,%eax
+  800bdc:	8d 70 01             	lea    0x1(%eax),%esi
+  800bdf:	0f b6 00             	movzbl (%eax),%eax
+  800be2:	0f be d8             	movsbl %al,%ebx
+  800be5:	85 db                	test   %ebx,%ebx
+  800be7:	74 26                	je     800c0f <vprintfmt+0x242>
+  800be9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800bed:	78 b6                	js     800ba5 <vprintfmt+0x1d8>
+  800bef:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  800bf3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800bf7:	79 ac                	jns    800ba5 <vprintfmt+0x1d8>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800bf9:	eb 14                	jmp    800c0f <vprintfmt+0x242>
+                putch(' ', putdat);
+  800bfb:	83 ec 08             	sub    $0x8,%esp
+  800bfe:	ff 75 0c             	pushl  0xc(%ebp)
+  800c01:	6a 20                	push   $0x20
+  800c03:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c06:	ff d0                	call   *%eax
+  800c08:	83 c4 10             	add    $0x10,%esp
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c0b:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c0f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c13:	7f e6                	jg     800bfb <vprintfmt+0x22e>
+                putch(' ', putdat);
+            }
+            break;
+  800c15:	e9 4e 01 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c1a:	83 ec 08             	sub    $0x8,%esp
+  800c1d:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c20:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c23:	50                   	push   %eax
+  800c24:	e8 39 fd ff ff       	call   800962 <getint>
+  800c29:	83 c4 10             	add    $0x10,%esp
+  800c2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c2f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c32:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c35:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c38:	85 d2                	test   %edx,%edx
+  800c3a:	79 23                	jns    800c5f <vprintfmt+0x292>
+                putch('-', putdat);
+  800c3c:	83 ec 08             	sub    $0x8,%esp
+  800c3f:	ff 75 0c             	pushl  0xc(%ebp)
+  800c42:	6a 2d                	push   $0x2d
+  800c44:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c47:	ff d0                	call   *%eax
+  800c49:	83 c4 10             	add    $0x10,%esp
+                num = -(long long)num;
+  800c4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c4f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c52:	f7 d8                	neg    %eax
+  800c54:	83 d2 00             	adc    $0x0,%edx
+  800c57:	f7 da                	neg    %edx
+  800c59:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c5c:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800c5f:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c66:	e9 9f 00 00 00       	jmp    800d0a <vprintfmt+0x33d>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800c6b:	83 ec 08             	sub    $0x8,%esp
+  800c6e:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c71:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c74:	50                   	push   %eax
+  800c75:	e8 99 fc ff ff       	call   800913 <getuint>
+  800c7a:	83 c4 10             	add    $0x10,%esp
+  800c7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c80:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800c83:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c8a:	eb 7e                	jmp    800d0a <vprintfmt+0x33d>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800c8c:	83 ec 08             	sub    $0x8,%esp
+  800c8f:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c92:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c95:	50                   	push   %eax
+  800c96:	e8 78 fc ff ff       	call   800913 <getuint>
+  800c9b:	83 c4 10             	add    $0x10,%esp
+  800c9e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ca1:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800ca4:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800cab:	eb 5d                	jmp    800d0a <vprintfmt+0x33d>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800cad:	83 ec 08             	sub    $0x8,%esp
+  800cb0:	ff 75 0c             	pushl  0xc(%ebp)
+  800cb3:	6a 30                	push   $0x30
+  800cb5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb8:	ff d0                	call   *%eax
+  800cba:	83 c4 10             	add    $0x10,%esp
+            putch('x', putdat);
+  800cbd:	83 ec 08             	sub    $0x8,%esp
+  800cc0:	ff 75 0c             	pushl  0xc(%ebp)
+  800cc3:	6a 78                	push   $0x78
+  800cc5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cc8:	ff d0                	call   *%eax
+  800cca:	83 c4 10             	add    $0x10,%esp
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800ccd:	8b 45 14             	mov    0x14(%ebp),%eax
+  800cd0:	8d 50 04             	lea    0x4(%eax),%edx
+  800cd3:	89 55 14             	mov    %edx,0x14(%ebp)
+  800cd6:	8b 00                	mov    (%eax),%eax
+  800cd8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cdb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800ce2:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800ce9:	eb 1f                	jmp    800d0a <vprintfmt+0x33d>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800ceb:	83 ec 08             	sub    $0x8,%esp
+  800cee:	ff 75 e0             	pushl  -0x20(%ebp)
+  800cf1:	8d 45 14             	lea    0x14(%ebp),%eax
+  800cf4:	50                   	push   %eax
+  800cf5:	e8 19 fc ff ff       	call   800913 <getuint>
+  800cfa:	83 c4 10             	add    $0x10,%esp
+  800cfd:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d00:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d03:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d0a:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d11:	83 ec 04             	sub    $0x4,%esp
+  800d14:	52                   	push   %edx
+  800d15:	ff 75 e8             	pushl  -0x18(%ebp)
+  800d18:	50                   	push   %eax
+  800d19:	ff 75 f4             	pushl  -0xc(%ebp)
+  800d1c:	ff 75 f0             	pushl  -0x10(%ebp)
+  800d1f:	ff 75 0c             	pushl  0xc(%ebp)
+  800d22:	ff 75 08             	pushl  0x8(%ebp)
+  800d25:	e8 f8 fa ff ff       	call   800822 <printnum>
+  800d2a:	83 c4 20             	add    $0x20,%esp
+            break;
+  800d2d:	eb 39                	jmp    800d68 <vprintfmt+0x39b>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800d2f:	83 ec 08             	sub    $0x8,%esp
+  800d32:	ff 75 0c             	pushl  0xc(%ebp)
+  800d35:	53                   	push   %ebx
+  800d36:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d39:	ff d0                	call   *%eax
+  800d3b:	83 c4 10             	add    $0x10,%esp
+            break;
+  800d3e:	eb 28                	jmp    800d68 <vprintfmt+0x39b>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800d40:	83 ec 08             	sub    $0x8,%esp
+  800d43:	ff 75 0c             	pushl  0xc(%ebp)
+  800d46:	6a 25                	push   $0x25
+  800d48:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d4b:	ff d0                	call   *%eax
+  800d4d:	83 c4 10             	add    $0x10,%esp
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800d50:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d54:	eb 04                	jmp    800d5a <vprintfmt+0x38d>
+  800d56:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d5a:	8b 45 10             	mov    0x10(%ebp),%eax
+  800d5d:	83 e8 01             	sub    $0x1,%eax
+  800d60:	0f b6 00             	movzbl (%eax),%eax
+  800d63:	3c 25                	cmp    $0x25,%al
+  800d65:	75 ef                	jne    800d56 <vprintfmt+0x389>
+                /* do nothing */;
+            break;
+  800d67:	90                   	nop
+        }
+    }
+  800d68:	e9 68 fc ff ff       	jmp    8009d5 <vprintfmt+0x8>
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+            if (ch == '\0') {
+                return;
+  800d6d:	90                   	nop
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  800d6e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  800d71:	5b                   	pop    %ebx
+  800d72:	5e                   	pop    %esi
+  800d73:	5d                   	pop    %ebp
+  800d74:	c3                   	ret    
+
+00800d75 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800d75:	55                   	push   %ebp
+  800d76:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800d78:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d7b:	8b 40 08             	mov    0x8(%eax),%eax
+  800d7e:	8d 50 01             	lea    0x1(%eax),%edx
+  800d81:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d84:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800d87:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d8a:	8b 10                	mov    (%eax),%edx
+  800d8c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d8f:	8b 40 04             	mov    0x4(%eax),%eax
+  800d92:	39 c2                	cmp    %eax,%edx
+  800d94:	73 12                	jae    800da8 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800d96:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d99:	8b 00                	mov    (%eax),%eax
+  800d9b:	8d 48 01             	lea    0x1(%eax),%ecx
+  800d9e:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800da1:	89 0a                	mov    %ecx,(%edx)
+  800da3:	8b 55 08             	mov    0x8(%ebp),%edx
+  800da6:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800da8:	90                   	nop
+  800da9:	5d                   	pop    %ebp
+  800daa:	c3                   	ret    
+
+00800dab <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800dab:	55                   	push   %ebp
+  800dac:	89 e5                	mov    %esp,%ebp
+  800dae:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800db1:	8d 45 14             	lea    0x14(%ebp),%eax
+  800db4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800db7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800dba:	50                   	push   %eax
+  800dbb:	ff 75 10             	pushl  0x10(%ebp)
+  800dbe:	ff 75 0c             	pushl  0xc(%ebp)
+  800dc1:	ff 75 08             	pushl  0x8(%ebp)
+  800dc4:	e8 0b 00 00 00       	call   800dd4 <vsnprintf>
+  800dc9:	83 c4 10             	add    $0x10,%esp
+  800dcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800dcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800dd2:	c9                   	leave  
+  800dd3:	c3                   	ret    
+
+00800dd4 <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800dd4:	55                   	push   %ebp
+  800dd5:	89 e5                	mov    %esp,%ebp
+  800dd7:	83 ec 18             	sub    $0x18,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800dda:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ddd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800de0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800de3:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800de6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de9:	01 d0                	add    %edx,%eax
+  800deb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800dee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800df5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800df9:	74 0a                	je     800e05 <vsnprintf+0x31>
+  800dfb:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800dfe:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e01:	39 c2                	cmp    %eax,%edx
+  800e03:	76 07                	jbe    800e0c <vsnprintf+0x38>
+        return -E_INVAL;
+  800e05:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e0a:	eb 20                	jmp    800e2c <vsnprintf+0x58>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e0c:	ff 75 14             	pushl  0x14(%ebp)
+  800e0f:	ff 75 10             	pushl  0x10(%ebp)
+  800e12:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800e15:	50                   	push   %eax
+  800e16:	68 75 0d 80 00       	push   $0x800d75
+  800e1b:	e8 ad fb ff ff       	call   8009cd <vprintfmt>
+  800e20:	83 c4 10             	add    $0x10,%esp
+    // null terminate the buffer
+    *b.buf = '\0';
+  800e23:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e26:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800e29:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e2c:	c9                   	leave  
+  800e2d:	c3                   	ret    
+
+00800e2e <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800e2e:	55                   	push   %ebp
+  800e2f:	89 e5                	mov    %esp,%ebp
+  800e31:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800e34:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e37:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800e3d:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800e40:	b8 20 00 00 00       	mov    $0x20,%eax
+  800e45:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800e48:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800e4b:	89 c1                	mov    %eax,%ecx
+  800e4d:	d3 ea                	shr    %cl,%edx
+  800e4f:	89 d0                	mov    %edx,%eax
+}
+  800e51:	c9                   	leave  
+  800e52:	c3                   	ret    
+
+00800e53 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800e53:	55                   	push   %ebp
+  800e54:	89 e5                	mov    %esp,%ebp
+  800e56:	57                   	push   %edi
+  800e57:	56                   	push   %esi
+  800e58:	53                   	push   %ebx
+  800e59:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800e5c:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e61:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800e67:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800e6d:	6b f0 05             	imul   $0x5,%eax,%esi
+  800e70:	01 fe                	add    %edi,%esi
+  800e72:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800e77:	f7 e7                	mul    %edi
+  800e79:	01 d6                	add    %edx,%esi
+  800e7b:	89 f2                	mov    %esi,%edx
+  800e7d:	83 c0 0b             	add    $0xb,%eax
+  800e80:	83 d2 00             	adc    $0x0,%edx
+  800e83:	89 c7                	mov    %eax,%edi
+  800e85:	83 e7 ff             	and    $0xffffffff,%edi
+  800e88:	89 f9                	mov    %edi,%ecx
+  800e8a:	0f b7 da             	movzwl %dx,%ebx
+  800e8d:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800e93:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800e99:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e9e:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ea4:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ea8:	c1 ea 0c             	shr    $0xc,%edx
+  800eab:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800eae:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800eb1:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800eb8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ebb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ebe:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ec1:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800ec4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec7:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800eca:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ece:	74 1c                	je     800eec <rand+0x99>
+  800ed0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ed3:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ed8:	f7 75 dc             	divl   -0x24(%ebp)
+  800edb:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800ede:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ee1:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ee6:	f7 75 dc             	divl   -0x24(%ebp)
+  800ee9:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800eec:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800eef:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800ef2:	f7 75 dc             	divl   -0x24(%ebp)
+  800ef5:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ef8:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800efb:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800efe:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800f01:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f04:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f07:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800f0a:	83 c4 24             	add    $0x24,%esp
+  800f0d:	5b                   	pop    %ebx
+  800f0e:	5e                   	pop    %esi
+  800f0f:	5f                   	pop    %edi
+  800f10:	5d                   	pop    %ebp
+  800f11:	c3                   	ret    
+
+00800f12 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800f12:	55                   	push   %ebp
+  800f13:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800f15:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f18:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f1d:	a3 00 20 80 00       	mov    %eax,0x802000
+  800f22:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800f28:	90                   	nop
+  800f29:	5d                   	pop    %ebp
+  800f2a:	c3                   	ret    
+
+00800f2b <main>:
+#define ARRAYSIZE (1024*1024)
+
+uint32_t bigarray[ARRAYSIZE];
+
+int
+main(void) {
+  800f2b:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  800f2f:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f32:	ff 71 fc             	pushl  -0x4(%ecx)
+  800f35:	55                   	push   %ebp
+  800f36:	89 e5                	mov    %esp,%ebp
+  800f38:	51                   	push   %ecx
+  800f39:	83 ec 14             	sub    $0x14,%esp
+    cprintf("Making sure bss works right...\n");
+  800f3c:	83 ec 0c             	sub    $0xc,%esp
+  800f3f:	68 20 13 80 00       	push   $0x801320
+  800f44:	e8 90 f3 ff ff       	call   8002d9 <cprintf>
+  800f49:	83 c4 10             	add    $0x10,%esp
+    int i;
+    for (i = 0; i < ARRAYSIZE; i ++) {
+  800f4c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  800f53:	eb 26                	jmp    800f7b <main+0x50>
+        if (bigarray[i] != 0) {
+  800f55:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800f58:	8b 04 85 20 20 80 00 	mov    0x802020(,%eax,4),%eax
+  800f5f:	85 c0                	test   %eax,%eax
+  800f61:	74 14                	je     800f77 <main+0x4c>
+            panic("bigarray[%d] isn't cleared!\n", i);
+  800f63:	ff 75 f4             	pushl  -0xc(%ebp)
+  800f66:	68 40 13 80 00       	push   $0x801340
+  800f6b:	6a 0e                	push   $0xe
+  800f6d:	68 5d 13 80 00       	push   $0x80135d
+  800f72:	e8 a9 f0 ff ff       	call   800020 <__panic>
+
+int
+main(void) {
+    cprintf("Making sure bss works right...\n");
+    int i;
+    for (i = 0; i < ARRAYSIZE; i ++) {
+  800f77:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  800f7b:	81 7d f4 ff ff 0f 00 	cmpl   $0xfffff,-0xc(%ebp)
+  800f82:	7e d1                	jle    800f55 <main+0x2a>
+        if (bigarray[i] != 0) {
+            panic("bigarray[%d] isn't cleared!\n", i);
+        }
+    }
+    for (i = 0; i < ARRAYSIZE; i ++) {
+  800f84:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  800f8b:	eb 11                	jmp    800f9e <main+0x73>
+        bigarray[i] = i;
+  800f8d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f90:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800f93:	89 14 85 20 20 80 00 	mov    %edx,0x802020(,%eax,4)
+    for (i = 0; i < ARRAYSIZE; i ++) {
+        if (bigarray[i] != 0) {
+            panic("bigarray[%d] isn't cleared!\n", i);
+        }
+    }
+    for (i = 0; i < ARRAYSIZE; i ++) {
+  800f9a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  800f9e:	81 7d f4 ff ff 0f 00 	cmpl   $0xfffff,-0xc(%ebp)
+  800fa5:	7e e6                	jle    800f8d <main+0x62>
+        bigarray[i] = i;
+    }
+    for (i = 0; i < ARRAYSIZE; i ++) {
+  800fa7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  800fae:	eb 29                	jmp    800fd9 <main+0xae>
+        if (bigarray[i] != i) {
+  800fb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800fb3:	8b 14 85 20 20 80 00 	mov    0x802020(,%eax,4),%edx
+  800fba:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800fbd:	39 c2                	cmp    %eax,%edx
+  800fbf:	74 14                	je     800fd5 <main+0xaa>
+            panic("bigarray[%d] didn't hold its value!\n", i);
+  800fc1:	ff 75 f4             	pushl  -0xc(%ebp)
+  800fc4:	68 6c 13 80 00       	push   $0x80136c
+  800fc9:	6a 16                	push   $0x16
+  800fcb:	68 5d 13 80 00       	push   $0x80135d
+  800fd0:	e8 4b f0 ff ff       	call   800020 <__panic>
+        }
+    }
+    for (i = 0; i < ARRAYSIZE; i ++) {
+        bigarray[i] = i;
+    }
+    for (i = 0; i < ARRAYSIZE; i ++) {
+  800fd5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  800fd9:	81 7d f4 ff ff 0f 00 	cmpl   $0xfffff,-0xc(%ebp)
+  800fe0:	7e ce                	jle    800fb0 <main+0x85>
+        if (bigarray[i] != i) {
+            panic("bigarray[%d] didn't hold its value!\n", i);
+        }
+    }
+
+    cprintf("Yes, good.  Now doing a wild write off the end...\n");
+  800fe2:	83 ec 0c             	sub    $0xc,%esp
+  800fe5:	68 94 13 80 00       	push   $0x801394
+  800fea:	e8 ea f2 ff ff       	call   8002d9 <cprintf>
+  800fef:	83 c4 10             	add    $0x10,%esp
+    cprintf("testbss may pass.\n");
+  800ff2:	83 ec 0c             	sub    $0xc,%esp
+  800ff5:	68 c7 13 80 00       	push   $0x8013c7
+  800ffa:	e8 da f2 ff ff       	call   8002d9 <cprintf>
+  800fff:	83 c4 10             	add    $0x10,%esp
+
+    bigarray[ARRAYSIZE + 1024] = 0;
+  801002:	c7 05 20 30 c0 00 00 	movl   $0x0,0xc03020
+  801009:	00 00 00 
+    asm volatile ("int $0x14");
+  80100c:	cd 14                	int    $0x14
+    panic("FAIL: T.T\n");
+  80100e:	83 ec 04             	sub    $0x4,%esp
+  801011:	68 da 13 80 00       	push   $0x8013da
+  801016:	6a 1f                	push   $0x1f
+  801018:	68 5d 13 80 00       	push   $0x80135d
+  80101d:	e8 fe ef ff ff       	call   800020 <__panic>
diff -r -u -P lab6_original/obj/user/testbss.d lab6/obj/user/testbss.d
--- lab6_original/obj/user/testbss.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/testbss.d	2016-04-29 16:22:06.848533461 +0800
@@ -0,0 +1,2 @@
+obj/user/testbss.o obj/user/testbss.d: user/testbss.c libs/stdio.h \
+ libs/defs.h libs/stdarg.h user/libs/ulib.h
Binary files lab6_original/obj/user/testbss.o and lab6/obj/user/testbss.o differ
diff -r -u -P lab6_original/obj/user/testbss.sym lab6/obj/user/testbss.sym
--- lab6_original/obj/user/testbss.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/testbss.sym	2016-04-29 16:22:07.744668820 +0800
@@ -0,0 +1,78 @@
+00800020 .text
+00801040 .rodata
+00802000 .data
+00802020 .bss
+00200000 .stab_info
+00200010 .stab
+00202d95 .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b5 syscall
+00000000 ulib.c
+00000000 stdio.c
+0080028c cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+00801140 error_string
+00800822 printnum
+00800913 getuint
+00800962 getint
+00800d75 sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 testbss.c
+008003be strcpy
+0080021a yield
+00800201 waitpid
+00800141 sys_yield
+008006d7 memmove
+00800dab snprintf
+008009cd vprintfmt
+0080011d sys_fork
+008002d9 cprintf
+0080023e getpid
+0080077a memcpy
+00800266 lab6_set_priority
+00800dd4 vsnprintf
+0080034d umain
+00202d94 __STAB_END__
+00800150 sys_kill
+00202d95 __STABSTR_BEGIN__
+00800020 __panic
+0080053a strtol
+0080038e strnlen
+00802020 bigarray
+0080024b print_pgdir
+00800228 kill
+0080050b strfind
+008001ea wait
+0080027d _start
+00800e53 rand
+00800482 strncmp
+00800171 sys_putc
+008003fe strncpy
+008007ca memcmp
+008001dd fork
+00800697 memset
+00800f2b main
+00800f12 srand
+00800e2e hash32
+008009a9 printfmt
+00203bb5 __STABSTR_END__
+00800438 strcmp
+00800259 gettime_msec
+00800192 sys_gettime
+008002b0 vcprintf
+0080006e __warn
+008002ff cputs
+008001a1 sys_lab6_set_priority
+008001b7 exit
+0080012c sys_wait
+0080010b sys_exit
+00200010 __STAB_BEGIN__
+00800366 strlen
+00800183 sys_pgdir
+008004d8 strchr
+00800162 sys_getpid
diff -r -u -P lab6_original/obj/user/waitkill.asm lab6/obj/user/waitkill.asm
--- lab6_original/obj/user/waitkill.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/waitkill.asm	2016-04-29 16:22:07.712806465 +0800
@@ -0,0 +1,2736 @@
+
+obj/__user_waitkill.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 18             	sub    $0x18,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	83 ec 04             	sub    $0x4,%esp
+  80002f:	ff 75 0c             	pushl  0xc(%ebp)
+  800032:	ff 75 08             	pushl  0x8(%ebp)
+  800035:	68 c0 10 80 00       	push   $0x8010c0
+  80003a:	e8 9a 02 00 00       	call   8002d9 <cprintf>
+  80003f:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800042:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800045:	83 ec 08             	sub    $0x8,%esp
+  800048:	50                   	push   %eax
+  800049:	ff 75 10             	pushl  0x10(%ebp)
+  80004c:	e8 5f 02 00 00       	call   8002b0 <vcprintf>
+  800051:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  800054:	83 ec 0c             	sub    $0xc,%esp
+  800057:	68 da 10 80 00       	push   $0x8010da
+  80005c:	e8 78 02 00 00       	call   8002d9 <cprintf>
+  800061:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	83 ec 0c             	sub    $0xc,%esp
+  800067:	6a f6                	push   $0xfffffff6
+  800069:	e8 49 01 00 00       	call   8001b7 <exit>
+
+0080006e <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80006e:	55                   	push   %ebp
+  80006f:	89 e5                	mov    %esp,%ebp
+  800071:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800074:	8d 45 14             	lea    0x14(%ebp),%eax
+  800077:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007a:	83 ec 04             	sub    $0x4,%esp
+  80007d:	ff 75 0c             	pushl  0xc(%ebp)
+  800080:	ff 75 08             	pushl  0x8(%ebp)
+  800083:	68 dc 10 80 00       	push   $0x8010dc
+  800088:	e8 4c 02 00 00       	call   8002d9 <cprintf>
+  80008d:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800090:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800093:	83 ec 08             	sub    $0x8,%esp
+  800096:	50                   	push   %eax
+  800097:	ff 75 10             	pushl  0x10(%ebp)
+  80009a:	e8 11 02 00 00       	call   8002b0 <vcprintf>
+  80009f:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  8000a2:	83 ec 0c             	sub    $0xc,%esp
+  8000a5:	68 da 10 80 00       	push   $0x8010da
+  8000aa:	e8 2a 02 00 00       	call   8002d9 <cprintf>
+  8000af:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8000b2:	90                   	nop
+  8000b3:	c9                   	leave  
+  8000b4:	c3                   	ret    
+
+008000b5 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b5:	55                   	push   %ebp
+  8000b6:	89 e5                	mov    %esp,%ebp
+  8000b8:	57                   	push   %edi
+  8000b9:	56                   	push   %esi
+  8000ba:	53                   	push   %ebx
+  8000bb:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000be:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cb:	eb 16                	jmp    8000e3 <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8000cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d0:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d3:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d6:	8b 10                	mov    (%eax),%edx
+  8000d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000db:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000df:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8000e3:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e7:	7e e4                	jle    8000cd <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000e9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ec:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000ef:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f2:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f5:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8000f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fb:	cd 80                	int    $0x80
+  8000fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  800100:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800103:	83 c4 20             	add    $0x20,%esp
+  800106:	5b                   	pop    %ebx
+  800107:	5e                   	pop    %esi
+  800108:	5f                   	pop    %edi
+  800109:	5d                   	pop    %ebp
+  80010a:	c3                   	ret    
+
+0080010b <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010b:	55                   	push   %ebp
+  80010c:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_exit, error_code);
+  80010e:	ff 75 08             	pushl  0x8(%ebp)
+  800111:	6a 01                	push   $0x1
+  800113:	e8 9d ff ff ff       	call   8000b5 <syscall>
+  800118:	83 c4 08             	add    $0x8,%esp
+}
+  80011b:	c9                   	leave  
+  80011c:	c3                   	ret    
+
+0080011d <sys_fork>:
+
+int
+sys_fork(void) {
+  80011d:	55                   	push   %ebp
+  80011e:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_fork);
+  800120:	6a 02                	push   $0x2
+  800122:	e8 8e ff ff ff       	call   8000b5 <syscall>
+  800127:	83 c4 04             	add    $0x4,%esp
+}
+  80012a:	c9                   	leave  
+  80012b:	c3                   	ret    
+
+0080012c <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80012c:	55                   	push   %ebp
+  80012d:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_wait, pid, store);
+  80012f:	ff 75 0c             	pushl  0xc(%ebp)
+  800132:	ff 75 08             	pushl  0x8(%ebp)
+  800135:	6a 03                	push   $0x3
+  800137:	e8 79 ff ff ff       	call   8000b5 <syscall>
+  80013c:	83 c4 0c             	add    $0xc,%esp
+}
+  80013f:	c9                   	leave  
+  800140:	c3                   	ret    
+
+00800141 <sys_yield>:
+
+int
+sys_yield(void) {
+  800141:	55                   	push   %ebp
+  800142:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_yield);
+  800144:	6a 0a                	push   $0xa
+  800146:	e8 6a ff ff ff       	call   8000b5 <syscall>
+  80014b:	83 c4 04             	add    $0x4,%esp
+}
+  80014e:	c9                   	leave  
+  80014f:	c3                   	ret    
+
+00800150 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800150:	55                   	push   %ebp
+  800151:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_kill, pid);
+  800153:	ff 75 08             	pushl  0x8(%ebp)
+  800156:	6a 0c                	push   $0xc
+  800158:	e8 58 ff ff ff       	call   8000b5 <syscall>
+  80015d:	83 c4 08             	add    $0x8,%esp
+}
+  800160:	c9                   	leave  
+  800161:	c3                   	ret    
+
+00800162 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800162:	55                   	push   %ebp
+  800163:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_getpid);
+  800165:	6a 12                	push   $0x12
+  800167:	e8 49 ff ff ff       	call   8000b5 <syscall>
+  80016c:	83 c4 04             	add    $0x4,%esp
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_putc, c);
+  800174:	ff 75 08             	pushl  0x8(%ebp)
+  800177:	6a 1e                	push   $0x1e
+  800179:	e8 37 ff ff ff       	call   8000b5 <syscall>
+  80017e:	83 c4 08             	add    $0x8,%esp
+}
+  800181:	c9                   	leave  
+  800182:	c3                   	ret    
+
+00800183 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800183:	55                   	push   %ebp
+  800184:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_pgdir);
+  800186:	6a 1f                	push   $0x1f
+  800188:	e8 28 ff ff ff       	call   8000b5 <syscall>
+  80018d:	83 c4 04             	add    $0x4,%esp
+}
+  800190:	c9                   	leave  
+  800191:	c3                   	ret    
+
+00800192 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  800192:	55                   	push   %ebp
+  800193:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_gettime);
+  800195:	6a 11                	push   $0x11
+  800197:	e8 19 ff ff ff       	call   8000b5 <syscall>
+  80019c:	83 c4 04             	add    $0x4,%esp
+}
+  80019f:	c9                   	leave  
+  8001a0:	c3                   	ret    
+
+008001a1 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001a1:	55                   	push   %ebp
+  8001a2:	89 e5                	mov    %esp,%ebp
+    syscall(SYS_lab6_set_priority, priority);
+  8001a4:	ff 75 08             	pushl  0x8(%ebp)
+  8001a7:	68 ff 00 00 00       	push   $0xff
+  8001ac:	e8 04 ff ff ff       	call   8000b5 <syscall>
+  8001b1:	83 c4 08             	add    $0x8,%esp
+}
+  8001b4:	90                   	nop
+  8001b5:	c9                   	leave  
+  8001b6:	c3                   	ret    
+
+008001b7 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001b7:	55                   	push   %ebp
+  8001b8:	89 e5                	mov    %esp,%ebp
+  8001ba:	83 ec 08             	sub    $0x8,%esp
+    sys_exit(error_code);
+  8001bd:	83 ec 0c             	sub    $0xc,%esp
+  8001c0:	ff 75 08             	pushl  0x8(%ebp)
+  8001c3:	e8 43 ff ff ff       	call   80010b <sys_exit>
+  8001c8:	83 c4 10             	add    $0x10,%esp
+    cprintf("BUG: exit failed.\n");
+  8001cb:	83 ec 0c             	sub    $0xc,%esp
+  8001ce:	68 f8 10 80 00       	push   $0x8010f8
+  8001d3:	e8 01 01 00 00       	call   8002d9 <cprintf>
+  8001d8:	83 c4 10             	add    $0x10,%esp
+    while (1);
+  8001db:	eb fe                	jmp    8001db <exit+0x24>
+
+008001dd <fork>:
+}
+
+int
+fork(void) {
+  8001dd:	55                   	push   %ebp
+  8001de:	89 e5                	mov    %esp,%ebp
+  8001e0:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8001e3:	e8 35 ff ff ff       	call   80011d <sys_fork>
+}
+  8001e8:	c9                   	leave  
+  8001e9:	c3                   	ret    
+
+008001ea <wait>:
+
+int
+wait(void) {
+  8001ea:	55                   	push   %ebp
+  8001eb:	89 e5                	mov    %esp,%ebp
+  8001ed:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(0, NULL);
+  8001f0:	83 ec 08             	sub    $0x8,%esp
+  8001f3:	6a 00                	push   $0x0
+  8001f5:	6a 00                	push   $0x0
+  8001f7:	e8 30 ff ff ff       	call   80012c <sys_wait>
+  8001fc:	83 c4 10             	add    $0x10,%esp
+}
+  8001ff:	c9                   	leave  
+  800200:	c3                   	ret    
+
+00800201 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800201:	55                   	push   %ebp
+  800202:	89 e5                	mov    %esp,%ebp
+  800204:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(pid, store);
+  800207:	83 ec 08             	sub    $0x8,%esp
+  80020a:	ff 75 0c             	pushl  0xc(%ebp)
+  80020d:	ff 75 08             	pushl  0x8(%ebp)
+  800210:	e8 17 ff ff ff       	call   80012c <sys_wait>
+  800215:	83 c4 10             	add    $0x10,%esp
+}
+  800218:	c9                   	leave  
+  800219:	c3                   	ret    
+
+0080021a <yield>:
+
+void
+yield(void) {
+  80021a:	55                   	push   %ebp
+  80021b:	89 e5                	mov    %esp,%ebp
+  80021d:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800220:	e8 1c ff ff ff       	call   800141 <sys_yield>
+}
+  800225:	90                   	nop
+  800226:	c9                   	leave  
+  800227:	c3                   	ret    
+
+00800228 <kill>:
+
+int
+kill(int pid) {
+  800228:	55                   	push   %ebp
+  800229:	89 e5                	mov    %esp,%ebp
+  80022b:	83 ec 08             	sub    $0x8,%esp
+    return sys_kill(pid);
+  80022e:	83 ec 0c             	sub    $0xc,%esp
+  800231:	ff 75 08             	pushl  0x8(%ebp)
+  800234:	e8 17 ff ff ff       	call   800150 <sys_kill>
+  800239:	83 c4 10             	add    $0x10,%esp
+}
+  80023c:	c9                   	leave  
+  80023d:	c3                   	ret    
+
+0080023e <getpid>:
+
+int
+getpid(void) {
+  80023e:	55                   	push   %ebp
+  80023f:	89 e5                	mov    %esp,%ebp
+  800241:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800244:	e8 19 ff ff ff       	call   800162 <sys_getpid>
+}
+  800249:	c9                   	leave  
+  80024a:	c3                   	ret    
+
+0080024b <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80024b:	55                   	push   %ebp
+  80024c:	89 e5                	mov    %esp,%ebp
+  80024e:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800251:	e8 2d ff ff ff       	call   800183 <sys_pgdir>
+}
+  800256:	90                   	nop
+  800257:	c9                   	leave  
+  800258:	c3                   	ret    
+
+00800259 <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  800259:	55                   	push   %ebp
+  80025a:	89 e5                	mov    %esp,%ebp
+  80025c:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  80025f:	e8 2e ff ff ff       	call   800192 <sys_gettime>
+}
+  800264:	c9                   	leave  
+  800265:	c3                   	ret    
+
+00800266 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800266:	55                   	push   %ebp
+  800267:	89 e5                	mov    %esp,%ebp
+  800269:	83 ec 08             	sub    $0x8,%esp
+    sys_lab6_set_priority(priority);
+  80026c:	83 ec 0c             	sub    $0xc,%esp
+  80026f:	ff 75 08             	pushl  0x8(%ebp)
+  800272:	e8 2a ff ff ff       	call   8001a1 <sys_lab6_set_priority>
+  800277:	83 c4 10             	add    $0x10,%esp
+}
+  80027a:	90                   	nop
+  80027b:	c9                   	leave  
+  80027c:	c3                   	ret    
+
+0080027d <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  80027d:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800282:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800285:	e8 c3 00 00 00       	call   80034d <umain>
+1:  jmp 1b
+  80028a:	eb fe                	jmp    80028a <_start+0xd>
+
+0080028c <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  80028c:	55                   	push   %ebp
+  80028d:	89 e5                	mov    %esp,%ebp
+  80028f:	83 ec 08             	sub    $0x8,%esp
+    sys_putc(c);
+  800292:	83 ec 0c             	sub    $0xc,%esp
+  800295:	ff 75 08             	pushl  0x8(%ebp)
+  800298:	e8 d4 fe ff ff       	call   800171 <sys_putc>
+  80029d:	83 c4 10             	add    $0x10,%esp
+    (*cnt) ++;
+  8002a0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002a3:	8b 00                	mov    (%eax),%eax
+  8002a5:	8d 50 01             	lea    0x1(%eax),%edx
+  8002a8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002ab:	89 10                	mov    %edx,(%eax)
+}
+  8002ad:	90                   	nop
+  8002ae:	c9                   	leave  
+  8002af:	c3                   	ret    
+
+008002b0 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002b0:	55                   	push   %ebp
+  8002b1:	89 e5                	mov    %esp,%ebp
+  8002b3:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  8002b6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002bd:	ff 75 0c             	pushl  0xc(%ebp)
+  8002c0:	ff 75 08             	pushl  0x8(%ebp)
+  8002c3:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  8002c6:	50                   	push   %eax
+  8002c7:	68 8c 02 80 00       	push   $0x80028c
+  8002cc:	e8 fc 06 00 00       	call   8009cd <vprintfmt>
+  8002d1:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  8002d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002d7:	c9                   	leave  
+  8002d8:	c3                   	ret    
+
+008002d9 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  8002d9:	55                   	push   %ebp
+  8002da:	89 e5                	mov    %esp,%ebp
+  8002dc:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8002df:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8002e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  8002e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8002e8:	83 ec 08             	sub    $0x8,%esp
+  8002eb:	50                   	push   %eax
+  8002ec:	ff 75 08             	pushl  0x8(%ebp)
+  8002ef:	e8 bc ff ff ff       	call   8002b0 <vcprintf>
+  8002f4:	83 c4 10             	add    $0x10,%esp
+  8002f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  8002fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002fd:	c9                   	leave  
+  8002fe:	c3                   	ret    
+
+008002ff <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  8002ff:	55                   	push   %ebp
+  800300:	89 e5                	mov    %esp,%ebp
+  800302:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  800305:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80030c:	eb 14                	jmp    800322 <cputs+0x23>
+        cputch(c, &cnt);
+  80030e:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800312:	83 ec 08             	sub    $0x8,%esp
+  800315:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800318:	52                   	push   %edx
+  800319:	50                   	push   %eax
+  80031a:	e8 6d ff ff ff       	call   80028c <cputch>
+  80031f:	83 c4 10             	add    $0x10,%esp
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800322:	8b 45 08             	mov    0x8(%ebp),%eax
+  800325:	8d 50 01             	lea    0x1(%eax),%edx
+  800328:	89 55 08             	mov    %edx,0x8(%ebp)
+  80032b:	0f b6 00             	movzbl (%eax),%eax
+  80032e:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800331:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800335:	75 d7                	jne    80030e <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800337:	83 ec 08             	sub    $0x8,%esp
+  80033a:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  80033d:	50                   	push   %eax
+  80033e:	6a 0a                	push   $0xa
+  800340:	e8 47 ff ff ff       	call   80028c <cputch>
+  800345:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  800348:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80034b:	c9                   	leave  
+  80034c:	c3                   	ret    
+
+0080034d <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  80034d:	55                   	push   %ebp
+  80034e:	89 e5                	mov    %esp,%ebp
+  800350:	83 ec 18             	sub    $0x18,%esp
+    int ret = main();
+  800353:	e8 90 0c 00 00       	call   800fe8 <main>
+  800358:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  80035b:	83 ec 0c             	sub    $0xc,%esp
+  80035e:	ff 75 f4             	pushl  -0xc(%ebp)
+  800361:	e8 51 fe ff ff       	call   8001b7 <exit>
+
+00800366 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800366:	55                   	push   %ebp
+  800367:	89 e5                	mov    %esp,%ebp
+  800369:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  80036c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800373:	eb 04                	jmp    800379 <strlen+0x13>
+        cnt ++;
+  800375:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800379:	8b 45 08             	mov    0x8(%ebp),%eax
+  80037c:	8d 50 01             	lea    0x1(%eax),%edx
+  80037f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800382:	0f b6 00             	movzbl (%eax),%eax
+  800385:	84 c0                	test   %al,%al
+  800387:	75 ec                	jne    800375 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800389:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  80038c:	c9                   	leave  
+  80038d:	c3                   	ret    
+
+0080038e <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  80038e:	55                   	push   %ebp
+  80038f:	89 e5                	mov    %esp,%ebp
+  800391:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800394:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  80039b:	eb 04                	jmp    8003a1 <strnlen+0x13>
+        cnt ++;
+  80039d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  8003a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003a4:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003a7:	73 10                	jae    8003b9 <strnlen+0x2b>
+  8003a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003ac:	8d 50 01             	lea    0x1(%eax),%edx
+  8003af:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003b2:	0f b6 00             	movzbl (%eax),%eax
+  8003b5:	84 c0                	test   %al,%al
+  8003b7:	75 e4                	jne    80039d <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003b9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003bc:	c9                   	leave  
+  8003bd:	c3                   	ret    
+
+008003be <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  8003be:	55                   	push   %ebp
+  8003bf:	89 e5                	mov    %esp,%ebp
+  8003c1:	57                   	push   %edi
+  8003c2:	56                   	push   %esi
+  8003c3:	83 ec 20             	sub    $0x20,%esp
+  8003c6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003cc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8003cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  8003d2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003d8:	89 d1                	mov    %edx,%ecx
+  8003da:	89 c2                	mov    %eax,%edx
+  8003dc:	89 ce                	mov    %ecx,%esi
+  8003de:	89 d7                	mov    %edx,%edi
+  8003e0:	ac                   	lods   %ds:(%esi),%al
+  8003e1:	aa                   	stos   %al,%es:(%edi)
+  8003e2:	84 c0                	test   %al,%al
+  8003e4:	75 fa                	jne    8003e0 <strcpy+0x22>
+  8003e6:	89 fa                	mov    %edi,%edx
+  8003e8:	89 f1                	mov    %esi,%ecx
+  8003ea:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8003ed:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8003f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  8003f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  8003f6:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  8003f7:	83 c4 20             	add    $0x20,%esp
+  8003fa:	5e                   	pop    %esi
+  8003fb:	5f                   	pop    %edi
+  8003fc:	5d                   	pop    %ebp
+  8003fd:	c3                   	ret    
+
+008003fe <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  8003fe:	55                   	push   %ebp
+  8003ff:	89 e5                	mov    %esp,%ebp
+  800401:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800404:	8b 45 08             	mov    0x8(%ebp),%eax
+  800407:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  80040a:	eb 21                	jmp    80042d <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  80040c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80040f:	0f b6 10             	movzbl (%eax),%edx
+  800412:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800415:	88 10                	mov    %dl,(%eax)
+  800417:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80041a:	0f b6 00             	movzbl (%eax),%eax
+  80041d:	84 c0                	test   %al,%al
+  80041f:	74 04                	je     800425 <strncpy+0x27>
+            src ++;
+  800421:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800425:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800429:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  80042d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800431:	75 d9                	jne    80040c <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800433:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800436:	c9                   	leave  
+  800437:	c3                   	ret    
+
+00800438 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800438:	55                   	push   %ebp
+  800439:	89 e5                	mov    %esp,%ebp
+  80043b:	57                   	push   %edi
+  80043c:	56                   	push   %esi
+  80043d:	83 ec 20             	sub    $0x20,%esp
+  800440:	8b 45 08             	mov    0x8(%ebp),%eax
+  800443:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800446:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800449:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  80044c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80044f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800452:	89 d1                	mov    %edx,%ecx
+  800454:	89 c2                	mov    %eax,%edx
+  800456:	89 ce                	mov    %ecx,%esi
+  800458:	89 d7                	mov    %edx,%edi
+  80045a:	ac                   	lods   %ds:(%esi),%al
+  80045b:	ae                   	scas   %es:(%edi),%al
+  80045c:	75 08                	jne    800466 <strcmp+0x2e>
+  80045e:	84 c0                	test   %al,%al
+  800460:	75 f8                	jne    80045a <strcmp+0x22>
+  800462:	31 c0                	xor    %eax,%eax
+  800464:	eb 04                	jmp    80046a <strcmp+0x32>
+  800466:	19 c0                	sbb    %eax,%eax
+  800468:	0c 01                	or     $0x1,%al
+  80046a:	89 fa                	mov    %edi,%edx
+  80046c:	89 f1                	mov    %esi,%ecx
+  80046e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800471:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800474:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800477:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  80047a:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  80047b:	83 c4 20             	add    $0x20,%esp
+  80047e:	5e                   	pop    %esi
+  80047f:	5f                   	pop    %edi
+  800480:	5d                   	pop    %ebp
+  800481:	c3                   	ret    
+
+00800482 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800482:	55                   	push   %ebp
+  800483:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800485:	eb 0c                	jmp    800493 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800487:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  80048b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  80048f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800493:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800497:	74 1a                	je     8004b3 <strncmp+0x31>
+  800499:	8b 45 08             	mov    0x8(%ebp),%eax
+  80049c:	0f b6 00             	movzbl (%eax),%eax
+  80049f:	84 c0                	test   %al,%al
+  8004a1:	74 10                	je     8004b3 <strncmp+0x31>
+  8004a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004a6:	0f b6 10             	movzbl (%eax),%edx
+  8004a9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ac:	0f b6 00             	movzbl (%eax),%eax
+  8004af:	38 c2                	cmp    %al,%dl
+  8004b1:	74 d4                	je     800487 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004b3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004b7:	74 18                	je     8004d1 <strncmp+0x4f>
+  8004b9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004bc:	0f b6 00             	movzbl (%eax),%eax
+  8004bf:	0f b6 d0             	movzbl %al,%edx
+  8004c2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004c5:	0f b6 00             	movzbl (%eax),%eax
+  8004c8:	0f b6 c0             	movzbl %al,%eax
+  8004cb:	29 c2                	sub    %eax,%edx
+  8004cd:	89 d0                	mov    %edx,%eax
+  8004cf:	eb 05                	jmp    8004d6 <strncmp+0x54>
+  8004d1:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8004d6:	5d                   	pop    %ebp
+  8004d7:	c3                   	ret    
+
+008004d8 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  8004d8:	55                   	push   %ebp
+  8004d9:	89 e5                	mov    %esp,%ebp
+  8004db:	83 ec 04             	sub    $0x4,%esp
+  8004de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004e1:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  8004e4:	eb 14                	jmp    8004fa <strchr+0x22>
+        if (*s == c) {
+  8004e6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e9:	0f b6 00             	movzbl (%eax),%eax
+  8004ec:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  8004ef:	75 05                	jne    8004f6 <strchr+0x1e>
+            return (char *)s;
+  8004f1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004f4:	eb 13                	jmp    800509 <strchr+0x31>
+        }
+        s ++;
+  8004f6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  8004fa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fd:	0f b6 00             	movzbl (%eax),%eax
+  800500:	84 c0                	test   %al,%al
+  800502:	75 e2                	jne    8004e6 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800504:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800509:	c9                   	leave  
+  80050a:	c3                   	ret    
+
+0080050b <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  80050b:	55                   	push   %ebp
+  80050c:	89 e5                	mov    %esp,%ebp
+  80050e:	83 ec 04             	sub    $0x4,%esp
+  800511:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800514:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800517:	eb 0f                	jmp    800528 <strfind+0x1d>
+        if (*s == c) {
+  800519:	8b 45 08             	mov    0x8(%ebp),%eax
+  80051c:	0f b6 00             	movzbl (%eax),%eax
+  80051f:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800522:	74 10                	je     800534 <strfind+0x29>
+            break;
+        }
+        s ++;
+  800524:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800528:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052b:	0f b6 00             	movzbl (%eax),%eax
+  80052e:	84 c0                	test   %al,%al
+  800530:	75 e7                	jne    800519 <strfind+0xe>
+  800532:	eb 01                	jmp    800535 <strfind+0x2a>
+        if (*s == c) {
+            break;
+  800534:	90                   	nop
+        }
+        s ++;
+    }
+    return (char *)s;
+  800535:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800538:	c9                   	leave  
+  800539:	c3                   	ret    
+
+0080053a <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  80053a:	55                   	push   %ebp
+  80053b:	89 e5                	mov    %esp,%ebp
+  80053d:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800540:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800547:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80054e:	eb 04                	jmp    800554 <strtol+0x1a>
+        s ++;
+  800550:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800554:	8b 45 08             	mov    0x8(%ebp),%eax
+  800557:	0f b6 00             	movzbl (%eax),%eax
+  80055a:	3c 20                	cmp    $0x20,%al
+  80055c:	74 f2                	je     800550 <strtol+0x16>
+  80055e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800561:	0f b6 00             	movzbl (%eax),%eax
+  800564:	3c 09                	cmp    $0x9,%al
+  800566:	74 e8                	je     800550 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800568:	8b 45 08             	mov    0x8(%ebp),%eax
+  80056b:	0f b6 00             	movzbl (%eax),%eax
+  80056e:	3c 2b                	cmp    $0x2b,%al
+  800570:	75 06                	jne    800578 <strtol+0x3e>
+        s ++;
+  800572:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800576:	eb 15                	jmp    80058d <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800578:	8b 45 08             	mov    0x8(%ebp),%eax
+  80057b:	0f b6 00             	movzbl (%eax),%eax
+  80057e:	3c 2d                	cmp    $0x2d,%al
+  800580:	75 0b                	jne    80058d <strtol+0x53>
+        s ++, neg = 1;
+  800582:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800586:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  80058d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800591:	74 06                	je     800599 <strtol+0x5f>
+  800593:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800597:	75 24                	jne    8005bd <strtol+0x83>
+  800599:	8b 45 08             	mov    0x8(%ebp),%eax
+  80059c:	0f b6 00             	movzbl (%eax),%eax
+  80059f:	3c 30                	cmp    $0x30,%al
+  8005a1:	75 1a                	jne    8005bd <strtol+0x83>
+  8005a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a6:	83 c0 01             	add    $0x1,%eax
+  8005a9:	0f b6 00             	movzbl (%eax),%eax
+  8005ac:	3c 78                	cmp    $0x78,%al
+  8005ae:	75 0d                	jne    8005bd <strtol+0x83>
+        s += 2, base = 16;
+  8005b0:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005b4:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005bb:	eb 2a                	jmp    8005e7 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005bd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005c1:	75 17                	jne    8005da <strtol+0xa0>
+  8005c3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005c6:	0f b6 00             	movzbl (%eax),%eax
+  8005c9:	3c 30                	cmp    $0x30,%al
+  8005cb:	75 0d                	jne    8005da <strtol+0xa0>
+        s ++, base = 8;
+  8005cd:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005d1:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  8005d8:	eb 0d                	jmp    8005e7 <strtol+0xad>
+    }
+    else if (base == 0) {
+  8005da:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005de:	75 07                	jne    8005e7 <strtol+0xad>
+        base = 10;
+  8005e0:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  8005e7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ea:	0f b6 00             	movzbl (%eax),%eax
+  8005ed:	3c 2f                	cmp    $0x2f,%al
+  8005ef:	7e 1b                	jle    80060c <strtol+0xd2>
+  8005f1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005f4:	0f b6 00             	movzbl (%eax),%eax
+  8005f7:	3c 39                	cmp    $0x39,%al
+  8005f9:	7f 11                	jg     80060c <strtol+0xd2>
+            dig = *s - '0';
+  8005fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005fe:	0f b6 00             	movzbl (%eax),%eax
+  800601:	0f be c0             	movsbl %al,%eax
+  800604:	83 e8 30             	sub    $0x30,%eax
+  800607:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80060a:	eb 48                	jmp    800654 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  80060c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80060f:	0f b6 00             	movzbl (%eax),%eax
+  800612:	3c 60                	cmp    $0x60,%al
+  800614:	7e 1b                	jle    800631 <strtol+0xf7>
+  800616:	8b 45 08             	mov    0x8(%ebp),%eax
+  800619:	0f b6 00             	movzbl (%eax),%eax
+  80061c:	3c 7a                	cmp    $0x7a,%al
+  80061e:	7f 11                	jg     800631 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800620:	8b 45 08             	mov    0x8(%ebp),%eax
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	0f be c0             	movsbl %al,%eax
+  800629:	83 e8 57             	sub    $0x57,%eax
+  80062c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80062f:	eb 23                	jmp    800654 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800631:	8b 45 08             	mov    0x8(%ebp),%eax
+  800634:	0f b6 00             	movzbl (%eax),%eax
+  800637:	3c 40                	cmp    $0x40,%al
+  800639:	7e 3c                	jle    800677 <strtol+0x13d>
+  80063b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80063e:	0f b6 00             	movzbl (%eax),%eax
+  800641:	3c 5a                	cmp    $0x5a,%al
+  800643:	7f 32                	jg     800677 <strtol+0x13d>
+            dig = *s - 'A' + 10;
+  800645:	8b 45 08             	mov    0x8(%ebp),%eax
+  800648:	0f b6 00             	movzbl (%eax),%eax
+  80064b:	0f be c0             	movsbl %al,%eax
+  80064e:	83 e8 37             	sub    $0x37,%eax
+  800651:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800654:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800657:	3b 45 10             	cmp    0x10(%ebp),%eax
+  80065a:	7d 1a                	jge    800676 <strtol+0x13c>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  80065c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800660:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800663:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800667:	89 c2                	mov    %eax,%edx
+  800669:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80066c:	01 d0                	add    %edx,%eax
+  80066e:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800671:	e9 71 ff ff ff       	jmp    8005e7 <strtol+0xad>
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+            break;
+  800676:	90                   	nop
+        }
+        s ++, val = (val * base) + dig;
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  800677:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80067b:	74 08                	je     800685 <strtol+0x14b>
+        *endptr = (char *) s;
+  80067d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800680:	8b 55 08             	mov    0x8(%ebp),%edx
+  800683:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800685:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800689:	74 07                	je     800692 <strtol+0x158>
+  80068b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80068e:	f7 d8                	neg    %eax
+  800690:	eb 03                	jmp    800695 <strtol+0x15b>
+  800692:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800695:	c9                   	leave  
+  800696:	c3                   	ret    
+
+00800697 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800697:	55                   	push   %ebp
+  800698:	89 e5                	mov    %esp,%ebp
+  80069a:	57                   	push   %edi
+  80069b:	83 ec 24             	sub    $0x24,%esp
+  80069e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006a1:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006a4:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006a8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006ab:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006ae:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006b1:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006b7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006ba:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006be:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006c1:	89 d7                	mov    %edx,%edi
+  8006c3:	f3 aa                	rep stos %al,%es:(%edi)
+  8006c5:	89 fa                	mov    %edi,%edx
+  8006c7:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8006ca:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  8006cd:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006d0:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  8006d1:	83 c4 24             	add    $0x24,%esp
+  8006d4:	5f                   	pop    %edi
+  8006d5:	5d                   	pop    %ebp
+  8006d6:	c3                   	ret    
+
+008006d7 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  8006d7:	55                   	push   %ebp
+  8006d8:	89 e5                	mov    %esp,%ebp
+  8006da:	57                   	push   %edi
+  8006db:	56                   	push   %esi
+  8006dc:	53                   	push   %ebx
+  8006dd:	83 ec 30             	sub    $0x30,%esp
+  8006e0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8006e6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006e9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8006ec:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006ef:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  8006f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8006f5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  8006f8:	73 42                	jae    80073c <memmove+0x65>
+  8006fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8006fd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800700:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800703:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800706:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800709:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  80070c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  80070f:	c1 e8 02             	shr    $0x2,%eax
+  800712:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800714:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800717:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80071a:	89 d7                	mov    %edx,%edi
+  80071c:	89 c6                	mov    %eax,%esi
+  80071e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800720:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800723:	83 e1 03             	and    $0x3,%ecx
+  800726:	74 02                	je     80072a <memmove+0x53>
+  800728:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  80072a:	89 f0                	mov    %esi,%eax
+  80072c:	89 fa                	mov    %edi,%edx
+  80072e:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800731:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800734:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800737:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  80073a:	eb 36                	jmp    800772 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  80073c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80073f:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800742:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800745:	01 c2                	add    %eax,%edx
+  800747:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80074a:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  80074d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800750:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800753:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800756:	89 c1                	mov    %eax,%ecx
+  800758:	89 d8                	mov    %ebx,%eax
+  80075a:	89 d6                	mov    %edx,%esi
+  80075c:	89 c7                	mov    %eax,%edi
+  80075e:	fd                   	std    
+  80075f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800761:	fc                   	cld    
+  800762:	89 f8                	mov    %edi,%eax
+  800764:	89 f2                	mov    %esi,%edx
+  800766:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800769:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  80076c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  80076f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800772:	83 c4 30             	add    $0x30,%esp
+  800775:	5b                   	pop    %ebx
+  800776:	5e                   	pop    %esi
+  800777:	5f                   	pop    %edi
+  800778:	5d                   	pop    %ebp
+  800779:	c3                   	ret    
+
+0080077a <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  80077a:	55                   	push   %ebp
+  80077b:	89 e5                	mov    %esp,%ebp
+  80077d:	57                   	push   %edi
+  80077e:	56                   	push   %esi
+  80077f:	83 ec 20             	sub    $0x20,%esp
+  800782:	8b 45 08             	mov    0x8(%ebp),%eax
+  800785:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800788:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80078b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80078e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800791:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800794:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800797:	c1 e8 02             	shr    $0x2,%eax
+  80079a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  80079c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80079f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007a2:	89 d7                	mov    %edx,%edi
+  8007a4:	89 c6                	mov    %eax,%esi
+  8007a6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007a8:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007ab:	83 e1 03             	and    $0x3,%ecx
+  8007ae:	74 02                	je     8007b2 <memcpy+0x38>
+  8007b0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007b2:	89 f0                	mov    %esi,%eax
+  8007b4:	89 fa                	mov    %edi,%edx
+  8007b6:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007b9:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007bc:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  8007bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007c2:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007c3:	83 c4 20             	add    $0x20,%esp
+  8007c6:	5e                   	pop    %esi
+  8007c7:	5f                   	pop    %edi
+  8007c8:	5d                   	pop    %ebp
+  8007c9:	c3                   	ret    
+
+008007ca <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  8007ca:	55                   	push   %ebp
+  8007cb:	89 e5                	mov    %esp,%ebp
+  8007cd:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  8007d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007d3:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  8007d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007d9:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  8007dc:	eb 30                	jmp    80080e <memcmp+0x44>
+        if (*s1 != *s2) {
+  8007de:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8007e1:	0f b6 10             	movzbl (%eax),%edx
+  8007e4:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8007e7:	0f b6 00             	movzbl (%eax),%eax
+  8007ea:	38 c2                	cmp    %al,%dl
+  8007ec:	74 18                	je     800806 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8007ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8007f1:	0f b6 00             	movzbl (%eax),%eax
+  8007f4:	0f b6 d0             	movzbl %al,%edx
+  8007f7:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8007fa:	0f b6 00             	movzbl (%eax),%eax
+  8007fd:	0f b6 c0             	movzbl %al,%eax
+  800800:	29 c2                	sub    %eax,%edx
+  800802:	89 d0                	mov    %edx,%eax
+  800804:	eb 1a                	jmp    800820 <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800806:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  80080a:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  80080e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800811:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800814:	89 55 10             	mov    %edx,0x10(%ebp)
+  800817:	85 c0                	test   %eax,%eax
+  800819:	75 c3                	jne    8007de <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  80081b:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800820:	c9                   	leave  
+  800821:	c3                   	ret    
+
+00800822 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800822:	55                   	push   %ebp
+  800823:	89 e5                	mov    %esp,%ebp
+  800825:	83 ec 38             	sub    $0x38,%esp
+  800828:	8b 45 10             	mov    0x10(%ebp),%eax
+  80082b:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  80082e:	8b 45 14             	mov    0x14(%ebp),%eax
+  800831:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  800834:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800837:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  80083a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80083d:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800840:	8b 45 18             	mov    0x18(%ebp),%eax
+  800843:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800846:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800849:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80084c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80084f:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  800852:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800855:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800858:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  80085c:	74 1c                	je     80087a <printnum+0x58>
+  80085e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800861:	ba 00 00 00 00       	mov    $0x0,%edx
+  800866:	f7 75 e4             	divl   -0x1c(%ebp)
+  800869:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  80086c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80086f:	ba 00 00 00 00       	mov    $0x0,%edx
+  800874:	f7 75 e4             	divl   -0x1c(%ebp)
+  800877:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80087a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80087d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800880:	f7 75 e4             	divl   -0x1c(%ebp)
+  800883:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800886:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800889:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80088c:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80088f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800892:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800895:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800898:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  80089b:	8b 45 18             	mov    0x18(%ebp),%eax
+  80089e:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008a3:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008a6:	77 41                	ja     8008e9 <printnum+0xc7>
+  8008a8:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008ab:	72 05                	jb     8008b2 <printnum+0x90>
+  8008ad:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  8008b0:	77 37                	ja     8008e9 <printnum+0xc7>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008b2:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008b5:	83 e8 01             	sub    $0x1,%eax
+  8008b8:	83 ec 04             	sub    $0x4,%esp
+  8008bb:	ff 75 20             	pushl  0x20(%ebp)
+  8008be:	50                   	push   %eax
+  8008bf:	ff 75 18             	pushl  0x18(%ebp)
+  8008c2:	ff 75 ec             	pushl  -0x14(%ebp)
+  8008c5:	ff 75 e8             	pushl  -0x18(%ebp)
+  8008c8:	ff 75 0c             	pushl  0xc(%ebp)
+  8008cb:	ff 75 08             	pushl  0x8(%ebp)
+  8008ce:	e8 4f ff ff ff       	call   800822 <printnum>
+  8008d3:	83 c4 20             	add    $0x20,%esp
+  8008d6:	eb 1b                	jmp    8008f3 <printnum+0xd1>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  8008d8:	83 ec 08             	sub    $0x8,%esp
+  8008db:	ff 75 0c             	pushl  0xc(%ebp)
+  8008de:	ff 75 20             	pushl  0x20(%ebp)
+  8008e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008e4:	ff d0                	call   *%eax
+  8008e6:	83 c4 10             	add    $0x10,%esp
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8008e9:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8008ed:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8008f1:	7f e5                	jg     8008d8 <printnum+0xb6>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8008f3:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8008f6:	05 24 12 80 00       	add    $0x801224,%eax
+  8008fb:	0f b6 00             	movzbl (%eax),%eax
+  8008fe:	0f be c0             	movsbl %al,%eax
+  800901:	83 ec 08             	sub    $0x8,%esp
+  800904:	ff 75 0c             	pushl  0xc(%ebp)
+  800907:	50                   	push   %eax
+  800908:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090b:	ff d0                	call   *%eax
+  80090d:	83 c4 10             	add    $0x10,%esp
+}
+  800910:	90                   	nop
+  800911:	c9                   	leave  
+  800912:	c3                   	ret    
+
+00800913 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800913:	55                   	push   %ebp
+  800914:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800916:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80091a:	7e 14                	jle    800930 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80091c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80091f:	8b 00                	mov    (%eax),%eax
+  800921:	8d 48 08             	lea    0x8(%eax),%ecx
+  800924:	8b 55 08             	mov    0x8(%ebp),%edx
+  800927:	89 0a                	mov    %ecx,(%edx)
+  800929:	8b 50 04             	mov    0x4(%eax),%edx
+  80092c:	8b 00                	mov    (%eax),%eax
+  80092e:	eb 30                	jmp    800960 <getuint+0x4d>
+    }
+    else if (lflag) {
+  800930:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800934:	74 16                	je     80094c <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800936:	8b 45 08             	mov    0x8(%ebp),%eax
+  800939:	8b 00                	mov    (%eax),%eax
+  80093b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80093e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800941:	89 0a                	mov    %ecx,(%edx)
+  800943:	8b 00                	mov    (%eax),%eax
+  800945:	ba 00 00 00 00       	mov    $0x0,%edx
+  80094a:	eb 14                	jmp    800960 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80094c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80094f:	8b 00                	mov    (%eax),%eax
+  800951:	8d 48 04             	lea    0x4(%eax),%ecx
+  800954:	8b 55 08             	mov    0x8(%ebp),%edx
+  800957:	89 0a                	mov    %ecx,(%edx)
+  800959:	8b 00                	mov    (%eax),%eax
+  80095b:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800960:	5d                   	pop    %ebp
+  800961:	c3                   	ret    
+
+00800962 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800962:	55                   	push   %ebp
+  800963:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800965:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800969:	7e 14                	jle    80097f <getint+0x1d>
+        return va_arg(*ap, long long);
+  80096b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80096e:	8b 00                	mov    (%eax),%eax
+  800970:	8d 48 08             	lea    0x8(%eax),%ecx
+  800973:	8b 55 08             	mov    0x8(%ebp),%edx
+  800976:	89 0a                	mov    %ecx,(%edx)
+  800978:	8b 50 04             	mov    0x4(%eax),%edx
+  80097b:	8b 00                	mov    (%eax),%eax
+  80097d:	eb 28                	jmp    8009a7 <getint+0x45>
+    }
+    else if (lflag) {
+  80097f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800983:	74 12                	je     800997 <getint+0x35>
+        return va_arg(*ap, long);
+  800985:	8b 45 08             	mov    0x8(%ebp),%eax
+  800988:	8b 00                	mov    (%eax),%eax
+  80098a:	8d 48 04             	lea    0x4(%eax),%ecx
+  80098d:	8b 55 08             	mov    0x8(%ebp),%edx
+  800990:	89 0a                	mov    %ecx,(%edx)
+  800992:	8b 00                	mov    (%eax),%eax
+  800994:	99                   	cltd   
+  800995:	eb 10                	jmp    8009a7 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800997:	8b 45 08             	mov    0x8(%ebp),%eax
+  80099a:	8b 00                	mov    (%eax),%eax
+  80099c:	8d 48 04             	lea    0x4(%eax),%ecx
+  80099f:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009a2:	89 0a                	mov    %ecx,(%edx)
+  8009a4:	8b 00                	mov    (%eax),%eax
+  8009a6:	99                   	cltd   
+    }
+}
+  8009a7:	5d                   	pop    %ebp
+  8009a8:	c3                   	ret    
+
+008009a9 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009a9:	55                   	push   %ebp
+  8009aa:	89 e5                	mov    %esp,%ebp
+  8009ac:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009af:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8009b8:	50                   	push   %eax
+  8009b9:	ff 75 10             	pushl  0x10(%ebp)
+  8009bc:	ff 75 0c             	pushl  0xc(%ebp)
+  8009bf:	ff 75 08             	pushl  0x8(%ebp)
+  8009c2:	e8 06 00 00 00       	call   8009cd <vprintfmt>
+  8009c7:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8009ca:	90                   	nop
+  8009cb:	c9                   	leave  
+  8009cc:	c3                   	ret    
+
+008009cd <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8009cd:	55                   	push   %ebp
+  8009ce:	89 e5                	mov    %esp,%ebp
+  8009d0:	56                   	push   %esi
+  8009d1:	53                   	push   %ebx
+  8009d2:	83 ec 20             	sub    $0x20,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009d5:	eb 17                	jmp    8009ee <vprintfmt+0x21>
+            if (ch == '\0') {
+  8009d7:	85 db                	test   %ebx,%ebx
+  8009d9:	0f 84 8e 03 00 00    	je     800d6d <vprintfmt+0x3a0>
+                return;
+            }
+            putch(ch, putdat);
+  8009df:	83 ec 08             	sub    $0x8,%esp
+  8009e2:	ff 75 0c             	pushl  0xc(%ebp)
+  8009e5:	53                   	push   %ebx
+  8009e6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009e9:	ff d0                	call   *%eax
+  8009eb:	83 c4 10             	add    $0x10,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009ee:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009f1:	8d 50 01             	lea    0x1(%eax),%edx
+  8009f4:	89 55 10             	mov    %edx,0x10(%ebp)
+  8009f7:	0f b6 00             	movzbl (%eax),%eax
+  8009fa:	0f b6 d8             	movzbl %al,%ebx
+  8009fd:	83 fb 25             	cmp    $0x25,%ebx
+  800a00:	75 d5                	jne    8009d7 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a02:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a06:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a10:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a13:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a1a:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a1d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a20:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a23:	8d 50 01             	lea    0x1(%eax),%edx
+  800a26:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a29:	0f b6 00             	movzbl (%eax),%eax
+  800a2c:	0f b6 d8             	movzbl %al,%ebx
+  800a2f:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a32:	83 f8 55             	cmp    $0x55,%eax
+  800a35:	0f 87 05 03 00 00    	ja     800d40 <vprintfmt+0x373>
+  800a3b:	8b 04 85 48 12 80 00 	mov    0x801248(,%eax,4),%eax
+  800a42:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a44:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a48:	eb d6                	jmp    800a20 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a4a:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800a4e:	eb d0                	jmp    800a20 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a50:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800a57:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a5a:	89 d0                	mov    %edx,%eax
+  800a5c:	c1 e0 02             	shl    $0x2,%eax
+  800a5f:	01 d0                	add    %edx,%eax
+  800a61:	01 c0                	add    %eax,%eax
+  800a63:	01 d8                	add    %ebx,%eax
+  800a65:	83 e8 30             	sub    $0x30,%eax
+  800a68:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800a6b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a6e:	0f b6 00             	movzbl (%eax),%eax
+  800a71:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800a74:	83 fb 2f             	cmp    $0x2f,%ebx
+  800a77:	7e 39                	jle    800ab2 <vprintfmt+0xe5>
+  800a79:	83 fb 39             	cmp    $0x39,%ebx
+  800a7c:	7f 34                	jg     800ab2 <vprintfmt+0xe5>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a7e:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  800a82:	eb d3                	jmp    800a57 <vprintfmt+0x8a>
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800a84:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a87:	8d 50 04             	lea    0x4(%eax),%edx
+  800a8a:	89 55 14             	mov    %edx,0x14(%ebp)
+  800a8d:	8b 00                	mov    (%eax),%eax
+  800a8f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800a92:	eb 1f                	jmp    800ab3 <vprintfmt+0xe6>
+
+        case '.':
+            if (width < 0)
+  800a94:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800a98:	79 86                	jns    800a20 <vprintfmt+0x53>
+                width = 0;
+  800a9a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800aa1:	e9 7a ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800aa6:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800aad:	e9 6e ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+            goto process_precision;
+  800ab2:	90                   	nop
+        case '#':
+            altflag = 1;
+            goto reswitch;
+
+        process_precision:
+            if (width < 0)
+  800ab3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ab7:	0f 89 63 ff ff ff    	jns    800a20 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800abd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ac0:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800ac3:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800aca:	e9 51 ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800acf:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800ad3:	e9 48 ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800ad8:	8b 45 14             	mov    0x14(%ebp),%eax
+  800adb:	8d 50 04             	lea    0x4(%eax),%edx
+  800ade:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ae1:	8b 00                	mov    (%eax),%eax
+  800ae3:	83 ec 08             	sub    $0x8,%esp
+  800ae6:	ff 75 0c             	pushl  0xc(%ebp)
+  800ae9:	50                   	push   %eax
+  800aea:	8b 45 08             	mov    0x8(%ebp),%eax
+  800aed:	ff d0                	call   *%eax
+  800aef:	83 c4 10             	add    $0x10,%esp
+            break;
+  800af2:	e9 71 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800af7:	8b 45 14             	mov    0x14(%ebp),%eax
+  800afa:	8d 50 04             	lea    0x4(%eax),%edx
+  800afd:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b00:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b02:	85 db                	test   %ebx,%ebx
+  800b04:	79 02                	jns    800b08 <vprintfmt+0x13b>
+                err = -err;
+  800b06:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b08:	83 fb 18             	cmp    $0x18,%ebx
+  800b0b:	7f 0b                	jg     800b18 <vprintfmt+0x14b>
+  800b0d:	8b 34 9d c0 11 80 00 	mov    0x8011c0(,%ebx,4),%esi
+  800b14:	85 f6                	test   %esi,%esi
+  800b16:	75 19                	jne    800b31 <vprintfmt+0x164>
+                printfmt(putch, putdat, "error %d", err);
+  800b18:	53                   	push   %ebx
+  800b19:	68 35 12 80 00       	push   $0x801235
+  800b1e:	ff 75 0c             	pushl  0xc(%ebp)
+  800b21:	ff 75 08             	pushl  0x8(%ebp)
+  800b24:	e8 80 fe ff ff       	call   8009a9 <printfmt>
+  800b29:	83 c4 10             	add    $0x10,%esp
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b2c:	e9 37 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  800b31:	56                   	push   %esi
+  800b32:	68 3e 12 80 00       	push   $0x80123e
+  800b37:	ff 75 0c             	pushl  0xc(%ebp)
+  800b3a:	ff 75 08             	pushl  0x8(%ebp)
+  800b3d:	e8 67 fe ff ff       	call   8009a9 <printfmt>
+  800b42:	83 c4 10             	add    $0x10,%esp
+            }
+            break;
+  800b45:	e9 1e 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800b4a:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b4d:	8d 50 04             	lea    0x4(%eax),%edx
+  800b50:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b53:	8b 30                	mov    (%eax),%esi
+  800b55:	85 f6                	test   %esi,%esi
+  800b57:	75 05                	jne    800b5e <vprintfmt+0x191>
+                p = "(null)";
+  800b59:	be 41 12 80 00       	mov    $0x801241,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800b5e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b62:	7e 76                	jle    800bda <vprintfmt+0x20d>
+  800b64:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800b68:	74 70                	je     800bda <vprintfmt+0x20d>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b6a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b6d:	83 ec 08             	sub    $0x8,%esp
+  800b70:	50                   	push   %eax
+  800b71:	56                   	push   %esi
+  800b72:	e8 17 f8 ff ff       	call   80038e <strnlen>
+  800b77:	83 c4 10             	add    $0x10,%esp
+  800b7a:	89 c2                	mov    %eax,%edx
+  800b7c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800b7f:	29 d0                	sub    %edx,%eax
+  800b81:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b84:	eb 17                	jmp    800b9d <vprintfmt+0x1d0>
+                    putch(padc, putdat);
+  800b86:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800b8a:	83 ec 08             	sub    $0x8,%esp
+  800b8d:	ff 75 0c             	pushl  0xc(%ebp)
+  800b90:	50                   	push   %eax
+  800b91:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b94:	ff d0                	call   *%eax
+  800b96:	83 c4 10             	add    $0x10,%esp
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b99:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800b9d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ba1:	7f e3                	jg     800b86 <vprintfmt+0x1b9>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800ba3:	eb 35                	jmp    800bda <vprintfmt+0x20d>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800ba5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800ba9:	74 1c                	je     800bc7 <vprintfmt+0x1fa>
+  800bab:	83 fb 1f             	cmp    $0x1f,%ebx
+  800bae:	7e 05                	jle    800bb5 <vprintfmt+0x1e8>
+  800bb0:	83 fb 7e             	cmp    $0x7e,%ebx
+  800bb3:	7e 12                	jle    800bc7 <vprintfmt+0x1fa>
+                    putch('?', putdat);
+  800bb5:	83 ec 08             	sub    $0x8,%esp
+  800bb8:	ff 75 0c             	pushl  0xc(%ebp)
+  800bbb:	6a 3f                	push   $0x3f
+  800bbd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bc0:	ff d0                	call   *%eax
+  800bc2:	83 c4 10             	add    $0x10,%esp
+  800bc5:	eb 0f                	jmp    800bd6 <vprintfmt+0x209>
+                }
+                else {
+                    putch(ch, putdat);
+  800bc7:	83 ec 08             	sub    $0x8,%esp
+  800bca:	ff 75 0c             	pushl  0xc(%ebp)
+  800bcd:	53                   	push   %ebx
+  800bce:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bd1:	ff d0                	call   *%eax
+  800bd3:	83 c4 10             	add    $0x10,%esp
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bd6:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800bda:	89 f0                	mov    %esi,%eax
+  800bdc:	8d 70 01             	lea    0x1(%eax),%esi
+  800bdf:	0f b6 00             	movzbl (%eax),%eax
+  800be2:	0f be d8             	movsbl %al,%ebx
+  800be5:	85 db                	test   %ebx,%ebx
+  800be7:	74 26                	je     800c0f <vprintfmt+0x242>
+  800be9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800bed:	78 b6                	js     800ba5 <vprintfmt+0x1d8>
+  800bef:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  800bf3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800bf7:	79 ac                	jns    800ba5 <vprintfmt+0x1d8>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800bf9:	eb 14                	jmp    800c0f <vprintfmt+0x242>
+                putch(' ', putdat);
+  800bfb:	83 ec 08             	sub    $0x8,%esp
+  800bfe:	ff 75 0c             	pushl  0xc(%ebp)
+  800c01:	6a 20                	push   $0x20
+  800c03:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c06:	ff d0                	call   *%eax
+  800c08:	83 c4 10             	add    $0x10,%esp
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c0b:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c0f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c13:	7f e6                	jg     800bfb <vprintfmt+0x22e>
+                putch(' ', putdat);
+            }
+            break;
+  800c15:	e9 4e 01 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c1a:	83 ec 08             	sub    $0x8,%esp
+  800c1d:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c20:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c23:	50                   	push   %eax
+  800c24:	e8 39 fd ff ff       	call   800962 <getint>
+  800c29:	83 c4 10             	add    $0x10,%esp
+  800c2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c2f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c32:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c35:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c38:	85 d2                	test   %edx,%edx
+  800c3a:	79 23                	jns    800c5f <vprintfmt+0x292>
+                putch('-', putdat);
+  800c3c:	83 ec 08             	sub    $0x8,%esp
+  800c3f:	ff 75 0c             	pushl  0xc(%ebp)
+  800c42:	6a 2d                	push   $0x2d
+  800c44:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c47:	ff d0                	call   *%eax
+  800c49:	83 c4 10             	add    $0x10,%esp
+                num = -(long long)num;
+  800c4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c4f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c52:	f7 d8                	neg    %eax
+  800c54:	83 d2 00             	adc    $0x0,%edx
+  800c57:	f7 da                	neg    %edx
+  800c59:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c5c:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800c5f:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c66:	e9 9f 00 00 00       	jmp    800d0a <vprintfmt+0x33d>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800c6b:	83 ec 08             	sub    $0x8,%esp
+  800c6e:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c71:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c74:	50                   	push   %eax
+  800c75:	e8 99 fc ff ff       	call   800913 <getuint>
+  800c7a:	83 c4 10             	add    $0x10,%esp
+  800c7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c80:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800c83:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c8a:	eb 7e                	jmp    800d0a <vprintfmt+0x33d>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800c8c:	83 ec 08             	sub    $0x8,%esp
+  800c8f:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c92:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c95:	50                   	push   %eax
+  800c96:	e8 78 fc ff ff       	call   800913 <getuint>
+  800c9b:	83 c4 10             	add    $0x10,%esp
+  800c9e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ca1:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800ca4:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800cab:	eb 5d                	jmp    800d0a <vprintfmt+0x33d>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800cad:	83 ec 08             	sub    $0x8,%esp
+  800cb0:	ff 75 0c             	pushl  0xc(%ebp)
+  800cb3:	6a 30                	push   $0x30
+  800cb5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb8:	ff d0                	call   *%eax
+  800cba:	83 c4 10             	add    $0x10,%esp
+            putch('x', putdat);
+  800cbd:	83 ec 08             	sub    $0x8,%esp
+  800cc0:	ff 75 0c             	pushl  0xc(%ebp)
+  800cc3:	6a 78                	push   $0x78
+  800cc5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cc8:	ff d0                	call   *%eax
+  800cca:	83 c4 10             	add    $0x10,%esp
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800ccd:	8b 45 14             	mov    0x14(%ebp),%eax
+  800cd0:	8d 50 04             	lea    0x4(%eax),%edx
+  800cd3:	89 55 14             	mov    %edx,0x14(%ebp)
+  800cd6:	8b 00                	mov    (%eax),%eax
+  800cd8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cdb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800ce2:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800ce9:	eb 1f                	jmp    800d0a <vprintfmt+0x33d>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800ceb:	83 ec 08             	sub    $0x8,%esp
+  800cee:	ff 75 e0             	pushl  -0x20(%ebp)
+  800cf1:	8d 45 14             	lea    0x14(%ebp),%eax
+  800cf4:	50                   	push   %eax
+  800cf5:	e8 19 fc ff ff       	call   800913 <getuint>
+  800cfa:	83 c4 10             	add    $0x10,%esp
+  800cfd:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d00:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d03:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d0a:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d11:	83 ec 04             	sub    $0x4,%esp
+  800d14:	52                   	push   %edx
+  800d15:	ff 75 e8             	pushl  -0x18(%ebp)
+  800d18:	50                   	push   %eax
+  800d19:	ff 75 f4             	pushl  -0xc(%ebp)
+  800d1c:	ff 75 f0             	pushl  -0x10(%ebp)
+  800d1f:	ff 75 0c             	pushl  0xc(%ebp)
+  800d22:	ff 75 08             	pushl  0x8(%ebp)
+  800d25:	e8 f8 fa ff ff       	call   800822 <printnum>
+  800d2a:	83 c4 20             	add    $0x20,%esp
+            break;
+  800d2d:	eb 39                	jmp    800d68 <vprintfmt+0x39b>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800d2f:	83 ec 08             	sub    $0x8,%esp
+  800d32:	ff 75 0c             	pushl  0xc(%ebp)
+  800d35:	53                   	push   %ebx
+  800d36:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d39:	ff d0                	call   *%eax
+  800d3b:	83 c4 10             	add    $0x10,%esp
+            break;
+  800d3e:	eb 28                	jmp    800d68 <vprintfmt+0x39b>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800d40:	83 ec 08             	sub    $0x8,%esp
+  800d43:	ff 75 0c             	pushl  0xc(%ebp)
+  800d46:	6a 25                	push   $0x25
+  800d48:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d4b:	ff d0                	call   *%eax
+  800d4d:	83 c4 10             	add    $0x10,%esp
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800d50:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d54:	eb 04                	jmp    800d5a <vprintfmt+0x38d>
+  800d56:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d5a:	8b 45 10             	mov    0x10(%ebp),%eax
+  800d5d:	83 e8 01             	sub    $0x1,%eax
+  800d60:	0f b6 00             	movzbl (%eax),%eax
+  800d63:	3c 25                	cmp    $0x25,%al
+  800d65:	75 ef                	jne    800d56 <vprintfmt+0x389>
+                /* do nothing */;
+            break;
+  800d67:	90                   	nop
+        }
+    }
+  800d68:	e9 68 fc ff ff       	jmp    8009d5 <vprintfmt+0x8>
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+            if (ch == '\0') {
+                return;
+  800d6d:	90                   	nop
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  800d6e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  800d71:	5b                   	pop    %ebx
+  800d72:	5e                   	pop    %esi
+  800d73:	5d                   	pop    %ebp
+  800d74:	c3                   	ret    
+
+00800d75 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800d75:	55                   	push   %ebp
+  800d76:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800d78:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d7b:	8b 40 08             	mov    0x8(%eax),%eax
+  800d7e:	8d 50 01             	lea    0x1(%eax),%edx
+  800d81:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d84:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800d87:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d8a:	8b 10                	mov    (%eax),%edx
+  800d8c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d8f:	8b 40 04             	mov    0x4(%eax),%eax
+  800d92:	39 c2                	cmp    %eax,%edx
+  800d94:	73 12                	jae    800da8 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800d96:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d99:	8b 00                	mov    (%eax),%eax
+  800d9b:	8d 48 01             	lea    0x1(%eax),%ecx
+  800d9e:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800da1:	89 0a                	mov    %ecx,(%edx)
+  800da3:	8b 55 08             	mov    0x8(%ebp),%edx
+  800da6:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800da8:	90                   	nop
+  800da9:	5d                   	pop    %ebp
+  800daa:	c3                   	ret    
+
+00800dab <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800dab:	55                   	push   %ebp
+  800dac:	89 e5                	mov    %esp,%ebp
+  800dae:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800db1:	8d 45 14             	lea    0x14(%ebp),%eax
+  800db4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800db7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800dba:	50                   	push   %eax
+  800dbb:	ff 75 10             	pushl  0x10(%ebp)
+  800dbe:	ff 75 0c             	pushl  0xc(%ebp)
+  800dc1:	ff 75 08             	pushl  0x8(%ebp)
+  800dc4:	e8 0b 00 00 00       	call   800dd4 <vsnprintf>
+  800dc9:	83 c4 10             	add    $0x10,%esp
+  800dcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800dcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800dd2:	c9                   	leave  
+  800dd3:	c3                   	ret    
+
+00800dd4 <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800dd4:	55                   	push   %ebp
+  800dd5:	89 e5                	mov    %esp,%ebp
+  800dd7:	83 ec 18             	sub    $0x18,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800dda:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ddd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800de0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800de3:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800de6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de9:	01 d0                	add    %edx,%eax
+  800deb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800dee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800df5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800df9:	74 0a                	je     800e05 <vsnprintf+0x31>
+  800dfb:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800dfe:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e01:	39 c2                	cmp    %eax,%edx
+  800e03:	76 07                	jbe    800e0c <vsnprintf+0x38>
+        return -E_INVAL;
+  800e05:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e0a:	eb 20                	jmp    800e2c <vsnprintf+0x58>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e0c:	ff 75 14             	pushl  0x14(%ebp)
+  800e0f:	ff 75 10             	pushl  0x10(%ebp)
+  800e12:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800e15:	50                   	push   %eax
+  800e16:	68 75 0d 80 00       	push   $0x800d75
+  800e1b:	e8 ad fb ff ff       	call   8009cd <vprintfmt>
+  800e20:	83 c4 10             	add    $0x10,%esp
+    // null terminate the buffer
+    *b.buf = '\0';
+  800e23:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e26:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800e29:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e2c:	c9                   	leave  
+  800e2d:	c3                   	ret    
+
+00800e2e <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800e2e:	55                   	push   %ebp
+  800e2f:	89 e5                	mov    %esp,%ebp
+  800e31:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800e34:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e37:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800e3d:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800e40:	b8 20 00 00 00       	mov    $0x20,%eax
+  800e45:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800e48:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800e4b:	89 c1                	mov    %eax,%ecx
+  800e4d:	d3 ea                	shr    %cl,%edx
+  800e4f:	89 d0                	mov    %edx,%eax
+}
+  800e51:	c9                   	leave  
+  800e52:	c3                   	ret    
+
+00800e53 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800e53:	55                   	push   %ebp
+  800e54:	89 e5                	mov    %esp,%ebp
+  800e56:	57                   	push   %edi
+  800e57:	56                   	push   %esi
+  800e58:	53                   	push   %ebx
+  800e59:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800e5c:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e61:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800e67:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800e6d:	6b f0 05             	imul   $0x5,%eax,%esi
+  800e70:	01 fe                	add    %edi,%esi
+  800e72:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800e77:	f7 e7                	mul    %edi
+  800e79:	01 d6                	add    %edx,%esi
+  800e7b:	89 f2                	mov    %esi,%edx
+  800e7d:	83 c0 0b             	add    $0xb,%eax
+  800e80:	83 d2 00             	adc    $0x0,%edx
+  800e83:	89 c7                	mov    %eax,%edi
+  800e85:	83 e7 ff             	and    $0xffffffff,%edi
+  800e88:	89 f9                	mov    %edi,%ecx
+  800e8a:	0f b7 da             	movzwl %dx,%ebx
+  800e8d:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800e93:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800e99:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e9e:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ea4:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ea8:	c1 ea 0c             	shr    $0xc,%edx
+  800eab:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800eae:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800eb1:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800eb8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ebb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ebe:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ec1:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800ec4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec7:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800eca:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ece:	74 1c                	je     800eec <rand+0x99>
+  800ed0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ed3:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ed8:	f7 75 dc             	divl   -0x24(%ebp)
+  800edb:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800ede:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ee1:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ee6:	f7 75 dc             	divl   -0x24(%ebp)
+  800ee9:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800eec:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800eef:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800ef2:	f7 75 dc             	divl   -0x24(%ebp)
+  800ef5:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ef8:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800efb:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800efe:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800f01:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f04:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f07:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800f0a:	83 c4 24             	add    $0x24,%esp
+  800f0d:	5b                   	pop    %ebx
+  800f0e:	5e                   	pop    %esi
+  800f0f:	5f                   	pop    %edi
+  800f10:	5d                   	pop    %ebp
+  800f11:	c3                   	ret    
+
+00800f12 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800f12:	55                   	push   %ebp
+  800f13:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800f15:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f18:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f1d:	a3 00 20 80 00       	mov    %eax,0x802000
+  800f22:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800f28:	90                   	nop
+  800f29:	5d                   	pop    %ebp
+  800f2a:	c3                   	ret    
+
+00800f2b <do_yield>:
+#include <ulib.h>
+#include <stdio.h>
+
+void
+do_yield(void) {
+  800f2b:	55                   	push   %ebp
+  800f2c:	89 e5                	mov    %esp,%ebp
+  800f2e:	83 ec 08             	sub    $0x8,%esp
+    yield();
+  800f31:	e8 e4 f2 ff ff       	call   80021a <yield>
+    yield();
+  800f36:	e8 df f2 ff ff       	call   80021a <yield>
+    yield();
+  800f3b:	e8 da f2 ff ff       	call   80021a <yield>
+    yield();
+  800f40:	e8 d5 f2 ff ff       	call   80021a <yield>
+    yield();
+  800f45:	e8 d0 f2 ff ff       	call   80021a <yield>
+    yield();
+  800f4a:	e8 cb f2 ff ff       	call   80021a <yield>
+}
+  800f4f:	90                   	nop
+  800f50:	c9                   	leave  
+  800f51:	c3                   	ret    
+
+00800f52 <loop>:
+
+int parent, pid1, pid2;
+
+void
+loop(void) {
+  800f52:	55                   	push   %ebp
+  800f53:	89 e5                	mov    %esp,%ebp
+  800f55:	83 ec 08             	sub    $0x8,%esp
+    cprintf("child 1.\n");
+  800f58:	83 ec 0c             	sub    $0xc,%esp
+  800f5b:	68 a0 13 80 00       	push   $0x8013a0
+  800f60:	e8 74 f3 ff ff       	call   8002d9 <cprintf>
+  800f65:	83 c4 10             	add    $0x10,%esp
+    while (1);
+  800f68:	eb fe                	jmp    800f68 <loop+0x16>
+
+00800f6a <work>:
+}
+
+void
+work(void) {
+  800f6a:	55                   	push   %ebp
+  800f6b:	89 e5                	mov    %esp,%ebp
+  800f6d:	83 ec 08             	sub    $0x8,%esp
+    cprintf("child 2.\n");
+  800f70:	83 ec 0c             	sub    $0xc,%esp
+  800f73:	68 aa 13 80 00       	push   $0x8013aa
+  800f78:	e8 5c f3 ff ff       	call   8002d9 <cprintf>
+  800f7d:	83 c4 10             	add    $0x10,%esp
+    do_yield();
+  800f80:	e8 a6 ff ff ff       	call   800f2b <do_yield>
+    if (kill(parent) == 0) {
+  800f85:	a1 08 20 80 00       	mov    0x802008,%eax
+  800f8a:	83 ec 0c             	sub    $0xc,%esp
+  800f8d:	50                   	push   %eax
+  800f8e:	e8 95 f2 ff ff       	call   800228 <kill>
+  800f93:	83 c4 10             	add    $0x10,%esp
+  800f96:	85 c0                	test   %eax,%eax
+  800f98:	75 44                	jne    800fde <work+0x74>
+        cprintf("kill parent ok.\n");
+  800f9a:	83 ec 0c             	sub    $0xc,%esp
+  800f9d:	68 b4 13 80 00       	push   $0x8013b4
+  800fa2:	e8 32 f3 ff ff       	call   8002d9 <cprintf>
+  800fa7:	83 c4 10             	add    $0x10,%esp
+        do_yield();
+  800faa:	e8 7c ff ff ff       	call   800f2b <do_yield>
+        if (kill(pid1) == 0) {
+  800faf:	a1 10 20 80 00       	mov    0x802010,%eax
+  800fb4:	83 ec 0c             	sub    $0xc,%esp
+  800fb7:	50                   	push   %eax
+  800fb8:	e8 6b f2 ff ff       	call   800228 <kill>
+  800fbd:	83 c4 10             	add    $0x10,%esp
+  800fc0:	85 c0                	test   %eax,%eax
+  800fc2:	75 1a                	jne    800fde <work+0x74>
+            cprintf("kill child1 ok.\n");
+  800fc4:	83 ec 0c             	sub    $0xc,%esp
+  800fc7:	68 c5 13 80 00       	push   $0x8013c5
+  800fcc:	e8 08 f3 ff ff       	call   8002d9 <cprintf>
+  800fd1:	83 c4 10             	add    $0x10,%esp
+            exit(0);
+  800fd4:	83 ec 0c             	sub    $0xc,%esp
+  800fd7:	6a 00                	push   $0x0
+  800fd9:	e8 d9 f1 ff ff       	call   8001b7 <exit>
+        }
+    }
+    exit(-1);
+  800fde:	83 ec 0c             	sub    $0xc,%esp
+  800fe1:	6a ff                	push   $0xffffffff
+  800fe3:	e8 cf f1 ff ff       	call   8001b7 <exit>
+
+00800fe8 <main>:
+}
+
+int
+main(void) {
+  800fe8:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  800fec:	83 e4 f0             	and    $0xfffffff0,%esp
+  800fef:	ff 71 fc             	pushl  -0x4(%ecx)
+  800ff2:	55                   	push   %ebp
+  800ff3:	89 e5                	mov    %esp,%ebp
+  800ff5:	51                   	push   %ecx
+  800ff6:	83 ec 04             	sub    $0x4,%esp
+    parent = getpid();
+  800ff9:	e8 40 f2 ff ff       	call   80023e <getpid>
+  800ffe:	a3 08 20 80 00       	mov    %eax,0x802008
+    if ((pid1 = fork()) == 0) {
+  801003:	e8 d5 f1 ff ff       	call   8001dd <fork>
+  801008:	a3 10 20 80 00       	mov    %eax,0x802010
+  80100d:	a1 10 20 80 00       	mov    0x802010,%eax
+  801012:	85 c0                	test   %eax,%eax
+  801014:	75 05                	jne    80101b <main+0x33>
+        loop();
+  801016:	e8 37 ff ff ff       	call   800f52 <loop>
+    }
+
+    assert(pid1 > 0);
+  80101b:	a1 10 20 80 00       	mov    0x802010,%eax
+  801020:	85 c0                	test   %eax,%eax
+  801022:	7f 16                	jg     80103a <main+0x52>
+  801024:	68 d6 13 80 00       	push   $0x8013d6
+  801029:	68 df 13 80 00       	push   $0x8013df
+  80102e:	6a 2c                	push   $0x2c
+  801030:	68 f4 13 80 00       	push   $0x8013f4
+  801035:	e8 e6 ef ff ff       	call   800020 <__panic>
+
+    if ((pid2 = fork()) == 0) {
+  80103a:	e8 9e f1 ff ff       	call   8001dd <fork>
+  80103f:	a3 0c 20 80 00       	mov    %eax,0x80200c
+  801044:	a1 0c 20 80 00       	mov    0x80200c,%eax
+  801049:	85 c0                	test   %eax,%eax
+  80104b:	75 05                	jne    801052 <main+0x6a>
+        work();
+  80104d:	e8 18 ff ff ff       	call   800f6a <work>
+    }
+    if (pid2 > 0) {
+  801052:	a1 0c 20 80 00       	mov    0x80200c,%eax
+  801057:	85 c0                	test   %eax,%eax
+  801059:	7e 3a                	jle    801095 <main+0xad>
+        cprintf("wait child 1.\n");
+  80105b:	83 ec 0c             	sub    $0xc,%esp
+  80105e:	68 04 14 80 00       	push   $0x801404
+  801063:	e8 71 f2 ff ff       	call   8002d9 <cprintf>
+  801068:	83 c4 10             	add    $0x10,%esp
+        waitpid(pid1, NULL);
+  80106b:	a1 10 20 80 00       	mov    0x802010,%eax
+  801070:	83 ec 08             	sub    $0x8,%esp
+  801073:	6a 00                	push   $0x0
+  801075:	50                   	push   %eax
+  801076:	e8 86 f1 ff ff       	call   800201 <waitpid>
+  80107b:	83 c4 10             	add    $0x10,%esp
+        panic("waitpid %d returns\n", pid1);
+  80107e:	a1 10 20 80 00       	mov    0x802010,%eax
+  801083:	50                   	push   %eax
+  801084:	68 13 14 80 00       	push   $0x801413
+  801089:	6a 34                	push   $0x34
+  80108b:	68 f4 13 80 00       	push   $0x8013f4
+  801090:	e8 8b ef ff ff       	call   800020 <__panic>
+    }
+    else {
+        kill(pid1);
+  801095:	a1 10 20 80 00       	mov    0x802010,%eax
+  80109a:	83 ec 0c             	sub    $0xc,%esp
+  80109d:	50                   	push   %eax
+  80109e:	e8 85 f1 ff ff       	call   800228 <kill>
+  8010a3:	83 c4 10             	add    $0x10,%esp
+    }
+    panic("FAIL: T.T\n");
+  8010a6:	83 ec 04             	sub    $0x4,%esp
+  8010a9:	68 27 14 80 00       	push   $0x801427
+  8010ae:	6a 39                	push   $0x39
+  8010b0:	68 f4 13 80 00       	push   $0x8013f4
+  8010b5:	e8 66 ef ff ff       	call   800020 <__panic>
diff -r -u -P lab6_original/obj/user/waitkill.d lab6/obj/user/waitkill.d
--- lab6_original/obj/user/waitkill.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/waitkill.d	2016-04-29 16:22:06.848533461 +0800
@@ -0,0 +1,2 @@
+obj/user/waitkill.o obj/user/waitkill.d: user/waitkill.c user/libs/ulib.h \
+ libs/defs.h libs/stdio.h libs/stdarg.h
Binary files lab6_original/obj/user/waitkill.o and lab6/obj/user/waitkill.o differ
diff -r -u -P lab6_original/obj/user/waitkill.sym lab6/obj/user/waitkill.sym
--- lab6_original/obj/user/waitkill.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/waitkill.sym	2016-04-29 16:22:07.756617203 +0800
@@ -0,0 +1,83 @@
+00800020 .text
+008010c0 .rodata
+00802000 .data
+00802008 .bss
+00200000 .stab_info
+00200010 .stab
+00202e61 .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b5 syscall
+00000000 ulib.c
+00000000 stdio.c
+0080028c cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+008011c0 error_string
+00800822 printnum
+00800913 getuint
+00800962 getint
+00800d75 sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 waitkill.c
+008003be strcpy
+0080021a yield
+00800201 waitpid
+00800141 sys_yield
+008006d7 memmove
+00800dab snprintf
+008009cd vprintfmt
+0080011d sys_fork
+008002d9 cprintf
+00800f52 loop
+0080023e getpid
+0080077a memcpy
+00802008 parent
+00800266 lab6_set_priority
+00800dd4 vsnprintf
+0080034d umain
+00202e60 __STAB_END__
+00800150 sys_kill
+00202e61 __STABSTR_BEGIN__
+00800020 __panic
+0080053a strtol
+0080038e strnlen
+0080024b print_pgdir
+00800228 kill
+0080200c pid2
+0080050b strfind
+008001ea wait
+0080027d _start
+00800e53 rand
+00800482 strncmp
+00800171 sys_putc
+008003fe strncpy
+008007ca memcmp
+008001dd fork
+00800697 memset
+00800fe8 main
+00800f12 srand
+00800e2e hash32
+008009a9 printfmt
+00800f2b do_yield
+00203c93 __STABSTR_END__
+00800438 strcmp
+00800259 gettime_msec
+00800192 sys_gettime
+008002b0 vcprintf
+0080006e __warn
+008002ff cputs
+00802010 pid1
+008001a1 sys_lab6_set_priority
+008001b7 exit
+0080012c sys_wait
+0080010b sys_exit
+00200010 __STAB_BEGIN__
+00800366 strlen
+00800183 sys_pgdir
+008004d8 strchr
+00800162 sys_getpid
+00800f6a work
diff -r -u -P lab6_original/obj/user/yield.asm lab6/obj/user/yield.asm
--- lab6_original/obj/user/yield.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/yield.asm	2016-04-29 16:22:07.720772054 +0800
@@ -0,0 +1,2622 @@
+
+obj/__user_yield.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 18             	sub    $0x18,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	83 ec 04             	sub    $0x4,%esp
+  80002f:	ff 75 0c             	pushl  0xc(%ebp)
+  800032:	ff 75 08             	pushl  0x8(%ebp)
+  800035:	68 c0 0f 80 00       	push   $0x800fc0
+  80003a:	e8 9a 02 00 00       	call   8002d9 <cprintf>
+  80003f:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800042:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800045:	83 ec 08             	sub    $0x8,%esp
+  800048:	50                   	push   %eax
+  800049:	ff 75 10             	pushl  0x10(%ebp)
+  80004c:	e8 5f 02 00 00       	call   8002b0 <vcprintf>
+  800051:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  800054:	83 ec 0c             	sub    $0xc,%esp
+  800057:	68 da 0f 80 00       	push   $0x800fda
+  80005c:	e8 78 02 00 00       	call   8002d9 <cprintf>
+  800061:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	83 ec 0c             	sub    $0xc,%esp
+  800067:	6a f6                	push   $0xfffffff6
+  800069:	e8 49 01 00 00       	call   8001b7 <exit>
+
+0080006e <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80006e:	55                   	push   %ebp
+  80006f:	89 e5                	mov    %esp,%ebp
+  800071:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800074:	8d 45 14             	lea    0x14(%ebp),%eax
+  800077:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007a:	83 ec 04             	sub    $0x4,%esp
+  80007d:	ff 75 0c             	pushl  0xc(%ebp)
+  800080:	ff 75 08             	pushl  0x8(%ebp)
+  800083:	68 dc 0f 80 00       	push   $0x800fdc
+  800088:	e8 4c 02 00 00       	call   8002d9 <cprintf>
+  80008d:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800090:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800093:	83 ec 08             	sub    $0x8,%esp
+  800096:	50                   	push   %eax
+  800097:	ff 75 10             	pushl  0x10(%ebp)
+  80009a:	e8 11 02 00 00       	call   8002b0 <vcprintf>
+  80009f:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  8000a2:	83 ec 0c             	sub    $0xc,%esp
+  8000a5:	68 da 0f 80 00       	push   $0x800fda
+  8000aa:	e8 2a 02 00 00       	call   8002d9 <cprintf>
+  8000af:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8000b2:	90                   	nop
+  8000b3:	c9                   	leave  
+  8000b4:	c3                   	ret    
+
+008000b5 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b5:	55                   	push   %ebp
+  8000b6:	89 e5                	mov    %esp,%ebp
+  8000b8:	57                   	push   %edi
+  8000b9:	56                   	push   %esi
+  8000ba:	53                   	push   %ebx
+  8000bb:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000be:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cb:	eb 16                	jmp    8000e3 <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8000cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d0:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d3:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d6:	8b 10                	mov    (%eax),%edx
+  8000d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000db:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000df:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8000e3:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e7:	7e e4                	jle    8000cd <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000e9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ec:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000ef:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f2:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f5:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8000f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fb:	cd 80                	int    $0x80
+  8000fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  800100:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800103:	83 c4 20             	add    $0x20,%esp
+  800106:	5b                   	pop    %ebx
+  800107:	5e                   	pop    %esi
+  800108:	5f                   	pop    %edi
+  800109:	5d                   	pop    %ebp
+  80010a:	c3                   	ret    
+
+0080010b <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010b:	55                   	push   %ebp
+  80010c:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_exit, error_code);
+  80010e:	ff 75 08             	pushl  0x8(%ebp)
+  800111:	6a 01                	push   $0x1
+  800113:	e8 9d ff ff ff       	call   8000b5 <syscall>
+  800118:	83 c4 08             	add    $0x8,%esp
+}
+  80011b:	c9                   	leave  
+  80011c:	c3                   	ret    
+
+0080011d <sys_fork>:
+
+int
+sys_fork(void) {
+  80011d:	55                   	push   %ebp
+  80011e:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_fork);
+  800120:	6a 02                	push   $0x2
+  800122:	e8 8e ff ff ff       	call   8000b5 <syscall>
+  800127:	83 c4 04             	add    $0x4,%esp
+}
+  80012a:	c9                   	leave  
+  80012b:	c3                   	ret    
+
+0080012c <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80012c:	55                   	push   %ebp
+  80012d:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_wait, pid, store);
+  80012f:	ff 75 0c             	pushl  0xc(%ebp)
+  800132:	ff 75 08             	pushl  0x8(%ebp)
+  800135:	6a 03                	push   $0x3
+  800137:	e8 79 ff ff ff       	call   8000b5 <syscall>
+  80013c:	83 c4 0c             	add    $0xc,%esp
+}
+  80013f:	c9                   	leave  
+  800140:	c3                   	ret    
+
+00800141 <sys_yield>:
+
+int
+sys_yield(void) {
+  800141:	55                   	push   %ebp
+  800142:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_yield);
+  800144:	6a 0a                	push   $0xa
+  800146:	e8 6a ff ff ff       	call   8000b5 <syscall>
+  80014b:	83 c4 04             	add    $0x4,%esp
+}
+  80014e:	c9                   	leave  
+  80014f:	c3                   	ret    
+
+00800150 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800150:	55                   	push   %ebp
+  800151:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_kill, pid);
+  800153:	ff 75 08             	pushl  0x8(%ebp)
+  800156:	6a 0c                	push   $0xc
+  800158:	e8 58 ff ff ff       	call   8000b5 <syscall>
+  80015d:	83 c4 08             	add    $0x8,%esp
+}
+  800160:	c9                   	leave  
+  800161:	c3                   	ret    
+
+00800162 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800162:	55                   	push   %ebp
+  800163:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_getpid);
+  800165:	6a 12                	push   $0x12
+  800167:	e8 49 ff ff ff       	call   8000b5 <syscall>
+  80016c:	83 c4 04             	add    $0x4,%esp
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_putc, c);
+  800174:	ff 75 08             	pushl  0x8(%ebp)
+  800177:	6a 1e                	push   $0x1e
+  800179:	e8 37 ff ff ff       	call   8000b5 <syscall>
+  80017e:	83 c4 08             	add    $0x8,%esp
+}
+  800181:	c9                   	leave  
+  800182:	c3                   	ret    
+
+00800183 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800183:	55                   	push   %ebp
+  800184:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_pgdir);
+  800186:	6a 1f                	push   $0x1f
+  800188:	e8 28 ff ff ff       	call   8000b5 <syscall>
+  80018d:	83 c4 04             	add    $0x4,%esp
+}
+  800190:	c9                   	leave  
+  800191:	c3                   	ret    
+
+00800192 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  800192:	55                   	push   %ebp
+  800193:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_gettime);
+  800195:	6a 11                	push   $0x11
+  800197:	e8 19 ff ff ff       	call   8000b5 <syscall>
+  80019c:	83 c4 04             	add    $0x4,%esp
+}
+  80019f:	c9                   	leave  
+  8001a0:	c3                   	ret    
+
+008001a1 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001a1:	55                   	push   %ebp
+  8001a2:	89 e5                	mov    %esp,%ebp
+    syscall(SYS_lab6_set_priority, priority);
+  8001a4:	ff 75 08             	pushl  0x8(%ebp)
+  8001a7:	68 ff 00 00 00       	push   $0xff
+  8001ac:	e8 04 ff ff ff       	call   8000b5 <syscall>
+  8001b1:	83 c4 08             	add    $0x8,%esp
+}
+  8001b4:	90                   	nop
+  8001b5:	c9                   	leave  
+  8001b6:	c3                   	ret    
+
+008001b7 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001b7:	55                   	push   %ebp
+  8001b8:	89 e5                	mov    %esp,%ebp
+  8001ba:	83 ec 08             	sub    $0x8,%esp
+    sys_exit(error_code);
+  8001bd:	83 ec 0c             	sub    $0xc,%esp
+  8001c0:	ff 75 08             	pushl  0x8(%ebp)
+  8001c3:	e8 43 ff ff ff       	call   80010b <sys_exit>
+  8001c8:	83 c4 10             	add    $0x10,%esp
+    cprintf("BUG: exit failed.\n");
+  8001cb:	83 ec 0c             	sub    $0xc,%esp
+  8001ce:	68 f8 0f 80 00       	push   $0x800ff8
+  8001d3:	e8 01 01 00 00       	call   8002d9 <cprintf>
+  8001d8:	83 c4 10             	add    $0x10,%esp
+    while (1);
+  8001db:	eb fe                	jmp    8001db <exit+0x24>
+
+008001dd <fork>:
+}
+
+int
+fork(void) {
+  8001dd:	55                   	push   %ebp
+  8001de:	89 e5                	mov    %esp,%ebp
+  8001e0:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8001e3:	e8 35 ff ff ff       	call   80011d <sys_fork>
+}
+  8001e8:	c9                   	leave  
+  8001e9:	c3                   	ret    
+
+008001ea <wait>:
+
+int
+wait(void) {
+  8001ea:	55                   	push   %ebp
+  8001eb:	89 e5                	mov    %esp,%ebp
+  8001ed:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(0, NULL);
+  8001f0:	83 ec 08             	sub    $0x8,%esp
+  8001f3:	6a 00                	push   $0x0
+  8001f5:	6a 00                	push   $0x0
+  8001f7:	e8 30 ff ff ff       	call   80012c <sys_wait>
+  8001fc:	83 c4 10             	add    $0x10,%esp
+}
+  8001ff:	c9                   	leave  
+  800200:	c3                   	ret    
+
+00800201 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800201:	55                   	push   %ebp
+  800202:	89 e5                	mov    %esp,%ebp
+  800204:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(pid, store);
+  800207:	83 ec 08             	sub    $0x8,%esp
+  80020a:	ff 75 0c             	pushl  0xc(%ebp)
+  80020d:	ff 75 08             	pushl  0x8(%ebp)
+  800210:	e8 17 ff ff ff       	call   80012c <sys_wait>
+  800215:	83 c4 10             	add    $0x10,%esp
+}
+  800218:	c9                   	leave  
+  800219:	c3                   	ret    
+
+0080021a <yield>:
+
+void
+yield(void) {
+  80021a:	55                   	push   %ebp
+  80021b:	89 e5                	mov    %esp,%ebp
+  80021d:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800220:	e8 1c ff ff ff       	call   800141 <sys_yield>
+}
+  800225:	90                   	nop
+  800226:	c9                   	leave  
+  800227:	c3                   	ret    
+
+00800228 <kill>:
+
+int
+kill(int pid) {
+  800228:	55                   	push   %ebp
+  800229:	89 e5                	mov    %esp,%ebp
+  80022b:	83 ec 08             	sub    $0x8,%esp
+    return sys_kill(pid);
+  80022e:	83 ec 0c             	sub    $0xc,%esp
+  800231:	ff 75 08             	pushl  0x8(%ebp)
+  800234:	e8 17 ff ff ff       	call   800150 <sys_kill>
+  800239:	83 c4 10             	add    $0x10,%esp
+}
+  80023c:	c9                   	leave  
+  80023d:	c3                   	ret    
+
+0080023e <getpid>:
+
+int
+getpid(void) {
+  80023e:	55                   	push   %ebp
+  80023f:	89 e5                	mov    %esp,%ebp
+  800241:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800244:	e8 19 ff ff ff       	call   800162 <sys_getpid>
+}
+  800249:	c9                   	leave  
+  80024a:	c3                   	ret    
+
+0080024b <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80024b:	55                   	push   %ebp
+  80024c:	89 e5                	mov    %esp,%ebp
+  80024e:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800251:	e8 2d ff ff ff       	call   800183 <sys_pgdir>
+}
+  800256:	90                   	nop
+  800257:	c9                   	leave  
+  800258:	c3                   	ret    
+
+00800259 <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  800259:	55                   	push   %ebp
+  80025a:	89 e5                	mov    %esp,%ebp
+  80025c:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  80025f:	e8 2e ff ff ff       	call   800192 <sys_gettime>
+}
+  800264:	c9                   	leave  
+  800265:	c3                   	ret    
+
+00800266 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800266:	55                   	push   %ebp
+  800267:	89 e5                	mov    %esp,%ebp
+  800269:	83 ec 08             	sub    $0x8,%esp
+    sys_lab6_set_priority(priority);
+  80026c:	83 ec 0c             	sub    $0xc,%esp
+  80026f:	ff 75 08             	pushl  0x8(%ebp)
+  800272:	e8 2a ff ff ff       	call   8001a1 <sys_lab6_set_priority>
+  800277:	83 c4 10             	add    $0x10,%esp
+}
+  80027a:	90                   	nop
+  80027b:	c9                   	leave  
+  80027c:	c3                   	ret    
+
+0080027d <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  80027d:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  800282:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  800285:	e8 c3 00 00 00       	call   80034d <umain>
+1:  jmp 1b
+  80028a:	eb fe                	jmp    80028a <_start+0xd>
+
+0080028c <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  80028c:	55                   	push   %ebp
+  80028d:	89 e5                	mov    %esp,%ebp
+  80028f:	83 ec 08             	sub    $0x8,%esp
+    sys_putc(c);
+  800292:	83 ec 0c             	sub    $0xc,%esp
+  800295:	ff 75 08             	pushl  0x8(%ebp)
+  800298:	e8 d4 fe ff ff       	call   800171 <sys_putc>
+  80029d:	83 c4 10             	add    $0x10,%esp
+    (*cnt) ++;
+  8002a0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002a3:	8b 00                	mov    (%eax),%eax
+  8002a5:	8d 50 01             	lea    0x1(%eax),%edx
+  8002a8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002ab:	89 10                	mov    %edx,(%eax)
+}
+  8002ad:	90                   	nop
+  8002ae:	c9                   	leave  
+  8002af:	c3                   	ret    
+
+008002b0 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002b0:	55                   	push   %ebp
+  8002b1:	89 e5                	mov    %esp,%ebp
+  8002b3:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  8002b6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002bd:	ff 75 0c             	pushl  0xc(%ebp)
+  8002c0:	ff 75 08             	pushl  0x8(%ebp)
+  8002c3:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  8002c6:	50                   	push   %eax
+  8002c7:	68 8c 02 80 00       	push   $0x80028c
+  8002cc:	e8 fc 06 00 00       	call   8009cd <vprintfmt>
+  8002d1:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  8002d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002d7:	c9                   	leave  
+  8002d8:	c3                   	ret    
+
+008002d9 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  8002d9:	55                   	push   %ebp
+  8002da:	89 e5                	mov    %esp,%ebp
+  8002dc:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8002df:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8002e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  8002e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8002e8:	83 ec 08             	sub    $0x8,%esp
+  8002eb:	50                   	push   %eax
+  8002ec:	ff 75 08             	pushl  0x8(%ebp)
+  8002ef:	e8 bc ff ff ff       	call   8002b0 <vcprintf>
+  8002f4:	83 c4 10             	add    $0x10,%esp
+  8002f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  8002fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002fd:	c9                   	leave  
+  8002fe:	c3                   	ret    
+
+008002ff <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  8002ff:	55                   	push   %ebp
+  800300:	89 e5                	mov    %esp,%ebp
+  800302:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  800305:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  80030c:	eb 14                	jmp    800322 <cputs+0x23>
+        cputch(c, &cnt);
+  80030e:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  800312:	83 ec 08             	sub    $0x8,%esp
+  800315:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800318:	52                   	push   %edx
+  800319:	50                   	push   %eax
+  80031a:	e8 6d ff ff ff       	call   80028c <cputch>
+  80031f:	83 c4 10             	add    $0x10,%esp
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  800322:	8b 45 08             	mov    0x8(%ebp),%eax
+  800325:	8d 50 01             	lea    0x1(%eax),%edx
+  800328:	89 55 08             	mov    %edx,0x8(%ebp)
+  80032b:	0f b6 00             	movzbl (%eax),%eax
+  80032e:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800331:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  800335:	75 d7                	jne    80030e <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  800337:	83 ec 08             	sub    $0x8,%esp
+  80033a:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  80033d:	50                   	push   %eax
+  80033e:	6a 0a                	push   $0xa
+  800340:	e8 47 ff ff ff       	call   80028c <cputch>
+  800345:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  800348:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  80034b:	c9                   	leave  
+  80034c:	c3                   	ret    
+
+0080034d <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  80034d:	55                   	push   %ebp
+  80034e:	89 e5                	mov    %esp,%ebp
+  800350:	83 ec 18             	sub    $0x18,%esp
+    int ret = main();
+  800353:	e8 d3 0b 00 00       	call   800f2b <main>
+  800358:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  80035b:	83 ec 0c             	sub    $0xc,%esp
+  80035e:	ff 75 f4             	pushl  -0xc(%ebp)
+  800361:	e8 51 fe ff ff       	call   8001b7 <exit>
+
+00800366 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  800366:	55                   	push   %ebp
+  800367:	89 e5                	mov    %esp,%ebp
+  800369:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  80036c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  800373:	eb 04                	jmp    800379 <strlen+0x13>
+        cnt ++;
+  800375:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  800379:	8b 45 08             	mov    0x8(%ebp),%eax
+  80037c:	8d 50 01             	lea    0x1(%eax),%edx
+  80037f:	89 55 08             	mov    %edx,0x8(%ebp)
+  800382:	0f b6 00             	movzbl (%eax),%eax
+  800385:	84 c0                	test   %al,%al
+  800387:	75 ec                	jne    800375 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  800389:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  80038c:	c9                   	leave  
+  80038d:	c3                   	ret    
+
+0080038e <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  80038e:	55                   	push   %ebp
+  80038f:	89 e5                	mov    %esp,%ebp
+  800391:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800394:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  80039b:	eb 04                	jmp    8003a1 <strnlen+0x13>
+        cnt ++;
+  80039d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  8003a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003a4:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003a7:	73 10                	jae    8003b9 <strnlen+0x2b>
+  8003a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003ac:	8d 50 01             	lea    0x1(%eax),%edx
+  8003af:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003b2:	0f b6 00             	movzbl (%eax),%eax
+  8003b5:	84 c0                	test   %al,%al
+  8003b7:	75 e4                	jne    80039d <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003b9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003bc:	c9                   	leave  
+  8003bd:	c3                   	ret    
+
+008003be <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  8003be:	55                   	push   %ebp
+  8003bf:	89 e5                	mov    %esp,%ebp
+  8003c1:	57                   	push   %edi
+  8003c2:	56                   	push   %esi
+  8003c3:	83 ec 20             	sub    $0x20,%esp
+  8003c6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003cc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8003cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  8003d2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8003d8:	89 d1                	mov    %edx,%ecx
+  8003da:	89 c2                	mov    %eax,%edx
+  8003dc:	89 ce                	mov    %ecx,%esi
+  8003de:	89 d7                	mov    %edx,%edi
+  8003e0:	ac                   	lods   %ds:(%esi),%al
+  8003e1:	aa                   	stos   %al,%es:(%edi)
+  8003e2:	84 c0                	test   %al,%al
+  8003e4:	75 fa                	jne    8003e0 <strcpy+0x22>
+  8003e6:	89 fa                	mov    %edi,%edx
+  8003e8:	89 f1                	mov    %esi,%ecx
+  8003ea:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8003ed:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8003f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  8003f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  8003f6:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  8003f7:	83 c4 20             	add    $0x20,%esp
+  8003fa:	5e                   	pop    %esi
+  8003fb:	5f                   	pop    %edi
+  8003fc:	5d                   	pop    %ebp
+  8003fd:	c3                   	ret    
+
+008003fe <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  8003fe:	55                   	push   %ebp
+  8003ff:	89 e5                	mov    %esp,%ebp
+  800401:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  800404:	8b 45 08             	mov    0x8(%ebp),%eax
+  800407:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  80040a:	eb 21                	jmp    80042d <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  80040c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80040f:	0f b6 10             	movzbl (%eax),%edx
+  800412:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800415:	88 10                	mov    %dl,(%eax)
+  800417:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80041a:	0f b6 00             	movzbl (%eax),%eax
+  80041d:	84 c0                	test   %al,%al
+  80041f:	74 04                	je     800425 <strncpy+0x27>
+            src ++;
+  800421:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  800425:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800429:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  80042d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800431:	75 d9                	jne    80040c <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  800433:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800436:	c9                   	leave  
+  800437:	c3                   	ret    
+
+00800438 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800438:	55                   	push   %ebp
+  800439:	89 e5                	mov    %esp,%ebp
+  80043b:	57                   	push   %edi
+  80043c:	56                   	push   %esi
+  80043d:	83 ec 20             	sub    $0x20,%esp
+  800440:	8b 45 08             	mov    0x8(%ebp),%eax
+  800443:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800446:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800449:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  80044c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80044f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800452:	89 d1                	mov    %edx,%ecx
+  800454:	89 c2                	mov    %eax,%edx
+  800456:	89 ce                	mov    %ecx,%esi
+  800458:	89 d7                	mov    %edx,%edi
+  80045a:	ac                   	lods   %ds:(%esi),%al
+  80045b:	ae                   	scas   %es:(%edi),%al
+  80045c:	75 08                	jne    800466 <strcmp+0x2e>
+  80045e:	84 c0                	test   %al,%al
+  800460:	75 f8                	jne    80045a <strcmp+0x22>
+  800462:	31 c0                	xor    %eax,%eax
+  800464:	eb 04                	jmp    80046a <strcmp+0x32>
+  800466:	19 c0                	sbb    %eax,%eax
+  800468:	0c 01                	or     $0x1,%al
+  80046a:	89 fa                	mov    %edi,%edx
+  80046c:	89 f1                	mov    %esi,%ecx
+  80046e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800471:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  800474:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  800477:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  80047a:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  80047b:	83 c4 20             	add    $0x20,%esp
+  80047e:	5e                   	pop    %esi
+  80047f:	5f                   	pop    %edi
+  800480:	5d                   	pop    %ebp
+  800481:	c3                   	ret    
+
+00800482 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  800482:	55                   	push   %ebp
+  800483:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800485:	eb 0c                	jmp    800493 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  800487:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  80048b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  80048f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  800493:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800497:	74 1a                	je     8004b3 <strncmp+0x31>
+  800499:	8b 45 08             	mov    0x8(%ebp),%eax
+  80049c:	0f b6 00             	movzbl (%eax),%eax
+  80049f:	84 c0                	test   %al,%al
+  8004a1:	74 10                	je     8004b3 <strncmp+0x31>
+  8004a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004a6:	0f b6 10             	movzbl (%eax),%edx
+  8004a9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ac:	0f b6 00             	movzbl (%eax),%eax
+  8004af:	38 c2                	cmp    %al,%dl
+  8004b1:	74 d4                	je     800487 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004b3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004b7:	74 18                	je     8004d1 <strncmp+0x4f>
+  8004b9:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004bc:	0f b6 00             	movzbl (%eax),%eax
+  8004bf:	0f b6 d0             	movzbl %al,%edx
+  8004c2:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004c5:	0f b6 00             	movzbl (%eax),%eax
+  8004c8:	0f b6 c0             	movzbl %al,%eax
+  8004cb:	29 c2                	sub    %eax,%edx
+  8004cd:	89 d0                	mov    %edx,%eax
+  8004cf:	eb 05                	jmp    8004d6 <strncmp+0x54>
+  8004d1:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8004d6:	5d                   	pop    %ebp
+  8004d7:	c3                   	ret    
+
+008004d8 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  8004d8:	55                   	push   %ebp
+  8004d9:	89 e5                	mov    %esp,%ebp
+  8004db:	83 ec 04             	sub    $0x4,%esp
+  8004de:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004e1:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  8004e4:	eb 14                	jmp    8004fa <strchr+0x22>
+        if (*s == c) {
+  8004e6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e9:	0f b6 00             	movzbl (%eax),%eax
+  8004ec:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  8004ef:	75 05                	jne    8004f6 <strchr+0x1e>
+            return (char *)s;
+  8004f1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004f4:	eb 13                	jmp    800509 <strchr+0x31>
+        }
+        s ++;
+  8004f6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  8004fa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004fd:	0f b6 00             	movzbl (%eax),%eax
+  800500:	84 c0                	test   %al,%al
+  800502:	75 e2                	jne    8004e6 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  800504:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800509:	c9                   	leave  
+  80050a:	c3                   	ret    
+
+0080050b <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  80050b:	55                   	push   %ebp
+  80050c:	89 e5                	mov    %esp,%ebp
+  80050e:	83 ec 04             	sub    $0x4,%esp
+  800511:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800514:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  800517:	eb 0f                	jmp    800528 <strfind+0x1d>
+        if (*s == c) {
+  800519:	8b 45 08             	mov    0x8(%ebp),%eax
+  80051c:	0f b6 00             	movzbl (%eax),%eax
+  80051f:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800522:	74 10                	je     800534 <strfind+0x29>
+            break;
+        }
+        s ++;
+  800524:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800528:	8b 45 08             	mov    0x8(%ebp),%eax
+  80052b:	0f b6 00             	movzbl (%eax),%eax
+  80052e:	84 c0                	test   %al,%al
+  800530:	75 e7                	jne    800519 <strfind+0xe>
+  800532:	eb 01                	jmp    800535 <strfind+0x2a>
+        if (*s == c) {
+            break;
+  800534:	90                   	nop
+        }
+        s ++;
+    }
+    return (char *)s;
+  800535:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800538:	c9                   	leave  
+  800539:	c3                   	ret    
+
+0080053a <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  80053a:	55                   	push   %ebp
+  80053b:	89 e5                	mov    %esp,%ebp
+  80053d:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800540:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  800547:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80054e:	eb 04                	jmp    800554 <strtol+0x1a>
+        s ++;
+  800550:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800554:	8b 45 08             	mov    0x8(%ebp),%eax
+  800557:	0f b6 00             	movzbl (%eax),%eax
+  80055a:	3c 20                	cmp    $0x20,%al
+  80055c:	74 f2                	je     800550 <strtol+0x16>
+  80055e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800561:	0f b6 00             	movzbl (%eax),%eax
+  800564:	3c 09                	cmp    $0x9,%al
+  800566:	74 e8                	je     800550 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800568:	8b 45 08             	mov    0x8(%ebp),%eax
+  80056b:	0f b6 00             	movzbl (%eax),%eax
+  80056e:	3c 2b                	cmp    $0x2b,%al
+  800570:	75 06                	jne    800578 <strtol+0x3e>
+        s ++;
+  800572:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800576:	eb 15                	jmp    80058d <strtol+0x53>
+    }
+    else if (*s == '-') {
+  800578:	8b 45 08             	mov    0x8(%ebp),%eax
+  80057b:	0f b6 00             	movzbl (%eax),%eax
+  80057e:	3c 2d                	cmp    $0x2d,%al
+  800580:	75 0b                	jne    80058d <strtol+0x53>
+        s ++, neg = 1;
+  800582:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800586:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  80058d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800591:	74 06                	je     800599 <strtol+0x5f>
+  800593:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  800597:	75 24                	jne    8005bd <strtol+0x83>
+  800599:	8b 45 08             	mov    0x8(%ebp),%eax
+  80059c:	0f b6 00             	movzbl (%eax),%eax
+  80059f:	3c 30                	cmp    $0x30,%al
+  8005a1:	75 1a                	jne    8005bd <strtol+0x83>
+  8005a3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a6:	83 c0 01             	add    $0x1,%eax
+  8005a9:	0f b6 00             	movzbl (%eax),%eax
+  8005ac:	3c 78                	cmp    $0x78,%al
+  8005ae:	75 0d                	jne    8005bd <strtol+0x83>
+        s += 2, base = 16;
+  8005b0:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005b4:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005bb:	eb 2a                	jmp    8005e7 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005bd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005c1:	75 17                	jne    8005da <strtol+0xa0>
+  8005c3:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005c6:	0f b6 00             	movzbl (%eax),%eax
+  8005c9:	3c 30                	cmp    $0x30,%al
+  8005cb:	75 0d                	jne    8005da <strtol+0xa0>
+        s ++, base = 8;
+  8005cd:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005d1:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  8005d8:	eb 0d                	jmp    8005e7 <strtol+0xad>
+    }
+    else if (base == 0) {
+  8005da:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005de:	75 07                	jne    8005e7 <strtol+0xad>
+        base = 10;
+  8005e0:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  8005e7:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ea:	0f b6 00             	movzbl (%eax),%eax
+  8005ed:	3c 2f                	cmp    $0x2f,%al
+  8005ef:	7e 1b                	jle    80060c <strtol+0xd2>
+  8005f1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005f4:	0f b6 00             	movzbl (%eax),%eax
+  8005f7:	3c 39                	cmp    $0x39,%al
+  8005f9:	7f 11                	jg     80060c <strtol+0xd2>
+            dig = *s - '0';
+  8005fb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005fe:	0f b6 00             	movzbl (%eax),%eax
+  800601:	0f be c0             	movsbl %al,%eax
+  800604:	83 e8 30             	sub    $0x30,%eax
+  800607:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80060a:	eb 48                	jmp    800654 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  80060c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80060f:	0f b6 00             	movzbl (%eax),%eax
+  800612:	3c 60                	cmp    $0x60,%al
+  800614:	7e 1b                	jle    800631 <strtol+0xf7>
+  800616:	8b 45 08             	mov    0x8(%ebp),%eax
+  800619:	0f b6 00             	movzbl (%eax),%eax
+  80061c:	3c 7a                	cmp    $0x7a,%al
+  80061e:	7f 11                	jg     800631 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800620:	8b 45 08             	mov    0x8(%ebp),%eax
+  800623:	0f b6 00             	movzbl (%eax),%eax
+  800626:	0f be c0             	movsbl %al,%eax
+  800629:	83 e8 57             	sub    $0x57,%eax
+  80062c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80062f:	eb 23                	jmp    800654 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800631:	8b 45 08             	mov    0x8(%ebp),%eax
+  800634:	0f b6 00             	movzbl (%eax),%eax
+  800637:	3c 40                	cmp    $0x40,%al
+  800639:	7e 3c                	jle    800677 <strtol+0x13d>
+  80063b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80063e:	0f b6 00             	movzbl (%eax),%eax
+  800641:	3c 5a                	cmp    $0x5a,%al
+  800643:	7f 32                	jg     800677 <strtol+0x13d>
+            dig = *s - 'A' + 10;
+  800645:	8b 45 08             	mov    0x8(%ebp),%eax
+  800648:	0f b6 00             	movzbl (%eax),%eax
+  80064b:	0f be c0             	movsbl %al,%eax
+  80064e:	83 e8 37             	sub    $0x37,%eax
+  800651:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  800654:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800657:	3b 45 10             	cmp    0x10(%ebp),%eax
+  80065a:	7d 1a                	jge    800676 <strtol+0x13c>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  80065c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800660:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800663:	0f af 45 10          	imul   0x10(%ebp),%eax
+  800667:	89 c2                	mov    %eax,%edx
+  800669:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80066c:	01 d0                	add    %edx,%eax
+  80066e:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800671:	e9 71 ff ff ff       	jmp    8005e7 <strtol+0xad>
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+            break;
+  800676:	90                   	nop
+        }
+        s ++, val = (val * base) + dig;
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  800677:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80067b:	74 08                	je     800685 <strtol+0x14b>
+        *endptr = (char *) s;
+  80067d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800680:	8b 55 08             	mov    0x8(%ebp),%edx
+  800683:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  800685:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  800689:	74 07                	je     800692 <strtol+0x158>
+  80068b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80068e:	f7 d8                	neg    %eax
+  800690:	eb 03                	jmp    800695 <strtol+0x15b>
+  800692:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  800695:	c9                   	leave  
+  800696:	c3                   	ret    
+
+00800697 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  800697:	55                   	push   %ebp
+  800698:	89 e5                	mov    %esp,%ebp
+  80069a:	57                   	push   %edi
+  80069b:	83 ec 24             	sub    $0x24,%esp
+  80069e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006a1:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006a4:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006a8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006ab:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006ae:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006b1:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006b7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006ba:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006be:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006c1:	89 d7                	mov    %edx,%edi
+  8006c3:	f3 aa                	rep stos %al,%es:(%edi)
+  8006c5:	89 fa                	mov    %edi,%edx
+  8006c7:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8006ca:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  8006cd:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006d0:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  8006d1:	83 c4 24             	add    $0x24,%esp
+  8006d4:	5f                   	pop    %edi
+  8006d5:	5d                   	pop    %ebp
+  8006d6:	c3                   	ret    
+
+008006d7 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  8006d7:	55                   	push   %ebp
+  8006d8:	89 e5                	mov    %esp,%ebp
+  8006da:	57                   	push   %edi
+  8006db:	56                   	push   %esi
+  8006dc:	53                   	push   %ebx
+  8006dd:	83 ec 30             	sub    $0x30,%esp
+  8006e0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8006e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8006e6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006e9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  8006ec:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006ef:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  8006f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8006f5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  8006f8:	73 42                	jae    80073c <memmove+0x65>
+  8006fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8006fd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800700:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800703:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800706:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800709:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  80070c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  80070f:	c1 e8 02             	shr    $0x2,%eax
+  800712:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  800714:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800717:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80071a:	89 d7                	mov    %edx,%edi
+  80071c:	89 c6                	mov    %eax,%esi
+  80071e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800720:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  800723:	83 e1 03             	and    $0x3,%ecx
+  800726:	74 02                	je     80072a <memmove+0x53>
+  800728:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  80072a:	89 f0                	mov    %esi,%eax
+  80072c:	89 fa                	mov    %edi,%edx
+  80072e:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800731:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800734:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  800737:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  80073a:	eb 36                	jmp    800772 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  80073c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80073f:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800742:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800745:	01 c2                	add    %eax,%edx
+  800747:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80074a:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  80074d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800750:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  800753:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800756:	89 c1                	mov    %eax,%ecx
+  800758:	89 d8                	mov    %ebx,%eax
+  80075a:	89 d6                	mov    %edx,%esi
+  80075c:	89 c7                	mov    %eax,%edi
+  80075e:	fd                   	std    
+  80075f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800761:	fc                   	cld    
+  800762:	89 f8                	mov    %edi,%eax
+  800764:	89 f2                	mov    %esi,%edx
+  800766:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800769:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  80076c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  80076f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  800772:	83 c4 30             	add    $0x30,%esp
+  800775:	5b                   	pop    %ebx
+  800776:	5e                   	pop    %esi
+  800777:	5f                   	pop    %edi
+  800778:	5d                   	pop    %ebp
+  800779:	c3                   	ret    
+
+0080077a <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  80077a:	55                   	push   %ebp
+  80077b:	89 e5                	mov    %esp,%ebp
+  80077d:	57                   	push   %edi
+  80077e:	56                   	push   %esi
+  80077f:	83 ec 20             	sub    $0x20,%esp
+  800782:	8b 45 08             	mov    0x8(%ebp),%eax
+  800785:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800788:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80078b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80078e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800791:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800794:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800797:	c1 e8 02             	shr    $0x2,%eax
+  80079a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  80079c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80079f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007a2:	89 d7                	mov    %edx,%edi
+  8007a4:	89 c6                	mov    %eax,%esi
+  8007a6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007a8:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007ab:	83 e1 03             	and    $0x3,%ecx
+  8007ae:	74 02                	je     8007b2 <memcpy+0x38>
+  8007b0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007b2:	89 f0                	mov    %esi,%eax
+  8007b4:	89 fa                	mov    %edi,%edx
+  8007b6:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007b9:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007bc:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  8007bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007c2:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007c3:	83 c4 20             	add    $0x20,%esp
+  8007c6:	5e                   	pop    %esi
+  8007c7:	5f                   	pop    %edi
+  8007c8:	5d                   	pop    %ebp
+  8007c9:	c3                   	ret    
+
+008007ca <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  8007ca:	55                   	push   %ebp
+  8007cb:	89 e5                	mov    %esp,%ebp
+  8007cd:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  8007d0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007d3:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  8007d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007d9:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  8007dc:	eb 30                	jmp    80080e <memcmp+0x44>
+        if (*s1 != *s2) {
+  8007de:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8007e1:	0f b6 10             	movzbl (%eax),%edx
+  8007e4:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8007e7:	0f b6 00             	movzbl (%eax),%eax
+  8007ea:	38 c2                	cmp    %al,%dl
+  8007ec:	74 18                	je     800806 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8007ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8007f1:	0f b6 00             	movzbl (%eax),%eax
+  8007f4:	0f b6 d0             	movzbl %al,%edx
+  8007f7:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8007fa:	0f b6 00             	movzbl (%eax),%eax
+  8007fd:	0f b6 c0             	movzbl %al,%eax
+  800800:	29 c2                	sub    %eax,%edx
+  800802:	89 d0                	mov    %edx,%eax
+  800804:	eb 1a                	jmp    800820 <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  800806:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  80080a:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  80080e:	8b 45 10             	mov    0x10(%ebp),%eax
+  800811:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800814:	89 55 10             	mov    %edx,0x10(%ebp)
+  800817:	85 c0                	test   %eax,%eax
+  800819:	75 c3                	jne    8007de <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  80081b:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800820:	c9                   	leave  
+  800821:	c3                   	ret    
+
+00800822 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  800822:	55                   	push   %ebp
+  800823:	89 e5                	mov    %esp,%ebp
+  800825:	83 ec 38             	sub    $0x38,%esp
+  800828:	8b 45 10             	mov    0x10(%ebp),%eax
+  80082b:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  80082e:	8b 45 14             	mov    0x14(%ebp),%eax
+  800831:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  800834:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  800837:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  80083a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  80083d:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800840:	8b 45 18             	mov    0x18(%ebp),%eax
+  800843:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800846:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800849:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80084c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80084f:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  800852:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800855:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800858:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  80085c:	74 1c                	je     80087a <printnum+0x58>
+  80085e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800861:	ba 00 00 00 00       	mov    $0x0,%edx
+  800866:	f7 75 e4             	divl   -0x1c(%ebp)
+  800869:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  80086c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80086f:	ba 00 00 00 00       	mov    $0x0,%edx
+  800874:	f7 75 e4             	divl   -0x1c(%ebp)
+  800877:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80087a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80087d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800880:	f7 75 e4             	divl   -0x1c(%ebp)
+  800883:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800886:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  800889:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  80088c:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80088f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800892:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800895:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800898:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  80089b:	8b 45 18             	mov    0x18(%ebp),%eax
+  80089e:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008a3:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008a6:	77 41                	ja     8008e9 <printnum+0xc7>
+  8008a8:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008ab:	72 05                	jb     8008b2 <printnum+0x90>
+  8008ad:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  8008b0:	77 37                	ja     8008e9 <printnum+0xc7>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008b2:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008b5:	83 e8 01             	sub    $0x1,%eax
+  8008b8:	83 ec 04             	sub    $0x4,%esp
+  8008bb:	ff 75 20             	pushl  0x20(%ebp)
+  8008be:	50                   	push   %eax
+  8008bf:	ff 75 18             	pushl  0x18(%ebp)
+  8008c2:	ff 75 ec             	pushl  -0x14(%ebp)
+  8008c5:	ff 75 e8             	pushl  -0x18(%ebp)
+  8008c8:	ff 75 0c             	pushl  0xc(%ebp)
+  8008cb:	ff 75 08             	pushl  0x8(%ebp)
+  8008ce:	e8 4f ff ff ff       	call   800822 <printnum>
+  8008d3:	83 c4 20             	add    $0x20,%esp
+  8008d6:	eb 1b                	jmp    8008f3 <printnum+0xd1>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  8008d8:	83 ec 08             	sub    $0x8,%esp
+  8008db:	ff 75 0c             	pushl  0xc(%ebp)
+  8008de:	ff 75 20             	pushl  0x20(%ebp)
+  8008e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8008e4:	ff d0                	call   *%eax
+  8008e6:	83 c4 10             	add    $0x10,%esp
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  8008e9:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  8008ed:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  8008f1:	7f e5                	jg     8008d8 <printnum+0xb6>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  8008f3:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  8008f6:	05 24 11 80 00       	add    $0x801124,%eax
+  8008fb:	0f b6 00             	movzbl (%eax),%eax
+  8008fe:	0f be c0             	movsbl %al,%eax
+  800901:	83 ec 08             	sub    $0x8,%esp
+  800904:	ff 75 0c             	pushl  0xc(%ebp)
+  800907:	50                   	push   %eax
+  800908:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090b:	ff d0                	call   *%eax
+  80090d:	83 c4 10             	add    $0x10,%esp
+}
+  800910:	90                   	nop
+  800911:	c9                   	leave  
+  800912:	c3                   	ret    
+
+00800913 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  800913:	55                   	push   %ebp
+  800914:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800916:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  80091a:	7e 14                	jle    800930 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  80091c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80091f:	8b 00                	mov    (%eax),%eax
+  800921:	8d 48 08             	lea    0x8(%eax),%ecx
+  800924:	8b 55 08             	mov    0x8(%ebp),%edx
+  800927:	89 0a                	mov    %ecx,(%edx)
+  800929:	8b 50 04             	mov    0x4(%eax),%edx
+  80092c:	8b 00                	mov    (%eax),%eax
+  80092e:	eb 30                	jmp    800960 <getuint+0x4d>
+    }
+    else if (lflag) {
+  800930:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800934:	74 16                	je     80094c <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  800936:	8b 45 08             	mov    0x8(%ebp),%eax
+  800939:	8b 00                	mov    (%eax),%eax
+  80093b:	8d 48 04             	lea    0x4(%eax),%ecx
+  80093e:	8b 55 08             	mov    0x8(%ebp),%edx
+  800941:	89 0a                	mov    %ecx,(%edx)
+  800943:	8b 00                	mov    (%eax),%eax
+  800945:	ba 00 00 00 00       	mov    $0x0,%edx
+  80094a:	eb 14                	jmp    800960 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  80094c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80094f:	8b 00                	mov    (%eax),%eax
+  800951:	8d 48 04             	lea    0x4(%eax),%ecx
+  800954:	8b 55 08             	mov    0x8(%ebp),%edx
+  800957:	89 0a                	mov    %ecx,(%edx)
+  800959:	8b 00                	mov    (%eax),%eax
+  80095b:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800960:	5d                   	pop    %ebp
+  800961:	c3                   	ret    
+
+00800962 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  800962:	55                   	push   %ebp
+  800963:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  800965:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800969:	7e 14                	jle    80097f <getint+0x1d>
+        return va_arg(*ap, long long);
+  80096b:	8b 45 08             	mov    0x8(%ebp),%eax
+  80096e:	8b 00                	mov    (%eax),%eax
+  800970:	8d 48 08             	lea    0x8(%eax),%ecx
+  800973:	8b 55 08             	mov    0x8(%ebp),%edx
+  800976:	89 0a                	mov    %ecx,(%edx)
+  800978:	8b 50 04             	mov    0x4(%eax),%edx
+  80097b:	8b 00                	mov    (%eax),%eax
+  80097d:	eb 28                	jmp    8009a7 <getint+0x45>
+    }
+    else if (lflag) {
+  80097f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  800983:	74 12                	je     800997 <getint+0x35>
+        return va_arg(*ap, long);
+  800985:	8b 45 08             	mov    0x8(%ebp),%eax
+  800988:	8b 00                	mov    (%eax),%eax
+  80098a:	8d 48 04             	lea    0x4(%eax),%ecx
+  80098d:	8b 55 08             	mov    0x8(%ebp),%edx
+  800990:	89 0a                	mov    %ecx,(%edx)
+  800992:	8b 00                	mov    (%eax),%eax
+  800994:	99                   	cltd   
+  800995:	eb 10                	jmp    8009a7 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  800997:	8b 45 08             	mov    0x8(%ebp),%eax
+  80099a:	8b 00                	mov    (%eax),%eax
+  80099c:	8d 48 04             	lea    0x4(%eax),%ecx
+  80099f:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009a2:	89 0a                	mov    %ecx,(%edx)
+  8009a4:	8b 00                	mov    (%eax),%eax
+  8009a6:	99                   	cltd   
+    }
+}
+  8009a7:	5d                   	pop    %ebp
+  8009a8:	c3                   	ret    
+
+008009a9 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009a9:	55                   	push   %ebp
+  8009aa:	89 e5                	mov    %esp,%ebp
+  8009ac:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009af:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8009b8:	50                   	push   %eax
+  8009b9:	ff 75 10             	pushl  0x10(%ebp)
+  8009bc:	ff 75 0c             	pushl  0xc(%ebp)
+  8009bf:	ff 75 08             	pushl  0x8(%ebp)
+  8009c2:	e8 06 00 00 00       	call   8009cd <vprintfmt>
+  8009c7:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8009ca:	90                   	nop
+  8009cb:	c9                   	leave  
+  8009cc:	c3                   	ret    
+
+008009cd <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8009cd:	55                   	push   %ebp
+  8009ce:	89 e5                	mov    %esp,%ebp
+  8009d0:	56                   	push   %esi
+  8009d1:	53                   	push   %ebx
+  8009d2:	83 ec 20             	sub    $0x20,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009d5:	eb 17                	jmp    8009ee <vprintfmt+0x21>
+            if (ch == '\0') {
+  8009d7:	85 db                	test   %ebx,%ebx
+  8009d9:	0f 84 8e 03 00 00    	je     800d6d <vprintfmt+0x3a0>
+                return;
+            }
+            putch(ch, putdat);
+  8009df:	83 ec 08             	sub    $0x8,%esp
+  8009e2:	ff 75 0c             	pushl  0xc(%ebp)
+  8009e5:	53                   	push   %ebx
+  8009e6:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009e9:	ff d0                	call   *%eax
+  8009eb:	83 c4 10             	add    $0x10,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009ee:	8b 45 10             	mov    0x10(%ebp),%eax
+  8009f1:	8d 50 01             	lea    0x1(%eax),%edx
+  8009f4:	89 55 10             	mov    %edx,0x10(%ebp)
+  8009f7:	0f b6 00             	movzbl (%eax),%eax
+  8009fa:	0f b6 d8             	movzbl %al,%ebx
+  8009fd:	83 fb 25             	cmp    $0x25,%ebx
+  800a00:	75 d5                	jne    8009d7 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a02:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a06:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a10:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a13:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a1a:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a1d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a20:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a23:	8d 50 01             	lea    0x1(%eax),%edx
+  800a26:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a29:	0f b6 00             	movzbl (%eax),%eax
+  800a2c:	0f b6 d8             	movzbl %al,%ebx
+  800a2f:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a32:	83 f8 55             	cmp    $0x55,%eax
+  800a35:	0f 87 05 03 00 00    	ja     800d40 <vprintfmt+0x373>
+  800a3b:	8b 04 85 48 11 80 00 	mov    0x801148(,%eax,4),%eax
+  800a42:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a44:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a48:	eb d6                	jmp    800a20 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a4a:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800a4e:	eb d0                	jmp    800a20 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a50:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800a57:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a5a:	89 d0                	mov    %edx,%eax
+  800a5c:	c1 e0 02             	shl    $0x2,%eax
+  800a5f:	01 d0                	add    %edx,%eax
+  800a61:	01 c0                	add    %eax,%eax
+  800a63:	01 d8                	add    %ebx,%eax
+  800a65:	83 e8 30             	sub    $0x30,%eax
+  800a68:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800a6b:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a6e:	0f b6 00             	movzbl (%eax),%eax
+  800a71:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800a74:	83 fb 2f             	cmp    $0x2f,%ebx
+  800a77:	7e 39                	jle    800ab2 <vprintfmt+0xe5>
+  800a79:	83 fb 39             	cmp    $0x39,%ebx
+  800a7c:	7f 34                	jg     800ab2 <vprintfmt+0xe5>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a7e:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  800a82:	eb d3                	jmp    800a57 <vprintfmt+0x8a>
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800a84:	8b 45 14             	mov    0x14(%ebp),%eax
+  800a87:	8d 50 04             	lea    0x4(%eax),%edx
+  800a8a:	89 55 14             	mov    %edx,0x14(%ebp)
+  800a8d:	8b 00                	mov    (%eax),%eax
+  800a8f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800a92:	eb 1f                	jmp    800ab3 <vprintfmt+0xe6>
+
+        case '.':
+            if (width < 0)
+  800a94:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800a98:	79 86                	jns    800a20 <vprintfmt+0x53>
+                width = 0;
+  800a9a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800aa1:	e9 7a ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800aa6:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800aad:	e9 6e ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+            goto process_precision;
+  800ab2:	90                   	nop
+        case '#':
+            altflag = 1;
+            goto reswitch;
+
+        process_precision:
+            if (width < 0)
+  800ab3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ab7:	0f 89 63 ff ff ff    	jns    800a20 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800abd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ac0:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800ac3:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800aca:	e9 51 ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800acf:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800ad3:	e9 48 ff ff ff       	jmp    800a20 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800ad8:	8b 45 14             	mov    0x14(%ebp),%eax
+  800adb:	8d 50 04             	lea    0x4(%eax),%edx
+  800ade:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ae1:	8b 00                	mov    (%eax),%eax
+  800ae3:	83 ec 08             	sub    $0x8,%esp
+  800ae6:	ff 75 0c             	pushl  0xc(%ebp)
+  800ae9:	50                   	push   %eax
+  800aea:	8b 45 08             	mov    0x8(%ebp),%eax
+  800aed:	ff d0                	call   *%eax
+  800aef:	83 c4 10             	add    $0x10,%esp
+            break;
+  800af2:	e9 71 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800af7:	8b 45 14             	mov    0x14(%ebp),%eax
+  800afa:	8d 50 04             	lea    0x4(%eax),%edx
+  800afd:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b00:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b02:	85 db                	test   %ebx,%ebx
+  800b04:	79 02                	jns    800b08 <vprintfmt+0x13b>
+                err = -err;
+  800b06:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b08:	83 fb 18             	cmp    $0x18,%ebx
+  800b0b:	7f 0b                	jg     800b18 <vprintfmt+0x14b>
+  800b0d:	8b 34 9d c0 10 80 00 	mov    0x8010c0(,%ebx,4),%esi
+  800b14:	85 f6                	test   %esi,%esi
+  800b16:	75 19                	jne    800b31 <vprintfmt+0x164>
+                printfmt(putch, putdat, "error %d", err);
+  800b18:	53                   	push   %ebx
+  800b19:	68 35 11 80 00       	push   $0x801135
+  800b1e:	ff 75 0c             	pushl  0xc(%ebp)
+  800b21:	ff 75 08             	pushl  0x8(%ebp)
+  800b24:	e8 80 fe ff ff       	call   8009a9 <printfmt>
+  800b29:	83 c4 10             	add    $0x10,%esp
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b2c:	e9 37 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  800b31:	56                   	push   %esi
+  800b32:	68 3e 11 80 00       	push   $0x80113e
+  800b37:	ff 75 0c             	pushl  0xc(%ebp)
+  800b3a:	ff 75 08             	pushl  0x8(%ebp)
+  800b3d:	e8 67 fe ff ff       	call   8009a9 <printfmt>
+  800b42:	83 c4 10             	add    $0x10,%esp
+            }
+            break;
+  800b45:	e9 1e 02 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800b4a:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b4d:	8d 50 04             	lea    0x4(%eax),%edx
+  800b50:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b53:	8b 30                	mov    (%eax),%esi
+  800b55:	85 f6                	test   %esi,%esi
+  800b57:	75 05                	jne    800b5e <vprintfmt+0x191>
+                p = "(null)";
+  800b59:	be 41 11 80 00       	mov    $0x801141,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800b5e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b62:	7e 76                	jle    800bda <vprintfmt+0x20d>
+  800b64:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800b68:	74 70                	je     800bda <vprintfmt+0x20d>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b6a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b6d:	83 ec 08             	sub    $0x8,%esp
+  800b70:	50                   	push   %eax
+  800b71:	56                   	push   %esi
+  800b72:	e8 17 f8 ff ff       	call   80038e <strnlen>
+  800b77:	83 c4 10             	add    $0x10,%esp
+  800b7a:	89 c2                	mov    %eax,%edx
+  800b7c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800b7f:	29 d0                	sub    %edx,%eax
+  800b81:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800b84:	eb 17                	jmp    800b9d <vprintfmt+0x1d0>
+                    putch(padc, putdat);
+  800b86:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800b8a:	83 ec 08             	sub    $0x8,%esp
+  800b8d:	ff 75 0c             	pushl  0xc(%ebp)
+  800b90:	50                   	push   %eax
+  800b91:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b94:	ff d0                	call   *%eax
+  800b96:	83 c4 10             	add    $0x10,%esp
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b99:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800b9d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ba1:	7f e3                	jg     800b86 <vprintfmt+0x1b9>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800ba3:	eb 35                	jmp    800bda <vprintfmt+0x20d>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800ba5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800ba9:	74 1c                	je     800bc7 <vprintfmt+0x1fa>
+  800bab:	83 fb 1f             	cmp    $0x1f,%ebx
+  800bae:	7e 05                	jle    800bb5 <vprintfmt+0x1e8>
+  800bb0:	83 fb 7e             	cmp    $0x7e,%ebx
+  800bb3:	7e 12                	jle    800bc7 <vprintfmt+0x1fa>
+                    putch('?', putdat);
+  800bb5:	83 ec 08             	sub    $0x8,%esp
+  800bb8:	ff 75 0c             	pushl  0xc(%ebp)
+  800bbb:	6a 3f                	push   $0x3f
+  800bbd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bc0:	ff d0                	call   *%eax
+  800bc2:	83 c4 10             	add    $0x10,%esp
+  800bc5:	eb 0f                	jmp    800bd6 <vprintfmt+0x209>
+                }
+                else {
+                    putch(ch, putdat);
+  800bc7:	83 ec 08             	sub    $0x8,%esp
+  800bca:	ff 75 0c             	pushl  0xc(%ebp)
+  800bcd:	53                   	push   %ebx
+  800bce:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bd1:	ff d0                	call   *%eax
+  800bd3:	83 c4 10             	add    $0x10,%esp
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bd6:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800bda:	89 f0                	mov    %esi,%eax
+  800bdc:	8d 70 01             	lea    0x1(%eax),%esi
+  800bdf:	0f b6 00             	movzbl (%eax),%eax
+  800be2:	0f be d8             	movsbl %al,%ebx
+  800be5:	85 db                	test   %ebx,%ebx
+  800be7:	74 26                	je     800c0f <vprintfmt+0x242>
+  800be9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800bed:	78 b6                	js     800ba5 <vprintfmt+0x1d8>
+  800bef:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  800bf3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800bf7:	79 ac                	jns    800ba5 <vprintfmt+0x1d8>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800bf9:	eb 14                	jmp    800c0f <vprintfmt+0x242>
+                putch(' ', putdat);
+  800bfb:	83 ec 08             	sub    $0x8,%esp
+  800bfe:	ff 75 0c             	pushl  0xc(%ebp)
+  800c01:	6a 20                	push   $0x20
+  800c03:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c06:	ff d0                	call   *%eax
+  800c08:	83 c4 10             	add    $0x10,%esp
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c0b:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c0f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c13:	7f e6                	jg     800bfb <vprintfmt+0x22e>
+                putch(' ', putdat);
+            }
+            break;
+  800c15:	e9 4e 01 00 00       	jmp    800d68 <vprintfmt+0x39b>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c1a:	83 ec 08             	sub    $0x8,%esp
+  800c1d:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c20:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c23:	50                   	push   %eax
+  800c24:	e8 39 fd ff ff       	call   800962 <getint>
+  800c29:	83 c4 10             	add    $0x10,%esp
+  800c2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c2f:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c32:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c35:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c38:	85 d2                	test   %edx,%edx
+  800c3a:	79 23                	jns    800c5f <vprintfmt+0x292>
+                putch('-', putdat);
+  800c3c:	83 ec 08             	sub    $0x8,%esp
+  800c3f:	ff 75 0c             	pushl  0xc(%ebp)
+  800c42:	6a 2d                	push   $0x2d
+  800c44:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c47:	ff d0                	call   *%eax
+  800c49:	83 c4 10             	add    $0x10,%esp
+                num = -(long long)num;
+  800c4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c4f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c52:	f7 d8                	neg    %eax
+  800c54:	83 d2 00             	adc    $0x0,%edx
+  800c57:	f7 da                	neg    %edx
+  800c59:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c5c:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800c5f:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c66:	e9 9f 00 00 00       	jmp    800d0a <vprintfmt+0x33d>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800c6b:	83 ec 08             	sub    $0x8,%esp
+  800c6e:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c71:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c74:	50                   	push   %eax
+  800c75:	e8 99 fc ff ff       	call   800913 <getuint>
+  800c7a:	83 c4 10             	add    $0x10,%esp
+  800c7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c80:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800c83:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c8a:	eb 7e                	jmp    800d0a <vprintfmt+0x33d>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800c8c:	83 ec 08             	sub    $0x8,%esp
+  800c8f:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c92:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c95:	50                   	push   %eax
+  800c96:	e8 78 fc ff ff       	call   800913 <getuint>
+  800c9b:	83 c4 10             	add    $0x10,%esp
+  800c9e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ca1:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800ca4:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800cab:	eb 5d                	jmp    800d0a <vprintfmt+0x33d>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800cad:	83 ec 08             	sub    $0x8,%esp
+  800cb0:	ff 75 0c             	pushl  0xc(%ebp)
+  800cb3:	6a 30                	push   $0x30
+  800cb5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cb8:	ff d0                	call   *%eax
+  800cba:	83 c4 10             	add    $0x10,%esp
+            putch('x', putdat);
+  800cbd:	83 ec 08             	sub    $0x8,%esp
+  800cc0:	ff 75 0c             	pushl  0xc(%ebp)
+  800cc3:	6a 78                	push   $0x78
+  800cc5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cc8:	ff d0                	call   *%eax
+  800cca:	83 c4 10             	add    $0x10,%esp
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800ccd:	8b 45 14             	mov    0x14(%ebp),%eax
+  800cd0:	8d 50 04             	lea    0x4(%eax),%edx
+  800cd3:	89 55 14             	mov    %edx,0x14(%ebp)
+  800cd6:	8b 00                	mov    (%eax),%eax
+  800cd8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cdb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800ce2:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800ce9:	eb 1f                	jmp    800d0a <vprintfmt+0x33d>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800ceb:	83 ec 08             	sub    $0x8,%esp
+  800cee:	ff 75 e0             	pushl  -0x20(%ebp)
+  800cf1:	8d 45 14             	lea    0x14(%ebp),%eax
+  800cf4:	50                   	push   %eax
+  800cf5:	e8 19 fc ff ff       	call   800913 <getuint>
+  800cfa:	83 c4 10             	add    $0x10,%esp
+  800cfd:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d00:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d03:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d0a:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d11:	83 ec 04             	sub    $0x4,%esp
+  800d14:	52                   	push   %edx
+  800d15:	ff 75 e8             	pushl  -0x18(%ebp)
+  800d18:	50                   	push   %eax
+  800d19:	ff 75 f4             	pushl  -0xc(%ebp)
+  800d1c:	ff 75 f0             	pushl  -0x10(%ebp)
+  800d1f:	ff 75 0c             	pushl  0xc(%ebp)
+  800d22:	ff 75 08             	pushl  0x8(%ebp)
+  800d25:	e8 f8 fa ff ff       	call   800822 <printnum>
+  800d2a:	83 c4 20             	add    $0x20,%esp
+            break;
+  800d2d:	eb 39                	jmp    800d68 <vprintfmt+0x39b>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800d2f:	83 ec 08             	sub    $0x8,%esp
+  800d32:	ff 75 0c             	pushl  0xc(%ebp)
+  800d35:	53                   	push   %ebx
+  800d36:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d39:	ff d0                	call   *%eax
+  800d3b:	83 c4 10             	add    $0x10,%esp
+            break;
+  800d3e:	eb 28                	jmp    800d68 <vprintfmt+0x39b>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800d40:	83 ec 08             	sub    $0x8,%esp
+  800d43:	ff 75 0c             	pushl  0xc(%ebp)
+  800d46:	6a 25                	push   $0x25
+  800d48:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d4b:	ff d0                	call   *%eax
+  800d4d:	83 c4 10             	add    $0x10,%esp
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800d50:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d54:	eb 04                	jmp    800d5a <vprintfmt+0x38d>
+  800d56:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d5a:	8b 45 10             	mov    0x10(%ebp),%eax
+  800d5d:	83 e8 01             	sub    $0x1,%eax
+  800d60:	0f b6 00             	movzbl (%eax),%eax
+  800d63:	3c 25                	cmp    $0x25,%al
+  800d65:	75 ef                	jne    800d56 <vprintfmt+0x389>
+                /* do nothing */;
+            break;
+  800d67:	90                   	nop
+        }
+    }
+  800d68:	e9 68 fc ff ff       	jmp    8009d5 <vprintfmt+0x8>
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+            if (ch == '\0') {
+                return;
+  800d6d:	90                   	nop
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  800d6e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  800d71:	5b                   	pop    %ebx
+  800d72:	5e                   	pop    %esi
+  800d73:	5d                   	pop    %ebp
+  800d74:	c3                   	ret    
+
+00800d75 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800d75:	55                   	push   %ebp
+  800d76:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800d78:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d7b:	8b 40 08             	mov    0x8(%eax),%eax
+  800d7e:	8d 50 01             	lea    0x1(%eax),%edx
+  800d81:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d84:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800d87:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d8a:	8b 10                	mov    (%eax),%edx
+  800d8c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d8f:	8b 40 04             	mov    0x4(%eax),%eax
+  800d92:	39 c2                	cmp    %eax,%edx
+  800d94:	73 12                	jae    800da8 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800d96:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800d99:	8b 00                	mov    (%eax),%eax
+  800d9b:	8d 48 01             	lea    0x1(%eax),%ecx
+  800d9e:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800da1:	89 0a                	mov    %ecx,(%edx)
+  800da3:	8b 55 08             	mov    0x8(%ebp),%edx
+  800da6:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800da8:	90                   	nop
+  800da9:	5d                   	pop    %ebp
+  800daa:	c3                   	ret    
+
+00800dab <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800dab:	55                   	push   %ebp
+  800dac:	89 e5                	mov    %esp,%ebp
+  800dae:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800db1:	8d 45 14             	lea    0x14(%ebp),%eax
+  800db4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800db7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800dba:	50                   	push   %eax
+  800dbb:	ff 75 10             	pushl  0x10(%ebp)
+  800dbe:	ff 75 0c             	pushl  0xc(%ebp)
+  800dc1:	ff 75 08             	pushl  0x8(%ebp)
+  800dc4:	e8 0b 00 00 00       	call   800dd4 <vsnprintf>
+  800dc9:	83 c4 10             	add    $0x10,%esp
+  800dcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800dcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800dd2:	c9                   	leave  
+  800dd3:	c3                   	ret    
+
+00800dd4 <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800dd4:	55                   	push   %ebp
+  800dd5:	89 e5                	mov    %esp,%ebp
+  800dd7:	83 ec 18             	sub    $0x18,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800dda:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ddd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800de0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800de3:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800de6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800de9:	01 d0                	add    %edx,%eax
+  800deb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800dee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800df5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800df9:	74 0a                	je     800e05 <vsnprintf+0x31>
+  800dfb:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800dfe:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e01:	39 c2                	cmp    %eax,%edx
+  800e03:	76 07                	jbe    800e0c <vsnprintf+0x38>
+        return -E_INVAL;
+  800e05:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e0a:	eb 20                	jmp    800e2c <vsnprintf+0x58>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e0c:	ff 75 14             	pushl  0x14(%ebp)
+  800e0f:	ff 75 10             	pushl  0x10(%ebp)
+  800e12:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800e15:	50                   	push   %eax
+  800e16:	68 75 0d 80 00       	push   $0x800d75
+  800e1b:	e8 ad fb ff ff       	call   8009cd <vprintfmt>
+  800e20:	83 c4 10             	add    $0x10,%esp
+    // null terminate the buffer
+    *b.buf = '\0';
+  800e23:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e26:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800e29:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e2c:	c9                   	leave  
+  800e2d:	c3                   	ret    
+
+00800e2e <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800e2e:	55                   	push   %ebp
+  800e2f:	89 e5                	mov    %esp,%ebp
+  800e31:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800e34:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e37:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800e3d:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800e40:	b8 20 00 00 00       	mov    $0x20,%eax
+  800e45:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800e48:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800e4b:	89 c1                	mov    %eax,%ecx
+  800e4d:	d3 ea                	shr    %cl,%edx
+  800e4f:	89 d0                	mov    %edx,%eax
+}
+  800e51:	c9                   	leave  
+  800e52:	c3                   	ret    
+
+00800e53 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800e53:	55                   	push   %ebp
+  800e54:	89 e5                	mov    %esp,%ebp
+  800e56:	57                   	push   %edi
+  800e57:	56                   	push   %esi
+  800e58:	53                   	push   %ebx
+  800e59:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800e5c:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e61:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800e67:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800e6d:	6b f0 05             	imul   $0x5,%eax,%esi
+  800e70:	01 fe                	add    %edi,%esi
+  800e72:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800e77:	f7 e7                	mul    %edi
+  800e79:	01 d6                	add    %edx,%esi
+  800e7b:	89 f2                	mov    %esi,%edx
+  800e7d:	83 c0 0b             	add    $0xb,%eax
+  800e80:	83 d2 00             	adc    $0x0,%edx
+  800e83:	89 c7                	mov    %eax,%edi
+  800e85:	83 e7 ff             	and    $0xffffffff,%edi
+  800e88:	89 f9                	mov    %edi,%ecx
+  800e8a:	0f b7 da             	movzwl %dx,%ebx
+  800e8d:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800e93:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800e99:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e9e:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ea4:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ea8:	c1 ea 0c             	shr    $0xc,%edx
+  800eab:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800eae:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800eb1:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800eb8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ebb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ebe:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ec1:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800ec4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ec7:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800eca:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ece:	74 1c                	je     800eec <rand+0x99>
+  800ed0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ed3:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ed8:	f7 75 dc             	divl   -0x24(%ebp)
+  800edb:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800ede:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ee1:	ba 00 00 00 00       	mov    $0x0,%edx
+  800ee6:	f7 75 dc             	divl   -0x24(%ebp)
+  800ee9:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800eec:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800eef:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800ef2:	f7 75 dc             	divl   -0x24(%ebp)
+  800ef5:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ef8:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800efb:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800efe:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800f01:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f04:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f07:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800f0a:	83 c4 24             	add    $0x24,%esp
+  800f0d:	5b                   	pop    %ebx
+  800f0e:	5e                   	pop    %esi
+  800f0f:	5f                   	pop    %edi
+  800f10:	5d                   	pop    %ebp
+  800f11:	c3                   	ret    
+
+00800f12 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800f12:	55                   	push   %ebp
+  800f13:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800f15:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f18:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f1d:	a3 00 20 80 00       	mov    %eax,0x802000
+  800f22:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800f28:	90                   	nop
+  800f29:	5d                   	pop    %ebp
+  800f2a:	c3                   	ret    
+
+00800f2b <main>:
+#include <ulib.h>
+#include <stdio.h>
+
+int
+main(void) {
+  800f2b:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  800f2f:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f32:	ff 71 fc             	pushl  -0x4(%ecx)
+  800f35:	55                   	push   %ebp
+  800f36:	89 e5                	mov    %esp,%ebp
+  800f38:	51                   	push   %ecx
+  800f39:	83 ec 14             	sub    $0x14,%esp
+    int i;
+    cprintf("Hello, I am process %d.\n", getpid());
+  800f3c:	e8 fd f2 ff ff       	call   80023e <getpid>
+  800f41:	83 ec 08             	sub    $0x8,%esp
+  800f44:	50                   	push   %eax
+  800f45:	68 a0 12 80 00       	push   $0x8012a0
+  800f4a:	e8 8a f3 ff ff       	call   8002d9 <cprintf>
+  800f4f:	83 c4 10             	add    $0x10,%esp
+    for (i = 0; i < 5; i ++) {
+  800f52:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  800f59:	eb 22                	jmp    800f7d <main+0x52>
+        yield();
+  800f5b:	e8 ba f2 ff ff       	call   80021a <yield>
+        cprintf("Back in process %d, iteration %d.\n", getpid(), i);
+  800f60:	e8 d9 f2 ff ff       	call   80023e <getpid>
+  800f65:	83 ec 04             	sub    $0x4,%esp
+  800f68:	ff 75 f4             	pushl  -0xc(%ebp)
+  800f6b:	50                   	push   %eax
+  800f6c:	68 bc 12 80 00       	push   $0x8012bc
+  800f71:	e8 63 f3 ff ff       	call   8002d9 <cprintf>
+  800f76:	83 c4 10             	add    $0x10,%esp
+
+int
+main(void) {
+    int i;
+    cprintf("Hello, I am process %d.\n", getpid());
+    for (i = 0; i < 5; i ++) {
+  800f79:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  800f7d:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
+  800f81:	7e d8                	jle    800f5b <main+0x30>
+        yield();
+        cprintf("Back in process %d, iteration %d.\n", getpid(), i);
+    }
+    cprintf("All done in process %d.\n", getpid());
+  800f83:	e8 b6 f2 ff ff       	call   80023e <getpid>
+  800f88:	83 ec 08             	sub    $0x8,%esp
+  800f8b:	50                   	push   %eax
+  800f8c:	68 df 12 80 00       	push   $0x8012df
+  800f91:	e8 43 f3 ff ff       	call   8002d9 <cprintf>
+  800f96:	83 c4 10             	add    $0x10,%esp
+    cprintf("yield pass.\n");
+  800f99:	83 ec 0c             	sub    $0xc,%esp
+  800f9c:	68 f8 12 80 00       	push   $0x8012f8
+  800fa1:	e8 33 f3 ff ff       	call   8002d9 <cprintf>
+  800fa6:	83 c4 10             	add    $0x10,%esp
+    return 0;
+  800fa9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800fae:	8b 4d fc             	mov    -0x4(%ebp),%ecx
+  800fb1:	c9                   	leave  
+  800fb2:	8d 61 fc             	lea    -0x4(%ecx),%esp
+  800fb5:	c3                   	ret    
diff -r -u -P lab6_original/obj/user/yield.d lab6/obj/user/yield.d
--- lab6_original/obj/user/yield.d	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/yield.d	2016-04-29 16:22:06.844550496 +0800
@@ -0,0 +1,2 @@
+obj/user/yield.o obj/user/yield.d: user/yield.c user/libs/ulib.h \
+ libs/defs.h libs/stdio.h libs/stdarg.h
Binary files lab6_original/obj/user/yield.o and lab6/obj/user/yield.o differ
diff -r -u -P lab6_original/obj/user/yield.sym lab6/obj/user/yield.sym
--- lab6_original/obj/user/yield.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab6/obj/user/yield.sym	2016-04-29 16:22:07.760599997 +0800
@@ -0,0 +1,76 @@
+00800020 .text
+00800fc0 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202d1d .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b5 syscall
+00000000 ulib.c
+00000000 stdio.c
+0080028c cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+008010c0 error_string
+00800822 printnum
+00800913 getuint
+00800962 getint
+00800d75 sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 yield.c
+008003be strcpy
+0080021a yield
+00800201 waitpid
+00800141 sys_yield
+008006d7 memmove
+00800dab snprintf
+008009cd vprintfmt
+0080011d sys_fork
+008002d9 cprintf
+0080023e getpid
+0080077a memcpy
+00800266 lab6_set_priority
+00800dd4 vsnprintf
+0080034d umain
+00202d1c __STAB_END__
+00800150 sys_kill
+00202d1d __STABSTR_BEGIN__
+00800020 __panic
+0080053a strtol
+0080038e strnlen
+0080024b print_pgdir
+00800228 kill
+0080050b strfind
+008001ea wait
+0080027d _start
+00800e53 rand
+00800482 strncmp
+00800171 sys_putc
+008003fe strncpy
+008007ca memcmp
+008001dd fork
+00800697 memset
+00800f2b main
+00800f12 srand
+00800e2e hash32
+008009a9 printfmt
+00203afb __STABSTR_END__
+00800438 strcmp
+00800259 gettime_msec
+00800192 sys_gettime
+008002b0 vcprintf
+0080006e __warn
+008002ff cputs
+008001a1 sys_lab6_set_priority
+008001b7 exit
+0080012c sys_wait
+0080010b sys_exit
+00200010 __STAB_BEGIN__
+00800366 strlen
+00800183 sys_pgdir
+008004d8 strchr
+00800162 sys_getpid
Binary files lab6_original/obj/__user_badarg.out and lab6/obj/__user_badarg.out differ
Binary files lab6_original/obj/__user_badsegment.out and lab6/obj/__user_badsegment.out differ
Binary files lab6_original/obj/__user_divzero.out and lab6/obj/__user_divzero.out differ
Binary files lab6_original/obj/__user_exit.out and lab6/obj/__user_exit.out differ
Binary files lab6_original/obj/__user_faultreadkernel.out and lab6/obj/__user_faultreadkernel.out differ
Binary files lab6_original/obj/__user_faultread.out and lab6/obj/__user_faultread.out differ
Binary files lab6_original/obj/__user_forktest.out and lab6/obj/__user_forktest.out differ
Binary files lab6_original/obj/__user_forktree.out and lab6/obj/__user_forktree.out differ
Binary files lab6_original/obj/__user_hello.out and lab6/obj/__user_hello.out differ
Binary files lab6_original/obj/__user_matrix.out and lab6/obj/__user_matrix.out differ
Binary files lab6_original/obj/__user_pgdir.out and lab6/obj/__user_pgdir.out differ
Binary files lab6_original/obj/__user_priority.out and lab6/obj/__user_priority.out differ
Binary files lab6_original/obj/__user_softint.out and lab6/obj/__user_softint.out differ
Binary files lab6_original/obj/__user_spin.out and lab6/obj/__user_spin.out differ
Binary files lab6_original/obj/__user_testbss.out and lab6/obj/__user_testbss.out differ
Binary files lab6_original/obj/__user_waitkill.out and lab6/obj/__user_waitkill.out differ
Binary files lab6_original/obj/__user_yield.out and lab6/obj/__user_yield.out differ
diff -r -u -P lab6_original/.pgdir.log lab6/.pgdir.log
--- lab6_original/.pgdir.log	1970-01-01 08:00:00.000000000 +0800
+++ lab6/.pgdir.log	2016-04-29 16:22:21.466050903 +0800
@@ -0,0 +1,122 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc010b8fd (phys)
+  edata  0xc01adcdc (phys)
+  end    0xc01b0e58 (phys)
+Kernel executable memory footprint: 708KB
+ebp:0xc012bf48 eip:0xc0100b4f args:0x00010094 0x00010094 0xc012bf78 0xc01000c5 
+    kern/debug/kdebug.c:352: print_stackframe+21
+ebp:0xc012bf58 eip:0xc0100e49 args:0x00000000 0x00000000 0x00000000 0xc012bfc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc012bf78 eip:0xc01000c5 args:0x00000000 0xc012bfa0 0xffff0000 0xc012bfa4 
+    kern/init/init.c:59: grade_backtrace2+19
+ebp:0xc012bf98 eip:0xc01000e7 args:0x00000000 0xffff0000 0xc012bfc4 0x0000002a 
+    kern/init/init.c:64: grade_backtrace1+27
+ebp:0xc012bfb8 eip:0xc0100104 args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:69: grade_backtrace0+19
+ebp:0xc012bfd8 eip:0xc0100125 args:0x00000000 0x00000000 0x00000000 0xc010b900 
+    kern/init/init.c:74: grade_backtrace+26
+ebp:0xc012bff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:33: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31819
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "pgdir".
+I am 2, print pgdir.
+-------------------- BEGIN --------------------
+PDE(001) 00000000-00400000 00400000 urw
+  |-- PTE(00004) 00200000-00204000 00004000 urw
+PDE(001) 00800000-00c00000 00400000 urw
+  |-- PTE(00002) 00800000-00802000 00002000 ur-
+  |-- PTE(00001) 00802000-00803000 00001000 urw
+PDE(001) afc00000-b0000000 00400000 urw
+  |-- PTE(00004) afffc000-b0000000 00004000 urw
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(00001) fac00000-fac01000 00001000 urw
+  |-- PTE(00001) fac02000-fac03000 00001000 urw
+  |-- PTE(00001) faebf000-faec0000 00001000 urw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+pgdir pass.
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:476:
+    initproc exit.
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P lab6_original/.priority.log lab6/.priority.log
--- lab6_original/.priority.log	1970-01-01 08:00:00.000000000 +0800
+++ lab6/.priority.log	2016-04-29 16:22:58.268509201 +0800
@@ -0,0 +1,116 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc010b8fd (phys)
+  edata  0xc01adcdc (phys)
+  end    0xc01b0e58 (phys)
+Kernel executable memory footprint: 708KB
+ebp:0xc012bf48 eip:0xc0100b4f args:0x00010094 0x00010094 0xc012bf78 0xc01000c5 
+    kern/debug/kdebug.c:352: print_stackframe+21
+ebp:0xc012bf58 eip:0xc0100e49 args:0x00000000 0x00000000 0x00000000 0xc012bfc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc012bf78 eip:0xc01000c5 args:0x00000000 0xc012bfa0 0xffff0000 0xc012bfa4 
+    kern/init/init.c:59: grade_backtrace2+19
+ebp:0xc012bf98 eip:0xc01000e7 args:0x00000000 0xffff0000 0xc012bfc4 0x0000002a 
+    kern/init/init.c:64: grade_backtrace1+27
+ebp:0xc012bfb8 eip:0xc0100104 args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:69: grade_backtrace0+19
+ebp:0xc012bfd8 eip:0xc0100125 args:0x00000000 0x00000000 0x00000000 0xc010b900 
+    kern/init/init.c:74: grade_backtrace+26
+ebp:0xc012bff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:33: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31819
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "priority".
+main: fork ok,now need to wait pids.
+child pid 6, acc 1564000, time 1001
+child pid 7, acc 1964000, time 1001
+child pid 4, acc 800000, time 1001
+child pid 5, acc 1188000, time 1001
+child pid 3, acc 412000, time 1002
+main: pid 3, acc 412000, time 1002
+main: pid 4, acc 800000, time 1002
+main: pid 5, acc 1188000, time 1002
+main: pid 6, acc 1564000, time 1002
+main: pid 7, acc 1964000, time 1002
+main: wait pids over
+stride sched correct result: 1 2 3 4 5
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:476:
+    initproc exit.
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P lab6_original/.project lab6/.project
--- lab6_original/.project	1970-01-01 08:00:00.000000000 +0800
+++ lab6/.project	2016-04-20 15:29:50.655704472 +0800
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>lab6</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.cdt.managedbuilder.core.genmakebuilder</name>
+			<triggers>clean,full,incremental,</triggers>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.cdt.managedbuilder.core.ScannerConfigBuilder</name>
+			<triggers>full,incremental,</triggers>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.cdt.core.cnature</nature>
+		<nature>org.eclipse.cdt.core.ccnature</nature>
+		<nature>org.eclipse.cdt.managedbuilder.core.managedBuildNature</nature>
+		<nature>org.eclipse.cdt.managedbuilder.core.ScannerConfigNature</nature>
+	</natures>
+</projectDescription>
diff -r -u -P lab6_original/.qemu.out lab6/.qemu.out
--- lab6_original/.qemu.out	1970-01-01 08:00:00.000000000 +0800
+++ lab6/.qemu.out	2016-04-29 16:22:58.256536148 +0800
@@ -0,0 +1,116 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc010b8fd (phys)
+  edata  0xc01adcdc (phys)
+  end    0xc01b0e58 (phys)
+Kernel executable memory footprint: 708KB
+ebp:0xc012bf48 eip:0xc0100b4f args:0x00010094 0x00010094 0xc012bf78 0xc01000c5 
+    kern/debug/kdebug.c:352: print_stackframe+21
+ebp:0xc012bf58 eip:0xc0100e49 args:0x00000000 0x00000000 0x00000000 0xc012bfc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc012bf78 eip:0xc01000c5 args:0x00000000 0xc012bfa0 0xffff0000 0xc012bfa4 
+    kern/init/init.c:59: grade_backtrace2+19
+ebp:0xc012bf98 eip:0xc01000e7 args:0x00000000 0xffff0000 0xc012bfc4 0x0000002a 
+    kern/init/init.c:64: grade_backtrace1+27
+ebp:0xc012bfb8 eip:0xc0100104 args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:69: grade_backtrace0+19
+ebp:0xc012bfd8 eip:0xc0100125 args:0x00000000 0x00000000 0x00000000 0xc010b900 
+    kern/init/init.c:74: grade_backtrace+26
+ebp:0xc012bff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:33: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31819
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "priority".
+main: fork ok,now need to wait pids.
+child pid 6, acc 1564000, time 1001
+child pid 7, acc 1964000, time 1001
+child pid 4, acc 800000, time 1001
+child pid 5, acc 1188000, time 1001
+child pid 3, acc 412000, time 1002
+main: pid 3, acc 412000, time 1002
+main: pid 4, acc 800000, time 1002
+main: pid 5, acc 1188000, time 1002
+main: pid 6, acc 1564000, time 1002
+main: pid 7, acc 1964000, time 1002
+main: wait pids over
+stride sched correct result: 1 2 3 4 5
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:476:
+    initproc exit.
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P lab6_original/.softint.log lab6/.softint.log
--- lab6_original/.softint.log	1970-01-01 08:00:00.000000000 +0800
+++ lab6/.softint.log	2016-04-29 16:22:12.986942852 +0800
@@ -0,0 +1,124 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc010b8fd (phys)
+  edata  0xc01adcdc (phys)
+  end    0xc01b0e58 (phys)
+Kernel executable memory footprint: 708KB
+ebp:0xc012bf48 eip:0xc0100b4f args:0x00010094 0x00010094 0xc012bf78 0xc01000c5 
+    kern/debug/kdebug.c:352: print_stackframe+21
+ebp:0xc012bf58 eip:0xc0100e49 args:0x00000000 0x00000000 0x00000000 0xc012bfc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc012bf78 eip:0xc01000c5 args:0x00000000 0xc012bfa0 0xffff0000 0xc012bfa4 
+    kern/init/init.c:59: grade_backtrace2+19
+ebp:0xc012bf98 eip:0xc01000e7 args:0x00000000 0xffff0000 0xc012bfc4 0x0000002a 
+    kern/init/init.c:64: grade_backtrace1+27
+ebp:0xc012bfb8 eip:0xc0100104 args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:69: grade_backtrace0+19
+ebp:0xc012bfd8 eip:0xc0100125 args:0x00000000 0x00000000 0x00000000 0xc010b900 
+    kern/init/init.c:74: grade_backtrace+26
+ebp:0xc012bff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:33: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31819
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "softint".
+trapframe at 0xc039bfb4
+  edi  0x00000000
+  esi  0x00000000
+  ebp  0xafffffa8
+  oesp 0xc039bfd4
+  ebx  0x00000000
+  edx  0x00000000
+  ecx  0xafffffc0
+  eax  0x00000000
+  ds   0x----0023
+  es   0x----0023
+  fs   0x----0000
+  gs   0x----0000
+  trap 0x0000000d General Protection
+  err  0x00000072
+  eip  0x00800f3c
+  cs   0x----001b
+  flag 0x00000286 PF,SF,IF,IOPL=0
+  esp  0xafffffa0
+  ss   0x----0023
+unhandled trap.
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:476:
+    initproc exit.
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P lab6_original/.spin.log lab6/.spin.log
--- lab6_original/.spin.log	1970-01-01 08:00:00.000000000 +0800
+++ lab6/.spin.log	2016-04-29 16:22:28.551125741 +0800
@@ -0,0 +1,110 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc010b8fd (phys)
+  edata  0xc01adcdc (phys)
+  end    0xc01b0e58 (phys)
+Kernel executable memory footprint: 708KB
+ebp:0xc012bf48 eip:0xc0100b4f args:0x00010094 0x00010094 0xc012bf78 0xc01000c5 
+    kern/debug/kdebug.c:352: print_stackframe+21
+ebp:0xc012bf58 eip:0xc0100e49 args:0x00000000 0x00000000 0x00000000 0xc012bfc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc012bf78 eip:0xc01000c5 args:0x00000000 0xc012bfa0 0xffff0000 0xc012bfa4 
+    kern/init/init.c:59: grade_backtrace2+19
+ebp:0xc012bf98 eip:0xc01000e7 args:0x00000000 0xffff0000 0xc012bfc4 0x0000002a 
+    kern/init/init.c:64: grade_backtrace1+27
+ebp:0xc012bfb8 eip:0xc0100104 args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:69: grade_backtrace0+19
+ebp:0xc012bfd8 eip:0xc0100125 args:0x00000000 0x00000000 0x00000000 0xc010b900 
+    kern/init/init.c:74: grade_backtrace+26
+ebp:0xc012bff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:33: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31819
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "spin".
+I am the parent. Forking the child...
+I am the parent. Running the child...
+I am the child. spinning ...
+I am the parent.  Killing the child...
+kill returns 0
+wait returns 0
+spin may pass.
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:476:
+    initproc exit.
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P lab6_original/.testbss.log lab6/.testbss.log
--- lab6_original/.testbss.log	1970-01-01 08:00:00.000000000 +0800
+++ lab6/.testbss.log	2016-04-29 16:22:19.845001443 +0800
@@ -0,0 +1,126 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc010b8fd (phys)
+  edata  0xc01adcdc (phys)
+  end    0xc01b0e58 (phys)
+Kernel executable memory footprint: 708KB
+ebp:0xc012bf48 eip:0xc0100b4f args:0x00010094 0x00010094 0xc012bf78 0xc01000c5 
+    kern/debug/kdebug.c:352: print_stackframe+21
+ebp:0xc012bf58 eip:0xc0100e49 args:0x00000000 0x00000000 0x00000000 0xc012bfc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc012bf78 eip:0xc01000c5 args:0x00000000 0xc012bfa0 0xffff0000 0xc012bfa4 
+    kern/init/init.c:59: grade_backtrace2+19
+ebp:0xc012bf98 eip:0xc01000e7 args:0x00000000 0xffff0000 0xc012bfc4 0x0000002a 
+    kern/init/init.c:64: grade_backtrace1+27
+ebp:0xc012bfb8 eip:0xc0100104 args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:69: grade_backtrace0+19
+ebp:0xc012bfd8 eip:0xc0100125 args:0x00000000 0x00000000 0x00000000 0xc010b900 
+    kern/init/init.c:74: grade_backtrace+26
+ebp:0xc012bff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:33: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31819
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "testbss".
+Making sure bss works right...
+Yes, good.  Now doing a wild write off the end...
+testbss may pass.
+not valid addr c03020, and  can not find it in vma
+trapframe at 0xc039bfb4
+  edi  0x00000000
+  esi  0x00000000
+  ebp  0xafffffa8
+  oesp 0xc039bfd4
+  ebx  0x00000000
+  edx  0x008013da
+  ecx  0xaffffed8
+  eax  0x00000012
+  ds   0x----0023
+  es   0x----0023
+  fs   0x----0000
+  gs   0x----0000
+  trap 0x0000000e Page Fault
+  err  0x00000006
+  eip  0x00801002
+  cs   0x----001b
+  flag 0x00000286 PF,SF,IF,IOPL=0
+  esp  0xafffff90
+  ss   0x----0023
+killed by kernel.
+kernel panic at kern/trap/trap.c:212:
+    handle user mode pgfault failed. ret=-3
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P lab6_original/tools/gdbinit~ lab6/tools/gdbinit~
--- lab6_original/tools/gdbinit~	1970-01-01 08:00:00.000000000 +0800
+++ lab6/tools/gdbinit~	2016-04-25 14:27:33.820418996 +0800
@@ -0,0 +1,3 @@
+file bin/kernel_nopage
+target remote :1234
+break kern_init
diff -r -u -P lab6_original/.waitkill.log lab6/.waitkill.log
--- lab6_original/.waitkill.log	1970-01-01 08:00:00.000000000 +0800
+++ lab6/.waitkill.log	2016-04-29 16:22:30.804325009 +0800
@@ -0,0 +1,108 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc010b8fd (phys)
+  edata  0xc01adcdc (phys)
+  end    0xc01b0e58 (phys)
+Kernel executable memory footprint: 708KB
+ebp:0xc012bf48 eip:0xc0100b4f args:0x00010094 0x00010094 0xc012bf78 0xc01000c5 
+    kern/debug/kdebug.c:352: print_stackframe+21
+ebp:0xc012bf58 eip:0xc0100e49 args:0x00000000 0x00000000 0x00000000 0xc012bfc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc012bf78 eip:0xc01000c5 args:0x00000000 0xc012bfa0 0xffff0000 0xc012bfa4 
+    kern/init/init.c:59: grade_backtrace2+19
+ebp:0xc012bf98 eip:0xc01000e7 args:0x00000000 0xffff0000 0xc012bfc4 0x0000002a 
+    kern/init/init.c:64: grade_backtrace1+27
+ebp:0xc012bfb8 eip:0xc0100104 args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:69: grade_backtrace0+19
+ebp:0xc012bfd8 eip:0xc0100125 args:0x00000000 0x00000000 0x00000000 0xc010b900 
+    kern/init/init.c:74: grade_backtrace+26
+ebp:0xc012bff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:33: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31819
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "waitkill".
+wait child 1.
+child 2.
+child 1.
+kill parent ok.
+kill child1 ok.
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:476:
+    initproc exit.
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P lab6_original/.yield.log lab6/.yield.log
--- lab6_original/.yield.log	1970-01-01 08:00:00.000000000 +0800
+++ lab6/.yield.log	2016-04-29 16:22:23.209415565 +0800
@@ -0,0 +1,110 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc010b8fd (phys)
+  edata  0xc01adcdc (phys)
+  end    0xc01b0e58 (phys)
+Kernel executable memory footprint: 708KB
+ebp:0xc012bf48 eip:0xc0100b4f args:0x00010094 0x00010094 0xc012bf78 0xc01000c5 
+    kern/debug/kdebug.c:352: print_stackframe+21
+ebp:0xc012bf58 eip:0xc0100e49 args:0x00000000 0x00000000 0x00000000 0xc012bfc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc012bf78 eip:0xc01000c5 args:0x00000000 0xc012bfa0 0xffff0000 0xc012bfa4 
+    kern/init/init.c:59: grade_backtrace2+19
+ebp:0xc012bf98 eip:0xc01000e7 args:0x00000000 0xffff0000 0xc012bfc4 0x0000002a 
+    kern/init/init.c:64: grade_backtrace1+27
+ebp:0xc012bfb8 eip:0xc0100104 args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:69: grade_backtrace0+19
+ebp:0xc012bfd8 eip:0xc0100125 args:0x00000000 0x00000000 0x00000000 0xc010b900 
+    kern/init/init.c:74: grade_backtrace+26
+ebp:0xc012bff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:33: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31819
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+kernel_execve: pid = 2, name = "yield".
+Hello, I am process 2.
+Back in process 2, iteration 0.
+Back in process 2, iteration 1.
+Back in process 2, iteration 2.
+Back in process 2, iteration 3.
+Back in process 2, iteration 4.
+All done in process 2.
+yield pass.
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:476:
+    initproc exit.
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
