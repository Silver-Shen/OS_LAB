diff -r -u -P lab7_original/.badarg.log lab7/.badarg.log
--- lab7_original/.badarg.log	1970-01-01 08:00:00.000000000 +0800
+++ lab7/.badarg.log	2016-05-06 21:59:55.379165721 +0800
@@ -0,0 +1,315 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc010cc7c (phys)
+  edata  0xc01c22c4 (phys)
+  end    0xc01c5584 (phys)
+Kernel executable memory footprint: 790KB
+ebp:0xc0130f48 eip:0xc0100b4f args:0x00010094 0x00010094 0xc0130f78 0xc01000c5 
+    kern/debug/kdebug.c:352: print_stackframe+21
+ebp:0xc0130f58 eip:0xc0100e49 args:0x00000000 0x00000000 0x00000000 0xc0130fc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0130f78 eip:0xc01000c5 args:0x00000000 0xc0130fa0 0xffff0000 0xc0130fa4 
+    kern/init/init.c:59: grade_backtrace2+19
+ebp:0xc0130f98 eip:0xc01000e7 args:0x00000000 0xffff0000 0xc0130fc4 0x0000002a 
+    kern/init/init.c:64: grade_backtrace1+27
+ebp:0xc0130fb8 eip:0xc0100104 args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:69: grade_backtrace0+19
+ebp:0xc0130fd8 eip:0xc0100125 args:0x00000000 0x00000000 0x00000000 0xc010cc80 
+    kern/init/init.c:74: grade_backtrace+26
+ebp:0xc0130ff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:33: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31798
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+I am No.4 philosopher_condvar
+Iter 1, No.4 philosopher_condvar is thinking
+I am No.3 philosopher_condvar
+Iter 1, No.3 philosopher_condvar is thinking
+I am No.2 philosopher_condvar
+Iter 1, No.2 philosopher_condvar is thinking
+I am No.1 philosopher_condvar
+Iter 1, No.1 philosopher_condvar is thinking
+I am No.0 philosopher_condvar
+Iter 1, No.0 philosopher_condvar is thinking
+I am No.4 philosopher_sema
+Iter 1, No.4 philosopher_sema is thinking
+I am No.3 philosopher_sema
+Iter 1, No.3 philosopher_sema is thinking
+I am No.2 philosopher_sema
+Iter 1, No.2 philosopher_sema is thinking
+I am No.1 philosopher_sema
+Iter 1, No.1 philosopher_sema is thinking
+I am No.0 philosopher_sema
+Iter 1, No.0 philosopher_sema is thinking
+kernel_execve: pid = 2, name = "badarg".
+fork ok.
+badarg pass.
+Iter 1, No.0 philosopher_sema is eating
+Iter 1, No.2 philosopher_sema is eating
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 1, No.0 philosopher_condvar is eating
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 1, No.2 philosopher_condvar is eating
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.3 philosopher_condvar is eating
+Iter 2, No.2 philosopher_sema is thinking
+Iter 1, No.3 philosopher_sema is eating
+Iter 2, No.0 philosopher_sema is thinking
+Iter 1, No.1 philosopher_sema is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.2 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.0 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+Iter 2, No.1 philosopher_sema is thinking
+Iter 2, No.0 philosopher_sema is eating
+Iter 2, No.3 philosopher_sema is thinking
+Iter 2, No.2 philosopher_sema is eating
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.1 philosopher_condvar is thinking
+Iter 2, No.3 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.2 philosopher_condvar is eating
+Iter 3, No.2 philosopher_sema is thinking
+Iter 2, No.3 philosopher_sema is eating
+Iter 3, No.0 philosopher_sema is thinking
+Iter 2, No.1 philosopher_sema is eating
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.4 philosopher_condvar is eating
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.0 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.2 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.2 philosopher_condvar is eating
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.1 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.1 philosopher_sema is thinking
+Iter 3, No.0 philosopher_sema is eating
+Iter 3, No.3 philosopher_sema is thinking
+Iter 3, No.2 philosopher_sema is eating
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.4 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+Iter 4, No.2 philosopher_sema is thinking
+Iter 4, No.0 philosopher_sema is thinking
+Iter 3, No.1 philosopher_sema is eating
+Iter 1, No.4 philosopher_sema is eating
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.3 philosopher_condvar is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.2 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.0 philosopher_condvar is thinking
+Iter 4, No.1 philosopher_sema is thinking
+Iter 4, No.2 philosopher_sema is eating
+Iter 2, No.4 philosopher_sema is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+Iter 4, No.0 philosopher_sema is eating
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.1 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.2 philosopher_condvar is eating
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.3 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 1, cvp->owner->next_count 0
+No.2 philosopher_sema quit
+Iter 3, No.3 philosopher_sema is eating
+cond_wait end:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.4 philosopher_condvar is eating
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+No.0 philosopher_condvar quit
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+No.0 philosopher_sema quit
+Iter 4, No.1 philosopher_sema is eating
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+No.2 philosopher_condvar quit
+No.1 philosopher_condvar quit
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.3 philosopher_condvar is eating
+No.1 philosopher_sema quit
+Iter 4, No.3 philosopher_sema is thinking
+Iter 2, No.4 philosopher_sema is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.4 philosopher_condvar is thinking
+Iter 3, No.4 philosopher_sema is thinking
+Iter 4, No.3 philosopher_condvar is thinking
+Iter 4, No.3 philosopher_sema is eating
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.4 philosopher_condvar is eating
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+No.3 philosopher_sema quit
+Iter 3, No.4 philosopher_sema is eating
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.3 philosopher_condvar is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.4 philosopher_condvar is thinking
+Iter 4, No.4 philosopher_sema is thinking
+No.3 philosopher_condvar quit
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.4 philosopher_condvar is eating
+Iter 4, No.4 philosopher_sema is eating
+No.4 philosopher_condvar quit
+No.4 philosopher_sema quit
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:476:
+    initproc exit.
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P lab7_original/.badsegment.log lab7/.badsegment.log
--- lab7_original/.badsegment.log	1970-01-01 08:00:00.000000000 +0800
+++ lab7/.badsegment.log	2016-05-06 21:59:31.638271591 +0800
@@ -0,0 +1,334 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc010cc7c (phys)
+  edata  0xc01c22c4 (phys)
+  end    0xc01c5584 (phys)
+Kernel executable memory footprint: 790KB
+ebp:0xc0130f48 eip:0xc0100b4f args:0x00010094 0x00010094 0xc0130f78 0xc01000c5 
+    kern/debug/kdebug.c:352: print_stackframe+21
+ebp:0xc0130f58 eip:0xc0100e49 args:0x00000000 0x00000000 0x00000000 0xc0130fc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0130f78 eip:0xc01000c5 args:0x00000000 0xc0130fa0 0xffff0000 0xc0130fa4 
+    kern/init/init.c:59: grade_backtrace2+19
+ebp:0xc0130f98 eip:0xc01000e7 args:0x00000000 0xffff0000 0xc0130fc4 0x0000002a 
+    kern/init/init.c:64: grade_backtrace1+27
+ebp:0xc0130fb8 eip:0xc0100104 args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:69: grade_backtrace0+19
+ebp:0xc0130fd8 eip:0xc0100125 args:0x00000000 0x00000000 0x00000000 0xc010cc80 
+    kern/init/init.c:74: grade_backtrace+26
+ebp:0xc0130ff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:33: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31798
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+I am No.4 philosopher_condvar
+Iter 1, No.4 philosopher_condvar is thinking
+I am No.3 philosopher_condvar
+Iter 1, No.3 philosopher_condvar is thinking
+I am No.2 philosopher_condvar
+Iter 1, No.2 philosopher_condvar is thinking
+I am No.1 philosopher_condvar
+Iter 1, No.1 philosopher_condvar is thinking
+I am No.0 philosopher_condvar
+Iter 1, No.0 philosopher_condvar is thinking
+I am No.4 philosopher_sema
+Iter 1, No.4 philosopher_sema is thinking
+I am No.3 philosopher_sema
+Iter 1, No.3 philosopher_sema is thinking
+I am No.2 philosopher_sema
+Iter 1, No.2 philosopher_sema is thinking
+I am No.1 philosopher_sema
+Iter 1, No.1 philosopher_sema is thinking
+I am No.0 philosopher_sema
+Iter 1, No.0 philosopher_sema is thinking
+kernel_execve: pid = 2, name = "badsegment".
+trapframe at 0xc03b0fb4
+  edi  0x00000000
+  esi  0x00000000
+  ebp  0xafffffa8
+  oesp 0xc03b0fd4
+  ebx  0x00000000
+  edx  0x00000000
+  ecx  0xafffffc0
+  eax  0x00000028
+  ds   0x----0023
+  es   0x----0023
+  fs   0x----0000
+  gs   0x----0000
+  trap 0x0000000d General Protection
+  err  0x00000028
+  eip  0x00800f68
+  cs   0x----001b
+  flag 0x00000286 PF,SF,IF,IOPL=0
+  esp  0xafffffa0
+  ss   0x----0023
+unhandled trap.
+Iter 1, No.0 philosopher_sema is eating
+Iter 1, No.2 philosopher_sema is eating
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 1, No.0 philosopher_condvar is eating
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 1, No.2 philosopher_condvar is eating
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.3 philosopher_condvar is eating
+Iter 2, No.2 philosopher_sema is thinking
+Iter 1, No.3 philosopher_sema is eating
+Iter 2, No.0 philosopher_sema is thinking
+Iter 1, No.1 philosopher_sema is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.2 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.0 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+Iter 2, No.1 philosopher_sema is thinking
+Iter 2, No.0 philosopher_sema is eating
+Iter 2, No.3 philosopher_sema is thinking
+Iter 2, No.2 philosopher_sema is eating
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.1 philosopher_condvar is thinking
+Iter 2, No.3 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.2 philosopher_condvar is eating
+Iter 3, No.2 philosopher_sema is thinking
+Iter 2, No.3 philosopher_sema is eating
+Iter 3, No.0 philosopher_sema is thinking
+Iter 2, No.1 philosopher_sema is eating
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.4 philosopher_condvar is eating
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.0 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.2 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.2 philosopher_condvar is eating
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.1 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.1 philosopher_sema is thinking
+Iter 3, No.0 philosopher_sema is eating
+Iter 3, No.3 philosopher_sema is thinking
+Iter 3, No.2 philosopher_sema is eating
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.4 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+Iter 4, No.2 philosopher_sema is thinking
+Iter 4, No.0 philosopher_sema is thinking
+Iter 3, No.1 philosopher_sema is eating
+Iter 1, No.4 philosopher_sema is eating
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.3 philosopher_condvar is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.2 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.0 philosopher_condvar is thinking
+Iter 4, No.1 philosopher_sema is thinking
+Iter 4, No.2 philosopher_sema is eating
+Iter 2, No.4 philosopher_sema is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+Iter 4, No.0 philosopher_sema is eating
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.1 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.2 philosopher_condvar is eating
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.3 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 1, cvp->owner->next_count 0
+No.2 philosopher_sema quit
+Iter 3, No.3 philosopher_sema is eating
+cond_wait end:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.4 philosopher_condvar is eating
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+No.0 philosopher_condvar quit
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+No.0 philosopher_sema quit
+Iter 4, No.1 philosopher_sema is eating
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+No.2 philosopher_condvar quit
+No.1 philosopher_condvar quit
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.3 philosopher_condvar is eating
+No.1 philosopher_sema quit
+Iter 4, No.3 philosopher_sema is thinking
+Iter 2, No.4 philosopher_sema is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.4 philosopher_condvar is thinking
+Iter 3, No.4 philosopher_sema is thinking
+Iter 4, No.3 philosopher_condvar is thinking
+Iter 4, No.3 philosopher_sema is eating
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.4 philosopher_condvar is eating
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+No.3 philosopher_sema quit
+Iter 3, No.4 philosopher_sema is eating
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.3 philosopher_condvar is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.4 philosopher_condvar is thinking
+Iter 4, No.4 philosopher_sema is thinking
+No.3 philosopher_condvar quit
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.4 philosopher_condvar is eating
+Iter 4, No.4 philosopher_sema is eating
+No.4 philosopher_condvar quit
+No.4 philosopher_sema quit
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:476:
+    initproc exit.
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
Binary files lab7_original/bin/bootblock and lab7/bin/bootblock differ
Binary files lab7_original/bin/kernel and lab7/bin/kernel differ
Binary files lab7_original/bin/sign and lab7/bin/sign differ
Binary files lab7_original/bin/swap.img and lab7/bin/swap.img differ
Binary files lab7_original/bin/ucore.img and lab7/bin/ucore.img differ
diff -r -u -P lab7_original/.check_output.log lab7/.check_output.log
--- lab7_original/.check_output.log	1970-01-01 08:00:00.000000000 +0800
+++ lab7/.check_output.log	2016-04-30 19:47:56.610326521 +0800
@@ -0,0 +1,49 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0x00100000 (phys)
+  etext  0x0010352b (phys)
+  edata  0x0010ea16 (phys)
+  end    0x0010fd20 (phys)
+Kernel executable memory footprint: 64KB
+ebp:0x00007b38 eip:0x00100a37 args:0x00010094 0x00010094 0x00007b68 0x00100084 
+    kern/debug/kdebug.c:307: print_stackframe+21
+ebp:0x00007b48 eip:0x00100d31 args:0x00000000 0x00000000 0x00000000 0x00007bb8 
+    kern/debug/kmonitor.c:125: mon_backtrace+10
+ebp:0x00007b68 eip:0x00100084 args:0x00000000 0x00007b90 0xffff0000 0x00007b94 
+    kern/init/init.c:48: grade_backtrace2+19
+ebp:0x00007b88 eip:0x001000a6 args:0x00000000 0xffff0000 0x00007bb4 0x00000029 
+    kern/init/init.c:53: grade_backtrace1+27
+ebp:0x00007ba8 eip:0x001000c3 args:0x00000000 0x00100000 0xffff0000 0x00100043 
+    kern/init/init.c:58: grade_backtrace0+19
+ebp:0x00007bc8 eip:0x001000e4 args:0x00000000 0x00000000 0x00000000 0x00103540 
+    kern/init/init.c:63: grade_backtrace+26
+ebp:0x00007be8 eip:0x00100050 args:0x00000000 0x00000000 0x00000000 0x00007c4f 
+    kern/init/init.c:28: kern_init+79
+ebp:0x00007bf8 eip:0x00007d6e args:0xc031fcfa 0xc08ed88e 0x64e4d08e 0xfa7502a8 
+    <unknow>: -- 0x00007d6d --
+++ setup timer interrupts
+0: @ring 0
+0:  cs = 8
+0:  ds = 10
+0:  es = 10
+0:  ss = 10
++++ switch to  user  mode +++
+1: @ring 3
+1:  cs = 1b
+1:  ds = 23
+1:  es = 23
+1:  ss = 23
++++ switch to kernel mode +++
+2: @ring 0
+2:  cs = 8
+2:  ds = 10
+2:  es = 10
+2:  ss = 10
+100 ticks
+End of Test.
+kernel panic at kern/trap/trap.c:18:
+    EOT: kernel seems ok.
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P lab7_original/.check_pmm.log lab7/.check_pmm.log
--- lab7_original/.check_pmm.log	1970-01-01 08:00:00.000000000 +0800
+++ lab7/.check_pmm.log	2016-04-30 19:47:56.610326521 +0800
@@ -0,0 +1,54 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc0105c26 (phys)
+  edata  0xc0117a36 (phys)
+  end    0xc0118968 (phys)
+Kernel executable memory footprint: 99KB
+ebp:0xc0116f48 eip:0xc0100a61 args:0x00010094 0x00010094 0xc0116f78 0xc01000ae 
+    kern/debug/kdebug.c:310: print_stackframe+21
+ebp:0xc0116f58 eip:0xc0100d5b args:0x00000000 0x00000000 0x00000000 0xc0116fc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0116f78 eip:0xc01000ae args:0x00000000 0xc0116fa0 0xffff0000 0xc0116fa4 
+    kern/init/init.c:49: grade_backtrace2+19
+ebp:0xc0116f98 eip:0xc01000d0 args:0x00000000 0xffff0000 0xc0116fc4 0x00000029 
+    kern/init/init.c:54: grade_backtrace1+27
+ebp:0xc0116fb8 eip:0xc01000ed args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:59: grade_backtrace0+19
+ebp:0xc0116fd8 eip:0xc010010e args:0x00000000 0x00000000 0x00000000 0xc0105c40 
+    kern/init/init.c:64: grade_backtrace+26
+ebp:0xc0116ff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:29: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+++ setup timer interrupts
+0: @ring 0
+0:  cs = 8
+0:  ds = 10
+0:  es = 10
+0:  ss = 10
++++ switch to  user  mode +++
+100 ticks
+End of Test.
+kernel panic at kern/trap/trap.c:18:
+    EOT: kernel seems ok.
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P lab7_original/.check_swap.log lab7/.check_swap.log
--- lab7_original/.check_swap.log	1970-01-01 08:00:00.000000000 +0800
+++ lab7/.check_swap.log	2016-04-30 19:47:56.610326521 +0800
@@ -0,0 +1,98 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc0108489 (phys)
+  edata  0xc0120a68 (phys)
+  end    0xc0121b90 (phys)
+Kernel executable memory footprint: 135KB
+ebp:0xc011ff48 eip:0xc0100a6b args:0x00010094 0x00010094 0xc011ff78 0xc01000b8 
+    kern/debug/kdebug.c:310: print_stackframe+21
+ebp:0xc011ff58 eip:0xc0100d65 args:0x00000000 0x00000000 0x00000000 0xc011ffc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc011ff78 eip:0xc01000b8 args:0x00000000 0xc011ffa0 0xffff0000 0xc011ffa4 
+    kern/init/init.c:57: grade_backtrace2+19
+ebp:0xc011ff98 eip:0xc01000da args:0x00000000 0xffff0000 0xc011ffc4 0x0000002a 
+    kern/init/init.c:62: grade_backtrace1+27
+ebp:0xc011ffb8 eip:0xc01000f7 args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:67: grade_backtrace0+19
+ebp:0xc011ffd8 eip:0xc0100118 args:0x00000000 0x00000000 0x00000000 0xc01084a0 
+    kern/init/init.c:72: grade_backtrace+26
+ebp:0xc011fff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:32: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31965
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 7
+check_swap() succeeded!
+++ setup timer interrupts
+100 ticks
+End of Test.
+kernel panic at kern/trap/trap.c:20:
+    EOT: kernel seems ok.
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P lab7_original/.check_vmm.log lab7/.check_vmm.log
--- lab7_original/.check_vmm.log	1970-01-01 08:00:00.000000000 +0800
+++ lab7/.check_vmm.log	2016-04-30 19:47:56.610326521 +0800
@@ -0,0 +1,102 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc01095de (phys)
+  edata  0xc0124a80 (phys)
+  end    0xc0127bd8 (phys)
+Kernel executable memory footprint: 159KB
+ebp:0xc0123f48 eip:0xc0100a73 args:0x00010094 0x00010094 0xc0123f78 0xc01000c0 
+    kern/debug/kdebug.c:310: print_stackframe+21
+ebp:0xc0123f58 eip:0xc0100d6d args:0x00000000 0x00000000 0x00000000 0xc0123fc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0123f78 eip:0xc01000c0 args:0x00000000 0xc0123fa0 0xffff0000 0xc0123fa4 
+    kern/init/init.c:58: grade_backtrace2+19
+ebp:0xc0123f98 eip:0xc01000e2 args:0x00000000 0xffff0000 0xc0123fc4 0x0000002a 
+    kern/init/init.c:63: grade_backtrace1+27
+ebp:0xc0123fb8 eip:0xc01000ff args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:68: grade_backtrace0+19
+ebp:0xc0123fd8 eip:0xc0100120 args:0x00000000 0x00000000 0x00000000 0xc01095e0 
+    kern/init/init.c:73: grade_backtrace+26
+ebp:0xc0123ff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:33: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31956
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+this initproc, pid = 1, name = "init"
+To U: "Hello world!!".
+To U: "en.., Bye, Bye. :)"
+kernel panic at kern/process/proc.c:338:
+    process exit!!.
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P lab7_original/.cproject lab7/.cproject
--- lab7_original/.cproject	1970-01-01 08:00:00.000000000 +0800
+++ lab7/.cproject	2016-04-30 19:59:26.594659207 +0800
@@ -0,0 +1,52 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<?fileVersion 4.0.0?><cproject storage_type_id="org.eclipse.cdt.core.XmlProjectDescriptionStorage">
+	<storageModule moduleId="org.eclipse.cdt.core.settings">
+		<cconfiguration id="0.2084392906">
+			<storageModule buildSystemId="org.eclipse.cdt.managedbuilder.core.configurationDataProvider" id="0.2084392906" moduleId="org.eclipse.cdt.core.settings" name="Default">
+				<externalSettings/>
+				<extensions>
+					<extension id="org.eclipse.cdt.core.VCErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
+					<extension id="org.eclipse.cdt.core.GmakeErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
+					<extension id="org.eclipse.cdt.core.CWDLocator" point="org.eclipse.cdt.core.ErrorParser"/>
+					<extension id="org.eclipse.cdt.core.GCCErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
+					<extension id="org.eclipse.cdt.core.GASErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
+					<extension id="org.eclipse.cdt.core.GLDErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
+				</extensions>
+			</storageModule>
+			<storageModule moduleId="cdtBuildSystem" version="4.0.0">
+				<configuration buildProperties="" description="" id="0.2084392906" name="Default" parent="org.eclipse.cdt.build.core.prefbase.cfg">
+					<folderInfo id="0.2084392906." name="/" resourcePath="">
+						<toolChain id="org.eclipse.cdt.build.core.prefbase.toolchain.2080311021" name="No ToolChain" resourceTypeBasedDiscovery="false" superClass="org.eclipse.cdt.build.core.prefbase.toolchain">
+							<targetPlatform id="org.eclipse.cdt.build.core.prefbase.toolchain.2080311021.7588925" name=""/>
+							<builder id="org.eclipse.cdt.build.core.settings.default.builder.409890665" keepEnvironmentInBuildfile="false" managedBuildOn="false" name="Gnu Make Builder" superClass="org.eclipse.cdt.build.core.settings.default.builder"/>
+							<tool id="org.eclipse.cdt.build.core.settings.holder.libs.661476831" name="holder for library settings" superClass="org.eclipse.cdt.build.core.settings.holder.libs"/>
+							<tool id="org.eclipse.cdt.build.core.settings.holder.1221370389" name="Assembly" superClass="org.eclipse.cdt.build.core.settings.holder">
+								<inputType id="org.eclipse.cdt.build.core.settings.holder.inType.2095971523" languageId="org.eclipse.cdt.core.assembly" languageName="Assembly" sourceContentType="org.eclipse.cdt.core.asmSource" superClass="org.eclipse.cdt.build.core.settings.holder.inType"/>
+							</tool>
+							<tool id="org.eclipse.cdt.build.core.settings.holder.1327139567" name="GNU C++" superClass="org.eclipse.cdt.build.core.settings.holder">
+								<inputType id="org.eclipse.cdt.build.core.settings.holder.inType.715380051" languageId="org.eclipse.cdt.core.g++" languageName="GNU C++" sourceContentType="org.eclipse.cdt.core.cxxSource,org.eclipse.cdt.core.cxxHeader" superClass="org.eclipse.cdt.build.core.settings.holder.inType"/>
+							</tool>
+							<tool id="org.eclipse.cdt.build.core.settings.holder.145966203" name="GNU C" superClass="org.eclipse.cdt.build.core.settings.holder">
+								<inputType id="org.eclipse.cdt.build.core.settings.holder.inType.1552907693" languageId="org.eclipse.cdt.core.gcc" languageName="GNU C" sourceContentType="org.eclipse.cdt.core.cSource,org.eclipse.cdt.core.cHeader" superClass="org.eclipse.cdt.build.core.settings.holder.inType"/>
+							</tool>
+						</toolChain>
+					</folderInfo>
+				</configuration>
+			</storageModule>
+			<storageModule moduleId="org.eclipse.cdt.core.externalSettings"/>
+		</cconfiguration>
+	</storageModule>
+	<storageModule moduleId="cdtBuildSystem" version="4.0.0">
+		<project id="lab7.null.1129076930" name="lab7"/>
+	</storageModule>
+	<storageModule moduleId="scannerConfiguration">
+		<autodiscovery enabled="true" problemReportingEnabled="true" selectedProfileId=""/>
+		<scannerConfigBuildInfo instanceId="0.2084392906">
+			<autodiscovery enabled="true" problemReportingEnabled="true" selectedProfileId=""/>
+		</scannerConfigBuildInfo>
+		<scannerConfigBuildInfo instanceId="0.589401602">
+			<autodiscovery enabled="true" problemReportingEnabled="true" selectedProfileId=""/>
+		</scannerConfigBuildInfo>
+	</storageModule>
+	<storageModule moduleId="org.eclipse.cdt.core.LanguageSettingsProviders"/>
+</cproject>
diff -r -u -P lab7_original/.divzero.log lab7/.divzero.log
--- lab7_original/.divzero.log	1970-01-01 08:00:00.000000000 +0800
+++ lab7/.divzero.log	2016-05-06 21:59:34.646384152 +0800
@@ -0,0 +1,334 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc010cc7c (phys)
+  edata  0xc01c22c4 (phys)
+  end    0xc01c5584 (phys)
+Kernel executable memory footprint: 790KB
+ebp:0xc0130f48 eip:0xc0100b4f args:0x00010094 0x00010094 0xc0130f78 0xc01000c5 
+    kern/debug/kdebug.c:352: print_stackframe+21
+ebp:0xc0130f58 eip:0xc0100e49 args:0x00000000 0x00000000 0x00000000 0xc0130fc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0130f78 eip:0xc01000c5 args:0x00000000 0xc0130fa0 0xffff0000 0xc0130fa4 
+    kern/init/init.c:59: grade_backtrace2+19
+ebp:0xc0130f98 eip:0xc01000e7 args:0x00000000 0xffff0000 0xc0130fc4 0x0000002a 
+    kern/init/init.c:64: grade_backtrace1+27
+ebp:0xc0130fb8 eip:0xc0100104 args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:69: grade_backtrace0+19
+ebp:0xc0130fd8 eip:0xc0100125 args:0x00000000 0x00000000 0x00000000 0xc010cc80 
+    kern/init/init.c:74: grade_backtrace+26
+ebp:0xc0130ff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:33: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31798
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+I am No.4 philosopher_condvar
+Iter 1, No.4 philosopher_condvar is thinking
+I am No.3 philosopher_condvar
+Iter 1, No.3 philosopher_condvar is thinking
+I am No.2 philosopher_condvar
+Iter 1, No.2 philosopher_condvar is thinking
+I am No.1 philosopher_condvar
+Iter 1, No.1 philosopher_condvar is thinking
+I am No.0 philosopher_condvar
+Iter 1, No.0 philosopher_condvar is thinking
+I am No.4 philosopher_sema
+Iter 1, No.4 philosopher_sema is thinking
+I am No.3 philosopher_sema
+Iter 1, No.3 philosopher_sema is thinking
+I am No.2 philosopher_sema
+Iter 1, No.2 philosopher_sema is thinking
+I am No.1 philosopher_sema
+Iter 1, No.1 philosopher_sema is thinking
+I am No.0 philosopher_sema
+Iter 1, No.0 philosopher_sema is thinking
+kernel_execve: pid = 2, name = "divzero".
+trapframe at 0xc03b0fb4
+  edi  0x00000000
+  esi  0x00000000
+  ebp  0xafffffa8
+  oesp 0xc03b0fd4
+  ebx  0x00000000
+  edx  0x00000000
+  ecx  0x00000000
+  eax  0x00000001
+  ds   0x----0023
+  es   0x----0023
+  fs   0x----0000
+  gs   0x----0000
+  trap 0x00000000 Divide error
+  err  0x00000000
+  eip  0x00800f70
+  cs   0x----001b
+  flag 0x00000286 PF,SF,IF,IOPL=0
+  esp  0xafffffa0
+  ss   0x----0023
+unhandled trap.
+Iter 1, No.0 philosopher_sema is eating
+Iter 1, No.2 philosopher_sema is eating
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 1, No.0 philosopher_condvar is eating
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 1, No.2 philosopher_condvar is eating
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.3 philosopher_condvar is eating
+Iter 2, No.2 philosopher_sema is thinking
+Iter 1, No.3 philosopher_sema is eating
+Iter 2, No.0 philosopher_sema is thinking
+Iter 1, No.1 philosopher_sema is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.2 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.0 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+Iter 2, No.1 philosopher_sema is thinking
+Iter 2, No.0 philosopher_sema is eating
+Iter 2, No.3 philosopher_sema is thinking
+Iter 2, No.2 philosopher_sema is eating
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.1 philosopher_condvar is thinking
+Iter 2, No.3 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.2 philosopher_condvar is eating
+Iter 3, No.2 philosopher_sema is thinking
+Iter 2, No.3 philosopher_sema is eating
+Iter 3, No.0 philosopher_sema is thinking
+Iter 2, No.1 philosopher_sema is eating
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.4 philosopher_condvar is eating
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.0 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.2 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.2 philosopher_condvar is eating
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.1 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.1 philosopher_sema is thinking
+Iter 3, No.0 philosopher_sema is eating
+Iter 3, No.3 philosopher_sema is thinking
+Iter 3, No.2 philosopher_sema is eating
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.4 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+Iter 4, No.2 philosopher_sema is thinking
+Iter 4, No.0 philosopher_sema is thinking
+Iter 3, No.1 philosopher_sema is eating
+Iter 1, No.4 philosopher_sema is eating
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.3 philosopher_condvar is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.2 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.0 philosopher_condvar is thinking
+Iter 4, No.1 philosopher_sema is thinking
+Iter 4, No.2 philosopher_sema is eating
+Iter 2, No.4 philosopher_sema is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+Iter 4, No.0 philosopher_sema is eating
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.1 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.2 philosopher_condvar is eating
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.3 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 1, cvp->owner->next_count 0
+No.2 philosopher_sema quit
+Iter 3, No.3 philosopher_sema is eating
+cond_wait end:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.4 philosopher_condvar is eating
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+No.0 philosopher_condvar quit
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+No.0 philosopher_sema quit
+Iter 4, No.1 philosopher_sema is eating
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+No.2 philosopher_condvar quit
+No.1 philosopher_condvar quit
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.3 philosopher_condvar is eating
+No.1 philosopher_sema quit
+Iter 4, No.3 philosopher_sema is thinking
+Iter 2, No.4 philosopher_sema is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.4 philosopher_condvar is thinking
+Iter 3, No.4 philosopher_sema is thinking
+Iter 4, No.3 philosopher_condvar is thinking
+Iter 4, No.3 philosopher_sema is eating
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.4 philosopher_condvar is eating
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+No.3 philosopher_sema quit
+Iter 3, No.4 philosopher_sema is eating
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.3 philosopher_condvar is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.4 philosopher_condvar is thinking
+Iter 4, No.4 philosopher_sema is thinking
+No.3 philosopher_condvar quit
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.4 philosopher_condvar is eating
+Iter 4, No.4 philosopher_sema is eating
+No.4 philosopher_condvar quit
+No.4 philosopher_sema quit
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:476:
+    initproc exit.
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P lab7_original/.exit.log lab7/.exit.log
--- lab7_original/.exit.log	1970-01-01 08:00:00.000000000 +0800
+++ lab7/.exit.log	2016-05-06 21:59:58.563285857 +0800
@@ -0,0 +1,319 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc010cc7c (phys)
+  edata  0xc01c22c4 (phys)
+  end    0xc01c5584 (phys)
+Kernel executable memory footprint: 790KB
+ebp:0xc0130f48 eip:0xc0100b4f args:0x00010094 0x00010094 0xc0130f78 0xc01000c5 
+    kern/debug/kdebug.c:352: print_stackframe+21
+ebp:0xc0130f58 eip:0xc0100e49 args:0x00000000 0x00000000 0x00000000 0xc0130fc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0130f78 eip:0xc01000c5 args:0x00000000 0xc0130fa0 0xffff0000 0xc0130fa4 
+    kern/init/init.c:59: grade_backtrace2+19
+ebp:0xc0130f98 eip:0xc01000e7 args:0x00000000 0xffff0000 0xc0130fc4 0x0000002a 
+    kern/init/init.c:64: grade_backtrace1+27
+ebp:0xc0130fb8 eip:0xc0100104 args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:69: grade_backtrace0+19
+ebp:0xc0130fd8 eip:0xc0100125 args:0x00000000 0x00000000 0x00000000 0xc010cc80 
+    kern/init/init.c:74: grade_backtrace+26
+ebp:0xc0130ff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:33: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31798
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+I am No.4 philosopher_condvar
+Iter 1, No.4 philosopher_condvar is thinking
+I am No.3 philosopher_condvar
+Iter 1, No.3 philosopher_condvar is thinking
+I am No.2 philosopher_condvar
+Iter 1, No.2 philosopher_condvar is thinking
+I am No.1 philosopher_condvar
+Iter 1, No.1 philosopher_condvar is thinking
+I am No.0 philosopher_condvar
+Iter 1, No.0 philosopher_condvar is thinking
+I am No.4 philosopher_sema
+Iter 1, No.4 philosopher_sema is thinking
+I am No.3 philosopher_sema
+Iter 1, No.3 philosopher_sema is thinking
+I am No.2 philosopher_sema
+Iter 1, No.2 philosopher_sema is thinking
+I am No.1 philosopher_sema
+Iter 1, No.1 philosopher_sema is thinking
+I am No.0 philosopher_sema
+Iter 1, No.0 philosopher_sema is thinking
+kernel_execve: pid = 2, name = "exit".
+I am the parent. Forking the child...
+I am parent, fork a child pid 13
+I am the parent, waiting now..
+I am the child.
+waitpid 13 ok.
+exit pass.
+Iter 1, No.0 philosopher_sema is eating
+Iter 1, No.2 philosopher_sema is eating
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 1, No.0 philosopher_condvar is eating
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 1, No.2 philosopher_condvar is eating
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.3 philosopher_condvar is eating
+Iter 2, No.2 philosopher_sema is thinking
+Iter 1, No.3 philosopher_sema is eating
+Iter 2, No.0 philosopher_sema is thinking
+Iter 1, No.1 philosopher_sema is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.2 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.0 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+Iter 2, No.1 philosopher_sema is thinking
+Iter 2, No.0 philosopher_sema is eating
+Iter 2, No.3 philosopher_sema is thinking
+Iter 2, No.2 philosopher_sema is eating
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.1 philosopher_condvar is thinking
+Iter 2, No.3 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.2 philosopher_condvar is eating
+Iter 3, No.2 philosopher_sema is thinking
+Iter 2, No.3 philosopher_sema is eating
+Iter 3, No.0 philosopher_sema is thinking
+Iter 2, No.1 philosopher_sema is eating
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.4 philosopher_condvar is eating
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.0 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.2 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.2 philosopher_condvar is eating
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.1 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.1 philosopher_sema is thinking
+Iter 3, No.0 philosopher_sema is eating
+Iter 3, No.3 philosopher_sema is thinking
+Iter 3, No.2 philosopher_sema is eating
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.4 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+Iter 4, No.2 philosopher_sema is thinking
+Iter 4, No.0 philosopher_sema is thinking
+Iter 3, No.1 philosopher_sema is eating
+Iter 1, No.4 philosopher_sema is eating
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.3 philosopher_condvar is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.2 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.0 philosopher_condvar is thinking
+Iter 4, No.1 philosopher_sema is thinking
+Iter 4, No.2 philosopher_sema is eating
+Iter 2, No.4 philosopher_sema is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+Iter 4, No.0 philosopher_sema is eating
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.1 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.2 philosopher_condvar is eating
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.3 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 1, cvp->owner->next_count 0
+No.2 philosopher_sema quit
+Iter 3, No.3 philosopher_sema is eating
+cond_wait end:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.4 philosopher_condvar is eating
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+No.0 philosopher_condvar quit
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+No.0 philosopher_sema quit
+Iter 4, No.1 philosopher_sema is eating
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+No.2 philosopher_condvar quit
+No.1 philosopher_condvar quit
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.3 philosopher_condvar is eating
+No.1 philosopher_sema quit
+Iter 4, No.3 philosopher_sema is thinking
+Iter 2, No.4 philosopher_sema is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.4 philosopher_condvar is thinking
+Iter 3, No.4 philosopher_sema is thinking
+Iter 4, No.3 philosopher_condvar is thinking
+Iter 4, No.3 philosopher_sema is eating
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.4 philosopher_condvar is eating
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+No.3 philosopher_sema quit
+Iter 3, No.4 philosopher_sema is eating
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.3 philosopher_condvar is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.4 philosopher_condvar is thinking
+Iter 4, No.4 philosopher_sema is thinking
+No.3 philosopher_condvar quit
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.4 philosopher_condvar is eating
+Iter 4, No.4 philosopher_sema is eating
+No.4 philosopher_condvar quit
+No.4 philosopher_sema quit
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:476:
+    initproc exit.
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P lab7_original/.faultreadkernel.log lab7/.faultreadkernel.log
--- lab7_original/.faultreadkernel.log	1970-01-01 08:00:00.000000000 +0800
+++ lab7/.faultreadkernel.log	2016-05-06 21:59:41.174629886 +0800
@@ -0,0 +1,143 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc010cc7c (phys)
+  edata  0xc01c22c4 (phys)
+  end    0xc01c5584 (phys)
+Kernel executable memory footprint: 790KB
+ebp:0xc0130f48 eip:0xc0100b4f args:0x00010094 0x00010094 0xc0130f78 0xc01000c5 
+    kern/debug/kdebug.c:352: print_stackframe+21
+ebp:0xc0130f58 eip:0xc0100e49 args:0x00000000 0x00000000 0x00000000 0xc0130fc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0130f78 eip:0xc01000c5 args:0x00000000 0xc0130fa0 0xffff0000 0xc0130fa4 
+    kern/init/init.c:59: grade_backtrace2+19
+ebp:0xc0130f98 eip:0xc01000e7 args:0x00000000 0xffff0000 0xc0130fc4 0x0000002a 
+    kern/init/init.c:64: grade_backtrace1+27
+ebp:0xc0130fb8 eip:0xc0100104 args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:69: grade_backtrace0+19
+ebp:0xc0130fd8 eip:0xc0100125 args:0x00000000 0x00000000 0x00000000 0xc010cc80 
+    kern/init/init.c:74: grade_backtrace+26
+ebp:0xc0130ff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:33: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31798
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+I am No.4 philosopher_condvar
+Iter 1, No.4 philosopher_condvar is thinking
+I am No.3 philosopher_condvar
+Iter 1, No.3 philosopher_condvar is thinking
+I am No.2 philosopher_condvar
+Iter 1, No.2 philosopher_condvar is thinking
+I am No.1 philosopher_condvar
+Iter 1, No.1 philosopher_condvar is thinking
+I am No.0 philosopher_condvar
+Iter 1, No.0 philosopher_condvar is thinking
+I am No.4 philosopher_sema
+Iter 1, No.4 philosopher_sema is thinking
+I am No.3 philosopher_sema
+Iter 1, No.3 philosopher_sema is thinking
+I am No.2 philosopher_sema
+Iter 1, No.2 philosopher_sema is thinking
+I am No.1 philosopher_sema
+Iter 1, No.1 philosopher_sema is thinking
+I am No.0 philosopher_sema
+Iter 1, No.0 philosopher_sema is thinking
+kernel_execve: pid = 2, name = "faultreadkernel".
+not valid addr fac00000, and  can not find it in vma
+trapframe at 0xc03b0fb4
+  edi  0x00000000
+  esi  0x00000000
+  ebp  0xafffffa8
+  oesp 0xc03b0fd4
+  ebx  0x00000000
+  edx  0x00000000
+  ecx  0xafffffc0
+  eax  0xfac00000
+  ds   0x----0023
+  es   0x----0023
+  fs   0x----0000
+  gs   0x----0000
+  trap 0x0000000e Page Fault
+  err  0x00000005
+  eip  0x00800f69
+  cs   0x----001b
+  flag 0x00000286 PF,SF,IF,IOPL=0
+  esp  0xafffffa0
+  ss   0x----0023
+killed by kernel.
+kernel panic at kern/trap/trap.c:212:
+    handle user mode pgfault failed. ret=-3
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P lab7_original/.faultread.log lab7/.faultread.log
--- lab7_original/.faultread.log	1970-01-01 08:00:00.000000000 +0800
+++ lab7/.faultread.log	2016-05-06 21:59:39.414563548 +0800
@@ -0,0 +1,143 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc010cc7c (phys)
+  edata  0xc01c22c4 (phys)
+  end    0xc01c5584 (phys)
+Kernel executable memory footprint: 790KB
+ebp:0xc0130f48 eip:0xc0100b4f args:0x00010094 0x00010094 0xc0130f78 0xc01000c5 
+    kern/debug/kdebug.c:352: print_stackframe+21
+ebp:0xc0130f58 eip:0xc0100e49 args:0x00000000 0x00000000 0x00000000 0xc0130fc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0130f78 eip:0xc01000c5 args:0x00000000 0xc0130fa0 0xffff0000 0xc0130fa4 
+    kern/init/init.c:59: grade_backtrace2+19
+ebp:0xc0130f98 eip:0xc01000e7 args:0x00000000 0xffff0000 0xc0130fc4 0x0000002a 
+    kern/init/init.c:64: grade_backtrace1+27
+ebp:0xc0130fb8 eip:0xc0100104 args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:69: grade_backtrace0+19
+ebp:0xc0130fd8 eip:0xc0100125 args:0x00000000 0x00000000 0x00000000 0xc010cc80 
+    kern/init/init.c:74: grade_backtrace+26
+ebp:0xc0130ff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:33: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31798
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+I am No.4 philosopher_condvar
+Iter 1, No.4 philosopher_condvar is thinking
+I am No.3 philosopher_condvar
+Iter 1, No.3 philosopher_condvar is thinking
+I am No.2 philosopher_condvar
+Iter 1, No.2 philosopher_condvar is thinking
+I am No.1 philosopher_condvar
+Iter 1, No.1 philosopher_condvar is thinking
+I am No.0 philosopher_condvar
+Iter 1, No.0 philosopher_condvar is thinking
+I am No.4 philosopher_sema
+Iter 1, No.4 philosopher_sema is thinking
+I am No.3 philosopher_sema
+Iter 1, No.3 philosopher_sema is thinking
+I am No.2 philosopher_sema
+Iter 1, No.2 philosopher_sema is thinking
+I am No.1 philosopher_sema
+Iter 1, No.1 philosopher_sema is thinking
+I am No.0 philosopher_sema
+Iter 1, No.0 philosopher_sema is thinking
+kernel_execve: pid = 2, name = "faultread".
+not valid addr 0, and  can not find it in vma
+trapframe at 0xc03b0fb4
+  edi  0x00000000
+  esi  0x00000000
+  ebp  0xafffffa8
+  oesp 0xc03b0fd4
+  ebx  0x00000000
+  edx  0x00000000
+  ecx  0xafffffc0
+  eax  0x00000000
+  ds   0x----0023
+  es   0x----0023
+  fs   0x----0000
+  gs   0x----0000
+  trap 0x0000000e Page Fault
+  err  0x00000004
+  eip  0x00800f69
+  cs   0x----001b
+  flag 0x00000286 PF,SF,IF,IOPL=0
+  esp  0xafffffa0
+  ss   0x----0023
+killed by kernel.
+kernel panic at kern/trap/trap.c:212:
+    handle user mode pgfault failed. ret=-3
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P lab7_original/.forktest.log lab7/.forktest.log
--- lab7_original/.forktest.log	1970-01-01 08:00:00.000000000 +0800
+++ lab7/.forktest.log	2016-05-06 22:00:08.611664982 +0800
@@ -0,0 +1,346 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc010cc7c (phys)
+  edata  0xc01c22c4 (phys)
+  end    0xc01c5584 (phys)
+Kernel executable memory footprint: 790KB
+ebp:0xc0130f48 eip:0xc0100b4f args:0x00010094 0x00010094 0xc0130f78 0xc01000c5 
+    kern/debug/kdebug.c:352: print_stackframe+21
+ebp:0xc0130f58 eip:0xc0100e49 args:0x00000000 0x00000000 0x00000000 0xc0130fc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0130f78 eip:0xc01000c5 args:0x00000000 0xc0130fa0 0xffff0000 0xc0130fa4 
+    kern/init/init.c:59: grade_backtrace2+19
+ebp:0xc0130f98 eip:0xc01000e7 args:0x00000000 0xffff0000 0xc0130fc4 0x0000002a 
+    kern/init/init.c:64: grade_backtrace1+27
+ebp:0xc0130fb8 eip:0xc0100104 args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:69: grade_backtrace0+19
+ebp:0xc0130fd8 eip:0xc0100125 args:0x00000000 0x00000000 0x00000000 0xc010cc80 
+    kern/init/init.c:74: grade_backtrace+26
+ebp:0xc0130ff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:33: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31798
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+I am No.4 philosopher_condvar
+Iter 1, No.4 philosopher_condvar is thinking
+I am No.3 philosopher_condvar
+Iter 1, No.3 philosopher_condvar is thinking
+I am No.2 philosopher_condvar
+Iter 1, No.2 philosopher_condvar is thinking
+I am No.1 philosopher_condvar
+Iter 1, No.1 philosopher_condvar is thinking
+I am No.0 philosopher_condvar
+Iter 1, No.0 philosopher_condvar is thinking
+I am No.4 philosopher_sema
+Iter 1, No.4 philosopher_sema is thinking
+I am No.3 philosopher_sema
+Iter 1, No.3 philosopher_sema is thinking
+I am No.2 philosopher_sema
+Iter 1, No.2 philosopher_sema is thinking
+I am No.1 philosopher_sema
+Iter 1, No.1 philosopher_sema is thinking
+I am No.0 philosopher_sema
+Iter 1, No.0 philosopher_sema is thinking
+kernel_execve: pid = 2, name = "forktest".
+I am child 31
+I am child 30
+I am child 29
+I am child 28
+I am child 27
+I am child 26
+I am child 25
+I am child 24
+I am child 23
+I am child 22
+I am child 21
+I am child 20
+I am child 19
+I am child 18
+I am child 17
+I am child 16
+I am child 15
+I am child 14
+I am child 13
+I am child 12
+I am child 11
+I am child 10
+I am child 9
+I am child 8
+I am child 7
+I am child 6
+I am child 5
+I am child 4
+I am child 3
+I am child 2
+I am child 1
+I am child 0
+forktest pass.
+Iter 1, No.0 philosopher_sema is eating
+Iter 1, No.2 philosopher_sema is eating
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 1, No.0 philosopher_condvar is eating
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 1, No.2 philosopher_condvar is eating
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.3 philosopher_condvar is eating
+Iter 2, No.2 philosopher_sema is thinking
+Iter 1, No.3 philosopher_sema is eating
+Iter 2, No.0 philosopher_sema is thinking
+Iter 1, No.1 philosopher_sema is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.2 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.0 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+Iter 2, No.1 philosopher_sema is thinking
+Iter 2, No.0 philosopher_sema is eating
+Iter 2, No.3 philosopher_sema is thinking
+Iter 2, No.2 philosopher_sema is eating
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.1 philosopher_condvar is thinking
+Iter 2, No.3 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.2 philosopher_condvar is eating
+Iter 3, No.2 philosopher_sema is thinking
+Iter 2, No.3 philosopher_sema is eating
+Iter 3, No.0 philosopher_sema is thinking
+Iter 2, No.1 philosopher_sema is eating
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.4 philosopher_condvar is eating
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.0 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.2 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.2 philosopher_condvar is eating
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.1 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.1 philosopher_sema is thinking
+Iter 3, No.0 philosopher_sema is eating
+Iter 3, No.3 philosopher_sema is thinking
+Iter 3, No.2 philosopher_sema is eating
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.4 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+Iter 4, No.2 philosopher_sema is thinking
+Iter 4, No.0 philosopher_sema is thinking
+Iter 3, No.1 philosopher_sema is eating
+Iter 1, No.4 philosopher_sema is eating
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.3 philosopher_condvar is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.2 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.0 philosopher_condvar is thinking
+Iter 4, No.1 philosopher_sema is thinking
+Iter 4, No.2 philosopher_sema is eating
+Iter 2, No.4 philosopher_sema is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+Iter 4, No.0 philosopher_sema is eating
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.1 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.2 philosopher_condvar is eating
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.3 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 1, cvp->owner->next_count 0
+No.2 philosopher_sema quit
+Iter 3, No.3 philosopher_sema is eating
+cond_wait end:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.4 philosopher_condvar is eating
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+No.0 philosopher_condvar quit
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+No.0 philosopher_sema quit
+Iter 4, No.1 philosopher_sema is eating
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+No.2 philosopher_condvar quit
+No.1 philosopher_condvar quit
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.3 philosopher_condvar is eating
+No.1 philosopher_sema quit
+Iter 4, No.3 philosopher_sema is thinking
+Iter 2, No.4 philosopher_sema is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.4 philosopher_condvar is thinking
+Iter 3, No.4 philosopher_sema is thinking
+Iter 4, No.3 philosopher_condvar is thinking
+Iter 4, No.3 philosopher_sema is eating
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.4 philosopher_condvar is eating
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+No.3 philosopher_sema quit
+Iter 3, No.4 philosopher_sema is eating
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.3 philosopher_condvar is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.4 philosopher_condvar is thinking
+Iter 4, No.4 philosopher_sema is thinking
+No.3 philosopher_condvar quit
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.4 philosopher_condvar is eating
+Iter 4, No.4 philosopher_sema is eating
+No.4 philosopher_condvar quit
+No.4 philosopher_sema quit
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:476:
+    initproc exit.
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P lab7_original/.forktree.log lab7/.forktree.log
--- lab7_original/.forktree.log	1970-01-01 08:00:00.000000000 +0800
+++ lab7/.forktree.log	2016-05-06 22:00:11.699781497 +0800
@@ -0,0 +1,346 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc010cc7c (phys)
+  edata  0xc01c22c4 (phys)
+  end    0xc01c5584 (phys)
+Kernel executable memory footprint: 790KB
+ebp:0xc0130f48 eip:0xc0100b4f args:0x00010094 0x00010094 0xc0130f78 0xc01000c5 
+    kern/debug/kdebug.c:352: print_stackframe+21
+ebp:0xc0130f58 eip:0xc0100e49 args:0x00000000 0x00000000 0x00000000 0xc0130fc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0130f78 eip:0xc01000c5 args:0x00000000 0xc0130fa0 0xffff0000 0xc0130fa4 
+    kern/init/init.c:59: grade_backtrace2+19
+ebp:0xc0130f98 eip:0xc01000e7 args:0x00000000 0xffff0000 0xc0130fc4 0x0000002a 
+    kern/init/init.c:64: grade_backtrace1+27
+ebp:0xc0130fb8 eip:0xc0100104 args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:69: grade_backtrace0+19
+ebp:0xc0130fd8 eip:0xc0100125 args:0x00000000 0x00000000 0x00000000 0xc010cc80 
+    kern/init/init.c:74: grade_backtrace+26
+ebp:0xc0130ff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:33: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31798
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+I am No.4 philosopher_condvar
+Iter 1, No.4 philosopher_condvar is thinking
+I am No.3 philosopher_condvar
+Iter 1, No.3 philosopher_condvar is thinking
+I am No.2 philosopher_condvar
+Iter 1, No.2 philosopher_condvar is thinking
+I am No.1 philosopher_condvar
+Iter 1, No.1 philosopher_condvar is thinking
+I am No.0 philosopher_condvar
+Iter 1, No.0 philosopher_condvar is thinking
+I am No.4 philosopher_sema
+Iter 1, No.4 philosopher_sema is thinking
+I am No.3 philosopher_sema
+Iter 1, No.3 philosopher_sema is thinking
+I am No.2 philosopher_sema
+Iter 1, No.2 philosopher_sema is thinking
+I am No.1 philosopher_sema
+Iter 1, No.1 philosopher_sema is thinking
+I am No.0 philosopher_sema
+Iter 1, No.0 philosopher_sema is thinking
+kernel_execve: pid = 2, name = "forktree".
+0002: I am ''
+000e: I am '1'
+0010: I am '11'
+0012: I am '111'
+0014: I am '1111'
+0013: I am '1110'
+0011: I am '110'
+0016: I am '1101'
+0015: I am '1100'
+000f: I am '10'
+0018: I am '101'
+001a: I am '1011'
+0019: I am '1010'
+0017: I am '100'
+001c: I am '1001'
+001b: I am '1000'
+000d: I am '0'
+001e: I am '01'
+0020: I am '011'
+0022: I am '0111'
+0021: I am '0110'
+001f: I am '010'
+0024: I am '0101'
+0023: I am '0100'
+001d: I am '00'
+0026: I am '001'
+0028: I am '0011'
+0027: I am '0010'
+0025: I am '000'
+002a: I am '0001'
+0029: I am '0000'
+Iter 1, No.0 philosopher_sema is eating
+Iter 1, No.2 philosopher_sema is eating
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 1, No.0 philosopher_condvar is eating
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 1, No.2 philosopher_condvar is eating
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.3 philosopher_condvar is eating
+Iter 2, No.2 philosopher_sema is thinking
+Iter 1, No.3 philosopher_sema is eating
+Iter 2, No.0 philosopher_sema is thinking
+Iter 1, No.1 philosopher_sema is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.2 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.0 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+Iter 2, No.1 philosopher_sema is thinking
+Iter 2, No.0 philosopher_sema is eating
+Iter 2, No.3 philosopher_sema is thinking
+Iter 2, No.2 philosopher_sema is eating
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.1 philosopher_condvar is thinking
+Iter 2, No.3 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.2 philosopher_condvar is eating
+Iter 3, No.2 philosopher_sema is thinking
+Iter 2, No.3 philosopher_sema is eating
+Iter 3, No.0 philosopher_sema is thinking
+Iter 2, No.1 philosopher_sema is eating
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.4 philosopher_condvar is eating
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.0 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.2 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.2 philosopher_condvar is eating
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.1 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.1 philosopher_sema is thinking
+Iter 3, No.0 philosopher_sema is eating
+Iter 3, No.3 philosopher_sema is thinking
+Iter 3, No.2 philosopher_sema is eating
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.4 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+Iter 4, No.2 philosopher_sema is thinking
+Iter 4, No.0 philosopher_sema is thinking
+Iter 3, No.1 philosopher_sema is eating
+Iter 1, No.4 philosopher_sema is eating
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.3 philosopher_condvar is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.2 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.0 philosopher_condvar is thinking
+Iter 4, No.1 philosopher_sema is thinking
+Iter 4, No.2 philosopher_sema is eating
+Iter 2, No.4 philosopher_sema is thinking
+cond_wait begin:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 1, cvp->owner->next_count 0
+Iter 4, No.0 philosopher_sema is eating
+cond_wait end:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.4 philosopher_condvar is eating
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.3 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.2 philosopher_condvar is eating
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.1 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+No.2 philosopher_sema quit
+Iter 3, No.3 philosopher_sema is eating
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.4 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+No.0 philosopher_sema quit
+Iter 4, No.1 philosopher_sema is eating
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.3 philosopher_condvar is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+No.2 philosopher_condvar quit
+cond_wait begin:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+No.1 philosopher_sema quit
+Iter 4, No.3 philosopher_sema is thinking
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+No.0 philosopher_condvar quit
+Iter 2, No.4 philosopher_sema is eating
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.4 philosopher_condvar is eating
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.3 philosopher_condvar is thinking
+Iter 3, No.4 philosopher_sema is thinking
+Iter 4, No.3 philosopher_sema is eating
+No.1 philosopher_condvar quit
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.3 philosopher_condvar is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.4 philosopher_condvar is thinking
+No.3 philosopher_sema quit
+Iter 3, No.4 philosopher_sema is eating
+No.3 philosopher_condvar quit
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.4 philosopher_condvar is eating
+Iter 4, No.4 philosopher_sema is thinking
+No.4 philosopher_condvar quit
+Iter 4, No.4 philosopher_sema is eating
+No.4 philosopher_sema quit
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:476:
+    initproc exit.
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P lab7_original/.gdb.in lab7/.gdb.in
--- lab7_original/.gdb.in	1970-01-01 08:00:00.000000000 +0800
+++ lab7/.gdb.in	2016-05-06 22:00:43.572974607 +0800
@@ -0,0 +1,4 @@
+target remote localhost:1234
+break *0xc0100332
+break *0x00100332
+continue
diff -r -u -P lab7_original/.hello.log lab7/.hello.log
--- lab7_original/.hello.log	1970-01-01 08:00:00.000000000 +0800
+++ lab7/.hello.log	2016-05-06 21:59:44.346749508 +0800
@@ -0,0 +1,316 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc010cc7c (phys)
+  edata  0xc01c22c4 (phys)
+  end    0xc01c5584 (phys)
+Kernel executable memory footprint: 790KB
+ebp:0xc0130f48 eip:0xc0100b4f args:0x00010094 0x00010094 0xc0130f78 0xc01000c5 
+    kern/debug/kdebug.c:352: print_stackframe+21
+ebp:0xc0130f58 eip:0xc0100e49 args:0x00000000 0x00000000 0x00000000 0xc0130fc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0130f78 eip:0xc01000c5 args:0x00000000 0xc0130fa0 0xffff0000 0xc0130fa4 
+    kern/init/init.c:59: grade_backtrace2+19
+ebp:0xc0130f98 eip:0xc01000e7 args:0x00000000 0xffff0000 0xc0130fc4 0x0000002a 
+    kern/init/init.c:64: grade_backtrace1+27
+ebp:0xc0130fb8 eip:0xc0100104 args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:69: grade_backtrace0+19
+ebp:0xc0130fd8 eip:0xc0100125 args:0x00000000 0x00000000 0x00000000 0xc010cc80 
+    kern/init/init.c:74: grade_backtrace+26
+ebp:0xc0130ff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:33: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31798
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+I am No.4 philosopher_condvar
+Iter 1, No.4 philosopher_condvar is thinking
+I am No.3 philosopher_condvar
+Iter 1, No.3 philosopher_condvar is thinking
+I am No.2 philosopher_condvar
+Iter 1, No.2 philosopher_condvar is thinking
+I am No.1 philosopher_condvar
+Iter 1, No.1 philosopher_condvar is thinking
+I am No.0 philosopher_condvar
+Iter 1, No.0 philosopher_condvar is thinking
+I am No.4 philosopher_sema
+Iter 1, No.4 philosopher_sema is thinking
+I am No.3 philosopher_sema
+Iter 1, No.3 philosopher_sema is thinking
+I am No.2 philosopher_sema
+Iter 1, No.2 philosopher_sema is thinking
+I am No.1 philosopher_sema
+Iter 1, No.1 philosopher_sema is thinking
+I am No.0 philosopher_sema
+Iter 1, No.0 philosopher_sema is thinking
+kernel_execve: pid = 2, name = "hello".
+Hello world!!.
+I am process 2.
+hello pass.
+Iter 1, No.0 philosopher_sema is eating
+Iter 1, No.2 philosopher_sema is eating
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 1, No.0 philosopher_condvar is eating
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 1, No.2 philosopher_condvar is eating
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.3 philosopher_condvar is eating
+Iter 2, No.2 philosopher_sema is thinking
+Iter 1, No.3 philosopher_sema is eating
+Iter 2, No.0 philosopher_sema is thinking
+Iter 1, No.1 philosopher_sema is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.2 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.0 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+Iter 2, No.1 philosopher_sema is thinking
+Iter 2, No.0 philosopher_sema is eating
+Iter 2, No.3 philosopher_sema is thinking
+Iter 2, No.2 philosopher_sema is eating
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.1 philosopher_condvar is thinking
+Iter 2, No.3 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.2 philosopher_condvar is eating
+Iter 3, No.2 philosopher_sema is thinking
+Iter 2, No.3 philosopher_sema is eating
+Iter 3, No.0 philosopher_sema is thinking
+Iter 2, No.1 philosopher_sema is eating
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.4 philosopher_condvar is eating
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.0 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.2 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.2 philosopher_condvar is eating
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.1 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.1 philosopher_sema is thinking
+Iter 3, No.0 philosopher_sema is eating
+Iter 3, No.3 philosopher_sema is thinking
+Iter 3, No.2 philosopher_sema is eating
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.4 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+Iter 4, No.2 philosopher_sema is thinking
+Iter 4, No.0 philosopher_sema is thinking
+Iter 3, No.1 philosopher_sema is eating
+Iter 1, No.4 philosopher_sema is eating
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.3 philosopher_condvar is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.2 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.0 philosopher_condvar is thinking
+Iter 4, No.1 philosopher_sema is thinking
+Iter 4, No.2 philosopher_sema is eating
+Iter 2, No.4 philosopher_sema is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+Iter 4, No.0 philosopher_sema is eating
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.1 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.2 philosopher_condvar is eating
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.3 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 1, cvp->owner->next_count 0
+No.2 philosopher_sema quit
+Iter 3, No.3 philosopher_sema is eating
+cond_wait end:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.4 philosopher_condvar is eating
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+No.0 philosopher_condvar quit
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+No.0 philosopher_sema quit
+Iter 4, No.1 philosopher_sema is eating
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+No.2 philosopher_condvar quit
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+No.1 philosopher_condvar quit
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.3 philosopher_condvar is eating
+No.1 philosopher_sema quit
+Iter 4, No.3 philosopher_sema is thinking
+Iter 2, No.4 philosopher_sema is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.4 philosopher_condvar is thinking
+Iter 3, No.4 philosopher_sema is thinking
+Iter 4, No.3 philosopher_condvar is thinking
+Iter 4, No.3 philosopher_sema is eating
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.4 philosopher_condvar is eating
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+No.3 philosopher_sema quit
+Iter 3, No.4 philosopher_sema is eating
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.3 philosopher_condvar is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.4 philosopher_condvar is thinking
+Iter 4, No.4 philosopher_sema is thinking
+No.3 philosopher_condvar quit
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.4 philosopher_condvar is eating
+Iter 4, No.4 philosopher_sema is eating
+No.4 philosopher_condvar quit
+No.4 philosopher_sema quit
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:476:
+    initproc exit.
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P lab7_original/kern/debug/kdebug.c lab7/kern/debug/kdebug.c
--- lab7_original/kern/debug/kdebug.c	2016-02-22 20:41:06.000000000 +0800
+++ lab7/kern/debug/kdebug.c	2016-04-30 19:47:56.614326520 +0800
@@ -335,7 +335,7 @@
  * */
 void
 print_stackframe(void) {
-     /* LAB1 YOUR CODE : STEP 1 */
+     /* LAB1 2013011371 : STEP 1 */
      /* (1) call read_ebp() to get the value of ebp. the type is (uint32_t);
       * (2) call read_eip() to get the value of eip. the type is (uint32_t);
       * (3) from 0 .. STACKFRAME_DEPTH
@@ -347,5 +347,18 @@
       *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
       *                   the calling funciton's ebp = ss:[ebp]
       */
+
+	uint32_t ebp = read_ebp();
+    uint32_t eip = read_eip();
+    int i = 0;
+    while (ebp && i<STACKFRAME_DEPTH){
+    	cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
+    	for (int j=0; j<4; j++) cprintf("0x%08x ", ((uint32_t *)ebp)[j+2]);
+    	cprintf("\n");
+    	print_debuginfo(eip - 1);
+    	i++;
+    	eip = ((uint32_t *)ebp)[1];
+    	ebp = ((uint32_t *)ebp)[0];
+    }
 }
 
diff -r -u -P lab7_original/kern/init/entry.S~ lab7/kern/init/entry.S~
--- lab7_original/kern/init/entry.S~	1970-01-01 08:00:00.000000000 +0800
+++ lab7/kern/init/entry.S~	2016-04-30 19:47:56.614326520 +0800
@@ -0,0 +1,49 @@
+#include <mmu.h>
+#include <memlayout.h>
+
+#define REALLOC(x) (x - KERNBASE)
+
+.text
+.globl kern_entry
+kern_entry:
+    # reload temperate gdt (second time) to remap all physical memory
+    # virtual_addr 0~4G=linear_addr&physical_addr -KERNBASE~4G-KERNBASE
+    lgdt REALLOC(__gdtdesc)
+    movl $KERNEL_DS, %eax
+    movw %ax, %ds
+    movw %ax, %es
+    movw %ax, %ss
+
+    ljmp $KERNEL_CS, $relocated
+
+relocated:
+
+    # set ebp, esp
+    movl $0x0, %ebp
+    # the kernel stack region is from bootstack -- bootstacktop,
+    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
+    movl $bootstacktop, %esp
+    # now kernel stack is ready , call the first C function
+    call kern_init
+
+# should never get here
+spin:
+    jmp spin
+
+.data
+.align PGSIZE
+    .globl bootstack
+bootstack:
+    .space KSTACKSIZE
+    .globl bootstacktop
+bootstacktop:
+
+.align 4
+__gdt:
+    SEG_NULL
+    SEG_ASM(STA_X | STA_R, - KERNBASE, 0xFFFFFFFF)      # code segment
+    SEG_ASM(STA_W, - KERNBASE, 0xFFFFFFFF)              # data segment
+__gdtdesc:
+    .word 0x17                                          # sizeof(__gdt) - 1
+    .long REALLOC(__gdt)
+
diff -r -u -P lab7_original/kern/init/init.c lab7/kern/init/init.c
--- lab7_original/kern/init/init.c	2016-02-22 20:41:06.000000000 +0800
+++ lab7/kern/init/init.c	2016-04-30 19:47:56.614326520 +0800
@@ -95,11 +95,22 @@
 static void
 lab1_switch_to_user(void) {
     //LAB1 CHALLENGE 1 : TODO
+	asm volatile(
+		"sub $0x8, %%esp \n"
+		"int %0 \n"
+		"movl %%ebp, %%esp"
+		:
+		:"i"(T_SWITCH_TOU));
 }
 
 static void
 lab1_switch_to_kernel(void) {
     //LAB1 CHALLENGE 1 :  TODO
+	asm volatile(
+		"int %0 \n"
+		"movl %%ebp, %%esp"
+		:
+		:"i"(T_SWITCH_TOK));
 }
 
 static void
diff -r -u -P lab7_original/kern/mm/default_pmm.c lab7/kern/mm/default_pmm.c
--- lab7_original/kern/mm/default_pmm.c	2016-02-22 20:41:06.000000000 +0800
+++ lab7/kern/mm/default_pmm.c	2016-04-30 19:47:56.614326520 +0800
@@ -9,7 +9,7 @@
    usually split, and the remainder added to the list as another free block.
    Please see Page 196~198, Section 8.2 of Yan Wei Min's chinese book "Data Structure -- C programming language"
 */
-// LAB2 EXERCISE 1: YOUR CODE
+// LAB2 EXERCISE 1: 2013011371
 // you should rewrite functions: default_init,default_init_memmap,default_alloc_pages, default_free_pages.
 /*
  * Details of FFMA
@@ -77,7 +77,7 @@
     base->property = n;
     SetPageProperty(base);
     nr_free += n;
-    list_add(&free_list, &(base->page_link));
+    list_add_before(&free_list, &(base->page_link));
 }
 
 static struct Page *
@@ -96,12 +96,14 @@
         }
     }
     if (page != NULL) {
+    	list_entry_t *prev =list_prev(&(page->page_link));
         list_del(&(page->page_link));
         if (page->property > n) {
             struct Page *p = page + n;
             p->property = page->property - n;
-            list_add(&free_list, &(p->page_link));
-    }
+            list_add(prev, &(p->page_link));
+            SetPageProperty(p);
+        }
         nr_free -= n;
         ClearPageProperty(page);
     }
@@ -136,7 +138,9 @@
         }
     }
     nr_free += n;
-    list_add(&free_list, &(base->page_link));
+    le = &free_list;
+    while ((le = list_next(le)) != &free_list && le2page(le,page_link)<base);
+    list_add_before(le, &(base->page_link));
 }
 
 static size_t
diff -r -u -P lab7_original/kern/mm/pmm.c lab7/kern/mm/pmm.c
--- lab7_original/kern/mm/pmm.c	2016-02-22 20:41:06.000000000 +0800
+++ lab7/kern/mm/pmm.c	2016-04-30 19:47:56.618326520 +0800
@@ -229,9 +229,9 @@
     for (i = 0; i < npage; i ++) {
         SetPageReserved(pages + i);
     }
-
+    //point the start address of available memory(note: physical address!)
     uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
-
+    //collect all the free memory(aligned with pages)
     for (i = 0; i < memmap->nr_map; i ++) {
         uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
         if (memmap->map[i].type == E820_ARM) {
@@ -363,7 +363,7 @@
 // return vaule: the kernel virtual address of this pte
 pte_t *
 get_pte(pde_t *pgdir, uintptr_t la, bool create) {
-    /* LAB2 EXERCISE 2: YOUR CODE
+    /* LAB2 EXERCISE 2: 2013011371
      *
      * If you need to visit a physical address, please use KADDR()
      * please read pmm.h for useful macros
@@ -384,18 +384,26 @@
      *   PTE_W           0x002                   // page table/directory entry flags bit : Writeable
      *   PTE_U           0x004                   // page table/directory entry flags bit : User can access
      */
-#if 0
-    pde_t *pdep = NULL;   // (1) find page directory entry
-    if (0) {              // (2) check if entry is not present
-                          // (3) check if creating is needed, then alloc page for page table
-                          // CAUTION: this page is used for page table, not for common data page
-                          // (4) set page reference
-        uintptr_t pa = 0; // (5) get linear address of page
-                          // (6) clear page content using memset
-                          // (7) set page directory entry's permission
+
+    pde_t *pdep = NULL;
+    pdep = pgdir + PDX(la);// (1) find page directory entry
+    bool isPresent = (*pdep) & PTE_P;// (2) check if entry is not present
+    if (!isPresent){
+    	if (!create) return NULL; // (3) check if creating is needed, then alloc page for page table
+    	else{
+    		struct Page *pt_page = alloc_page();
+    		uintptr_t pt_p = page2pa(pt_page);
+    		pte_t *pt_k = page2kva(pt_page);// (5) get linear address of page
+    		set_page_ref(pt_page, 1); // (4) set page reference
+    		memset(pt_k, 0, PGSIZE); // (6) clear page content using memset
+    		*pdep = (pt_p & ~0x0FFF) | PTE_U | PTE_W | PTE_P; // (7) set page directory entry's permission
+    		return pt_k + PTX(la); // (8) return page table entry
+    	}
+    }else{// CAUTION: this page is used for page table, not for common data page
+    	pte_t *pt_p = (pte_t *)((*pdep) & ~0x0FFF);
+    	return KADDR((uintptr_t)(pt_p + PTX(la)));
     }
-    return NULL;          // (8) return page table entry
-#endif
+    return NULL;
 }
 
 //get_page - get related Page struct for linear address la using PDT pgdir
@@ -416,7 +424,7 @@
 //note: PT is changed, so the TLB need to be invalidate 
 static inline void
 page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
-    /* LAB2 EXERCISE 3: YOUR CODE
+    /* LAB2 EXERCISE 3: 2013011371
      *
      * Please check if ptep is valid, and tlb must be manually updated if mapping is updated
      *
@@ -432,15 +440,16 @@
      * DEFINEs:
      *   PTE_P           0x001                   // page table/directory entry flags bit : Present
      */
-#if 0
-    if (0) {                      //(1) check if this page table entry is present
-        struct Page *page = NULL; //(2) find corresponding page to pte
-                                  //(3) decrease page reference
-                                  //(4) and free this page when page reference reachs 0
-                                  //(5) clear second page table entry
-                                  //(6) flush tlb
+	bool isPresent = (*ptep) & PTE_P;
+    if (isPresent) {                      		//(1) check if this page table entry is present
+        struct Page *page = pte2page(*ptep); 	//(2) find corresponding page to pte
+        int new_ref = page_ref_dec(page);    	//(3) decrease page reference
+        if (!new_ref){                          //(4) and free this page when page reference reachs 0
+        	free_page(page);    				//(5) clear second page table entry
+        }										//(6) flush tlb
+        *ptep = 0x0;
+        tlb_invalidate(pgdir, la);
     }
-#endif
 }
 
 void
@@ -497,32 +506,37 @@
         }
         //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
         if (*ptep & PTE_P) {
-            if ((nptep = get_pte(to, start, 1)) == NULL) {
-                return -E_NO_MEM;
-            }
-        uint32_t perm = (*ptep & PTE_USER);
-        //get page from ptep
-        struct Page *page = pte2page(*ptep);
-        // alloc a page for process B
-        struct Page *npage=alloc_page();
-        assert(page!=NULL);
-        assert(npage!=NULL);
-        int ret=0;
-        /* LAB5:EXERCISE2 YOUR CODE
-         * replicate content of page to npage, build the map of phy addr of nage with the linear addr start
-         *
-         * Some Useful MACROs and DEFINEs, you can use them in below implementation.
-         * MACROs or Functions:
-         *    page2kva(struct Page *page): return the kernel vritual addr of memory which page managed (SEE pmm.h)
-         *    page_insert: build the map of phy addr of an Page with the linear addr la
-         *    memcpy: typical memory copy function
-         *
-         * (1) find src_kvaddr: the kernel virtual address of page
-         * (2) find dst_kvaddr: the kernel virtual address of npage
-         * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
-         * (4) build the map of phy addr of  nage with the linear addr start
-         */
-        assert(ret == 0);
+        	if ((nptep = get_pte(to, start, 1)) == NULL) {
+        		return -E_NO_MEM;
+        	}
+        	uint32_t perm = (*ptep & PTE_USER);
+        	//get page from ptep
+        	struct Page *page = pte2page(*ptep);
+        	// alloc a page for process B
+        	struct Page *npage=alloc_page();
+        	assert(page!=NULL);
+        	assert(npage!=NULL);
+        	int ret=0;
+        	/* LAB5:EXERCISE2 2013011371
+        	 * replicate content of page to npage, build the map of phy addr of nage with the linear addr start
+        	 *
+        	 * Some Useful MACROs and DEFINEs, you can use them in below implementation.
+        	 * MACROs or Functions:
+        	 *    page2kva(struct Page *page): return the kernel vritual addr of memory which page managed (SEE pmm.h)
+        	 *    page_insert: build the map of phy addr of an Page with the linear addr la
+        	 *    memcpy: typical memory copy function
+        	 *
+        	 * (1) find src_kvaddr: the kernel virtual address of page
+        	 * (2) find dst_kvaddr: the kernel virtual address of npage
+        	 * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
+        	 * (4) build the map of phy addr of  nage with the linear addr start
+        	 */
+
+        	char* src_kvaddr = page2kva(page);
+        	char* dst_kvaddr = page2kva(npage);
+        	memcpy(dst_kvaddr, src_kvaddr, PGSIZE);
+        	ret = page_insert(to, npage, start, perm);
+        	assert(ret == 0);
         }
         start += PGSIZE;
     } while (start != 0 && start < end);
diff -r -u -P lab7_original/kern/mm/swap_fifo.c lab7/kern/mm/swap_fifo.c
--- lab7_original/kern/mm/swap_fifo.c	2016-02-22 20:41:06.000000000 +0800
+++ lab7/kern/mm/swap_fifo.c	2016-04-30 19:47:56.618326520 +0800
@@ -49,8 +49,9 @@
  
     assert(entry != NULL && head != NULL);
     //record the page access situlation
-    /*LAB3 EXERCISE 2: YOUR CODE*/ 
+    /*LAB3 EXERCISE 2: 2013011371*/
     //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
+    list_add_before(head, entry);
     return 0;
 }
 /*
@@ -64,9 +65,12 @@
          assert(head != NULL);
      assert(in_tick==0);
      /* Select the victim */
-     /*LAB3 EXERCISE 2: YOUR CODE*/ 
+     /*LAB3 EXERCISE 2: 2013011371*/
      //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
      //(2)  set the addr of addr of this page to ptr_page
+     list_entry_t* victim = list_next(head);
+     list_del(victim);
+     *ptr_page = le2page(victim, pra_page_link);
      return 0;
 }
 
diff -r -u -P lab7_original/kern/mm/vmm.c lab7/kern/mm/vmm.c
--- lab7_original/kern/mm/vmm.c	2016-02-22 20:41:06.000000000 +0800
+++ lab7/kern/mm/vmm.c	2016-04-30 19:47:56.622326520 +0800
@@ -451,15 +451,14 @@
     *   mm->pgdir : the PDT of these vma
     *
     */
-#if 0
-    /*LAB3 EXERCISE 1: YOUR CODE*/
-    ptep = ???              //(1) try to find a pte, if pte's PT(Page Table) isn't existed, then create a PT.
-    if (*ptep == 0) {
-                            //(2) if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr
 
+    /*LAB3 EXERCISE 1: 2013011371*/
+    ptep = get_pte(mm->pgdir, addr, 1);              //(1) try to find a pte, if pte's PT(Page Table) isn't existed, then create a PT.
+    if (*ptep == 0) {//(2) if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr
+    	pgdir_alloc_page(mm->pgdir, addr, perm);
     }
     else {
-    /*LAB3 EXERCISE 2: YOUR CODE
+    /*LAB3 EXERCISE 2: 2013011371
     * Now we think this pte is a  swap entry, we should load data from disk to a page with phy addr,
     * and map the phy addr with logical addr, trigger swap manager to record the access situation of this page.
     *
@@ -486,13 +485,19 @@
                                     //(2) According to the mm, addr AND page, setup the map of phy addr <---> logical addr
                                     //(3) make the page swappable.
                                     //(4) [NOTICE]: you myabe need to update your lab3's implementation for LAB5's normal execution.
+            if ((ret = swap_in(mm, addr, &page)) != 0) {
+            	cprintf("swap_in in do_pgfault failed\n");
+            	goto failed;
+            }
+            page_insert(mm->pgdir, page, addr, perm);
+            swap_map_swappable(mm, addr, page, 1);
+            page->pra_vaddr = addr;
         }
         else {
             cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
             goto failed;
         }
    }
-#endif
    ret = 0;
 failed:
     return ret;
diff -r -u -P lab7_original/kern/process/proc.c lab7/kern/process/proc.c
--- lab7_original/kern/process/proc.c	2016-02-22 20:41:06.000000000 +0800
+++ lab7/kern/process/proc.c	2016-05-06 22:00:42.376929735 +0800
@@ -85,42 +85,65 @@
 // alloc_proc - alloc a proc_struct and init all fields of proc_struct
 static struct proc_struct *
 alloc_proc(void) {
-    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
-    if (proc != NULL) {
-    //LAB4:EXERCISE1 YOUR CODE
-    /*
-     * below fields in proc_struct need to be initialized
-     *       enum proc_state state;                      // Process state
-     *       int pid;                                    // Process ID
-     *       int runs;                                   // the running times of Proces
-     *       uintptr_t kstack;                           // Process kernel stack
-     *       volatile bool need_resched;                 // bool value: need to be rescheduled to release CPU?
-     *       struct proc_struct *parent;                 // the parent process
-     *       struct mm_struct *mm;                       // Process's memory management field
-     *       struct context context;                     // Switch here to run process
-     *       struct trapframe *tf;                       // Trap frame for current interrupt
-     *       uintptr_t cr3;                              // CR3 register: the base addr of Page Directroy Table(PDT)
-     *       uint32_t flags;                             // Process flag
-     *       char name[PROC_NAME_LEN + 1];               // Process name
-     */
-     //LAB5 YOUR CODE : (update LAB4 steps)
-    /*
-     * below fields(add in LAB5) in proc_struct need to be initialized	
-     *       uint32_t wait_state;                        // waiting state
-     *       struct proc_struct *cptr, *yptr, *optr;     // relations between processes
-	 */
-     //LAB6 YOUR CODE : (update LAB5 steps)
-    /*
-     * below fields(add in LAB6) in proc_struct need to be initialized
-     *     struct run_queue *rq;                       // running queue contains Process
-     *     list_entry_t run_link;                      // the entry linked in run queue
-     *     int time_slice;                             // time slice for occupying the CPU
-     *     skew_heap_entry_t lab6_run_pool;            // FOR LAB6 ONLY: the entry in the run pool
-     *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process
-     *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)
-     */
-    }
-    return proc;
+	struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
+	if (proc != NULL) {
+		//LAB4:EXERCISE1 2013011371
+		/*
+		 * below fields in proc_struct need to be initialized
+		 *       enum proc_state state;                      // Process state
+		 *       int pid;                                    // Process ID
+		 *       int runs;                                   // the running times of Proces
+		 *       uintptr_t kstack;                           // Process kernel stack
+		 *       volatile bool need_resched;                 // bool value: need to be rescheduled to release CPU?
+		 *       struct proc_struct *parent;                 // the parent process
+		 *       struct mm_struct *mm;                       // Process's memory management field
+		 *       struct context context;                     // Switch here to run process
+		 *       struct trapframe *tf;                       // Trap frame for current interrupt
+		 *       uintptr_t cr3;                              // CR3 register: the base addr of Page Directroy Table(PDT)
+		 *       uint32_t flags;                             // Process flag
+		 *       char name[PROC_NAME_LEN + 1];               // Process name
+		 */
+		//LAB5 2013011371 : (update LAB4 steps)
+		/*
+		 * below fields(add in LAB5) in proc_struct need to be initialized
+		 *       uint32_t wait_state;                        // waiting state
+		 *       struct proc_struct *cptr, *yptr, *optr;     // relations between processes
+		 */
+		//LAB6 2013011371 : (update LAB5 steps)
+		/*
+		 * below fields(add in LAB6) in proc_struct need to be initialized
+		 *     struct run_queue *rq;                       // running queue contains Process
+		 *     list_entry_t run_link;                      // the entry linked in run queue
+		 *     int time_slice;                             // time slice for occupying the CPU
+		 *     skew_heap_entry_t lab6_run_pool;            // FOR LAB6 ONLY: the entry in the run pool
+		 *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process
+		 *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)
+		 */
+		proc->state = PROC_UNINIT;
+		proc->pid = -1;
+		proc->runs = 0;
+		proc->kstack = 0;
+		proc->need_resched = 0;
+		proc->parent = NULL;
+		proc->mm = NULL;
+		struct context nullContext;
+		memset(&nullContext, 0, sizeof(struct context));
+		proc->context = nullContext;
+		proc->tf = NULL;
+		proc->cr3 = boot_cr3;
+		proc->flags = 0;
+		memset(proc->name, 0, sizeof(proc->name));
+
+		proc->wait_state = 0;
+		proc->cptr = proc->optr = proc->yptr = NULL;
+
+		proc->rq = NULL;
+		list_init(&(proc->run_link));
+		proc->time_slice = 0;
+		proc->lab6_run_pool.left = proc->lab6_run_pool.right = proc->lab6_run_pool.parent = NULL;
+		proc->lab6_priority = proc->lab6_stride = 0;
+	}
+	return proc;
 }
 
 // set_proc_name - set the name of proc
@@ -380,7 +403,7 @@
         goto fork_out;
     }
     ret = -E_NO_MEM;
-    //LAB4:EXERCISE2 YOUR CODE
+    //LAB4:EXERCISE2 2013011371
     /*
      * Some Useful MACROs, Functions and DEFINEs, you can use them in below implementation.
      * MACROs or Functions:
@@ -406,14 +429,30 @@
     //    6. call wakeup_proc to make the new child process RUNNABLE
     //    7. set ret vaule using child proc's pid
 
-	//LAB5 YOUR CODE : (update LAB4 steps)
+	//LAB5 2013011371 : (update LAB4 steps)
    /* Some Functions
     *    set_links:  set the relation links of process.  ALSO SEE: remove_links:  lean the relation links of process 
     *    -------------------
 	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
 	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
     */
-	
+    if ((proc = alloc_proc()) == NULL) goto fork_out;
+    proc->parent = current;
+    assert(current->wait_state == 0);//step 1
+    if (setup_kstack(proc) != 0) goto bad_fork_cleanup_proc; //step 2
+    if (copy_mm(clone_flags, proc) != 0) goto bad_fork_cleanup_kstack; //step 3
+    copy_thread(proc, stack, tf); //step 4
+    bool intr_flag;
+    //make following process atomic
+    local_intr_save(intr_flag);//step 5
+    {
+        proc->pid = get_pid();
+        hash_proc(proc);
+        set_links(proc);
+    }
+    local_intr_restore(intr_flag);
+    wakeup_proc(proc); //step 6
+    ret = proc->pid; // step 7
 fork_out:
     return ret;
 
@@ -603,7 +642,7 @@
     //(6) setup trapframe for user environment
     struct trapframe *tf = current->tf;
     memset(tf, 0, sizeof(struct trapframe));
-    /* LAB5:EXERCISE1 YOUR CODE
+    /* LAB5:EXERCISE1 2013011371
      * should set tf_cs,tf_ds,tf_es,tf_ss,tf_esp,tf_eip,tf_eflags
      * NOTICE: If we set trapframe correctly, then the user level process can return to USER MODE from kernel. So
      *          tf_cs should be USER_CS segment (see memlayout.h)
@@ -612,6 +651,11 @@
      *          tf_eip should be the entry point of this binary program (elf->e_entry)
      *          tf_eflags should be set to enable computer to produce Interrupt
      */
+    tf->tf_cs = USER_CS;
+    tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
+    tf->tf_esp = USTACKTOP;
+    tf->tf_eip = elf->e_entry;
+    tf->tf_eflags |= FL_IF;
     ret = 0;
 out:
     return ret;
diff -r -u -P lab7_original/kern/schedule/default_sched.c lab7/kern/schedule/default_sched.c
--- lab7_original/kern/schedule/default_sched.c	2016-02-22 20:41:06.000000000 +0800
+++ lab7/kern/schedule/default_sched.c	2016-04-30 19:47:56.626326520 +0800
@@ -4,55 +4,154 @@
 #include <assert.h>
 #include <default_sched.h>
 
-static void
-RR_init(struct run_queue *rq) {
-    list_init(&(rq->run_list));
-    rq->proc_num = 0;
+#define USE_SKEW_HEAP 1
+
+/* You should define the BigStride constant here*/
+/* LAB6: YOUR CODE */
+#define BIG_STRIDE 0x7FFFFFFF   /* you should give a value, and is ??? */
+
+/* The compare function for two skew_heap_node_t's and the
+ * corresponding procs*/
+static int
+proc_stride_comp_f(void *a, void *b)
+{
+     struct proc_struct *p = le2proc(a, lab6_run_pool);
+     struct proc_struct *q = le2proc(b, lab6_run_pool);
+     int32_t c = p->lab6_stride - q->lab6_stride;
+     if (c > 0) return 1;
+     else if (c == 0) return 0;
+     else return -1;
 }
 
+/*
+ * stride_init initializes the run-queue rq with correct assignment for
+ * member variables, including:
+ *
+ *   - run_list: should be a empty list after initialization.
+ *   - lab6_run_pool: NULL
+ *   - proc_num: 0
+ *   - max_time_slice: no need here, the variable would be assigned by the caller.
+ *
+ * hint: see libs/list.h for routines of the list structures.
+ */
 static void
-RR_enqueue(struct run_queue *rq, struct proc_struct *proc) {
-    assert(list_empty(&(proc->run_link)));
-    list_add_before(&(rq->run_list), &(proc->run_link));
-    if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
-        proc->time_slice = rq->max_time_slice;
-    }
-    proc->rq = rq;
-    rq->proc_num ++;
+stride_init(struct run_queue *rq) {
+     /* LAB6: 2103011371
+      * (1) init the ready process list: rq->run_list
+      * (2) init the run pool: rq->lab6_run_pool
+      * (3) set number of process: rq->proc_num to 0       
+      */
+	list_init(&(rq->run_list));
+	rq->lab6_run_pool = NULL;
+	rq->proc_num = 0;
 }
 
+/*
+ * stride_enqueue inserts the process ``proc'' into the run-queue
+ * ``rq''. The procedure should verify/initialize the relevant members
+ * of ``proc'', and then put the ``lab6_run_pool'' node into the
+ * queue(since we use priority queue here). The procedure should also
+ * update the meta date in ``rq'' structure.
+ *
+ * proc->time_slice denotes the time slices allocation for the
+ * process, which should set to rq->max_time_slice.
+ * 
+ * hint: see libs/skew_heap.h for routines of the priority
+ * queue structures.
+ */
 static void
-RR_dequeue(struct run_queue *rq, struct proc_struct *proc) {
-    assert(!list_empty(&(proc->run_link)) && proc->rq == rq);
-    list_del_init(&(proc->run_link));
-    rq->proc_num --;
+stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
+     /* LAB6: 2013011371
+      * (1) insert the proc into rq correctly
+      * NOTICE: you can use skew_heap or list. Important functions
+      *         skew_heap_insert: insert a entry into skew_heap
+      *         list_add_before: insert  a entry into the last of list   
+      * (2) recalculate proc->time_slice
+      * (3) set proc->rq pointer to rq
+      * (4) increase rq->proc_num
+      */
+	rq->lab6_run_pool = skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
+	if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
+		proc->time_slice = rq->max_time_slice;
+	}
+	proc->rq = rq;
+	rq->proc_num++;
 }
 
+/*
+ * stride_dequeue removes the process ``proc'' from the run-queue
+ * ``rq'', the operation would be finished by the skew_heap_remove
+ * operations. Remember to update the ``rq'' structure.
+ *
+ * hint: see libs/skew_heap.h for routines of the priority
+ * queue structures.
+ */
+static void
+stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
+     /* LAB6: 2013011371
+      * (1) remove the proc from rq correctly
+      * NOTICE: you can use skew_heap or list. Important functions
+      *         skew_heap_remove: remove a entry from skew_heap
+      *         list_del_init: remove a entry from the  list
+      */
+	rq->lab6_run_pool = skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
+	rq->proc_num--;
+}
+/*
+ * stride_pick_next pick the element from the ``run-queue'', with the
+ * minimum value of stride, and returns the corresponding process
+ * pointer. The process pointer would be calculated by macro le2proc,
+ * see kern/process/proc.h for definition. Return NULL if
+ * there is no process in the queue.
+ *
+ * When one proc structure is selected, remember to update the stride
+ * property of the proc. (stride += BIG_STRIDE / priority)
+ *
+ * hint: see libs/skew_heap.h for routines of the priority
+ * queue structures.
+ */
 static struct proc_struct *
-RR_pick_next(struct run_queue *rq) {
-    list_entry_t *le = list_next(&(rq->run_list));
-    if (le != &(rq->run_list)) {
-        return le2proc(le, run_link);
-    }
-    return NULL;
+stride_pick_next(struct run_queue *rq) {
+     /* LAB6: 2013011371
+      * (1) get a  proc_struct pointer p  with the minimum value of stride
+             (1.1) If using skew_heap, we can use le2proc get the p from rq->lab6_run_poll
+             (1.2) If using list, we have to search list to find the p with minimum stride value
+      * (2) update p;s stride value: p->lab6_stride
+      * (3) return p
+      */
+	if (rq->lab6_run_pool == NULL) return NULL;
+	struct proc_struct *next_proc = le2proc(rq->lab6_run_pool, lab6_run_pool);
+	if (next_proc->lab6_priority == 0 ) next_proc->lab6_stride += BIG_STRIDE;
+	else{
+		next_proc->lab6_stride += BIG_STRIDE/next_proc->lab6_priority;
+	}
+	return next_proc;
 }
 
+/*
+ * stride_proc_tick works with the tick event of current process. You
+ * should check whether the time slices for current process is
+ * exhausted and update the proc struct ``proc''. proc->time_slice
+ * denotes the time slices left for current
+ * process. proc->need_resched is the flag variable for process
+ * switching.
+ */
 static void
-RR_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
-    if (proc->time_slice > 0) {
-        proc->time_slice --;
-    }
-    if (proc->time_slice == 0) {
-        proc->need_resched = 1;
-    }
+stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
+     /* LAB6: 2013011371 */
+	if (proc->time_slice > 0){
+		proc->time_slice--;
+	}
+	if (proc->time_slice == 0){
+		proc->need_resched = 1;
+	}
 }
 
 struct sched_class default_sched_class = {
-    .name = "RR_scheduler",
-    .init = RR_init,
-    .enqueue = RR_enqueue,
-    .dequeue = RR_dequeue,
-    .pick_next = RR_pick_next,
-    .proc_tick = RR_proc_tick,
+     .name = "stride_scheduler",
+     .init = stride_init,
+     .enqueue = stride_enqueue,
+     .dequeue = stride_dequeue,
+     .pick_next = stride_pick_next,
+     .proc_tick = stride_proc_tick,
 };
-
diff -r -u -P lab7_original/kern/schedule/default_sched_RR_c lab7/kern/schedule/default_sched_RR_c
--- lab7_original/kern/schedule/default_sched_RR_c	1970-01-01 08:00:00.000000000 +0800
+++ lab7/kern/schedule/default_sched_RR_c	2016-04-30 19:47:56.626326520 +0800
@@ -0,0 +1,58 @@
+#include <defs.h>
+#include <list.h>
+#include <proc.h>
+#include <assert.h>
+#include <default_sched.h>
+
+static void
+RR_init(struct run_queue *rq) {
+    list_init(&(rq->run_list));
+    rq->proc_num = 0;
+}
+
+static void
+RR_enqueue(struct run_queue *rq, struct proc_struct *proc) {
+    assert(list_empty(&(proc->run_link)));
+    list_add_before(&(rq->run_list), &(proc->run_link));
+    if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
+        proc->time_slice = rq->max_time_slice;
+    }
+    proc->rq = rq;
+    rq->proc_num ++;
+}
+
+static void
+RR_dequeue(struct run_queue *rq, struct proc_struct *proc) {
+    assert(!list_empty(&(proc->run_link)) && proc->rq == rq);
+    list_del_init(&(proc->run_link));
+    rq->proc_num --;
+}
+
+static struct proc_struct *
+RR_pick_next(struct run_queue *rq) {
+    list_entry_t *le = list_next(&(rq->run_list));
+    if (le != &(rq->run_list)) {
+        return le2proc(le, run_link);
+    }
+    return NULL;
+}
+
+static void
+RR_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
+    if (proc->time_slice > 0) {
+        proc->time_slice --;
+    }
+    if (proc->time_slice == 0) {
+        proc->need_resched = 1;
+    }
+}
+
+struct sched_class default_sched_class = {
+    .name = "RR_scheduler",
+    .init = RR_init,
+    .enqueue = RR_enqueue,
+    .dequeue = RR_dequeue,
+    .pick_next = RR_pick_next,
+    .proc_tick = RR_proc_tick,
+};
+
diff -r -u -P lab7_original/kern/schedule/sched.c lab7/kern/schedule/sched.c
--- lab7_original/kern/schedule/sched.c	2016-02-22 20:41:06.000000000 +0800
+++ lab7/kern/schedule/sched.c	2016-04-30 19:47:56.626326520 +0800
@@ -30,7 +30,7 @@
     return sched_class->pick_next(rq);
 }
 
-static void
+extern void
 sched_class_proc_tick(struct proc_struct *proc) {
     if (proc != idleproc) {
         sched_class->proc_tick(rq, proc);
@@ -82,11 +82,13 @@
     local_intr_save(intr_flag);
     {
         current->need_resched = 0;
+        //cprintf("time up: %s %d\n", current->name, current->pid);
         if (current->state == PROC_RUNNABLE) {
             sched_class_enqueue(current);
         }
         if ((next = sched_class_pick_next()) != NULL) {
             sched_class_dequeue(next);
+            //cprintf("next proc: %s %d\n", next->name, next->pid);
         }
         if (next == NULL) {
             next = idleproc;
diff -r -u -P lab7_original/kern/sync/check_sync.c lab7/kern/sync/check_sync.c
--- lab7_original/kern/sync/check_sync.c	2016-02-22 20:41:06.000000000 +0800
+++ lab7/kern/sync/check_sync.c	2016-05-06 17:01:05.847687384 +0800
@@ -121,9 +121,14 @@
 void phi_take_forks_condvar(int i) {
      down(&(mtp->mutex));
 //--------into routine in monitor--------------
-     // LAB7 EXERCISE1: YOUR CODE
+     // LAB7 EXERCISE1: 2013011371
      // I am hungry
      // try to get fork
+     state_condvar[i] = HUNGRY;
+     phi_test_condvar(i);
+     while (state_condvar[i] != EATING){
+    	 cond_wait(&mtp->cv[i]);
+     }
 //--------leave routine in monitor--------------
       if(mtp->next_count>0)
          up(&(mtp->next));
@@ -133,11 +138,13 @@
 
 void phi_put_forks_condvar(int i) {
      down(&(mtp->mutex));
-
 //--------into routine in monitor--------------
-     // LAB7 EXERCISE1: YOUR CODE
+     // LAB7 EXERCISE1: 2013011371
      // I ate over
      // test left and right neighbors
+     state_condvar[i] = THINKING;
+     phi_test_condvar(LEFT);
+     phi_test_condvar(RIGHT);
 //--------leave routine in monitor--------------
      if(mtp->next_count>0)
         up(&(mtp->next));
diff -r -u -P lab7_original/kern/sync/monitor.c lab7/kern/sync/monitor.c
--- lab7_original/kern/sync/monitor.c	2016-02-22 20:41:06.000000000 +0800
+++ lab7/kern/sync/monitor.c	2016-05-06 16:29:50.202726784 +0800
@@ -25,7 +25,7 @@
 // Unlock one of threads waiting on the condition variable. 
 void 
 cond_signal (condvar_t *cvp) {
-   //LAB7 EXERCISE1: YOUR CODE
+   //LAB7 EXERCISE1: 2013011371
    cprintf("cond_signal begin: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);  
   /*
    *      cond_signal(cv) {
@@ -37,6 +37,13 @@
    *          }
    *       }
    */
+   monitor_t *mnt = cvp->owner;
+   if (cvp->count > 0){
+	   mnt->next_count++;
+	   up(&(cvp->sem));
+	   down(&(mnt->next));
+	   mnt->next_count--;
+   }
    cprintf("cond_signal end: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
 }
 
@@ -44,7 +51,7 @@
 // mutex and suspends calling thread on conditional variable after waking up locks mutex. Notice: mp is mutex semaphore for monitor's procedures
 void
 cond_wait (condvar_t *cvp) {
-    //LAB7 EXERCISE1: YOUR CODE
+    //LAB7 EXERCISE1: 2013011371
     cprintf("cond_wait begin:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
    /*
     *         cv.count ++;
@@ -55,5 +62,14 @@
     *         wait(cv.sem);
     *         cv.count --;
     */
+    monitor_t *mnt = cvp->owner;
+    cvp->count++;
+    if (mnt->next_count > 0){
+    	up(&(mnt->next));
+    }else{
+    	up(&(mnt->mutex));
+    }
+    down(&(cvp->sem));
+    cvp->count--;
     cprintf("cond_wait end:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
 }
diff -r -u -P lab7_original/kern/trap/trap.c lab7/kern/trap/trap.c
--- lab7_original/kern/trap/trap.c	2016-02-22 20:41:06.000000000 +0800
+++ lab7/kern/trap/trap.c	2016-04-30 20:04:18.049711327 +0800
@@ -42,7 +42,7 @@
 /* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
 void
 idt_init(void) {
-     /* LAB1 YOUR CODE : STEP 2 */
+     /* LAB1 2013011371 : STEP 2 */
      /* (1) Where are the entry addrs of each Interrupt Service Routine (ISR)?
       *     All ISR's entry addrs are stored in __vectors. where is uintptr_t __vectors[] ?
       *     __vectors[] is in kern/trap/vector.S which is produced by tools/vector.c
@@ -54,9 +54,16 @@
       *     You don't know the meaning of this instruction? just google it! and check the libs/x86.h to know more.
       *     Notice: the argument of lidt is idt_pd. try to find it!
       */
-     /* LAB5 YOUR CODE */ 
+     /* LAB5 2013011371 */
      //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
      //so you should setup the syscall interrupt gate in here
+	extern uintptr_t __vectors[];
+	for (int i=0; i<sizeof(idt)/sizeof(struct gatedesc); i++){
+		SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
+	}
+	SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
+	SETGATE(idt[T_SWITCH_TOK], 1, GD_KTEXT, __vectors[T_SWITCH_TOK], DPL_USER);
+	lidt(&idt_pd);
 }
 
 static const char *
@@ -182,6 +189,7 @@
 
 static volatile int in_swap_tick_event = 0;
 extern struct mm_struct *check_mm_struct;
+extern void sched_class_proc_tick(struct proc_struct *proc);
 
 static void
 trap_dispatch(struct trapframe *tf) {
@@ -214,26 +222,28 @@
     LAB3 : If some page replacement algorithm(such as CLOCK PRA) need tick to change the priority of pages,
     then you can add code here. 
 #endif
-        /* LAB1 YOUR CODE : STEP 3 */
+        /* LAB1 YOUR CODE : 2013011371 */
         /* handle the timer interrupt */
         /* (1) After a timer interrupt, you should record this event using a global variable (increase it), such as ticks in kern/driver/clock.c
          * (2) Every TICK_NUM cycle, you can print some info using a funciton, such as print_ticks().
          * (3) Too Simple? Yes, I think so!
          */
-        /* LAB5 YOUR CODE */
+        /* LAB5 2013011371 */
         /* you should upate you lab1 code (just add ONE or TWO lines of code):
          *    Every TICK_NUM cycle, you should set current process's current->need_resched = 1
          */
-        /* LAB6 YOUR CODE */
+        /* LAB6 2013011371 */
         /* you should upate you lab5 code
          * IMPORTANT FUNCTIONS:
 	     * sched_class_proc_tick
          */         
-        /* LAB7 YOUR CODE */
+        /* LAB7 2013011371 */
         /* you should upate you lab6 code
          * IMPORTANT FUNCTIONS:
 	     * run_timer_list
          */
+		ticks++;
+	    run_timer_list();
         break;
     case IRQ_OFFSET + IRQ_COM1:
         c = cons_getc();
@@ -243,11 +253,19 @@
         c = cons_getc();
         cprintf("kbd [%03d] %c\n", c, c);
         break;
-    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
+    //LAB1 CHALLENGE 1 : 2013011371 you should modify below codes.
     case T_SWITCH_TOU:
+    	tf->tf_cs = USER_CS;
+    	tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
+    	tf->tf_eflags |= (3<<12);
+    	break;
     case T_SWITCH_TOK:
-        panic("T_SWITCH_** ??\n");
-        break;
+    	tf->tf_cs = KERNEL_CS;
+    	tf->tf_ds = tf->tf_es = KERNEL_DS;
+    	tf->tf_ss = KERNEL_DS;
+    	tf->tf_eflags &= ~(3<<12);
+    	//panic("T_SWITCH_** ??\n");
+    	break;
     case IRQ_OFFSET + IRQ_IDE1:
     case IRQ_OFFSET + IRQ_IDE2:
         /* do nothing */
diff -r -u -P lab7_original/kern/trap/trap.c~ lab7/kern/trap/trap.c~
--- lab7_original/kern/trap/trap.c~	1970-01-01 08:00:00.000000000 +0800
+++ lab7/kern/trap/trap.c~	2016-04-30 19:47:56.626326520 +0800
@@ -0,0 +1,206 @@
+#include <defs.h>
+#include <mmu.h>
+#include <memlayout.h>
+#include <clock.h>
+#include <trap.h>
+#include <x86.h>
+#include <stdio.h>
+#include <assert.h>
+#include <console.h>
+#include <kdebug.h>
+
+#define TICK_NUM 100
+
+static void print_ticks() {
+    cprintf("%d ticks\n",TICK_NUM);
+#ifdef DEBUG_GRADE
+    cprintf("End of Test.\n");
+    panic("EOT: kernel seems ok.");
+#endif
+}
+
+/* *
+ * Interrupt descriptor table:
+ *
+ * Must be built at run time because shifted function addresses can't
+ * be represented in relocation records.
+ * */
+static struct gatedesc idt[256] = {{0}};
+
+static struct pseudodesc idt_pd = {
+    sizeof(idt) - 1, (uintptr_t)idt
+};
+
+/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
+void
+idt_init(void) {
+     /* 2013011371 : STEP 2 */
+     /* (1) Where are the entry addrs of each Interrupt Service Routine (ISR)?
+      *     All ISR's entry addrs are stored in __vectors. where is uintptr_t __vectors[] ?
+      *     __vectors[] is in kern/trap/vector.S which is produced by tools/vector.c
+      *     (try "make" command in lab1, then you will find vector.S in kern/trap DIR)
+      *     You can use  "extern uintptr_t __vectors[];" to define this extern variable which will be used later.
+      * (2) Now you should setup the entries of ISR in Interrupt Description Table (IDT).
+      *     Can you see idt[256] in this file? Yes, it's IDT! you can use SETGATE macro to setup each item of IDT
+      * (3) After setup the contents of IDT, you will let CPU know where is the IDT by using 'lidt' instruction.
+      *     You don't know the meaning of this instruction? just google it! and check the libs/x86.h to know more.
+      *     Notice: the argument of lidt is idt_pd. try to find it!
+      */
+	extern uintptr_t __vectors[];
+	for (int i=0; i<sizeof(idt)/sizeof(struct gatedesc); i++){
+		SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
+	}
+	SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
+	SETGATE(idt[T_SWITCH_TOK], 1, GD_KTEXT, __vectors[T_SWITCH_TOK], DPL_USER);
+	lidt(&idt_pd);
+}
+
+static const char *
+trapname(int trapno) {
+    static const char * const excnames[] = {
+        "Divide error",
+        "Debug",
+        "Non-Maskable Interrupt",
+        "Breakpoint",
+        "Overflow",
+        "BOUND Range Exceeded",
+        "Invalid Opcode",
+        "Device Not Available",
+        "Double Fault",
+        "Coprocessor Segment Overrun",
+        "Invalid TSS",
+        "Segment Not Present",
+        "Stack Fault",
+        "General Protection",
+        "Page Fault",
+        "(unknown trap)",
+        "x87 FPU Floating-Point Error",
+        "Alignment Check",
+        "Machine-Check",
+        "SIMD Floating-Point Exception"
+    };
+
+    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
+        return excnames[trapno];
+    }
+    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
+        return "Hardware Interrupt";
+    }
+    return "(unknown trap)";
+}
+
+/* trap_in_kernel - test if trap happened in kernel */
+bool
+trap_in_kernel(struct trapframe *tf) {
+    return (tf->tf_cs == (uint16_t)KERNEL_CS);
+}
+
+static const char *IA32flags[] = {
+    "CF", NULL, "PF", NULL, "AF", NULL, "ZF", "SF",
+    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
+    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
+};
+
+void
+print_trapframe(struct trapframe *tf) {
+    cprintf("trapframe at %p\n", tf);
+    print_regs(&tf->tf_regs);
+    cprintf("  ds   0x----%04x\n", tf->tf_ds);
+    cprintf("  es   0x----%04x\n", tf->tf_es);
+    cprintf("  fs   0x----%04x\n", tf->tf_fs);
+    cprintf("  gs   0x----%04x\n", tf->tf_gs);
+    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
+    cprintf("  err  0x%08x\n", tf->tf_err);
+    cprintf("  eip  0x%08x\n", tf->tf_eip);
+    cprintf("  cs   0x----%04x\n", tf->tf_cs);
+    cprintf("  flag 0x%08x ", tf->tf_eflags);
+
+    int i, j;
+    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
+        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
+            cprintf("%s,", IA32flags[i]);
+        }
+    }
+    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
+
+    if (!trap_in_kernel(tf)) {
+        cprintf("  esp  0x%08x\n", tf->tf_esp);
+        cprintf("  ss   0x----%04x\n", tf->tf_ss);
+    }
+}
+
+void
+print_regs(struct pushregs *regs) {
+    cprintf("  edi  0x%08x\n", regs->reg_edi);
+    cprintf("  esi  0x%08x\n", regs->reg_esi);
+    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
+    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
+    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
+    cprintf("  edx  0x%08x\n", regs->reg_edx);
+    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
+    cprintf("  eax  0x%08x\n", regs->reg_eax);
+}
+
+/* trap_dispatch - dispatch based on what type of trap occurred */
+static void
+trap_dispatch(struct trapframe *tf) {
+    char c;
+
+    switch (tf->tf_trapno) {
+    case IRQ_OFFSET + IRQ_TIMER:
+        /* 2013011371 : STEP 3 */
+        /* handle the timer interrupt */
+        /* (1) After a timer interrupt, you should record this event using a global variable (increase it), such as ticks in kern/driver/clock.c
+         * (2) Every TICK_NUM cycle, you can print some info using a funciton, such as print_ticks().
+         * (3) Too Simple? Yes, I think so!
+         */
+		ticks++;
+		if (ticks % TICK_NUM == 0){
+			print_ticks();
+		}
+        break;
+    case IRQ_OFFSET + IRQ_COM1:
+        c = cons_getc();
+        cprintf("serial [%03d] %c\n", c, c);
+        break;
+    case IRQ_OFFSET + IRQ_KBD:
+        c = cons_getc();
+        cprintf("kbd [%03d] %c\n", c, c);
+        break;
+    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
+    case T_SWITCH_TOU:
+    	tf->tf_cs = USER_CS;
+    	tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
+    	tf->tf_eflags |= (3<<12);
+    	break;
+    case T_SWITCH_TOK:
+    	tf->tf_cs = KERNEL_CS;
+    	tf->tf_ds = tf->tf_es = KERNEL_DS;
+    	tf->tf_ss = KERNEL_DS;
+    	tf->tf_eflags &= ~(3<<12);
+        //panic("T_SWITCH_** ??\n");
+        break;
+    case IRQ_OFFSET + IRQ_IDE1:
+    case IRQ_OFFSET + IRQ_IDE2:
+        /* do nothing */
+        break;
+    default:
+        // in kernel, it must be a mistake
+        if ((tf->tf_cs & 3) == 0) {
+            print_trapframe(tf);
+            panic("unexpected trap in kernel.\n");
+        }
+    }
+}
+
+/* *
+ * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
+ * the code in kern/trap/trapentry.S restores the old CPU state saved in the
+ * trapframe and then uses the iret instruction to return from the exception.
+ * */
+void
+trap(struct trapframe *tf) {
+    // dispatch based on what type of trap occurred
+    trap_dispatch(tf);
+}
+
diff -r -u -P lab7_original/kern/trap/trap.c.orig lab7/kern/trap/trap.c.orig
--- lab7_original/kern/trap/trap.c.orig	1970-01-01 08:00:00.000000000 +0800
+++ lab7/kern/trap/trap.c.orig	2016-02-21 23:21:20.078043328 +0800
@@ -0,0 +1,299 @@
+#include <defs.h>
+#include <mmu.h>
+#include <memlayout.h>
+#include <clock.h>
+#include <trap.h>
+#include <x86.h>
+#include <stdio.h>
+#include <assert.h>
+#include <console.h>
+#include <vmm.h>
+#include <swap.h>
+#include <kdebug.h>
+#include <unistd.h>
+#include <syscall.h>
+#include <error.h>
+#include <sched.h>
+#include <sync.h>
+#include <proc.h>
+
+#define TICK_NUM 100
+
+static void print_ticks() {
+    cprintf("%d ticks\n",TICK_NUM);
+#ifdef DEBUG_GRADE
+    cprintf("End of Test.\n");
+    panic("EOT: kernel seems ok.");
+#endif
+}
+
+/* *
+ * Interrupt descriptor table:
+ *
+ * Must be built at run time because shifted function addresses can't
+ * be represented in relocation records.
+ * */
+static struct gatedesc idt[256] = {{0}};
+
+static struct pseudodesc idt_pd = {
+    sizeof(idt) - 1, (uintptr_t)idt
+};
+
+/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
+void
+idt_init(void) {
+     /* LAB1 YOUR CODE : STEP 2 */
+     /* (1) Where are the entry addrs of each Interrupt Service Routine (ISR)?
+      *     All ISR's entry addrs are stored in __vectors. where is uintptr_t __vectors[] ?
+      *     __vectors[] is in kern/trap/vector.S which is produced by tools/vector.c
+      *     (try "make" command in lab1, then you will find vector.S in kern/trap DIR)
+      *     You can use  "extern uintptr_t __vectors[];" to define this extern variable which will be used later.
+      * (2) Now you should setup the entries of ISR in Interrupt Description Table (IDT).
+      *     Can you see idt[256] in this file? Yes, it's IDT! you can use SETGATE macro to setup each item of IDT
+      * (3) After setup the contents of IDT, you will let CPU know where is the IDT by using 'lidt' instruction.
+      *     You don't know the meaning of this instruction? just google it! and check the libs/x86.h to know more.
+      *     Notice: the argument of lidt is idt_pd. try to find it!
+      */
+     /* LAB5 YOUR CODE */ 
+     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
+     //so you should setup the syscall interrupt gate in here
+}
+
+static const char *
+trapname(int trapno) {
+    static const char * const excnames[] = {
+        "Divide error",
+        "Debug",
+        "Non-Maskable Interrupt",
+        "Breakpoint",
+        "Overflow",
+        "BOUND Range Exceeded",
+        "Invalid Opcode",
+        "Device Not Available",
+        "Double Fault",
+        "Coprocessor Segment Overrun",
+        "Invalid TSS",
+        "Segment Not Present",
+        "Stack Fault",
+        "General Protection",
+        "Page Fault",
+        "(unknown trap)",
+        "x87 FPU Floating-Point Error",
+        "Alignment Check",
+        "Machine-Check",
+        "SIMD Floating-Point Exception"
+    };
+
+    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
+        return excnames[trapno];
+    }
+    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
+        return "Hardware Interrupt";
+    }
+    return "(unknown trap)";
+}
+
+/* trap_in_kernel - test if trap happened in kernel */
+bool
+trap_in_kernel(struct trapframe *tf) {
+    return (tf->tf_cs == (uint16_t)KERNEL_CS);
+}
+
+static const char *IA32flags[] = {
+    "CF", NULL, "PF", NULL, "AF", NULL, "ZF", "SF",
+    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
+    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
+};
+
+void
+print_trapframe(struct trapframe *tf) {
+    cprintf("trapframe at %p\n", tf);
+    print_regs(&tf->tf_regs);
+    cprintf("  ds   0x----%04x\n", tf->tf_ds);
+    cprintf("  es   0x----%04x\n", tf->tf_es);
+    cprintf("  fs   0x----%04x\n", tf->tf_fs);
+    cprintf("  gs   0x----%04x\n", tf->tf_gs);
+    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
+    cprintf("  err  0x%08x\n", tf->tf_err);
+    cprintf("  eip  0x%08x\n", tf->tf_eip);
+    cprintf("  cs   0x----%04x\n", tf->tf_cs);
+    cprintf("  flag 0x%08x ", tf->tf_eflags);
+
+    int i, j;
+    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
+        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
+            cprintf("%s,", IA32flags[i]);
+        }
+    }
+    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
+
+    if (!trap_in_kernel(tf)) {
+        cprintf("  esp  0x%08x\n", tf->tf_esp);
+        cprintf("  ss   0x----%04x\n", tf->tf_ss);
+    }
+}
+
+void
+print_regs(struct pushregs *regs) {
+    cprintf("  edi  0x%08x\n", regs->reg_edi);
+    cprintf("  esi  0x%08x\n", regs->reg_esi);
+    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
+    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
+    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
+    cprintf("  edx  0x%08x\n", regs->reg_edx);
+    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
+    cprintf("  eax  0x%08x\n", regs->reg_eax);
+}
+
+static inline void
+print_pgfault(struct trapframe *tf) {
+    /* error_code:
+     * bit 0 == 0 means no page found, 1 means protection fault
+     * bit 1 == 0 means read, 1 means write
+     * bit 2 == 0 means kernel, 1 means user
+     * */
+    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
+            (tf->tf_err & 4) ? 'U' : 'K',
+            (tf->tf_err & 2) ? 'W' : 'R',
+            (tf->tf_err & 1) ? "protection fault" : "no page found");
+}
+
+static int
+pgfault_handler(struct trapframe *tf) {
+    extern struct mm_struct *check_mm_struct;
+    if(check_mm_struct !=NULL) { //used for test check_swap
+            print_pgfault(tf);
+        }
+    struct mm_struct *mm;
+    if (check_mm_struct != NULL) {
+        assert(current == idleproc);
+        mm = check_mm_struct;
+    }
+    else {
+        if (current == NULL) {
+            print_trapframe(tf);
+            print_pgfault(tf);
+            panic("unhandled page fault.\n");
+        }
+        mm = current->mm;
+    }
+    return do_pgfault(mm, tf->tf_err, rcr2());
+}
+
+static volatile int in_swap_tick_event = 0;
+extern struct mm_struct *check_mm_struct;
+
+static void
+trap_dispatch(struct trapframe *tf) {
+    char c;
+
+    int ret=0;
+
+    switch (tf->tf_trapno) {
+    case T_PGFLT:  //page fault
+        if ((ret = pgfault_handler(tf)) != 0) {
+            print_trapframe(tf);
+            if (current == NULL) {
+                panic("handle pgfault failed. ret=%d\n", ret);
+            }
+            else {
+                if (trap_in_kernel(tf)) {
+                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
+                }
+                cprintf("killed by kernel.\n");
+                panic("handle user mode pgfault failed. ret=%d\n", ret); 
+                do_exit(-E_KILLED);
+            }
+        }
+        break;
+    case T_SYSCALL:
+        syscall();
+        break;
+    case IRQ_OFFSET + IRQ_TIMER:
+#if 0
+    LAB3 : If some page replacement algorithm(such as CLOCK PRA) need tick to change the priority of pages,
+    then you can add code here. 
+#endif
+        /* LAB1 YOUR CODE : STEP 3 */
+        /* handle the timer interrupt */
+        /* (1) After a timer interrupt, you should record this event using a global variable (increase it), such as ticks in kern/driver/clock.c
+         * (2) Every TICK_NUM cycle, you can print some info using a funciton, such as print_ticks().
+         * (3) Too Simple? Yes, I think so!
+         */
+        /* LAB5 YOUR CODE */
+        /* you should upate you lab1 code (just add ONE or TWO lines of code):
+         *    Every TICK_NUM cycle, you should set current process's current->need_resched = 1
+         */
+        /* LAB6 YOUR CODE */
+        /* you should upate you lab5 code
+         * IMPORTANT FUNCTIONS:
+	     * sched_class_proc_tick
+         */         
+        /* LAB7 YOUR CODE */
+        /* you should upate you lab6 code
+         * IMPORTANT FUNCTIONS:
+	     * run_timer_list
+         */
+        break;
+    case IRQ_OFFSET + IRQ_COM1:
+        c = cons_getc();
+        cprintf("serial [%03d] %c\n", c, c);
+        break;
+    case IRQ_OFFSET + IRQ_KBD:
+        c = cons_getc();
+        cprintf("kbd [%03d] %c\n", c, c);
+        break;
+    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
+    case T_SWITCH_TOU:
+    case T_SWITCH_TOK:
+        panic("T_SWITCH_** ??\n");
+        break;
+    case IRQ_OFFSET + IRQ_IDE1:
+    case IRQ_OFFSET + IRQ_IDE2:
+        /* do nothing */
+        break;
+    default:
+        print_trapframe(tf);
+        if (current != NULL) {
+            cprintf("unhandled trap.\n");
+            do_exit(-E_KILLED);
+        }
+        // in kernel, it must be a mistake
+        panic("unexpected trap in kernel.\n");
+
+    }
+}
+
+/* *
+ * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
+ * the code in kern/trap/trapentry.S restores the old CPU state saved in the
+ * trapframe and then uses the iret instruction to return from the exception.
+ * */
+void
+trap(struct trapframe *tf) {
+    // dispatch based on what type of trap occurred
+    // used for previous projects
+    if (current == NULL) {
+        trap_dispatch(tf);
+    }
+    else {
+        // keep a trapframe chain in stack
+        struct trapframe *otf = current->tf;
+        current->tf = tf;
+    
+        bool in_kernel = trap_in_kernel(tf);
+    
+        trap_dispatch(tf);
+    
+        current->tf = otf;
+        if (!in_kernel) {
+            if (current->flags & PF_EXITING) {
+                do_exit(-E_KILLED);
+            }
+            if (current->need_resched) {
+                schedule();
+            }
+        }
+    }
+}
+
diff -r -u -P lab7_original/kern/trap/trap.c.rej lab7/kern/trap/trap.c.rej
--- lab7_original/kern/trap/trap.c.rej	1970-01-01 08:00:00.000000000 +0800
+++ lab7/kern/trap/trap.c.rej	2016-04-30 19:47:56.626326520 +0800
@@ -0,0 +1,36 @@
+--- kern/trap/trap.c	2016-02-22 20:41:06.000000000 +0800
++++ kern/trap/trap.c	2016-04-25 15:56:42.045557040 +0800
+@@ -222,22 +230,28 @@
+     LAB3 : If some page replacement algorithm(such as CLOCK PRA) need tick to change the priority of pages,
+     then you can add code here. 
+ #endif
+-        /* LAB1 YOUR CODE : STEP 3 */
++        /* LAB1 2013011371 : STEP 3 */
+         /* handle the timer interrupt */
+         /* (1) After a timer interrupt, you should record this event using a global variable (increase it), such as ticks in kern/driver/clock.c
+          * (2) Every TICK_NUM cycle, you can print some info using a funciton, such as print_ticks().
+          * (3) Too Simple? Yes, I think so!
+          */
+-        /* LAB5 YOUR CODE */
++        /* LAB5 2013011371 */
+         /* you should upate you lab1 code (just add ONE or TWO lines of code):
+          *    Every TICK_NUM cycle, you should set current process's current->need_resched = 1
+          */
+-        /* LAB6 YOUR CODE */
++        /* LAB6 2013011371 */
+         /* you should upate you lab5 code
+          * IMPORTANT FUNCTIONS:
+ 	     * sched_class_proc_tick
+-         */
+-        break;
++	     */
++		ticks++;
++    	sched_class_proc_tick(current);
++//    	if (ticks % TICK_NUM == 0){
++//    		assert(current != NULL);
++//    		sched_class_proc_tick(current);
++//    	}
++    	break;
+     case IRQ_OFFSET + IRQ_COM1:
+         c = cons_getc();
+         cprintf("serial [%03d] %c\n", c, c);
diff -r -u -P lab7_original/lab7_szy2014.md lab7/lab7_szy2014.md
--- lab7_original/lab7_szy2014.md	1970-01-01 08:00:00.000000000 +0800
+++ lab7/lab7_szy2014.md	2016-05-06 21:58:17.000000000 +0800
@@ -0,0 +1,60 @@
+#OS Lab7 Report
+
+##练习1:理解内核级信号量的实现和基于内核级信号量的哲学家就餐问题
+####1.内核级信号量的设计描述
+>内核级信号量对外表现为一个带有资源属性和资源修改原子操作的整体，对内则表现为一个由整型变量和等待队列构成的结构体，以及基于结构体的一系列操作函数。
+
+```
+typedef struct {
+    int value;
+    wait_queue_t wait_queue;
+} semaphore_t;
+```
+>其中value为这个信号量的资源量，wait_queue为等待队列，等待信号量的进程会挂在这个队列上。信号量最关键的部分是操作它的P函数和V函数，在ucore中P操作函数down(semaphore_t *sem)和V操作函数 up(semaphore_t *sem)。但这两个函数的具体实现是__down(semaphore_t *sem, uint32_t wait_state) 函数和__up(semaphore_t *sem, uint32_t wait_state)函数。
+
+>`具体实现信号量的P操作，首先关掉中断，然后判断当前信号量的value是否大于0。如果是>0，则表明可以获得信号量，故让value减一，并打开中断返回即可；如果不是>0，则表明无法获得信号量，故需要将当前的进程加入到等待队列中，并打开中断，然后运行调度器选择另外一个进程执行。如果被V操作唤醒，则把自身关联的wait从等待队列中删除。`
+
+>`具体实现信号量的V操作，首先关中断，如果信号量对应的wait queue中没有进程在等待，直接把信号量的value加一，然后开中断返回；如果有进程在等待且进程等待的原因是semophore设置的，则调用wakeup_wait函数将waitqueue中等待的第一个wait删除，且把此wait关联的进程唤醒，最后开中断返回`
+
+####2.基于内核级信号量的哲学家就餐问题的执行流程
+>与在线课程中介绍的不同（MOOC课程中将五把叉子作为五个信号量来处理），ucore中基于信号量的哲学家问题以哲学家作为信号量，把一个哲学家周围的两把叉子作为一个整体来考虑，要不就是能够全部获取进餐，要不就挂起等待。首先创建五个哲学家进程，把五个哲学家信号量初始化为0，即它作为一个同步事件来处理。哲学家首先进入思考状态，然后休眠一段时间，之后哲学家会进入临界区，并尝试获取两边的叉子，如果能获取就对自身的信号量作up操作，表示同步条件已经完成；如果不能获取（即两边至少有一个哲学家在进餐），就退出，然后因为同步事件未完成而被down挂起。如果进餐完毕，则哲学家释放自身的叉子，并测试两边的哲学家是否能够进餐。
+
+####3.用户态进程/线程提供信号量机制的设计方案
+>内核信号量和用户态信号量最大的差别就是处理权限问题，在内核信号量的实现过程中，有很多需要内核级别权限才能执行的操作，包括通过关闭中断来实现P、V原子操作以及对进程控制块的调度操作等等。故最简单的设计方式就是在用户态包装一些必要的操作，比如up\down，将其作为系统调用提供给用户态来调用。其次的问题是内存共享的问题，在内核态，所有线程的内存空间都是相同的，故对于一个信号量的访问和操作在语义和实际上都是针对同一个信号量；而在用户态则不同，不同的用户进程之间是不共享虚拟空间的，如果在fork时将信号量的那部分内存也复制了的话就没有意义了，故使用信号量进行同步互斥的进程之间，除了本身需要共享的一部分内存外，信号量的那部分内存也需要共享，即要求用户在初始化信号量时系统重新分配一个页面，并把这个页面设置为共享，fork时不要重新复制。
+
+---
+##练习2：完成内核级条件变量和基于内核级条件变量的哲学家就餐问题
+####1.内核级条件变量的设计描述
+>内核级条件变量主要由三部分组成，核心部分是一个信号量，其次是记录等待此条件的进程个数，最后是一个指向从属管程的指针，如下所示
+
+```
+typedef struct condvar{
+    semaphore_t sem;       
+    int count;              // the number of waiters on condvar
+    monitor_t * owner;      // the owner(monitor) of this condvar
+} condvar_t;
+```
+>针对条件变量，有两个基本的操作cond_wait和cond_signal，顾名思义wait就是等待这个条件成立，而signal就是确认条件成立，并提醒那些等待着这个条件的进程可以醒来了。
+
+>简单分析一下cond_wait函数，`进程肯定要等待一个条件变量成立才能执行，那么自身需要挂起并让另一个进程来运行管程的函数，此时有两种情况，第一是原先已经有在管程中的进程，只是因为signal而挂起了，那么wait函数需要唤醒它们；第二种情况是没有因为signal而挂起的函数，那么wait就需要释放管程的互斥锁，让其他需要进入的进程执行管程代码。`
+
+>`再看cond_signal函数，它要做就是唤醒等待这个条件变量的进程，如果没有人在等待，那么就直接返回即可。`
+
+####2.用户态进程/线程提供条件变量机制的设计方案
+>条件变量是基于信号量来实现的，底层的操作其实最后都落实到信号量的PV操作上，在前面提到的信号量的实现基础上，条件变量只是多了一层封装而已，同样需要考虑的是在创建条件变量的时候需要共享内存，这点也是和内核级别实现上的最大区别。
+
+---
+##与参考答案实现上的区别
+####练习二
+>没有太大的区别
+
+---
+##实验原理（重要部分简析）
+###实验中涉及的原理
+####1.信号量
+>信号量是一种同步互斥机制的实现，普遍存在于现在的各种操作系统内核里。相对于spinlock 的应用对象，信号量的应用对象是在临界区中运行的时间较长的进程。等待信号量的进程需要睡眠来减少占用 CPU 的开销，当多个（>1）进程可以进行互斥或同步合作时，一个进程会由于无法满足信号量设置的某条件而在某一位置停止，直到它接收到一个特定的信号（表明条件满足了）。为了发信号，需要使用一个称作信号量的特殊变量。为通过信号量s传送信号，信号量的V操作采用进程可执行原语semSignal(s)；为通过信号量s接收信号，信号量的P操作采用进程可执行原语semWait(s)；如果相应的信号仍然没有发送，则进程被阻塞或睡眠，直到发送完为止
+
+####2.条件变量与管程
+>引入了管程是为了将对共享资源的所有访问及其所需要的同步操作集中并封装起来。Hansan为管程所下的定义：“一个管程定义了一个数据结构和能为并发进程所执行（在该数据结构上）的一组操作，这组操作能同步进程和改变管程中的数据”。局限在管程中的数据结构，只能被局限在管程的操作过程所访问，任何管程之外的操作过程都不能访问它；另一方面，局限在管程中的操作过程也主要访问管程内的数据结构。由此可见，管程相当于一个隔离区，它把共享变量和对它进行操作的若干个过程围了起来，所有进程要访问临界资源时，都必须经过管程才能进入，而管程每次只允许一个进程进入管程，从而需要确保进程之间互斥。
+
+>`一个条件变量CV可理解为一个进程的等待队列，队列中的进程正等待某个条件C变为真。每个条件变量关联着一个断言 "断言 (程序)")Pc。当一个进程等待一个条件变量，该进程不算作占用了该管程，因而其它进程可以进入该管程执行，改变管程的状态，通知条件变量CV其关联的断言Pc在当前状态下为真。`
\ No newline at end of file
diff -r -u -P lab7_original/.matrix.log lab7/.matrix.log
--- lab7_original/.matrix.log	1970-01-01 08:00:00.000000000 +0800
+++ lab7/.matrix.log	2016-05-06 22:00:54.233374688 +0800
@@ -0,0 +1,351 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc010cc7c (phys)
+  edata  0xc01c22c4 (phys)
+  end    0xc01c5584 (phys)
+Kernel executable memory footprint: 790KB
+ebp:0xc0130f48 eip:0xc0100b4f args:0x00010094 0x00010094 0xc0130f78 0xc01000c5 
+    kern/debug/kdebug.c:352: print_stackframe+21
+ebp:0xc0130f58 eip:0xc0100e49 args:0x00000000 0x00000000 0x00000000 0xc0130fc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0130f78 eip:0xc01000c5 args:0x00000000 0xc0130fa0 0xffff0000 0xc0130fa4 
+    kern/init/init.c:59: grade_backtrace2+19
+ebp:0xc0130f98 eip:0xc01000e7 args:0x00000000 0xffff0000 0xc0130fc4 0x0000002a 
+    kern/init/init.c:64: grade_backtrace1+27
+ebp:0xc0130fb8 eip:0xc0100104 args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:69: grade_backtrace0+19
+ebp:0xc0130fd8 eip:0xc0100125 args:0x00000000 0x00000000 0x00000000 0xc010cc80 
+    kern/init/init.c:74: grade_backtrace+26
+ebp:0xc0130ff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:33: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31798
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+I am No.4 philosopher_condvar
+Iter 1, No.4 philosopher_condvar is thinking
+I am No.3 philosopher_condvar
+Iter 1, No.3 philosopher_condvar is thinking
+I am No.2 philosopher_condvar
+Iter 1, No.2 philosopher_condvar is thinking
+I am No.1 philosopher_condvar
+Iter 1, No.1 philosopher_condvar is thinking
+I am No.0 philosopher_condvar
+Iter 1, No.0 philosopher_condvar is thinking
+I am No.4 philosopher_sema
+Iter 1, No.4 philosopher_sema is thinking
+I am No.3 philosopher_sema
+Iter 1, No.3 philosopher_sema is thinking
+I am No.2 philosopher_sema
+Iter 1, No.2 philosopher_sema is thinking
+I am No.1 philosopher_sema
+Iter 1, No.1 philosopher_sema is thinking
+I am No.0 philosopher_sema
+Iter 1, No.0 philosopher_sema is thinking
+kernel_execve: pid = 2, name = "matrix".
+fork ok.
+pid 13 is running (1000 times)!.
+pid 13 done!.
+pid 15 is running (1100 times)!.
+pid 15 done!.
+pid 17 is running (4600 times)!.
+Iter 1, No.0 philosopher_sema is eating
+Iter 1, No.2 philosopher_sema is eating
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 1, No.0 philosopher_condvar is eating
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 1, No.2 philosopher_condvar is eating
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+pid 14 is running (1000 times)!.
+pid 14 done!.
+pid 19 is running (20600 times)!.
+pid 21 is running (2600 times)!.
+pid 23 is running (37100 times)!.
+pid 25 is running (23500 times)!.
+pid 27 is running (23500 times)!.
+pid 16 is running (1900 times)!.
+pid 18 is running (11000 times)!.
+pid 20 is running (37100 times)!.
+pid 29 is running (33400 times)!.
+pid 31 is running (2600 times)!.
+pid 32 is running (26600 times)!.
+pid 22 is running (13100 times)!.
+pid 24 is running (4600 times)!.
+pid 26 is running (2600 times)!.
+pid 28 is running (4600 times)!.
+pid 30 is running (13100 times)!.
+pid 33 is running (13100 times)!.
+pid 26 done!.
+pid 16 done!.
+Iter 2, No.2 philosopher_sema is thinking
+Iter 1, No.3 philosopher_sema is eating
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.3 philosopher_condvar is eating
+pid 31 done!.
+pid 21 done!.
+Iter 2, No.0 philosopher_sema is thinking
+Iter 1, No.1 philosopher_sema is eating
+Iter 2, No.1 philosopher_sema is thinking
+Iter 2, No.0 philosopher_sema is eating
+Iter 2, No.3 philosopher_sema is thinking
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.2 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.1 philosopher_condvar is eating
+Iter 2, No.2 philosopher_sema is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.0 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 1, cvp->owner->next_count 0
+pid 24 done!.
+Iter 3, No.0 philosopher_sema is thinking
+pid 17 done!.
+pid 28 done!.
+cond_wait end:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.4 philosopher_condvar is eating
+Iter 1, No.4 philosopher_sema is eating
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.3 philosopher_condvar is thinking
+Iter 2, No.1 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.2 philosopher_condvar is eating
+Iter 3, No.2 philosopher_sema is thinking
+Iter 2, No.1 philosopher_sema is eating
+Iter 2, No.4 philosopher_sema is thinking
+Iter 2, No.3 philosopher_sema is eating
+Iter 3, No.3 philosopher_sema is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.1 philosopher_sema is thinking
+Iter 3, No.0 philosopher_sema is eating
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.0 philosopher_condvar is eating
+Iter 4, No.0 philosopher_sema is thinking
+Iter 3, No.2 philosopher_sema is eating
+Iter 2, No.4 philosopher_sema is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.4 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.3 philosopher_condvar is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.2 philosopher_condvar is thinking
+Iter 4, No.2 philosopher_sema is thinking
+Iter 3, No.1 philosopher_sema is eating
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+Iter 3, No.4 philosopher_sema is thinking
+Iter 3, No.3 philosopher_sema is eating
+Iter 4, No.3 philosopher_sema is thinking
+Iter 4, No.1 philosopher_sema is thinking
+Iter 4, No.0 philosopher_sema is eating
+Iter 4, No.2 philosopher_sema is eating
+pid 18 done!.
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.0 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 1, cvp->owner->next_count 0
+No.2 philosopher_sema quit
+pid 30 done!.
+No.0 philosopher_sema quit
+pid 33 done!.
+pid 22 done!.
+Iter 4, No.1 philosopher_sema is eating
+Iter 3, No.4 philosopher_sema is eating
+cond_wait end:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.4 philosopher_condvar is eating
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.3 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+No.1 philosopher_sema quit
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.2 philosopher_condvar is eating
+Iter 4, No.4 philosopher_sema is thinking
+Iter 4, No.3 philosopher_sema is eating
+No.3 philosopher_sema quit
+Iter 4, No.4 philosopher_sema is eating
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.1 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.0 philosopher_condvar is eating
+No.4 philosopher_sema quit
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.4 philosopher_condvar is thinking
+Iter 4, No.2 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.3 philosopher_condvar is eating
+Iter 4, No.0 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.1 philosopher_condvar is eating
+Iter 4, No.3 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.4 philosopher_condvar is eating
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+pid 19 done!.
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.2 philosopher_condvar is eating
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.1 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.0 philosopher_condvar is eating
+pid 25 done!.
+pid 27 done!.
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.4 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.3 philosopher_condvar is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+No.2 philosopher_condvar quit
+No.0 philosopher_condvar quit
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.1 philosopher_condvar is eating
+No.3 philosopher_condvar quit
+pid 32 done!.
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.4 philosopher_condvar is eating
+No.1 philosopher_condvar quit
+No.4 philosopher_condvar quit
+pid 29 done!.
+pid 23 done!.
+pid 20 done!.
+matrix pass.
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:476:
+    initproc exit.
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P lab7_original/obj/boot/bootasm.d lab7/obj/boot/bootasm.d
--- lab7_original/obj/boot/bootasm.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/boot/bootasm.d	2016-05-06 21:59:27.478118346 +0800
@@ -0,0 +1 @@
+obj/boot/bootasm.o obj/boot/bootasm.d: boot/bootasm.S boot/asm.h
Binary files lab7_original/obj/boot/bootasm.o and lab7/obj/boot/bootasm.o differ
diff -r -u -P lab7_original/obj/boot/bootmain.d lab7/obj/boot/bootmain.d
--- lab7_original/obj/boot/bootmain.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/boot/bootmain.d	2016-05-06 21:59:27.458117622 +0800
@@ -0,0 +1,2 @@
+obj/boot/bootmain.o obj/boot/bootmain.d: boot/bootmain.c libs/defs.h \
+ libs/x86.h libs/elf.h
Binary files lab7_original/obj/boot/bootmain.o and lab7/obj/boot/bootmain.o differ
diff -r -u -P lab7_original/obj/bootblock.asm lab7/obj/bootblock.asm
--- lab7_original/obj/bootblock.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/bootblock.asm	2016-05-06 21:59:28.790166170 +0800
@@ -0,0 +1,402 @@
+
+obj/bootblock.o:     file format elf32-i386
+
+
+Disassembly of section .startup:
+
+00007c00 <start>:
+
+# start address should be 0:7c00, in real mode, the beginning address of the running bootloader
+.globl start
+start:
+.code16                                             # Assemble for 16-bit mode
+    cli                                             # Disable interrupts
+    7c00:	fa                   	cli    
+    cld                                             # String operations increment
+    7c01:	fc                   	cld    
+
+    # Set up the important data segment registers (DS, ES, SS).
+    xorw %ax, %ax                                   # Segment number zero
+    7c02:	31 c0                	xor    %eax,%eax
+    movw %ax, %ds                                   # -> Data Segment
+    7c04:	8e d8                	mov    %eax,%ds
+    movw %ax, %es                                   # -> Extra Segment
+    7c06:	8e c0                	mov    %eax,%es
+    movw %ax, %ss                                   # -> Stack Segment
+    7c08:	8e d0                	mov    %eax,%ss
+
+00007c0a <seta20.1>:
+    # Enable A20:
+    #  For backwards compatibility with the earliest PCs, physical
+    #  address line 20 is tied low, so that addresses higher than
+    #  1MB wrap around to zero by default. This code undoes this.
+seta20.1:
+    inb $0x64, %al                                  # Wait for not busy(8042 input buffer empty).
+    7c0a:	e4 64                	in     $0x64,%al
+    testb $0x2, %al
+    7c0c:	a8 02                	test   $0x2,%al
+    jnz seta20.1
+    7c0e:	75 fa                	jne    7c0a <seta20.1>
+
+    movb $0xd1, %al                                 # 0xd1 -> port 0x64
+    7c10:	b0 d1                	mov    $0xd1,%al
+    outb %al, $0x64                                 # 0xd1 means: write data to 8042's P2 port
+    7c12:	e6 64                	out    %al,$0x64
+
+00007c14 <seta20.2>:
+
+seta20.2:
+    inb $0x64, %al                                  # Wait for not busy(8042 input buffer empty).
+    7c14:	e4 64                	in     $0x64,%al
+    testb $0x2, %al
+    7c16:	a8 02                	test   $0x2,%al
+    jnz seta20.2
+    7c18:	75 fa                	jne    7c14 <seta20.2>
+
+    movb $0xdf, %al                                 # 0xdf -> port 0x60
+    7c1a:	b0 df                	mov    $0xdf,%al
+    outb %al, $0x60                                 # 0xdf = 11011111, means set P2's A20 bit(the 1 bit) to 1
+    7c1c:	e6 60                	out    %al,$0x60
+
+00007c1e <probe_memory>:
+
+probe_memory:
+    movl $0, 0x8000
+    7c1e:	66 c7 06 00 80       	movw   $0x8000,(%esi)
+    7c23:	00 00                	add    %al,(%eax)
+    7c25:	00 00                	add    %al,(%eax)
+    xorl %ebx, %ebx
+    7c27:	66 31 db             	xor    %bx,%bx
+    movw $0x8004, %di
+    7c2a:	bf 04 80 66 b8       	mov    $0xb8668004,%edi
+
+00007c2d <start_probe>:
+start_probe:
+    movl $0xE820, %eax
+    7c2d:	66 b8 20 e8          	mov    $0xe820,%ax
+    7c31:	00 00                	add    %al,(%eax)
+    movl $20, %ecx
+    7c33:	66 b9 14 00          	mov    $0x14,%cx
+    7c37:	00 00                	add    %al,(%eax)
+    movl $SMAP, %edx
+    7c39:	66 ba 50 41          	mov    $0x4150,%dx
+    7c3d:	4d                   	dec    %ebp
+    7c3e:	53                   	push   %ebx
+    int $0x15
+    7c3f:	cd 15                	int    $0x15
+    jnc cont
+    7c41:	73 08                	jae    7c4b <cont>
+    movw $12345, 0x8000
+    7c43:	c7 06 00 80 39 30    	movl   $0x30398000,(%esi)
+    jmp finish_probe
+    7c49:	eb 0e                	jmp    7c59 <finish_probe>
+
+00007c4b <cont>:
+cont:
+    addw $20, %di
+    7c4b:	83 c7 14             	add    $0x14,%edi
+    incl 0x8000
+    7c4e:	66 ff 06             	incw   (%esi)
+    7c51:	00 80 66 83 fb 00    	add    %al,0xfb8366(%eax)
+    cmpl $0, %ebx
+    jnz start_probe
+    7c57:	75 d4                	jne    7c2d <start_probe>
+
+00007c59 <finish_probe>:
+
+    # Switch from real to protected mode, using a bootstrap GDT
+    # and segment translation that makes virtual addresses
+    # identical to physical addresses, so that the
+    # effective memory map does not change during the switch.
+    lgdt gdtdesc
+    7c59:	0f 01 16             	lgdtl  (%esi)
+    7c5c:	b4 7d                	mov    $0x7d,%ah
+    movl %cr0, %eax
+    7c5e:	0f 20 c0             	mov    %cr0,%eax
+    orl $CR0_PE_ON, %eax
+    7c61:	66 83 c8 01          	or     $0x1,%ax
+    movl %eax, %cr0
+    7c65:	0f 22 c0             	mov    %eax,%cr0
+
+    # Jump to next instruction, but in 32-bit code segment.
+    # Switches processor into 32-bit mode.
+    ljmp $PROT_MODE_CSEG, $protcseg
+    7c68:	ea 6d 7c 08 00 66 b8 	ljmp   $0xb866,$0x87c6d
+
+00007c6d <protcseg>:
+
+.code32                                             # Assemble for 32-bit mode
+protcseg:
+    # Set up the protected-mode data segment registers
+    movw $PROT_MODE_DSEG, %ax                       # Our data segment selector
+    7c6d:	66 b8 10 00          	mov    $0x10,%ax
+    movw %ax, %ds                                   # -> DS: Data Segment
+    7c71:	8e d8                	mov    %eax,%ds
+    movw %ax, %es                                   # -> ES: Extra Segment
+    7c73:	8e c0                	mov    %eax,%es
+    movw %ax, %fs                                   # -> FS
+    7c75:	8e e0                	mov    %eax,%fs
+    movw %ax, %gs                                   # -> GS
+    7c77:	8e e8                	mov    %eax,%gs
+    movw %ax, %ss                                   # -> SS: Stack Segment
+    7c79:	8e d0                	mov    %eax,%ss
+
+    # Set up the stack pointer and call into C. The stack region is from 0--start(0x7c00)
+    movl $0x0, %ebp
+    7c7b:	bd 00 00 00 00       	mov    $0x0,%ebp
+    movl $start, %esp
+    7c80:	bc 00 7c 00 00       	mov    $0x7c00,%esp
+    call bootmain
+    7c85:	e8 9d 00 00 00       	call   7d27 <bootmain>
+
+00007c8a <spin>:
+
+    # If bootmain returns (it shouldn't), loop.
+spin:
+    jmp spin
+    7c8a:	eb fe                	jmp    7c8a <spin>
+
+Disassembly of section .text:
+
+00007c8c <readseg>:
+/* *
+ * readseg - read @count bytes at @offset from kernel into virtual address @va,
+ * might copy more than asked.
+ * */
+static void
+readseg(uintptr_t va, uint32_t count, uint32_t offset) {
+    7c8c:	55                   	push   %ebp
+    7c8d:	89 e5                	mov    %esp,%ebp
+    7c8f:	57                   	push   %edi
+    uintptr_t end_va = va + count;
+    7c90:	8d 3c 10             	lea    (%eax,%edx,1),%edi
+
+    // round down to sector boundary
+    va -= offset % SECTSIZE;
+    7c93:	89 ca                	mov    %ecx,%edx
+
+    // translate from bytes to sectors; kernel starts at sector 1
+    uint32_t secno = (offset / SECTSIZE) + 1;
+    7c95:	c1 e9 09             	shr    $0x9,%ecx
+/* *
+ * readseg - read @count bytes at @offset from kernel into virtual address @va,
+ * might copy more than asked.
+ * */
+static void
+readseg(uintptr_t va, uint32_t count, uint32_t offset) {
+    7c98:	56                   	push   %esi
+    uintptr_t end_va = va + count;
+
+    // round down to sector boundary
+    va -= offset % SECTSIZE;
+    7c99:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
+
+    // translate from bytes to sectors; kernel starts at sector 1
+    uint32_t secno = (offset / SECTSIZE) + 1;
+    7c9f:	8d 71 01             	lea    0x1(%ecx),%esi
+/* *
+ * readseg - read @count bytes at @offset from kernel into virtual address @va,
+ * might copy more than asked.
+ * */
+static void
+readseg(uintptr_t va, uint32_t count, uint32_t offset) {
+    7ca2:	53                   	push   %ebx
+    uintptr_t end_va = va + count;
+
+    // round down to sector boundary
+    va -= offset % SECTSIZE;
+    7ca3:	29 d0                	sub    %edx,%eax
+/* *
+ * readseg - read @count bytes at @offset from kernel into virtual address @va,
+ * might copy more than asked.
+ * */
+static void
+readseg(uintptr_t va, uint32_t count, uint32_t offset) {
+    7ca5:	53                   	push   %ebx
+    uintptr_t end_va = va + count;
+    7ca6:	89 7d f0             	mov    %edi,-0x10(%ebp)
+
+    // round down to sector boundary
+    va -= offset % SECTSIZE;
+    7ca9:	89 c3                	mov    %eax,%ebx
+    uint32_t secno = (offset / SECTSIZE) + 1;
+
+    // If this is too slow, we could read lots of sectors at a time.
+    // We'd write more to memory than asked, but it doesn't matter --
+    // we load in increasing order.
+    for (; va < end_va; va += SECTSIZE, secno ++) {
+    7cab:	3b 5d f0             	cmp    -0x10(%ebp),%ebx
+    7cae:	73 71                	jae    7d21 <readseg+0x95>
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+    7cb0:	ba f7 01 00 00       	mov    $0x1f7,%edx
+    7cb5:	ec                   	in     (%dx),%al
+#define ELFHDR          ((struct elfhdr *)0x10000)      // scratch space
+
+/* waitdisk - wait for disk ready */
+static void
+waitdisk(void) {
+    while ((inb(0x1F7) & 0xC0) != 0x40)
+    7cb6:	83 e0 c0             	and    $0xffffffc0,%eax
+    7cb9:	3c 40                	cmp    $0x40,%al
+    7cbb:	75 f3                	jne    7cb0 <readseg+0x24>
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+    7cbd:	ba f2 01 00 00       	mov    $0x1f2,%edx
+    7cc2:	b0 01                	mov    $0x1,%al
+    7cc4:	ee                   	out    %al,(%dx)
+    7cc5:	ba f3 01 00 00       	mov    $0x1f3,%edx
+    7cca:	89 f0                	mov    %esi,%eax
+    7ccc:	ee                   	out    %al,(%dx)
+    7ccd:	89 f0                	mov    %esi,%eax
+    7ccf:	ba f4 01 00 00       	mov    $0x1f4,%edx
+    7cd4:	c1 e8 08             	shr    $0x8,%eax
+    7cd7:	ee                   	out    %al,(%dx)
+    7cd8:	89 f0                	mov    %esi,%eax
+    7cda:	ba f5 01 00 00       	mov    $0x1f5,%edx
+    7cdf:	c1 e8 10             	shr    $0x10,%eax
+    7ce2:	ee                   	out    %al,(%dx)
+    7ce3:	89 f0                	mov    %esi,%eax
+    7ce5:	ba f6 01 00 00       	mov    $0x1f6,%edx
+    7cea:	c1 e8 18             	shr    $0x18,%eax
+    7ced:	83 e0 0f             	and    $0xf,%eax
+    7cf0:	83 c8 e0             	or     $0xffffffe0,%eax
+    7cf3:	ee                   	out    %al,(%dx)
+    7cf4:	b0 20                	mov    $0x20,%al
+    7cf6:	ba f7 01 00 00       	mov    $0x1f7,%edx
+    7cfb:	ee                   	out    %al,(%dx)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+    7cfc:	ba f7 01 00 00       	mov    $0x1f7,%edx
+    7d01:	ec                   	in     (%dx),%al
+    7d02:	83 e0 c0             	and    $0xffffffc0,%eax
+    7d05:	3c 40                	cmp    $0x40,%al
+    7d07:	75 f3                	jne    7cfc <readseg+0x70>
+    return data;
+}
+
+static inline void
+insl(uint32_t port, void *addr, int cnt) {
+    asm volatile (
+    7d09:	89 df                	mov    %ebx,%edi
+    7d0b:	b9 80 00 00 00       	mov    $0x80,%ecx
+    7d10:	ba f0 01 00 00       	mov    $0x1f0,%edx
+    7d15:	fc                   	cld    
+    7d16:	f2 6d                	repnz insl (%dx),%es:(%edi)
+    uint32_t secno = (offset / SECTSIZE) + 1;
+
+    // If this is too slow, we could read lots of sectors at a time.
+    // We'd write more to memory than asked, but it doesn't matter --
+    // we load in increasing order.
+    for (; va < end_va; va += SECTSIZE, secno ++) {
+    7d18:	81 c3 00 02 00 00    	add    $0x200,%ebx
+    7d1e:	46                   	inc    %esi
+    7d1f:	eb 8a                	jmp    7cab <readseg+0x1f>
+        readsect((void *)va, secno);
+    }
+}
+    7d21:	58                   	pop    %eax
+    7d22:	5b                   	pop    %ebx
+    7d23:	5e                   	pop    %esi
+    7d24:	5f                   	pop    %edi
+    7d25:	5d                   	pop    %ebp
+    7d26:	c3                   	ret    
+
+00007d27 <bootmain>:
+
+/* bootmain - the entry of bootloader */
+void
+bootmain(void) {
+    7d27:	55                   	push   %ebp
+    // read the 1st page off disk
+    readseg((uintptr_t)ELFHDR, SECTSIZE * 8, 0);
+    7d28:	31 c9                	xor    %ecx,%ecx
+    7d2a:	ba 00 10 00 00       	mov    $0x1000,%edx
+    7d2f:	b8 00 00 01 00       	mov    $0x10000,%eax
+    }
+}
+
+/* bootmain - the entry of bootloader */
+void
+bootmain(void) {
+    7d34:	89 e5                	mov    %esp,%ebp
+    7d36:	56                   	push   %esi
+    7d37:	53                   	push   %ebx
+    // read the 1st page off disk
+    readseg((uintptr_t)ELFHDR, SECTSIZE * 8, 0);
+    7d38:	e8 4f ff ff ff       	call   7c8c <readseg>
+
+    // is this a valid ELF?
+    if (ELFHDR->e_magic != ELF_MAGIC) {
+    7d3d:	81 3d 00 00 01 00 7f 	cmpl   $0x464c457f,0x10000
+    7d44:	45 4c 46 
+    7d47:	75 3f                	jne    7d88 <bootmain+0x61>
+    }
+
+    struct proghdr *ph, *eph;
+
+    // load each program segment (ignores ph flags)
+    ph = (struct proghdr *)((uintptr_t)ELFHDR + ELFHDR->e_phoff);
+    7d49:	a1 1c 00 01 00       	mov    0x1001c,%eax
+    eph = ph + ELFHDR->e_phnum;
+    7d4e:	0f b7 35 2c 00 01 00 	movzwl 0x1002c,%esi
+    }
+
+    struct proghdr *ph, *eph;
+
+    // load each program segment (ignores ph flags)
+    ph = (struct proghdr *)((uintptr_t)ELFHDR + ELFHDR->e_phoff);
+    7d55:	8d 98 00 00 01 00    	lea    0x10000(%eax),%ebx
+    eph = ph + ELFHDR->e_phnum;
+    7d5b:	c1 e6 05             	shl    $0x5,%esi
+    7d5e:	01 de                	add    %ebx,%esi
+    for (; ph < eph; ph ++) {
+    7d60:	39 f3                	cmp    %esi,%ebx
+    7d62:	73 18                	jae    7d7c <bootmain+0x55>
+        readseg(ph->p_va & 0xFFFFFF, ph->p_memsz, ph->p_offset);
+    7d64:	8b 43 08             	mov    0x8(%ebx),%eax
+    7d67:	8b 4b 04             	mov    0x4(%ebx),%ecx
+    struct proghdr *ph, *eph;
+
+    // load each program segment (ignores ph flags)
+    ph = (struct proghdr *)((uintptr_t)ELFHDR + ELFHDR->e_phoff);
+    eph = ph + ELFHDR->e_phnum;
+    for (; ph < eph; ph ++) {
+    7d6a:	83 c3 20             	add    $0x20,%ebx
+        readseg(ph->p_va & 0xFFFFFF, ph->p_memsz, ph->p_offset);
+    7d6d:	8b 53 f4             	mov    -0xc(%ebx),%edx
+    7d70:	25 ff ff ff 00       	and    $0xffffff,%eax
+    7d75:	e8 12 ff ff ff       	call   7c8c <readseg>
+    7d7a:	eb e4                	jmp    7d60 <bootmain+0x39>
+    }
+
+    // call the entry point from the ELF header
+    // note: does not return
+    ((void (*)(void))(ELFHDR->e_entry & 0xFFFFFF))();
+    7d7c:	a1 18 00 01 00       	mov    0x10018,%eax
+    7d81:	25 ff ff ff 00       	and    $0xffffff,%eax
+    7d86:	ff d0                	call   *%eax
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+}
+
+static inline void
+outw(uint16_t port, uint16_t data) {
+    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
+    7d88:	ba 00 8a ff ff       	mov    $0xffff8a00,%edx
+    7d8d:	89 d0                	mov    %edx,%eax
+    7d8f:	66 ef                	out    %ax,(%dx)
+    7d91:	b8 00 8e ff ff       	mov    $0xffff8e00,%eax
+    7d96:	66 ef                	out    %ax,(%dx)
+    7d98:	eb fe                	jmp    7d98 <bootmain+0x71>
Binary files lab7_original/obj/bootblock.o and lab7/obj/bootblock.o differ
Binary files lab7_original/obj/bootblock.out and lab7/obj/bootblock.out differ
diff -r -u -P lab7_original/obj/kern/debug/kdebug.d lab7/obj/kern/debug/kdebug.d
--- lab7_original/obj/kern/debug/kdebug.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/debug/kdebug.d	2016-05-06 21:59:27.630123852 +0800
@@ -0,0 +1,7 @@
+obj/kern/debug/kdebug.o obj/kern/debug/kdebug.d: kern/debug/kdebug.c \
+ libs/defs.h libs/x86.h kern/debug/stab.h libs/stdio.h libs/stdarg.h \
+ libs/string.h kern/mm/memlayout.h libs/atomic.h libs/list.h \
+ kern/sync/sync.h kern/driver/intr.h kern/mm/mmu.h kern/debug/assert.h \
+ kern/schedule/sched.h libs/skew_heap.h kern/mm/vmm.h kern/process/proc.h \
+ kern/trap/trap.h kern/sync/sem.h kern/sync/wait.h kern/debug/kdebug.h \
+ kern/debug/kmonitor.h
Binary files lab7_original/obj/kern/debug/kdebug.o and lab7/obj/kern/debug/kdebug.o differ
diff -r -u -P lab7_original/obj/kern/debug/kmonitor.d lab7/obj/kern/debug/kmonitor.d
--- lab7_original/obj/kern/debug/kmonitor.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/debug/kmonitor.d	2016-05-06 21:59:27.522119940 +0800
@@ -0,0 +1,4 @@
+obj/kern/debug/kmonitor.o obj/kern/debug/kmonitor.d: \
+ kern/debug/kmonitor.c libs/stdio.h libs/defs.h libs/stdarg.h \
+ libs/string.h kern/mm/mmu.h kern/trap/trap.h kern/debug/kmonitor.h \
+ kern/debug/kdebug.h
Binary files lab7_original/obj/kern/debug/kmonitor.o and lab7/obj/kern/debug/kmonitor.o differ
diff -r -u -P lab7_original/obj/kern/debug/panic.d lab7/obj/kern/debug/panic.d
--- lab7_original/obj/kern/debug/panic.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/debug/panic.d	2016-05-06 21:59:27.518119795 +0800
@@ -0,0 +1,3 @@
+obj/kern/debug/panic.o obj/kern/debug/panic.d: kern/debug/panic.c \
+ libs/defs.h libs/stdio.h libs/stdarg.h kern/driver/intr.h \
+ kern/debug/kmonitor.h kern/trap/trap.h
Binary files lab7_original/obj/kern/debug/panic.o and lab7/obj/kern/debug/panic.o differ
diff -r -u -P lab7_original/obj/kern/driver/clock.d lab7/obj/kern/driver/clock.d
--- lab7_original/obj/kern/driver/clock.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/driver/clock.d	2016-05-06 21:59:27.538120520 +0800
@@ -0,0 +1,3 @@
+obj/kern/driver/clock.o obj/kern/driver/clock.d: kern/driver/clock.c \
+ libs/x86.h libs/defs.h kern/trap/trap.h libs/stdio.h libs/stdarg.h \
+ kern/driver/picirq.h
Binary files lab7_original/obj/kern/driver/clock.o and lab7/obj/kern/driver/clock.o differ
diff -r -u -P lab7_original/obj/kern/driver/console.d lab7/obj/kern/driver/console.d
--- lab7_original/obj/kern/driver/console.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/driver/console.d	2016-05-06 21:59:27.598122693 +0800
@@ -0,0 +1,6 @@
+obj/kern/driver/console.o obj/kern/driver/console.d: \
+ kern/driver/console.c libs/defs.h libs/x86.h libs/stdio.h libs/stdarg.h \
+ libs/string.h kern/driver/kbdreg.h kern/driver/picirq.h kern/trap/trap.h \
+ kern/mm/memlayout.h libs/atomic.h libs/list.h kern/sync/sync.h \
+ kern/driver/intr.h kern/mm/mmu.h kern/debug/assert.h \
+ kern/schedule/sched.h libs/skew_heap.h
Binary files lab7_original/obj/kern/driver/console.o and lab7/obj/kern/driver/console.o differ
diff -r -u -P lab7_original/obj/kern/driver/ide.d lab7/obj/kern/driver/ide.d
--- lab7_original/obj/kern/driver/ide.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/driver/ide.d	2016-05-06 21:59:27.594122548 +0800
@@ -0,0 +1,4 @@
+obj/kern/driver/ide.o obj/kern/driver/ide.d: kern/driver/ide.c \
+ libs/defs.h libs/stdio.h libs/stdarg.h kern/trap/trap.h \
+ kern/driver/picirq.h kern/fs/fs.h kern/mm/mmu.h kern/driver/ide.h \
+ libs/x86.h kern/debug/assert.h
Binary files lab7_original/obj/kern/driver/ide.o and lab7/obj/kern/driver/ide.o differ
diff -r -u -P lab7_original/obj/kern/driver/intr.d lab7/obj/kern/driver/intr.d
--- lab7_original/obj/kern/driver/intr.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/driver/intr.d	2016-05-06 21:59:27.462117767 +0800
@@ -0,0 +1,2 @@
+obj/kern/driver/intr.o obj/kern/driver/intr.d: kern/driver/intr.c \
+ libs/x86.h libs/defs.h kern/driver/intr.h
Binary files lab7_original/obj/kern/driver/intr.o and lab7/obj/kern/driver/intr.o differ
diff -r -u -P lab7_original/obj/kern/driver/picirq.d lab7/obj/kern/driver/picirq.d
--- lab7_original/obj/kern/driver/picirq.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/driver/picirq.d	2016-05-06 21:59:27.506119361 +0800
@@ -0,0 +1,2 @@
+obj/kern/driver/picirq.o obj/kern/driver/picirq.d: kern/driver/picirq.c \
+ libs/defs.h libs/x86.h kern/driver/picirq.h
Binary files lab7_original/obj/kern/driver/picirq.o and lab7/obj/kern/driver/picirq.o differ
diff -r -u -P lab7_original/obj/kern/fs/swapfs.d lab7/obj/kern/fs/swapfs.d
--- lab7_original/obj/kern/fs/swapfs.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/fs/swapfs.d	2016-05-06 21:59:27.658124866 +0800
@@ -0,0 +1,6 @@
+obj/kern/fs/swapfs.o obj/kern/fs/swapfs.d: kern/fs/swapfs.c \
+ kern/mm/swap.h libs/defs.h kern/mm/memlayout.h libs/atomic.h libs/list.h \
+ kern/mm/pmm.h kern/mm/mmu.h kern/debug/assert.h kern/mm/vmm.h \
+ kern/sync/sync.h libs/x86.h kern/driver/intr.h kern/schedule/sched.h \
+ libs/skew_heap.h kern/process/proc.h kern/trap/trap.h kern/sync/sem.h \
+ kern/sync/wait.h kern/fs/swapfs.h kern/fs/fs.h kern/driver/ide.h
Binary files lab7_original/obj/kern/fs/swapfs.o and lab7/obj/kern/fs/swapfs.o differ
diff -r -u -P lab7_original/obj/kern/init/entry.d lab7/obj/kern/init/entry.d
--- lab7_original/obj/kern/init/entry.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/init/entry.d	2016-05-06 21:59:27.658124866 +0800
@@ -0,0 +1,2 @@
+obj/kern/init/entry.o obj/kern/init/entry.d: kern/init/entry.S \
+ kern/mm/mmu.h kern/mm/memlayout.h
Binary files lab7_original/obj/kern/init/entry.o and lab7/obj/kern/init/entry.o differ
diff -r -u -P lab7_original/obj/kern/init/init.d lab7/obj/kern/init/init.d
--- lab7_original/obj/kern/init/init.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/init/init.d	2016-05-06 21:59:27.662125011 +0800
@@ -0,0 +1,8 @@
+obj/kern/init/init.o obj/kern/init/init.d: kern/init/init.c libs/defs.h \
+ libs/stdio.h libs/stdarg.h libs/string.h kern/driver/console.h \
+ kern/debug/kdebug.h kern/trap/trap.h kern/driver/picirq.h \
+ kern/driver/clock.h kern/driver/intr.h kern/mm/pmm.h kern/mm/mmu.h \
+ kern/mm/memlayout.h libs/atomic.h libs/list.h kern/debug/assert.h \
+ kern/mm/vmm.h kern/sync/sync.h libs/x86.h kern/schedule/sched.h \
+ libs/skew_heap.h kern/process/proc.h kern/sync/sem.h kern/sync/wait.h \
+ kern/driver/ide.h kern/mm/swap.h kern/debug/kmonitor.h
Binary files lab7_original/obj/kern/init/init.o and lab7/obj/kern/init/init.o differ
diff -r -u -P lab7_original/obj/kern/libs/readline.d lab7/obj/kern/libs/readline.d
--- lab7_original/obj/kern/libs/readline.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/libs/readline.d	2016-05-06 21:59:27.542120665 +0800
@@ -0,0 +1,2 @@
+obj/kern/libs/readline.o obj/kern/libs/readline.d: kern/libs/readline.c \
+ libs/stdio.h libs/defs.h libs/stdarg.h
Binary files lab7_original/obj/kern/libs/readline.o and lab7/obj/kern/libs/readline.o differ
diff -r -u -P lab7_original/obj/kern/libs/stdio.d lab7/obj/kern/libs/stdio.d
--- lab7_original/obj/kern/libs/stdio.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/libs/stdio.d	2016-05-06 21:59:27.494118926 +0800
@@ -0,0 +1,2 @@
+obj/kern/libs/stdio.o obj/kern/libs/stdio.d: kern/libs/stdio.c \
+ libs/defs.h libs/stdio.h libs/stdarg.h kern/driver/console.h
Binary files lab7_original/obj/kern/libs/stdio.o and lab7/obj/kern/libs/stdio.o differ
diff -r -u -P lab7_original/obj/kern/mm/default_pmm.d lab7/obj/kern/mm/default_pmm.d
--- lab7_original/obj/kern/mm/default_pmm.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/mm/default_pmm.d	2016-05-06 21:59:27.462117767 +0800
@@ -0,0 +1,4 @@
+obj/kern/mm/default_pmm.o obj/kern/mm/default_pmm.d: \
+ kern/mm/default_pmm.c kern/mm/pmm.h libs/defs.h kern/mm/mmu.h \
+ kern/mm/memlayout.h libs/atomic.h libs/list.h kern/debug/assert.h \
+ libs/string.h kern/mm/default_pmm.h
Binary files lab7_original/obj/kern/mm/default_pmm.o and lab7/obj/kern/mm/default_pmm.o differ
diff -r -u -P lab7_original/obj/kern/mm/kmalloc.d lab7/obj/kern/mm/kmalloc.d
--- lab7_original/obj/kern/mm/kmalloc.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/mm/kmalloc.d	2016-05-06 21:59:27.566121534 +0800
@@ -0,0 +1,5 @@
+obj/kern/mm/kmalloc.o obj/kern/mm/kmalloc.d: kern/mm/kmalloc.c \
+ libs/defs.h libs/list.h kern/mm/memlayout.h libs/atomic.h \
+ kern/debug/assert.h kern/mm/kmalloc.h kern/sync/sync.h libs/x86.h \
+ kern/driver/intr.h kern/mm/mmu.h kern/schedule/sched.h libs/skew_heap.h \
+ kern/mm/pmm.h libs/stdio.h libs/stdarg.h
Binary files lab7_original/obj/kern/mm/kmalloc.o and lab7/obj/kern/mm/kmalloc.o differ
diff -r -u -P lab7_original/obj/kern/mm/pmm.d lab7/obj/kern/mm/pmm.d
--- lab7_original/obj/kern/mm/pmm.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/mm/pmm.d	2016-05-06 21:59:27.514119650 +0800
@@ -0,0 +1,7 @@
+obj/kern/mm/pmm.o obj/kern/mm/pmm.d: kern/mm/pmm.c libs/defs.h libs/x86.h \
+ libs/stdio.h libs/stdarg.h libs/string.h kern/mm/mmu.h \
+ kern/mm/memlayout.h libs/atomic.h libs/list.h kern/mm/pmm.h \
+ kern/debug/assert.h kern/mm/default_pmm.h kern/sync/sync.h \
+ kern/driver/intr.h kern/schedule/sched.h libs/skew_heap.h libs/error.h \
+ kern/mm/swap.h kern/mm/vmm.h kern/process/proc.h kern/trap/trap.h \
+ kern/sync/sem.h kern/sync/wait.h kern/mm/kmalloc.h
Binary files lab7_original/obj/kern/mm/pmm.o and lab7/obj/kern/mm/pmm.o differ
diff -r -u -P lab7_original/obj/kern/mm/swap.d lab7/obj/kern/mm/swap.d
--- lab7_original/obj/kern/mm/swap.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/mm/swap.d	2016-05-06 21:59:27.542120665 +0800
@@ -0,0 +1,7 @@
+obj/kern/mm/swap.o obj/kern/mm/swap.d: kern/mm/swap.c kern/mm/swap.h \
+ libs/defs.h kern/mm/memlayout.h libs/atomic.h libs/list.h kern/mm/pmm.h \
+ kern/mm/mmu.h kern/debug/assert.h kern/mm/vmm.h kern/sync/sync.h \
+ libs/x86.h kern/driver/intr.h kern/schedule/sched.h libs/skew_heap.h \
+ kern/process/proc.h kern/trap/trap.h kern/sync/sem.h kern/sync/wait.h \
+ kern/fs/swapfs.h kern/mm/swap_fifo.h libs/stdio.h libs/stdarg.h \
+ libs/string.h kern/mm/default_pmm.h kern/debug/kdebug.h
diff -r -u -P lab7_original/obj/kern/mm/swap_fifo.d lab7/obj/kern/mm/swap_fifo.d
--- lab7_original/obj/kern/mm/swap_fifo.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/mm/swap_fifo.d	2016-05-06 21:59:27.478118346 +0800
@@ -0,0 +1,7 @@
+obj/kern/mm/swap_fifo.o obj/kern/mm/swap_fifo.d: kern/mm/swap_fifo.c \
+ libs/defs.h libs/x86.h libs/stdio.h libs/stdarg.h libs/string.h \
+ kern/mm/swap.h kern/mm/memlayout.h libs/atomic.h libs/list.h \
+ kern/mm/pmm.h kern/mm/mmu.h kern/debug/assert.h kern/mm/vmm.h \
+ kern/sync/sync.h kern/driver/intr.h kern/schedule/sched.h \
+ libs/skew_heap.h kern/process/proc.h kern/trap/trap.h kern/sync/sem.h \
+ kern/sync/wait.h kern/mm/swap_fifo.h
Binary files lab7_original/obj/kern/mm/swap_fifo.o and lab7/obj/kern/mm/swap_fifo.o differ
Binary files lab7_original/obj/kern/mm/swap.o and lab7/obj/kern/mm/swap.o differ
diff -r -u -P lab7_original/obj/kern/mm/vmm.d lab7/obj/kern/mm/vmm.d
--- lab7_original/obj/kern/mm/vmm.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/mm/vmm.d	2016-05-06 21:59:27.518119795 +0800
@@ -0,0 +1,7 @@
+obj/kern/mm/vmm.o obj/kern/mm/vmm.d: kern/mm/vmm.c kern/mm/vmm.h \
+ libs/defs.h libs/list.h kern/mm/memlayout.h libs/atomic.h \
+ kern/sync/sync.h libs/x86.h kern/driver/intr.h kern/mm/mmu.h \
+ kern/debug/assert.h kern/schedule/sched.h libs/skew_heap.h \
+ kern/process/proc.h kern/trap/trap.h kern/sync/sem.h kern/sync/wait.h \
+ libs/string.h libs/stdio.h libs/stdarg.h libs/error.h kern/mm/pmm.h \
+ kern/mm/swap.h kern/mm/kmalloc.h
Binary files lab7_original/obj/kern/mm/vmm.o and lab7/obj/kern/mm/vmm.o differ
diff -r -u -P lab7_original/obj/kern/process/entry.d lab7/obj/kern/process/entry.d
--- lab7_original/obj/kern/process/entry.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/process/entry.d	2016-05-06 21:59:27.638124142 +0800
@@ -0,0 +1 @@
+obj/kern/process/entry.o obj/kern/process/entry.d: kern/process/entry.S
Binary files lab7_original/obj/kern/process/entry.o and lab7/obj/kern/process/entry.o differ
diff -r -u -P lab7_original/obj/kern/process/proc.d lab7/obj/kern/process/proc.d
--- lab7_original/obj/kern/process/proc.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/process/proc.d	2016-05-06 22:00:42.408930936 +0800
@@ -0,0 +1,7 @@
+obj/kern/process/proc.o obj/kern/process/proc.d: kern/process/proc.c \
+ kern/process/proc.h libs/defs.h libs/list.h kern/trap/trap.h \
+ kern/mm/memlayout.h libs/atomic.h libs/skew_heap.h kern/mm/kmalloc.h \
+ libs/string.h kern/sync/sync.h libs/x86.h kern/driver/intr.h \
+ kern/mm/mmu.h kern/debug/assert.h kern/schedule/sched.h kern/mm/pmm.h \
+ libs/error.h libs/elf.h kern/mm/vmm.h kern/sync/sem.h kern/sync/wait.h \
+ libs/stdio.h libs/stdarg.h libs/stdlib.h libs/unistd.h
Binary files lab7_original/obj/kern/process/proc.o and lab7/obj/kern/process/proc.o differ
diff -r -u -P lab7_original/obj/kern/process/switch.d lab7/obj/kern/process/switch.d
--- lab7_original/obj/kern/process/switch.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/process/switch.d	2016-05-06 21:59:27.618123417 +0800
@@ -0,0 +1,2 @@
+obj/kern/process/switch.o obj/kern/process/switch.d: \
+ kern/process/switch.S
Binary files lab7_original/obj/kern/process/switch.o and lab7/obj/kern/process/switch.o differ
diff -r -u -P lab7_original/obj/kern/schedule/default_sched.d lab7/obj/kern/schedule/default_sched.d
--- lab7_original/obj/kern/schedule/default_sched.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/schedule/default_sched.d	2016-05-06 21:59:27.450117332 +0800
@@ -0,0 +1,5 @@
+obj/kern/schedule/default_sched.o obj/kern/schedule/default_sched.d: \
+ kern/schedule/default_sched.c libs/defs.h libs/list.h \
+ kern/process/proc.h kern/trap/trap.h kern/mm/memlayout.h libs/atomic.h \
+ libs/skew_heap.h kern/debug/assert.h kern/schedule/default_sched.h \
+ kern/schedule/sched.h
Binary files lab7_original/obj/kern/schedule/default_sched.o and lab7/obj/kern/schedule/default_sched.o differ
diff -r -u -P lab7_original/obj/kern/schedule/sched.d lab7/obj/kern/schedule/sched.d
--- lab7_original/obj/kern/schedule/sched.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/schedule/sched.d	2016-05-06 21:59:27.510119505 +0800
@@ -0,0 +1,6 @@
+obj/kern/schedule/sched.o obj/kern/schedule/sched.d: \
+ kern/schedule/sched.c libs/list.h libs/defs.h kern/sync/sync.h \
+ libs/x86.h kern/driver/intr.h kern/mm/mmu.h kern/debug/assert.h \
+ libs/atomic.h kern/schedule/sched.h libs/skew_heap.h kern/process/proc.h \
+ kern/trap/trap.h kern/mm/memlayout.h libs/stdio.h libs/stdarg.h \
+ kern/schedule/default_sched.h
Binary files lab7_original/obj/kern/schedule/sched.o and lab7/obj/kern/schedule/sched.o differ
diff -r -u -P lab7_original/obj/kern/sync/check_sync.d lab7/obj/kern/sync/check_sync.d
--- lab7_original/obj/kern/sync/check_sync.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/sync/check_sync.d	2016-05-06 21:59:27.658124866 +0800
@@ -0,0 +1,5 @@
+obj/kern/sync/check_sync.o obj/kern/sync/check_sync.d: \
+ kern/sync/check_sync.c libs/stdio.h libs/defs.h libs/stdarg.h \
+ kern/process/proc.h libs/list.h kern/trap/trap.h kern/mm/memlayout.h \
+ libs/atomic.h libs/skew_heap.h kern/sync/sem.h kern/sync/wait.h \
+ kern/sync/monitor.h kern/debug/assert.h
Binary files lab7_original/obj/kern/sync/check_sync.o and lab7/obj/kern/sync/check_sync.o differ
diff -r -u -P lab7_original/obj/kern/sync/monitor.d lab7/obj/kern/sync/monitor.d
--- lab7_original/obj/kern/sync/monitor.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/sync/monitor.d	2016-05-06 21:59:27.646124431 +0800
@@ -0,0 +1,4 @@
+obj/kern/sync/monitor.o obj/kern/sync/monitor.d: kern/sync/monitor.c \
+ libs/stdio.h libs/defs.h libs/stdarg.h kern/sync/monitor.h \
+ kern/sync/sem.h libs/atomic.h kern/sync/wait.h libs/list.h \
+ kern/mm/kmalloc.h kern/debug/assert.h
Binary files lab7_original/obj/kern/sync/monitor.o and lab7/obj/kern/sync/monitor.o differ
diff -r -u -P lab7_original/obj/kern/sync/sem.d lab7/obj/kern/sync/sem.d
--- lab7_original/obj/kern/sync/sem.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/sync/sem.d	2016-05-06 21:59:27.650124576 +0800
@@ -0,0 +1,5 @@
+obj/kern/sync/sem.o obj/kern/sync/sem.d: kern/sync/sem.c libs/defs.h \
+ kern/sync/wait.h libs/list.h libs/atomic.h kern/mm/kmalloc.h \
+ kern/sync/sem.h kern/process/proc.h kern/trap/trap.h kern/mm/memlayout.h \
+ libs/skew_heap.h kern/sync/sync.h libs/x86.h kern/driver/intr.h \
+ kern/mm/mmu.h kern/debug/assert.h kern/schedule/sched.h
Binary files lab7_original/obj/kern/sync/sem.o and lab7/obj/kern/sync/sem.o differ
diff -r -u -P lab7_original/obj/kern/sync/wait.d lab7/obj/kern/sync/wait.d
--- lab7_original/obj/kern/sync/wait.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/sync/wait.d	2016-05-06 21:59:27.654124721 +0800
@@ -0,0 +1,5 @@
+obj/kern/sync/wait.o obj/kern/sync/wait.d: kern/sync/wait.c libs/defs.h \
+ libs/list.h kern/sync/sync.h libs/x86.h kern/driver/intr.h kern/mm/mmu.h \
+ kern/debug/assert.h libs/atomic.h kern/schedule/sched.h libs/skew_heap.h \
+ kern/sync/wait.h kern/process/proc.h kern/trap/trap.h \
+ kern/mm/memlayout.h
Binary files lab7_original/obj/kern/sync/wait.o and lab7/obj/kern/sync/wait.o differ
diff -r -u -P lab7_original/obj/kern/syscall/syscall.d lab7/obj/kern/syscall/syscall.d
--- lab7_original/obj/kern/syscall/syscall.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/syscall/syscall.d	2016-05-06 21:59:27.474118202 +0800
@@ -0,0 +1,5 @@
+obj/kern/syscall/syscall.o obj/kern/syscall/syscall.d: \
+ kern/syscall/syscall.c libs/unistd.h kern/process/proc.h libs/defs.h \
+ libs/list.h kern/trap/trap.h kern/mm/memlayout.h libs/atomic.h \
+ libs/skew_heap.h kern/syscall/syscall.h libs/stdio.h libs/stdarg.h \
+ kern/mm/pmm.h kern/mm/mmu.h kern/debug/assert.h kern/driver/clock.h
Binary files lab7_original/obj/kern/syscall/syscall.o and lab7/obj/kern/syscall/syscall.o differ
diff -r -u -P lab7_original/obj/kern/trap/trap.d lab7/obj/kern/trap/trap.d
--- lab7_original/obj/kern/trap/trap.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/trap/trap.d	2016-05-06 21:59:27.510119505 +0800
@@ -0,0 +1,8 @@
+obj/kern/trap/trap.o obj/kern/trap/trap.d: kern/trap/trap.c libs/defs.h \
+ kern/mm/mmu.h kern/mm/memlayout.h libs/atomic.h libs/list.h \
+ kern/driver/clock.h kern/trap/trap.h libs/x86.h libs/stdio.h \
+ libs/stdarg.h kern/debug/assert.h kern/driver/console.h kern/mm/vmm.h \
+ kern/sync/sync.h kern/driver/intr.h kern/schedule/sched.h \
+ libs/skew_heap.h kern/process/proc.h kern/sync/sem.h kern/sync/wait.h \
+ kern/mm/swap.h kern/mm/pmm.h kern/debug/kdebug.h libs/unistd.h \
+ kern/syscall/syscall.h libs/error.h
diff -r -u -P lab7_original/obj/kern/trap/trapentry.d lab7/obj/kern/trap/trapentry.d
--- lab7_original/obj/kern/trap/trapentry.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/trap/trapentry.d	2016-05-06 21:59:27.502119216 +0800
@@ -0,0 +1,2 @@
+obj/kern/trap/trapentry.o obj/kern/trap/trapentry.d: \
+ kern/trap/trapentry.S kern/mm/memlayout.h
Binary files lab7_original/obj/kern/trap/trapentry.o and lab7/obj/kern/trap/trapentry.o differ
Binary files lab7_original/obj/kern/trap/trap.o and lab7/obj/kern/trap/trap.o differ
diff -r -u -P lab7_original/obj/kern/trap/vectors.d lab7/obj/kern/trap/vectors.d
--- lab7_original/obj/kern/trap/vectors.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kern/trap/vectors.d	2016-05-06 21:59:27.610123127 +0800
@@ -0,0 +1 @@
+obj/kern/trap/vectors.o obj/kern/trap/vectors.d: kern/trap/vectors.S
Binary files lab7_original/obj/kern/trap/vectors.o and lab7/obj/kern/trap/vectors.o differ
diff -r -u -P lab7_original/obj/kernel.asm lab7/obj/kernel.asm
--- lab7_original/obj/kernel.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kernel.asm	2016-05-06 22:00:42.536935737 +0800
@@ -0,0 +1,26801 @@
+
+bin/kernel:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+c0100000 <kern_entry>:
+.text
+.globl kern_entry
+kern_entry:
+    # reload temperate gdt (second time) to remap all physical memory
+    # virtual_addr 0~4G=linear_addr&physical_addr -KERNBASE~4G-KERNBASE 
+    lgdt REALLOC(__gdtdesc)
+c0100000:	0f 01 15 18 10 13 00 	lgdtl  0x131018
+    movl $KERNEL_DS, %eax
+c0100007:	b8 10 00 00 00       	mov    $0x10,%eax
+    movw %ax, %ds
+c010000c:	8e d8                	mov    %eax,%ds
+    movw %ax, %es
+c010000e:	8e c0                	mov    %eax,%es
+    movw %ax, %ss
+c0100010:	8e d0                	mov    %eax,%ss
+
+    ljmp $KERNEL_CS, $relocated
+c0100012:	ea 19 00 10 c0 08 00 	ljmp   $0x8,$0xc0100019
+
+c0100019 <relocated>:
+
+relocated:
+
+    # set ebp, esp
+    movl $0x0, %ebp
+c0100019:	bd 00 00 00 00       	mov    $0x0,%ebp
+    # the kernel stack region is from bootstack -- bootstacktop,
+    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
+    movl $bootstacktop, %esp
+c010001e:	bc 00 10 13 c0       	mov    $0xc0131000,%esp
+    # now kernel stack is ready , call the first C function
+    call kern_init
+c0100023:	e8 02 00 00 00       	call   c010002a <kern_init>
+
+c0100028 <spin>:
+
+# should never get here
+spin:
+    jmp spin
+c0100028:	eb fe                	jmp    c0100028 <spin>
+
+c010002a <kern_init>:
+int kern_init(void) __attribute__((noreturn));
+void grade_backtrace(void);
+static void lab1_switch_test(void);
+
+int
+kern_init(void) {
+c010002a:	55                   	push   %ebp
+c010002b:	89 e5                	mov    %esp,%ebp
+c010002d:	83 ec 18             	sub    $0x18,%esp
+    extern char edata[], end[];
+    memset(edata, 0, end - edata);
+c0100030:	ba 84 55 1c c0       	mov    $0xc01c5584,%edx
+c0100035:	b8 c4 22 1c c0       	mov    $0xc01c22c4,%eax
+c010003a:	29 c2                	sub    %eax,%edx
+c010003c:	89 d0                	mov    %edx,%eax
+c010003e:	83 ec 04             	sub    $0x4,%esp
+c0100041:	50                   	push   %eax
+c0100042:	6a 00                	push   $0x0
+c0100044:	68 c4 22 1c c0       	push   $0xc01c22c4
+c0100049:	e8 9a c3 00 00       	call   c010c3e8 <memset>
+c010004e:	83 c4 10             	add    $0x10,%esp
+
+    cons_init();                // init the console
+c0100051:	e8 85 1e 00 00       	call   c0101edb <cons_init>
+
+    const char *message = "(THU.CST) os is loading ...";
+c0100056:	c7 45 f4 80 cc 10 c0 	movl   $0xc010cc80,-0xc(%ebp)
+    cprintf("%s\n\n", message);
+c010005d:	83 ec 08             	sub    $0x8,%esp
+c0100060:	ff 75 f4             	pushl  -0xc(%ebp)
+c0100063:	68 9c cc 10 c0       	push   $0xc010cc9c
+c0100068:	e8 21 02 00 00       	call   c010028e <cprintf>
+c010006d:	83 c4 10             	add    $0x10,%esp
+
+    print_kerninfo();
+c0100070:	e8 7a 09 00 00       	call   c01009ef <print_kerninfo>
+
+    grade_backtrace();
+c0100075:	e8 90 00 00 00       	call   c010010a <grade_backtrace>
+
+    pmm_init();                 // init physical memory management
+c010007a:	e8 c2 3d 00 00       	call   c0103e41 <pmm_init>
+
+    pic_init();                 // init interrupt controller
+c010007f:	e8 c9 1f 00 00       	call   c010204d <pic_init>
+    idt_init();                 // init interrupt descriptor table
+c0100084:	e8 4b 21 00 00       	call   c01021d4 <idt_init>
+
+    vmm_init();                 // init virtual memory management
+c0100089:	e8 bb 5c 00 00       	call   c0105d49 <vmm_init>
+    sched_init();               // init scheduler
+c010008e:	e8 d3 b5 00 00       	call   c010b666 <sched_init>
+    proc_init();                // init process table
+c0100093:	e8 80 b2 00 00       	call   c010b318 <proc_init>
+    
+    ide_init();                 // init ide devices
+c0100098:	e8 0d 0e 00 00       	call   c0100eaa <ide_init>
+    swap_init();                // init swap
+c010009d:	e8 b4 6d 00 00       	call   c0106e56 <swap_init>
+
+    clock_init();               // init clock interrupt
+c01000a2:	e8 db 15 00 00       	call   c0101682 <clock_init>
+    intr_enable();              // enable irq interrupt
+c01000a7:	e8 de 20 00 00       	call   c010218a <intr_enable>
+
+    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
+    // user/kernel mode switch test
+    //lab1_switch_test();
+    
+    cpu_idle();                 // run idle process
+c01000ac:	e8 04 b4 00 00       	call   c010b4b5 <cpu_idle>
+
+c01000b1 <grade_backtrace2>:
+}
+
+void __attribute__((noinline))
+grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
+c01000b1:	55                   	push   %ebp
+c01000b2:	89 e5                	mov    %esp,%ebp
+c01000b4:	83 ec 08             	sub    $0x8,%esp
+    mon_backtrace(0, NULL, NULL);
+c01000b7:	83 ec 04             	sub    $0x4,%esp
+c01000ba:	6a 00                	push   $0x0
+c01000bc:	6a 00                	push   $0x0
+c01000be:	6a 00                	push   $0x0
+c01000c0:	e8 79 0d 00 00       	call   c0100e3e <mon_backtrace>
+c01000c5:	83 c4 10             	add    $0x10,%esp
+}
+c01000c8:	90                   	nop
+c01000c9:	c9                   	leave  
+c01000ca:	c3                   	ret    
+
+c01000cb <grade_backtrace1>:
+
+void __attribute__((noinline))
+grade_backtrace1(int arg0, int arg1) {
+c01000cb:	55                   	push   %ebp
+c01000cc:	89 e5                	mov    %esp,%ebp
+c01000ce:	53                   	push   %ebx
+c01000cf:	83 ec 04             	sub    $0x4,%esp
+    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
+c01000d2:	8d 4d 0c             	lea    0xc(%ebp),%ecx
+c01000d5:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01000d8:	8d 5d 08             	lea    0x8(%ebp),%ebx
+c01000db:	8b 45 08             	mov    0x8(%ebp),%eax
+c01000de:	51                   	push   %ecx
+c01000df:	52                   	push   %edx
+c01000e0:	53                   	push   %ebx
+c01000e1:	50                   	push   %eax
+c01000e2:	e8 ca ff ff ff       	call   c01000b1 <grade_backtrace2>
+c01000e7:	83 c4 10             	add    $0x10,%esp
+}
+c01000ea:	90                   	nop
+c01000eb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+c01000ee:	c9                   	leave  
+c01000ef:	c3                   	ret    
+
+c01000f0 <grade_backtrace0>:
+
+void __attribute__((noinline))
+grade_backtrace0(int arg0, int arg1, int arg2) {
+c01000f0:	55                   	push   %ebp
+c01000f1:	89 e5                	mov    %esp,%ebp
+c01000f3:	83 ec 08             	sub    $0x8,%esp
+    grade_backtrace1(arg0, arg2);
+c01000f6:	83 ec 08             	sub    $0x8,%esp
+c01000f9:	ff 75 10             	pushl  0x10(%ebp)
+c01000fc:	ff 75 08             	pushl  0x8(%ebp)
+c01000ff:	e8 c7 ff ff ff       	call   c01000cb <grade_backtrace1>
+c0100104:	83 c4 10             	add    $0x10,%esp
+}
+c0100107:	90                   	nop
+c0100108:	c9                   	leave  
+c0100109:	c3                   	ret    
+
+c010010a <grade_backtrace>:
+
+void
+grade_backtrace(void) {
+c010010a:	55                   	push   %ebp
+c010010b:	89 e5                	mov    %esp,%ebp
+c010010d:	83 ec 08             	sub    $0x8,%esp
+    grade_backtrace0(0, (int)kern_init, 0xffff0000);
+c0100110:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
+c0100115:	83 ec 04             	sub    $0x4,%esp
+c0100118:	68 00 00 ff ff       	push   $0xffff0000
+c010011d:	50                   	push   %eax
+c010011e:	6a 00                	push   $0x0
+c0100120:	e8 cb ff ff ff       	call   c01000f0 <grade_backtrace0>
+c0100125:	83 c4 10             	add    $0x10,%esp
+}
+c0100128:	90                   	nop
+c0100129:	c9                   	leave  
+c010012a:	c3                   	ret    
+
+c010012b <lab1_print_cur_status>:
+
+static void
+lab1_print_cur_status(void) {
+c010012b:	55                   	push   %ebp
+c010012c:	89 e5                	mov    %esp,%ebp
+c010012e:	83 ec 18             	sub    $0x18,%esp
+    static int round = 0;
+    uint16_t reg1, reg2, reg3, reg4;
+    asm volatile (
+c0100131:	8c 4d f6             	mov    %cs,-0xa(%ebp)
+c0100134:	8c 5d f4             	mov    %ds,-0xc(%ebp)
+c0100137:	8c 45 f2             	mov    %es,-0xe(%ebp)
+c010013a:	8c 55 f0             	mov    %ss,-0x10(%ebp)
+            "mov %%cs, %0;"
+            "mov %%ds, %1;"
+            "mov %%es, %2;"
+            "mov %%ss, %3;"
+            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
+    cprintf("%d: @ring %d\n", round, reg1 & 3);
+c010013d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0100141:	0f b7 c0             	movzwl %ax,%eax
+c0100144:	83 e0 03             	and    $0x3,%eax
+c0100147:	89 c2                	mov    %eax,%edx
+c0100149:	a1 e0 22 1c c0       	mov    0xc01c22e0,%eax
+c010014e:	83 ec 04             	sub    $0x4,%esp
+c0100151:	52                   	push   %edx
+c0100152:	50                   	push   %eax
+c0100153:	68 a1 cc 10 c0       	push   $0xc010cca1
+c0100158:	e8 31 01 00 00       	call   c010028e <cprintf>
+c010015d:	83 c4 10             	add    $0x10,%esp
+    cprintf("%d:  cs = %x\n", round, reg1);
+c0100160:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0100164:	0f b7 d0             	movzwl %ax,%edx
+c0100167:	a1 e0 22 1c c0       	mov    0xc01c22e0,%eax
+c010016c:	83 ec 04             	sub    $0x4,%esp
+c010016f:	52                   	push   %edx
+c0100170:	50                   	push   %eax
+c0100171:	68 af cc 10 c0       	push   $0xc010ccaf
+c0100176:	e8 13 01 00 00       	call   c010028e <cprintf>
+c010017b:	83 c4 10             	add    $0x10,%esp
+    cprintf("%d:  ds = %x\n", round, reg2);
+c010017e:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
+c0100182:	0f b7 d0             	movzwl %ax,%edx
+c0100185:	a1 e0 22 1c c0       	mov    0xc01c22e0,%eax
+c010018a:	83 ec 04             	sub    $0x4,%esp
+c010018d:	52                   	push   %edx
+c010018e:	50                   	push   %eax
+c010018f:	68 bd cc 10 c0       	push   $0xc010ccbd
+c0100194:	e8 f5 00 00 00       	call   c010028e <cprintf>
+c0100199:	83 c4 10             	add    $0x10,%esp
+    cprintf("%d:  es = %x\n", round, reg3);
+c010019c:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c01001a0:	0f b7 d0             	movzwl %ax,%edx
+c01001a3:	a1 e0 22 1c c0       	mov    0xc01c22e0,%eax
+c01001a8:	83 ec 04             	sub    $0x4,%esp
+c01001ab:	52                   	push   %edx
+c01001ac:	50                   	push   %eax
+c01001ad:	68 cb cc 10 c0       	push   $0xc010cccb
+c01001b2:	e8 d7 00 00 00       	call   c010028e <cprintf>
+c01001b7:	83 c4 10             	add    $0x10,%esp
+    cprintf("%d:  ss = %x\n", round, reg4);
+c01001ba:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
+c01001be:	0f b7 d0             	movzwl %ax,%edx
+c01001c1:	a1 e0 22 1c c0       	mov    0xc01c22e0,%eax
+c01001c6:	83 ec 04             	sub    $0x4,%esp
+c01001c9:	52                   	push   %edx
+c01001ca:	50                   	push   %eax
+c01001cb:	68 d9 cc 10 c0       	push   $0xc010ccd9
+c01001d0:	e8 b9 00 00 00       	call   c010028e <cprintf>
+c01001d5:	83 c4 10             	add    $0x10,%esp
+    round ++;
+c01001d8:	a1 e0 22 1c c0       	mov    0xc01c22e0,%eax
+c01001dd:	83 c0 01             	add    $0x1,%eax
+c01001e0:	a3 e0 22 1c c0       	mov    %eax,0xc01c22e0
+}
+c01001e5:	90                   	nop
+c01001e6:	c9                   	leave  
+c01001e7:	c3                   	ret    
+
+c01001e8 <lab1_switch_to_user>:
+
+static void
+lab1_switch_to_user(void) {
+c01001e8:	55                   	push   %ebp
+c01001e9:	89 e5                	mov    %esp,%ebp
+    //LAB1 CHALLENGE 1 : TODO
+	asm volatile(
+c01001eb:	83 ec 08             	sub    $0x8,%esp
+c01001ee:	cd 78                	int    $0x78
+c01001f0:	89 ec                	mov    %ebp,%esp
+		"sub $0x8, %%esp \n"
+		"int %0 \n"
+		"movl %%ebp, %%esp"
+		:
+		:"i"(T_SWITCH_TOU));
+}
+c01001f2:	90                   	nop
+c01001f3:	5d                   	pop    %ebp
+c01001f4:	c3                   	ret    
+
+c01001f5 <lab1_switch_to_kernel>:
+
+static void
+lab1_switch_to_kernel(void) {
+c01001f5:	55                   	push   %ebp
+c01001f6:	89 e5                	mov    %esp,%ebp
+    //LAB1 CHALLENGE 1 :  TODO
+	asm volatile(
+c01001f8:	cd 79                	int    $0x79
+c01001fa:	89 ec                	mov    %ebp,%esp
+		"int %0 \n"
+		"movl %%ebp, %%esp"
+		:
+		:"i"(T_SWITCH_TOK));
+}
+c01001fc:	90                   	nop
+c01001fd:	5d                   	pop    %ebp
+c01001fe:	c3                   	ret    
+
+c01001ff <lab1_switch_test>:
+
+static void
+lab1_switch_test(void) {
+c01001ff:	55                   	push   %ebp
+c0100200:	89 e5                	mov    %esp,%ebp
+c0100202:	83 ec 08             	sub    $0x8,%esp
+    lab1_print_cur_status();
+c0100205:	e8 21 ff ff ff       	call   c010012b <lab1_print_cur_status>
+    cprintf("+++ switch to  user  mode +++\n");
+c010020a:	83 ec 0c             	sub    $0xc,%esp
+c010020d:	68 e8 cc 10 c0       	push   $0xc010cce8
+c0100212:	e8 77 00 00 00       	call   c010028e <cprintf>
+c0100217:	83 c4 10             	add    $0x10,%esp
+    lab1_switch_to_user();
+c010021a:	e8 c9 ff ff ff       	call   c01001e8 <lab1_switch_to_user>
+    lab1_print_cur_status();
+c010021f:	e8 07 ff ff ff       	call   c010012b <lab1_print_cur_status>
+    cprintf("+++ switch to kernel mode +++\n");
+c0100224:	83 ec 0c             	sub    $0xc,%esp
+c0100227:	68 08 cd 10 c0       	push   $0xc010cd08
+c010022c:	e8 5d 00 00 00       	call   c010028e <cprintf>
+c0100231:	83 c4 10             	add    $0x10,%esp
+    lab1_switch_to_kernel();
+c0100234:	e8 bc ff ff ff       	call   c01001f5 <lab1_switch_to_kernel>
+    lab1_print_cur_status();
+c0100239:	e8 ed fe ff ff       	call   c010012b <lab1_print_cur_status>
+}
+c010023e:	90                   	nop
+c010023f:	c9                   	leave  
+c0100240:	c3                   	ret    
+
+c0100241 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+c0100241:	55                   	push   %ebp
+c0100242:	89 e5                	mov    %esp,%ebp
+c0100244:	83 ec 08             	sub    $0x8,%esp
+    cons_putc(c);
+c0100247:	83 ec 0c             	sub    $0xc,%esp
+c010024a:	ff 75 08             	pushl  0x8(%ebp)
+c010024d:	e8 ba 1c 00 00       	call   c0101f0c <cons_putc>
+c0100252:	83 c4 10             	add    $0x10,%esp
+    (*cnt) ++;
+c0100255:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100258:	8b 00                	mov    (%eax),%eax
+c010025a:	8d 50 01             	lea    0x1(%eax),%edx
+c010025d:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100260:	89 10                	mov    %edx,(%eax)
+}
+c0100262:	90                   	nop
+c0100263:	c9                   	leave  
+c0100264:	c3                   	ret    
+
+c0100265 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+c0100265:	55                   	push   %ebp
+c0100266:	89 e5                	mov    %esp,%ebp
+c0100268:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+c010026b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+c0100272:	ff 75 0c             	pushl  0xc(%ebp)
+c0100275:	ff 75 08             	pushl  0x8(%ebp)
+c0100278:	8d 45 f4             	lea    -0xc(%ebp),%eax
+c010027b:	50                   	push   %eax
+c010027c:	68 41 02 10 c0       	push   $0xc0100241
+c0100281:	e8 98 c4 00 00       	call   c010c71e <vprintfmt>
+c0100286:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+c0100289:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c010028c:	c9                   	leave  
+c010028d:	c3                   	ret    
+
+c010028e <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+c010028e:	55                   	push   %ebp
+c010028f:	89 e5                	mov    %esp,%ebp
+c0100291:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+c0100294:	8d 45 0c             	lea    0xc(%ebp),%eax
+c0100297:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vcprintf(fmt, ap);
+c010029a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010029d:	83 ec 08             	sub    $0x8,%esp
+c01002a0:	50                   	push   %eax
+c01002a1:	ff 75 08             	pushl  0x8(%ebp)
+c01002a4:	e8 bc ff ff ff       	call   c0100265 <vcprintf>
+c01002a9:	83 c4 10             	add    $0x10,%esp
+c01002ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+c01002af:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c01002b2:	c9                   	leave  
+c01002b3:	c3                   	ret    
+
+c01002b4 <cputchar>:
+
+/* cputchar - writes a single character to stdout */
+void
+cputchar(int c) {
+c01002b4:	55                   	push   %ebp
+c01002b5:	89 e5                	mov    %esp,%ebp
+c01002b7:	83 ec 08             	sub    $0x8,%esp
+    cons_putc(c);
+c01002ba:	83 ec 0c             	sub    $0xc,%esp
+c01002bd:	ff 75 08             	pushl  0x8(%ebp)
+c01002c0:	e8 47 1c 00 00       	call   c0101f0c <cons_putc>
+c01002c5:	83 c4 10             	add    $0x10,%esp
+}
+c01002c8:	90                   	nop
+c01002c9:	c9                   	leave  
+c01002ca:	c3                   	ret    
+
+c01002cb <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+c01002cb:	55                   	push   %ebp
+c01002cc:	89 e5                	mov    %esp,%ebp
+c01002ce:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+c01002d1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+c01002d8:	eb 14                	jmp    c01002ee <cputs+0x23>
+        cputch(c, &cnt);
+c01002da:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+c01002de:	83 ec 08             	sub    $0x8,%esp
+c01002e1:	8d 55 f0             	lea    -0x10(%ebp),%edx
+c01002e4:	52                   	push   %edx
+c01002e5:	50                   	push   %eax
+c01002e6:	e8 56 ff ff ff       	call   c0100241 <cputch>
+c01002eb:	83 c4 10             	add    $0x10,%esp
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+c01002ee:	8b 45 08             	mov    0x8(%ebp),%eax
+c01002f1:	8d 50 01             	lea    0x1(%eax),%edx
+c01002f4:	89 55 08             	mov    %edx,0x8(%ebp)
+c01002f7:	0f b6 00             	movzbl (%eax),%eax
+c01002fa:	88 45 f7             	mov    %al,-0x9(%ebp)
+c01002fd:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+c0100301:	75 d7                	jne    c01002da <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+c0100303:	83 ec 08             	sub    $0x8,%esp
+c0100306:	8d 45 f0             	lea    -0x10(%ebp),%eax
+c0100309:	50                   	push   %eax
+c010030a:	6a 0a                	push   $0xa
+c010030c:	e8 30 ff ff ff       	call   c0100241 <cputch>
+c0100311:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+c0100314:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+c0100317:	c9                   	leave  
+c0100318:	c3                   	ret    
+
+c0100319 <getchar>:
+
+/* getchar - reads a single non-zero character from stdin */
+int
+getchar(void) {
+c0100319:	55                   	push   %ebp
+c010031a:	89 e5                	mov    %esp,%ebp
+c010031c:	83 ec 18             	sub    $0x18,%esp
+    int c;
+    while ((c = cons_getc()) == 0)
+c010031f:	e8 31 1c 00 00       	call   c0101f55 <cons_getc>
+c0100324:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0100327:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010032b:	74 f2                	je     c010031f <getchar+0x6>
+        /* do nothing */;
+    return c;
+c010032d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0100330:	c9                   	leave  
+c0100331:	c3                   	ret    
+
+c0100332 <readline>:
+ * The readline() function returns the text of the line read. If some errors
+ * are happened, NULL is returned. The return value is a global variable,
+ * thus it should be copied before it is used.
+ * */
+char *
+readline(const char *prompt) {
+c0100332:	55                   	push   %ebp
+c0100333:	89 e5                	mov    %esp,%ebp
+c0100335:	83 ec 18             	sub    $0x18,%esp
+    if (prompt != NULL) {
+c0100338:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010033c:	74 13                	je     c0100351 <readline+0x1f>
+        cprintf("%s", prompt);
+c010033e:	83 ec 08             	sub    $0x8,%esp
+c0100341:	ff 75 08             	pushl  0x8(%ebp)
+c0100344:	68 27 cd 10 c0       	push   $0xc010cd27
+c0100349:	e8 40 ff ff ff       	call   c010028e <cprintf>
+c010034e:	83 c4 10             	add    $0x10,%esp
+    }
+    int i = 0, c;
+c0100351:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    while (1) {
+        c = getchar();
+c0100358:	e8 bc ff ff ff       	call   c0100319 <getchar>
+c010035d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        if (c < 0) {
+c0100360:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0100364:	79 0a                	jns    c0100370 <readline+0x3e>
+            return NULL;
+c0100366:	b8 00 00 00 00       	mov    $0x0,%eax
+c010036b:	e9 82 00 00 00       	jmp    c01003f2 <readline+0xc0>
+        }
+        else if (c >= ' ' && i < BUFSIZE - 1) {
+c0100370:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
+c0100374:	7e 2b                	jle    c01003a1 <readline+0x6f>
+c0100376:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
+c010037d:	7f 22                	jg     c01003a1 <readline+0x6f>
+            cputchar(c);
+c010037f:	83 ec 0c             	sub    $0xc,%esp
+c0100382:	ff 75 f0             	pushl  -0x10(%ebp)
+c0100385:	e8 2a ff ff ff       	call   c01002b4 <cputchar>
+c010038a:	83 c4 10             	add    $0x10,%esp
+            buf[i ++] = c;
+c010038d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100390:	8d 50 01             	lea    0x1(%eax),%edx
+c0100393:	89 55 f4             	mov    %edx,-0xc(%ebp)
+c0100396:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0100399:	88 90 00 23 1c c0    	mov    %dl,-0x3fe3dd00(%eax)
+c010039f:	eb 4c                	jmp    c01003ed <readline+0xbb>
+        }
+        else if (c == '\b' && i > 0) {
+c01003a1:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
+c01003a5:	75 1a                	jne    c01003c1 <readline+0x8f>
+c01003a7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01003ab:	7e 14                	jle    c01003c1 <readline+0x8f>
+            cputchar(c);
+c01003ad:	83 ec 0c             	sub    $0xc,%esp
+c01003b0:	ff 75 f0             	pushl  -0x10(%ebp)
+c01003b3:	e8 fc fe ff ff       	call   c01002b4 <cputchar>
+c01003b8:	83 c4 10             	add    $0x10,%esp
+            i --;
+c01003bb:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+c01003bf:	eb 2c                	jmp    c01003ed <readline+0xbb>
+        }
+        else if (c == '\n' || c == '\r') {
+c01003c1:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
+c01003c5:	74 06                	je     c01003cd <readline+0x9b>
+c01003c7:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
+c01003cb:	75 8b                	jne    c0100358 <readline+0x26>
+            cputchar(c);
+c01003cd:	83 ec 0c             	sub    $0xc,%esp
+c01003d0:	ff 75 f0             	pushl  -0x10(%ebp)
+c01003d3:	e8 dc fe ff ff       	call   c01002b4 <cputchar>
+c01003d8:	83 c4 10             	add    $0x10,%esp
+            buf[i] = '\0';
+c01003db:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01003de:	05 00 23 1c c0       	add    $0xc01c2300,%eax
+c01003e3:	c6 00 00             	movb   $0x0,(%eax)
+            return buf;
+c01003e6:	b8 00 23 1c c0       	mov    $0xc01c2300,%eax
+c01003eb:	eb 05                	jmp    c01003f2 <readline+0xc0>
+        }
+    }
+c01003ed:	e9 66 ff ff ff       	jmp    c0100358 <readline+0x26>
+}
+c01003f2:	c9                   	leave  
+c01003f3:	c3                   	ret    
+
+c01003f4 <__panic>:
+/* *
+ * __panic - __panic is called on unresolvable fatal errors. it prints
+ * "panic: 'message'", and then enters the kernel monitor.
+ * */
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+c01003f4:	55                   	push   %ebp
+c01003f5:	89 e5                	mov    %esp,%ebp
+c01003f7:	83 ec 18             	sub    $0x18,%esp
+    if (is_panic) {
+c01003fa:	a1 00 27 1c c0       	mov    0xc01c2700,%eax
+c01003ff:	85 c0                	test   %eax,%eax
+c0100401:	75 4a                	jne    c010044d <__panic+0x59>
+        goto panic_dead;
+    }
+    is_panic = 1;
+c0100403:	c7 05 00 27 1c c0 01 	movl   $0x1,0xc01c2700
+c010040a:	00 00 00 
+
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+c010040d:	8d 45 14             	lea    0x14(%ebp),%eax
+c0100410:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("kernel panic at %s:%d:\n    ", file, line);
+c0100413:	83 ec 04             	sub    $0x4,%esp
+c0100416:	ff 75 0c             	pushl  0xc(%ebp)
+c0100419:	ff 75 08             	pushl  0x8(%ebp)
+c010041c:	68 2a cd 10 c0       	push   $0xc010cd2a
+c0100421:	e8 68 fe ff ff       	call   c010028e <cprintf>
+c0100426:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+c0100429:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010042c:	83 ec 08             	sub    $0x8,%esp
+c010042f:	50                   	push   %eax
+c0100430:	ff 75 10             	pushl  0x10(%ebp)
+c0100433:	e8 2d fe ff ff       	call   c0100265 <vcprintf>
+c0100438:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+c010043b:	83 ec 0c             	sub    $0xc,%esp
+c010043e:	68 46 cd 10 c0       	push   $0xc010cd46
+c0100443:	e8 46 fe ff ff       	call   c010028e <cprintf>
+c0100448:	83 c4 10             	add    $0x10,%esp
+c010044b:	eb 01                	jmp    c010044e <__panic+0x5a>
+ * "panic: 'message'", and then enters the kernel monitor.
+ * */
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+    if (is_panic) {
+        goto panic_dead;
+c010044d:	90                   	nop
+    vcprintf(fmt, ap);
+    cprintf("\n");
+    va_end(ap);
+
+panic_dead:
+    intr_disable();
+c010044e:	e8 3e 1d 00 00       	call   c0102191 <intr_disable>
+    while (1) {
+        kmonitor(NULL);
+c0100453:	83 ec 0c             	sub    $0xc,%esp
+c0100456:	6a 00                	push   $0x0
+c0100458:	e8 07 09 00 00       	call   c0100d64 <kmonitor>
+c010045d:	83 c4 10             	add    $0x10,%esp
+    }
+c0100460:	eb f1                	jmp    c0100453 <__panic+0x5f>
+
+c0100462 <__warn>:
+}
+
+/* __warn - like panic, but don't */
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+c0100462:	55                   	push   %ebp
+c0100463:	89 e5                	mov    %esp,%ebp
+c0100465:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    va_start(ap, fmt);
+c0100468:	8d 45 14             	lea    0x14(%ebp),%eax
+c010046b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("kernel warning at %s:%d:\n    ", file, line);
+c010046e:	83 ec 04             	sub    $0x4,%esp
+c0100471:	ff 75 0c             	pushl  0xc(%ebp)
+c0100474:	ff 75 08             	pushl  0x8(%ebp)
+c0100477:	68 48 cd 10 c0       	push   $0xc010cd48
+c010047c:	e8 0d fe ff ff       	call   c010028e <cprintf>
+c0100481:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+c0100484:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100487:	83 ec 08             	sub    $0x8,%esp
+c010048a:	50                   	push   %eax
+c010048b:	ff 75 10             	pushl  0x10(%ebp)
+c010048e:	e8 d2 fd ff ff       	call   c0100265 <vcprintf>
+c0100493:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+c0100496:	83 ec 0c             	sub    $0xc,%esp
+c0100499:	68 46 cd 10 c0       	push   $0xc010cd46
+c010049e:	e8 eb fd ff ff       	call   c010028e <cprintf>
+c01004a3:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+c01004a6:	90                   	nop
+c01004a7:	c9                   	leave  
+c01004a8:	c3                   	ret    
+
+c01004a9 <is_kernel_panic>:
+
+bool
+is_kernel_panic(void) {
+c01004a9:	55                   	push   %ebp
+c01004aa:	89 e5                	mov    %esp,%ebp
+    return is_panic;
+c01004ac:	a1 00 27 1c c0       	mov    0xc01c2700,%eax
+}
+c01004b1:	5d                   	pop    %ebp
+c01004b2:	c3                   	ret    
+
+c01004b3 <stab_binsearch>:
+ *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
+ * will exit setting left = 118, right = 554.
+ * */
+static void
+stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
+           int type, uintptr_t addr) {
+c01004b3:	55                   	push   %ebp
+c01004b4:	89 e5                	mov    %esp,%ebp
+c01004b6:	83 ec 20             	sub    $0x20,%esp
+    int l = *region_left, r = *region_right, any_matches = 0;
+c01004b9:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01004bc:	8b 00                	mov    (%eax),%eax
+c01004be:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c01004c1:	8b 45 10             	mov    0x10(%ebp),%eax
+c01004c4:	8b 00                	mov    (%eax),%eax
+c01004c6:	89 45 f8             	mov    %eax,-0x8(%ebp)
+c01004c9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+
+    while (l <= r) {
+c01004d0:	e9 d2 00 00 00       	jmp    c01005a7 <stab_binsearch+0xf4>
+        int true_m = (l + r) / 2, m = true_m;
+c01004d5:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c01004d8:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c01004db:	01 d0                	add    %edx,%eax
+c01004dd:	89 c2                	mov    %eax,%edx
+c01004df:	c1 ea 1f             	shr    $0x1f,%edx
+c01004e2:	01 d0                	add    %edx,%eax
+c01004e4:	d1 f8                	sar    %eax
+c01004e6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c01004e9:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01004ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
+
+        // search for earliest stab with right type
+        while (m >= l && stabs[m].n_type != type) {
+c01004ef:	eb 04                	jmp    c01004f5 <stab_binsearch+0x42>
+            m --;
+c01004f1:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
+
+    while (l <= r) {
+        int true_m = (l + r) / 2, m = true_m;
+
+        // search for earliest stab with right type
+        while (m >= l && stabs[m].n_type != type) {
+c01004f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01004f8:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+c01004fb:	7c 1f                	jl     c010051c <stab_binsearch+0x69>
+c01004fd:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0100500:	89 d0                	mov    %edx,%eax
+c0100502:	01 c0                	add    %eax,%eax
+c0100504:	01 d0                	add    %edx,%eax
+c0100506:	c1 e0 02             	shl    $0x2,%eax
+c0100509:	89 c2                	mov    %eax,%edx
+c010050b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010050e:	01 d0                	add    %edx,%eax
+c0100510:	0f b6 40 04          	movzbl 0x4(%eax),%eax
+c0100514:	0f b6 c0             	movzbl %al,%eax
+c0100517:	3b 45 14             	cmp    0x14(%ebp),%eax
+c010051a:	75 d5                	jne    c01004f1 <stab_binsearch+0x3e>
+            m --;
+        }
+        if (m < l) {    // no match in [l, m]
+c010051c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010051f:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+c0100522:	7d 0b                	jge    c010052f <stab_binsearch+0x7c>
+            l = true_m + 1;
+c0100524:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0100527:	83 c0 01             	add    $0x1,%eax
+c010052a:	89 45 fc             	mov    %eax,-0x4(%ebp)
+            continue;
+c010052d:	eb 78                	jmp    c01005a7 <stab_binsearch+0xf4>
+        }
+
+        // actual binary search
+        any_matches = 1;
+c010052f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
+        if (stabs[m].n_value < addr) {
+c0100536:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0100539:	89 d0                	mov    %edx,%eax
+c010053b:	01 c0                	add    %eax,%eax
+c010053d:	01 d0                	add    %edx,%eax
+c010053f:	c1 e0 02             	shl    $0x2,%eax
+c0100542:	89 c2                	mov    %eax,%edx
+c0100544:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100547:	01 d0                	add    %edx,%eax
+c0100549:	8b 40 08             	mov    0x8(%eax),%eax
+c010054c:	3b 45 18             	cmp    0x18(%ebp),%eax
+c010054f:	73 13                	jae    c0100564 <stab_binsearch+0xb1>
+            *region_left = m;
+c0100551:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100554:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0100557:	89 10                	mov    %edx,(%eax)
+            l = true_m + 1;
+c0100559:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010055c:	83 c0 01             	add    $0x1,%eax
+c010055f:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c0100562:	eb 43                	jmp    c01005a7 <stab_binsearch+0xf4>
+        } else if (stabs[m].n_value > addr) {
+c0100564:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0100567:	89 d0                	mov    %edx,%eax
+c0100569:	01 c0                	add    %eax,%eax
+c010056b:	01 d0                	add    %edx,%eax
+c010056d:	c1 e0 02             	shl    $0x2,%eax
+c0100570:	89 c2                	mov    %eax,%edx
+c0100572:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100575:	01 d0                	add    %edx,%eax
+c0100577:	8b 40 08             	mov    0x8(%eax),%eax
+c010057a:	3b 45 18             	cmp    0x18(%ebp),%eax
+c010057d:	76 16                	jbe    c0100595 <stab_binsearch+0xe2>
+            *region_right = m - 1;
+c010057f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0100582:	8d 50 ff             	lea    -0x1(%eax),%edx
+c0100585:	8b 45 10             	mov    0x10(%ebp),%eax
+c0100588:	89 10                	mov    %edx,(%eax)
+            r = m - 1;
+c010058a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010058d:	83 e8 01             	sub    $0x1,%eax
+c0100590:	89 45 f8             	mov    %eax,-0x8(%ebp)
+c0100593:	eb 12                	jmp    c01005a7 <stab_binsearch+0xf4>
+        } else {
+            // exact match for 'addr', but continue loop to find
+            // *region_right
+            *region_left = m;
+c0100595:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100598:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010059b:	89 10                	mov    %edx,(%eax)
+            l = m;
+c010059d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01005a0:	89 45 fc             	mov    %eax,-0x4(%ebp)
+            addr ++;
+c01005a3:	83 45 18 01          	addl   $0x1,0x18(%ebp)
+static void
+stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
+           int type, uintptr_t addr) {
+    int l = *region_left, r = *region_right, any_matches = 0;
+
+    while (l <= r) {
+c01005a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01005aa:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+c01005ad:	0f 8e 22 ff ff ff    	jle    c01004d5 <stab_binsearch+0x22>
+            l = m;
+            addr ++;
+        }
+    }
+
+    if (!any_matches) {
+c01005b3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01005b7:	75 0f                	jne    c01005c8 <stab_binsearch+0x115>
+        *region_right = *region_left - 1;
+c01005b9:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01005bc:	8b 00                	mov    (%eax),%eax
+c01005be:	8d 50 ff             	lea    -0x1(%eax),%edx
+c01005c1:	8b 45 10             	mov    0x10(%ebp),%eax
+c01005c4:	89 10                	mov    %edx,(%eax)
+        l = *region_right;
+        for (; l > *region_left && stabs[l].n_type != type; l --)
+            /* do nothing */;
+        *region_left = l;
+    }
+}
+c01005c6:	eb 3f                	jmp    c0100607 <stab_binsearch+0x154>
+    if (!any_matches) {
+        *region_right = *region_left - 1;
+    }
+    else {
+        // find rightmost region containing 'addr'
+        l = *region_right;
+c01005c8:	8b 45 10             	mov    0x10(%ebp),%eax
+c01005cb:	8b 00                	mov    (%eax),%eax
+c01005cd:	89 45 fc             	mov    %eax,-0x4(%ebp)
+        for (; l > *region_left && stabs[l].n_type != type; l --)
+c01005d0:	eb 04                	jmp    c01005d6 <stab_binsearch+0x123>
+c01005d2:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
+c01005d6:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01005d9:	8b 00                	mov    (%eax),%eax
+c01005db:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+c01005de:	7d 1f                	jge    c01005ff <stab_binsearch+0x14c>
+c01005e0:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c01005e3:	89 d0                	mov    %edx,%eax
+c01005e5:	01 c0                	add    %eax,%eax
+c01005e7:	01 d0                	add    %edx,%eax
+c01005e9:	c1 e0 02             	shl    $0x2,%eax
+c01005ec:	89 c2                	mov    %eax,%edx
+c01005ee:	8b 45 08             	mov    0x8(%ebp),%eax
+c01005f1:	01 d0                	add    %edx,%eax
+c01005f3:	0f b6 40 04          	movzbl 0x4(%eax),%eax
+c01005f7:	0f b6 c0             	movzbl %al,%eax
+c01005fa:	3b 45 14             	cmp    0x14(%ebp),%eax
+c01005fd:	75 d3                	jne    c01005d2 <stab_binsearch+0x11f>
+            /* do nothing */;
+        *region_left = l;
+c01005ff:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100602:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c0100605:	89 10                	mov    %edx,(%eax)
+    }
+}
+c0100607:	90                   	nop
+c0100608:	c9                   	leave  
+c0100609:	c3                   	ret    
+
+c010060a <debuginfo_eip>:
+ * the specified instruction address, @addr.  Returns 0 if information
+ * was found, and negative if not.  But even if it returns negative it
+ * has stored some information into '*info'.
+ * */
+int
+debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
+c010060a:	55                   	push   %ebp
+c010060b:	89 e5                	mov    %esp,%ebp
+c010060d:	83 ec 38             	sub    $0x38,%esp
+    const struct stab *stabs, *stab_end;
+    const char *stabstr, *stabstr_end;
+
+    info->eip_file = "<unknown>";
+c0100610:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100613:	c7 00 68 cd 10 c0    	movl   $0xc010cd68,(%eax)
+    info->eip_line = 0;
+c0100619:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010061c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
+    info->eip_fn_name = "<unknown>";
+c0100623:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100626:	c7 40 08 68 cd 10 c0 	movl   $0xc010cd68,0x8(%eax)
+    info->eip_fn_namelen = 9;
+c010062d:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100630:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
+    info->eip_fn_addr = addr;
+c0100637:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010063a:	8b 55 08             	mov    0x8(%ebp),%edx
+c010063d:	89 50 10             	mov    %edx,0x10(%eax)
+    info->eip_fn_narg = 0;
+c0100640:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100643:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
+
+    // find the relevant set of stabs
+    if (addr >= KERNBASE) {
+c010064a:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
+c0100651:	76 21                	jbe    c0100674 <debuginfo_eip+0x6a>
+        stabs = __STAB_BEGIN__;
+c0100653:	c7 45 f4 40 f9 10 c0 	movl   $0xc010f940,-0xc(%ebp)
+        stab_end = __STAB_END__;
+c010065a:	c7 45 f0 54 74 12 c0 	movl   $0xc0127454,-0x10(%ebp)
+        stabstr = __STABSTR_BEGIN__;
+c0100661:	c7 45 ec 55 74 12 c0 	movl   $0xc0127455,-0x14(%ebp)
+        stabstr_end = __STABSTR_END__;
+c0100668:	c7 45 e8 01 e4 12 c0 	movl   $0xc012e401,-0x18(%ebp)
+c010066f:	e9 c3 00 00 00       	jmp    c0100737 <debuginfo_eip+0x12d>
+    }
+    else {
+        // user-program linker script, tools/user.ld puts the information about the
+        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
+        // and __STABSTR_END__) in a structure located at virtual address USTAB.
+        const struct userstabdata *usd = (struct userstabdata *)USTAB;
+c0100674:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)
+
+        // make sure that debugger (current process) can access this memory
+        struct mm_struct *mm;
+        if (current == NULL || (mm = current->mm) == NULL) {
+c010067b:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c0100680:	85 c0                	test   %eax,%eax
+c0100682:	74 11                	je     c0100695 <debuginfo_eip+0x8b>
+c0100684:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c0100689:	8b 40 18             	mov    0x18(%eax),%eax
+c010068c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c010068f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+c0100693:	75 0a                	jne    c010069f <debuginfo_eip+0x95>
+            return -1;
+c0100695:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c010069a:	e9 4e 03 00 00       	jmp    c01009ed <debuginfo_eip+0x3e3>
+        }
+        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
+c010069f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01006a2:	6a 00                	push   $0x0
+c01006a4:	6a 10                	push   $0x10
+c01006a6:	50                   	push   %eax
+c01006a7:	ff 75 e0             	pushl  -0x20(%ebp)
+c01006aa:	e8 a5 5e 00 00       	call   c0106554 <user_mem_check>
+c01006af:	83 c4 10             	add    $0x10,%esp
+c01006b2:	85 c0                	test   %eax,%eax
+c01006b4:	75 0a                	jne    c01006c0 <debuginfo_eip+0xb6>
+            return -1;
+c01006b6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c01006bb:	e9 2d 03 00 00       	jmp    c01009ed <debuginfo_eip+0x3e3>
+        }
+
+        stabs = usd->stabs;
+c01006c0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01006c3:	8b 00                	mov    (%eax),%eax
+c01006c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        stab_end = usd->stab_end;
+c01006c8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01006cb:	8b 40 04             	mov    0x4(%eax),%eax
+c01006ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        stabstr = usd->stabstr;
+c01006d1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01006d4:	8b 40 08             	mov    0x8(%eax),%eax
+c01006d7:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        stabstr_end = usd->stabstr_end;
+c01006da:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01006dd:	8b 40 0c             	mov    0xc(%eax),%eax
+c01006e0:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+        // make sure the STABS and string table memory is valid
+        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
+c01006e3:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c01006e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01006e9:	29 c2                	sub    %eax,%edx
+c01006eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01006ee:	6a 00                	push   $0x0
+c01006f0:	52                   	push   %edx
+c01006f1:	50                   	push   %eax
+c01006f2:	ff 75 e0             	pushl  -0x20(%ebp)
+c01006f5:	e8 5a 5e 00 00       	call   c0106554 <user_mem_check>
+c01006fa:	83 c4 10             	add    $0x10,%esp
+c01006fd:	85 c0                	test   %eax,%eax
+c01006ff:	75 0a                	jne    c010070b <debuginfo_eip+0x101>
+            return -1;
+c0100701:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c0100706:	e9 e2 02 00 00       	jmp    c01009ed <debuginfo_eip+0x3e3>
+        }
+        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
+c010070b:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010070e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0100711:	29 c2                	sub    %eax,%edx
+c0100713:	89 d0                	mov    %edx,%eax
+c0100715:	89 c2                	mov    %eax,%edx
+c0100717:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010071a:	6a 00                	push   $0x0
+c010071c:	52                   	push   %edx
+c010071d:	50                   	push   %eax
+c010071e:	ff 75 e0             	pushl  -0x20(%ebp)
+c0100721:	e8 2e 5e 00 00       	call   c0106554 <user_mem_check>
+c0100726:	83 c4 10             	add    $0x10,%esp
+c0100729:	85 c0                	test   %eax,%eax
+c010072b:	75 0a                	jne    c0100737 <debuginfo_eip+0x12d>
+            return -1;
+c010072d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c0100732:	e9 b6 02 00 00       	jmp    c01009ed <debuginfo_eip+0x3e3>
+        }
+    }
+
+    // String table validity checks
+    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
+c0100737:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010073a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c010073d:	76 0d                	jbe    c010074c <debuginfo_eip+0x142>
+c010073f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0100742:	83 e8 01             	sub    $0x1,%eax
+c0100745:	0f b6 00             	movzbl (%eax),%eax
+c0100748:	84 c0                	test   %al,%al
+c010074a:	74 0a                	je     c0100756 <debuginfo_eip+0x14c>
+        return -1;
+c010074c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c0100751:	e9 97 02 00 00       	jmp    c01009ed <debuginfo_eip+0x3e3>
+    // 'eip'.  First, we find the basic source file containing 'eip'.
+    // Then, we look in that source file for the function.  Then we look
+    // for the line number.
+
+    // Search the entire set of stabs for the source file (type N_SO).
+    int lfile = 0, rfile = (stab_end - stabs) - 1;
+c0100756:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+c010075d:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0100760:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100763:	29 c2                	sub    %eax,%edx
+c0100765:	89 d0                	mov    %edx,%eax
+c0100767:	c1 f8 02             	sar    $0x2,%eax
+c010076a:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
+c0100770:	83 e8 01             	sub    $0x1,%eax
+c0100773:	89 45 d8             	mov    %eax,-0x28(%ebp)
+    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
+c0100776:	83 ec 0c             	sub    $0xc,%esp
+c0100779:	ff 75 08             	pushl  0x8(%ebp)
+c010077c:	6a 64                	push   $0x64
+c010077e:	8d 45 d8             	lea    -0x28(%ebp),%eax
+c0100781:	50                   	push   %eax
+c0100782:	8d 45 dc             	lea    -0x24(%ebp),%eax
+c0100785:	50                   	push   %eax
+c0100786:	ff 75 f4             	pushl  -0xc(%ebp)
+c0100789:	e8 25 fd ff ff       	call   c01004b3 <stab_binsearch>
+c010078e:	83 c4 20             	add    $0x20,%esp
+    if (lfile == 0)
+c0100791:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0100794:	85 c0                	test   %eax,%eax
+c0100796:	75 0a                	jne    c01007a2 <debuginfo_eip+0x198>
+        return -1;
+c0100798:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c010079d:	e9 4b 02 00 00       	jmp    c01009ed <debuginfo_eip+0x3e3>
+
+    // Search within that file's stabs for the function definition
+    // (N_FUN).
+    int lfun = lfile, rfun = rfile;
+c01007a2:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01007a5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+c01007a8:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c01007ab:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    int lline, rline;
+    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
+c01007ae:	83 ec 0c             	sub    $0xc,%esp
+c01007b1:	ff 75 08             	pushl  0x8(%ebp)
+c01007b4:	6a 24                	push   $0x24
+c01007b6:	8d 45 d0             	lea    -0x30(%ebp),%eax
+c01007b9:	50                   	push   %eax
+c01007ba:	8d 45 d4             	lea    -0x2c(%ebp),%eax
+c01007bd:	50                   	push   %eax
+c01007be:	ff 75 f4             	pushl  -0xc(%ebp)
+c01007c1:	e8 ed fc ff ff       	call   c01004b3 <stab_binsearch>
+c01007c6:	83 c4 20             	add    $0x20,%esp
+
+    if (lfun <= rfun) {
+c01007c9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c01007cc:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c01007cf:	39 c2                	cmp    %eax,%edx
+c01007d1:	7f 7c                	jg     c010084f <debuginfo_eip+0x245>
+        // stabs[lfun] points to the function name
+        // in the string table, but check bounds just in case.
+        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
+c01007d3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c01007d6:	89 c2                	mov    %eax,%edx
+c01007d8:	89 d0                	mov    %edx,%eax
+c01007da:	01 c0                	add    %eax,%eax
+c01007dc:	01 d0                	add    %edx,%eax
+c01007de:	c1 e0 02             	shl    $0x2,%eax
+c01007e1:	89 c2                	mov    %eax,%edx
+c01007e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01007e6:	01 d0                	add    %edx,%eax
+c01007e8:	8b 00                	mov    (%eax),%eax
+c01007ea:	8b 4d e8             	mov    -0x18(%ebp),%ecx
+c01007ed:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c01007f0:	29 d1                	sub    %edx,%ecx
+c01007f2:	89 ca                	mov    %ecx,%edx
+c01007f4:	39 d0                	cmp    %edx,%eax
+c01007f6:	73 22                	jae    c010081a <debuginfo_eip+0x210>
+            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
+c01007f8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c01007fb:	89 c2                	mov    %eax,%edx
+c01007fd:	89 d0                	mov    %edx,%eax
+c01007ff:	01 c0                	add    %eax,%eax
+c0100801:	01 d0                	add    %edx,%eax
+c0100803:	c1 e0 02             	shl    $0x2,%eax
+c0100806:	89 c2                	mov    %eax,%edx
+c0100808:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010080b:	01 d0                	add    %edx,%eax
+c010080d:	8b 10                	mov    (%eax),%edx
+c010080f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0100812:	01 c2                	add    %eax,%edx
+c0100814:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100817:	89 50 08             	mov    %edx,0x8(%eax)
+        }
+        info->eip_fn_addr = stabs[lfun].n_value;
+c010081a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010081d:	89 c2                	mov    %eax,%edx
+c010081f:	89 d0                	mov    %edx,%eax
+c0100821:	01 c0                	add    %eax,%eax
+c0100823:	01 d0                	add    %edx,%eax
+c0100825:	c1 e0 02             	shl    $0x2,%eax
+c0100828:	89 c2                	mov    %eax,%edx
+c010082a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010082d:	01 d0                	add    %edx,%eax
+c010082f:	8b 50 08             	mov    0x8(%eax),%edx
+c0100832:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100835:	89 50 10             	mov    %edx,0x10(%eax)
+        addr -= info->eip_fn_addr;
+c0100838:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010083b:	8b 40 10             	mov    0x10(%eax),%eax
+c010083e:	29 45 08             	sub    %eax,0x8(%ebp)
+        // Search within the function definition for the line number.
+        lline = lfun;
+c0100841:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0100844:	89 45 cc             	mov    %eax,-0x34(%ebp)
+        rline = rfun;
+c0100847:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010084a:	89 45 c8             	mov    %eax,-0x38(%ebp)
+c010084d:	eb 15                	jmp    c0100864 <debuginfo_eip+0x25a>
+    } else {
+        // Couldn't find function stab!  Maybe we're in an assembly
+        // file.  Search the whole file for the line number.
+        info->eip_fn_addr = addr;
+c010084f:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100852:	8b 55 08             	mov    0x8(%ebp),%edx
+c0100855:	89 50 10             	mov    %edx,0x10(%eax)
+        lline = lfile;
+c0100858:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010085b:	89 45 cc             	mov    %eax,-0x34(%ebp)
+        rline = rfile;
+c010085e:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0100861:	89 45 c8             	mov    %eax,-0x38(%ebp)
+    }
+    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
+c0100864:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100867:	8b 40 08             	mov    0x8(%eax),%eax
+c010086a:	83 ec 08             	sub    $0x8,%esp
+c010086d:	6a 3a                	push   $0x3a
+c010086f:	50                   	push   %eax
+c0100870:	e8 e7 b9 00 00       	call   c010c25c <strfind>
+c0100875:	83 c4 10             	add    $0x10,%esp
+c0100878:	89 c2                	mov    %eax,%edx
+c010087a:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010087d:	8b 40 08             	mov    0x8(%eax),%eax
+c0100880:	29 c2                	sub    %eax,%edx
+c0100882:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100885:	89 50 0c             	mov    %edx,0xc(%eax)
+
+    // Search within [lline, rline] for the line number stab.
+    // If found, set info->eip_line to the right line number.
+    // If not found, return -1.
+    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
+c0100888:	83 ec 0c             	sub    $0xc,%esp
+c010088b:	ff 75 08             	pushl  0x8(%ebp)
+c010088e:	6a 44                	push   $0x44
+c0100890:	8d 45 c8             	lea    -0x38(%ebp),%eax
+c0100893:	50                   	push   %eax
+c0100894:	8d 45 cc             	lea    -0x34(%ebp),%eax
+c0100897:	50                   	push   %eax
+c0100898:	ff 75 f4             	pushl  -0xc(%ebp)
+c010089b:	e8 13 fc ff ff       	call   c01004b3 <stab_binsearch>
+c01008a0:	83 c4 20             	add    $0x20,%esp
+    if (lline <= rline) {
+c01008a3:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c01008a6:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c01008a9:	39 c2                	cmp    %eax,%edx
+c01008ab:	7f 24                	jg     c01008d1 <debuginfo_eip+0x2c7>
+        info->eip_line = stabs[rline].n_desc;
+c01008ad:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c01008b0:	89 c2                	mov    %eax,%edx
+c01008b2:	89 d0                	mov    %edx,%eax
+c01008b4:	01 c0                	add    %eax,%eax
+c01008b6:	01 d0                	add    %edx,%eax
+c01008b8:	c1 e0 02             	shl    $0x2,%eax
+c01008bb:	89 c2                	mov    %eax,%edx
+c01008bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01008c0:	01 d0                	add    %edx,%eax
+c01008c2:	0f b7 40 06          	movzwl 0x6(%eax),%eax
+c01008c6:	0f b7 d0             	movzwl %ax,%edx
+c01008c9:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01008cc:	89 50 04             	mov    %edx,0x4(%eax)
+
+    // Search backwards from the line number for the relevant filename stab.
+    // We can't just use the "lfile" stab because inlined functions
+    // can interpolate code from a different file!
+    // Such included source files use the N_SOL stab type.
+    while (lline >= lfile
+c01008cf:	eb 13                	jmp    c01008e4 <debuginfo_eip+0x2da>
+    // If not found, return -1.
+    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
+    if (lline <= rline) {
+        info->eip_line = stabs[rline].n_desc;
+    } else {
+        return -1;
+c01008d1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c01008d6:	e9 12 01 00 00       	jmp    c01009ed <debuginfo_eip+0x3e3>
+    // can interpolate code from a different file!
+    // Such included source files use the N_SOL stab type.
+    while (lline >= lfile
+           && stabs[lline].n_type != N_SOL
+           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
+        lline --;
+c01008db:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c01008de:	83 e8 01             	sub    $0x1,%eax
+c01008e1:	89 45 cc             	mov    %eax,-0x34(%ebp)
+
+    // Search backwards from the line number for the relevant filename stab.
+    // We can't just use the "lfile" stab because inlined functions
+    // can interpolate code from a different file!
+    // Such included source files use the N_SOL stab type.
+    while (lline >= lfile
+c01008e4:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c01008e7:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01008ea:	39 c2                	cmp    %eax,%edx
+c01008ec:	7c 56                	jl     c0100944 <debuginfo_eip+0x33a>
+           && stabs[lline].n_type != N_SOL
+c01008ee:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c01008f1:	89 c2                	mov    %eax,%edx
+c01008f3:	89 d0                	mov    %edx,%eax
+c01008f5:	01 c0                	add    %eax,%eax
+c01008f7:	01 d0                	add    %edx,%eax
+c01008f9:	c1 e0 02             	shl    $0x2,%eax
+c01008fc:	89 c2                	mov    %eax,%edx
+c01008fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100901:	01 d0                	add    %edx,%eax
+c0100903:	0f b6 40 04          	movzbl 0x4(%eax),%eax
+c0100907:	3c 84                	cmp    $0x84,%al
+c0100909:	74 39                	je     c0100944 <debuginfo_eip+0x33a>
+           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
+c010090b:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010090e:	89 c2                	mov    %eax,%edx
+c0100910:	89 d0                	mov    %edx,%eax
+c0100912:	01 c0                	add    %eax,%eax
+c0100914:	01 d0                	add    %edx,%eax
+c0100916:	c1 e0 02             	shl    $0x2,%eax
+c0100919:	89 c2                	mov    %eax,%edx
+c010091b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010091e:	01 d0                	add    %edx,%eax
+c0100920:	0f b6 40 04          	movzbl 0x4(%eax),%eax
+c0100924:	3c 64                	cmp    $0x64,%al
+c0100926:	75 b3                	jne    c01008db <debuginfo_eip+0x2d1>
+c0100928:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010092b:	89 c2                	mov    %eax,%edx
+c010092d:	89 d0                	mov    %edx,%eax
+c010092f:	01 c0                	add    %eax,%eax
+c0100931:	01 d0                	add    %edx,%eax
+c0100933:	c1 e0 02             	shl    $0x2,%eax
+c0100936:	89 c2                	mov    %eax,%edx
+c0100938:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010093b:	01 d0                	add    %edx,%eax
+c010093d:	8b 40 08             	mov    0x8(%eax),%eax
+c0100940:	85 c0                	test   %eax,%eax
+c0100942:	74 97                	je     c01008db <debuginfo_eip+0x2d1>
+        lline --;
+    }
+    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
+c0100944:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c0100947:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010094a:	39 c2                	cmp    %eax,%edx
+c010094c:	7c 46                	jl     c0100994 <debuginfo_eip+0x38a>
+c010094e:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0100951:	89 c2                	mov    %eax,%edx
+c0100953:	89 d0                	mov    %edx,%eax
+c0100955:	01 c0                	add    %eax,%eax
+c0100957:	01 d0                	add    %edx,%eax
+c0100959:	c1 e0 02             	shl    $0x2,%eax
+c010095c:	89 c2                	mov    %eax,%edx
+c010095e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100961:	01 d0                	add    %edx,%eax
+c0100963:	8b 00                	mov    (%eax),%eax
+c0100965:	8b 4d e8             	mov    -0x18(%ebp),%ecx
+c0100968:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010096b:	29 d1                	sub    %edx,%ecx
+c010096d:	89 ca                	mov    %ecx,%edx
+c010096f:	39 d0                	cmp    %edx,%eax
+c0100971:	73 21                	jae    c0100994 <debuginfo_eip+0x38a>
+        info->eip_file = stabstr + stabs[lline].n_strx;
+c0100973:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0100976:	89 c2                	mov    %eax,%edx
+c0100978:	89 d0                	mov    %edx,%eax
+c010097a:	01 c0                	add    %eax,%eax
+c010097c:	01 d0                	add    %edx,%eax
+c010097e:	c1 e0 02             	shl    $0x2,%eax
+c0100981:	89 c2                	mov    %eax,%edx
+c0100983:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100986:	01 d0                	add    %edx,%eax
+c0100988:	8b 10                	mov    (%eax),%edx
+c010098a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010098d:	01 c2                	add    %eax,%edx
+c010098f:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100992:	89 10                	mov    %edx,(%eax)
+    }
+
+    // Set eip_fn_narg to the number of arguments taken by the function,
+    // or 0 if there was no containing function.
+    if (lfun < rfun) {
+c0100994:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0100997:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010099a:	39 c2                	cmp    %eax,%edx
+c010099c:	7d 4a                	jge    c01009e8 <debuginfo_eip+0x3de>
+        for (lline = lfun + 1;
+c010099e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c01009a1:	83 c0 01             	add    $0x1,%eax
+c01009a4:	89 45 cc             	mov    %eax,-0x34(%ebp)
+c01009a7:	eb 18                	jmp    c01009c1 <debuginfo_eip+0x3b7>
+             lline < rfun && stabs[lline].n_type == N_PSYM;
+             lline ++) {
+            info->eip_fn_narg ++;
+c01009a9:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01009ac:	8b 40 14             	mov    0x14(%eax),%eax
+c01009af:	8d 50 01             	lea    0x1(%eax),%edx
+c01009b2:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01009b5:	89 50 14             	mov    %edx,0x14(%eax)
+    // Set eip_fn_narg to the number of arguments taken by the function,
+    // or 0 if there was no containing function.
+    if (lfun < rfun) {
+        for (lline = lfun + 1;
+             lline < rfun && stabs[lline].n_type == N_PSYM;
+             lline ++) {
+c01009b8:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c01009bb:	83 c0 01             	add    $0x1,%eax
+c01009be:	89 45 cc             	mov    %eax,-0x34(%ebp)
+
+    // Set eip_fn_narg to the number of arguments taken by the function,
+    // or 0 if there was no containing function.
+    if (lfun < rfun) {
+        for (lline = lfun + 1;
+             lline < rfun && stabs[lline].n_type == N_PSYM;
+c01009c1:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c01009c4:	8b 45 d0             	mov    -0x30(%ebp),%eax
+    }
+
+    // Set eip_fn_narg to the number of arguments taken by the function,
+    // or 0 if there was no containing function.
+    if (lfun < rfun) {
+        for (lline = lfun + 1;
+c01009c7:	39 c2                	cmp    %eax,%edx
+c01009c9:	7d 1d                	jge    c01009e8 <debuginfo_eip+0x3de>
+             lline < rfun && stabs[lline].n_type == N_PSYM;
+c01009cb:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c01009ce:	89 c2                	mov    %eax,%edx
+c01009d0:	89 d0                	mov    %edx,%eax
+c01009d2:	01 c0                	add    %eax,%eax
+c01009d4:	01 d0                	add    %edx,%eax
+c01009d6:	c1 e0 02             	shl    $0x2,%eax
+c01009d9:	89 c2                	mov    %eax,%edx
+c01009db:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01009de:	01 d0                	add    %edx,%eax
+c01009e0:	0f b6 40 04          	movzbl 0x4(%eax),%eax
+c01009e4:	3c a0                	cmp    $0xa0,%al
+c01009e6:	74 c1                	je     c01009a9 <debuginfo_eip+0x39f>
+             lline ++) {
+            info->eip_fn_narg ++;
+        }
+    }
+    return 0;
+c01009e8:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01009ed:	c9                   	leave  
+c01009ee:	c3                   	ret    
+
+c01009ef <print_kerninfo>:
+ * print_kerninfo - print the information about kernel, including the location
+ * of kernel entry, the start addresses of data and text segements, the start
+ * address of free memory and how many memory that kernel has used.
+ * */
+void
+print_kerninfo(void) {
+c01009ef:	55                   	push   %ebp
+c01009f0:	89 e5                	mov    %esp,%ebp
+c01009f2:	83 ec 08             	sub    $0x8,%esp
+    extern char etext[], edata[], end[], kern_init[];
+    cprintf("Special kernel symbols:\n");
+c01009f5:	83 ec 0c             	sub    $0xc,%esp
+c01009f8:	68 72 cd 10 c0       	push   $0xc010cd72
+c01009fd:	e8 8c f8 ff ff       	call   c010028e <cprintf>
+c0100a02:	83 c4 10             	add    $0x10,%esp
+    cprintf("  entry  0x%08x (phys)\n", kern_init);
+c0100a05:	83 ec 08             	sub    $0x8,%esp
+c0100a08:	68 2a 00 10 c0       	push   $0xc010002a
+c0100a0d:	68 8b cd 10 c0       	push   $0xc010cd8b
+c0100a12:	e8 77 f8 ff ff       	call   c010028e <cprintf>
+c0100a17:	83 c4 10             	add    $0x10,%esp
+    cprintf("  etext  0x%08x (phys)\n", etext);
+c0100a1a:	83 ec 08             	sub    $0x8,%esp
+c0100a1d:	68 7c cc 10 c0       	push   $0xc010cc7c
+c0100a22:	68 a3 cd 10 c0       	push   $0xc010cda3
+c0100a27:	e8 62 f8 ff ff       	call   c010028e <cprintf>
+c0100a2c:	83 c4 10             	add    $0x10,%esp
+    cprintf("  edata  0x%08x (phys)\n", edata);
+c0100a2f:	83 ec 08             	sub    $0x8,%esp
+c0100a32:	68 c4 22 1c c0       	push   $0xc01c22c4
+c0100a37:	68 bb cd 10 c0       	push   $0xc010cdbb
+c0100a3c:	e8 4d f8 ff ff       	call   c010028e <cprintf>
+c0100a41:	83 c4 10             	add    $0x10,%esp
+    cprintf("  end    0x%08x (phys)\n", end);
+c0100a44:	83 ec 08             	sub    $0x8,%esp
+c0100a47:	68 84 55 1c c0       	push   $0xc01c5584
+c0100a4c:	68 d3 cd 10 c0       	push   $0xc010cdd3
+c0100a51:	e8 38 f8 ff ff       	call   c010028e <cprintf>
+c0100a56:	83 c4 10             	add    $0x10,%esp
+    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
+c0100a59:	b8 84 55 1c c0       	mov    $0xc01c5584,%eax
+c0100a5e:	05 ff 03 00 00       	add    $0x3ff,%eax
+c0100a63:	ba 2a 00 10 c0       	mov    $0xc010002a,%edx
+c0100a68:	29 d0                	sub    %edx,%eax
+c0100a6a:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
+c0100a70:	85 c0                	test   %eax,%eax
+c0100a72:	0f 48 c2             	cmovs  %edx,%eax
+c0100a75:	c1 f8 0a             	sar    $0xa,%eax
+c0100a78:	83 ec 08             	sub    $0x8,%esp
+c0100a7b:	50                   	push   %eax
+c0100a7c:	68 ec cd 10 c0       	push   $0xc010cdec
+c0100a81:	e8 08 f8 ff ff       	call   c010028e <cprintf>
+c0100a86:	83 c4 10             	add    $0x10,%esp
+}
+c0100a89:	90                   	nop
+c0100a8a:	c9                   	leave  
+c0100a8b:	c3                   	ret    
+
+c0100a8c <print_debuginfo>:
+/* *
+ * print_debuginfo - read and print the stat information for the address @eip,
+ * and info.eip_fn_addr should be the first address of the related function.
+ * */
+void
+print_debuginfo(uintptr_t eip) {
+c0100a8c:	55                   	push   %ebp
+c0100a8d:	89 e5                	mov    %esp,%ebp
+c0100a8f:	81 ec 28 01 00 00    	sub    $0x128,%esp
+    struct eipdebuginfo info;
+    if (debuginfo_eip(eip, &info) != 0) {
+c0100a95:	83 ec 08             	sub    $0x8,%esp
+c0100a98:	8d 45 dc             	lea    -0x24(%ebp),%eax
+c0100a9b:	50                   	push   %eax
+c0100a9c:	ff 75 08             	pushl  0x8(%ebp)
+c0100a9f:	e8 66 fb ff ff       	call   c010060a <debuginfo_eip>
+c0100aa4:	83 c4 10             	add    $0x10,%esp
+c0100aa7:	85 c0                	test   %eax,%eax
+c0100aa9:	74 15                	je     c0100ac0 <print_debuginfo+0x34>
+        cprintf("    <unknow>: -- 0x%08x --\n", eip);
+c0100aab:	83 ec 08             	sub    $0x8,%esp
+c0100aae:	ff 75 08             	pushl  0x8(%ebp)
+c0100ab1:	68 16 ce 10 c0       	push   $0xc010ce16
+c0100ab6:	e8 d3 f7 ff ff       	call   c010028e <cprintf>
+c0100abb:	83 c4 10             	add    $0x10,%esp
+        }
+        fnname[j] = '\0';
+        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
+                fnname, eip - info.eip_fn_addr);
+    }
+}
+c0100abe:	eb 65                	jmp    c0100b25 <print_debuginfo+0x99>
+        cprintf("    <unknow>: -- 0x%08x --\n", eip);
+    }
+    else {
+        char fnname[256];
+        int j;
+        for (j = 0; j < info.eip_fn_namelen; j ++) {
+c0100ac0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0100ac7:	eb 1c                	jmp    c0100ae5 <print_debuginfo+0x59>
+            fnname[j] = info.eip_fn_name[j];
+c0100ac9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0100acc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100acf:	01 d0                	add    %edx,%eax
+c0100ad1:	0f b6 00             	movzbl (%eax),%eax
+c0100ad4:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
+c0100ada:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0100add:	01 ca                	add    %ecx,%edx
+c0100adf:	88 02                	mov    %al,(%edx)
+        cprintf("    <unknow>: -- 0x%08x --\n", eip);
+    }
+    else {
+        char fnname[256];
+        int j;
+        for (j = 0; j < info.eip_fn_namelen; j ++) {
+c0100ae1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0100ae5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0100ae8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0100aeb:	7f dc                	jg     c0100ac9 <print_debuginfo+0x3d>
+            fnname[j] = info.eip_fn_name[j];
+        }
+        fnname[j] = '\0';
+c0100aed:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
+c0100af3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100af6:	01 d0                	add    %edx,%eax
+c0100af8:	c6 00 00             	movb   $0x0,(%eax)
+        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
+                fnname, eip - info.eip_fn_addr);
+c0100afb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+        int j;
+        for (j = 0; j < info.eip_fn_namelen; j ++) {
+            fnname[j] = info.eip_fn_name[j];
+        }
+        fnname[j] = '\0';
+        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
+c0100afe:	8b 55 08             	mov    0x8(%ebp),%edx
+c0100b01:	89 d1                	mov    %edx,%ecx
+c0100b03:	29 c1                	sub    %eax,%ecx
+c0100b05:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0100b08:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0100b0b:	83 ec 0c             	sub    $0xc,%esp
+c0100b0e:	51                   	push   %ecx
+c0100b0f:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
+c0100b15:	51                   	push   %ecx
+c0100b16:	52                   	push   %edx
+c0100b17:	50                   	push   %eax
+c0100b18:	68 32 ce 10 c0       	push   $0xc010ce32
+c0100b1d:	e8 6c f7 ff ff       	call   c010028e <cprintf>
+c0100b22:	83 c4 20             	add    $0x20,%esp
+                fnname, eip - info.eip_fn_addr);
+    }
+}
+c0100b25:	90                   	nop
+c0100b26:	c9                   	leave  
+c0100b27:	c3                   	ret    
+
+c0100b28 <read_eip>:
+
+static __noinline uint32_t
+read_eip(void) {
+c0100b28:	55                   	push   %ebp
+c0100b29:	89 e5                	mov    %esp,%ebp
+c0100b2b:	83 ec 10             	sub    $0x10,%esp
+    uint32_t eip;
+    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
+c0100b2e:	8b 45 04             	mov    0x4(%ebp),%eax
+c0100b31:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return eip;
+c0100b34:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+c0100b37:	c9                   	leave  
+c0100b38:	c3                   	ret    
+
+c0100b39 <print_stackframe>:
+ *
+ * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
+ * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
+ * */
+void
+print_stackframe(void) {
+c0100b39:	55                   	push   %ebp
+c0100b3a:	89 e5                	mov    %esp,%ebp
+c0100b3c:	83 ec 28             	sub    $0x28,%esp
+}
+
+static inline uint32_t
+read_ebp(void) {
+    uint32_t ebp;
+    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
+c0100b3f:	89 e8                	mov    %ebp,%eax
+c0100b41:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    return ebp;
+c0100b44:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+      *    (3.5) popup a calling stackframe
+      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
+      *                   the calling funciton's ebp = ss:[ebp]
+      */
+
+	uint32_t ebp = read_ebp();
+c0100b47:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    uint32_t eip = read_eip();
+c0100b4a:	e8 d9 ff ff ff       	call   c0100b28 <read_eip>
+c0100b4f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int i = 0;
+c0100b52:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+    while (ebp && i<STACKFRAME_DEPTH){
+c0100b59:	e9 87 00 00 00       	jmp    c0100be5 <print_stackframe+0xac>
+    	cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
+c0100b5e:	83 ec 04             	sub    $0x4,%esp
+c0100b61:	ff 75 f0             	pushl  -0x10(%ebp)
+c0100b64:	ff 75 f4             	pushl  -0xc(%ebp)
+c0100b67:	68 44 ce 10 c0       	push   $0xc010ce44
+c0100b6c:	e8 1d f7 ff ff       	call   c010028e <cprintf>
+c0100b71:	83 c4 10             	add    $0x10,%esp
+    	for (int j=0; j<4; j++) cprintf("0x%08x ", ((uint32_t *)ebp)[j+2]);
+c0100b74:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+c0100b7b:	eb 29                	jmp    c0100ba6 <print_stackframe+0x6d>
+c0100b7d:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0100b80:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0100b87:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100b8a:	01 d0                	add    %edx,%eax
+c0100b8c:	83 c0 08             	add    $0x8,%eax
+c0100b8f:	8b 00                	mov    (%eax),%eax
+c0100b91:	83 ec 08             	sub    $0x8,%esp
+c0100b94:	50                   	push   %eax
+c0100b95:	68 60 ce 10 c0       	push   $0xc010ce60
+c0100b9a:	e8 ef f6 ff ff       	call   c010028e <cprintf>
+c0100b9f:	83 c4 10             	add    $0x10,%esp
+c0100ba2:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
+c0100ba6:	83 7d e8 03          	cmpl   $0x3,-0x18(%ebp)
+c0100baa:	7e d1                	jle    c0100b7d <print_stackframe+0x44>
+    	cprintf("\n");
+c0100bac:	83 ec 0c             	sub    $0xc,%esp
+c0100baf:	68 68 ce 10 c0       	push   $0xc010ce68
+c0100bb4:	e8 d5 f6 ff ff       	call   c010028e <cprintf>
+c0100bb9:	83 c4 10             	add    $0x10,%esp
+    	print_debuginfo(eip - 1);
+c0100bbc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0100bbf:	83 e8 01             	sub    $0x1,%eax
+c0100bc2:	83 ec 0c             	sub    $0xc,%esp
+c0100bc5:	50                   	push   %eax
+c0100bc6:	e8 c1 fe ff ff       	call   c0100a8c <print_debuginfo>
+c0100bcb:	83 c4 10             	add    $0x10,%esp
+    	i++;
+c0100bce:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+    	eip = ((uint32_t *)ebp)[1];
+c0100bd2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100bd5:	83 c0 04             	add    $0x4,%eax
+c0100bd8:	8b 00                	mov    (%eax),%eax
+c0100bda:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    	ebp = ((uint32_t *)ebp)[0];
+c0100bdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100be0:	8b 00                	mov    (%eax),%eax
+c0100be2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+      */
+
+	uint32_t ebp = read_ebp();
+    uint32_t eip = read_eip();
+    int i = 0;
+    while (ebp && i<STACKFRAME_DEPTH){
+c0100be5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0100be9:	74 0a                	je     c0100bf5 <print_stackframe+0xbc>
+c0100beb:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
+c0100bef:	0f 8e 69 ff ff ff    	jle    c0100b5e <print_stackframe+0x25>
+    	print_debuginfo(eip - 1);
+    	i++;
+    	eip = ((uint32_t *)ebp)[1];
+    	ebp = ((uint32_t *)ebp)[0];
+    }
+}
+c0100bf5:	90                   	nop
+c0100bf6:	c9                   	leave  
+c0100bf7:	c3                   	ret    
+
+c0100bf8 <parse>:
+#define MAXARGS         16
+#define WHITESPACE      " \t\n\r"
+
+/* parse - parse the command buffer into whitespace-separated arguments */
+static int
+parse(char *buf, char **argv) {
+c0100bf8:	55                   	push   %ebp
+c0100bf9:	89 e5                	mov    %esp,%ebp
+c0100bfb:	83 ec 18             	sub    $0x18,%esp
+    int argc = 0;
+c0100bfe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    while (1) {
+        // find global whitespace
+        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
+c0100c05:	eb 0c                	jmp    c0100c13 <parse+0x1b>
+            *buf ++ = '\0';
+c0100c07:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100c0a:	8d 50 01             	lea    0x1(%eax),%edx
+c0100c0d:	89 55 08             	mov    %edx,0x8(%ebp)
+c0100c10:	c6 00 00             	movb   $0x0,(%eax)
+static int
+parse(char *buf, char **argv) {
+    int argc = 0;
+    while (1) {
+        // find global whitespace
+        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
+c0100c13:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100c16:	0f b6 00             	movzbl (%eax),%eax
+c0100c19:	84 c0                	test   %al,%al
+c0100c1b:	74 1e                	je     c0100c3b <parse+0x43>
+c0100c1d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100c20:	0f b6 00             	movzbl (%eax),%eax
+c0100c23:	0f be c0             	movsbl %al,%eax
+c0100c26:	83 ec 08             	sub    $0x8,%esp
+c0100c29:	50                   	push   %eax
+c0100c2a:	68 ec ce 10 c0       	push   $0xc010ceec
+c0100c2f:	e8 f5 b5 00 00       	call   c010c229 <strchr>
+c0100c34:	83 c4 10             	add    $0x10,%esp
+c0100c37:	85 c0                	test   %eax,%eax
+c0100c39:	75 cc                	jne    c0100c07 <parse+0xf>
+            *buf ++ = '\0';
+        }
+        if (*buf == '\0') {
+c0100c3b:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100c3e:	0f b6 00             	movzbl (%eax),%eax
+c0100c41:	84 c0                	test   %al,%al
+c0100c43:	74 69                	je     c0100cae <parse+0xb6>
+            break;
+        }
+
+        // save and scan past next arg
+        if (argc == MAXARGS - 1) {
+c0100c45:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+c0100c49:	75 12                	jne    c0100c5d <parse+0x65>
+            cprintf("Too many arguments (max %d).\n", MAXARGS);
+c0100c4b:	83 ec 08             	sub    $0x8,%esp
+c0100c4e:	6a 10                	push   $0x10
+c0100c50:	68 f1 ce 10 c0       	push   $0xc010cef1
+c0100c55:	e8 34 f6 ff ff       	call   c010028e <cprintf>
+c0100c5a:	83 c4 10             	add    $0x10,%esp
+        }
+        argv[argc ++] = buf;
+c0100c5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100c60:	8d 50 01             	lea    0x1(%eax),%edx
+c0100c63:	89 55 f4             	mov    %edx,-0xc(%ebp)
+c0100c66:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0100c6d:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0100c70:	01 c2                	add    %eax,%edx
+c0100c72:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100c75:	89 02                	mov    %eax,(%edx)
+        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
+c0100c77:	eb 04                	jmp    c0100c7d <parse+0x85>
+            buf ++;
+c0100c79:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+        // save and scan past next arg
+        if (argc == MAXARGS - 1) {
+            cprintf("Too many arguments (max %d).\n", MAXARGS);
+        }
+        argv[argc ++] = buf;
+        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
+c0100c7d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100c80:	0f b6 00             	movzbl (%eax),%eax
+c0100c83:	84 c0                	test   %al,%al
+c0100c85:	0f 84 7a ff ff ff    	je     c0100c05 <parse+0xd>
+c0100c8b:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100c8e:	0f b6 00             	movzbl (%eax),%eax
+c0100c91:	0f be c0             	movsbl %al,%eax
+c0100c94:	83 ec 08             	sub    $0x8,%esp
+c0100c97:	50                   	push   %eax
+c0100c98:	68 ec ce 10 c0       	push   $0xc010ceec
+c0100c9d:	e8 87 b5 00 00       	call   c010c229 <strchr>
+c0100ca2:	83 c4 10             	add    $0x10,%esp
+c0100ca5:	85 c0                	test   %eax,%eax
+c0100ca7:	74 d0                	je     c0100c79 <parse+0x81>
+            buf ++;
+        }
+    }
+c0100ca9:	e9 57 ff ff ff       	jmp    c0100c05 <parse+0xd>
+        // find global whitespace
+        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
+            *buf ++ = '\0';
+        }
+        if (*buf == '\0') {
+            break;
+c0100cae:	90                   	nop
+        argv[argc ++] = buf;
+        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
+            buf ++;
+        }
+    }
+    return argc;
+c0100caf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0100cb2:	c9                   	leave  
+c0100cb3:	c3                   	ret    
+
+c0100cb4 <runcmd>:
+/* *
+ * runcmd - parse the input string, split it into separated arguments
+ * and then lookup and invoke some related commands/
+ * */
+static int
+runcmd(char *buf, struct trapframe *tf) {
+c0100cb4:	55                   	push   %ebp
+c0100cb5:	89 e5                	mov    %esp,%ebp
+c0100cb7:	83 ec 58             	sub    $0x58,%esp
+    char *argv[MAXARGS];
+    int argc = parse(buf, argv);
+c0100cba:	83 ec 08             	sub    $0x8,%esp
+c0100cbd:	8d 45 b0             	lea    -0x50(%ebp),%eax
+c0100cc0:	50                   	push   %eax
+c0100cc1:	ff 75 08             	pushl  0x8(%ebp)
+c0100cc4:	e8 2f ff ff ff       	call   c0100bf8 <parse>
+c0100cc9:	83 c4 10             	add    $0x10,%esp
+c0100ccc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if (argc == 0) {
+c0100ccf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0100cd3:	75 0a                	jne    c0100cdf <runcmd+0x2b>
+        return 0;
+c0100cd5:	b8 00 00 00 00       	mov    $0x0,%eax
+c0100cda:	e9 83 00 00 00       	jmp    c0100d62 <runcmd+0xae>
+    }
+    int i;
+    for (i = 0; i < NCOMMANDS; i ++) {
+c0100cdf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0100ce6:	eb 59                	jmp    c0100d41 <runcmd+0x8d>
+        if (strcmp(commands[i].name, argv[0]) == 0) {
+c0100ce8:	8b 4d b0             	mov    -0x50(%ebp),%ecx
+c0100ceb:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0100cee:	89 d0                	mov    %edx,%eax
+c0100cf0:	01 c0                	add    %eax,%eax
+c0100cf2:	01 d0                	add    %edx,%eax
+c0100cf4:	c1 e0 02             	shl    $0x2,%eax
+c0100cf7:	05 20 10 13 c0       	add    $0xc0131020,%eax
+c0100cfc:	8b 00                	mov    (%eax),%eax
+c0100cfe:	83 ec 08             	sub    $0x8,%esp
+c0100d01:	51                   	push   %ecx
+c0100d02:	50                   	push   %eax
+c0100d03:	e8 81 b4 00 00       	call   c010c189 <strcmp>
+c0100d08:	83 c4 10             	add    $0x10,%esp
+c0100d0b:	85 c0                	test   %eax,%eax
+c0100d0d:	75 2e                	jne    c0100d3d <runcmd+0x89>
+            return commands[i].func(argc - 1, argv + 1, tf);
+c0100d0f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0100d12:	89 d0                	mov    %edx,%eax
+c0100d14:	01 c0                	add    %eax,%eax
+c0100d16:	01 d0                	add    %edx,%eax
+c0100d18:	c1 e0 02             	shl    $0x2,%eax
+c0100d1b:	05 28 10 13 c0       	add    $0xc0131028,%eax
+c0100d20:	8b 10                	mov    (%eax),%edx
+c0100d22:	8d 45 b0             	lea    -0x50(%ebp),%eax
+c0100d25:	83 c0 04             	add    $0x4,%eax
+c0100d28:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+c0100d2b:	83 e9 01             	sub    $0x1,%ecx
+c0100d2e:	83 ec 04             	sub    $0x4,%esp
+c0100d31:	ff 75 0c             	pushl  0xc(%ebp)
+c0100d34:	50                   	push   %eax
+c0100d35:	51                   	push   %ecx
+c0100d36:	ff d2                	call   *%edx
+c0100d38:	83 c4 10             	add    $0x10,%esp
+c0100d3b:	eb 25                	jmp    c0100d62 <runcmd+0xae>
+    int argc = parse(buf, argv);
+    if (argc == 0) {
+        return 0;
+    }
+    int i;
+    for (i = 0; i < NCOMMANDS; i ++) {
+c0100d3d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0100d41:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100d44:	83 f8 02             	cmp    $0x2,%eax
+c0100d47:	76 9f                	jbe    c0100ce8 <runcmd+0x34>
+        if (strcmp(commands[i].name, argv[0]) == 0) {
+            return commands[i].func(argc - 1, argv + 1, tf);
+        }
+    }
+    cprintf("Unknown command '%s'\n", argv[0]);
+c0100d49:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c0100d4c:	83 ec 08             	sub    $0x8,%esp
+c0100d4f:	50                   	push   %eax
+c0100d50:	68 0f cf 10 c0       	push   $0xc010cf0f
+c0100d55:	e8 34 f5 ff ff       	call   c010028e <cprintf>
+c0100d5a:	83 c4 10             	add    $0x10,%esp
+    return 0;
+c0100d5d:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0100d62:	c9                   	leave  
+c0100d63:	c3                   	ret    
+
+c0100d64 <kmonitor>:
+
+/***** Implementations of basic kernel monitor commands *****/
+
+void
+kmonitor(struct trapframe *tf) {
+c0100d64:	55                   	push   %ebp
+c0100d65:	89 e5                	mov    %esp,%ebp
+c0100d67:	83 ec 18             	sub    $0x18,%esp
+    cprintf("Welcome to the kernel debug monitor!!\n");
+c0100d6a:	83 ec 0c             	sub    $0xc,%esp
+c0100d6d:	68 28 cf 10 c0       	push   $0xc010cf28
+c0100d72:	e8 17 f5 ff ff       	call   c010028e <cprintf>
+c0100d77:	83 c4 10             	add    $0x10,%esp
+    cprintf("Type 'help' for a list of commands.\n");
+c0100d7a:	83 ec 0c             	sub    $0xc,%esp
+c0100d7d:	68 50 cf 10 c0       	push   $0xc010cf50
+c0100d82:	e8 07 f5 ff ff       	call   c010028e <cprintf>
+c0100d87:	83 c4 10             	add    $0x10,%esp
+
+    if (tf != NULL) {
+c0100d8a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0100d8e:	74 0e                	je     c0100d9e <kmonitor+0x3a>
+        print_trapframe(tf);
+c0100d90:	83 ec 0c             	sub    $0xc,%esp
+c0100d93:	ff 75 08             	pushl  0x8(%ebp)
+c0100d96:	e8 6b 16 00 00       	call   c0102406 <print_trapframe>
+c0100d9b:	83 c4 10             	add    $0x10,%esp
+    }
+
+    char *buf;
+    while (1) {
+        if ((buf = readline("K> ")) != NULL) {
+c0100d9e:	83 ec 0c             	sub    $0xc,%esp
+c0100da1:	68 75 cf 10 c0       	push   $0xc010cf75
+c0100da6:	e8 87 f5 ff ff       	call   c0100332 <readline>
+c0100dab:	83 c4 10             	add    $0x10,%esp
+c0100dae:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0100db1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0100db5:	74 e7                	je     c0100d9e <kmonitor+0x3a>
+            if (runcmd(buf, tf) < 0) {
+c0100db7:	83 ec 08             	sub    $0x8,%esp
+c0100dba:	ff 75 08             	pushl  0x8(%ebp)
+c0100dbd:	ff 75 f4             	pushl  -0xc(%ebp)
+c0100dc0:	e8 ef fe ff ff       	call   c0100cb4 <runcmd>
+c0100dc5:	83 c4 10             	add    $0x10,%esp
+c0100dc8:	85 c0                	test   %eax,%eax
+c0100dca:	78 02                	js     c0100dce <kmonitor+0x6a>
+                break;
+            }
+        }
+    }
+c0100dcc:	eb d0                	jmp    c0100d9e <kmonitor+0x3a>
+
+    char *buf;
+    while (1) {
+        if ((buf = readline("K> ")) != NULL) {
+            if (runcmd(buf, tf) < 0) {
+                break;
+c0100dce:	90                   	nop
+            }
+        }
+    }
+}
+c0100dcf:	90                   	nop
+c0100dd0:	c9                   	leave  
+c0100dd1:	c3                   	ret    
+
+c0100dd2 <mon_help>:
+
+/* mon_help - print the information about mon_* functions */
+int
+mon_help(int argc, char **argv, struct trapframe *tf) {
+c0100dd2:	55                   	push   %ebp
+c0100dd3:	89 e5                	mov    %esp,%ebp
+c0100dd5:	83 ec 18             	sub    $0x18,%esp
+    int i;
+    for (i = 0; i < NCOMMANDS; i ++) {
+c0100dd8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0100ddf:	eb 3c                	jmp    c0100e1d <mon_help+0x4b>
+        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
+c0100de1:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0100de4:	89 d0                	mov    %edx,%eax
+c0100de6:	01 c0                	add    %eax,%eax
+c0100de8:	01 d0                	add    %edx,%eax
+c0100dea:	c1 e0 02             	shl    $0x2,%eax
+c0100ded:	05 24 10 13 c0       	add    $0xc0131024,%eax
+c0100df2:	8b 08                	mov    (%eax),%ecx
+c0100df4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0100df7:	89 d0                	mov    %edx,%eax
+c0100df9:	01 c0                	add    %eax,%eax
+c0100dfb:	01 d0                	add    %edx,%eax
+c0100dfd:	c1 e0 02             	shl    $0x2,%eax
+c0100e00:	05 20 10 13 c0       	add    $0xc0131020,%eax
+c0100e05:	8b 00                	mov    (%eax),%eax
+c0100e07:	83 ec 04             	sub    $0x4,%esp
+c0100e0a:	51                   	push   %ecx
+c0100e0b:	50                   	push   %eax
+c0100e0c:	68 79 cf 10 c0       	push   $0xc010cf79
+c0100e11:	e8 78 f4 ff ff       	call   c010028e <cprintf>
+c0100e16:	83 c4 10             	add    $0x10,%esp
+
+/* mon_help - print the information about mon_* functions */
+int
+mon_help(int argc, char **argv, struct trapframe *tf) {
+    int i;
+    for (i = 0; i < NCOMMANDS; i ++) {
+c0100e19:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0100e1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0100e20:	83 f8 02             	cmp    $0x2,%eax
+c0100e23:	76 bc                	jbe    c0100de1 <mon_help+0xf>
+        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
+    }
+    return 0;
+c0100e25:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0100e2a:	c9                   	leave  
+c0100e2b:	c3                   	ret    
+
+c0100e2c <mon_kerninfo>:
+/* *
+ * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
+ * print the memory occupancy in kernel.
+ * */
+int
+mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
+c0100e2c:	55                   	push   %ebp
+c0100e2d:	89 e5                	mov    %esp,%ebp
+c0100e2f:	83 ec 08             	sub    $0x8,%esp
+    print_kerninfo();
+c0100e32:	e8 b8 fb ff ff       	call   c01009ef <print_kerninfo>
+    return 0;
+c0100e37:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0100e3c:	c9                   	leave  
+c0100e3d:	c3                   	ret    
+
+c0100e3e <mon_backtrace>:
+/* *
+ * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
+ * print a backtrace of the stack.
+ * */
+int
+mon_backtrace(int argc, char **argv, struct trapframe *tf) {
+c0100e3e:	55                   	push   %ebp
+c0100e3f:	89 e5                	mov    %esp,%ebp
+c0100e41:	83 ec 08             	sub    $0x8,%esp
+    print_stackframe();
+c0100e44:	e8 f0 fc ff ff       	call   c0100b39 <print_stackframe>
+    return 0;
+c0100e49:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0100e4e:	c9                   	leave  
+c0100e4f:	c3                   	ret    
+
+c0100e50 <ide_wait_ready>:
+    unsigned int size;          // Size in Sectors
+    unsigned char model[41];    // Model in String
+} ide_devices[MAX_IDE];
+
+static int
+ide_wait_ready(unsigned short iobase, bool check_error) {
+c0100e50:	55                   	push   %ebp
+c0100e51:	89 e5                	mov    %esp,%ebp
+c0100e53:	83 ec 14             	sub    $0x14,%esp
+c0100e56:	8b 45 08             	mov    0x8(%ebp),%eax
+c0100e59:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
+    int r;
+    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
+c0100e5d:	90                   	nop
+c0100e5e:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
+c0100e62:	83 c0 07             	add    $0x7,%eax
+c0100e65:	0f b7 c0             	movzwl %ax,%eax
+c0100e68:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0100e6c:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
+c0100e70:	89 c2                	mov    %eax,%edx
+c0100e72:	ec                   	in     (%dx),%al
+c0100e73:	88 45 f9             	mov    %al,-0x7(%ebp)
+    return data;
+c0100e76:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
+c0100e7a:	0f b6 c0             	movzbl %al,%eax
+c0100e7d:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c0100e80:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0100e83:	25 80 00 00 00       	and    $0x80,%eax
+c0100e88:	85 c0                	test   %eax,%eax
+c0100e8a:	75 d2                	jne    c0100e5e <ide_wait_ready+0xe>
+        /* nothing */;
+    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
+c0100e8c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c0100e90:	74 11                	je     c0100ea3 <ide_wait_ready+0x53>
+c0100e92:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0100e95:	83 e0 21             	and    $0x21,%eax
+c0100e98:	85 c0                	test   %eax,%eax
+c0100e9a:	74 07                	je     c0100ea3 <ide_wait_ready+0x53>
+        return -1;
+c0100e9c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c0100ea1:	eb 05                	jmp    c0100ea8 <ide_wait_ready+0x58>
+    }
+    return 0;
+c0100ea3:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0100ea8:	c9                   	leave  
+c0100ea9:	c3                   	ret    
+
+c0100eaa <ide_init>:
+
+void
+ide_init(void) {
+c0100eaa:	55                   	push   %ebp
+c0100eab:	89 e5                	mov    %esp,%ebp
+c0100ead:	57                   	push   %edi
+c0100eae:	53                   	push   %ebx
+c0100eaf:	81 ec 40 02 00 00    	sub    $0x240,%esp
+    static_assert((SECTSIZE % 4) == 0);
+    unsigned short ideno, iobase;
+    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
+c0100eb5:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
+c0100ebb:	e9 c1 02 00 00       	jmp    c0101181 <ide_init+0x2d7>
+        /* assume that no device here */
+        ide_devices[ideno].valid = 0;
+c0100ec0:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0100ec4:	c1 e0 03             	shl    $0x3,%eax
+c0100ec7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0100ece:	29 c2                	sub    %eax,%edx
+c0100ed0:	89 d0                	mov    %edx,%eax
+c0100ed2:	05 20 27 1c c0       	add    $0xc01c2720,%eax
+c0100ed7:	c6 00 00             	movb   $0x0,(%eax)
+
+        iobase = IO_BASE(ideno);
+c0100eda:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0100ede:	66 d1 e8             	shr    %ax
+c0100ee1:	0f b7 c0             	movzwl %ax,%eax
+c0100ee4:	0f b7 04 85 84 cf 10 	movzwl -0x3fef307c(,%eax,4),%eax
+c0100eeb:	c0 
+c0100eec:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
+
+        /* wait device ready */
+        ide_wait_ready(iobase, 0);
+c0100ef0:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c0100ef4:	6a 00                	push   $0x0
+c0100ef6:	50                   	push   %eax
+c0100ef7:	e8 54 ff ff ff       	call   c0100e50 <ide_wait_ready>
+c0100efc:	83 c4 08             	add    $0x8,%esp
+
+        /* step1: select drive */
+        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
+c0100eff:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0100f03:	83 e0 01             	and    $0x1,%eax
+c0100f06:	c1 e0 04             	shl    $0x4,%eax
+c0100f09:	83 c8 e0             	or     $0xffffffe0,%eax
+c0100f0c:	0f b6 c0             	movzbl %al,%eax
+c0100f0f:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c0100f13:	83 c2 06             	add    $0x6,%edx
+c0100f16:	0f b7 d2             	movzwl %dx,%edx
+c0100f19:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
+c0100f1d:	88 45 c7             	mov    %al,-0x39(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0100f20:	0f b6 45 c7          	movzbl -0x39(%ebp),%eax
+c0100f24:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
+c0100f28:	ee                   	out    %al,(%dx)
+        ide_wait_ready(iobase, 0);
+c0100f29:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c0100f2d:	6a 00                	push   $0x0
+c0100f2f:	50                   	push   %eax
+c0100f30:	e8 1b ff ff ff       	call   c0100e50 <ide_wait_ready>
+c0100f35:	83 c4 08             	add    $0x8,%esp
+
+        /* step2: send ATA identify command */
+        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
+c0100f38:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c0100f3c:	83 c0 07             	add    $0x7,%eax
+c0100f3f:	0f b7 c0             	movzwl %ax,%eax
+c0100f42:	66 89 45 e0          	mov    %ax,-0x20(%ebp)
+c0100f46:	c6 45 c8 ec          	movb   $0xec,-0x38(%ebp)
+c0100f4a:	0f b6 45 c8          	movzbl -0x38(%ebp),%eax
+c0100f4e:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
+c0100f52:	ee                   	out    %al,(%dx)
+        ide_wait_ready(iobase, 0);
+c0100f53:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c0100f57:	6a 00                	push   $0x0
+c0100f59:	50                   	push   %eax
+c0100f5a:	e8 f1 fe ff ff       	call   c0100e50 <ide_wait_ready>
+c0100f5f:	83 c4 08             	add    $0x8,%esp
+
+        /* step3: polling */
+        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
+c0100f62:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c0100f66:	83 c0 07             	add    $0x7,%eax
+c0100f69:	0f b7 c0             	movzwl %ax,%eax
+c0100f6c:	66 89 45 ca          	mov    %ax,-0x36(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0100f70:	0f b7 45 ca          	movzwl -0x36(%ebp),%eax
+c0100f74:	89 c2                	mov    %eax,%edx
+c0100f76:	ec                   	in     (%dx),%al
+c0100f77:	88 45 c9             	mov    %al,-0x37(%ebp)
+    return data;
+c0100f7a:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
+c0100f7e:	84 c0                	test   %al,%al
+c0100f80:	0f 84 ef 01 00 00    	je     c0101175 <ide_init+0x2cb>
+c0100f86:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c0100f8a:	6a 01                	push   $0x1
+c0100f8c:	50                   	push   %eax
+c0100f8d:	e8 be fe ff ff       	call   c0100e50 <ide_wait_ready>
+c0100f92:	83 c4 08             	add    $0x8,%esp
+c0100f95:	85 c0                	test   %eax,%eax
+c0100f97:	0f 85 d8 01 00 00    	jne    c0101175 <ide_init+0x2cb>
+            continue ;
+        }
+
+        /* device is ok */
+        ide_devices[ideno].valid = 1;
+c0100f9d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0100fa1:	c1 e0 03             	shl    $0x3,%eax
+c0100fa4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0100fab:	29 c2                	sub    %eax,%edx
+c0100fad:	89 d0                	mov    %edx,%eax
+c0100faf:	05 20 27 1c c0       	add    $0xc01c2720,%eax
+c0100fb4:	c6 00 01             	movb   $0x1,(%eax)
+
+        /* read identification space of the device */
+        unsigned int buffer[128];
+        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
+c0100fb7:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
+c0100fbb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0100fbe:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
+c0100fc4:	89 45 c0             	mov    %eax,-0x40(%ebp)
+c0100fc7:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
+}
+
+static inline void
+insl(uint32_t port, void *addr, int cnt) {
+    asm volatile (
+c0100fce:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0100fd1:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+c0100fd4:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c0100fd7:	89 cb                	mov    %ecx,%ebx
+c0100fd9:	89 df                	mov    %ebx,%edi
+c0100fdb:	89 c1                	mov    %eax,%ecx
+c0100fdd:	fc                   	cld    
+c0100fde:	f2 6d                	repnz insl (%dx),%es:(%edi)
+c0100fe0:	89 c8                	mov    %ecx,%eax
+c0100fe2:	89 fb                	mov    %edi,%ebx
+c0100fe4:	89 5d c0             	mov    %ebx,-0x40(%ebp)
+c0100fe7:	89 45 bc             	mov    %eax,-0x44(%ebp)
+
+        unsigned char *ident = (unsigned char *)buffer;
+c0100fea:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
+c0100ff0:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        unsigned int sectors;
+        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
+c0100ff3:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0100ff6:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
+c0100ffc:	89 45 d8             	mov    %eax,-0x28(%ebp)
+        /* device use 48-bits or 28-bits addressing */
+        if (cmdsets & (1 << 26)) {
+c0100fff:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0101002:	25 00 00 00 04       	and    $0x4000000,%eax
+c0101007:	85 c0                	test   %eax,%eax
+c0101009:	74 0e                	je     c0101019 <ide_init+0x16f>
+            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
+c010100b:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010100e:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
+c0101014:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0101017:	eb 09                	jmp    c0101022 <ide_init+0x178>
+        }
+        else {
+            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
+c0101019:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010101c:	8b 40 78             	mov    0x78(%eax),%eax
+c010101f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        }
+        ide_devices[ideno].sets = cmdsets;
+c0101022:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0101026:	c1 e0 03             	shl    $0x3,%eax
+c0101029:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0101030:	29 c2                	sub    %eax,%edx
+c0101032:	89 d0                	mov    %edx,%eax
+c0101034:	8d 90 24 27 1c c0    	lea    -0x3fe3d8dc(%eax),%edx
+c010103a:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010103d:	89 02                	mov    %eax,(%edx)
+        ide_devices[ideno].size = sectors;
+c010103f:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0101043:	c1 e0 03             	shl    $0x3,%eax
+c0101046:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c010104d:	29 c2                	sub    %eax,%edx
+c010104f:	89 d0                	mov    %edx,%eax
+c0101051:	8d 90 28 27 1c c0    	lea    -0x3fe3d8d8(%eax),%edx
+c0101057:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010105a:	89 02                	mov    %eax,(%edx)
+
+        /* check if supports LBA */
+        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
+c010105c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010105f:	83 c0 62             	add    $0x62,%eax
+c0101062:	0f b7 00             	movzwl (%eax),%eax
+c0101065:	0f b7 c0             	movzwl %ax,%eax
+c0101068:	25 00 02 00 00       	and    $0x200,%eax
+c010106d:	85 c0                	test   %eax,%eax
+c010106f:	75 16                	jne    c0101087 <ide_init+0x1dd>
+c0101071:	68 8c cf 10 c0       	push   $0xc010cf8c
+c0101076:	68 cf cf 10 c0       	push   $0xc010cfcf
+c010107b:	6a 7d                	push   $0x7d
+c010107d:	68 e4 cf 10 c0       	push   $0xc010cfe4
+c0101082:	e8 6d f3 ff ff       	call   c01003f4 <__panic>
+
+        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
+c0101087:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c010108b:	89 c2                	mov    %eax,%edx
+c010108d:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
+c0101094:	89 c2                	mov    %eax,%edx
+c0101096:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
+c010109d:	29 d0                	sub    %edx,%eax
+c010109f:	05 20 27 1c c0       	add    $0xc01c2720,%eax
+c01010a4:	83 c0 0c             	add    $0xc,%eax
+c01010a7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+c01010aa:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01010ad:	83 c0 36             	add    $0x36,%eax
+c01010b0:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        unsigned int i, length = 40;
+c01010b3:	c7 45 cc 28 00 00 00 	movl   $0x28,-0x34(%ebp)
+        for (i = 0; i < length; i += 2) {
+c01010ba:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c01010c1:	eb 34                	jmp    c01010f7 <ide_init+0x24d>
+            model[i] = data[i + 1], model[i + 1] = data[i];
+c01010c3:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c01010c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01010c9:	01 c2                	add    %eax,%edx
+c01010cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01010ce:	8d 48 01             	lea    0x1(%eax),%ecx
+c01010d1:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c01010d4:	01 c8                	add    %ecx,%eax
+c01010d6:	0f b6 00             	movzbl (%eax),%eax
+c01010d9:	88 02                	mov    %al,(%edx)
+c01010db:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01010de:	8d 50 01             	lea    0x1(%eax),%edx
+c01010e1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c01010e4:	01 c2                	add    %eax,%edx
+c01010e6:	8b 4d d0             	mov    -0x30(%ebp),%ecx
+c01010e9:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01010ec:	01 c8                	add    %ecx,%eax
+c01010ee:	0f b6 00             	movzbl (%eax),%eax
+c01010f1:	88 02                	mov    %al,(%edx)
+        /* check if supports LBA */
+        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
+
+        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
+        unsigned int i, length = 40;
+        for (i = 0; i < length; i += 2) {
+c01010f3:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
+c01010f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01010fa:	3b 45 cc             	cmp    -0x34(%ebp),%eax
+c01010fd:	72 c4                	jb     c01010c3 <ide_init+0x219>
+            model[i] = data[i + 1], model[i + 1] = data[i];
+        }
+        do {
+            model[i] = '\0';
+c01010ff:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0101102:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0101105:	01 d0                	add    %edx,%eax
+c0101107:	c6 00 00             	movb   $0x0,(%eax)
+        } while (i -- > 0 && model[i] == ' ');
+c010110a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010110d:	8d 50 ff             	lea    -0x1(%eax),%edx
+c0101110:	89 55 ec             	mov    %edx,-0x14(%ebp)
+c0101113:	85 c0                	test   %eax,%eax
+c0101115:	74 0f                	je     c0101126 <ide_init+0x27c>
+c0101117:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c010111a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010111d:	01 d0                	add    %edx,%eax
+c010111f:	0f b6 00             	movzbl (%eax),%eax
+c0101122:	3c 20                	cmp    $0x20,%al
+c0101124:	74 d9                	je     c01010ff <ide_init+0x255>
+
+        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
+c0101126:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c010112a:	89 c2                	mov    %eax,%edx
+c010112c:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
+c0101133:	89 c2                	mov    %eax,%edx
+c0101135:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
+c010113c:	29 d0                	sub    %edx,%eax
+c010113e:	05 20 27 1c c0       	add    $0xc01c2720,%eax
+c0101143:	8d 48 0c             	lea    0xc(%eax),%ecx
+c0101146:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c010114a:	c1 e0 03             	shl    $0x3,%eax
+c010114d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0101154:	29 c2                	sub    %eax,%edx
+c0101156:	89 d0                	mov    %edx,%eax
+c0101158:	05 28 27 1c c0       	add    $0xc01c2728,%eax
+c010115d:	8b 10                	mov    (%eax),%edx
+c010115f:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c0101163:	51                   	push   %ecx
+c0101164:	52                   	push   %edx
+c0101165:	50                   	push   %eax
+c0101166:	68 f6 cf 10 c0       	push   $0xc010cff6
+c010116b:	e8 1e f1 ff ff       	call   c010028e <cprintf>
+c0101170:	83 c4 10             	add    $0x10,%esp
+c0101173:	eb 01                	jmp    c0101176 <ide_init+0x2cc>
+        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
+        ide_wait_ready(iobase, 0);
+
+        /* step3: polling */
+        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
+            continue ;
+c0101175:	90                   	nop
+
+void
+ide_init(void) {
+    static_assert((SECTSIZE % 4) == 0);
+    unsigned short ideno, iobase;
+    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
+c0101176:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
+c010117a:	83 c0 01             	add    $0x1,%eax
+c010117d:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
+c0101181:	66 83 7d f6 03       	cmpw   $0x3,-0xa(%ebp)
+c0101186:	0f 86 34 fd ff ff    	jbe    c0100ec0 <ide_init+0x16>
+
+        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
+    }
+
+    // enable ide interrupt
+    pic_enable(IRQ_IDE1);
+c010118c:	83 ec 0c             	sub    $0xc,%esp
+c010118f:	6a 0e                	push   $0xe
+c0101191:	e8 8a 0e 00 00       	call   c0102020 <pic_enable>
+c0101196:	83 c4 10             	add    $0x10,%esp
+    pic_enable(IRQ_IDE2);
+c0101199:	83 ec 0c             	sub    $0xc,%esp
+c010119c:	6a 0f                	push   $0xf
+c010119e:	e8 7d 0e 00 00       	call   c0102020 <pic_enable>
+c01011a3:	83 c4 10             	add    $0x10,%esp
+}
+c01011a6:	90                   	nop
+c01011a7:	8d 65 f8             	lea    -0x8(%ebp),%esp
+c01011aa:	5b                   	pop    %ebx
+c01011ab:	5f                   	pop    %edi
+c01011ac:	5d                   	pop    %ebp
+c01011ad:	c3                   	ret    
+
+c01011ae <ide_device_valid>:
+
+bool
+ide_device_valid(unsigned short ideno) {
+c01011ae:	55                   	push   %ebp
+c01011af:	89 e5                	mov    %esp,%ebp
+c01011b1:	83 ec 04             	sub    $0x4,%esp
+c01011b4:	8b 45 08             	mov    0x8(%ebp),%eax
+c01011b7:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
+    return VALID_IDE(ideno);
+c01011bb:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
+c01011c0:	77 25                	ja     c01011e7 <ide_device_valid+0x39>
+c01011c2:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
+c01011c6:	c1 e0 03             	shl    $0x3,%eax
+c01011c9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c01011d0:	29 c2                	sub    %eax,%edx
+c01011d2:	89 d0                	mov    %edx,%eax
+c01011d4:	05 20 27 1c c0       	add    $0xc01c2720,%eax
+c01011d9:	0f b6 00             	movzbl (%eax),%eax
+c01011dc:	84 c0                	test   %al,%al
+c01011de:	74 07                	je     c01011e7 <ide_device_valid+0x39>
+c01011e0:	b8 01 00 00 00       	mov    $0x1,%eax
+c01011e5:	eb 05                	jmp    c01011ec <ide_device_valid+0x3e>
+c01011e7:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01011ec:	c9                   	leave  
+c01011ed:	c3                   	ret    
+
+c01011ee <ide_device_size>:
+
+size_t
+ide_device_size(unsigned short ideno) {
+c01011ee:	55                   	push   %ebp
+c01011ef:	89 e5                	mov    %esp,%ebp
+c01011f1:	83 ec 04             	sub    $0x4,%esp
+c01011f4:	8b 45 08             	mov    0x8(%ebp),%eax
+c01011f7:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
+    if (ide_device_valid(ideno)) {
+c01011fb:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
+c01011ff:	50                   	push   %eax
+c0101200:	e8 a9 ff ff ff       	call   c01011ae <ide_device_valid>
+c0101205:	83 c4 04             	add    $0x4,%esp
+c0101208:	85 c0                	test   %eax,%eax
+c010120a:	74 1b                	je     c0101227 <ide_device_size+0x39>
+        return ide_devices[ideno].size;
+c010120c:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
+c0101210:	c1 e0 03             	shl    $0x3,%eax
+c0101213:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c010121a:	29 c2                	sub    %eax,%edx
+c010121c:	89 d0                	mov    %edx,%eax
+c010121e:	05 28 27 1c c0       	add    $0xc01c2728,%eax
+c0101223:	8b 00                	mov    (%eax),%eax
+c0101225:	eb 05                	jmp    c010122c <ide_device_size+0x3e>
+    }
+    return 0;
+c0101227:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010122c:	c9                   	leave  
+c010122d:	c3                   	ret    
+
+c010122e <ide_read_secs>:
+
+int
+ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
+c010122e:	55                   	push   %ebp
+c010122f:	89 e5                	mov    %esp,%ebp
+c0101231:	57                   	push   %edi
+c0101232:	53                   	push   %ebx
+c0101233:	83 ec 40             	sub    $0x40,%esp
+c0101236:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101239:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
+    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
+c010123d:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
+c0101244:	77 25                	ja     c010126b <ide_read_secs+0x3d>
+c0101246:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
+c010124b:	77 1e                	ja     c010126b <ide_read_secs+0x3d>
+c010124d:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c0101251:	c1 e0 03             	shl    $0x3,%eax
+c0101254:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c010125b:	29 c2                	sub    %eax,%edx
+c010125d:	89 d0                	mov    %edx,%eax
+c010125f:	05 20 27 1c c0       	add    $0xc01c2720,%eax
+c0101264:	0f b6 00             	movzbl (%eax),%eax
+c0101267:	84 c0                	test   %al,%al
+c0101269:	75 19                	jne    c0101284 <ide_read_secs+0x56>
+c010126b:	68 14 d0 10 c0       	push   $0xc010d014
+c0101270:	68 cf cf 10 c0       	push   $0xc010cfcf
+c0101275:	68 9f 00 00 00       	push   $0x9f
+c010127a:	68 e4 cf 10 c0       	push   $0xc010cfe4
+c010127f:	e8 70 f1 ff ff       	call   c01003f4 <__panic>
+    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
+c0101284:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
+c010128b:	77 0f                	ja     c010129c <ide_read_secs+0x6e>
+c010128d:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0101290:	8b 45 14             	mov    0x14(%ebp),%eax
+c0101293:	01 d0                	add    %edx,%eax
+c0101295:	3d 00 00 00 10       	cmp    $0x10000000,%eax
+c010129a:	76 19                	jbe    c01012b5 <ide_read_secs+0x87>
+c010129c:	68 3c d0 10 c0       	push   $0xc010d03c
+c01012a1:	68 cf cf 10 c0       	push   $0xc010cfcf
+c01012a6:	68 a0 00 00 00       	push   $0xa0
+c01012ab:	68 e4 cf 10 c0       	push   $0xc010cfe4
+c01012b0:	e8 3f f1 ff ff       	call   c01003f4 <__panic>
+    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
+c01012b5:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c01012b9:	66 d1 e8             	shr    %ax
+c01012bc:	0f b7 c0             	movzwl %ax,%eax
+c01012bf:	0f b7 04 85 84 cf 10 	movzwl -0x3fef307c(,%eax,4),%eax
+c01012c6:	c0 
+c01012c7:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
+c01012cb:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c01012cf:	66 d1 e8             	shr    %ax
+c01012d2:	0f b7 c0             	movzwl %ax,%eax
+c01012d5:	0f b7 04 85 86 cf 10 	movzwl -0x3fef307a(,%eax,4),%eax
+c01012dc:	c0 
+c01012dd:	66 89 45 f0          	mov    %ax,-0x10(%ebp)
+
+    ide_wait_ready(iobase, 0);
+c01012e1:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c01012e5:	83 ec 08             	sub    $0x8,%esp
+c01012e8:	6a 00                	push   $0x0
+c01012ea:	50                   	push   %eax
+c01012eb:	e8 60 fb ff ff       	call   c0100e50 <ide_wait_ready>
+c01012f0:	83 c4 10             	add    $0x10,%esp
+
+    // generate interrupt
+    outb(ioctrl + ISA_CTRL, 0);
+c01012f3:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
+c01012f7:	83 c0 02             	add    $0x2,%eax
+c01012fa:	0f b7 c0             	movzwl %ax,%eax
+c01012fd:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
+c0101301:	c6 45 d7 00          	movb   $0x0,-0x29(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0101305:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
+c0101309:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c010130d:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SECCNT, nsecs);
+c010130e:	8b 45 14             	mov    0x14(%ebp),%eax
+c0101311:	0f b6 c0             	movzbl %al,%eax
+c0101314:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101318:	83 c2 02             	add    $0x2,%edx
+c010131b:	0f b7 d2             	movzwl %dx,%edx
+c010131e:	66 89 55 e8          	mov    %dx,-0x18(%ebp)
+c0101322:	88 45 d8             	mov    %al,-0x28(%ebp)
+c0101325:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
+c0101329:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
+c010132d:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SECTOR, secno & 0xFF);
+c010132e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0101331:	0f b6 c0             	movzbl %al,%eax
+c0101334:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101338:	83 c2 03             	add    $0x3,%edx
+c010133b:	0f b7 d2             	movzwl %dx,%edx
+c010133e:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
+c0101342:	88 45 d9             	mov    %al,-0x27(%ebp)
+c0101345:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
+c0101349:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
+c010134d:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
+c010134e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0101351:	c1 e8 08             	shr    $0x8,%eax
+c0101354:	0f b6 c0             	movzbl %al,%eax
+c0101357:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c010135b:	83 c2 04             	add    $0x4,%edx
+c010135e:	0f b7 d2             	movzwl %dx,%edx
+c0101361:	66 89 55 e4          	mov    %dx,-0x1c(%ebp)
+c0101365:	88 45 da             	mov    %al,-0x26(%ebp)
+c0101368:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
+c010136c:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
+c0101370:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
+c0101371:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0101374:	c1 e8 10             	shr    $0x10,%eax
+c0101377:	0f b6 c0             	movzbl %al,%eax
+c010137a:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c010137e:	83 c2 05             	add    $0x5,%edx
+c0101381:	0f b7 d2             	movzwl %dx,%edx
+c0101384:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
+c0101388:	88 45 db             	mov    %al,-0x25(%ebp)
+c010138b:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
+c010138f:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
+c0101393:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
+c0101394:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c0101398:	83 e0 01             	and    $0x1,%eax
+c010139b:	c1 e0 04             	shl    $0x4,%eax
+c010139e:	89 c2                	mov    %eax,%edx
+c01013a0:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01013a3:	c1 e8 18             	shr    $0x18,%eax
+c01013a6:	83 e0 0f             	and    $0xf,%eax
+c01013a9:	09 d0                	or     %edx,%eax
+c01013ab:	83 c8 e0             	or     $0xffffffe0,%eax
+c01013ae:	0f b6 c0             	movzbl %al,%eax
+c01013b1:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c01013b5:	83 c2 06             	add    $0x6,%edx
+c01013b8:	0f b7 d2             	movzwl %dx,%edx
+c01013bb:	66 89 55 e0          	mov    %dx,-0x20(%ebp)
+c01013bf:	88 45 dc             	mov    %al,-0x24(%ebp)
+c01013c2:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
+c01013c6:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
+c01013ca:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
+c01013cb:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c01013cf:	83 c0 07             	add    $0x7,%eax
+c01013d2:	0f b7 c0             	movzwl %ax,%eax
+c01013d5:	66 89 45 de          	mov    %ax,-0x22(%ebp)
+c01013d9:	c6 45 dd 20          	movb   $0x20,-0x23(%ebp)
+c01013dd:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
+c01013e1:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
+c01013e5:	ee                   	out    %al,(%dx)
+
+    int ret = 0;
+c01013e6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
+c01013ed:	eb 56                	jmp    c0101445 <ide_read_secs+0x217>
+        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
+c01013ef:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c01013f3:	83 ec 08             	sub    $0x8,%esp
+c01013f6:	6a 01                	push   $0x1
+c01013f8:	50                   	push   %eax
+c01013f9:	e8 52 fa ff ff       	call   c0100e50 <ide_wait_ready>
+c01013fe:	83 c4 10             	add    $0x10,%esp
+c0101401:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0101404:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0101408:	75 43                	jne    c010144d <ide_read_secs+0x21f>
+            goto out;
+        }
+        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
+c010140a:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c010140e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0101411:	8b 45 10             	mov    0x10(%ebp),%eax
+c0101414:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c0101417:	c7 45 cc 80 00 00 00 	movl   $0x80,-0x34(%ebp)
+    return data;
+}
+
+static inline void
+insl(uint32_t port, void *addr, int cnt) {
+    asm volatile (
+c010141e:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0101421:	8b 4d d0             	mov    -0x30(%ebp),%ecx
+c0101424:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0101427:	89 cb                	mov    %ecx,%ebx
+c0101429:	89 df                	mov    %ebx,%edi
+c010142b:	89 c1                	mov    %eax,%ecx
+c010142d:	fc                   	cld    
+c010142e:	f2 6d                	repnz insl (%dx),%es:(%edi)
+c0101430:	89 c8                	mov    %ecx,%eax
+c0101432:	89 fb                	mov    %edi,%ebx
+c0101434:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+c0101437:	89 45 cc             	mov    %eax,-0x34(%ebp)
+    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
+    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
+    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
+
+    int ret = 0;
+    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
+c010143a:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
+c010143e:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
+c0101445:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+c0101449:	75 a4                	jne    c01013ef <ide_read_secs+0x1c1>
+c010144b:	eb 01                	jmp    c010144e <ide_read_secs+0x220>
+        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
+            goto out;
+c010144d:	90                   	nop
+        }
+        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
+    }
+
+out:
+    return ret;
+c010144e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0101451:	8d 65 f8             	lea    -0x8(%ebp),%esp
+c0101454:	5b                   	pop    %ebx
+c0101455:	5f                   	pop    %edi
+c0101456:	5d                   	pop    %ebp
+c0101457:	c3                   	ret    
+
+c0101458 <ide_write_secs>:
+
+int
+ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
+c0101458:	55                   	push   %ebp
+c0101459:	89 e5                	mov    %esp,%ebp
+c010145b:	56                   	push   %esi
+c010145c:	53                   	push   %ebx
+c010145d:	83 ec 40             	sub    $0x40,%esp
+c0101460:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101463:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
+    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
+c0101467:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
+c010146e:	77 25                	ja     c0101495 <ide_write_secs+0x3d>
+c0101470:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
+c0101475:	77 1e                	ja     c0101495 <ide_write_secs+0x3d>
+c0101477:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c010147b:	c1 e0 03             	shl    $0x3,%eax
+c010147e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0101485:	29 c2                	sub    %eax,%edx
+c0101487:	89 d0                	mov    %edx,%eax
+c0101489:	05 20 27 1c c0       	add    $0xc01c2720,%eax
+c010148e:	0f b6 00             	movzbl (%eax),%eax
+c0101491:	84 c0                	test   %al,%al
+c0101493:	75 19                	jne    c01014ae <ide_write_secs+0x56>
+c0101495:	68 14 d0 10 c0       	push   $0xc010d014
+c010149a:	68 cf cf 10 c0       	push   $0xc010cfcf
+c010149f:	68 bc 00 00 00       	push   $0xbc
+c01014a4:	68 e4 cf 10 c0       	push   $0xc010cfe4
+c01014a9:	e8 46 ef ff ff       	call   c01003f4 <__panic>
+    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
+c01014ae:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
+c01014b5:	77 0f                	ja     c01014c6 <ide_write_secs+0x6e>
+c01014b7:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01014ba:	8b 45 14             	mov    0x14(%ebp),%eax
+c01014bd:	01 d0                	add    %edx,%eax
+c01014bf:	3d 00 00 00 10       	cmp    $0x10000000,%eax
+c01014c4:	76 19                	jbe    c01014df <ide_write_secs+0x87>
+c01014c6:	68 3c d0 10 c0       	push   $0xc010d03c
+c01014cb:	68 cf cf 10 c0       	push   $0xc010cfcf
+c01014d0:	68 bd 00 00 00       	push   $0xbd
+c01014d5:	68 e4 cf 10 c0       	push   $0xc010cfe4
+c01014da:	e8 15 ef ff ff       	call   c01003f4 <__panic>
+    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
+c01014df:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c01014e3:	66 d1 e8             	shr    %ax
+c01014e6:	0f b7 c0             	movzwl %ax,%eax
+c01014e9:	0f b7 04 85 84 cf 10 	movzwl -0x3fef307c(,%eax,4),%eax
+c01014f0:	c0 
+c01014f1:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
+c01014f5:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c01014f9:	66 d1 e8             	shr    %ax
+c01014fc:	0f b7 c0             	movzwl %ax,%eax
+c01014ff:	0f b7 04 85 86 cf 10 	movzwl -0x3fef307a(,%eax,4),%eax
+c0101506:	c0 
+c0101507:	66 89 45 f0          	mov    %ax,-0x10(%ebp)
+
+    ide_wait_ready(iobase, 0);
+c010150b:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c010150f:	83 ec 08             	sub    $0x8,%esp
+c0101512:	6a 00                	push   $0x0
+c0101514:	50                   	push   %eax
+c0101515:	e8 36 f9 ff ff       	call   c0100e50 <ide_wait_ready>
+c010151a:	83 c4 10             	add    $0x10,%esp
+
+    // generate interrupt
+    outb(ioctrl + ISA_CTRL, 0);
+c010151d:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
+c0101521:	83 c0 02             	add    $0x2,%eax
+c0101524:	0f b7 c0             	movzwl %ax,%eax
+c0101527:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
+c010152b:	c6 45 d7 00          	movb   $0x0,-0x29(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c010152f:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
+c0101533:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c0101537:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SECCNT, nsecs);
+c0101538:	8b 45 14             	mov    0x14(%ebp),%eax
+c010153b:	0f b6 c0             	movzbl %al,%eax
+c010153e:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101542:	83 c2 02             	add    $0x2,%edx
+c0101545:	0f b7 d2             	movzwl %dx,%edx
+c0101548:	66 89 55 e8          	mov    %dx,-0x18(%ebp)
+c010154c:	88 45 d8             	mov    %al,-0x28(%ebp)
+c010154f:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
+c0101553:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
+c0101557:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SECTOR, secno & 0xFF);
+c0101558:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010155b:	0f b6 c0             	movzbl %al,%eax
+c010155e:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101562:	83 c2 03             	add    $0x3,%edx
+c0101565:	0f b7 d2             	movzwl %dx,%edx
+c0101568:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
+c010156c:	88 45 d9             	mov    %al,-0x27(%ebp)
+c010156f:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
+c0101573:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
+c0101577:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
+c0101578:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010157b:	c1 e8 08             	shr    $0x8,%eax
+c010157e:	0f b6 c0             	movzbl %al,%eax
+c0101581:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101585:	83 c2 04             	add    $0x4,%edx
+c0101588:	0f b7 d2             	movzwl %dx,%edx
+c010158b:	66 89 55 e4          	mov    %dx,-0x1c(%ebp)
+c010158f:	88 45 da             	mov    %al,-0x26(%ebp)
+c0101592:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
+c0101596:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
+c010159a:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
+c010159b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010159e:	c1 e8 10             	shr    $0x10,%eax
+c01015a1:	0f b6 c0             	movzbl %al,%eax
+c01015a4:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c01015a8:	83 c2 05             	add    $0x5,%edx
+c01015ab:	0f b7 d2             	movzwl %dx,%edx
+c01015ae:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
+c01015b2:	88 45 db             	mov    %al,-0x25(%ebp)
+c01015b5:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
+c01015b9:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
+c01015bd:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
+c01015be:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
+c01015c2:	83 e0 01             	and    $0x1,%eax
+c01015c5:	c1 e0 04             	shl    $0x4,%eax
+c01015c8:	89 c2                	mov    %eax,%edx
+c01015ca:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01015cd:	c1 e8 18             	shr    $0x18,%eax
+c01015d0:	83 e0 0f             	and    $0xf,%eax
+c01015d3:	09 d0                	or     %edx,%eax
+c01015d5:	83 c8 e0             	or     $0xffffffe0,%eax
+c01015d8:	0f b6 c0             	movzbl %al,%eax
+c01015db:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c01015df:	83 c2 06             	add    $0x6,%edx
+c01015e2:	0f b7 d2             	movzwl %dx,%edx
+c01015e5:	66 89 55 e0          	mov    %dx,-0x20(%ebp)
+c01015e9:	88 45 dc             	mov    %al,-0x24(%ebp)
+c01015ec:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
+c01015f0:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
+c01015f4:	ee                   	out    %al,(%dx)
+    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
+c01015f5:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c01015f9:	83 c0 07             	add    $0x7,%eax
+c01015fc:	0f b7 c0             	movzwl %ax,%eax
+c01015ff:	66 89 45 de          	mov    %ax,-0x22(%ebp)
+c0101603:	c6 45 dd 30          	movb   $0x30,-0x23(%ebp)
+c0101607:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
+c010160b:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
+c010160f:	ee                   	out    %al,(%dx)
+
+    int ret = 0;
+c0101610:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
+c0101617:	eb 56                	jmp    c010166f <ide_write_secs+0x217>
+        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
+c0101619:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c010161d:	83 ec 08             	sub    $0x8,%esp
+c0101620:	6a 01                	push   $0x1
+c0101622:	50                   	push   %eax
+c0101623:	e8 28 f8 ff ff       	call   c0100e50 <ide_wait_ready>
+c0101628:	83 c4 10             	add    $0x10,%esp
+c010162b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010162e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0101632:	75 43                	jne    c0101677 <ide_write_secs+0x21f>
+            goto out;
+        }
+        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
+c0101634:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c0101638:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010163b:	8b 45 10             	mov    0x10(%ebp),%eax
+c010163e:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c0101641:	c7 45 cc 80 00 00 00 	movl   $0x80,-0x34(%ebp)
+    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
+}
+
+static inline void
+outsl(uint32_t port, const void *addr, int cnt) {
+    asm volatile (
+c0101648:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010164b:	8b 4d d0             	mov    -0x30(%ebp),%ecx
+c010164e:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0101651:	89 cb                	mov    %ecx,%ebx
+c0101653:	89 de                	mov    %ebx,%esi
+c0101655:	89 c1                	mov    %eax,%ecx
+c0101657:	fc                   	cld    
+c0101658:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
+c010165a:	89 c8                	mov    %ecx,%eax
+c010165c:	89 f3                	mov    %esi,%ebx
+c010165e:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+c0101661:	89 45 cc             	mov    %eax,-0x34(%ebp)
+    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
+    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
+    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
+
+    int ret = 0;
+    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
+c0101664:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
+c0101668:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
+c010166f:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+c0101673:	75 a4                	jne    c0101619 <ide_write_secs+0x1c1>
+c0101675:	eb 01                	jmp    c0101678 <ide_write_secs+0x220>
+        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
+            goto out;
+c0101677:	90                   	nop
+        }
+        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
+    }
+
+out:
+    return ret;
+c0101678:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c010167b:	8d 65 f8             	lea    -0x8(%ebp),%esp
+c010167e:	5b                   	pop    %ebx
+c010167f:	5e                   	pop    %esi
+c0101680:	5d                   	pop    %ebp
+c0101681:	c3                   	ret    
+
+c0101682 <clock_init>:
+/* *
+ * clock_init - initialize 8253 clock to interrupt 100 times per second,
+ * and then enable IRQ_TIMER.
+ * */
+void
+clock_init(void) {
+c0101682:	55                   	push   %ebp
+c0101683:	89 e5                	mov    %esp,%ebp
+c0101685:	83 ec 18             	sub    $0x18,%esp
+c0101688:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
+c010168e:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0101692:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
+c0101696:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
+c010169a:	ee                   	out    %al,(%dx)
+c010169b:	66 c7 45 f4 40 00    	movw   $0x40,-0xc(%ebp)
+c01016a1:	c6 45 f0 9c          	movb   $0x9c,-0x10(%ebp)
+c01016a5:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
+c01016a9:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
+c01016ad:	ee                   	out    %al,(%dx)
+c01016ae:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
+c01016b4:	c6 45 f1 2e          	movb   $0x2e,-0xf(%ebp)
+c01016b8:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
+c01016bc:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c01016c0:	ee                   	out    %al,(%dx)
+    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
+    outb(IO_TIMER1, TIMER_DIV(100) % 256);
+    outb(IO_TIMER1, TIMER_DIV(100) / 256);
+
+    // initialize time counter 'ticks' to zero
+    ticks = 0;
+c01016c1:	c7 05 98 53 1c c0 00 	movl   $0x0,0xc01c5398
+c01016c8:	00 00 00 
+
+    cprintf("++ setup timer interrupts\n");
+c01016cb:	83 ec 0c             	sub    $0xc,%esp
+c01016ce:	68 76 d0 10 c0       	push   $0xc010d076
+c01016d3:	e8 b6 eb ff ff       	call   c010028e <cprintf>
+c01016d8:	83 c4 10             	add    $0x10,%esp
+    pic_enable(IRQ_TIMER);
+c01016db:	83 ec 0c             	sub    $0xc,%esp
+c01016de:	6a 00                	push   $0x0
+c01016e0:	e8 3b 09 00 00       	call   c0102020 <pic_enable>
+c01016e5:	83 c4 10             	add    $0x10,%esp
+}
+c01016e8:	90                   	nop
+c01016e9:	c9                   	leave  
+c01016ea:	c3                   	ret    
+
+c01016eb <__intr_save>:
+#include <assert.h>
+#include <atomic.h>
+#include <sched.h>
+
+static inline bool
+__intr_save(void) {
+c01016eb:	55                   	push   %ebp
+c01016ec:	89 e5                	mov    %esp,%ebp
+c01016ee:	83 ec 18             	sub    $0x18,%esp
+}
+
+static inline uint32_t
+read_eflags(void) {
+    uint32_t eflags;
+    asm volatile ("pushfl; popl %0" : "=r" (eflags));
+c01016f1:	9c                   	pushf  
+c01016f2:	58                   	pop    %eax
+c01016f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return eflags;
+c01016f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    if (read_eflags() & FL_IF) {
+c01016f9:	25 00 02 00 00       	and    $0x200,%eax
+c01016fe:	85 c0                	test   %eax,%eax
+c0101700:	74 0c                	je     c010170e <__intr_save+0x23>
+        intr_disable();
+c0101702:	e8 8a 0a 00 00       	call   c0102191 <intr_disable>
+        return 1;
+c0101707:	b8 01 00 00 00       	mov    $0x1,%eax
+c010170c:	eb 05                	jmp    c0101713 <__intr_save+0x28>
+    }
+    return 0;
+c010170e:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0101713:	c9                   	leave  
+c0101714:	c3                   	ret    
+
+c0101715 <__intr_restore>:
+
+static inline void
+__intr_restore(bool flag) {
+c0101715:	55                   	push   %ebp
+c0101716:	89 e5                	mov    %esp,%ebp
+c0101718:	83 ec 08             	sub    $0x8,%esp
+    if (flag) {
+c010171b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010171f:	74 05                	je     c0101726 <__intr_restore+0x11>
+        intr_enable();
+c0101721:	e8 64 0a 00 00       	call   c010218a <intr_enable>
+    }
+}
+c0101726:	90                   	nop
+c0101727:	c9                   	leave  
+c0101728:	c3                   	ret    
+
+c0101729 <delay>:
+#include <memlayout.h>
+#include <sync.h>
+
+/* stupid I/O delay routine necessitated by historical PC design flaws */
+static void
+delay(void) {
+c0101729:	55                   	push   %ebp
+c010172a:	89 e5                	mov    %esp,%ebp
+c010172c:	83 ec 10             	sub    $0x10,%esp
+c010172f:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0101735:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
+c0101739:	89 c2                	mov    %eax,%edx
+c010173b:	ec                   	in     (%dx),%al
+c010173c:	88 45 f4             	mov    %al,-0xc(%ebp)
+c010173f:	66 c7 45 fc 84 00    	movw   $0x84,-0x4(%ebp)
+c0101745:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
+c0101749:	89 c2                	mov    %eax,%edx
+c010174b:	ec                   	in     (%dx),%al
+c010174c:	88 45 f5             	mov    %al,-0xb(%ebp)
+c010174f:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
+c0101755:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
+c0101759:	89 c2                	mov    %eax,%edx
+c010175b:	ec                   	in     (%dx),%al
+c010175c:	88 45 f6             	mov    %al,-0xa(%ebp)
+c010175f:	66 c7 45 f8 84 00    	movw   $0x84,-0x8(%ebp)
+c0101765:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
+c0101769:	89 c2                	mov    %eax,%edx
+c010176b:	ec                   	in     (%dx),%al
+c010176c:	88 45 f7             	mov    %al,-0x9(%ebp)
+    inb(0x84);
+    inb(0x84);
+    inb(0x84);
+    inb(0x84);
+}
+c010176f:	90                   	nop
+c0101770:	c9                   	leave  
+c0101771:	c3                   	ret    
+
+c0101772 <cga_init>:
+static uint16_t addr_6845;
+
+/* TEXT-mode CGA/VGA display output */
+
+static void
+cga_init(void) {
+c0101772:	55                   	push   %ebp
+c0101773:	89 e5                	mov    %esp,%ebp
+c0101775:	83 ec 20             	sub    $0x20,%esp
+    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
+c0101778:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
+    uint16_t was = *cp;
+c010177f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0101782:	0f b7 00             	movzwl (%eax),%eax
+c0101785:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
+    *cp = (uint16_t) 0xA55A;
+c0101789:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010178c:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
+    if (*cp != 0xA55A) {
+c0101791:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0101794:	0f b7 00             	movzwl (%eax),%eax
+c0101797:	66 3d 5a a5          	cmp    $0xa55a,%ax
+c010179b:	74 12                	je     c01017af <cga_init+0x3d>
+        cp = (uint16_t*)(MONO_BUF + KERNBASE);
+c010179d:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
+        addr_6845 = MONO_BASE;
+c01017a4:	66 c7 05 06 28 1c c0 	movw   $0x3b4,0xc01c2806
+c01017ab:	b4 03 
+c01017ad:	eb 13                	jmp    c01017c2 <cga_init+0x50>
+    } else {
+        *cp = was;
+c01017af:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01017b2:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
+c01017b6:	66 89 10             	mov    %dx,(%eax)
+        addr_6845 = CGA_BASE;
+c01017b9:	66 c7 05 06 28 1c c0 	movw   $0x3d4,0xc01c2806
+c01017c0:	d4 03 
+    }
+
+    // Extract cursor location
+    uint32_t pos;
+    outb(addr_6845, 14);
+c01017c2:	0f b7 05 06 28 1c c0 	movzwl 0xc01c2806,%eax
+c01017c9:	0f b7 c0             	movzwl %ax,%eax
+c01017cc:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
+c01017d0:	c6 45 ea 0e          	movb   $0xe,-0x16(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c01017d4:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
+c01017d8:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
+c01017dc:	ee                   	out    %al,(%dx)
+    pos = inb(addr_6845 + 1) << 8;
+c01017dd:	0f b7 05 06 28 1c c0 	movzwl 0xc01c2806,%eax
+c01017e4:	83 c0 01             	add    $0x1,%eax
+c01017e7:	0f b7 c0             	movzwl %ax,%eax
+c01017ea:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c01017ee:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
+c01017f2:	89 c2                	mov    %eax,%edx
+c01017f4:	ec                   	in     (%dx),%al
+c01017f5:	88 45 eb             	mov    %al,-0x15(%ebp)
+    return data;
+c01017f8:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
+c01017fc:	0f b6 c0             	movzbl %al,%eax
+c01017ff:	c1 e0 08             	shl    $0x8,%eax
+c0101802:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    outb(addr_6845, 15);
+c0101805:	0f b7 05 06 28 1c c0 	movzwl 0xc01c2806,%eax
+c010180c:	0f b7 c0             	movzwl %ax,%eax
+c010180f:	66 89 45 f0          	mov    %ax,-0x10(%ebp)
+c0101813:	c6 45 ec 0f          	movb   $0xf,-0x14(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0101817:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
+c010181b:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
+c010181f:	ee                   	out    %al,(%dx)
+    pos |= inb(addr_6845 + 1);
+c0101820:	0f b7 05 06 28 1c c0 	movzwl 0xc01c2806,%eax
+c0101827:	83 c0 01             	add    $0x1,%eax
+c010182a:	0f b7 c0             	movzwl %ax,%eax
+c010182d:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0101831:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
+c0101835:	89 c2                	mov    %eax,%edx
+c0101837:	ec                   	in     (%dx),%al
+c0101838:	88 45 ed             	mov    %al,-0x13(%ebp)
+    return data;
+c010183b:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
+c010183f:	0f b6 c0             	movzbl %al,%eax
+c0101842:	09 45 f4             	or     %eax,-0xc(%ebp)
+
+    crt_buf = (uint16_t*) cp;
+c0101845:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0101848:	a3 00 28 1c c0       	mov    %eax,0xc01c2800
+    crt_pos = pos;
+c010184d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0101850:	66 a3 04 28 1c c0    	mov    %ax,0xc01c2804
+}
+c0101856:	90                   	nop
+c0101857:	c9                   	leave  
+c0101858:	c3                   	ret    
+
+c0101859 <serial_init>:
+
+static bool serial_exists = 0;
+
+static void
+serial_init(void) {
+c0101859:	55                   	push   %ebp
+c010185a:	89 e5                	mov    %esp,%ebp
+c010185c:	83 ec 28             	sub    $0x28,%esp
+c010185f:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
+c0101865:	c6 45 da 00          	movb   $0x0,-0x26(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0101869:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
+c010186d:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
+c0101871:	ee                   	out    %al,(%dx)
+c0101872:	66 c7 45 f4 fb 03    	movw   $0x3fb,-0xc(%ebp)
+c0101878:	c6 45 db 80          	movb   $0x80,-0x25(%ebp)
+c010187c:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
+c0101880:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
+c0101884:	ee                   	out    %al,(%dx)
+c0101885:	66 c7 45 f2 f8 03    	movw   $0x3f8,-0xe(%ebp)
+c010188b:	c6 45 dc 0c          	movb   $0xc,-0x24(%ebp)
+c010188f:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
+c0101893:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101897:	ee                   	out    %al,(%dx)
+c0101898:	66 c7 45 f0 f9 03    	movw   $0x3f9,-0x10(%ebp)
+c010189e:	c6 45 dd 00          	movb   $0x0,-0x23(%ebp)
+c01018a2:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
+c01018a6:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
+c01018aa:	ee                   	out    %al,(%dx)
+c01018ab:	66 c7 45 ee fb 03    	movw   $0x3fb,-0x12(%ebp)
+c01018b1:	c6 45 de 03          	movb   $0x3,-0x22(%ebp)
+c01018b5:	0f b6 45 de          	movzbl -0x22(%ebp),%eax
+c01018b9:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
+c01018bd:	ee                   	out    %al,(%dx)
+c01018be:	66 c7 45 ec fc 03    	movw   $0x3fc,-0x14(%ebp)
+c01018c4:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
+c01018c8:	0f b6 45 df          	movzbl -0x21(%ebp),%eax
+c01018cc:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
+c01018d0:	ee                   	out    %al,(%dx)
+c01018d1:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
+c01018d7:	c6 45 e0 01          	movb   $0x1,-0x20(%ebp)
+c01018db:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
+c01018df:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c01018e3:	ee                   	out    %al,(%dx)
+c01018e4:	66 c7 45 e8 fd 03    	movw   $0x3fd,-0x18(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c01018ea:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
+c01018ee:	89 c2                	mov    %eax,%edx
+c01018f0:	ec                   	in     (%dx),%al
+c01018f1:	88 45 e1             	mov    %al,-0x1f(%ebp)
+    return data;
+c01018f4:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
+    // Enable rcv interrupts
+    outb(COM1 + COM_IER, COM_IER_RDI);
+
+    // Clear any preexisting overrun indications and interrupts
+    // Serial port doesn't exist if COM_LSR returns 0xFF
+    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
+c01018f8:	3c ff                	cmp    $0xff,%al
+c01018fa:	0f 95 c0             	setne  %al
+c01018fd:	0f b6 c0             	movzbl %al,%eax
+c0101900:	a3 08 28 1c c0       	mov    %eax,0xc01c2808
+c0101905:	66 c7 45 e6 fa 03    	movw   $0x3fa,-0x1a(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c010190b:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
+c010190f:	89 c2                	mov    %eax,%edx
+c0101911:	ec                   	in     (%dx),%al
+c0101912:	88 45 e2             	mov    %al,-0x1e(%ebp)
+c0101915:	66 c7 45 e4 f8 03    	movw   $0x3f8,-0x1c(%ebp)
+c010191b:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
+c010191f:	89 c2                	mov    %eax,%edx
+c0101921:	ec                   	in     (%dx),%al
+c0101922:	88 45 e3             	mov    %al,-0x1d(%ebp)
+    (void) inb(COM1+COM_IIR);
+    (void) inb(COM1+COM_RX);
+
+    if (serial_exists) {
+c0101925:	a1 08 28 1c c0       	mov    0xc01c2808,%eax
+c010192a:	85 c0                	test   %eax,%eax
+c010192c:	74 0d                	je     c010193b <serial_init+0xe2>
+        pic_enable(IRQ_COM1);
+c010192e:	83 ec 0c             	sub    $0xc,%esp
+c0101931:	6a 04                	push   $0x4
+c0101933:	e8 e8 06 00 00       	call   c0102020 <pic_enable>
+c0101938:	83 c4 10             	add    $0x10,%esp
+    }
+}
+c010193b:	90                   	nop
+c010193c:	c9                   	leave  
+c010193d:	c3                   	ret    
+
+c010193e <lpt_putc_sub>:
+
+static void
+lpt_putc_sub(int c) {
+c010193e:	55                   	push   %ebp
+c010193f:	89 e5                	mov    %esp,%ebp
+c0101941:	83 ec 10             	sub    $0x10,%esp
+    int i;
+    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
+c0101944:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+c010194b:	eb 09                	jmp    c0101956 <lpt_putc_sub+0x18>
+        delay();
+c010194d:	e8 d7 fd ff ff       	call   c0101729 <delay>
+}
+
+static void
+lpt_putc_sub(int c) {
+    int i;
+    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
+c0101952:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+c0101956:	66 c7 45 f4 79 03    	movw   $0x379,-0xc(%ebp)
+c010195c:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
+c0101960:	89 c2                	mov    %eax,%edx
+c0101962:	ec                   	in     (%dx),%al
+c0101963:	88 45 f3             	mov    %al,-0xd(%ebp)
+    return data;
+c0101966:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c010196a:	84 c0                	test   %al,%al
+c010196c:	78 09                	js     c0101977 <lpt_putc_sub+0x39>
+c010196e:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
+c0101975:	7e d6                	jle    c010194d <lpt_putc_sub+0xf>
+        delay();
+    }
+    outb(LPTPORT + 0, c);
+c0101977:	8b 45 08             	mov    0x8(%ebp),%eax
+c010197a:	0f b6 c0             	movzbl %al,%eax
+c010197d:	66 c7 45 f8 78 03    	movw   $0x378,-0x8(%ebp)
+c0101983:	88 45 f0             	mov    %al,-0x10(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0101986:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
+c010198a:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
+c010198e:	ee                   	out    %al,(%dx)
+c010198f:	66 c7 45 f6 7a 03    	movw   $0x37a,-0xa(%ebp)
+c0101995:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
+c0101999:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
+c010199d:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
+c01019a1:	ee                   	out    %al,(%dx)
+c01019a2:	66 c7 45 fa 7a 03    	movw   $0x37a,-0x6(%ebp)
+c01019a8:	c6 45 f2 08          	movb   $0x8,-0xe(%ebp)
+c01019ac:	0f b6 45 f2          	movzbl -0xe(%ebp),%eax
+c01019b0:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
+c01019b4:	ee                   	out    %al,(%dx)
+    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
+    outb(LPTPORT + 2, 0x08);
+}
+c01019b5:	90                   	nop
+c01019b6:	c9                   	leave  
+c01019b7:	c3                   	ret    
+
+c01019b8 <lpt_putc>:
+
+/* lpt_putc - copy console output to parallel port */
+static void
+lpt_putc(int c) {
+c01019b8:	55                   	push   %ebp
+c01019b9:	89 e5                	mov    %esp,%ebp
+    if (c != '\b') {
+c01019bb:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
+c01019bf:	74 0d                	je     c01019ce <lpt_putc+0x16>
+        lpt_putc_sub(c);
+c01019c1:	ff 75 08             	pushl  0x8(%ebp)
+c01019c4:	e8 75 ff ff ff       	call   c010193e <lpt_putc_sub>
+c01019c9:	83 c4 04             	add    $0x4,%esp
+    else {
+        lpt_putc_sub('\b');
+        lpt_putc_sub(' ');
+        lpt_putc_sub('\b');
+    }
+}
+c01019cc:	eb 1e                	jmp    c01019ec <lpt_putc+0x34>
+lpt_putc(int c) {
+    if (c != '\b') {
+        lpt_putc_sub(c);
+    }
+    else {
+        lpt_putc_sub('\b');
+c01019ce:	6a 08                	push   $0x8
+c01019d0:	e8 69 ff ff ff       	call   c010193e <lpt_putc_sub>
+c01019d5:	83 c4 04             	add    $0x4,%esp
+        lpt_putc_sub(' ');
+c01019d8:	6a 20                	push   $0x20
+c01019da:	e8 5f ff ff ff       	call   c010193e <lpt_putc_sub>
+c01019df:	83 c4 04             	add    $0x4,%esp
+        lpt_putc_sub('\b');
+c01019e2:	6a 08                	push   $0x8
+c01019e4:	e8 55 ff ff ff       	call   c010193e <lpt_putc_sub>
+c01019e9:	83 c4 04             	add    $0x4,%esp
+    }
+}
+c01019ec:	90                   	nop
+c01019ed:	c9                   	leave  
+c01019ee:	c3                   	ret    
+
+c01019ef <cga_putc>:
+
+/* cga_putc - print character to console */
+static void
+cga_putc(int c) {
+c01019ef:	55                   	push   %ebp
+c01019f0:	89 e5                	mov    %esp,%ebp
+c01019f2:	53                   	push   %ebx
+c01019f3:	83 ec 14             	sub    $0x14,%esp
+    // set black on white
+    if (!(c & ~0xFF)) {
+c01019f6:	8b 45 08             	mov    0x8(%ebp),%eax
+c01019f9:	b0 00                	mov    $0x0,%al
+c01019fb:	85 c0                	test   %eax,%eax
+c01019fd:	75 07                	jne    c0101a06 <cga_putc+0x17>
+        c |= 0x0700;
+c01019ff:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
+    }
+
+    switch (c & 0xff) {
+c0101a06:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101a09:	0f b6 c0             	movzbl %al,%eax
+c0101a0c:	83 f8 0a             	cmp    $0xa,%eax
+c0101a0f:	74 4e                	je     c0101a5f <cga_putc+0x70>
+c0101a11:	83 f8 0d             	cmp    $0xd,%eax
+c0101a14:	74 59                	je     c0101a6f <cga_putc+0x80>
+c0101a16:	83 f8 08             	cmp    $0x8,%eax
+c0101a19:	0f 85 8a 00 00 00    	jne    c0101aa9 <cga_putc+0xba>
+    case '\b':
+        if (crt_pos > 0) {
+c0101a1f:	0f b7 05 04 28 1c c0 	movzwl 0xc01c2804,%eax
+c0101a26:	66 85 c0             	test   %ax,%ax
+c0101a29:	0f 84 a0 00 00 00    	je     c0101acf <cga_putc+0xe0>
+            crt_pos --;
+c0101a2f:	0f b7 05 04 28 1c c0 	movzwl 0xc01c2804,%eax
+c0101a36:	83 e8 01             	sub    $0x1,%eax
+c0101a39:	66 a3 04 28 1c c0    	mov    %ax,0xc01c2804
+            crt_buf[crt_pos] = (c & ~0xff) | ' ';
+c0101a3f:	a1 00 28 1c c0       	mov    0xc01c2800,%eax
+c0101a44:	0f b7 15 04 28 1c c0 	movzwl 0xc01c2804,%edx
+c0101a4b:	0f b7 d2             	movzwl %dx,%edx
+c0101a4e:	01 d2                	add    %edx,%edx
+c0101a50:	01 d0                	add    %edx,%eax
+c0101a52:	8b 55 08             	mov    0x8(%ebp),%edx
+c0101a55:	b2 00                	mov    $0x0,%dl
+c0101a57:	83 ca 20             	or     $0x20,%edx
+c0101a5a:	66 89 10             	mov    %dx,(%eax)
+        }
+        break;
+c0101a5d:	eb 70                	jmp    c0101acf <cga_putc+0xe0>
+    case '\n':
+        crt_pos += CRT_COLS;
+c0101a5f:	0f b7 05 04 28 1c c0 	movzwl 0xc01c2804,%eax
+c0101a66:	83 c0 50             	add    $0x50,%eax
+c0101a69:	66 a3 04 28 1c c0    	mov    %ax,0xc01c2804
+    case '\r':
+        crt_pos -= (crt_pos % CRT_COLS);
+c0101a6f:	0f b7 1d 04 28 1c c0 	movzwl 0xc01c2804,%ebx
+c0101a76:	0f b7 0d 04 28 1c c0 	movzwl 0xc01c2804,%ecx
+c0101a7d:	0f b7 c1             	movzwl %cx,%eax
+c0101a80:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
+c0101a86:	c1 e8 10             	shr    $0x10,%eax
+c0101a89:	89 c2                	mov    %eax,%edx
+c0101a8b:	66 c1 ea 06          	shr    $0x6,%dx
+c0101a8f:	89 d0                	mov    %edx,%eax
+c0101a91:	c1 e0 02             	shl    $0x2,%eax
+c0101a94:	01 d0                	add    %edx,%eax
+c0101a96:	c1 e0 04             	shl    $0x4,%eax
+c0101a99:	29 c1                	sub    %eax,%ecx
+c0101a9b:	89 ca                	mov    %ecx,%edx
+c0101a9d:	89 d8                	mov    %ebx,%eax
+c0101a9f:	29 d0                	sub    %edx,%eax
+c0101aa1:	66 a3 04 28 1c c0    	mov    %ax,0xc01c2804
+        break;
+c0101aa7:	eb 27                	jmp    c0101ad0 <cga_putc+0xe1>
+    default:
+        crt_buf[crt_pos ++] = c;     // write the character
+c0101aa9:	8b 0d 00 28 1c c0    	mov    0xc01c2800,%ecx
+c0101aaf:	0f b7 05 04 28 1c c0 	movzwl 0xc01c2804,%eax
+c0101ab6:	8d 50 01             	lea    0x1(%eax),%edx
+c0101ab9:	66 89 15 04 28 1c c0 	mov    %dx,0xc01c2804
+c0101ac0:	0f b7 c0             	movzwl %ax,%eax
+c0101ac3:	01 c0                	add    %eax,%eax
+c0101ac5:	01 c8                	add    %ecx,%eax
+c0101ac7:	8b 55 08             	mov    0x8(%ebp),%edx
+c0101aca:	66 89 10             	mov    %dx,(%eax)
+        break;
+c0101acd:	eb 01                	jmp    c0101ad0 <cga_putc+0xe1>
+    case '\b':
+        if (crt_pos > 0) {
+            crt_pos --;
+            crt_buf[crt_pos] = (c & ~0xff) | ' ';
+        }
+        break;
+c0101acf:	90                   	nop
+        crt_buf[crt_pos ++] = c;     // write the character
+        break;
+    }
+
+    // What is the purpose of this?
+    if (crt_pos >= CRT_SIZE) {
+c0101ad0:	0f b7 05 04 28 1c c0 	movzwl 0xc01c2804,%eax
+c0101ad7:	66 3d cf 07          	cmp    $0x7cf,%ax
+c0101adb:	76 59                	jbe    c0101b36 <cga_putc+0x147>
+        int i;
+        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
+c0101add:	a1 00 28 1c c0       	mov    0xc01c2800,%eax
+c0101ae2:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
+c0101ae8:	a1 00 28 1c c0       	mov    0xc01c2800,%eax
+c0101aed:	83 ec 04             	sub    $0x4,%esp
+c0101af0:	68 00 0f 00 00       	push   $0xf00
+c0101af5:	52                   	push   %edx
+c0101af6:	50                   	push   %eax
+c0101af7:	e8 2c a9 00 00       	call   c010c428 <memmove>
+c0101afc:	83 c4 10             	add    $0x10,%esp
+        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
+c0101aff:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
+c0101b06:	eb 15                	jmp    c0101b1d <cga_putc+0x12e>
+            crt_buf[i] = 0x0700 | ' ';
+c0101b08:	a1 00 28 1c c0       	mov    0xc01c2800,%eax
+c0101b0d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0101b10:	01 d2                	add    %edx,%edx
+c0101b12:	01 d0                	add    %edx,%eax
+c0101b14:	66 c7 00 20 07       	movw   $0x720,(%eax)
+
+    // What is the purpose of this?
+    if (crt_pos >= CRT_SIZE) {
+        int i;
+        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
+        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
+c0101b19:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0101b1d:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
+c0101b24:	7e e2                	jle    c0101b08 <cga_putc+0x119>
+            crt_buf[i] = 0x0700 | ' ';
+        }
+        crt_pos -= CRT_COLS;
+c0101b26:	0f b7 05 04 28 1c c0 	movzwl 0xc01c2804,%eax
+c0101b2d:	83 e8 50             	sub    $0x50,%eax
+c0101b30:	66 a3 04 28 1c c0    	mov    %ax,0xc01c2804
+    }
+
+    // move that little blinky thing
+    outb(addr_6845, 14);
+c0101b36:	0f b7 05 06 28 1c c0 	movzwl 0xc01c2806,%eax
+c0101b3d:	0f b7 c0             	movzwl %ax,%eax
+c0101b40:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
+c0101b44:	c6 45 e8 0e          	movb   $0xe,-0x18(%ebp)
+c0101b48:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
+c0101b4c:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c0101b50:	ee                   	out    %al,(%dx)
+    outb(addr_6845 + 1, crt_pos >> 8);
+c0101b51:	0f b7 05 04 28 1c c0 	movzwl 0xc01c2804,%eax
+c0101b58:	66 c1 e8 08          	shr    $0x8,%ax
+c0101b5c:	0f b6 c0             	movzbl %al,%eax
+c0101b5f:	0f b7 15 06 28 1c c0 	movzwl 0xc01c2806,%edx
+c0101b66:	83 c2 01             	add    $0x1,%edx
+c0101b69:	0f b7 d2             	movzwl %dx,%edx
+c0101b6c:	66 89 55 f0          	mov    %dx,-0x10(%ebp)
+c0101b70:	88 45 e9             	mov    %al,-0x17(%ebp)
+c0101b73:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
+c0101b77:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
+c0101b7b:	ee                   	out    %al,(%dx)
+    outb(addr_6845, 15);
+c0101b7c:	0f b7 05 06 28 1c c0 	movzwl 0xc01c2806,%eax
+c0101b83:	0f b7 c0             	movzwl %ax,%eax
+c0101b86:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
+c0101b8a:	c6 45 ea 0f          	movb   $0xf,-0x16(%ebp)
+c0101b8e:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
+c0101b92:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
+c0101b96:	ee                   	out    %al,(%dx)
+    outb(addr_6845 + 1, crt_pos);
+c0101b97:	0f b7 05 04 28 1c c0 	movzwl 0xc01c2804,%eax
+c0101b9e:	0f b6 c0             	movzbl %al,%eax
+c0101ba1:	0f b7 15 06 28 1c c0 	movzwl 0xc01c2806,%edx
+c0101ba8:	83 c2 01             	add    $0x1,%edx
+c0101bab:	0f b7 d2             	movzwl %dx,%edx
+c0101bae:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
+c0101bb2:	88 45 eb             	mov    %al,-0x15(%ebp)
+c0101bb5:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
+c0101bb9:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
+c0101bbd:	ee                   	out    %al,(%dx)
+}
+c0101bbe:	90                   	nop
+c0101bbf:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+c0101bc2:	c9                   	leave  
+c0101bc3:	c3                   	ret    
+
+c0101bc4 <serial_putc_sub>:
+
+static void
+serial_putc_sub(int c) {
+c0101bc4:	55                   	push   %ebp
+c0101bc5:	89 e5                	mov    %esp,%ebp
+c0101bc7:	83 ec 10             	sub    $0x10,%esp
+    int i;
+    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
+c0101bca:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+c0101bd1:	eb 09                	jmp    c0101bdc <serial_putc_sub+0x18>
+        delay();
+c0101bd3:	e8 51 fb ff ff       	call   c0101729 <delay>
+}
+
+static void
+serial_putc_sub(int c) {
+    int i;
+    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
+c0101bd8:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+c0101bdc:	66 c7 45 f8 fd 03    	movw   $0x3fd,-0x8(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0101be2:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
+c0101be6:	89 c2                	mov    %eax,%edx
+c0101be8:	ec                   	in     (%dx),%al
+c0101be9:	88 45 f7             	mov    %al,-0x9(%ebp)
+    return data;
+c0101bec:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+c0101bf0:	0f b6 c0             	movzbl %al,%eax
+c0101bf3:	83 e0 20             	and    $0x20,%eax
+c0101bf6:	85 c0                	test   %eax,%eax
+c0101bf8:	75 09                	jne    c0101c03 <serial_putc_sub+0x3f>
+c0101bfa:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
+c0101c01:	7e d0                	jle    c0101bd3 <serial_putc_sub+0xf>
+        delay();
+    }
+    outb(COM1 + COM_TX, c);
+c0101c03:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101c06:	0f b6 c0             	movzbl %al,%eax
+c0101c09:	66 c7 45 fa f8 03    	movw   $0x3f8,-0x6(%ebp)
+c0101c0f:	88 45 f6             	mov    %al,-0xa(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0101c12:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
+c0101c16:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
+c0101c1a:	ee                   	out    %al,(%dx)
+}
+c0101c1b:	90                   	nop
+c0101c1c:	c9                   	leave  
+c0101c1d:	c3                   	ret    
+
+c0101c1e <serial_putc>:
+
+/* serial_putc - print character to serial port */
+static void
+serial_putc(int c) {
+c0101c1e:	55                   	push   %ebp
+c0101c1f:	89 e5                	mov    %esp,%ebp
+    if (c != '\b') {
+c0101c21:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
+c0101c25:	74 0d                	je     c0101c34 <serial_putc+0x16>
+        serial_putc_sub(c);
+c0101c27:	ff 75 08             	pushl  0x8(%ebp)
+c0101c2a:	e8 95 ff ff ff       	call   c0101bc4 <serial_putc_sub>
+c0101c2f:	83 c4 04             	add    $0x4,%esp
+    else {
+        serial_putc_sub('\b');
+        serial_putc_sub(' ');
+        serial_putc_sub('\b');
+    }
+}
+c0101c32:	eb 1e                	jmp    c0101c52 <serial_putc+0x34>
+serial_putc(int c) {
+    if (c != '\b') {
+        serial_putc_sub(c);
+    }
+    else {
+        serial_putc_sub('\b');
+c0101c34:	6a 08                	push   $0x8
+c0101c36:	e8 89 ff ff ff       	call   c0101bc4 <serial_putc_sub>
+c0101c3b:	83 c4 04             	add    $0x4,%esp
+        serial_putc_sub(' ');
+c0101c3e:	6a 20                	push   $0x20
+c0101c40:	e8 7f ff ff ff       	call   c0101bc4 <serial_putc_sub>
+c0101c45:	83 c4 04             	add    $0x4,%esp
+        serial_putc_sub('\b');
+c0101c48:	6a 08                	push   $0x8
+c0101c4a:	e8 75 ff ff ff       	call   c0101bc4 <serial_putc_sub>
+c0101c4f:	83 c4 04             	add    $0x4,%esp
+    }
+}
+c0101c52:	90                   	nop
+c0101c53:	c9                   	leave  
+c0101c54:	c3                   	ret    
+
+c0101c55 <cons_intr>:
+/* *
+ * cons_intr - called by device interrupt routines to feed input
+ * characters into the circular console input buffer.
+ * */
+static void
+cons_intr(int (*proc)(void)) {
+c0101c55:	55                   	push   %ebp
+c0101c56:	89 e5                	mov    %esp,%ebp
+c0101c58:	83 ec 18             	sub    $0x18,%esp
+    int c;
+    while ((c = (*proc)()) != -1) {
+c0101c5b:	eb 33                	jmp    c0101c90 <cons_intr+0x3b>
+        if (c != 0) {
+c0101c5d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0101c61:	74 2d                	je     c0101c90 <cons_intr+0x3b>
+            cons.buf[cons.wpos ++] = c;
+c0101c63:	a1 24 2a 1c c0       	mov    0xc01c2a24,%eax
+c0101c68:	8d 50 01             	lea    0x1(%eax),%edx
+c0101c6b:	89 15 24 2a 1c c0    	mov    %edx,0xc01c2a24
+c0101c71:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0101c74:	88 90 20 28 1c c0    	mov    %dl,-0x3fe3d7e0(%eax)
+            if (cons.wpos == CONSBUFSIZE) {
+c0101c7a:	a1 24 2a 1c c0       	mov    0xc01c2a24,%eax
+c0101c7f:	3d 00 02 00 00       	cmp    $0x200,%eax
+c0101c84:	75 0a                	jne    c0101c90 <cons_intr+0x3b>
+                cons.wpos = 0;
+c0101c86:	c7 05 24 2a 1c c0 00 	movl   $0x0,0xc01c2a24
+c0101c8d:	00 00 00 
+ * characters into the circular console input buffer.
+ * */
+static void
+cons_intr(int (*proc)(void)) {
+    int c;
+    while ((c = (*proc)()) != -1) {
+c0101c90:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101c93:	ff d0                	call   *%eax
+c0101c95:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0101c98:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
+c0101c9c:	75 bf                	jne    c0101c5d <cons_intr+0x8>
+            if (cons.wpos == CONSBUFSIZE) {
+                cons.wpos = 0;
+            }
+        }
+    }
+}
+c0101c9e:	90                   	nop
+c0101c9f:	c9                   	leave  
+c0101ca0:	c3                   	ret    
+
+c0101ca1 <serial_proc_data>:
+
+/* serial_proc_data - get data from serial port */
+static int
+serial_proc_data(void) {
+c0101ca1:	55                   	push   %ebp
+c0101ca2:	89 e5                	mov    %esp,%ebp
+c0101ca4:	83 ec 10             	sub    $0x10,%esp
+c0101ca7:	66 c7 45 f8 fd 03    	movw   $0x3fd,-0x8(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0101cad:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
+c0101cb1:	89 c2                	mov    %eax,%edx
+c0101cb3:	ec                   	in     (%dx),%al
+c0101cb4:	88 45 f7             	mov    %al,-0x9(%ebp)
+    return data;
+c0101cb7:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
+c0101cbb:	0f b6 c0             	movzbl %al,%eax
+c0101cbe:	83 e0 01             	and    $0x1,%eax
+c0101cc1:	85 c0                	test   %eax,%eax
+c0101cc3:	75 07                	jne    c0101ccc <serial_proc_data+0x2b>
+        return -1;
+c0101cc5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c0101cca:	eb 2a                	jmp    c0101cf6 <serial_proc_data+0x55>
+c0101ccc:	66 c7 45 fa f8 03    	movw   $0x3f8,-0x6(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0101cd2:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
+c0101cd6:	89 c2                	mov    %eax,%edx
+c0101cd8:	ec                   	in     (%dx),%al
+c0101cd9:	88 45 f6             	mov    %al,-0xa(%ebp)
+    return data;
+c0101cdc:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
+    }
+    int c = inb(COM1 + COM_RX);
+c0101ce0:	0f b6 c0             	movzbl %al,%eax
+c0101ce3:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    if (c == 127) {
+c0101ce6:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
+c0101cea:	75 07                	jne    c0101cf3 <serial_proc_data+0x52>
+        c = '\b';
+c0101cec:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
+    }
+    return c;
+c0101cf3:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+c0101cf6:	c9                   	leave  
+c0101cf7:	c3                   	ret    
+
+c0101cf8 <serial_intr>:
+
+/* serial_intr - try to feed input characters from serial port */
+void
+serial_intr(void) {
+c0101cf8:	55                   	push   %ebp
+c0101cf9:	89 e5                	mov    %esp,%ebp
+c0101cfb:	83 ec 08             	sub    $0x8,%esp
+    if (serial_exists) {
+c0101cfe:	a1 08 28 1c c0       	mov    0xc01c2808,%eax
+c0101d03:	85 c0                	test   %eax,%eax
+c0101d05:	74 10                	je     c0101d17 <serial_intr+0x1f>
+        cons_intr(serial_proc_data);
+c0101d07:	83 ec 0c             	sub    $0xc,%esp
+c0101d0a:	68 a1 1c 10 c0       	push   $0xc0101ca1
+c0101d0f:	e8 41 ff ff ff       	call   c0101c55 <cons_intr>
+c0101d14:	83 c4 10             	add    $0x10,%esp
+    }
+}
+c0101d17:	90                   	nop
+c0101d18:	c9                   	leave  
+c0101d19:	c3                   	ret    
+
+c0101d1a <kbd_proc_data>:
+ *
+ * The kbd_proc_data() function gets data from the keyboard.
+ * If we finish a character, return it, else 0. And return -1 if no data.
+ * */
+static int
+kbd_proc_data(void) {
+c0101d1a:	55                   	push   %ebp
+c0101d1b:	89 e5                	mov    %esp,%ebp
+c0101d1d:	83 ec 18             	sub    $0x18,%esp
+c0101d20:	66 c7 45 ec 64 00    	movw   $0x64,-0x14(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0101d26:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
+c0101d2a:	89 c2                	mov    %eax,%edx
+c0101d2c:	ec                   	in     (%dx),%al
+c0101d2d:	88 45 eb             	mov    %al,-0x15(%ebp)
+    return data;
+c0101d30:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
+    int c;
+    uint8_t data;
+    static uint32_t shift;
+
+    if ((inb(KBSTATP) & KBS_DIB) == 0) {
+c0101d34:	0f b6 c0             	movzbl %al,%eax
+c0101d37:	83 e0 01             	and    $0x1,%eax
+c0101d3a:	85 c0                	test   %eax,%eax
+c0101d3c:	75 0a                	jne    c0101d48 <kbd_proc_data+0x2e>
+        return -1;
+c0101d3e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+c0101d43:	e9 5d 01 00 00       	jmp    c0101ea5 <kbd_proc_data+0x18b>
+c0101d48:	66 c7 45 f0 60 00    	movw   $0x60,-0x10(%ebp)
+static inline void invlpg(void *addr) __attribute__((always_inline));
+
+static inline uint8_t
+inb(uint16_t port) {
+    uint8_t data;
+    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
+c0101d4e:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
+c0101d52:	89 c2                	mov    %eax,%edx
+c0101d54:	ec                   	in     (%dx),%al
+c0101d55:	88 45 ea             	mov    %al,-0x16(%ebp)
+    return data;
+c0101d58:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
+    }
+
+    data = inb(KBDATAP);
+c0101d5c:	88 45 f3             	mov    %al,-0xd(%ebp)
+
+    if (data == 0xE0) {
+c0101d5f:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
+c0101d63:	75 17                	jne    c0101d7c <kbd_proc_data+0x62>
+        // E0 escape character
+        shift |= E0ESC;
+c0101d65:	a1 28 2a 1c c0       	mov    0xc01c2a28,%eax
+c0101d6a:	83 c8 40             	or     $0x40,%eax
+c0101d6d:	a3 28 2a 1c c0       	mov    %eax,0xc01c2a28
+        return 0;
+c0101d72:	b8 00 00 00 00       	mov    $0x0,%eax
+c0101d77:	e9 29 01 00 00       	jmp    c0101ea5 <kbd_proc_data+0x18b>
+    } else if (data & 0x80) {
+c0101d7c:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c0101d80:	84 c0                	test   %al,%al
+c0101d82:	79 47                	jns    c0101dcb <kbd_proc_data+0xb1>
+        // Key released
+        data = (shift & E0ESC ? data : data & 0x7F);
+c0101d84:	a1 28 2a 1c c0       	mov    0xc01c2a28,%eax
+c0101d89:	83 e0 40             	and    $0x40,%eax
+c0101d8c:	85 c0                	test   %eax,%eax
+c0101d8e:	75 09                	jne    c0101d99 <kbd_proc_data+0x7f>
+c0101d90:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c0101d94:	83 e0 7f             	and    $0x7f,%eax
+c0101d97:	eb 04                	jmp    c0101d9d <kbd_proc_data+0x83>
+c0101d99:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c0101d9d:	88 45 f3             	mov    %al,-0xd(%ebp)
+        shift &= ~(shiftcode[data] | E0ESC);
+c0101da0:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c0101da4:	0f b6 80 60 10 13 c0 	movzbl -0x3fecefa0(%eax),%eax
+c0101dab:	83 c8 40             	or     $0x40,%eax
+c0101dae:	0f b6 c0             	movzbl %al,%eax
+c0101db1:	f7 d0                	not    %eax
+c0101db3:	89 c2                	mov    %eax,%edx
+c0101db5:	a1 28 2a 1c c0       	mov    0xc01c2a28,%eax
+c0101dba:	21 d0                	and    %edx,%eax
+c0101dbc:	a3 28 2a 1c c0       	mov    %eax,0xc01c2a28
+        return 0;
+c0101dc1:	b8 00 00 00 00       	mov    $0x0,%eax
+c0101dc6:	e9 da 00 00 00       	jmp    c0101ea5 <kbd_proc_data+0x18b>
+    } else if (shift & E0ESC) {
+c0101dcb:	a1 28 2a 1c c0       	mov    0xc01c2a28,%eax
+c0101dd0:	83 e0 40             	and    $0x40,%eax
+c0101dd3:	85 c0                	test   %eax,%eax
+c0101dd5:	74 11                	je     c0101de8 <kbd_proc_data+0xce>
+        // Last character was an E0 escape; or with 0x80
+        data |= 0x80;
+c0101dd7:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
+        shift &= ~E0ESC;
+c0101ddb:	a1 28 2a 1c c0       	mov    0xc01c2a28,%eax
+c0101de0:	83 e0 bf             	and    $0xffffffbf,%eax
+c0101de3:	a3 28 2a 1c c0       	mov    %eax,0xc01c2a28
+    }
+
+    shift |= shiftcode[data];
+c0101de8:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c0101dec:	0f b6 80 60 10 13 c0 	movzbl -0x3fecefa0(%eax),%eax
+c0101df3:	0f b6 d0             	movzbl %al,%edx
+c0101df6:	a1 28 2a 1c c0       	mov    0xc01c2a28,%eax
+c0101dfb:	09 d0                	or     %edx,%eax
+c0101dfd:	a3 28 2a 1c c0       	mov    %eax,0xc01c2a28
+    shift ^= togglecode[data];
+c0101e02:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c0101e06:	0f b6 80 60 11 13 c0 	movzbl -0x3feceea0(%eax),%eax
+c0101e0d:	0f b6 d0             	movzbl %al,%edx
+c0101e10:	a1 28 2a 1c c0       	mov    0xc01c2a28,%eax
+c0101e15:	31 d0                	xor    %edx,%eax
+c0101e17:	a3 28 2a 1c c0       	mov    %eax,0xc01c2a28
+
+    c = charcode[shift & (CTL | SHIFT)][data];
+c0101e1c:	a1 28 2a 1c c0       	mov    0xc01c2a28,%eax
+c0101e21:	83 e0 03             	and    $0x3,%eax
+c0101e24:	8b 14 85 60 15 13 c0 	mov    -0x3feceaa0(,%eax,4),%edx
+c0101e2b:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
+c0101e2f:	01 d0                	add    %edx,%eax
+c0101e31:	0f b6 00             	movzbl (%eax),%eax
+c0101e34:	0f b6 c0             	movzbl %al,%eax
+c0101e37:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (shift & CAPSLOCK) {
+c0101e3a:	a1 28 2a 1c c0       	mov    0xc01c2a28,%eax
+c0101e3f:	83 e0 08             	and    $0x8,%eax
+c0101e42:	85 c0                	test   %eax,%eax
+c0101e44:	74 22                	je     c0101e68 <kbd_proc_data+0x14e>
+        if ('a' <= c && c <= 'z')
+c0101e46:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
+c0101e4a:	7e 0c                	jle    c0101e58 <kbd_proc_data+0x13e>
+c0101e4c:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
+c0101e50:	7f 06                	jg     c0101e58 <kbd_proc_data+0x13e>
+            c += 'A' - 'a';
+c0101e52:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
+c0101e56:	eb 10                	jmp    c0101e68 <kbd_proc_data+0x14e>
+        else if ('A' <= c && c <= 'Z')
+c0101e58:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
+c0101e5c:	7e 0a                	jle    c0101e68 <kbd_proc_data+0x14e>
+c0101e5e:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
+c0101e62:	7f 04                	jg     c0101e68 <kbd_proc_data+0x14e>
+            c += 'a' - 'A';
+c0101e64:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
+    }
+
+    // Process special keys
+    // Ctrl-Alt-Del: reboot
+    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
+c0101e68:	a1 28 2a 1c c0       	mov    0xc01c2a28,%eax
+c0101e6d:	f7 d0                	not    %eax
+c0101e6f:	83 e0 06             	and    $0x6,%eax
+c0101e72:	85 c0                	test   %eax,%eax
+c0101e74:	75 2c                	jne    c0101ea2 <kbd_proc_data+0x188>
+c0101e76:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
+c0101e7d:	75 23                	jne    c0101ea2 <kbd_proc_data+0x188>
+        cprintf("Rebooting!\n");
+c0101e7f:	83 ec 0c             	sub    $0xc,%esp
+c0101e82:	68 91 d0 10 c0       	push   $0xc010d091
+c0101e87:	e8 02 e4 ff ff       	call   c010028e <cprintf>
+c0101e8c:	83 c4 10             	add    $0x10,%esp
+c0101e8f:	66 c7 45 ee 92 00    	movw   $0x92,-0x12(%ebp)
+c0101e95:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
+        : "memory", "cc");
+}
+
+static inline void
+outb(uint16_t port, uint8_t data) {
+    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
+c0101e99:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
+c0101e9d:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
+c0101ea1:	ee                   	out    %al,(%dx)
+        outb(0x92, 0x3); // courtesy of Chris Frost
+    }
+    return c;
+c0101ea2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0101ea5:	c9                   	leave  
+c0101ea6:	c3                   	ret    
+
+c0101ea7 <kbd_intr>:
+
+/* kbd_intr - try to feed input characters from keyboard */
+static void
+kbd_intr(void) {
+c0101ea7:	55                   	push   %ebp
+c0101ea8:	89 e5                	mov    %esp,%ebp
+c0101eaa:	83 ec 08             	sub    $0x8,%esp
+    cons_intr(kbd_proc_data);
+c0101ead:	83 ec 0c             	sub    $0xc,%esp
+c0101eb0:	68 1a 1d 10 c0       	push   $0xc0101d1a
+c0101eb5:	e8 9b fd ff ff       	call   c0101c55 <cons_intr>
+c0101eba:	83 c4 10             	add    $0x10,%esp
+}
+c0101ebd:	90                   	nop
+c0101ebe:	c9                   	leave  
+c0101ebf:	c3                   	ret    
+
+c0101ec0 <kbd_init>:
+
+static void
+kbd_init(void) {
+c0101ec0:	55                   	push   %ebp
+c0101ec1:	89 e5                	mov    %esp,%ebp
+c0101ec3:	83 ec 08             	sub    $0x8,%esp
+    // drain the kbd buffer
+    kbd_intr();
+c0101ec6:	e8 dc ff ff ff       	call   c0101ea7 <kbd_intr>
+    pic_enable(IRQ_KBD);
+c0101ecb:	83 ec 0c             	sub    $0xc,%esp
+c0101ece:	6a 01                	push   $0x1
+c0101ed0:	e8 4b 01 00 00       	call   c0102020 <pic_enable>
+c0101ed5:	83 c4 10             	add    $0x10,%esp
+}
+c0101ed8:	90                   	nop
+c0101ed9:	c9                   	leave  
+c0101eda:	c3                   	ret    
+
+c0101edb <cons_init>:
+
+/* cons_init - initializes the console devices */
+void
+cons_init(void) {
+c0101edb:	55                   	push   %ebp
+c0101edc:	89 e5                	mov    %esp,%ebp
+c0101ede:	83 ec 08             	sub    $0x8,%esp
+    cga_init();
+c0101ee1:	e8 8c f8 ff ff       	call   c0101772 <cga_init>
+    serial_init();
+c0101ee6:	e8 6e f9 ff ff       	call   c0101859 <serial_init>
+    kbd_init();
+c0101eeb:	e8 d0 ff ff ff       	call   c0101ec0 <kbd_init>
+    if (!serial_exists) {
+c0101ef0:	a1 08 28 1c c0       	mov    0xc01c2808,%eax
+c0101ef5:	85 c0                	test   %eax,%eax
+c0101ef7:	75 10                	jne    c0101f09 <cons_init+0x2e>
+        cprintf("serial port does not exist!!\n");
+c0101ef9:	83 ec 0c             	sub    $0xc,%esp
+c0101efc:	68 9d d0 10 c0       	push   $0xc010d09d
+c0101f01:	e8 88 e3 ff ff       	call   c010028e <cprintf>
+c0101f06:	83 c4 10             	add    $0x10,%esp
+    }
+}
+c0101f09:	90                   	nop
+c0101f0a:	c9                   	leave  
+c0101f0b:	c3                   	ret    
+
+c0101f0c <cons_putc>:
+
+/* cons_putc - print a single character @c to console devices */
+void
+cons_putc(int c) {
+c0101f0c:	55                   	push   %ebp
+c0101f0d:	89 e5                	mov    %esp,%ebp
+c0101f0f:	83 ec 18             	sub    $0x18,%esp
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c0101f12:	e8 d4 f7 ff ff       	call   c01016eb <__intr_save>
+c0101f17:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    {
+        lpt_putc(c);
+c0101f1a:	83 ec 0c             	sub    $0xc,%esp
+c0101f1d:	ff 75 08             	pushl  0x8(%ebp)
+c0101f20:	e8 93 fa ff ff       	call   c01019b8 <lpt_putc>
+c0101f25:	83 c4 10             	add    $0x10,%esp
+        cga_putc(c);
+c0101f28:	83 ec 0c             	sub    $0xc,%esp
+c0101f2b:	ff 75 08             	pushl  0x8(%ebp)
+c0101f2e:	e8 bc fa ff ff       	call   c01019ef <cga_putc>
+c0101f33:	83 c4 10             	add    $0x10,%esp
+        serial_putc(c);
+c0101f36:	83 ec 0c             	sub    $0xc,%esp
+c0101f39:	ff 75 08             	pushl  0x8(%ebp)
+c0101f3c:	e8 dd fc ff ff       	call   c0101c1e <serial_putc>
+c0101f41:	83 c4 10             	add    $0x10,%esp
+    }
+    local_intr_restore(intr_flag);
+c0101f44:	83 ec 0c             	sub    $0xc,%esp
+c0101f47:	ff 75 f4             	pushl  -0xc(%ebp)
+c0101f4a:	e8 c6 f7 ff ff       	call   c0101715 <__intr_restore>
+c0101f4f:	83 c4 10             	add    $0x10,%esp
+}
+c0101f52:	90                   	nop
+c0101f53:	c9                   	leave  
+c0101f54:	c3                   	ret    
+
+c0101f55 <cons_getc>:
+/* *
+ * cons_getc - return the next input character from console,
+ * or 0 if none waiting.
+ * */
+int
+cons_getc(void) {
+c0101f55:	55                   	push   %ebp
+c0101f56:	89 e5                	mov    %esp,%ebp
+c0101f58:	83 ec 18             	sub    $0x18,%esp
+    int c = 0;
+c0101f5b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c0101f62:	e8 84 f7 ff ff       	call   c01016eb <__intr_save>
+c0101f67:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    {
+        // poll for any pending input characters,
+        // so that this function works even when interrupts are disabled
+        // (e.g., when called from the kernel monitor).
+        serial_intr();
+c0101f6a:	e8 89 fd ff ff       	call   c0101cf8 <serial_intr>
+        kbd_intr();
+c0101f6f:	e8 33 ff ff ff       	call   c0101ea7 <kbd_intr>
+
+        // grab the next character from the input buffer.
+        if (cons.rpos != cons.wpos) {
+c0101f74:	8b 15 20 2a 1c c0    	mov    0xc01c2a20,%edx
+c0101f7a:	a1 24 2a 1c c0       	mov    0xc01c2a24,%eax
+c0101f7f:	39 c2                	cmp    %eax,%edx
+c0101f81:	74 31                	je     c0101fb4 <cons_getc+0x5f>
+            c = cons.buf[cons.rpos ++];
+c0101f83:	a1 20 2a 1c c0       	mov    0xc01c2a20,%eax
+c0101f88:	8d 50 01             	lea    0x1(%eax),%edx
+c0101f8b:	89 15 20 2a 1c c0    	mov    %edx,0xc01c2a20
+c0101f91:	0f b6 80 20 28 1c c0 	movzbl -0x3fe3d7e0(%eax),%eax
+c0101f98:	0f b6 c0             	movzbl %al,%eax
+c0101f9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+            if (cons.rpos == CONSBUFSIZE) {
+c0101f9e:	a1 20 2a 1c c0       	mov    0xc01c2a20,%eax
+c0101fa3:	3d 00 02 00 00       	cmp    $0x200,%eax
+c0101fa8:	75 0a                	jne    c0101fb4 <cons_getc+0x5f>
+                cons.rpos = 0;
+c0101faa:	c7 05 20 2a 1c c0 00 	movl   $0x0,0xc01c2a20
+c0101fb1:	00 00 00 
+            }
+        }
+    }
+    local_intr_restore(intr_flag);
+c0101fb4:	83 ec 0c             	sub    $0xc,%esp
+c0101fb7:	ff 75 f0             	pushl  -0x10(%ebp)
+c0101fba:	e8 56 f7 ff ff       	call   c0101715 <__intr_restore>
+c0101fbf:	83 c4 10             	add    $0x10,%esp
+    return c;
+c0101fc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0101fc5:	c9                   	leave  
+c0101fc6:	c3                   	ret    
+
+c0101fc7 <pic_setmask>:
+// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
+static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
+static bool did_init = 0;
+
+static void
+pic_setmask(uint16_t mask) {
+c0101fc7:	55                   	push   %ebp
+c0101fc8:	89 e5                	mov    %esp,%ebp
+c0101fca:	83 ec 14             	sub    $0x14,%esp
+c0101fcd:	8b 45 08             	mov    0x8(%ebp),%eax
+c0101fd0:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
+    irq_mask = mask;
+c0101fd4:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
+c0101fd8:	66 a3 70 15 13 c0    	mov    %ax,0xc0131570
+    if (did_init) {
+c0101fde:	a1 2c 2a 1c c0       	mov    0xc01c2a2c,%eax
+c0101fe3:	85 c0                	test   %eax,%eax
+c0101fe5:	74 36                	je     c010201d <pic_setmask+0x56>
+        outb(IO_PIC1 + 1, mask);
+c0101fe7:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
+c0101feb:	0f b6 c0             	movzbl %al,%eax
+c0101fee:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
+c0101ff4:	88 45 fa             	mov    %al,-0x6(%ebp)
+c0101ff7:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
+c0101ffb:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
+c0101fff:	ee                   	out    %al,(%dx)
+        outb(IO_PIC2 + 1, mask >> 8);
+c0102000:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
+c0102004:	66 c1 e8 08          	shr    $0x8,%ax
+c0102008:	0f b6 c0             	movzbl %al,%eax
+c010200b:	66 c7 45 fc a1 00    	movw   $0xa1,-0x4(%ebp)
+c0102011:	88 45 fb             	mov    %al,-0x5(%ebp)
+c0102014:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
+c0102018:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
+c010201c:	ee                   	out    %al,(%dx)
+    }
+}
+c010201d:	90                   	nop
+c010201e:	c9                   	leave  
+c010201f:	c3                   	ret    
+
+c0102020 <pic_enable>:
+
+void
+pic_enable(unsigned int irq) {
+c0102020:	55                   	push   %ebp
+c0102021:	89 e5                	mov    %esp,%ebp
+    pic_setmask(irq_mask & ~(1 << irq));
+c0102023:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102026:	ba 01 00 00 00       	mov    $0x1,%edx
+c010202b:	89 c1                	mov    %eax,%ecx
+c010202d:	d3 e2                	shl    %cl,%edx
+c010202f:	89 d0                	mov    %edx,%eax
+c0102031:	f7 d0                	not    %eax
+c0102033:	89 c2                	mov    %eax,%edx
+c0102035:	0f b7 05 70 15 13 c0 	movzwl 0xc0131570,%eax
+c010203c:	21 d0                	and    %edx,%eax
+c010203e:	0f b7 c0             	movzwl %ax,%eax
+c0102041:	50                   	push   %eax
+c0102042:	e8 80 ff ff ff       	call   c0101fc7 <pic_setmask>
+c0102047:	83 c4 04             	add    $0x4,%esp
+}
+c010204a:	90                   	nop
+c010204b:	c9                   	leave  
+c010204c:	c3                   	ret    
+
+c010204d <pic_init>:
+
+/* pic_init - initialize the 8259A interrupt controllers */
+void
+pic_init(void) {
+c010204d:	55                   	push   %ebp
+c010204e:	89 e5                	mov    %esp,%ebp
+c0102050:	83 ec 30             	sub    $0x30,%esp
+    did_init = 1;
+c0102053:	c7 05 2c 2a 1c c0 01 	movl   $0x1,0xc01c2a2c
+c010205a:	00 00 00 
+c010205d:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
+c0102063:	c6 45 d6 ff          	movb   $0xff,-0x2a(%ebp)
+c0102067:	0f b6 45 d6          	movzbl -0x2a(%ebp),%eax
+c010206b:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
+c010206f:	ee                   	out    %al,(%dx)
+c0102070:	66 c7 45 fc a1 00    	movw   $0xa1,-0x4(%ebp)
+c0102076:	c6 45 d7 ff          	movb   $0xff,-0x29(%ebp)
+c010207a:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
+c010207e:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
+c0102082:	ee                   	out    %al,(%dx)
+c0102083:	66 c7 45 fa 20 00    	movw   $0x20,-0x6(%ebp)
+c0102089:	c6 45 d8 11          	movb   $0x11,-0x28(%ebp)
+c010208d:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
+c0102091:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
+c0102095:	ee                   	out    %al,(%dx)
+c0102096:	66 c7 45 f8 21 00    	movw   $0x21,-0x8(%ebp)
+c010209c:	c6 45 d9 20          	movb   $0x20,-0x27(%ebp)
+c01020a0:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
+c01020a4:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
+c01020a8:	ee                   	out    %al,(%dx)
+c01020a9:	66 c7 45 f6 21 00    	movw   $0x21,-0xa(%ebp)
+c01020af:	c6 45 da 04          	movb   $0x4,-0x26(%ebp)
+c01020b3:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
+c01020b7:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
+c01020bb:	ee                   	out    %al,(%dx)
+c01020bc:	66 c7 45 f4 21 00    	movw   $0x21,-0xc(%ebp)
+c01020c2:	c6 45 db 03          	movb   $0x3,-0x25(%ebp)
+c01020c6:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
+c01020ca:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
+c01020ce:	ee                   	out    %al,(%dx)
+c01020cf:	66 c7 45 f2 a0 00    	movw   $0xa0,-0xe(%ebp)
+c01020d5:	c6 45 dc 11          	movb   $0x11,-0x24(%ebp)
+c01020d9:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
+c01020dd:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
+c01020e1:	ee                   	out    %al,(%dx)
+c01020e2:	66 c7 45 f0 a1 00    	movw   $0xa1,-0x10(%ebp)
+c01020e8:	c6 45 dd 28          	movb   $0x28,-0x23(%ebp)
+c01020ec:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
+c01020f0:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
+c01020f4:	ee                   	out    %al,(%dx)
+c01020f5:	66 c7 45 ee a1 00    	movw   $0xa1,-0x12(%ebp)
+c01020fb:	c6 45 de 02          	movb   $0x2,-0x22(%ebp)
+c01020ff:	0f b6 45 de          	movzbl -0x22(%ebp),%eax
+c0102103:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
+c0102107:	ee                   	out    %al,(%dx)
+c0102108:	66 c7 45 ec a1 00    	movw   $0xa1,-0x14(%ebp)
+c010210e:	c6 45 df 03          	movb   $0x3,-0x21(%ebp)
+c0102112:	0f b6 45 df          	movzbl -0x21(%ebp),%eax
+c0102116:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
+c010211a:	ee                   	out    %al,(%dx)
+c010211b:	66 c7 45 ea 20 00    	movw   $0x20,-0x16(%ebp)
+c0102121:	c6 45 e0 68          	movb   $0x68,-0x20(%ebp)
+c0102125:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
+c0102129:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
+c010212d:	ee                   	out    %al,(%dx)
+c010212e:	66 c7 45 e8 20 00    	movw   $0x20,-0x18(%ebp)
+c0102134:	c6 45 e1 0a          	movb   $0xa,-0x1f(%ebp)
+c0102138:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
+c010213c:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
+c0102140:	ee                   	out    %al,(%dx)
+c0102141:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
+c0102147:	c6 45 e2 68          	movb   $0x68,-0x1e(%ebp)
+c010214b:	0f b6 45 e2          	movzbl -0x1e(%ebp),%eax
+c010214f:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
+c0102153:	ee                   	out    %al,(%dx)
+c0102154:	66 c7 45 e4 a0 00    	movw   $0xa0,-0x1c(%ebp)
+c010215a:	c6 45 e3 0a          	movb   $0xa,-0x1d(%ebp)
+c010215e:	0f b6 45 e3          	movzbl -0x1d(%ebp),%eax
+c0102162:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
+c0102166:	ee                   	out    %al,(%dx)
+    outb(IO_PIC1, 0x0a);    // read IRR by default
+
+    outb(IO_PIC2, 0x68);    // OCW3
+    outb(IO_PIC2, 0x0a);    // OCW3
+
+    if (irq_mask != 0xFFFF) {
+c0102167:	0f b7 05 70 15 13 c0 	movzwl 0xc0131570,%eax
+c010216e:	66 83 f8 ff          	cmp    $0xffff,%ax
+c0102172:	74 13                	je     c0102187 <pic_init+0x13a>
+        pic_setmask(irq_mask);
+c0102174:	0f b7 05 70 15 13 c0 	movzwl 0xc0131570,%eax
+c010217b:	0f b7 c0             	movzwl %ax,%eax
+c010217e:	50                   	push   %eax
+c010217f:	e8 43 fe ff ff       	call   c0101fc7 <pic_setmask>
+c0102184:	83 c4 04             	add    $0x4,%esp
+    }
+}
+c0102187:	90                   	nop
+c0102188:	c9                   	leave  
+c0102189:	c3                   	ret    
+
+c010218a <intr_enable>:
+#include <x86.h>
+#include <intr.h>
+
+/* intr_enable - enable irq interrupt */
+void
+intr_enable(void) {
+c010218a:	55                   	push   %ebp
+c010218b:	89 e5                	mov    %esp,%ebp
+    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
+}
+
+static inline void
+sti(void) {
+    asm volatile ("sti");
+c010218d:	fb                   	sti    
+    sti();
+}
+c010218e:	90                   	nop
+c010218f:	5d                   	pop    %ebp
+c0102190:	c3                   	ret    
+
+c0102191 <intr_disable>:
+
+/* intr_disable - disable irq interrupt */
+void
+intr_disable(void) {
+c0102191:	55                   	push   %ebp
+c0102192:	89 e5                	mov    %esp,%ebp
+}
+
+static inline void
+cli(void) {
+    asm volatile ("cli" ::: "memory");
+c0102194:	fa                   	cli    
+    cli();
+}
+c0102195:	90                   	nop
+c0102196:	5d                   	pop    %ebp
+c0102197:	c3                   	ret    
+
+c0102198 <print_ticks>:
+#include <sync.h>
+#include <proc.h>
+
+#define TICK_NUM 100
+
+static void print_ticks() {
+c0102198:	55                   	push   %ebp
+c0102199:	89 e5                	mov    %esp,%ebp
+c010219b:	83 ec 08             	sub    $0x8,%esp
+    cprintf("%d ticks\n",TICK_NUM);
+c010219e:	83 ec 08             	sub    $0x8,%esp
+c01021a1:	6a 64                	push   $0x64
+c01021a3:	68 c0 d0 10 c0       	push   $0xc010d0c0
+c01021a8:	e8 e1 e0 ff ff       	call   c010028e <cprintf>
+c01021ad:	83 c4 10             	add    $0x10,%esp
+#ifdef DEBUG_GRADE
+    cprintf("End of Test.\n");
+c01021b0:	83 ec 0c             	sub    $0xc,%esp
+c01021b3:	68 ca d0 10 c0       	push   $0xc010d0ca
+c01021b8:	e8 d1 e0 ff ff       	call   c010028e <cprintf>
+c01021bd:	83 c4 10             	add    $0x10,%esp
+    panic("EOT: kernel seems ok.");
+c01021c0:	83 ec 04             	sub    $0x4,%esp
+c01021c3:	68 d8 d0 10 c0       	push   $0xc010d0d8
+c01021c8:	6a 1a                	push   $0x1a
+c01021ca:	68 ee d0 10 c0       	push   $0xc010d0ee
+c01021cf:	e8 20 e2 ff ff       	call   c01003f4 <__panic>
+
+c01021d4 <idt_init>:
+    sizeof(idt) - 1, (uintptr_t)idt
+};
+
+/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
+void
+idt_init(void) {
+c01021d4:	55                   	push   %ebp
+c01021d5:	89 e5                	mov    %esp,%ebp
+c01021d7:	83 ec 10             	sub    $0x10,%esp
+      */
+     /* LAB5 2013011371 */
+     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
+     //so you should setup the syscall interrupt gate in here
+	extern uintptr_t __vectors[];
+	for (int i=0; i<sizeof(idt)/sizeof(struct gatedesc); i++){
+c01021da:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+c01021e1:	e9 c3 00 00 00       	jmp    c01022a9 <idt_init+0xd5>
+		SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
+c01021e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01021e9:	8b 04 85 00 16 13 c0 	mov    -0x3fecea00(,%eax,4),%eax
+c01021f0:	89 c2                	mov    %eax,%edx
+c01021f2:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01021f5:	66 89 14 c5 40 2a 1c 	mov    %dx,-0x3fe3d5c0(,%eax,8)
+c01021fc:	c0 
+c01021fd:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0102200:	66 c7 04 c5 42 2a 1c 	movw   $0x8,-0x3fe3d5be(,%eax,8)
+c0102207:	c0 08 00 
+c010220a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010220d:	0f b6 14 c5 44 2a 1c 	movzbl -0x3fe3d5bc(,%eax,8),%edx
+c0102214:	c0 
+c0102215:	83 e2 e0             	and    $0xffffffe0,%edx
+c0102218:	88 14 c5 44 2a 1c c0 	mov    %dl,-0x3fe3d5bc(,%eax,8)
+c010221f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0102222:	0f b6 14 c5 44 2a 1c 	movzbl -0x3fe3d5bc(,%eax,8),%edx
+c0102229:	c0 
+c010222a:	83 e2 1f             	and    $0x1f,%edx
+c010222d:	88 14 c5 44 2a 1c c0 	mov    %dl,-0x3fe3d5bc(,%eax,8)
+c0102234:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0102237:	0f b6 14 c5 45 2a 1c 	movzbl -0x3fe3d5bb(,%eax,8),%edx
+c010223e:	c0 
+c010223f:	83 e2 f0             	and    $0xfffffff0,%edx
+c0102242:	83 ca 0e             	or     $0xe,%edx
+c0102245:	88 14 c5 45 2a 1c c0 	mov    %dl,-0x3fe3d5bb(,%eax,8)
+c010224c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010224f:	0f b6 14 c5 45 2a 1c 	movzbl -0x3fe3d5bb(,%eax,8),%edx
+c0102256:	c0 
+c0102257:	83 e2 ef             	and    $0xffffffef,%edx
+c010225a:	88 14 c5 45 2a 1c c0 	mov    %dl,-0x3fe3d5bb(,%eax,8)
+c0102261:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0102264:	0f b6 14 c5 45 2a 1c 	movzbl -0x3fe3d5bb(,%eax,8),%edx
+c010226b:	c0 
+c010226c:	83 e2 9f             	and    $0xffffff9f,%edx
+c010226f:	88 14 c5 45 2a 1c c0 	mov    %dl,-0x3fe3d5bb(,%eax,8)
+c0102276:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0102279:	0f b6 14 c5 45 2a 1c 	movzbl -0x3fe3d5bb(,%eax,8),%edx
+c0102280:	c0 
+c0102281:	83 ca 80             	or     $0xffffff80,%edx
+c0102284:	88 14 c5 45 2a 1c c0 	mov    %dl,-0x3fe3d5bb(,%eax,8)
+c010228b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010228e:	8b 04 85 00 16 13 c0 	mov    -0x3fecea00(,%eax,4),%eax
+c0102295:	c1 e8 10             	shr    $0x10,%eax
+c0102298:	89 c2                	mov    %eax,%edx
+c010229a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010229d:	66 89 14 c5 46 2a 1c 	mov    %dx,-0x3fe3d5ba(,%eax,8)
+c01022a4:	c0 
+      */
+     /* LAB5 2013011371 */
+     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
+     //so you should setup the syscall interrupt gate in here
+	extern uintptr_t __vectors[];
+	for (int i=0; i<sizeof(idt)/sizeof(struct gatedesc); i++){
+c01022a5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+c01022a9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01022ac:	3d ff 00 00 00       	cmp    $0xff,%eax
+c01022b1:	0f 86 2f ff ff ff    	jbe    c01021e6 <idt_init+0x12>
+		SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
+	}
+	SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
+c01022b7:	a1 00 18 13 c0       	mov    0xc0131800,%eax
+c01022bc:	66 a3 40 2e 1c c0    	mov    %ax,0xc01c2e40
+c01022c2:	66 c7 05 42 2e 1c c0 	movw   $0x8,0xc01c2e42
+c01022c9:	08 00 
+c01022cb:	0f b6 05 44 2e 1c c0 	movzbl 0xc01c2e44,%eax
+c01022d2:	83 e0 e0             	and    $0xffffffe0,%eax
+c01022d5:	a2 44 2e 1c c0       	mov    %al,0xc01c2e44
+c01022da:	0f b6 05 44 2e 1c c0 	movzbl 0xc01c2e44,%eax
+c01022e1:	83 e0 1f             	and    $0x1f,%eax
+c01022e4:	a2 44 2e 1c c0       	mov    %al,0xc01c2e44
+c01022e9:	0f b6 05 45 2e 1c c0 	movzbl 0xc01c2e45,%eax
+c01022f0:	83 c8 0f             	or     $0xf,%eax
+c01022f3:	a2 45 2e 1c c0       	mov    %al,0xc01c2e45
+c01022f8:	0f b6 05 45 2e 1c c0 	movzbl 0xc01c2e45,%eax
+c01022ff:	83 e0 ef             	and    $0xffffffef,%eax
+c0102302:	a2 45 2e 1c c0       	mov    %al,0xc01c2e45
+c0102307:	0f b6 05 45 2e 1c c0 	movzbl 0xc01c2e45,%eax
+c010230e:	83 c8 60             	or     $0x60,%eax
+c0102311:	a2 45 2e 1c c0       	mov    %al,0xc01c2e45
+c0102316:	0f b6 05 45 2e 1c c0 	movzbl 0xc01c2e45,%eax
+c010231d:	83 c8 80             	or     $0xffffff80,%eax
+c0102320:	a2 45 2e 1c c0       	mov    %al,0xc01c2e45
+c0102325:	a1 00 18 13 c0       	mov    0xc0131800,%eax
+c010232a:	c1 e8 10             	shr    $0x10,%eax
+c010232d:	66 a3 46 2e 1c c0    	mov    %ax,0xc01c2e46
+	SETGATE(idt[T_SWITCH_TOK], 1, GD_KTEXT, __vectors[T_SWITCH_TOK], DPL_USER);
+c0102333:	a1 e4 17 13 c0       	mov    0xc01317e4,%eax
+c0102338:	66 a3 08 2e 1c c0    	mov    %ax,0xc01c2e08
+c010233e:	66 c7 05 0a 2e 1c c0 	movw   $0x8,0xc01c2e0a
+c0102345:	08 00 
+c0102347:	0f b6 05 0c 2e 1c c0 	movzbl 0xc01c2e0c,%eax
+c010234e:	83 e0 e0             	and    $0xffffffe0,%eax
+c0102351:	a2 0c 2e 1c c0       	mov    %al,0xc01c2e0c
+c0102356:	0f b6 05 0c 2e 1c c0 	movzbl 0xc01c2e0c,%eax
+c010235d:	83 e0 1f             	and    $0x1f,%eax
+c0102360:	a2 0c 2e 1c c0       	mov    %al,0xc01c2e0c
+c0102365:	0f b6 05 0d 2e 1c c0 	movzbl 0xc01c2e0d,%eax
+c010236c:	83 c8 0f             	or     $0xf,%eax
+c010236f:	a2 0d 2e 1c c0       	mov    %al,0xc01c2e0d
+c0102374:	0f b6 05 0d 2e 1c c0 	movzbl 0xc01c2e0d,%eax
+c010237b:	83 e0 ef             	and    $0xffffffef,%eax
+c010237e:	a2 0d 2e 1c c0       	mov    %al,0xc01c2e0d
+c0102383:	0f b6 05 0d 2e 1c c0 	movzbl 0xc01c2e0d,%eax
+c010238a:	83 c8 60             	or     $0x60,%eax
+c010238d:	a2 0d 2e 1c c0       	mov    %al,0xc01c2e0d
+c0102392:	0f b6 05 0d 2e 1c c0 	movzbl 0xc01c2e0d,%eax
+c0102399:	83 c8 80             	or     $0xffffff80,%eax
+c010239c:	a2 0d 2e 1c c0       	mov    %al,0xc01c2e0d
+c01023a1:	a1 e4 17 13 c0       	mov    0xc01317e4,%eax
+c01023a6:	c1 e8 10             	shr    $0x10,%eax
+c01023a9:	66 a3 0e 2e 1c c0    	mov    %ax,0xc01c2e0e
+c01023af:	c7 45 f8 80 15 13 c0 	movl   $0xc0131580,-0x8(%ebp)
+    }
+}
+
+static inline void
+lidt(struct pseudodesc *pd) {
+    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
+c01023b6:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c01023b9:	0f 01 18             	lidtl  (%eax)
+	lidt(&idt_pd);
+}
+c01023bc:	90                   	nop
+c01023bd:	c9                   	leave  
+c01023be:	c3                   	ret    
+
+c01023bf <trapname>:
+
+static const char *
+trapname(int trapno) {
+c01023bf:	55                   	push   %ebp
+c01023c0:	89 e5                	mov    %esp,%ebp
+        "Alignment Check",
+        "Machine-Check",
+        "SIMD Floating-Point Exception"
+    };
+
+    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
+c01023c2:	8b 45 08             	mov    0x8(%ebp),%eax
+c01023c5:	83 f8 13             	cmp    $0x13,%eax
+c01023c8:	77 0c                	ja     c01023d6 <trapname+0x17>
+        return excnames[trapno];
+c01023ca:	8b 45 08             	mov    0x8(%ebp),%eax
+c01023cd:	8b 04 85 60 d5 10 c0 	mov    -0x3fef2aa0(,%eax,4),%eax
+c01023d4:	eb 18                	jmp    c01023ee <trapname+0x2f>
+    }
+    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
+c01023d6:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
+c01023da:	7e 0d                	jle    c01023e9 <trapname+0x2a>
+c01023dc:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
+c01023e0:	7f 07                	jg     c01023e9 <trapname+0x2a>
+        return "Hardware Interrupt";
+c01023e2:	b8 ff d0 10 c0       	mov    $0xc010d0ff,%eax
+c01023e7:	eb 05                	jmp    c01023ee <trapname+0x2f>
+    }
+    return "(unknown trap)";
+c01023e9:	b8 12 d1 10 c0       	mov    $0xc010d112,%eax
+}
+c01023ee:	5d                   	pop    %ebp
+c01023ef:	c3                   	ret    
+
+c01023f0 <trap_in_kernel>:
+
+/* trap_in_kernel - test if trap happened in kernel */
+bool
+trap_in_kernel(struct trapframe *tf) {
+c01023f0:	55                   	push   %ebp
+c01023f1:	89 e5                	mov    %esp,%ebp
+    return (tf->tf_cs == (uint16_t)KERNEL_CS);
+c01023f3:	8b 45 08             	mov    0x8(%ebp),%eax
+c01023f6:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
+c01023fa:	66 83 f8 08          	cmp    $0x8,%ax
+c01023fe:	0f 94 c0             	sete   %al
+c0102401:	0f b6 c0             	movzbl %al,%eax
+}
+c0102404:	5d                   	pop    %ebp
+c0102405:	c3                   	ret    
+
+c0102406 <print_trapframe>:
+    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
+    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
+};
+
+void
+print_trapframe(struct trapframe *tf) {
+c0102406:	55                   	push   %ebp
+c0102407:	89 e5                	mov    %esp,%ebp
+c0102409:	83 ec 18             	sub    $0x18,%esp
+    cprintf("trapframe at %p\n", tf);
+c010240c:	83 ec 08             	sub    $0x8,%esp
+c010240f:	ff 75 08             	pushl  0x8(%ebp)
+c0102412:	68 53 d1 10 c0       	push   $0xc010d153
+c0102417:	e8 72 de ff ff       	call   c010028e <cprintf>
+c010241c:	83 c4 10             	add    $0x10,%esp
+    print_regs(&tf->tf_regs);
+c010241f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102422:	83 ec 0c             	sub    $0xc,%esp
+c0102425:	50                   	push   %eax
+c0102426:	e8 b8 01 00 00       	call   c01025e3 <print_regs>
+c010242b:	83 c4 10             	add    $0x10,%esp
+    cprintf("  ds   0x----%04x\n", tf->tf_ds);
+c010242e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102431:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
+c0102435:	0f b7 c0             	movzwl %ax,%eax
+c0102438:	83 ec 08             	sub    $0x8,%esp
+c010243b:	50                   	push   %eax
+c010243c:	68 64 d1 10 c0       	push   $0xc010d164
+c0102441:	e8 48 de ff ff       	call   c010028e <cprintf>
+c0102446:	83 c4 10             	add    $0x10,%esp
+    cprintf("  es   0x----%04x\n", tf->tf_es);
+c0102449:	8b 45 08             	mov    0x8(%ebp),%eax
+c010244c:	0f b7 40 28          	movzwl 0x28(%eax),%eax
+c0102450:	0f b7 c0             	movzwl %ax,%eax
+c0102453:	83 ec 08             	sub    $0x8,%esp
+c0102456:	50                   	push   %eax
+c0102457:	68 77 d1 10 c0       	push   $0xc010d177
+c010245c:	e8 2d de ff ff       	call   c010028e <cprintf>
+c0102461:	83 c4 10             	add    $0x10,%esp
+    cprintf("  fs   0x----%04x\n", tf->tf_fs);
+c0102464:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102467:	0f b7 40 24          	movzwl 0x24(%eax),%eax
+c010246b:	0f b7 c0             	movzwl %ax,%eax
+c010246e:	83 ec 08             	sub    $0x8,%esp
+c0102471:	50                   	push   %eax
+c0102472:	68 8a d1 10 c0       	push   $0xc010d18a
+c0102477:	e8 12 de ff ff       	call   c010028e <cprintf>
+c010247c:	83 c4 10             	add    $0x10,%esp
+    cprintf("  gs   0x----%04x\n", tf->tf_gs);
+c010247f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102482:	0f b7 40 20          	movzwl 0x20(%eax),%eax
+c0102486:	0f b7 c0             	movzwl %ax,%eax
+c0102489:	83 ec 08             	sub    $0x8,%esp
+c010248c:	50                   	push   %eax
+c010248d:	68 9d d1 10 c0       	push   $0xc010d19d
+c0102492:	e8 f7 dd ff ff       	call   c010028e <cprintf>
+c0102497:	83 c4 10             	add    $0x10,%esp
+    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
+c010249a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010249d:	8b 40 30             	mov    0x30(%eax),%eax
+c01024a0:	83 ec 0c             	sub    $0xc,%esp
+c01024a3:	50                   	push   %eax
+c01024a4:	e8 16 ff ff ff       	call   c01023bf <trapname>
+c01024a9:	83 c4 10             	add    $0x10,%esp
+c01024ac:	89 c2                	mov    %eax,%edx
+c01024ae:	8b 45 08             	mov    0x8(%ebp),%eax
+c01024b1:	8b 40 30             	mov    0x30(%eax),%eax
+c01024b4:	83 ec 04             	sub    $0x4,%esp
+c01024b7:	52                   	push   %edx
+c01024b8:	50                   	push   %eax
+c01024b9:	68 b0 d1 10 c0       	push   $0xc010d1b0
+c01024be:	e8 cb dd ff ff       	call   c010028e <cprintf>
+c01024c3:	83 c4 10             	add    $0x10,%esp
+    cprintf("  err  0x%08x\n", tf->tf_err);
+c01024c6:	8b 45 08             	mov    0x8(%ebp),%eax
+c01024c9:	8b 40 34             	mov    0x34(%eax),%eax
+c01024cc:	83 ec 08             	sub    $0x8,%esp
+c01024cf:	50                   	push   %eax
+c01024d0:	68 c2 d1 10 c0       	push   $0xc010d1c2
+c01024d5:	e8 b4 dd ff ff       	call   c010028e <cprintf>
+c01024da:	83 c4 10             	add    $0x10,%esp
+    cprintf("  eip  0x%08x\n", tf->tf_eip);
+c01024dd:	8b 45 08             	mov    0x8(%ebp),%eax
+c01024e0:	8b 40 38             	mov    0x38(%eax),%eax
+c01024e3:	83 ec 08             	sub    $0x8,%esp
+c01024e6:	50                   	push   %eax
+c01024e7:	68 d1 d1 10 c0       	push   $0xc010d1d1
+c01024ec:	e8 9d dd ff ff       	call   c010028e <cprintf>
+c01024f1:	83 c4 10             	add    $0x10,%esp
+    cprintf("  cs   0x----%04x\n", tf->tf_cs);
+c01024f4:	8b 45 08             	mov    0x8(%ebp),%eax
+c01024f7:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
+c01024fb:	0f b7 c0             	movzwl %ax,%eax
+c01024fe:	83 ec 08             	sub    $0x8,%esp
+c0102501:	50                   	push   %eax
+c0102502:	68 e0 d1 10 c0       	push   $0xc010d1e0
+c0102507:	e8 82 dd ff ff       	call   c010028e <cprintf>
+c010250c:	83 c4 10             	add    $0x10,%esp
+    cprintf("  flag 0x%08x ", tf->tf_eflags);
+c010250f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102512:	8b 40 40             	mov    0x40(%eax),%eax
+c0102515:	83 ec 08             	sub    $0x8,%esp
+c0102518:	50                   	push   %eax
+c0102519:	68 f3 d1 10 c0       	push   $0xc010d1f3
+c010251e:	e8 6b dd ff ff       	call   c010028e <cprintf>
+c0102523:	83 c4 10             	add    $0x10,%esp
+
+    int i, j;
+    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
+c0102526:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c010252d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
+c0102534:	eb 3f                	jmp    c0102575 <print_trapframe+0x16f>
+        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
+c0102536:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102539:	8b 50 40             	mov    0x40(%eax),%edx
+c010253c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010253f:	21 d0                	and    %edx,%eax
+c0102541:	85 c0                	test   %eax,%eax
+c0102543:	74 29                	je     c010256e <print_trapframe+0x168>
+c0102545:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0102548:	8b 04 85 a0 15 13 c0 	mov    -0x3fecea60(,%eax,4),%eax
+c010254f:	85 c0                	test   %eax,%eax
+c0102551:	74 1b                	je     c010256e <print_trapframe+0x168>
+            cprintf("%s,", IA32flags[i]);
+c0102553:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0102556:	8b 04 85 a0 15 13 c0 	mov    -0x3fecea60(,%eax,4),%eax
+c010255d:	83 ec 08             	sub    $0x8,%esp
+c0102560:	50                   	push   %eax
+c0102561:	68 02 d2 10 c0       	push   $0xc010d202
+c0102566:	e8 23 dd ff ff       	call   c010028e <cprintf>
+c010256b:	83 c4 10             	add    $0x10,%esp
+    cprintf("  eip  0x%08x\n", tf->tf_eip);
+    cprintf("  cs   0x----%04x\n", tf->tf_cs);
+    cprintf("  flag 0x%08x ", tf->tf_eflags);
+
+    int i, j;
+    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
+c010256e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0102572:	d1 65 f0             	shll   -0x10(%ebp)
+c0102575:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0102578:	83 f8 17             	cmp    $0x17,%eax
+c010257b:	76 b9                	jbe    c0102536 <print_trapframe+0x130>
+        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
+            cprintf("%s,", IA32flags[i]);
+        }
+    }
+    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
+c010257d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102580:	8b 40 40             	mov    0x40(%eax),%eax
+c0102583:	25 00 30 00 00       	and    $0x3000,%eax
+c0102588:	c1 e8 0c             	shr    $0xc,%eax
+c010258b:	83 ec 08             	sub    $0x8,%esp
+c010258e:	50                   	push   %eax
+c010258f:	68 06 d2 10 c0       	push   $0xc010d206
+c0102594:	e8 f5 dc ff ff       	call   c010028e <cprintf>
+c0102599:	83 c4 10             	add    $0x10,%esp
+
+    if (!trap_in_kernel(tf)) {
+c010259c:	83 ec 0c             	sub    $0xc,%esp
+c010259f:	ff 75 08             	pushl  0x8(%ebp)
+c01025a2:	e8 49 fe ff ff       	call   c01023f0 <trap_in_kernel>
+c01025a7:	83 c4 10             	add    $0x10,%esp
+c01025aa:	85 c0                	test   %eax,%eax
+c01025ac:	75 32                	jne    c01025e0 <print_trapframe+0x1da>
+        cprintf("  esp  0x%08x\n", tf->tf_esp);
+c01025ae:	8b 45 08             	mov    0x8(%ebp),%eax
+c01025b1:	8b 40 44             	mov    0x44(%eax),%eax
+c01025b4:	83 ec 08             	sub    $0x8,%esp
+c01025b7:	50                   	push   %eax
+c01025b8:	68 0f d2 10 c0       	push   $0xc010d20f
+c01025bd:	e8 cc dc ff ff       	call   c010028e <cprintf>
+c01025c2:	83 c4 10             	add    $0x10,%esp
+        cprintf("  ss   0x----%04x\n", tf->tf_ss);
+c01025c5:	8b 45 08             	mov    0x8(%ebp),%eax
+c01025c8:	0f b7 40 48          	movzwl 0x48(%eax),%eax
+c01025cc:	0f b7 c0             	movzwl %ax,%eax
+c01025cf:	83 ec 08             	sub    $0x8,%esp
+c01025d2:	50                   	push   %eax
+c01025d3:	68 1e d2 10 c0       	push   $0xc010d21e
+c01025d8:	e8 b1 dc ff ff       	call   c010028e <cprintf>
+c01025dd:	83 c4 10             	add    $0x10,%esp
+    }
+}
+c01025e0:	90                   	nop
+c01025e1:	c9                   	leave  
+c01025e2:	c3                   	ret    
+
+c01025e3 <print_regs>:
+
+void
+print_regs(struct pushregs *regs) {
+c01025e3:	55                   	push   %ebp
+c01025e4:	89 e5                	mov    %esp,%ebp
+c01025e6:	83 ec 08             	sub    $0x8,%esp
+    cprintf("  edi  0x%08x\n", regs->reg_edi);
+c01025e9:	8b 45 08             	mov    0x8(%ebp),%eax
+c01025ec:	8b 00                	mov    (%eax),%eax
+c01025ee:	83 ec 08             	sub    $0x8,%esp
+c01025f1:	50                   	push   %eax
+c01025f2:	68 31 d2 10 c0       	push   $0xc010d231
+c01025f7:	e8 92 dc ff ff       	call   c010028e <cprintf>
+c01025fc:	83 c4 10             	add    $0x10,%esp
+    cprintf("  esi  0x%08x\n", regs->reg_esi);
+c01025ff:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102602:	8b 40 04             	mov    0x4(%eax),%eax
+c0102605:	83 ec 08             	sub    $0x8,%esp
+c0102608:	50                   	push   %eax
+c0102609:	68 40 d2 10 c0       	push   $0xc010d240
+c010260e:	e8 7b dc ff ff       	call   c010028e <cprintf>
+c0102613:	83 c4 10             	add    $0x10,%esp
+    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
+c0102616:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102619:	8b 40 08             	mov    0x8(%eax),%eax
+c010261c:	83 ec 08             	sub    $0x8,%esp
+c010261f:	50                   	push   %eax
+c0102620:	68 4f d2 10 c0       	push   $0xc010d24f
+c0102625:	e8 64 dc ff ff       	call   c010028e <cprintf>
+c010262a:	83 c4 10             	add    $0x10,%esp
+    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
+c010262d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102630:	8b 40 0c             	mov    0xc(%eax),%eax
+c0102633:	83 ec 08             	sub    $0x8,%esp
+c0102636:	50                   	push   %eax
+c0102637:	68 5e d2 10 c0       	push   $0xc010d25e
+c010263c:	e8 4d dc ff ff       	call   c010028e <cprintf>
+c0102641:	83 c4 10             	add    $0x10,%esp
+    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
+c0102644:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102647:	8b 40 10             	mov    0x10(%eax),%eax
+c010264a:	83 ec 08             	sub    $0x8,%esp
+c010264d:	50                   	push   %eax
+c010264e:	68 6d d2 10 c0       	push   $0xc010d26d
+c0102653:	e8 36 dc ff ff       	call   c010028e <cprintf>
+c0102658:	83 c4 10             	add    $0x10,%esp
+    cprintf("  edx  0x%08x\n", regs->reg_edx);
+c010265b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010265e:	8b 40 14             	mov    0x14(%eax),%eax
+c0102661:	83 ec 08             	sub    $0x8,%esp
+c0102664:	50                   	push   %eax
+c0102665:	68 7c d2 10 c0       	push   $0xc010d27c
+c010266a:	e8 1f dc ff ff       	call   c010028e <cprintf>
+c010266f:	83 c4 10             	add    $0x10,%esp
+    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
+c0102672:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102675:	8b 40 18             	mov    0x18(%eax),%eax
+c0102678:	83 ec 08             	sub    $0x8,%esp
+c010267b:	50                   	push   %eax
+c010267c:	68 8b d2 10 c0       	push   $0xc010d28b
+c0102681:	e8 08 dc ff ff       	call   c010028e <cprintf>
+c0102686:	83 c4 10             	add    $0x10,%esp
+    cprintf("  eax  0x%08x\n", regs->reg_eax);
+c0102689:	8b 45 08             	mov    0x8(%ebp),%eax
+c010268c:	8b 40 1c             	mov    0x1c(%eax),%eax
+c010268f:	83 ec 08             	sub    $0x8,%esp
+c0102692:	50                   	push   %eax
+c0102693:	68 9a d2 10 c0       	push   $0xc010d29a
+c0102698:	e8 f1 db ff ff       	call   c010028e <cprintf>
+c010269d:	83 c4 10             	add    $0x10,%esp
+}
+c01026a0:	90                   	nop
+c01026a1:	c9                   	leave  
+c01026a2:	c3                   	ret    
+
+c01026a3 <print_pgfault>:
+
+static inline void
+print_pgfault(struct trapframe *tf) {
+c01026a3:	55                   	push   %ebp
+c01026a4:	89 e5                	mov    %esp,%ebp
+c01026a6:	53                   	push   %ebx
+c01026a7:	83 ec 14             	sub    $0x14,%esp
+     * bit 2 == 0 means kernel, 1 means user
+     * */
+    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
+            (tf->tf_err & 4) ? 'U' : 'K',
+            (tf->tf_err & 2) ? 'W' : 'R',
+            (tf->tf_err & 1) ? "protection fault" : "no page found");
+c01026aa:	8b 45 08             	mov    0x8(%ebp),%eax
+c01026ad:	8b 40 34             	mov    0x34(%eax),%eax
+c01026b0:	83 e0 01             	and    $0x1,%eax
+    /* error_code:
+     * bit 0 == 0 means no page found, 1 means protection fault
+     * bit 1 == 0 means read, 1 means write
+     * bit 2 == 0 means kernel, 1 means user
+     * */
+    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
+c01026b3:	85 c0                	test   %eax,%eax
+c01026b5:	74 07                	je     c01026be <print_pgfault+0x1b>
+c01026b7:	bb a9 d2 10 c0       	mov    $0xc010d2a9,%ebx
+c01026bc:	eb 05                	jmp    c01026c3 <print_pgfault+0x20>
+c01026be:	bb ba d2 10 c0       	mov    $0xc010d2ba,%ebx
+            (tf->tf_err & 4) ? 'U' : 'K',
+            (tf->tf_err & 2) ? 'W' : 'R',
+c01026c3:	8b 45 08             	mov    0x8(%ebp),%eax
+c01026c6:	8b 40 34             	mov    0x34(%eax),%eax
+c01026c9:	83 e0 02             	and    $0x2,%eax
+    /* error_code:
+     * bit 0 == 0 means no page found, 1 means protection fault
+     * bit 1 == 0 means read, 1 means write
+     * bit 2 == 0 means kernel, 1 means user
+     * */
+    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
+c01026cc:	85 c0                	test   %eax,%eax
+c01026ce:	74 07                	je     c01026d7 <print_pgfault+0x34>
+c01026d0:	b9 57 00 00 00       	mov    $0x57,%ecx
+c01026d5:	eb 05                	jmp    c01026dc <print_pgfault+0x39>
+c01026d7:	b9 52 00 00 00       	mov    $0x52,%ecx
+            (tf->tf_err & 4) ? 'U' : 'K',
+c01026dc:	8b 45 08             	mov    0x8(%ebp),%eax
+c01026df:	8b 40 34             	mov    0x34(%eax),%eax
+c01026e2:	83 e0 04             	and    $0x4,%eax
+    /* error_code:
+     * bit 0 == 0 means no page found, 1 means protection fault
+     * bit 1 == 0 means read, 1 means write
+     * bit 2 == 0 means kernel, 1 means user
+     * */
+    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
+c01026e5:	85 c0                	test   %eax,%eax
+c01026e7:	74 07                	je     c01026f0 <print_pgfault+0x4d>
+c01026e9:	ba 55 00 00 00       	mov    $0x55,%edx
+c01026ee:	eb 05                	jmp    c01026f5 <print_pgfault+0x52>
+c01026f0:	ba 4b 00 00 00       	mov    $0x4b,%edx
+}
+
+static inline uintptr_t
+rcr2(void) {
+    uintptr_t cr2;
+    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
+c01026f5:	0f 20 d0             	mov    %cr2,%eax
+c01026f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return cr2;
+c01026fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01026fe:	83 ec 0c             	sub    $0xc,%esp
+c0102701:	53                   	push   %ebx
+c0102702:	51                   	push   %ecx
+c0102703:	52                   	push   %edx
+c0102704:	50                   	push   %eax
+c0102705:	68 c8 d2 10 c0       	push   $0xc010d2c8
+c010270a:	e8 7f db ff ff       	call   c010028e <cprintf>
+c010270f:	83 c4 20             	add    $0x20,%esp
+            (tf->tf_err & 4) ? 'U' : 'K',
+            (tf->tf_err & 2) ? 'W' : 'R',
+            (tf->tf_err & 1) ? "protection fault" : "no page found");
+}
+c0102712:	90                   	nop
+c0102713:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+c0102716:	c9                   	leave  
+c0102717:	c3                   	ret    
+
+c0102718 <pgfault_handler>:
+
+static int
+pgfault_handler(struct trapframe *tf) {
+c0102718:	55                   	push   %ebp
+c0102719:	89 e5                	mov    %esp,%ebp
+c010271b:	83 ec 18             	sub    $0x18,%esp
+    extern struct mm_struct *check_mm_struct;
+    if(check_mm_struct !=NULL) { //used for test check_swap
+c010271e:	a1 b0 53 1c c0       	mov    0xc01c53b0,%eax
+c0102723:	85 c0                	test   %eax,%eax
+c0102725:	74 0e                	je     c0102735 <pgfault_handler+0x1d>
+            print_pgfault(tf);
+c0102727:	83 ec 0c             	sub    $0xc,%esp
+c010272a:	ff 75 08             	pushl  0x8(%ebp)
+c010272d:	e8 71 ff ff ff       	call   c01026a3 <print_pgfault>
+c0102732:	83 c4 10             	add    $0x10,%esp
+        }
+    struct mm_struct *mm;
+    if (check_mm_struct != NULL) {
+c0102735:	a1 b0 53 1c c0       	mov    0xc01c53b0,%eax
+c010273a:	85 c0                	test   %eax,%eax
+c010273c:	74 32                	je     c0102770 <pgfault_handler+0x58>
+        assert(current == idleproc);
+c010273e:	8b 15 08 33 1c c0    	mov    0xc01c3308,%edx
+c0102744:	a1 00 33 1c c0       	mov    0xc01c3300,%eax
+c0102749:	39 c2                	cmp    %eax,%edx
+c010274b:	74 19                	je     c0102766 <pgfault_handler+0x4e>
+c010274d:	68 eb d2 10 c0       	push   $0xc010d2eb
+c0102752:	68 ff d2 10 c0       	push   $0xc010d2ff
+c0102757:	68 b0 00 00 00       	push   $0xb0
+c010275c:	68 ee d0 10 c0       	push   $0xc010d0ee
+c0102761:	e8 8e dc ff ff       	call   c01003f4 <__panic>
+        mm = check_mm_struct;
+c0102766:	a1 b0 53 1c c0       	mov    0xc01c53b0,%eax
+c010276b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010276e:	eb 47                	jmp    c01027b7 <pgfault_handler+0x9f>
+    }
+    else {
+        if (current == NULL) {
+c0102770:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c0102775:	85 c0                	test   %eax,%eax
+c0102777:	75 33                	jne    c01027ac <pgfault_handler+0x94>
+            print_trapframe(tf);
+c0102779:	83 ec 0c             	sub    $0xc,%esp
+c010277c:	ff 75 08             	pushl  0x8(%ebp)
+c010277f:	e8 82 fc ff ff       	call   c0102406 <print_trapframe>
+c0102784:	83 c4 10             	add    $0x10,%esp
+            print_pgfault(tf);
+c0102787:	83 ec 0c             	sub    $0xc,%esp
+c010278a:	ff 75 08             	pushl  0x8(%ebp)
+c010278d:	e8 11 ff ff ff       	call   c01026a3 <print_pgfault>
+c0102792:	83 c4 10             	add    $0x10,%esp
+            panic("unhandled page fault.\n");
+c0102795:	83 ec 04             	sub    $0x4,%esp
+c0102798:	68 14 d3 10 c0       	push   $0xc010d314
+c010279d:	68 b7 00 00 00       	push   $0xb7
+c01027a2:	68 ee d0 10 c0       	push   $0xc010d0ee
+c01027a7:	e8 48 dc ff ff       	call   c01003f4 <__panic>
+        }
+        mm = current->mm;
+c01027ac:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c01027b1:	8b 40 18             	mov    0x18(%eax),%eax
+c01027b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+}
+
+static inline uintptr_t
+rcr2(void) {
+    uintptr_t cr2;
+    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
+c01027b7:	0f 20 d0             	mov    %cr2,%eax
+c01027ba:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    return cr2;
+c01027bd:	8b 55 f0             	mov    -0x10(%ebp),%edx
+    }
+    return do_pgfault(mm, tf->tf_err, rcr2());
+c01027c0:	8b 45 08             	mov    0x8(%ebp),%eax
+c01027c3:	8b 40 34             	mov    0x34(%eax),%eax
+c01027c6:	83 ec 04             	sub    $0x4,%esp
+c01027c9:	52                   	push   %edx
+c01027ca:	50                   	push   %eax
+c01027cb:	ff 75 f4             	pushl  -0xc(%ebp)
+c01027ce:	e8 b1 3b 00 00       	call   c0106384 <do_pgfault>
+c01027d3:	83 c4 10             	add    $0x10,%esp
+}
+c01027d6:	c9                   	leave  
+c01027d7:	c3                   	ret    
+
+c01027d8 <trap_dispatch>:
+static volatile int in_swap_tick_event = 0;
+extern struct mm_struct *check_mm_struct;
+extern void sched_class_proc_tick(struct proc_struct *proc);
+
+static void
+trap_dispatch(struct trapframe *tf) {
+c01027d8:	55                   	push   %ebp
+c01027d9:	89 e5                	mov    %esp,%ebp
+c01027db:	83 ec 18             	sub    $0x18,%esp
+    char c;
+
+    int ret=0;
+c01027de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+
+    switch (tf->tf_trapno) {
+c01027e5:	8b 45 08             	mov    0x8(%ebp),%eax
+c01027e8:	8b 40 30             	mov    0x30(%eax),%eax
+c01027eb:	83 f8 2f             	cmp    $0x2f,%eax
+c01027ee:	77 38                	ja     c0102828 <trap_dispatch+0x50>
+c01027f0:	83 f8 2e             	cmp    $0x2e,%eax
+c01027f3:	0f 83 24 02 00 00    	jae    c0102a1d <trap_dispatch+0x245>
+c01027f9:	83 f8 20             	cmp    $0x20,%eax
+c01027fc:	0f 84 eb 00 00 00    	je     c01028ed <trap_dispatch+0x115>
+c0102802:	83 f8 20             	cmp    $0x20,%eax
+c0102805:	77 0a                	ja     c0102811 <trap_dispatch+0x39>
+c0102807:	83 f8 0e             	cmp    $0xe,%eax
+c010280a:	74 3e                	je     c010284a <trap_dispatch+0x72>
+c010280c:	e9 c1 01 00 00       	jmp    c01029d2 <trap_dispatch+0x1fa>
+c0102811:	83 f8 21             	cmp    $0x21,%eax
+c0102814:	0f 84 11 01 00 00    	je     c010292b <trap_dispatch+0x153>
+c010281a:	83 f8 24             	cmp    $0x24,%eax
+c010281d:	0f 84 e1 00 00 00    	je     c0102904 <trap_dispatch+0x12c>
+c0102823:	e9 aa 01 00 00       	jmp    c01029d2 <trap_dispatch+0x1fa>
+c0102828:	83 f8 79             	cmp    $0x79,%eax
+c010282b:	0f 84 65 01 00 00    	je     c0102996 <trap_dispatch+0x1be>
+c0102831:	3d 80 00 00 00       	cmp    $0x80,%eax
+c0102836:	0f 84 a7 00 00 00    	je     c01028e3 <trap_dispatch+0x10b>
+c010283c:	83 f8 78             	cmp    $0x78,%eax
+c010283f:	0f 84 0d 01 00 00    	je     c0102952 <trap_dispatch+0x17a>
+c0102845:	e9 88 01 00 00       	jmp    c01029d2 <trap_dispatch+0x1fa>
+    case T_PGFLT:  //page fault
+        if ((ret = pgfault_handler(tf)) != 0) {
+c010284a:	83 ec 0c             	sub    $0xc,%esp
+c010284d:	ff 75 08             	pushl  0x8(%ebp)
+c0102850:	e8 c3 fe ff ff       	call   c0102718 <pgfault_handler>
+c0102855:	83 c4 10             	add    $0x10,%esp
+c0102858:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010285b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010285f:	0f 84 bb 01 00 00    	je     c0102a20 <trap_dispatch+0x248>
+            print_trapframe(tf);
+c0102865:	83 ec 0c             	sub    $0xc,%esp
+c0102868:	ff 75 08             	pushl  0x8(%ebp)
+c010286b:	e8 96 fb ff ff       	call   c0102406 <print_trapframe>
+c0102870:	83 c4 10             	add    $0x10,%esp
+            if (current == NULL) {
+c0102873:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c0102878:	85 c0                	test   %eax,%eax
+c010287a:	75 17                	jne    c0102893 <trap_dispatch+0xbb>
+                panic("handle pgfault failed. ret=%d\n", ret);
+c010287c:	ff 75 f4             	pushl  -0xc(%ebp)
+c010287f:	68 2c d3 10 c0       	push   $0xc010d32c
+c0102884:	68 cd 00 00 00       	push   $0xcd
+c0102889:	68 ee d0 10 c0       	push   $0xc010d0ee
+c010288e:	e8 61 db ff ff       	call   c01003f4 <__panic>
+            }
+            else {
+                if (trap_in_kernel(tf)) {
+c0102893:	83 ec 0c             	sub    $0xc,%esp
+c0102896:	ff 75 08             	pushl  0x8(%ebp)
+c0102899:	e8 52 fb ff ff       	call   c01023f0 <trap_in_kernel>
+c010289e:	83 c4 10             	add    $0x10,%esp
+c01028a1:	85 c0                	test   %eax,%eax
+c01028a3:	74 17                	je     c01028bc <trap_dispatch+0xe4>
+                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
+c01028a5:	ff 75 f4             	pushl  -0xc(%ebp)
+c01028a8:	68 4c d3 10 c0       	push   $0xc010d34c
+c01028ad:	68 d1 00 00 00       	push   $0xd1
+c01028b2:	68 ee d0 10 c0       	push   $0xc010d0ee
+c01028b7:	e8 38 db ff ff       	call   c01003f4 <__panic>
+                }
+                cprintf("killed by kernel.\n");
+c01028bc:	83 ec 0c             	sub    $0xc,%esp
+c01028bf:	68 7a d3 10 c0       	push   $0xc010d37a
+c01028c4:	e8 c5 d9 ff ff       	call   c010028e <cprintf>
+c01028c9:	83 c4 10             	add    $0x10,%esp
+                panic("handle user mode pgfault failed. ret=%d\n", ret); 
+c01028cc:	ff 75 f4             	pushl  -0xc(%ebp)
+c01028cf:	68 90 d3 10 c0       	push   $0xc010d390
+c01028d4:	68 d4 00 00 00       	push   $0xd4
+c01028d9:	68 ee d0 10 c0       	push   $0xc010d0ee
+c01028de:	e8 11 db ff ff       	call   c01003f4 <__panic>
+                do_exit(-E_KILLED);
+            }
+        }
+        break;
+    case T_SYSCALL:
+        syscall();
+c01028e3:	e8 12 97 00 00       	call   c010bffa <syscall>
+        break;
+c01028e8:	e9 34 01 00 00       	jmp    c0102a21 <trap_dispatch+0x249>
+        /* LAB7 2013011371 */
+        /* you should upate you lab6 code
+         * IMPORTANT FUNCTIONS:
+	     * run_timer_list
+         */
+		ticks++;
+c01028ed:	a1 98 53 1c c0       	mov    0xc01c5398,%eax
+c01028f2:	83 c0 01             	add    $0x1,%eax
+c01028f5:	a3 98 53 1c c0       	mov    %eax,0xc01c5398
+	    run_timer_list();
+c01028fa:	e8 f1 90 00 00       	call   c010b9f0 <run_timer_list>
+        break;
+c01028ff:	e9 1d 01 00 00       	jmp    c0102a21 <trap_dispatch+0x249>
+    case IRQ_OFFSET + IRQ_COM1:
+        c = cons_getc();
+c0102904:	e8 4c f6 ff ff       	call   c0101f55 <cons_getc>
+c0102909:	88 45 f3             	mov    %al,-0xd(%ebp)
+        cprintf("serial [%03d] %c\n", c, c);
+c010290c:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
+c0102910:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
+c0102914:	83 ec 04             	sub    $0x4,%esp
+c0102917:	52                   	push   %edx
+c0102918:	50                   	push   %eax
+c0102919:	68 b9 d3 10 c0       	push   $0xc010d3b9
+c010291e:	e8 6b d9 ff ff       	call   c010028e <cprintf>
+c0102923:	83 c4 10             	add    $0x10,%esp
+        break;
+c0102926:	e9 f6 00 00 00       	jmp    c0102a21 <trap_dispatch+0x249>
+    case IRQ_OFFSET + IRQ_KBD:
+        c = cons_getc();
+c010292b:	e8 25 f6 ff ff       	call   c0101f55 <cons_getc>
+c0102930:	88 45 f3             	mov    %al,-0xd(%ebp)
+        cprintf("kbd [%03d] %c\n", c, c);
+c0102933:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
+c0102937:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
+c010293b:	83 ec 04             	sub    $0x4,%esp
+c010293e:	52                   	push   %edx
+c010293f:	50                   	push   %eax
+c0102940:	68 cb d3 10 c0       	push   $0xc010d3cb
+c0102945:	e8 44 d9 ff ff       	call   c010028e <cprintf>
+c010294a:	83 c4 10             	add    $0x10,%esp
+        break;
+c010294d:	e9 cf 00 00 00       	jmp    c0102a21 <trap_dispatch+0x249>
+    //LAB1 CHALLENGE 1 : 2013011371 you should modify below codes.
+    case T_SWITCH_TOU:
+    	tf->tf_cs = USER_CS;
+c0102952:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102955:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
+    	tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
+c010295b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010295e:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
+c0102964:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102967:	0f b7 50 48          	movzwl 0x48(%eax),%edx
+c010296b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010296e:	66 89 50 28          	mov    %dx,0x28(%eax)
+c0102972:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102975:	0f b7 50 28          	movzwl 0x28(%eax),%edx
+c0102979:	8b 45 08             	mov    0x8(%ebp),%eax
+c010297c:	66 89 50 2c          	mov    %dx,0x2c(%eax)
+    	tf->tf_eflags |= (3<<12);
+c0102980:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102983:	8b 40 40             	mov    0x40(%eax),%eax
+c0102986:	80 cc 30             	or     $0x30,%ah
+c0102989:	89 c2                	mov    %eax,%edx
+c010298b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010298e:	89 50 40             	mov    %edx,0x40(%eax)
+    	break;
+c0102991:	e9 8b 00 00 00       	jmp    c0102a21 <trap_dispatch+0x249>
+    case T_SWITCH_TOK:
+    	tf->tf_cs = KERNEL_CS;
+c0102996:	8b 45 08             	mov    0x8(%ebp),%eax
+c0102999:	66 c7 40 3c 08 00    	movw   $0x8,0x3c(%eax)
+    	tf->tf_ds = tf->tf_es = KERNEL_DS;
+c010299f:	8b 45 08             	mov    0x8(%ebp),%eax
+c01029a2:	66 c7 40 28 10 00    	movw   $0x10,0x28(%eax)
+c01029a8:	8b 45 08             	mov    0x8(%ebp),%eax
+c01029ab:	0f b7 50 28          	movzwl 0x28(%eax),%edx
+c01029af:	8b 45 08             	mov    0x8(%ebp),%eax
+c01029b2:	66 89 50 2c          	mov    %dx,0x2c(%eax)
+    	tf->tf_ss = KERNEL_DS;
+c01029b6:	8b 45 08             	mov    0x8(%ebp),%eax
+c01029b9:	66 c7 40 48 10 00    	movw   $0x10,0x48(%eax)
+    	tf->tf_eflags &= ~(3<<12);
+c01029bf:	8b 45 08             	mov    0x8(%ebp),%eax
+c01029c2:	8b 40 40             	mov    0x40(%eax),%eax
+c01029c5:	80 e4 cf             	and    $0xcf,%ah
+c01029c8:	89 c2                	mov    %eax,%edx
+c01029ca:	8b 45 08             	mov    0x8(%ebp),%eax
+c01029cd:	89 50 40             	mov    %edx,0x40(%eax)
+    	//panic("T_SWITCH_** ??\n");
+    	break;
+c01029d0:	eb 4f                	jmp    c0102a21 <trap_dispatch+0x249>
+    case IRQ_OFFSET + IRQ_IDE1:
+    case IRQ_OFFSET + IRQ_IDE2:
+        /* do nothing */
+        break;
+    default:
+        print_trapframe(tf);
+c01029d2:	83 ec 0c             	sub    $0xc,%esp
+c01029d5:	ff 75 08             	pushl  0x8(%ebp)
+c01029d8:	e8 29 fa ff ff       	call   c0102406 <print_trapframe>
+c01029dd:	83 c4 10             	add    $0x10,%esp
+        if (current != NULL) {
+c01029e0:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c01029e5:	85 c0                	test   %eax,%eax
+c01029e7:	74 1d                	je     c0102a06 <trap_dispatch+0x22e>
+            cprintf("unhandled trap.\n");
+c01029e9:	83 ec 0c             	sub    $0xc,%esp
+c01029ec:	68 da d3 10 c0       	push   $0xc010d3da
+c01029f1:	e8 98 d8 ff ff       	call   c010028e <cprintf>
+c01029f6:	83 c4 10             	add    $0x10,%esp
+            do_exit(-E_KILLED);
+c01029f9:	83 ec 0c             	sub    $0xc,%esp
+c01029fc:	6a f7                	push   $0xfffffff7
+c01029fe:	e8 0c 7c 00 00       	call   c010a60f <do_exit>
+c0102a03:	83 c4 10             	add    $0x10,%esp
+        }
+        // in kernel, it must be a mistake
+        panic("unexpected trap in kernel.\n");
+c0102a06:	83 ec 04             	sub    $0x4,%esp
+c0102a09:	68 eb d3 10 c0       	push   $0xc010d3eb
+c0102a0e:	68 18 01 00 00       	push   $0x118
+c0102a13:	68 ee d0 10 c0       	push   $0xc010d0ee
+c0102a18:	e8 d7 d9 ff ff       	call   c01003f4 <__panic>
+    	//panic("T_SWITCH_** ??\n");
+    	break;
+    case IRQ_OFFSET + IRQ_IDE1:
+    case IRQ_OFFSET + IRQ_IDE2:
+        /* do nothing */
+        break;
+c0102a1d:	90                   	nop
+c0102a1e:	eb 01                	jmp    c0102a21 <trap_dispatch+0x249>
+                cprintf("killed by kernel.\n");
+                panic("handle user mode pgfault failed. ret=%d\n", ret); 
+                do_exit(-E_KILLED);
+            }
+        }
+        break;
+c0102a20:	90                   	nop
+        }
+        // in kernel, it must be a mistake
+        panic("unexpected trap in kernel.\n");
+
+    }
+}
+c0102a21:	90                   	nop
+c0102a22:	c9                   	leave  
+c0102a23:	c3                   	ret    
+
+c0102a24 <trap>:
+ * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
+ * the code in kern/trap/trapentry.S restores the old CPU state saved in the
+ * trapframe and then uses the iret instruction to return from the exception.
+ * */
+void
+trap(struct trapframe *tf) {
+c0102a24:	55                   	push   %ebp
+c0102a25:	89 e5                	mov    %esp,%ebp
+c0102a27:	83 ec 18             	sub    $0x18,%esp
+    // dispatch based on what type of trap occurred
+    // used for previous projects
+    if (current == NULL) {
+c0102a2a:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c0102a2f:	85 c0                	test   %eax,%eax
+c0102a31:	75 10                	jne    c0102a43 <trap+0x1f>
+        trap_dispatch(tf);
+c0102a33:	83 ec 0c             	sub    $0xc,%esp
+c0102a36:	ff 75 08             	pushl  0x8(%ebp)
+c0102a39:	e8 9a fd ff ff       	call   c01027d8 <trap_dispatch>
+c0102a3e:	83 c4 10             	add    $0x10,%esp
+            if (current->need_resched) {
+                schedule();
+            }
+        }
+    }
+}
+c0102a41:	eb 73                	jmp    c0102ab6 <trap+0x92>
+    if (current == NULL) {
+        trap_dispatch(tf);
+    }
+    else {
+        // keep a trapframe chain in stack
+        struct trapframe *otf = current->tf;
+c0102a43:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c0102a48:	8b 40 3c             	mov    0x3c(%eax),%eax
+c0102a4b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        current->tf = tf;
+c0102a4e:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c0102a53:	8b 55 08             	mov    0x8(%ebp),%edx
+c0102a56:	89 50 3c             	mov    %edx,0x3c(%eax)
+    
+        bool in_kernel = trap_in_kernel(tf);
+c0102a59:	83 ec 0c             	sub    $0xc,%esp
+c0102a5c:	ff 75 08             	pushl  0x8(%ebp)
+c0102a5f:	e8 8c f9 ff ff       	call   c01023f0 <trap_in_kernel>
+c0102a64:	83 c4 10             	add    $0x10,%esp
+c0102a67:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    
+        trap_dispatch(tf);
+c0102a6a:	83 ec 0c             	sub    $0xc,%esp
+c0102a6d:	ff 75 08             	pushl  0x8(%ebp)
+c0102a70:	e8 63 fd ff ff       	call   c01027d8 <trap_dispatch>
+c0102a75:	83 c4 10             	add    $0x10,%esp
+    
+        current->tf = otf;
+c0102a78:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c0102a7d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0102a80:	89 50 3c             	mov    %edx,0x3c(%eax)
+        if (!in_kernel) {
+c0102a83:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0102a87:	75 2d                	jne    c0102ab6 <trap+0x92>
+            if (current->flags & PF_EXITING) {
+c0102a89:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c0102a8e:	8b 40 44             	mov    0x44(%eax),%eax
+c0102a91:	83 e0 01             	and    $0x1,%eax
+c0102a94:	85 c0                	test   %eax,%eax
+c0102a96:	74 0d                	je     c0102aa5 <trap+0x81>
+                do_exit(-E_KILLED);
+c0102a98:	83 ec 0c             	sub    $0xc,%esp
+c0102a9b:	6a f7                	push   $0xfffffff7
+c0102a9d:	e8 6d 7b 00 00       	call   c010a60f <do_exit>
+c0102aa2:	83 c4 10             	add    $0x10,%esp
+            }
+            if (current->need_resched) {
+c0102aa5:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c0102aaa:	8b 40 10             	mov    0x10(%eax),%eax
+c0102aad:	85 c0                	test   %eax,%eax
+c0102aaf:	74 05                	je     c0102ab6 <trap+0x92>
+                schedule();
+c0102ab1:	e8 b3 8c 00 00       	call   c010b769 <schedule>
+            }
+        }
+    }
+}
+c0102ab6:	90                   	nop
+c0102ab7:	c9                   	leave  
+c0102ab8:	c3                   	ret    
+
+c0102ab9 <vector0>:
+# handler
+.text
+.globl __alltraps
+.globl vector0
+vector0:
+  pushl $0
+c0102ab9:	6a 00                	push   $0x0
+  pushl $0
+c0102abb:	6a 00                	push   $0x0
+  jmp __alltraps
+c0102abd:	e9 67 0a 00 00       	jmp    c0103529 <__alltraps>
+
+c0102ac2 <vector1>:
+.globl vector1
+vector1:
+  pushl $0
+c0102ac2:	6a 00                	push   $0x0
+  pushl $1
+c0102ac4:	6a 01                	push   $0x1
+  jmp __alltraps
+c0102ac6:	e9 5e 0a 00 00       	jmp    c0103529 <__alltraps>
+
+c0102acb <vector2>:
+.globl vector2
+vector2:
+  pushl $0
+c0102acb:	6a 00                	push   $0x0
+  pushl $2
+c0102acd:	6a 02                	push   $0x2
+  jmp __alltraps
+c0102acf:	e9 55 0a 00 00       	jmp    c0103529 <__alltraps>
+
+c0102ad4 <vector3>:
+.globl vector3
+vector3:
+  pushl $0
+c0102ad4:	6a 00                	push   $0x0
+  pushl $3
+c0102ad6:	6a 03                	push   $0x3
+  jmp __alltraps
+c0102ad8:	e9 4c 0a 00 00       	jmp    c0103529 <__alltraps>
+
+c0102add <vector4>:
+.globl vector4
+vector4:
+  pushl $0
+c0102add:	6a 00                	push   $0x0
+  pushl $4
+c0102adf:	6a 04                	push   $0x4
+  jmp __alltraps
+c0102ae1:	e9 43 0a 00 00       	jmp    c0103529 <__alltraps>
+
+c0102ae6 <vector5>:
+.globl vector5
+vector5:
+  pushl $0
+c0102ae6:	6a 00                	push   $0x0
+  pushl $5
+c0102ae8:	6a 05                	push   $0x5
+  jmp __alltraps
+c0102aea:	e9 3a 0a 00 00       	jmp    c0103529 <__alltraps>
+
+c0102aef <vector6>:
+.globl vector6
+vector6:
+  pushl $0
+c0102aef:	6a 00                	push   $0x0
+  pushl $6
+c0102af1:	6a 06                	push   $0x6
+  jmp __alltraps
+c0102af3:	e9 31 0a 00 00       	jmp    c0103529 <__alltraps>
+
+c0102af8 <vector7>:
+.globl vector7
+vector7:
+  pushl $0
+c0102af8:	6a 00                	push   $0x0
+  pushl $7
+c0102afa:	6a 07                	push   $0x7
+  jmp __alltraps
+c0102afc:	e9 28 0a 00 00       	jmp    c0103529 <__alltraps>
+
+c0102b01 <vector8>:
+.globl vector8
+vector8:
+  pushl $8
+c0102b01:	6a 08                	push   $0x8
+  jmp __alltraps
+c0102b03:	e9 21 0a 00 00       	jmp    c0103529 <__alltraps>
+
+c0102b08 <vector9>:
+.globl vector9
+vector9:
+  pushl $9
+c0102b08:	6a 09                	push   $0x9
+  jmp __alltraps
+c0102b0a:	e9 1a 0a 00 00       	jmp    c0103529 <__alltraps>
+
+c0102b0f <vector10>:
+.globl vector10
+vector10:
+  pushl $10
+c0102b0f:	6a 0a                	push   $0xa
+  jmp __alltraps
+c0102b11:	e9 13 0a 00 00       	jmp    c0103529 <__alltraps>
+
+c0102b16 <vector11>:
+.globl vector11
+vector11:
+  pushl $11
+c0102b16:	6a 0b                	push   $0xb
+  jmp __alltraps
+c0102b18:	e9 0c 0a 00 00       	jmp    c0103529 <__alltraps>
+
+c0102b1d <vector12>:
+.globl vector12
+vector12:
+  pushl $12
+c0102b1d:	6a 0c                	push   $0xc
+  jmp __alltraps
+c0102b1f:	e9 05 0a 00 00       	jmp    c0103529 <__alltraps>
+
+c0102b24 <vector13>:
+.globl vector13
+vector13:
+  pushl $13
+c0102b24:	6a 0d                	push   $0xd
+  jmp __alltraps
+c0102b26:	e9 fe 09 00 00       	jmp    c0103529 <__alltraps>
+
+c0102b2b <vector14>:
+.globl vector14
+vector14:
+  pushl $14
+c0102b2b:	6a 0e                	push   $0xe
+  jmp __alltraps
+c0102b2d:	e9 f7 09 00 00       	jmp    c0103529 <__alltraps>
+
+c0102b32 <vector15>:
+.globl vector15
+vector15:
+  pushl $0
+c0102b32:	6a 00                	push   $0x0
+  pushl $15
+c0102b34:	6a 0f                	push   $0xf
+  jmp __alltraps
+c0102b36:	e9 ee 09 00 00       	jmp    c0103529 <__alltraps>
+
+c0102b3b <vector16>:
+.globl vector16
+vector16:
+  pushl $0
+c0102b3b:	6a 00                	push   $0x0
+  pushl $16
+c0102b3d:	6a 10                	push   $0x10
+  jmp __alltraps
+c0102b3f:	e9 e5 09 00 00       	jmp    c0103529 <__alltraps>
+
+c0102b44 <vector17>:
+.globl vector17
+vector17:
+  pushl $17
+c0102b44:	6a 11                	push   $0x11
+  jmp __alltraps
+c0102b46:	e9 de 09 00 00       	jmp    c0103529 <__alltraps>
+
+c0102b4b <vector18>:
+.globl vector18
+vector18:
+  pushl $0
+c0102b4b:	6a 00                	push   $0x0
+  pushl $18
+c0102b4d:	6a 12                	push   $0x12
+  jmp __alltraps
+c0102b4f:	e9 d5 09 00 00       	jmp    c0103529 <__alltraps>
+
+c0102b54 <vector19>:
+.globl vector19
+vector19:
+  pushl $0
+c0102b54:	6a 00                	push   $0x0
+  pushl $19
+c0102b56:	6a 13                	push   $0x13
+  jmp __alltraps
+c0102b58:	e9 cc 09 00 00       	jmp    c0103529 <__alltraps>
+
+c0102b5d <vector20>:
+.globl vector20
+vector20:
+  pushl $0
+c0102b5d:	6a 00                	push   $0x0
+  pushl $20
+c0102b5f:	6a 14                	push   $0x14
+  jmp __alltraps
+c0102b61:	e9 c3 09 00 00       	jmp    c0103529 <__alltraps>
+
+c0102b66 <vector21>:
+.globl vector21
+vector21:
+  pushl $0
+c0102b66:	6a 00                	push   $0x0
+  pushl $21
+c0102b68:	6a 15                	push   $0x15
+  jmp __alltraps
+c0102b6a:	e9 ba 09 00 00       	jmp    c0103529 <__alltraps>
+
+c0102b6f <vector22>:
+.globl vector22
+vector22:
+  pushl $0
+c0102b6f:	6a 00                	push   $0x0
+  pushl $22
+c0102b71:	6a 16                	push   $0x16
+  jmp __alltraps
+c0102b73:	e9 b1 09 00 00       	jmp    c0103529 <__alltraps>
+
+c0102b78 <vector23>:
+.globl vector23
+vector23:
+  pushl $0
+c0102b78:	6a 00                	push   $0x0
+  pushl $23
+c0102b7a:	6a 17                	push   $0x17
+  jmp __alltraps
+c0102b7c:	e9 a8 09 00 00       	jmp    c0103529 <__alltraps>
+
+c0102b81 <vector24>:
+.globl vector24
+vector24:
+  pushl $0
+c0102b81:	6a 00                	push   $0x0
+  pushl $24
+c0102b83:	6a 18                	push   $0x18
+  jmp __alltraps
+c0102b85:	e9 9f 09 00 00       	jmp    c0103529 <__alltraps>
+
+c0102b8a <vector25>:
+.globl vector25
+vector25:
+  pushl $0
+c0102b8a:	6a 00                	push   $0x0
+  pushl $25
+c0102b8c:	6a 19                	push   $0x19
+  jmp __alltraps
+c0102b8e:	e9 96 09 00 00       	jmp    c0103529 <__alltraps>
+
+c0102b93 <vector26>:
+.globl vector26
+vector26:
+  pushl $0
+c0102b93:	6a 00                	push   $0x0
+  pushl $26
+c0102b95:	6a 1a                	push   $0x1a
+  jmp __alltraps
+c0102b97:	e9 8d 09 00 00       	jmp    c0103529 <__alltraps>
+
+c0102b9c <vector27>:
+.globl vector27
+vector27:
+  pushl $0
+c0102b9c:	6a 00                	push   $0x0
+  pushl $27
+c0102b9e:	6a 1b                	push   $0x1b
+  jmp __alltraps
+c0102ba0:	e9 84 09 00 00       	jmp    c0103529 <__alltraps>
+
+c0102ba5 <vector28>:
+.globl vector28
+vector28:
+  pushl $0
+c0102ba5:	6a 00                	push   $0x0
+  pushl $28
+c0102ba7:	6a 1c                	push   $0x1c
+  jmp __alltraps
+c0102ba9:	e9 7b 09 00 00       	jmp    c0103529 <__alltraps>
+
+c0102bae <vector29>:
+.globl vector29
+vector29:
+  pushl $0
+c0102bae:	6a 00                	push   $0x0
+  pushl $29
+c0102bb0:	6a 1d                	push   $0x1d
+  jmp __alltraps
+c0102bb2:	e9 72 09 00 00       	jmp    c0103529 <__alltraps>
+
+c0102bb7 <vector30>:
+.globl vector30
+vector30:
+  pushl $0
+c0102bb7:	6a 00                	push   $0x0
+  pushl $30
+c0102bb9:	6a 1e                	push   $0x1e
+  jmp __alltraps
+c0102bbb:	e9 69 09 00 00       	jmp    c0103529 <__alltraps>
+
+c0102bc0 <vector31>:
+.globl vector31
+vector31:
+  pushl $0
+c0102bc0:	6a 00                	push   $0x0
+  pushl $31
+c0102bc2:	6a 1f                	push   $0x1f
+  jmp __alltraps
+c0102bc4:	e9 60 09 00 00       	jmp    c0103529 <__alltraps>
+
+c0102bc9 <vector32>:
+.globl vector32
+vector32:
+  pushl $0
+c0102bc9:	6a 00                	push   $0x0
+  pushl $32
+c0102bcb:	6a 20                	push   $0x20
+  jmp __alltraps
+c0102bcd:	e9 57 09 00 00       	jmp    c0103529 <__alltraps>
+
+c0102bd2 <vector33>:
+.globl vector33
+vector33:
+  pushl $0
+c0102bd2:	6a 00                	push   $0x0
+  pushl $33
+c0102bd4:	6a 21                	push   $0x21
+  jmp __alltraps
+c0102bd6:	e9 4e 09 00 00       	jmp    c0103529 <__alltraps>
+
+c0102bdb <vector34>:
+.globl vector34
+vector34:
+  pushl $0
+c0102bdb:	6a 00                	push   $0x0
+  pushl $34
+c0102bdd:	6a 22                	push   $0x22
+  jmp __alltraps
+c0102bdf:	e9 45 09 00 00       	jmp    c0103529 <__alltraps>
+
+c0102be4 <vector35>:
+.globl vector35
+vector35:
+  pushl $0
+c0102be4:	6a 00                	push   $0x0
+  pushl $35
+c0102be6:	6a 23                	push   $0x23
+  jmp __alltraps
+c0102be8:	e9 3c 09 00 00       	jmp    c0103529 <__alltraps>
+
+c0102bed <vector36>:
+.globl vector36
+vector36:
+  pushl $0
+c0102bed:	6a 00                	push   $0x0
+  pushl $36
+c0102bef:	6a 24                	push   $0x24
+  jmp __alltraps
+c0102bf1:	e9 33 09 00 00       	jmp    c0103529 <__alltraps>
+
+c0102bf6 <vector37>:
+.globl vector37
+vector37:
+  pushl $0
+c0102bf6:	6a 00                	push   $0x0
+  pushl $37
+c0102bf8:	6a 25                	push   $0x25
+  jmp __alltraps
+c0102bfa:	e9 2a 09 00 00       	jmp    c0103529 <__alltraps>
+
+c0102bff <vector38>:
+.globl vector38
+vector38:
+  pushl $0
+c0102bff:	6a 00                	push   $0x0
+  pushl $38
+c0102c01:	6a 26                	push   $0x26
+  jmp __alltraps
+c0102c03:	e9 21 09 00 00       	jmp    c0103529 <__alltraps>
+
+c0102c08 <vector39>:
+.globl vector39
+vector39:
+  pushl $0
+c0102c08:	6a 00                	push   $0x0
+  pushl $39
+c0102c0a:	6a 27                	push   $0x27
+  jmp __alltraps
+c0102c0c:	e9 18 09 00 00       	jmp    c0103529 <__alltraps>
+
+c0102c11 <vector40>:
+.globl vector40
+vector40:
+  pushl $0
+c0102c11:	6a 00                	push   $0x0
+  pushl $40
+c0102c13:	6a 28                	push   $0x28
+  jmp __alltraps
+c0102c15:	e9 0f 09 00 00       	jmp    c0103529 <__alltraps>
+
+c0102c1a <vector41>:
+.globl vector41
+vector41:
+  pushl $0
+c0102c1a:	6a 00                	push   $0x0
+  pushl $41
+c0102c1c:	6a 29                	push   $0x29
+  jmp __alltraps
+c0102c1e:	e9 06 09 00 00       	jmp    c0103529 <__alltraps>
+
+c0102c23 <vector42>:
+.globl vector42
+vector42:
+  pushl $0
+c0102c23:	6a 00                	push   $0x0
+  pushl $42
+c0102c25:	6a 2a                	push   $0x2a
+  jmp __alltraps
+c0102c27:	e9 fd 08 00 00       	jmp    c0103529 <__alltraps>
+
+c0102c2c <vector43>:
+.globl vector43
+vector43:
+  pushl $0
+c0102c2c:	6a 00                	push   $0x0
+  pushl $43
+c0102c2e:	6a 2b                	push   $0x2b
+  jmp __alltraps
+c0102c30:	e9 f4 08 00 00       	jmp    c0103529 <__alltraps>
+
+c0102c35 <vector44>:
+.globl vector44
+vector44:
+  pushl $0
+c0102c35:	6a 00                	push   $0x0
+  pushl $44
+c0102c37:	6a 2c                	push   $0x2c
+  jmp __alltraps
+c0102c39:	e9 eb 08 00 00       	jmp    c0103529 <__alltraps>
+
+c0102c3e <vector45>:
+.globl vector45
+vector45:
+  pushl $0
+c0102c3e:	6a 00                	push   $0x0
+  pushl $45
+c0102c40:	6a 2d                	push   $0x2d
+  jmp __alltraps
+c0102c42:	e9 e2 08 00 00       	jmp    c0103529 <__alltraps>
+
+c0102c47 <vector46>:
+.globl vector46
+vector46:
+  pushl $0
+c0102c47:	6a 00                	push   $0x0
+  pushl $46
+c0102c49:	6a 2e                	push   $0x2e
+  jmp __alltraps
+c0102c4b:	e9 d9 08 00 00       	jmp    c0103529 <__alltraps>
+
+c0102c50 <vector47>:
+.globl vector47
+vector47:
+  pushl $0
+c0102c50:	6a 00                	push   $0x0
+  pushl $47
+c0102c52:	6a 2f                	push   $0x2f
+  jmp __alltraps
+c0102c54:	e9 d0 08 00 00       	jmp    c0103529 <__alltraps>
+
+c0102c59 <vector48>:
+.globl vector48
+vector48:
+  pushl $0
+c0102c59:	6a 00                	push   $0x0
+  pushl $48
+c0102c5b:	6a 30                	push   $0x30
+  jmp __alltraps
+c0102c5d:	e9 c7 08 00 00       	jmp    c0103529 <__alltraps>
+
+c0102c62 <vector49>:
+.globl vector49
+vector49:
+  pushl $0
+c0102c62:	6a 00                	push   $0x0
+  pushl $49
+c0102c64:	6a 31                	push   $0x31
+  jmp __alltraps
+c0102c66:	e9 be 08 00 00       	jmp    c0103529 <__alltraps>
+
+c0102c6b <vector50>:
+.globl vector50
+vector50:
+  pushl $0
+c0102c6b:	6a 00                	push   $0x0
+  pushl $50
+c0102c6d:	6a 32                	push   $0x32
+  jmp __alltraps
+c0102c6f:	e9 b5 08 00 00       	jmp    c0103529 <__alltraps>
+
+c0102c74 <vector51>:
+.globl vector51
+vector51:
+  pushl $0
+c0102c74:	6a 00                	push   $0x0
+  pushl $51
+c0102c76:	6a 33                	push   $0x33
+  jmp __alltraps
+c0102c78:	e9 ac 08 00 00       	jmp    c0103529 <__alltraps>
+
+c0102c7d <vector52>:
+.globl vector52
+vector52:
+  pushl $0
+c0102c7d:	6a 00                	push   $0x0
+  pushl $52
+c0102c7f:	6a 34                	push   $0x34
+  jmp __alltraps
+c0102c81:	e9 a3 08 00 00       	jmp    c0103529 <__alltraps>
+
+c0102c86 <vector53>:
+.globl vector53
+vector53:
+  pushl $0
+c0102c86:	6a 00                	push   $0x0
+  pushl $53
+c0102c88:	6a 35                	push   $0x35
+  jmp __alltraps
+c0102c8a:	e9 9a 08 00 00       	jmp    c0103529 <__alltraps>
+
+c0102c8f <vector54>:
+.globl vector54
+vector54:
+  pushl $0
+c0102c8f:	6a 00                	push   $0x0
+  pushl $54
+c0102c91:	6a 36                	push   $0x36
+  jmp __alltraps
+c0102c93:	e9 91 08 00 00       	jmp    c0103529 <__alltraps>
+
+c0102c98 <vector55>:
+.globl vector55
+vector55:
+  pushl $0
+c0102c98:	6a 00                	push   $0x0
+  pushl $55
+c0102c9a:	6a 37                	push   $0x37
+  jmp __alltraps
+c0102c9c:	e9 88 08 00 00       	jmp    c0103529 <__alltraps>
+
+c0102ca1 <vector56>:
+.globl vector56
+vector56:
+  pushl $0
+c0102ca1:	6a 00                	push   $0x0
+  pushl $56
+c0102ca3:	6a 38                	push   $0x38
+  jmp __alltraps
+c0102ca5:	e9 7f 08 00 00       	jmp    c0103529 <__alltraps>
+
+c0102caa <vector57>:
+.globl vector57
+vector57:
+  pushl $0
+c0102caa:	6a 00                	push   $0x0
+  pushl $57
+c0102cac:	6a 39                	push   $0x39
+  jmp __alltraps
+c0102cae:	e9 76 08 00 00       	jmp    c0103529 <__alltraps>
+
+c0102cb3 <vector58>:
+.globl vector58
+vector58:
+  pushl $0
+c0102cb3:	6a 00                	push   $0x0
+  pushl $58
+c0102cb5:	6a 3a                	push   $0x3a
+  jmp __alltraps
+c0102cb7:	e9 6d 08 00 00       	jmp    c0103529 <__alltraps>
+
+c0102cbc <vector59>:
+.globl vector59
+vector59:
+  pushl $0
+c0102cbc:	6a 00                	push   $0x0
+  pushl $59
+c0102cbe:	6a 3b                	push   $0x3b
+  jmp __alltraps
+c0102cc0:	e9 64 08 00 00       	jmp    c0103529 <__alltraps>
+
+c0102cc5 <vector60>:
+.globl vector60
+vector60:
+  pushl $0
+c0102cc5:	6a 00                	push   $0x0
+  pushl $60
+c0102cc7:	6a 3c                	push   $0x3c
+  jmp __alltraps
+c0102cc9:	e9 5b 08 00 00       	jmp    c0103529 <__alltraps>
+
+c0102cce <vector61>:
+.globl vector61
+vector61:
+  pushl $0
+c0102cce:	6a 00                	push   $0x0
+  pushl $61
+c0102cd0:	6a 3d                	push   $0x3d
+  jmp __alltraps
+c0102cd2:	e9 52 08 00 00       	jmp    c0103529 <__alltraps>
+
+c0102cd7 <vector62>:
+.globl vector62
+vector62:
+  pushl $0
+c0102cd7:	6a 00                	push   $0x0
+  pushl $62
+c0102cd9:	6a 3e                	push   $0x3e
+  jmp __alltraps
+c0102cdb:	e9 49 08 00 00       	jmp    c0103529 <__alltraps>
+
+c0102ce0 <vector63>:
+.globl vector63
+vector63:
+  pushl $0
+c0102ce0:	6a 00                	push   $0x0
+  pushl $63
+c0102ce2:	6a 3f                	push   $0x3f
+  jmp __alltraps
+c0102ce4:	e9 40 08 00 00       	jmp    c0103529 <__alltraps>
+
+c0102ce9 <vector64>:
+.globl vector64
+vector64:
+  pushl $0
+c0102ce9:	6a 00                	push   $0x0
+  pushl $64
+c0102ceb:	6a 40                	push   $0x40
+  jmp __alltraps
+c0102ced:	e9 37 08 00 00       	jmp    c0103529 <__alltraps>
+
+c0102cf2 <vector65>:
+.globl vector65
+vector65:
+  pushl $0
+c0102cf2:	6a 00                	push   $0x0
+  pushl $65
+c0102cf4:	6a 41                	push   $0x41
+  jmp __alltraps
+c0102cf6:	e9 2e 08 00 00       	jmp    c0103529 <__alltraps>
+
+c0102cfb <vector66>:
+.globl vector66
+vector66:
+  pushl $0
+c0102cfb:	6a 00                	push   $0x0
+  pushl $66
+c0102cfd:	6a 42                	push   $0x42
+  jmp __alltraps
+c0102cff:	e9 25 08 00 00       	jmp    c0103529 <__alltraps>
+
+c0102d04 <vector67>:
+.globl vector67
+vector67:
+  pushl $0
+c0102d04:	6a 00                	push   $0x0
+  pushl $67
+c0102d06:	6a 43                	push   $0x43
+  jmp __alltraps
+c0102d08:	e9 1c 08 00 00       	jmp    c0103529 <__alltraps>
+
+c0102d0d <vector68>:
+.globl vector68
+vector68:
+  pushl $0
+c0102d0d:	6a 00                	push   $0x0
+  pushl $68
+c0102d0f:	6a 44                	push   $0x44
+  jmp __alltraps
+c0102d11:	e9 13 08 00 00       	jmp    c0103529 <__alltraps>
+
+c0102d16 <vector69>:
+.globl vector69
+vector69:
+  pushl $0
+c0102d16:	6a 00                	push   $0x0
+  pushl $69
+c0102d18:	6a 45                	push   $0x45
+  jmp __alltraps
+c0102d1a:	e9 0a 08 00 00       	jmp    c0103529 <__alltraps>
+
+c0102d1f <vector70>:
+.globl vector70
+vector70:
+  pushl $0
+c0102d1f:	6a 00                	push   $0x0
+  pushl $70
+c0102d21:	6a 46                	push   $0x46
+  jmp __alltraps
+c0102d23:	e9 01 08 00 00       	jmp    c0103529 <__alltraps>
+
+c0102d28 <vector71>:
+.globl vector71
+vector71:
+  pushl $0
+c0102d28:	6a 00                	push   $0x0
+  pushl $71
+c0102d2a:	6a 47                	push   $0x47
+  jmp __alltraps
+c0102d2c:	e9 f8 07 00 00       	jmp    c0103529 <__alltraps>
+
+c0102d31 <vector72>:
+.globl vector72
+vector72:
+  pushl $0
+c0102d31:	6a 00                	push   $0x0
+  pushl $72
+c0102d33:	6a 48                	push   $0x48
+  jmp __alltraps
+c0102d35:	e9 ef 07 00 00       	jmp    c0103529 <__alltraps>
+
+c0102d3a <vector73>:
+.globl vector73
+vector73:
+  pushl $0
+c0102d3a:	6a 00                	push   $0x0
+  pushl $73
+c0102d3c:	6a 49                	push   $0x49
+  jmp __alltraps
+c0102d3e:	e9 e6 07 00 00       	jmp    c0103529 <__alltraps>
+
+c0102d43 <vector74>:
+.globl vector74
+vector74:
+  pushl $0
+c0102d43:	6a 00                	push   $0x0
+  pushl $74
+c0102d45:	6a 4a                	push   $0x4a
+  jmp __alltraps
+c0102d47:	e9 dd 07 00 00       	jmp    c0103529 <__alltraps>
+
+c0102d4c <vector75>:
+.globl vector75
+vector75:
+  pushl $0
+c0102d4c:	6a 00                	push   $0x0
+  pushl $75
+c0102d4e:	6a 4b                	push   $0x4b
+  jmp __alltraps
+c0102d50:	e9 d4 07 00 00       	jmp    c0103529 <__alltraps>
+
+c0102d55 <vector76>:
+.globl vector76
+vector76:
+  pushl $0
+c0102d55:	6a 00                	push   $0x0
+  pushl $76
+c0102d57:	6a 4c                	push   $0x4c
+  jmp __alltraps
+c0102d59:	e9 cb 07 00 00       	jmp    c0103529 <__alltraps>
+
+c0102d5e <vector77>:
+.globl vector77
+vector77:
+  pushl $0
+c0102d5e:	6a 00                	push   $0x0
+  pushl $77
+c0102d60:	6a 4d                	push   $0x4d
+  jmp __alltraps
+c0102d62:	e9 c2 07 00 00       	jmp    c0103529 <__alltraps>
+
+c0102d67 <vector78>:
+.globl vector78
+vector78:
+  pushl $0
+c0102d67:	6a 00                	push   $0x0
+  pushl $78
+c0102d69:	6a 4e                	push   $0x4e
+  jmp __alltraps
+c0102d6b:	e9 b9 07 00 00       	jmp    c0103529 <__alltraps>
+
+c0102d70 <vector79>:
+.globl vector79
+vector79:
+  pushl $0
+c0102d70:	6a 00                	push   $0x0
+  pushl $79
+c0102d72:	6a 4f                	push   $0x4f
+  jmp __alltraps
+c0102d74:	e9 b0 07 00 00       	jmp    c0103529 <__alltraps>
+
+c0102d79 <vector80>:
+.globl vector80
+vector80:
+  pushl $0
+c0102d79:	6a 00                	push   $0x0
+  pushl $80
+c0102d7b:	6a 50                	push   $0x50
+  jmp __alltraps
+c0102d7d:	e9 a7 07 00 00       	jmp    c0103529 <__alltraps>
+
+c0102d82 <vector81>:
+.globl vector81
+vector81:
+  pushl $0
+c0102d82:	6a 00                	push   $0x0
+  pushl $81
+c0102d84:	6a 51                	push   $0x51
+  jmp __alltraps
+c0102d86:	e9 9e 07 00 00       	jmp    c0103529 <__alltraps>
+
+c0102d8b <vector82>:
+.globl vector82
+vector82:
+  pushl $0
+c0102d8b:	6a 00                	push   $0x0
+  pushl $82
+c0102d8d:	6a 52                	push   $0x52
+  jmp __alltraps
+c0102d8f:	e9 95 07 00 00       	jmp    c0103529 <__alltraps>
+
+c0102d94 <vector83>:
+.globl vector83
+vector83:
+  pushl $0
+c0102d94:	6a 00                	push   $0x0
+  pushl $83
+c0102d96:	6a 53                	push   $0x53
+  jmp __alltraps
+c0102d98:	e9 8c 07 00 00       	jmp    c0103529 <__alltraps>
+
+c0102d9d <vector84>:
+.globl vector84
+vector84:
+  pushl $0
+c0102d9d:	6a 00                	push   $0x0
+  pushl $84
+c0102d9f:	6a 54                	push   $0x54
+  jmp __alltraps
+c0102da1:	e9 83 07 00 00       	jmp    c0103529 <__alltraps>
+
+c0102da6 <vector85>:
+.globl vector85
+vector85:
+  pushl $0
+c0102da6:	6a 00                	push   $0x0
+  pushl $85
+c0102da8:	6a 55                	push   $0x55
+  jmp __alltraps
+c0102daa:	e9 7a 07 00 00       	jmp    c0103529 <__alltraps>
+
+c0102daf <vector86>:
+.globl vector86
+vector86:
+  pushl $0
+c0102daf:	6a 00                	push   $0x0
+  pushl $86
+c0102db1:	6a 56                	push   $0x56
+  jmp __alltraps
+c0102db3:	e9 71 07 00 00       	jmp    c0103529 <__alltraps>
+
+c0102db8 <vector87>:
+.globl vector87
+vector87:
+  pushl $0
+c0102db8:	6a 00                	push   $0x0
+  pushl $87
+c0102dba:	6a 57                	push   $0x57
+  jmp __alltraps
+c0102dbc:	e9 68 07 00 00       	jmp    c0103529 <__alltraps>
+
+c0102dc1 <vector88>:
+.globl vector88
+vector88:
+  pushl $0
+c0102dc1:	6a 00                	push   $0x0
+  pushl $88
+c0102dc3:	6a 58                	push   $0x58
+  jmp __alltraps
+c0102dc5:	e9 5f 07 00 00       	jmp    c0103529 <__alltraps>
+
+c0102dca <vector89>:
+.globl vector89
+vector89:
+  pushl $0
+c0102dca:	6a 00                	push   $0x0
+  pushl $89
+c0102dcc:	6a 59                	push   $0x59
+  jmp __alltraps
+c0102dce:	e9 56 07 00 00       	jmp    c0103529 <__alltraps>
+
+c0102dd3 <vector90>:
+.globl vector90
+vector90:
+  pushl $0
+c0102dd3:	6a 00                	push   $0x0
+  pushl $90
+c0102dd5:	6a 5a                	push   $0x5a
+  jmp __alltraps
+c0102dd7:	e9 4d 07 00 00       	jmp    c0103529 <__alltraps>
+
+c0102ddc <vector91>:
+.globl vector91
+vector91:
+  pushl $0
+c0102ddc:	6a 00                	push   $0x0
+  pushl $91
+c0102dde:	6a 5b                	push   $0x5b
+  jmp __alltraps
+c0102de0:	e9 44 07 00 00       	jmp    c0103529 <__alltraps>
+
+c0102de5 <vector92>:
+.globl vector92
+vector92:
+  pushl $0
+c0102de5:	6a 00                	push   $0x0
+  pushl $92
+c0102de7:	6a 5c                	push   $0x5c
+  jmp __alltraps
+c0102de9:	e9 3b 07 00 00       	jmp    c0103529 <__alltraps>
+
+c0102dee <vector93>:
+.globl vector93
+vector93:
+  pushl $0
+c0102dee:	6a 00                	push   $0x0
+  pushl $93
+c0102df0:	6a 5d                	push   $0x5d
+  jmp __alltraps
+c0102df2:	e9 32 07 00 00       	jmp    c0103529 <__alltraps>
+
+c0102df7 <vector94>:
+.globl vector94
+vector94:
+  pushl $0
+c0102df7:	6a 00                	push   $0x0
+  pushl $94
+c0102df9:	6a 5e                	push   $0x5e
+  jmp __alltraps
+c0102dfb:	e9 29 07 00 00       	jmp    c0103529 <__alltraps>
+
+c0102e00 <vector95>:
+.globl vector95
+vector95:
+  pushl $0
+c0102e00:	6a 00                	push   $0x0
+  pushl $95
+c0102e02:	6a 5f                	push   $0x5f
+  jmp __alltraps
+c0102e04:	e9 20 07 00 00       	jmp    c0103529 <__alltraps>
+
+c0102e09 <vector96>:
+.globl vector96
+vector96:
+  pushl $0
+c0102e09:	6a 00                	push   $0x0
+  pushl $96
+c0102e0b:	6a 60                	push   $0x60
+  jmp __alltraps
+c0102e0d:	e9 17 07 00 00       	jmp    c0103529 <__alltraps>
+
+c0102e12 <vector97>:
+.globl vector97
+vector97:
+  pushl $0
+c0102e12:	6a 00                	push   $0x0
+  pushl $97
+c0102e14:	6a 61                	push   $0x61
+  jmp __alltraps
+c0102e16:	e9 0e 07 00 00       	jmp    c0103529 <__alltraps>
+
+c0102e1b <vector98>:
+.globl vector98
+vector98:
+  pushl $0
+c0102e1b:	6a 00                	push   $0x0
+  pushl $98
+c0102e1d:	6a 62                	push   $0x62
+  jmp __alltraps
+c0102e1f:	e9 05 07 00 00       	jmp    c0103529 <__alltraps>
+
+c0102e24 <vector99>:
+.globl vector99
+vector99:
+  pushl $0
+c0102e24:	6a 00                	push   $0x0
+  pushl $99
+c0102e26:	6a 63                	push   $0x63
+  jmp __alltraps
+c0102e28:	e9 fc 06 00 00       	jmp    c0103529 <__alltraps>
+
+c0102e2d <vector100>:
+.globl vector100
+vector100:
+  pushl $0
+c0102e2d:	6a 00                	push   $0x0
+  pushl $100
+c0102e2f:	6a 64                	push   $0x64
+  jmp __alltraps
+c0102e31:	e9 f3 06 00 00       	jmp    c0103529 <__alltraps>
+
+c0102e36 <vector101>:
+.globl vector101
+vector101:
+  pushl $0
+c0102e36:	6a 00                	push   $0x0
+  pushl $101
+c0102e38:	6a 65                	push   $0x65
+  jmp __alltraps
+c0102e3a:	e9 ea 06 00 00       	jmp    c0103529 <__alltraps>
+
+c0102e3f <vector102>:
+.globl vector102
+vector102:
+  pushl $0
+c0102e3f:	6a 00                	push   $0x0
+  pushl $102
+c0102e41:	6a 66                	push   $0x66
+  jmp __alltraps
+c0102e43:	e9 e1 06 00 00       	jmp    c0103529 <__alltraps>
+
+c0102e48 <vector103>:
+.globl vector103
+vector103:
+  pushl $0
+c0102e48:	6a 00                	push   $0x0
+  pushl $103
+c0102e4a:	6a 67                	push   $0x67
+  jmp __alltraps
+c0102e4c:	e9 d8 06 00 00       	jmp    c0103529 <__alltraps>
+
+c0102e51 <vector104>:
+.globl vector104
+vector104:
+  pushl $0
+c0102e51:	6a 00                	push   $0x0
+  pushl $104
+c0102e53:	6a 68                	push   $0x68
+  jmp __alltraps
+c0102e55:	e9 cf 06 00 00       	jmp    c0103529 <__alltraps>
+
+c0102e5a <vector105>:
+.globl vector105
+vector105:
+  pushl $0
+c0102e5a:	6a 00                	push   $0x0
+  pushl $105
+c0102e5c:	6a 69                	push   $0x69
+  jmp __alltraps
+c0102e5e:	e9 c6 06 00 00       	jmp    c0103529 <__alltraps>
+
+c0102e63 <vector106>:
+.globl vector106
+vector106:
+  pushl $0
+c0102e63:	6a 00                	push   $0x0
+  pushl $106
+c0102e65:	6a 6a                	push   $0x6a
+  jmp __alltraps
+c0102e67:	e9 bd 06 00 00       	jmp    c0103529 <__alltraps>
+
+c0102e6c <vector107>:
+.globl vector107
+vector107:
+  pushl $0
+c0102e6c:	6a 00                	push   $0x0
+  pushl $107
+c0102e6e:	6a 6b                	push   $0x6b
+  jmp __alltraps
+c0102e70:	e9 b4 06 00 00       	jmp    c0103529 <__alltraps>
+
+c0102e75 <vector108>:
+.globl vector108
+vector108:
+  pushl $0
+c0102e75:	6a 00                	push   $0x0
+  pushl $108
+c0102e77:	6a 6c                	push   $0x6c
+  jmp __alltraps
+c0102e79:	e9 ab 06 00 00       	jmp    c0103529 <__alltraps>
+
+c0102e7e <vector109>:
+.globl vector109
+vector109:
+  pushl $0
+c0102e7e:	6a 00                	push   $0x0
+  pushl $109
+c0102e80:	6a 6d                	push   $0x6d
+  jmp __alltraps
+c0102e82:	e9 a2 06 00 00       	jmp    c0103529 <__alltraps>
+
+c0102e87 <vector110>:
+.globl vector110
+vector110:
+  pushl $0
+c0102e87:	6a 00                	push   $0x0
+  pushl $110
+c0102e89:	6a 6e                	push   $0x6e
+  jmp __alltraps
+c0102e8b:	e9 99 06 00 00       	jmp    c0103529 <__alltraps>
+
+c0102e90 <vector111>:
+.globl vector111
+vector111:
+  pushl $0
+c0102e90:	6a 00                	push   $0x0
+  pushl $111
+c0102e92:	6a 6f                	push   $0x6f
+  jmp __alltraps
+c0102e94:	e9 90 06 00 00       	jmp    c0103529 <__alltraps>
+
+c0102e99 <vector112>:
+.globl vector112
+vector112:
+  pushl $0
+c0102e99:	6a 00                	push   $0x0
+  pushl $112
+c0102e9b:	6a 70                	push   $0x70
+  jmp __alltraps
+c0102e9d:	e9 87 06 00 00       	jmp    c0103529 <__alltraps>
+
+c0102ea2 <vector113>:
+.globl vector113
+vector113:
+  pushl $0
+c0102ea2:	6a 00                	push   $0x0
+  pushl $113
+c0102ea4:	6a 71                	push   $0x71
+  jmp __alltraps
+c0102ea6:	e9 7e 06 00 00       	jmp    c0103529 <__alltraps>
+
+c0102eab <vector114>:
+.globl vector114
+vector114:
+  pushl $0
+c0102eab:	6a 00                	push   $0x0
+  pushl $114
+c0102ead:	6a 72                	push   $0x72
+  jmp __alltraps
+c0102eaf:	e9 75 06 00 00       	jmp    c0103529 <__alltraps>
+
+c0102eb4 <vector115>:
+.globl vector115
+vector115:
+  pushl $0
+c0102eb4:	6a 00                	push   $0x0
+  pushl $115
+c0102eb6:	6a 73                	push   $0x73
+  jmp __alltraps
+c0102eb8:	e9 6c 06 00 00       	jmp    c0103529 <__alltraps>
+
+c0102ebd <vector116>:
+.globl vector116
+vector116:
+  pushl $0
+c0102ebd:	6a 00                	push   $0x0
+  pushl $116
+c0102ebf:	6a 74                	push   $0x74
+  jmp __alltraps
+c0102ec1:	e9 63 06 00 00       	jmp    c0103529 <__alltraps>
+
+c0102ec6 <vector117>:
+.globl vector117
+vector117:
+  pushl $0
+c0102ec6:	6a 00                	push   $0x0
+  pushl $117
+c0102ec8:	6a 75                	push   $0x75
+  jmp __alltraps
+c0102eca:	e9 5a 06 00 00       	jmp    c0103529 <__alltraps>
+
+c0102ecf <vector118>:
+.globl vector118
+vector118:
+  pushl $0
+c0102ecf:	6a 00                	push   $0x0
+  pushl $118
+c0102ed1:	6a 76                	push   $0x76
+  jmp __alltraps
+c0102ed3:	e9 51 06 00 00       	jmp    c0103529 <__alltraps>
+
+c0102ed8 <vector119>:
+.globl vector119
+vector119:
+  pushl $0
+c0102ed8:	6a 00                	push   $0x0
+  pushl $119
+c0102eda:	6a 77                	push   $0x77
+  jmp __alltraps
+c0102edc:	e9 48 06 00 00       	jmp    c0103529 <__alltraps>
+
+c0102ee1 <vector120>:
+.globl vector120
+vector120:
+  pushl $0
+c0102ee1:	6a 00                	push   $0x0
+  pushl $120
+c0102ee3:	6a 78                	push   $0x78
+  jmp __alltraps
+c0102ee5:	e9 3f 06 00 00       	jmp    c0103529 <__alltraps>
+
+c0102eea <vector121>:
+.globl vector121
+vector121:
+  pushl $0
+c0102eea:	6a 00                	push   $0x0
+  pushl $121
+c0102eec:	6a 79                	push   $0x79
+  jmp __alltraps
+c0102eee:	e9 36 06 00 00       	jmp    c0103529 <__alltraps>
+
+c0102ef3 <vector122>:
+.globl vector122
+vector122:
+  pushl $0
+c0102ef3:	6a 00                	push   $0x0
+  pushl $122
+c0102ef5:	6a 7a                	push   $0x7a
+  jmp __alltraps
+c0102ef7:	e9 2d 06 00 00       	jmp    c0103529 <__alltraps>
+
+c0102efc <vector123>:
+.globl vector123
+vector123:
+  pushl $0
+c0102efc:	6a 00                	push   $0x0
+  pushl $123
+c0102efe:	6a 7b                	push   $0x7b
+  jmp __alltraps
+c0102f00:	e9 24 06 00 00       	jmp    c0103529 <__alltraps>
+
+c0102f05 <vector124>:
+.globl vector124
+vector124:
+  pushl $0
+c0102f05:	6a 00                	push   $0x0
+  pushl $124
+c0102f07:	6a 7c                	push   $0x7c
+  jmp __alltraps
+c0102f09:	e9 1b 06 00 00       	jmp    c0103529 <__alltraps>
+
+c0102f0e <vector125>:
+.globl vector125
+vector125:
+  pushl $0
+c0102f0e:	6a 00                	push   $0x0
+  pushl $125
+c0102f10:	6a 7d                	push   $0x7d
+  jmp __alltraps
+c0102f12:	e9 12 06 00 00       	jmp    c0103529 <__alltraps>
+
+c0102f17 <vector126>:
+.globl vector126
+vector126:
+  pushl $0
+c0102f17:	6a 00                	push   $0x0
+  pushl $126
+c0102f19:	6a 7e                	push   $0x7e
+  jmp __alltraps
+c0102f1b:	e9 09 06 00 00       	jmp    c0103529 <__alltraps>
+
+c0102f20 <vector127>:
+.globl vector127
+vector127:
+  pushl $0
+c0102f20:	6a 00                	push   $0x0
+  pushl $127
+c0102f22:	6a 7f                	push   $0x7f
+  jmp __alltraps
+c0102f24:	e9 00 06 00 00       	jmp    c0103529 <__alltraps>
+
+c0102f29 <vector128>:
+.globl vector128
+vector128:
+  pushl $0
+c0102f29:	6a 00                	push   $0x0
+  pushl $128
+c0102f2b:	68 80 00 00 00       	push   $0x80
+  jmp __alltraps
+c0102f30:	e9 f4 05 00 00       	jmp    c0103529 <__alltraps>
+
+c0102f35 <vector129>:
+.globl vector129
+vector129:
+  pushl $0
+c0102f35:	6a 00                	push   $0x0
+  pushl $129
+c0102f37:	68 81 00 00 00       	push   $0x81
+  jmp __alltraps
+c0102f3c:	e9 e8 05 00 00       	jmp    c0103529 <__alltraps>
+
+c0102f41 <vector130>:
+.globl vector130
+vector130:
+  pushl $0
+c0102f41:	6a 00                	push   $0x0
+  pushl $130
+c0102f43:	68 82 00 00 00       	push   $0x82
+  jmp __alltraps
+c0102f48:	e9 dc 05 00 00       	jmp    c0103529 <__alltraps>
+
+c0102f4d <vector131>:
+.globl vector131
+vector131:
+  pushl $0
+c0102f4d:	6a 00                	push   $0x0
+  pushl $131
+c0102f4f:	68 83 00 00 00       	push   $0x83
+  jmp __alltraps
+c0102f54:	e9 d0 05 00 00       	jmp    c0103529 <__alltraps>
+
+c0102f59 <vector132>:
+.globl vector132
+vector132:
+  pushl $0
+c0102f59:	6a 00                	push   $0x0
+  pushl $132
+c0102f5b:	68 84 00 00 00       	push   $0x84
+  jmp __alltraps
+c0102f60:	e9 c4 05 00 00       	jmp    c0103529 <__alltraps>
+
+c0102f65 <vector133>:
+.globl vector133
+vector133:
+  pushl $0
+c0102f65:	6a 00                	push   $0x0
+  pushl $133
+c0102f67:	68 85 00 00 00       	push   $0x85
+  jmp __alltraps
+c0102f6c:	e9 b8 05 00 00       	jmp    c0103529 <__alltraps>
+
+c0102f71 <vector134>:
+.globl vector134
+vector134:
+  pushl $0
+c0102f71:	6a 00                	push   $0x0
+  pushl $134
+c0102f73:	68 86 00 00 00       	push   $0x86
+  jmp __alltraps
+c0102f78:	e9 ac 05 00 00       	jmp    c0103529 <__alltraps>
+
+c0102f7d <vector135>:
+.globl vector135
+vector135:
+  pushl $0
+c0102f7d:	6a 00                	push   $0x0
+  pushl $135
+c0102f7f:	68 87 00 00 00       	push   $0x87
+  jmp __alltraps
+c0102f84:	e9 a0 05 00 00       	jmp    c0103529 <__alltraps>
+
+c0102f89 <vector136>:
+.globl vector136
+vector136:
+  pushl $0
+c0102f89:	6a 00                	push   $0x0
+  pushl $136
+c0102f8b:	68 88 00 00 00       	push   $0x88
+  jmp __alltraps
+c0102f90:	e9 94 05 00 00       	jmp    c0103529 <__alltraps>
+
+c0102f95 <vector137>:
+.globl vector137
+vector137:
+  pushl $0
+c0102f95:	6a 00                	push   $0x0
+  pushl $137
+c0102f97:	68 89 00 00 00       	push   $0x89
+  jmp __alltraps
+c0102f9c:	e9 88 05 00 00       	jmp    c0103529 <__alltraps>
+
+c0102fa1 <vector138>:
+.globl vector138
+vector138:
+  pushl $0
+c0102fa1:	6a 00                	push   $0x0
+  pushl $138
+c0102fa3:	68 8a 00 00 00       	push   $0x8a
+  jmp __alltraps
+c0102fa8:	e9 7c 05 00 00       	jmp    c0103529 <__alltraps>
+
+c0102fad <vector139>:
+.globl vector139
+vector139:
+  pushl $0
+c0102fad:	6a 00                	push   $0x0
+  pushl $139
+c0102faf:	68 8b 00 00 00       	push   $0x8b
+  jmp __alltraps
+c0102fb4:	e9 70 05 00 00       	jmp    c0103529 <__alltraps>
+
+c0102fb9 <vector140>:
+.globl vector140
+vector140:
+  pushl $0
+c0102fb9:	6a 00                	push   $0x0
+  pushl $140
+c0102fbb:	68 8c 00 00 00       	push   $0x8c
+  jmp __alltraps
+c0102fc0:	e9 64 05 00 00       	jmp    c0103529 <__alltraps>
+
+c0102fc5 <vector141>:
+.globl vector141
+vector141:
+  pushl $0
+c0102fc5:	6a 00                	push   $0x0
+  pushl $141
+c0102fc7:	68 8d 00 00 00       	push   $0x8d
+  jmp __alltraps
+c0102fcc:	e9 58 05 00 00       	jmp    c0103529 <__alltraps>
+
+c0102fd1 <vector142>:
+.globl vector142
+vector142:
+  pushl $0
+c0102fd1:	6a 00                	push   $0x0
+  pushl $142
+c0102fd3:	68 8e 00 00 00       	push   $0x8e
+  jmp __alltraps
+c0102fd8:	e9 4c 05 00 00       	jmp    c0103529 <__alltraps>
+
+c0102fdd <vector143>:
+.globl vector143
+vector143:
+  pushl $0
+c0102fdd:	6a 00                	push   $0x0
+  pushl $143
+c0102fdf:	68 8f 00 00 00       	push   $0x8f
+  jmp __alltraps
+c0102fe4:	e9 40 05 00 00       	jmp    c0103529 <__alltraps>
+
+c0102fe9 <vector144>:
+.globl vector144
+vector144:
+  pushl $0
+c0102fe9:	6a 00                	push   $0x0
+  pushl $144
+c0102feb:	68 90 00 00 00       	push   $0x90
+  jmp __alltraps
+c0102ff0:	e9 34 05 00 00       	jmp    c0103529 <__alltraps>
+
+c0102ff5 <vector145>:
+.globl vector145
+vector145:
+  pushl $0
+c0102ff5:	6a 00                	push   $0x0
+  pushl $145
+c0102ff7:	68 91 00 00 00       	push   $0x91
+  jmp __alltraps
+c0102ffc:	e9 28 05 00 00       	jmp    c0103529 <__alltraps>
+
+c0103001 <vector146>:
+.globl vector146
+vector146:
+  pushl $0
+c0103001:	6a 00                	push   $0x0
+  pushl $146
+c0103003:	68 92 00 00 00       	push   $0x92
+  jmp __alltraps
+c0103008:	e9 1c 05 00 00       	jmp    c0103529 <__alltraps>
+
+c010300d <vector147>:
+.globl vector147
+vector147:
+  pushl $0
+c010300d:	6a 00                	push   $0x0
+  pushl $147
+c010300f:	68 93 00 00 00       	push   $0x93
+  jmp __alltraps
+c0103014:	e9 10 05 00 00       	jmp    c0103529 <__alltraps>
+
+c0103019 <vector148>:
+.globl vector148
+vector148:
+  pushl $0
+c0103019:	6a 00                	push   $0x0
+  pushl $148
+c010301b:	68 94 00 00 00       	push   $0x94
+  jmp __alltraps
+c0103020:	e9 04 05 00 00       	jmp    c0103529 <__alltraps>
+
+c0103025 <vector149>:
+.globl vector149
+vector149:
+  pushl $0
+c0103025:	6a 00                	push   $0x0
+  pushl $149
+c0103027:	68 95 00 00 00       	push   $0x95
+  jmp __alltraps
+c010302c:	e9 f8 04 00 00       	jmp    c0103529 <__alltraps>
+
+c0103031 <vector150>:
+.globl vector150
+vector150:
+  pushl $0
+c0103031:	6a 00                	push   $0x0
+  pushl $150
+c0103033:	68 96 00 00 00       	push   $0x96
+  jmp __alltraps
+c0103038:	e9 ec 04 00 00       	jmp    c0103529 <__alltraps>
+
+c010303d <vector151>:
+.globl vector151
+vector151:
+  pushl $0
+c010303d:	6a 00                	push   $0x0
+  pushl $151
+c010303f:	68 97 00 00 00       	push   $0x97
+  jmp __alltraps
+c0103044:	e9 e0 04 00 00       	jmp    c0103529 <__alltraps>
+
+c0103049 <vector152>:
+.globl vector152
+vector152:
+  pushl $0
+c0103049:	6a 00                	push   $0x0
+  pushl $152
+c010304b:	68 98 00 00 00       	push   $0x98
+  jmp __alltraps
+c0103050:	e9 d4 04 00 00       	jmp    c0103529 <__alltraps>
+
+c0103055 <vector153>:
+.globl vector153
+vector153:
+  pushl $0
+c0103055:	6a 00                	push   $0x0
+  pushl $153
+c0103057:	68 99 00 00 00       	push   $0x99
+  jmp __alltraps
+c010305c:	e9 c8 04 00 00       	jmp    c0103529 <__alltraps>
+
+c0103061 <vector154>:
+.globl vector154
+vector154:
+  pushl $0
+c0103061:	6a 00                	push   $0x0
+  pushl $154
+c0103063:	68 9a 00 00 00       	push   $0x9a
+  jmp __alltraps
+c0103068:	e9 bc 04 00 00       	jmp    c0103529 <__alltraps>
+
+c010306d <vector155>:
+.globl vector155
+vector155:
+  pushl $0
+c010306d:	6a 00                	push   $0x0
+  pushl $155
+c010306f:	68 9b 00 00 00       	push   $0x9b
+  jmp __alltraps
+c0103074:	e9 b0 04 00 00       	jmp    c0103529 <__alltraps>
+
+c0103079 <vector156>:
+.globl vector156
+vector156:
+  pushl $0
+c0103079:	6a 00                	push   $0x0
+  pushl $156
+c010307b:	68 9c 00 00 00       	push   $0x9c
+  jmp __alltraps
+c0103080:	e9 a4 04 00 00       	jmp    c0103529 <__alltraps>
+
+c0103085 <vector157>:
+.globl vector157
+vector157:
+  pushl $0
+c0103085:	6a 00                	push   $0x0
+  pushl $157
+c0103087:	68 9d 00 00 00       	push   $0x9d
+  jmp __alltraps
+c010308c:	e9 98 04 00 00       	jmp    c0103529 <__alltraps>
+
+c0103091 <vector158>:
+.globl vector158
+vector158:
+  pushl $0
+c0103091:	6a 00                	push   $0x0
+  pushl $158
+c0103093:	68 9e 00 00 00       	push   $0x9e
+  jmp __alltraps
+c0103098:	e9 8c 04 00 00       	jmp    c0103529 <__alltraps>
+
+c010309d <vector159>:
+.globl vector159
+vector159:
+  pushl $0
+c010309d:	6a 00                	push   $0x0
+  pushl $159
+c010309f:	68 9f 00 00 00       	push   $0x9f
+  jmp __alltraps
+c01030a4:	e9 80 04 00 00       	jmp    c0103529 <__alltraps>
+
+c01030a9 <vector160>:
+.globl vector160
+vector160:
+  pushl $0
+c01030a9:	6a 00                	push   $0x0
+  pushl $160
+c01030ab:	68 a0 00 00 00       	push   $0xa0
+  jmp __alltraps
+c01030b0:	e9 74 04 00 00       	jmp    c0103529 <__alltraps>
+
+c01030b5 <vector161>:
+.globl vector161
+vector161:
+  pushl $0
+c01030b5:	6a 00                	push   $0x0
+  pushl $161
+c01030b7:	68 a1 00 00 00       	push   $0xa1
+  jmp __alltraps
+c01030bc:	e9 68 04 00 00       	jmp    c0103529 <__alltraps>
+
+c01030c1 <vector162>:
+.globl vector162
+vector162:
+  pushl $0
+c01030c1:	6a 00                	push   $0x0
+  pushl $162
+c01030c3:	68 a2 00 00 00       	push   $0xa2
+  jmp __alltraps
+c01030c8:	e9 5c 04 00 00       	jmp    c0103529 <__alltraps>
+
+c01030cd <vector163>:
+.globl vector163
+vector163:
+  pushl $0
+c01030cd:	6a 00                	push   $0x0
+  pushl $163
+c01030cf:	68 a3 00 00 00       	push   $0xa3
+  jmp __alltraps
+c01030d4:	e9 50 04 00 00       	jmp    c0103529 <__alltraps>
+
+c01030d9 <vector164>:
+.globl vector164
+vector164:
+  pushl $0
+c01030d9:	6a 00                	push   $0x0
+  pushl $164
+c01030db:	68 a4 00 00 00       	push   $0xa4
+  jmp __alltraps
+c01030e0:	e9 44 04 00 00       	jmp    c0103529 <__alltraps>
+
+c01030e5 <vector165>:
+.globl vector165
+vector165:
+  pushl $0
+c01030e5:	6a 00                	push   $0x0
+  pushl $165
+c01030e7:	68 a5 00 00 00       	push   $0xa5
+  jmp __alltraps
+c01030ec:	e9 38 04 00 00       	jmp    c0103529 <__alltraps>
+
+c01030f1 <vector166>:
+.globl vector166
+vector166:
+  pushl $0
+c01030f1:	6a 00                	push   $0x0
+  pushl $166
+c01030f3:	68 a6 00 00 00       	push   $0xa6
+  jmp __alltraps
+c01030f8:	e9 2c 04 00 00       	jmp    c0103529 <__alltraps>
+
+c01030fd <vector167>:
+.globl vector167
+vector167:
+  pushl $0
+c01030fd:	6a 00                	push   $0x0
+  pushl $167
+c01030ff:	68 a7 00 00 00       	push   $0xa7
+  jmp __alltraps
+c0103104:	e9 20 04 00 00       	jmp    c0103529 <__alltraps>
+
+c0103109 <vector168>:
+.globl vector168
+vector168:
+  pushl $0
+c0103109:	6a 00                	push   $0x0
+  pushl $168
+c010310b:	68 a8 00 00 00       	push   $0xa8
+  jmp __alltraps
+c0103110:	e9 14 04 00 00       	jmp    c0103529 <__alltraps>
+
+c0103115 <vector169>:
+.globl vector169
+vector169:
+  pushl $0
+c0103115:	6a 00                	push   $0x0
+  pushl $169
+c0103117:	68 a9 00 00 00       	push   $0xa9
+  jmp __alltraps
+c010311c:	e9 08 04 00 00       	jmp    c0103529 <__alltraps>
+
+c0103121 <vector170>:
+.globl vector170
+vector170:
+  pushl $0
+c0103121:	6a 00                	push   $0x0
+  pushl $170
+c0103123:	68 aa 00 00 00       	push   $0xaa
+  jmp __alltraps
+c0103128:	e9 fc 03 00 00       	jmp    c0103529 <__alltraps>
+
+c010312d <vector171>:
+.globl vector171
+vector171:
+  pushl $0
+c010312d:	6a 00                	push   $0x0
+  pushl $171
+c010312f:	68 ab 00 00 00       	push   $0xab
+  jmp __alltraps
+c0103134:	e9 f0 03 00 00       	jmp    c0103529 <__alltraps>
+
+c0103139 <vector172>:
+.globl vector172
+vector172:
+  pushl $0
+c0103139:	6a 00                	push   $0x0
+  pushl $172
+c010313b:	68 ac 00 00 00       	push   $0xac
+  jmp __alltraps
+c0103140:	e9 e4 03 00 00       	jmp    c0103529 <__alltraps>
+
+c0103145 <vector173>:
+.globl vector173
+vector173:
+  pushl $0
+c0103145:	6a 00                	push   $0x0
+  pushl $173
+c0103147:	68 ad 00 00 00       	push   $0xad
+  jmp __alltraps
+c010314c:	e9 d8 03 00 00       	jmp    c0103529 <__alltraps>
+
+c0103151 <vector174>:
+.globl vector174
+vector174:
+  pushl $0
+c0103151:	6a 00                	push   $0x0
+  pushl $174
+c0103153:	68 ae 00 00 00       	push   $0xae
+  jmp __alltraps
+c0103158:	e9 cc 03 00 00       	jmp    c0103529 <__alltraps>
+
+c010315d <vector175>:
+.globl vector175
+vector175:
+  pushl $0
+c010315d:	6a 00                	push   $0x0
+  pushl $175
+c010315f:	68 af 00 00 00       	push   $0xaf
+  jmp __alltraps
+c0103164:	e9 c0 03 00 00       	jmp    c0103529 <__alltraps>
+
+c0103169 <vector176>:
+.globl vector176
+vector176:
+  pushl $0
+c0103169:	6a 00                	push   $0x0
+  pushl $176
+c010316b:	68 b0 00 00 00       	push   $0xb0
+  jmp __alltraps
+c0103170:	e9 b4 03 00 00       	jmp    c0103529 <__alltraps>
+
+c0103175 <vector177>:
+.globl vector177
+vector177:
+  pushl $0
+c0103175:	6a 00                	push   $0x0
+  pushl $177
+c0103177:	68 b1 00 00 00       	push   $0xb1
+  jmp __alltraps
+c010317c:	e9 a8 03 00 00       	jmp    c0103529 <__alltraps>
+
+c0103181 <vector178>:
+.globl vector178
+vector178:
+  pushl $0
+c0103181:	6a 00                	push   $0x0
+  pushl $178
+c0103183:	68 b2 00 00 00       	push   $0xb2
+  jmp __alltraps
+c0103188:	e9 9c 03 00 00       	jmp    c0103529 <__alltraps>
+
+c010318d <vector179>:
+.globl vector179
+vector179:
+  pushl $0
+c010318d:	6a 00                	push   $0x0
+  pushl $179
+c010318f:	68 b3 00 00 00       	push   $0xb3
+  jmp __alltraps
+c0103194:	e9 90 03 00 00       	jmp    c0103529 <__alltraps>
+
+c0103199 <vector180>:
+.globl vector180
+vector180:
+  pushl $0
+c0103199:	6a 00                	push   $0x0
+  pushl $180
+c010319b:	68 b4 00 00 00       	push   $0xb4
+  jmp __alltraps
+c01031a0:	e9 84 03 00 00       	jmp    c0103529 <__alltraps>
+
+c01031a5 <vector181>:
+.globl vector181
+vector181:
+  pushl $0
+c01031a5:	6a 00                	push   $0x0
+  pushl $181
+c01031a7:	68 b5 00 00 00       	push   $0xb5
+  jmp __alltraps
+c01031ac:	e9 78 03 00 00       	jmp    c0103529 <__alltraps>
+
+c01031b1 <vector182>:
+.globl vector182
+vector182:
+  pushl $0
+c01031b1:	6a 00                	push   $0x0
+  pushl $182
+c01031b3:	68 b6 00 00 00       	push   $0xb6
+  jmp __alltraps
+c01031b8:	e9 6c 03 00 00       	jmp    c0103529 <__alltraps>
+
+c01031bd <vector183>:
+.globl vector183
+vector183:
+  pushl $0
+c01031bd:	6a 00                	push   $0x0
+  pushl $183
+c01031bf:	68 b7 00 00 00       	push   $0xb7
+  jmp __alltraps
+c01031c4:	e9 60 03 00 00       	jmp    c0103529 <__alltraps>
+
+c01031c9 <vector184>:
+.globl vector184
+vector184:
+  pushl $0
+c01031c9:	6a 00                	push   $0x0
+  pushl $184
+c01031cb:	68 b8 00 00 00       	push   $0xb8
+  jmp __alltraps
+c01031d0:	e9 54 03 00 00       	jmp    c0103529 <__alltraps>
+
+c01031d5 <vector185>:
+.globl vector185
+vector185:
+  pushl $0
+c01031d5:	6a 00                	push   $0x0
+  pushl $185
+c01031d7:	68 b9 00 00 00       	push   $0xb9
+  jmp __alltraps
+c01031dc:	e9 48 03 00 00       	jmp    c0103529 <__alltraps>
+
+c01031e1 <vector186>:
+.globl vector186
+vector186:
+  pushl $0
+c01031e1:	6a 00                	push   $0x0
+  pushl $186
+c01031e3:	68 ba 00 00 00       	push   $0xba
+  jmp __alltraps
+c01031e8:	e9 3c 03 00 00       	jmp    c0103529 <__alltraps>
+
+c01031ed <vector187>:
+.globl vector187
+vector187:
+  pushl $0
+c01031ed:	6a 00                	push   $0x0
+  pushl $187
+c01031ef:	68 bb 00 00 00       	push   $0xbb
+  jmp __alltraps
+c01031f4:	e9 30 03 00 00       	jmp    c0103529 <__alltraps>
+
+c01031f9 <vector188>:
+.globl vector188
+vector188:
+  pushl $0
+c01031f9:	6a 00                	push   $0x0
+  pushl $188
+c01031fb:	68 bc 00 00 00       	push   $0xbc
+  jmp __alltraps
+c0103200:	e9 24 03 00 00       	jmp    c0103529 <__alltraps>
+
+c0103205 <vector189>:
+.globl vector189
+vector189:
+  pushl $0
+c0103205:	6a 00                	push   $0x0
+  pushl $189
+c0103207:	68 bd 00 00 00       	push   $0xbd
+  jmp __alltraps
+c010320c:	e9 18 03 00 00       	jmp    c0103529 <__alltraps>
+
+c0103211 <vector190>:
+.globl vector190
+vector190:
+  pushl $0
+c0103211:	6a 00                	push   $0x0
+  pushl $190
+c0103213:	68 be 00 00 00       	push   $0xbe
+  jmp __alltraps
+c0103218:	e9 0c 03 00 00       	jmp    c0103529 <__alltraps>
+
+c010321d <vector191>:
+.globl vector191
+vector191:
+  pushl $0
+c010321d:	6a 00                	push   $0x0
+  pushl $191
+c010321f:	68 bf 00 00 00       	push   $0xbf
+  jmp __alltraps
+c0103224:	e9 00 03 00 00       	jmp    c0103529 <__alltraps>
+
+c0103229 <vector192>:
+.globl vector192
+vector192:
+  pushl $0
+c0103229:	6a 00                	push   $0x0
+  pushl $192
+c010322b:	68 c0 00 00 00       	push   $0xc0
+  jmp __alltraps
+c0103230:	e9 f4 02 00 00       	jmp    c0103529 <__alltraps>
+
+c0103235 <vector193>:
+.globl vector193
+vector193:
+  pushl $0
+c0103235:	6a 00                	push   $0x0
+  pushl $193
+c0103237:	68 c1 00 00 00       	push   $0xc1
+  jmp __alltraps
+c010323c:	e9 e8 02 00 00       	jmp    c0103529 <__alltraps>
+
+c0103241 <vector194>:
+.globl vector194
+vector194:
+  pushl $0
+c0103241:	6a 00                	push   $0x0
+  pushl $194
+c0103243:	68 c2 00 00 00       	push   $0xc2
+  jmp __alltraps
+c0103248:	e9 dc 02 00 00       	jmp    c0103529 <__alltraps>
+
+c010324d <vector195>:
+.globl vector195
+vector195:
+  pushl $0
+c010324d:	6a 00                	push   $0x0
+  pushl $195
+c010324f:	68 c3 00 00 00       	push   $0xc3
+  jmp __alltraps
+c0103254:	e9 d0 02 00 00       	jmp    c0103529 <__alltraps>
+
+c0103259 <vector196>:
+.globl vector196
+vector196:
+  pushl $0
+c0103259:	6a 00                	push   $0x0
+  pushl $196
+c010325b:	68 c4 00 00 00       	push   $0xc4
+  jmp __alltraps
+c0103260:	e9 c4 02 00 00       	jmp    c0103529 <__alltraps>
+
+c0103265 <vector197>:
+.globl vector197
+vector197:
+  pushl $0
+c0103265:	6a 00                	push   $0x0
+  pushl $197
+c0103267:	68 c5 00 00 00       	push   $0xc5
+  jmp __alltraps
+c010326c:	e9 b8 02 00 00       	jmp    c0103529 <__alltraps>
+
+c0103271 <vector198>:
+.globl vector198
+vector198:
+  pushl $0
+c0103271:	6a 00                	push   $0x0
+  pushl $198
+c0103273:	68 c6 00 00 00       	push   $0xc6
+  jmp __alltraps
+c0103278:	e9 ac 02 00 00       	jmp    c0103529 <__alltraps>
+
+c010327d <vector199>:
+.globl vector199
+vector199:
+  pushl $0
+c010327d:	6a 00                	push   $0x0
+  pushl $199
+c010327f:	68 c7 00 00 00       	push   $0xc7
+  jmp __alltraps
+c0103284:	e9 a0 02 00 00       	jmp    c0103529 <__alltraps>
+
+c0103289 <vector200>:
+.globl vector200
+vector200:
+  pushl $0
+c0103289:	6a 00                	push   $0x0
+  pushl $200
+c010328b:	68 c8 00 00 00       	push   $0xc8
+  jmp __alltraps
+c0103290:	e9 94 02 00 00       	jmp    c0103529 <__alltraps>
+
+c0103295 <vector201>:
+.globl vector201
+vector201:
+  pushl $0
+c0103295:	6a 00                	push   $0x0
+  pushl $201
+c0103297:	68 c9 00 00 00       	push   $0xc9
+  jmp __alltraps
+c010329c:	e9 88 02 00 00       	jmp    c0103529 <__alltraps>
+
+c01032a1 <vector202>:
+.globl vector202
+vector202:
+  pushl $0
+c01032a1:	6a 00                	push   $0x0
+  pushl $202
+c01032a3:	68 ca 00 00 00       	push   $0xca
+  jmp __alltraps
+c01032a8:	e9 7c 02 00 00       	jmp    c0103529 <__alltraps>
+
+c01032ad <vector203>:
+.globl vector203
+vector203:
+  pushl $0
+c01032ad:	6a 00                	push   $0x0
+  pushl $203
+c01032af:	68 cb 00 00 00       	push   $0xcb
+  jmp __alltraps
+c01032b4:	e9 70 02 00 00       	jmp    c0103529 <__alltraps>
+
+c01032b9 <vector204>:
+.globl vector204
+vector204:
+  pushl $0
+c01032b9:	6a 00                	push   $0x0
+  pushl $204
+c01032bb:	68 cc 00 00 00       	push   $0xcc
+  jmp __alltraps
+c01032c0:	e9 64 02 00 00       	jmp    c0103529 <__alltraps>
+
+c01032c5 <vector205>:
+.globl vector205
+vector205:
+  pushl $0
+c01032c5:	6a 00                	push   $0x0
+  pushl $205
+c01032c7:	68 cd 00 00 00       	push   $0xcd
+  jmp __alltraps
+c01032cc:	e9 58 02 00 00       	jmp    c0103529 <__alltraps>
+
+c01032d1 <vector206>:
+.globl vector206
+vector206:
+  pushl $0
+c01032d1:	6a 00                	push   $0x0
+  pushl $206
+c01032d3:	68 ce 00 00 00       	push   $0xce
+  jmp __alltraps
+c01032d8:	e9 4c 02 00 00       	jmp    c0103529 <__alltraps>
+
+c01032dd <vector207>:
+.globl vector207
+vector207:
+  pushl $0
+c01032dd:	6a 00                	push   $0x0
+  pushl $207
+c01032df:	68 cf 00 00 00       	push   $0xcf
+  jmp __alltraps
+c01032e4:	e9 40 02 00 00       	jmp    c0103529 <__alltraps>
+
+c01032e9 <vector208>:
+.globl vector208
+vector208:
+  pushl $0
+c01032e9:	6a 00                	push   $0x0
+  pushl $208
+c01032eb:	68 d0 00 00 00       	push   $0xd0
+  jmp __alltraps
+c01032f0:	e9 34 02 00 00       	jmp    c0103529 <__alltraps>
+
+c01032f5 <vector209>:
+.globl vector209
+vector209:
+  pushl $0
+c01032f5:	6a 00                	push   $0x0
+  pushl $209
+c01032f7:	68 d1 00 00 00       	push   $0xd1
+  jmp __alltraps
+c01032fc:	e9 28 02 00 00       	jmp    c0103529 <__alltraps>
+
+c0103301 <vector210>:
+.globl vector210
+vector210:
+  pushl $0
+c0103301:	6a 00                	push   $0x0
+  pushl $210
+c0103303:	68 d2 00 00 00       	push   $0xd2
+  jmp __alltraps
+c0103308:	e9 1c 02 00 00       	jmp    c0103529 <__alltraps>
+
+c010330d <vector211>:
+.globl vector211
+vector211:
+  pushl $0
+c010330d:	6a 00                	push   $0x0
+  pushl $211
+c010330f:	68 d3 00 00 00       	push   $0xd3
+  jmp __alltraps
+c0103314:	e9 10 02 00 00       	jmp    c0103529 <__alltraps>
+
+c0103319 <vector212>:
+.globl vector212
+vector212:
+  pushl $0
+c0103319:	6a 00                	push   $0x0
+  pushl $212
+c010331b:	68 d4 00 00 00       	push   $0xd4
+  jmp __alltraps
+c0103320:	e9 04 02 00 00       	jmp    c0103529 <__alltraps>
+
+c0103325 <vector213>:
+.globl vector213
+vector213:
+  pushl $0
+c0103325:	6a 00                	push   $0x0
+  pushl $213
+c0103327:	68 d5 00 00 00       	push   $0xd5
+  jmp __alltraps
+c010332c:	e9 f8 01 00 00       	jmp    c0103529 <__alltraps>
+
+c0103331 <vector214>:
+.globl vector214
+vector214:
+  pushl $0
+c0103331:	6a 00                	push   $0x0
+  pushl $214
+c0103333:	68 d6 00 00 00       	push   $0xd6
+  jmp __alltraps
+c0103338:	e9 ec 01 00 00       	jmp    c0103529 <__alltraps>
+
+c010333d <vector215>:
+.globl vector215
+vector215:
+  pushl $0
+c010333d:	6a 00                	push   $0x0
+  pushl $215
+c010333f:	68 d7 00 00 00       	push   $0xd7
+  jmp __alltraps
+c0103344:	e9 e0 01 00 00       	jmp    c0103529 <__alltraps>
+
+c0103349 <vector216>:
+.globl vector216
+vector216:
+  pushl $0
+c0103349:	6a 00                	push   $0x0
+  pushl $216
+c010334b:	68 d8 00 00 00       	push   $0xd8
+  jmp __alltraps
+c0103350:	e9 d4 01 00 00       	jmp    c0103529 <__alltraps>
+
+c0103355 <vector217>:
+.globl vector217
+vector217:
+  pushl $0
+c0103355:	6a 00                	push   $0x0
+  pushl $217
+c0103357:	68 d9 00 00 00       	push   $0xd9
+  jmp __alltraps
+c010335c:	e9 c8 01 00 00       	jmp    c0103529 <__alltraps>
+
+c0103361 <vector218>:
+.globl vector218
+vector218:
+  pushl $0
+c0103361:	6a 00                	push   $0x0
+  pushl $218
+c0103363:	68 da 00 00 00       	push   $0xda
+  jmp __alltraps
+c0103368:	e9 bc 01 00 00       	jmp    c0103529 <__alltraps>
+
+c010336d <vector219>:
+.globl vector219
+vector219:
+  pushl $0
+c010336d:	6a 00                	push   $0x0
+  pushl $219
+c010336f:	68 db 00 00 00       	push   $0xdb
+  jmp __alltraps
+c0103374:	e9 b0 01 00 00       	jmp    c0103529 <__alltraps>
+
+c0103379 <vector220>:
+.globl vector220
+vector220:
+  pushl $0
+c0103379:	6a 00                	push   $0x0
+  pushl $220
+c010337b:	68 dc 00 00 00       	push   $0xdc
+  jmp __alltraps
+c0103380:	e9 a4 01 00 00       	jmp    c0103529 <__alltraps>
+
+c0103385 <vector221>:
+.globl vector221
+vector221:
+  pushl $0
+c0103385:	6a 00                	push   $0x0
+  pushl $221
+c0103387:	68 dd 00 00 00       	push   $0xdd
+  jmp __alltraps
+c010338c:	e9 98 01 00 00       	jmp    c0103529 <__alltraps>
+
+c0103391 <vector222>:
+.globl vector222
+vector222:
+  pushl $0
+c0103391:	6a 00                	push   $0x0
+  pushl $222
+c0103393:	68 de 00 00 00       	push   $0xde
+  jmp __alltraps
+c0103398:	e9 8c 01 00 00       	jmp    c0103529 <__alltraps>
+
+c010339d <vector223>:
+.globl vector223
+vector223:
+  pushl $0
+c010339d:	6a 00                	push   $0x0
+  pushl $223
+c010339f:	68 df 00 00 00       	push   $0xdf
+  jmp __alltraps
+c01033a4:	e9 80 01 00 00       	jmp    c0103529 <__alltraps>
+
+c01033a9 <vector224>:
+.globl vector224
+vector224:
+  pushl $0
+c01033a9:	6a 00                	push   $0x0
+  pushl $224
+c01033ab:	68 e0 00 00 00       	push   $0xe0
+  jmp __alltraps
+c01033b0:	e9 74 01 00 00       	jmp    c0103529 <__alltraps>
+
+c01033b5 <vector225>:
+.globl vector225
+vector225:
+  pushl $0
+c01033b5:	6a 00                	push   $0x0
+  pushl $225
+c01033b7:	68 e1 00 00 00       	push   $0xe1
+  jmp __alltraps
+c01033bc:	e9 68 01 00 00       	jmp    c0103529 <__alltraps>
+
+c01033c1 <vector226>:
+.globl vector226
+vector226:
+  pushl $0
+c01033c1:	6a 00                	push   $0x0
+  pushl $226
+c01033c3:	68 e2 00 00 00       	push   $0xe2
+  jmp __alltraps
+c01033c8:	e9 5c 01 00 00       	jmp    c0103529 <__alltraps>
+
+c01033cd <vector227>:
+.globl vector227
+vector227:
+  pushl $0
+c01033cd:	6a 00                	push   $0x0
+  pushl $227
+c01033cf:	68 e3 00 00 00       	push   $0xe3
+  jmp __alltraps
+c01033d4:	e9 50 01 00 00       	jmp    c0103529 <__alltraps>
+
+c01033d9 <vector228>:
+.globl vector228
+vector228:
+  pushl $0
+c01033d9:	6a 00                	push   $0x0
+  pushl $228
+c01033db:	68 e4 00 00 00       	push   $0xe4
+  jmp __alltraps
+c01033e0:	e9 44 01 00 00       	jmp    c0103529 <__alltraps>
+
+c01033e5 <vector229>:
+.globl vector229
+vector229:
+  pushl $0
+c01033e5:	6a 00                	push   $0x0
+  pushl $229
+c01033e7:	68 e5 00 00 00       	push   $0xe5
+  jmp __alltraps
+c01033ec:	e9 38 01 00 00       	jmp    c0103529 <__alltraps>
+
+c01033f1 <vector230>:
+.globl vector230
+vector230:
+  pushl $0
+c01033f1:	6a 00                	push   $0x0
+  pushl $230
+c01033f3:	68 e6 00 00 00       	push   $0xe6
+  jmp __alltraps
+c01033f8:	e9 2c 01 00 00       	jmp    c0103529 <__alltraps>
+
+c01033fd <vector231>:
+.globl vector231
+vector231:
+  pushl $0
+c01033fd:	6a 00                	push   $0x0
+  pushl $231
+c01033ff:	68 e7 00 00 00       	push   $0xe7
+  jmp __alltraps
+c0103404:	e9 20 01 00 00       	jmp    c0103529 <__alltraps>
+
+c0103409 <vector232>:
+.globl vector232
+vector232:
+  pushl $0
+c0103409:	6a 00                	push   $0x0
+  pushl $232
+c010340b:	68 e8 00 00 00       	push   $0xe8
+  jmp __alltraps
+c0103410:	e9 14 01 00 00       	jmp    c0103529 <__alltraps>
+
+c0103415 <vector233>:
+.globl vector233
+vector233:
+  pushl $0
+c0103415:	6a 00                	push   $0x0
+  pushl $233
+c0103417:	68 e9 00 00 00       	push   $0xe9
+  jmp __alltraps
+c010341c:	e9 08 01 00 00       	jmp    c0103529 <__alltraps>
+
+c0103421 <vector234>:
+.globl vector234
+vector234:
+  pushl $0
+c0103421:	6a 00                	push   $0x0
+  pushl $234
+c0103423:	68 ea 00 00 00       	push   $0xea
+  jmp __alltraps
+c0103428:	e9 fc 00 00 00       	jmp    c0103529 <__alltraps>
+
+c010342d <vector235>:
+.globl vector235
+vector235:
+  pushl $0
+c010342d:	6a 00                	push   $0x0
+  pushl $235
+c010342f:	68 eb 00 00 00       	push   $0xeb
+  jmp __alltraps
+c0103434:	e9 f0 00 00 00       	jmp    c0103529 <__alltraps>
+
+c0103439 <vector236>:
+.globl vector236
+vector236:
+  pushl $0
+c0103439:	6a 00                	push   $0x0
+  pushl $236
+c010343b:	68 ec 00 00 00       	push   $0xec
+  jmp __alltraps
+c0103440:	e9 e4 00 00 00       	jmp    c0103529 <__alltraps>
+
+c0103445 <vector237>:
+.globl vector237
+vector237:
+  pushl $0
+c0103445:	6a 00                	push   $0x0
+  pushl $237
+c0103447:	68 ed 00 00 00       	push   $0xed
+  jmp __alltraps
+c010344c:	e9 d8 00 00 00       	jmp    c0103529 <__alltraps>
+
+c0103451 <vector238>:
+.globl vector238
+vector238:
+  pushl $0
+c0103451:	6a 00                	push   $0x0
+  pushl $238
+c0103453:	68 ee 00 00 00       	push   $0xee
+  jmp __alltraps
+c0103458:	e9 cc 00 00 00       	jmp    c0103529 <__alltraps>
+
+c010345d <vector239>:
+.globl vector239
+vector239:
+  pushl $0
+c010345d:	6a 00                	push   $0x0
+  pushl $239
+c010345f:	68 ef 00 00 00       	push   $0xef
+  jmp __alltraps
+c0103464:	e9 c0 00 00 00       	jmp    c0103529 <__alltraps>
+
+c0103469 <vector240>:
+.globl vector240
+vector240:
+  pushl $0
+c0103469:	6a 00                	push   $0x0
+  pushl $240
+c010346b:	68 f0 00 00 00       	push   $0xf0
+  jmp __alltraps
+c0103470:	e9 b4 00 00 00       	jmp    c0103529 <__alltraps>
+
+c0103475 <vector241>:
+.globl vector241
+vector241:
+  pushl $0
+c0103475:	6a 00                	push   $0x0
+  pushl $241
+c0103477:	68 f1 00 00 00       	push   $0xf1
+  jmp __alltraps
+c010347c:	e9 a8 00 00 00       	jmp    c0103529 <__alltraps>
+
+c0103481 <vector242>:
+.globl vector242
+vector242:
+  pushl $0
+c0103481:	6a 00                	push   $0x0
+  pushl $242
+c0103483:	68 f2 00 00 00       	push   $0xf2
+  jmp __alltraps
+c0103488:	e9 9c 00 00 00       	jmp    c0103529 <__alltraps>
+
+c010348d <vector243>:
+.globl vector243
+vector243:
+  pushl $0
+c010348d:	6a 00                	push   $0x0
+  pushl $243
+c010348f:	68 f3 00 00 00       	push   $0xf3
+  jmp __alltraps
+c0103494:	e9 90 00 00 00       	jmp    c0103529 <__alltraps>
+
+c0103499 <vector244>:
+.globl vector244
+vector244:
+  pushl $0
+c0103499:	6a 00                	push   $0x0
+  pushl $244
+c010349b:	68 f4 00 00 00       	push   $0xf4
+  jmp __alltraps
+c01034a0:	e9 84 00 00 00       	jmp    c0103529 <__alltraps>
+
+c01034a5 <vector245>:
+.globl vector245
+vector245:
+  pushl $0
+c01034a5:	6a 00                	push   $0x0
+  pushl $245
+c01034a7:	68 f5 00 00 00       	push   $0xf5
+  jmp __alltraps
+c01034ac:	e9 78 00 00 00       	jmp    c0103529 <__alltraps>
+
+c01034b1 <vector246>:
+.globl vector246
+vector246:
+  pushl $0
+c01034b1:	6a 00                	push   $0x0
+  pushl $246
+c01034b3:	68 f6 00 00 00       	push   $0xf6
+  jmp __alltraps
+c01034b8:	e9 6c 00 00 00       	jmp    c0103529 <__alltraps>
+
+c01034bd <vector247>:
+.globl vector247
+vector247:
+  pushl $0
+c01034bd:	6a 00                	push   $0x0
+  pushl $247
+c01034bf:	68 f7 00 00 00       	push   $0xf7
+  jmp __alltraps
+c01034c4:	e9 60 00 00 00       	jmp    c0103529 <__alltraps>
+
+c01034c9 <vector248>:
+.globl vector248
+vector248:
+  pushl $0
+c01034c9:	6a 00                	push   $0x0
+  pushl $248
+c01034cb:	68 f8 00 00 00       	push   $0xf8
+  jmp __alltraps
+c01034d0:	e9 54 00 00 00       	jmp    c0103529 <__alltraps>
+
+c01034d5 <vector249>:
+.globl vector249
+vector249:
+  pushl $0
+c01034d5:	6a 00                	push   $0x0
+  pushl $249
+c01034d7:	68 f9 00 00 00       	push   $0xf9
+  jmp __alltraps
+c01034dc:	e9 48 00 00 00       	jmp    c0103529 <__alltraps>
+
+c01034e1 <vector250>:
+.globl vector250
+vector250:
+  pushl $0
+c01034e1:	6a 00                	push   $0x0
+  pushl $250
+c01034e3:	68 fa 00 00 00       	push   $0xfa
+  jmp __alltraps
+c01034e8:	e9 3c 00 00 00       	jmp    c0103529 <__alltraps>
+
+c01034ed <vector251>:
+.globl vector251
+vector251:
+  pushl $0
+c01034ed:	6a 00                	push   $0x0
+  pushl $251
+c01034ef:	68 fb 00 00 00       	push   $0xfb
+  jmp __alltraps
+c01034f4:	e9 30 00 00 00       	jmp    c0103529 <__alltraps>
+
+c01034f9 <vector252>:
+.globl vector252
+vector252:
+  pushl $0
+c01034f9:	6a 00                	push   $0x0
+  pushl $252
+c01034fb:	68 fc 00 00 00       	push   $0xfc
+  jmp __alltraps
+c0103500:	e9 24 00 00 00       	jmp    c0103529 <__alltraps>
+
+c0103505 <vector253>:
+.globl vector253
+vector253:
+  pushl $0
+c0103505:	6a 00                	push   $0x0
+  pushl $253
+c0103507:	68 fd 00 00 00       	push   $0xfd
+  jmp __alltraps
+c010350c:	e9 18 00 00 00       	jmp    c0103529 <__alltraps>
+
+c0103511 <vector254>:
+.globl vector254
+vector254:
+  pushl $0
+c0103511:	6a 00                	push   $0x0
+  pushl $254
+c0103513:	68 fe 00 00 00       	push   $0xfe
+  jmp __alltraps
+c0103518:	e9 0c 00 00 00       	jmp    c0103529 <__alltraps>
+
+c010351d <vector255>:
+.globl vector255
+vector255:
+  pushl $0
+c010351d:	6a 00                	push   $0x0
+  pushl $255
+c010351f:	68 ff 00 00 00       	push   $0xff
+  jmp __alltraps
+c0103524:	e9 00 00 00 00       	jmp    c0103529 <__alltraps>
+
+c0103529 <__alltraps>:
+.text
+.globl __alltraps
+__alltraps:
+    # push registers to build a trap frame
+    # therefore make the stack look like a struct trapframe
+    pushl %ds
+c0103529:	1e                   	push   %ds
+    pushl %es
+c010352a:	06                   	push   %es
+    pushl %fs
+c010352b:	0f a0                	push   %fs
+    pushl %gs
+c010352d:	0f a8                	push   %gs
+    pushal
+c010352f:	60                   	pusha  
+
+    # load GD_KDATA into %ds and %es to set up data segments for kernel
+    movl $GD_KDATA, %eax
+c0103530:	b8 10 00 00 00       	mov    $0x10,%eax
+    movw %ax, %ds
+c0103535:	8e d8                	mov    %eax,%ds
+    movw %ax, %es
+c0103537:	8e c0                	mov    %eax,%es
+
+    # push %esp to pass a pointer to the trapframe as an argument to trap()
+    pushl %esp
+c0103539:	54                   	push   %esp
+
+    # call trap(tf), where tf=%esp
+    call trap
+c010353a:	e8 e5 f4 ff ff       	call   c0102a24 <trap>
+
+    # pop the pushed stack pointer
+    popl %esp
+c010353f:	5c                   	pop    %esp
+
+c0103540 <__trapret>:
+
+    # return falls through to trapret...
+.globl __trapret
+__trapret:
+    # restore registers from stack
+    popal
+c0103540:	61                   	popa   
+
+    # restore %ds, %es, %fs and %gs
+    popl %gs
+c0103541:	0f a9                	pop    %gs
+    popl %fs
+c0103543:	0f a1                	pop    %fs
+    popl %es
+c0103545:	07                   	pop    %es
+    popl %ds
+c0103546:	1f                   	pop    %ds
+
+    # get rid of the trap number and error code
+    addl $0x8, %esp
+c0103547:	83 c4 08             	add    $0x8,%esp
+    iret
+c010354a:	cf                   	iret   
+
+c010354b <forkrets>:
+
+.globl forkrets
+forkrets:
+    # set stack to this new process's trapframe
+    movl 4(%esp), %esp
+c010354b:	8b 64 24 04          	mov    0x4(%esp),%esp
+    jmp __trapret
+c010354f:	e9 ec ff ff ff       	jmp    c0103540 <__trapret>
+
+c0103554 <page2ppn>:
+
+extern struct Page *pages;
+extern size_t npage;
+
+static inline ppn_t
+page2ppn(struct Page *page) {
+c0103554:	55                   	push   %ebp
+c0103555:	89 e5                	mov    %esp,%ebp
+    return page - pages;
+c0103557:	8b 45 08             	mov    0x8(%ebp),%eax
+c010355a:	8b 15 a4 53 1c c0    	mov    0xc01c53a4,%edx
+c0103560:	29 d0                	sub    %edx,%eax
+c0103562:	c1 f8 05             	sar    $0x5,%eax
+}
+c0103565:	5d                   	pop    %ebp
+c0103566:	c3                   	ret    
+
+c0103567 <page2pa>:
+
+static inline uintptr_t
+page2pa(struct Page *page) {
+c0103567:	55                   	push   %ebp
+c0103568:	89 e5                	mov    %esp,%ebp
+    return page2ppn(page) << PGSHIFT;
+c010356a:	ff 75 08             	pushl  0x8(%ebp)
+c010356d:	e8 e2 ff ff ff       	call   c0103554 <page2ppn>
+c0103572:	83 c4 04             	add    $0x4,%esp
+c0103575:	c1 e0 0c             	shl    $0xc,%eax
+}
+c0103578:	c9                   	leave  
+c0103579:	c3                   	ret    
+
+c010357a <pa2page>:
+
+static inline struct Page *
+pa2page(uintptr_t pa) {
+c010357a:	55                   	push   %ebp
+c010357b:	89 e5                	mov    %esp,%ebp
+c010357d:	83 ec 08             	sub    $0x8,%esp
+    if (PPN(pa) >= npage) {
+c0103580:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103583:	c1 e8 0c             	shr    $0xc,%eax
+c0103586:	89 c2                	mov    %eax,%edx
+c0103588:	a1 60 32 1c c0       	mov    0xc01c3260,%eax
+c010358d:	39 c2                	cmp    %eax,%edx
+c010358f:	72 14                	jb     c01035a5 <pa2page+0x2b>
+        panic("pa2page called with invalid pa");
+c0103591:	83 ec 04             	sub    $0x4,%esp
+c0103594:	68 b0 d5 10 c0       	push   $0xc010d5b0
+c0103599:	6a 5e                	push   $0x5e
+c010359b:	68 cf d5 10 c0       	push   $0xc010d5cf
+c01035a0:	e8 4f ce ff ff       	call   c01003f4 <__panic>
+    }
+    return &pages[PPN(pa)];
+c01035a5:	a1 a4 53 1c c0       	mov    0xc01c53a4,%eax
+c01035aa:	8b 55 08             	mov    0x8(%ebp),%edx
+c01035ad:	c1 ea 0c             	shr    $0xc,%edx
+c01035b0:	c1 e2 05             	shl    $0x5,%edx
+c01035b3:	01 d0                	add    %edx,%eax
+}
+c01035b5:	c9                   	leave  
+c01035b6:	c3                   	ret    
+
+c01035b7 <page2kva>:
+
+static inline void *
+page2kva(struct Page *page) {
+c01035b7:	55                   	push   %ebp
+c01035b8:	89 e5                	mov    %esp,%ebp
+c01035ba:	83 ec 18             	sub    $0x18,%esp
+    return KADDR(page2pa(page));
+c01035bd:	ff 75 08             	pushl  0x8(%ebp)
+c01035c0:	e8 a2 ff ff ff       	call   c0103567 <page2pa>
+c01035c5:	83 c4 04             	add    $0x4,%esp
+c01035c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01035cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01035ce:	c1 e8 0c             	shr    $0xc,%eax
+c01035d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01035d4:	a1 60 32 1c c0       	mov    0xc01c3260,%eax
+c01035d9:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c01035dc:	72 14                	jb     c01035f2 <page2kva+0x3b>
+c01035de:	ff 75 f4             	pushl  -0xc(%ebp)
+c01035e1:	68 e0 d5 10 c0       	push   $0xc010d5e0
+c01035e6:	6a 65                	push   $0x65
+c01035e8:	68 cf d5 10 c0       	push   $0xc010d5cf
+c01035ed:	e8 02 ce ff ff       	call   c01003f4 <__panic>
+c01035f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01035f5:	2d 00 00 00 40       	sub    $0x40000000,%eax
+}
+c01035fa:	c9                   	leave  
+c01035fb:	c3                   	ret    
+
+c01035fc <pte2page>:
+kva2page(void *kva) {
+    return pa2page(PADDR(kva));
+}
+
+static inline struct Page *
+pte2page(pte_t pte) {
+c01035fc:	55                   	push   %ebp
+c01035fd:	89 e5                	mov    %esp,%ebp
+c01035ff:	83 ec 08             	sub    $0x8,%esp
+    if (!(pte & PTE_P)) {
+c0103602:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103605:	83 e0 01             	and    $0x1,%eax
+c0103608:	85 c0                	test   %eax,%eax
+c010360a:	75 14                	jne    c0103620 <pte2page+0x24>
+        panic("pte2page called with invalid pte");
+c010360c:	83 ec 04             	sub    $0x4,%esp
+c010360f:	68 04 d6 10 c0       	push   $0xc010d604
+c0103614:	6a 70                	push   $0x70
+c0103616:	68 cf d5 10 c0       	push   $0xc010d5cf
+c010361b:	e8 d4 cd ff ff       	call   c01003f4 <__panic>
+    }
+    return pa2page(PTE_ADDR(pte));
+c0103620:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103623:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0103628:	83 ec 0c             	sub    $0xc,%esp
+c010362b:	50                   	push   %eax
+c010362c:	e8 49 ff ff ff       	call   c010357a <pa2page>
+c0103631:	83 c4 10             	add    $0x10,%esp
+}
+c0103634:	c9                   	leave  
+c0103635:	c3                   	ret    
+
+c0103636 <pde2page>:
+
+static inline struct Page *
+pde2page(pde_t pde) {
+c0103636:	55                   	push   %ebp
+c0103637:	89 e5                	mov    %esp,%ebp
+c0103639:	83 ec 08             	sub    $0x8,%esp
+    return pa2page(PDE_ADDR(pde));
+c010363c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010363f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0103644:	83 ec 0c             	sub    $0xc,%esp
+c0103647:	50                   	push   %eax
+c0103648:	e8 2d ff ff ff       	call   c010357a <pa2page>
+c010364d:	83 c4 10             	add    $0x10,%esp
+}
+c0103650:	c9                   	leave  
+c0103651:	c3                   	ret    
+
+c0103652 <page_ref>:
+
+static inline int
+page_ref(struct Page *page) {
+c0103652:	55                   	push   %ebp
+c0103653:	89 e5                	mov    %esp,%ebp
+    return page->ref;
+c0103655:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103658:	8b 00                	mov    (%eax),%eax
+}
+c010365a:	5d                   	pop    %ebp
+c010365b:	c3                   	ret    
+
+c010365c <set_page_ref>:
+
+static inline void
+set_page_ref(struct Page *page, int val) {
+c010365c:	55                   	push   %ebp
+c010365d:	89 e5                	mov    %esp,%ebp
+    page->ref = val;
+c010365f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103662:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0103665:	89 10                	mov    %edx,(%eax)
+}
+c0103667:	90                   	nop
+c0103668:	5d                   	pop    %ebp
+c0103669:	c3                   	ret    
+
+c010366a <page_ref_inc>:
+
+static inline int
+page_ref_inc(struct Page *page) {
+c010366a:	55                   	push   %ebp
+c010366b:	89 e5                	mov    %esp,%ebp
+    page->ref += 1;
+c010366d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103670:	8b 00                	mov    (%eax),%eax
+c0103672:	8d 50 01             	lea    0x1(%eax),%edx
+c0103675:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103678:	89 10                	mov    %edx,(%eax)
+    return page->ref;
+c010367a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010367d:	8b 00                	mov    (%eax),%eax
+}
+c010367f:	5d                   	pop    %ebp
+c0103680:	c3                   	ret    
+
+c0103681 <page_ref_dec>:
+
+static inline int
+page_ref_dec(struct Page *page) {
+c0103681:	55                   	push   %ebp
+c0103682:	89 e5                	mov    %esp,%ebp
+    page->ref -= 1;
+c0103684:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103687:	8b 00                	mov    (%eax),%eax
+c0103689:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010368c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010368f:	89 10                	mov    %edx,(%eax)
+    return page->ref;
+c0103691:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103694:	8b 00                	mov    (%eax),%eax
+}
+c0103696:	5d                   	pop    %ebp
+c0103697:	c3                   	ret    
+
+c0103698 <__intr_save>:
+#include <assert.h>
+#include <atomic.h>
+#include <sched.h>
+
+static inline bool
+__intr_save(void) {
+c0103698:	55                   	push   %ebp
+c0103699:	89 e5                	mov    %esp,%ebp
+c010369b:	83 ec 18             	sub    $0x18,%esp
+}
+
+static inline uint32_t
+read_eflags(void) {
+    uint32_t eflags;
+    asm volatile ("pushfl; popl %0" : "=r" (eflags));
+c010369e:	9c                   	pushf  
+c010369f:	58                   	pop    %eax
+c01036a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return eflags;
+c01036a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    if (read_eflags() & FL_IF) {
+c01036a6:	25 00 02 00 00       	and    $0x200,%eax
+c01036ab:	85 c0                	test   %eax,%eax
+c01036ad:	74 0c                	je     c01036bb <__intr_save+0x23>
+        intr_disable();
+c01036af:	e8 dd ea ff ff       	call   c0102191 <intr_disable>
+        return 1;
+c01036b4:	b8 01 00 00 00       	mov    $0x1,%eax
+c01036b9:	eb 05                	jmp    c01036c0 <__intr_save+0x28>
+    }
+    return 0;
+c01036bb:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01036c0:	c9                   	leave  
+c01036c1:	c3                   	ret    
+
+c01036c2 <__intr_restore>:
+
+static inline void
+__intr_restore(bool flag) {
+c01036c2:	55                   	push   %ebp
+c01036c3:	89 e5                	mov    %esp,%ebp
+c01036c5:	83 ec 08             	sub    $0x8,%esp
+    if (flag) {
+c01036c8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c01036cc:	74 05                	je     c01036d3 <__intr_restore+0x11>
+        intr_enable();
+c01036ce:	e8 b7 ea ff ff       	call   c010218a <intr_enable>
+    }
+}
+c01036d3:	90                   	nop
+c01036d4:	c9                   	leave  
+c01036d5:	c3                   	ret    
+
+c01036d6 <lgdt>:
+/* *
+ * lgdt - load the global descriptor table register and reset the
+ * data/code segement registers for kernel.
+ * */
+static inline void
+lgdt(struct pseudodesc *pd) {
+c01036d6:	55                   	push   %ebp
+c01036d7:	89 e5                	mov    %esp,%ebp
+    asm volatile ("lgdt (%0)" :: "r" (pd));
+c01036d9:	8b 45 08             	mov    0x8(%ebp),%eax
+c01036dc:	0f 01 10             	lgdtl  (%eax)
+    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
+c01036df:	b8 23 00 00 00       	mov    $0x23,%eax
+c01036e4:	8e e8                	mov    %eax,%gs
+    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
+c01036e6:	b8 23 00 00 00       	mov    $0x23,%eax
+c01036eb:	8e e0                	mov    %eax,%fs
+    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
+c01036ed:	b8 10 00 00 00       	mov    $0x10,%eax
+c01036f2:	8e c0                	mov    %eax,%es
+    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
+c01036f4:	b8 10 00 00 00       	mov    $0x10,%eax
+c01036f9:	8e d8                	mov    %eax,%ds
+    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
+c01036fb:	b8 10 00 00 00       	mov    $0x10,%eax
+c0103700:	8e d0                	mov    %eax,%ss
+    // reload cs
+    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
+c0103702:	ea 09 37 10 c0 08 00 	ljmp   $0x8,$0xc0103709
+}
+c0103709:	90                   	nop
+c010370a:	5d                   	pop    %ebp
+c010370b:	c3                   	ret    
+
+c010370c <load_esp0>:
+ * load_esp0 - change the ESP0 in default task state segment,
+ * so that we can use different kernel stack when we trap frame
+ * user to kernel.
+ * */
+void
+load_esp0(uintptr_t esp0) {
+c010370c:	55                   	push   %ebp
+c010370d:	89 e5                	mov    %esp,%ebp
+    ts.ts_esp0 = esp0;
+c010370f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103712:	a3 84 32 1c c0       	mov    %eax,0xc01c3284
+}
+c0103717:	90                   	nop
+c0103718:	5d                   	pop    %ebp
+c0103719:	c3                   	ret    
+
+c010371a <gdt_init>:
+
+/* gdt_init - initialize the default GDT and TSS */
+static void
+gdt_init(void) {
+c010371a:	55                   	push   %ebp
+c010371b:	89 e5                	mov    %esp,%ebp
+c010371d:	83 ec 10             	sub    $0x10,%esp
+    // set boot kernel stack and default SS0
+    load_esp0((uintptr_t)bootstacktop);
+c0103720:	b8 00 10 13 c0       	mov    $0xc0131000,%eax
+c0103725:	50                   	push   %eax
+c0103726:	e8 e1 ff ff ff       	call   c010370c <load_esp0>
+c010372b:	83 c4 04             	add    $0x4,%esp
+    ts.ts_ss0 = KERNEL_DS;
+c010372e:	66 c7 05 88 32 1c c0 	movw   $0x10,0xc01c3288
+c0103735:	10 00 
+
+    // initialize the TSS filed of the gdt
+    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
+c0103737:	66 c7 05 28 1a 13 c0 	movw   $0x68,0xc0131a28
+c010373e:	68 00 
+c0103740:	b8 80 32 1c c0       	mov    $0xc01c3280,%eax
+c0103745:	66 a3 2a 1a 13 c0    	mov    %ax,0xc0131a2a
+c010374b:	b8 80 32 1c c0       	mov    $0xc01c3280,%eax
+c0103750:	c1 e8 10             	shr    $0x10,%eax
+c0103753:	a2 2c 1a 13 c0       	mov    %al,0xc0131a2c
+c0103758:	0f b6 05 2d 1a 13 c0 	movzbl 0xc0131a2d,%eax
+c010375f:	83 e0 f0             	and    $0xfffffff0,%eax
+c0103762:	83 c8 09             	or     $0x9,%eax
+c0103765:	a2 2d 1a 13 c0       	mov    %al,0xc0131a2d
+c010376a:	0f b6 05 2d 1a 13 c0 	movzbl 0xc0131a2d,%eax
+c0103771:	83 e0 ef             	and    $0xffffffef,%eax
+c0103774:	a2 2d 1a 13 c0       	mov    %al,0xc0131a2d
+c0103779:	0f b6 05 2d 1a 13 c0 	movzbl 0xc0131a2d,%eax
+c0103780:	83 e0 9f             	and    $0xffffff9f,%eax
+c0103783:	a2 2d 1a 13 c0       	mov    %al,0xc0131a2d
+c0103788:	0f b6 05 2d 1a 13 c0 	movzbl 0xc0131a2d,%eax
+c010378f:	83 c8 80             	or     $0xffffff80,%eax
+c0103792:	a2 2d 1a 13 c0       	mov    %al,0xc0131a2d
+c0103797:	0f b6 05 2e 1a 13 c0 	movzbl 0xc0131a2e,%eax
+c010379e:	83 e0 f0             	and    $0xfffffff0,%eax
+c01037a1:	a2 2e 1a 13 c0       	mov    %al,0xc0131a2e
+c01037a6:	0f b6 05 2e 1a 13 c0 	movzbl 0xc0131a2e,%eax
+c01037ad:	83 e0 ef             	and    $0xffffffef,%eax
+c01037b0:	a2 2e 1a 13 c0       	mov    %al,0xc0131a2e
+c01037b5:	0f b6 05 2e 1a 13 c0 	movzbl 0xc0131a2e,%eax
+c01037bc:	83 e0 df             	and    $0xffffffdf,%eax
+c01037bf:	a2 2e 1a 13 c0       	mov    %al,0xc0131a2e
+c01037c4:	0f b6 05 2e 1a 13 c0 	movzbl 0xc0131a2e,%eax
+c01037cb:	83 c8 40             	or     $0x40,%eax
+c01037ce:	a2 2e 1a 13 c0       	mov    %al,0xc0131a2e
+c01037d3:	0f b6 05 2e 1a 13 c0 	movzbl 0xc0131a2e,%eax
+c01037da:	83 e0 7f             	and    $0x7f,%eax
+c01037dd:	a2 2e 1a 13 c0       	mov    %al,0xc0131a2e
+c01037e2:	b8 80 32 1c c0       	mov    $0xc01c3280,%eax
+c01037e7:	c1 e8 18             	shr    $0x18,%eax
+c01037ea:	a2 2f 1a 13 c0       	mov    %al,0xc0131a2f
+
+    // reload all segment registers
+    lgdt(&gdt_pd);
+c01037ef:	68 30 1a 13 c0       	push   $0xc0131a30
+c01037f4:	e8 dd fe ff ff       	call   c01036d6 <lgdt>
+c01037f9:	83 c4 04             	add    $0x4,%esp
+c01037fc:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
+    asm volatile ("cli" ::: "memory");
+}
+
+static inline void
+ltr(uint16_t sel) {
+    asm volatile ("ltr %0" :: "r" (sel) : "memory");
+c0103802:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
+c0103806:	0f 00 d8             	ltr    %ax
+
+    // load the TSS
+    ltr(GD_TSS);
+}
+c0103809:	90                   	nop
+c010380a:	c9                   	leave  
+c010380b:	c3                   	ret    
+
+c010380c <init_pmm_manager>:
+
+//init_pmm_manager - initialize a pmm_manager instance
+static void
+init_pmm_manager(void) {
+c010380c:	55                   	push   %ebp
+c010380d:	89 e5                	mov    %esp,%ebp
+c010380f:	83 ec 08             	sub    $0x8,%esp
+    pmm_manager = &default_pmm_manager;
+c0103812:	c7 05 9c 53 1c c0 88 	movl   $0xc010eb88,0xc01c539c
+c0103819:	eb 10 c0 
+    cprintf("memory management: %s\n", pmm_manager->name);
+c010381c:	a1 9c 53 1c c0       	mov    0xc01c539c,%eax
+c0103821:	8b 00                	mov    (%eax),%eax
+c0103823:	83 ec 08             	sub    $0x8,%esp
+c0103826:	50                   	push   %eax
+c0103827:	68 30 d6 10 c0       	push   $0xc010d630
+c010382c:	e8 5d ca ff ff       	call   c010028e <cprintf>
+c0103831:	83 c4 10             	add    $0x10,%esp
+    pmm_manager->init();
+c0103834:	a1 9c 53 1c c0       	mov    0xc01c539c,%eax
+c0103839:	8b 40 04             	mov    0x4(%eax),%eax
+c010383c:	ff d0                	call   *%eax
+}
+c010383e:	90                   	nop
+c010383f:	c9                   	leave  
+c0103840:	c3                   	ret    
+
+c0103841 <init_memmap>:
+
+//init_memmap - call pmm->init_memmap to build Page struct for free memory  
+static void
+init_memmap(struct Page *base, size_t n) {
+c0103841:	55                   	push   %ebp
+c0103842:	89 e5                	mov    %esp,%ebp
+c0103844:	83 ec 08             	sub    $0x8,%esp
+    pmm_manager->init_memmap(base, n);
+c0103847:	a1 9c 53 1c c0       	mov    0xc01c539c,%eax
+c010384c:	8b 40 08             	mov    0x8(%eax),%eax
+c010384f:	83 ec 08             	sub    $0x8,%esp
+c0103852:	ff 75 0c             	pushl  0xc(%ebp)
+c0103855:	ff 75 08             	pushl  0x8(%ebp)
+c0103858:	ff d0                	call   *%eax
+c010385a:	83 c4 10             	add    $0x10,%esp
+}
+c010385d:	90                   	nop
+c010385e:	c9                   	leave  
+c010385f:	c3                   	ret    
+
+c0103860 <alloc_pages>:
+
+//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
+struct Page *
+alloc_pages(size_t n) {
+c0103860:	55                   	push   %ebp
+c0103861:	89 e5                	mov    %esp,%ebp
+c0103863:	83 ec 18             	sub    $0x18,%esp
+    struct Page *page=NULL;
+c0103866:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    bool intr_flag;
+    
+    while (1)
+    {
+         local_intr_save(intr_flag);
+c010386d:	e8 26 fe ff ff       	call   c0103698 <__intr_save>
+c0103872:	89 45 f0             	mov    %eax,-0x10(%ebp)
+         {
+              page = pmm_manager->alloc_pages(n);
+c0103875:	a1 9c 53 1c c0       	mov    0xc01c539c,%eax
+c010387a:	8b 40 0c             	mov    0xc(%eax),%eax
+c010387d:	83 ec 0c             	sub    $0xc,%esp
+c0103880:	ff 75 08             	pushl  0x8(%ebp)
+c0103883:	ff d0                	call   *%eax
+c0103885:	83 c4 10             	add    $0x10,%esp
+c0103888:	89 45 f4             	mov    %eax,-0xc(%ebp)
+         }
+         local_intr_restore(intr_flag);
+c010388b:	83 ec 0c             	sub    $0xc,%esp
+c010388e:	ff 75 f0             	pushl  -0x10(%ebp)
+c0103891:	e8 2c fe ff ff       	call   c01036c2 <__intr_restore>
+c0103896:	83 c4 10             	add    $0x10,%esp
+
+         if (page != NULL || n > 1 || swap_init_ok == 0) break;
+c0103899:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010389d:	75 28                	jne    c01038c7 <alloc_pages+0x67>
+c010389f:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
+c01038a3:	77 22                	ja     c01038c7 <alloc_pages+0x67>
+c01038a5:	a1 f4 32 1c c0       	mov    0xc01c32f4,%eax
+c01038aa:	85 c0                	test   %eax,%eax
+c01038ac:	74 19                	je     c01038c7 <alloc_pages+0x67>
+         
+         extern struct mm_struct *check_mm_struct;
+         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
+         swap_out(check_mm_struct, n, 0);
+c01038ae:	8b 55 08             	mov    0x8(%ebp),%edx
+c01038b1:	a1 b0 53 1c c0       	mov    0xc01c53b0,%eax
+c01038b6:	83 ec 04             	sub    $0x4,%esp
+c01038b9:	6a 00                	push   $0x0
+c01038bb:	52                   	push   %edx
+c01038bc:	50                   	push   %eax
+c01038bd:	e8 8c 36 00 00       	call   c0106f4e <swap_out>
+c01038c2:	83 c4 10             	add    $0x10,%esp
+    }
+c01038c5:	eb a6                	jmp    c010386d <alloc_pages+0xd>
+    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
+    return page;
+c01038c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c01038ca:	c9                   	leave  
+c01038cb:	c3                   	ret    
+
+c01038cc <free_pages>:
+
+//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
+void
+free_pages(struct Page *base, size_t n) {
+c01038cc:	55                   	push   %ebp
+c01038cd:	89 e5                	mov    %esp,%ebp
+c01038cf:	83 ec 18             	sub    $0x18,%esp
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c01038d2:	e8 c1 fd ff ff       	call   c0103698 <__intr_save>
+c01038d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    {
+        pmm_manager->free_pages(base, n);
+c01038da:	a1 9c 53 1c c0       	mov    0xc01c539c,%eax
+c01038df:	8b 40 10             	mov    0x10(%eax),%eax
+c01038e2:	83 ec 08             	sub    $0x8,%esp
+c01038e5:	ff 75 0c             	pushl  0xc(%ebp)
+c01038e8:	ff 75 08             	pushl  0x8(%ebp)
+c01038eb:	ff d0                	call   *%eax
+c01038ed:	83 c4 10             	add    $0x10,%esp
+    }
+    local_intr_restore(intr_flag);
+c01038f0:	83 ec 0c             	sub    $0xc,%esp
+c01038f3:	ff 75 f4             	pushl  -0xc(%ebp)
+c01038f6:	e8 c7 fd ff ff       	call   c01036c2 <__intr_restore>
+c01038fb:	83 c4 10             	add    $0x10,%esp
+}
+c01038fe:	90                   	nop
+c01038ff:	c9                   	leave  
+c0103900:	c3                   	ret    
+
+c0103901 <nr_free_pages>:
+
+//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
+//of current free memory
+size_t
+nr_free_pages(void) {
+c0103901:	55                   	push   %ebp
+c0103902:	89 e5                	mov    %esp,%ebp
+c0103904:	83 ec 18             	sub    $0x18,%esp
+    size_t ret;
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c0103907:	e8 8c fd ff ff       	call   c0103698 <__intr_save>
+c010390c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    {
+        ret = pmm_manager->nr_free_pages();
+c010390f:	a1 9c 53 1c c0       	mov    0xc01c539c,%eax
+c0103914:	8b 40 14             	mov    0x14(%eax),%eax
+c0103917:	ff d0                	call   *%eax
+c0103919:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    }
+    local_intr_restore(intr_flag);
+c010391c:	83 ec 0c             	sub    $0xc,%esp
+c010391f:	ff 75 f4             	pushl  -0xc(%ebp)
+c0103922:	e8 9b fd ff ff       	call   c01036c2 <__intr_restore>
+c0103927:	83 c4 10             	add    $0x10,%esp
+    return ret;
+c010392a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+c010392d:	c9                   	leave  
+c010392e:	c3                   	ret    
+
+c010392f <page_init>:
+
+/* pmm_init - initialize the physical memory management */
+static void
+page_init(void) {
+c010392f:	55                   	push   %ebp
+c0103930:	89 e5                	mov    %esp,%ebp
+c0103932:	57                   	push   %edi
+c0103933:	56                   	push   %esi
+c0103934:	53                   	push   %ebx
+c0103935:	83 ec 7c             	sub    $0x7c,%esp
+    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
+c0103938:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
+    uint64_t maxpa = 0;
+c010393f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+c0103946:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+
+    cprintf("e820map:\n");
+c010394d:	83 ec 0c             	sub    $0xc,%esp
+c0103950:	68 47 d6 10 c0       	push   $0xc010d647
+c0103955:	e8 34 c9 ff ff       	call   c010028e <cprintf>
+c010395a:	83 c4 10             	add    $0x10,%esp
+    int i;
+    for (i = 0; i < memmap->nr_map; i ++) {
+c010395d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+c0103964:	e9 fc 00 00 00       	jmp    c0103a65 <page_init+0x136>
+        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
+c0103969:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c010396c:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c010396f:	89 d0                	mov    %edx,%eax
+c0103971:	c1 e0 02             	shl    $0x2,%eax
+c0103974:	01 d0                	add    %edx,%eax
+c0103976:	c1 e0 02             	shl    $0x2,%eax
+c0103979:	01 c8                	add    %ecx,%eax
+c010397b:	8b 50 08             	mov    0x8(%eax),%edx
+c010397e:	8b 40 04             	mov    0x4(%eax),%eax
+c0103981:	89 45 b8             	mov    %eax,-0x48(%ebp)
+c0103984:	89 55 bc             	mov    %edx,-0x44(%ebp)
+c0103987:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c010398a:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c010398d:	89 d0                	mov    %edx,%eax
+c010398f:	c1 e0 02             	shl    $0x2,%eax
+c0103992:	01 d0                	add    %edx,%eax
+c0103994:	c1 e0 02             	shl    $0x2,%eax
+c0103997:	01 c8                	add    %ecx,%eax
+c0103999:	8b 48 0c             	mov    0xc(%eax),%ecx
+c010399c:	8b 58 10             	mov    0x10(%eax),%ebx
+c010399f:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c01039a2:	8b 55 bc             	mov    -0x44(%ebp),%edx
+c01039a5:	01 c8                	add    %ecx,%eax
+c01039a7:	11 da                	adc    %ebx,%edx
+c01039a9:	89 45 b0             	mov    %eax,-0x50(%ebp)
+c01039ac:	89 55 b4             	mov    %edx,-0x4c(%ebp)
+        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
+c01039af:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c01039b2:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c01039b5:	89 d0                	mov    %edx,%eax
+c01039b7:	c1 e0 02             	shl    $0x2,%eax
+c01039ba:	01 d0                	add    %edx,%eax
+c01039bc:	c1 e0 02             	shl    $0x2,%eax
+c01039bf:	01 c8                	add    %ecx,%eax
+c01039c1:	83 c0 14             	add    $0x14,%eax
+c01039c4:	8b 00                	mov    (%eax),%eax
+c01039c6:	89 45 84             	mov    %eax,-0x7c(%ebp)
+c01039c9:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c01039cc:	8b 55 b4             	mov    -0x4c(%ebp),%edx
+c01039cf:	83 c0 ff             	add    $0xffffffff,%eax
+c01039d2:	83 d2 ff             	adc    $0xffffffff,%edx
+c01039d5:	89 c1                	mov    %eax,%ecx
+c01039d7:	89 d3                	mov    %edx,%ebx
+c01039d9:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+c01039dc:	89 55 80             	mov    %edx,-0x80(%ebp)
+c01039df:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c01039e2:	89 d0                	mov    %edx,%eax
+c01039e4:	c1 e0 02             	shl    $0x2,%eax
+c01039e7:	01 d0                	add    %edx,%eax
+c01039e9:	c1 e0 02             	shl    $0x2,%eax
+c01039ec:	03 45 80             	add    -0x80(%ebp),%eax
+c01039ef:	8b 50 10             	mov    0x10(%eax),%edx
+c01039f2:	8b 40 0c             	mov    0xc(%eax),%eax
+c01039f5:	ff 75 84             	pushl  -0x7c(%ebp)
+c01039f8:	53                   	push   %ebx
+c01039f9:	51                   	push   %ecx
+c01039fa:	ff 75 bc             	pushl  -0x44(%ebp)
+c01039fd:	ff 75 b8             	pushl  -0x48(%ebp)
+c0103a00:	52                   	push   %edx
+c0103a01:	50                   	push   %eax
+c0103a02:	68 54 d6 10 c0       	push   $0xc010d654
+c0103a07:	e8 82 c8 ff ff       	call   c010028e <cprintf>
+c0103a0c:	83 c4 20             	add    $0x20,%esp
+                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
+        if (memmap->map[i].type == E820_ARM) {
+c0103a0f:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c0103a12:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0103a15:	89 d0                	mov    %edx,%eax
+c0103a17:	c1 e0 02             	shl    $0x2,%eax
+c0103a1a:	01 d0                	add    %edx,%eax
+c0103a1c:	c1 e0 02             	shl    $0x2,%eax
+c0103a1f:	01 c8                	add    %ecx,%eax
+c0103a21:	83 c0 14             	add    $0x14,%eax
+c0103a24:	8b 00                	mov    (%eax),%eax
+c0103a26:	83 f8 01             	cmp    $0x1,%eax
+c0103a29:	75 36                	jne    c0103a61 <page_init+0x132>
+            if (maxpa < end && begin < KMEMSIZE) {
+c0103a2b:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0103a2e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0103a31:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
+c0103a34:	77 2b                	ja     c0103a61 <page_init+0x132>
+c0103a36:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
+c0103a39:	72 05                	jb     c0103a40 <page_init+0x111>
+c0103a3b:	3b 45 b0             	cmp    -0x50(%ebp),%eax
+c0103a3e:	73 21                	jae    c0103a61 <page_init+0x132>
+c0103a40:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
+c0103a44:	77 1b                	ja     c0103a61 <page_init+0x132>
+c0103a46:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
+c0103a4a:	72 09                	jb     c0103a55 <page_init+0x126>
+c0103a4c:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
+c0103a53:	77 0c                	ja     c0103a61 <page_init+0x132>
+                maxpa = end;
+c0103a55:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c0103a58:	8b 55 b4             	mov    -0x4c(%ebp),%edx
+c0103a5b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c0103a5e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
+    uint64_t maxpa = 0;
+
+    cprintf("e820map:\n");
+    int i;
+    for (i = 0; i < memmap->nr_map; i ++) {
+c0103a61:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
+c0103a65:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c0103a68:	8b 00                	mov    (%eax),%eax
+c0103a6a:	3b 45 dc             	cmp    -0x24(%ebp),%eax
+c0103a6d:	0f 8f f6 fe ff ff    	jg     c0103969 <page_init+0x3a>
+            if (maxpa < end && begin < KMEMSIZE) {
+                maxpa = end;
+            }
+        }
+    }
+    if (maxpa > KMEMSIZE) {
+c0103a73:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c0103a77:	72 1d                	jb     c0103a96 <page_init+0x167>
+c0103a79:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c0103a7d:	77 09                	ja     c0103a88 <page_init+0x159>
+c0103a7f:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
+c0103a86:	76 0e                	jbe    c0103a96 <page_init+0x167>
+        maxpa = KMEMSIZE;
+c0103a88:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
+c0103a8f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+    }
+
+    extern char end[];
+
+    npage = maxpa / PGSIZE;
+c0103a96:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0103a99:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0103a9c:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+c0103aa0:	c1 ea 0c             	shr    $0xc,%edx
+c0103aa3:	a3 60 32 1c c0       	mov    %eax,0xc01c3260
+    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
+c0103aa8:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
+c0103aaf:	b8 84 55 1c c0       	mov    $0xc01c5584,%eax
+c0103ab4:	8d 50 ff             	lea    -0x1(%eax),%edx
+c0103ab7:	8b 45 ac             	mov    -0x54(%ebp),%eax
+c0103aba:	01 d0                	add    %edx,%eax
+c0103abc:	89 45 a8             	mov    %eax,-0x58(%ebp)
+c0103abf:	8b 45 a8             	mov    -0x58(%ebp),%eax
+c0103ac2:	ba 00 00 00 00       	mov    $0x0,%edx
+c0103ac7:	f7 75 ac             	divl   -0x54(%ebp)
+c0103aca:	8b 45 a8             	mov    -0x58(%ebp),%eax
+c0103acd:	29 d0                	sub    %edx,%eax
+c0103acf:	a3 a4 53 1c c0       	mov    %eax,0xc01c53a4
+
+    for (i = 0; i < npage; i ++) {
+c0103ad4:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+c0103adb:	eb 27                	jmp    c0103b04 <page_init+0x1d5>
+        SetPageReserved(pages + i);
+c0103add:	a1 a4 53 1c c0       	mov    0xc01c53a4,%eax
+c0103ae2:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0103ae5:	c1 e2 05             	shl    $0x5,%edx
+c0103ae8:	01 d0                	add    %edx,%eax
+c0103aea:	83 c0 04             	add    $0x4,%eax
+c0103aed:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
+c0103af4:	89 45 8c             	mov    %eax,-0x74(%ebp)
+ * Note that @nr may be almost arbitrarily large; this function is not
+ * restricted to acting on a single-word quantity.
+ * */
+static inline void
+set_bit(int nr, volatile void *addr) {
+    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
+c0103af7:	8b 45 8c             	mov    -0x74(%ebp),%eax
+c0103afa:	8b 55 90             	mov    -0x70(%ebp),%edx
+c0103afd:	0f ab 10             	bts    %edx,(%eax)
+    extern char end[];
+
+    npage = maxpa / PGSIZE;
+    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
+
+    for (i = 0; i < npage; i ++) {
+c0103b00:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
+c0103b04:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0103b07:	a1 60 32 1c c0       	mov    0xc01c3260,%eax
+c0103b0c:	39 c2                	cmp    %eax,%edx
+c0103b0e:	72 cd                	jb     c0103add <page_init+0x1ae>
+        SetPageReserved(pages + i);
+    }
+    //point the start address of available memory(note: physical address!)
+    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
+c0103b10:	a1 60 32 1c c0       	mov    0xc01c3260,%eax
+c0103b15:	c1 e0 05             	shl    $0x5,%eax
+c0103b18:	89 c2                	mov    %eax,%edx
+c0103b1a:	a1 a4 53 1c c0       	mov    0xc01c53a4,%eax
+c0103b1f:	01 d0                	add    %edx,%eax
+c0103b21:	89 45 a4             	mov    %eax,-0x5c(%ebp)
+c0103b24:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
+c0103b2b:	77 17                	ja     c0103b44 <page_init+0x215>
+c0103b2d:	ff 75 a4             	pushl  -0x5c(%ebp)
+c0103b30:	68 84 d6 10 c0       	push   $0xc010d684
+c0103b35:	68 e9 00 00 00       	push   $0xe9
+c0103b3a:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c0103b3f:	e8 b0 c8 ff ff       	call   c01003f4 <__panic>
+c0103b44:	8b 45 a4             	mov    -0x5c(%ebp),%eax
+c0103b47:	05 00 00 00 40       	add    $0x40000000,%eax
+c0103b4c:	89 45 a0             	mov    %eax,-0x60(%ebp)
+    //collect all the free memory(aligned with pages)
+    for (i = 0; i < memmap->nr_map; i ++) {
+c0103b4f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+c0103b56:	e9 69 01 00 00       	jmp    c0103cc4 <page_init+0x395>
+        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
+c0103b5b:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c0103b5e:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0103b61:	89 d0                	mov    %edx,%eax
+c0103b63:	c1 e0 02             	shl    $0x2,%eax
+c0103b66:	01 d0                	add    %edx,%eax
+c0103b68:	c1 e0 02             	shl    $0x2,%eax
+c0103b6b:	01 c8                	add    %ecx,%eax
+c0103b6d:	8b 50 08             	mov    0x8(%eax),%edx
+c0103b70:	8b 40 04             	mov    0x4(%eax),%eax
+c0103b73:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c0103b76:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+c0103b79:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c0103b7c:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0103b7f:	89 d0                	mov    %edx,%eax
+c0103b81:	c1 e0 02             	shl    $0x2,%eax
+c0103b84:	01 d0                	add    %edx,%eax
+c0103b86:	c1 e0 02             	shl    $0x2,%eax
+c0103b89:	01 c8                	add    %ecx,%eax
+c0103b8b:	8b 48 0c             	mov    0xc(%eax),%ecx
+c0103b8e:	8b 58 10             	mov    0x10(%eax),%ebx
+c0103b91:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0103b94:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0103b97:	01 c8                	add    %ecx,%eax
+c0103b99:	11 da                	adc    %ebx,%edx
+c0103b9b:	89 45 c8             	mov    %eax,-0x38(%ebp)
+c0103b9e:	89 55 cc             	mov    %edx,-0x34(%ebp)
+        if (memmap->map[i].type == E820_ARM) {
+c0103ba1:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
+c0103ba4:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0103ba7:	89 d0                	mov    %edx,%eax
+c0103ba9:	c1 e0 02             	shl    $0x2,%eax
+c0103bac:	01 d0                	add    %edx,%eax
+c0103bae:	c1 e0 02             	shl    $0x2,%eax
+c0103bb1:	01 c8                	add    %ecx,%eax
+c0103bb3:	83 c0 14             	add    $0x14,%eax
+c0103bb6:	8b 00                	mov    (%eax),%eax
+c0103bb8:	83 f8 01             	cmp    $0x1,%eax
+c0103bbb:	0f 85 ff 00 00 00    	jne    c0103cc0 <page_init+0x391>
+            if (begin < freemem) {
+c0103bc1:	8b 45 a0             	mov    -0x60(%ebp),%eax
+c0103bc4:	ba 00 00 00 00       	mov    $0x0,%edx
+c0103bc9:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+c0103bcc:	72 17                	jb     c0103be5 <page_init+0x2b6>
+c0103bce:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+c0103bd1:	77 05                	ja     c0103bd8 <page_init+0x2a9>
+c0103bd3:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+c0103bd6:	76 0d                	jbe    c0103be5 <page_init+0x2b6>
+                begin = freemem;
+c0103bd8:	8b 45 a0             	mov    -0x60(%ebp),%eax
+c0103bdb:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c0103bde:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
+            }
+            if (end > KMEMSIZE) {
+c0103be5:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
+c0103be9:	72 1d                	jb     c0103c08 <page_init+0x2d9>
+c0103beb:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
+c0103bef:	77 09                	ja     c0103bfa <page_init+0x2cb>
+c0103bf1:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
+c0103bf8:	76 0e                	jbe    c0103c08 <page_init+0x2d9>
+                end = KMEMSIZE;
+c0103bfa:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
+c0103c01:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
+            }
+            if (begin < end) {
+c0103c08:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0103c0b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0103c0e:	3b 55 cc             	cmp    -0x34(%ebp),%edx
+c0103c11:	0f 87 a9 00 00 00    	ja     c0103cc0 <page_init+0x391>
+c0103c17:	3b 55 cc             	cmp    -0x34(%ebp),%edx
+c0103c1a:	72 09                	jb     c0103c25 <page_init+0x2f6>
+c0103c1c:	3b 45 c8             	cmp    -0x38(%ebp),%eax
+c0103c1f:	0f 83 9b 00 00 00    	jae    c0103cc0 <page_init+0x391>
+                begin = ROUNDUP(begin, PGSIZE);
+c0103c25:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
+c0103c2c:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c0103c2f:	8b 45 9c             	mov    -0x64(%ebp),%eax
+c0103c32:	01 d0                	add    %edx,%eax
+c0103c34:	83 e8 01             	sub    $0x1,%eax
+c0103c37:	89 45 98             	mov    %eax,-0x68(%ebp)
+c0103c3a:	8b 45 98             	mov    -0x68(%ebp),%eax
+c0103c3d:	ba 00 00 00 00       	mov    $0x0,%edx
+c0103c42:	f7 75 9c             	divl   -0x64(%ebp)
+c0103c45:	8b 45 98             	mov    -0x68(%ebp),%eax
+c0103c48:	29 d0                	sub    %edx,%eax
+c0103c4a:	ba 00 00 00 00       	mov    $0x0,%edx
+c0103c4f:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c0103c52:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+                end = ROUNDDOWN(end, PGSIZE);
+c0103c55:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0103c58:	89 45 94             	mov    %eax,-0x6c(%ebp)
+c0103c5b:	8b 45 94             	mov    -0x6c(%ebp),%eax
+c0103c5e:	ba 00 00 00 00       	mov    $0x0,%edx
+c0103c63:	89 c3                	mov    %eax,%ebx
+c0103c65:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+c0103c6b:	89 de                	mov    %ebx,%esi
+c0103c6d:	89 d0                	mov    %edx,%eax
+c0103c6f:	83 e0 00             	and    $0x0,%eax
+c0103c72:	89 c7                	mov    %eax,%edi
+c0103c74:	89 75 c8             	mov    %esi,-0x38(%ebp)
+c0103c77:	89 7d cc             	mov    %edi,-0x34(%ebp)
+                if (begin < end) {
+c0103c7a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0103c7d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0103c80:	3b 55 cc             	cmp    -0x34(%ebp),%edx
+c0103c83:	77 3b                	ja     c0103cc0 <page_init+0x391>
+c0103c85:	3b 55 cc             	cmp    -0x34(%ebp),%edx
+c0103c88:	72 05                	jb     c0103c8f <page_init+0x360>
+c0103c8a:	3b 45 c8             	cmp    -0x38(%ebp),%eax
+c0103c8d:	73 31                	jae    c0103cc0 <page_init+0x391>
+                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
+c0103c8f:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0103c92:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c0103c95:	2b 45 d0             	sub    -0x30(%ebp),%eax
+c0103c98:	1b 55 d4             	sbb    -0x2c(%ebp),%edx
+c0103c9b:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+c0103c9f:	c1 ea 0c             	shr    $0xc,%edx
+c0103ca2:	89 c3                	mov    %eax,%ebx
+c0103ca4:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0103ca7:	83 ec 0c             	sub    $0xc,%esp
+c0103caa:	50                   	push   %eax
+c0103cab:	e8 ca f8 ff ff       	call   c010357a <pa2page>
+c0103cb0:	83 c4 10             	add    $0x10,%esp
+c0103cb3:	83 ec 08             	sub    $0x8,%esp
+c0103cb6:	53                   	push   %ebx
+c0103cb7:	50                   	push   %eax
+c0103cb8:	e8 84 fb ff ff       	call   c0103841 <init_memmap>
+c0103cbd:	83 c4 10             	add    $0x10,%esp
+        SetPageReserved(pages + i);
+    }
+    //point the start address of available memory(note: physical address!)
+    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
+    //collect all the free memory(aligned with pages)
+    for (i = 0; i < memmap->nr_map; i ++) {
+c0103cc0:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
+c0103cc4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c0103cc7:	8b 00                	mov    (%eax),%eax
+c0103cc9:	3b 45 dc             	cmp    -0x24(%ebp),%eax
+c0103ccc:	0f 8f 89 fe ff ff    	jg     c0103b5b <page_init+0x22c>
+                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
+                }
+            }
+        }
+    }
+}
+c0103cd2:	90                   	nop
+c0103cd3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+c0103cd6:	5b                   	pop    %ebx
+c0103cd7:	5e                   	pop    %esi
+c0103cd8:	5f                   	pop    %edi
+c0103cd9:	5d                   	pop    %ebp
+c0103cda:	c3                   	ret    
+
+c0103cdb <enable_paging>:
+
+static void
+enable_paging(void) {
+c0103cdb:	55                   	push   %ebp
+c0103cdc:	89 e5                	mov    %esp,%ebp
+c0103cde:	83 ec 10             	sub    $0x10,%esp
+    lcr3(boot_cr3);
+c0103ce1:	a1 a0 53 1c c0       	mov    0xc01c53a0,%eax
+c0103ce6:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
+}
+
+static inline void
+lcr3(uintptr_t cr3) {
+    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
+c0103ce9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0103cec:	0f 22 d8             	mov    %eax,%cr3
+}
+
+static inline uintptr_t
+rcr0(void) {
+    uintptr_t cr0;
+    asm volatile ("mov %%cr0, %0" : "=r" (cr0) :: "memory");
+c0103cef:	0f 20 c0             	mov    %cr0,%eax
+c0103cf2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return cr0;
+c0103cf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+
+    // turn on paging
+    uint32_t cr0 = rcr0();
+c0103cf8:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    cr0 |= CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP;
+c0103cfb:	81 4d f8 2f 00 05 80 	orl    $0x8005002f,-0x8(%ebp)
+    cr0 &= ~(CR0_TS | CR0_EM);
+c0103d02:	83 65 f8 f3          	andl   $0xfffffff3,-0x8(%ebp)
+c0103d06:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c0103d09:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    asm volatile ("pushl %0; popfl" :: "r" (eflags));
+}
+
+static inline void
+lcr0(uintptr_t cr0) {
+    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
+c0103d0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103d0f:	0f 22 c0             	mov    %eax,%cr0
+    lcr0(cr0);
+}
+c0103d12:	90                   	nop
+c0103d13:	c9                   	leave  
+c0103d14:	c3                   	ret    
+
+c0103d15 <boot_map_segment>:
+//  la:   linear address of this memory need to map (after x86 segment map)
+//  size: memory size
+//  pa:   physical address of this memory
+//  perm: permission of this memory  
+static void
+boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
+c0103d15:	55                   	push   %ebp
+c0103d16:	89 e5                	mov    %esp,%ebp
+c0103d18:	83 ec 28             	sub    $0x28,%esp
+    assert(PGOFF(la) == PGOFF(pa));
+c0103d1b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0103d1e:	33 45 14             	xor    0x14(%ebp),%eax
+c0103d21:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0103d26:	85 c0                	test   %eax,%eax
+c0103d28:	74 19                	je     c0103d43 <boot_map_segment+0x2e>
+c0103d2a:	68 b6 d6 10 c0       	push   $0xc010d6b6
+c0103d2f:	68 cd d6 10 c0       	push   $0xc010d6cd
+c0103d34:	68 12 01 00 00       	push   $0x112
+c0103d39:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c0103d3e:	e8 b1 c6 ff ff       	call   c01003f4 <__panic>
+    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
+c0103d43:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
+c0103d4a:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0103d4d:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0103d52:	89 c2                	mov    %eax,%edx
+c0103d54:	8b 45 10             	mov    0x10(%ebp),%eax
+c0103d57:	01 c2                	add    %eax,%edx
+c0103d59:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103d5c:	01 d0                	add    %edx,%eax
+c0103d5e:	83 e8 01             	sub    $0x1,%eax
+c0103d61:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0103d64:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0103d67:	ba 00 00 00 00       	mov    $0x0,%edx
+c0103d6c:	f7 75 f0             	divl   -0x10(%ebp)
+c0103d6f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0103d72:	29 d0                	sub    %edx,%eax
+c0103d74:	c1 e8 0c             	shr    $0xc,%eax
+c0103d77:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    la = ROUNDDOWN(la, PGSIZE);
+c0103d7a:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0103d7d:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0103d80:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0103d83:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0103d88:	89 45 0c             	mov    %eax,0xc(%ebp)
+    pa = ROUNDDOWN(pa, PGSIZE);
+c0103d8b:	8b 45 14             	mov    0x14(%ebp),%eax
+c0103d8e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0103d91:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0103d94:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0103d99:	89 45 14             	mov    %eax,0x14(%ebp)
+    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
+c0103d9c:	eb 57                	jmp    c0103df5 <boot_map_segment+0xe0>
+        pte_t *ptep = get_pte(pgdir, la, 1);
+c0103d9e:	83 ec 04             	sub    $0x4,%esp
+c0103da1:	6a 01                	push   $0x1
+c0103da3:	ff 75 0c             	pushl  0xc(%ebp)
+c0103da6:	ff 75 08             	pushl  0x8(%ebp)
+c0103da9:	e8 9d 01 00 00       	call   c0103f4b <get_pte>
+c0103dae:	83 c4 10             	add    $0x10,%esp
+c0103db1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        assert(ptep != NULL);
+c0103db4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+c0103db8:	75 19                	jne    c0103dd3 <boot_map_segment+0xbe>
+c0103dba:	68 e2 d6 10 c0       	push   $0xc010d6e2
+c0103dbf:	68 cd d6 10 c0       	push   $0xc010d6cd
+c0103dc4:	68 18 01 00 00       	push   $0x118
+c0103dc9:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c0103dce:	e8 21 c6 ff ff       	call   c01003f4 <__panic>
+        *ptep = pa | PTE_P | perm;
+c0103dd3:	8b 45 14             	mov    0x14(%ebp),%eax
+c0103dd6:	0b 45 18             	or     0x18(%ebp),%eax
+c0103dd9:	83 c8 01             	or     $0x1,%eax
+c0103ddc:	89 c2                	mov    %eax,%edx
+c0103dde:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0103de1:	89 10                	mov    %edx,(%eax)
+boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
+    assert(PGOFF(la) == PGOFF(pa));
+    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
+    la = ROUNDDOWN(la, PGSIZE);
+    pa = ROUNDDOWN(pa, PGSIZE);
+    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
+c0103de3:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+c0103de7:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
+c0103dee:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
+c0103df5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0103df9:	75 a3                	jne    c0103d9e <boot_map_segment+0x89>
+        pte_t *ptep = get_pte(pgdir, la, 1);
+        assert(ptep != NULL);
+        *ptep = pa | PTE_P | perm;
+    }
+}
+c0103dfb:	90                   	nop
+c0103dfc:	c9                   	leave  
+c0103dfd:	c3                   	ret    
+
+c0103dfe <boot_alloc_page>:
+
+//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
+// return value: the kernel virtual address of this allocated page
+//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
+static void *
+boot_alloc_page(void) {
+c0103dfe:	55                   	push   %ebp
+c0103dff:	89 e5                	mov    %esp,%ebp
+c0103e01:	83 ec 18             	sub    $0x18,%esp
+    struct Page *p = alloc_page();
+c0103e04:	83 ec 0c             	sub    $0xc,%esp
+c0103e07:	6a 01                	push   $0x1
+c0103e09:	e8 52 fa ff ff       	call   c0103860 <alloc_pages>
+c0103e0e:	83 c4 10             	add    $0x10,%esp
+c0103e11:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (p == NULL) {
+c0103e14:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0103e18:	75 17                	jne    c0103e31 <boot_alloc_page+0x33>
+        panic("boot_alloc_page failed.\n");
+c0103e1a:	83 ec 04             	sub    $0x4,%esp
+c0103e1d:	68 ef d6 10 c0       	push   $0xc010d6ef
+c0103e22:	68 24 01 00 00       	push   $0x124
+c0103e27:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c0103e2c:	e8 c3 c5 ff ff       	call   c01003f4 <__panic>
+    }
+    return page2kva(p);
+c0103e31:	83 ec 0c             	sub    $0xc,%esp
+c0103e34:	ff 75 f4             	pushl  -0xc(%ebp)
+c0103e37:	e8 7b f7 ff ff       	call   c01035b7 <page2kva>
+c0103e3c:	83 c4 10             	add    $0x10,%esp
+}
+c0103e3f:	c9                   	leave  
+c0103e40:	c3                   	ret    
+
+c0103e41 <pmm_init>:
+
+//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
+//         - check the correctness of pmm & paging mechanism, print PDT&PT
+void
+pmm_init(void) {
+c0103e41:	55                   	push   %ebp
+c0103e42:	89 e5                	mov    %esp,%ebp
+c0103e44:	83 ec 18             	sub    $0x18,%esp
+    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
+    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
+    //First we should init a physical memory manager(pmm) based on the framework.
+    //Then pmm can alloc/free the physical memory. 
+    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
+    init_pmm_manager();
+c0103e47:	e8 c0 f9 ff ff       	call   c010380c <init_pmm_manager>
+
+    // detect physical memory space, reserve already used memory,
+    // then use pmm->init_memmap to create free page list
+    page_init();
+c0103e4c:	e8 de fa ff ff       	call   c010392f <page_init>
+
+    //use pmm->check to verify the correctness of the alloc/free function in a pmm
+    check_alloc_page();
+c0103e51:	e8 71 08 00 00       	call   c01046c7 <check_alloc_page>
+
+    // create boot_pgdir, an initial page directory(Page Directory Table, PDT)
+    boot_pgdir = boot_alloc_page();
+c0103e56:	e8 a3 ff ff ff       	call   c0103dfe <boot_alloc_page>
+c0103e5b:	a3 64 32 1c c0       	mov    %eax,0xc01c3264
+    memset(boot_pgdir, 0, PGSIZE);
+c0103e60:	a1 64 32 1c c0       	mov    0xc01c3264,%eax
+c0103e65:	83 ec 04             	sub    $0x4,%esp
+c0103e68:	68 00 10 00 00       	push   $0x1000
+c0103e6d:	6a 00                	push   $0x0
+c0103e6f:	50                   	push   %eax
+c0103e70:	e8 73 85 00 00       	call   c010c3e8 <memset>
+c0103e75:	83 c4 10             	add    $0x10,%esp
+    boot_cr3 = PADDR(boot_pgdir);
+c0103e78:	a1 64 32 1c c0       	mov    0xc01c3264,%eax
+c0103e7d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0103e80:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
+c0103e87:	77 17                	ja     c0103ea0 <pmm_init+0x5f>
+c0103e89:	ff 75 f4             	pushl  -0xc(%ebp)
+c0103e8c:	68 84 d6 10 c0       	push   $0xc010d684
+c0103e91:	68 3e 01 00 00       	push   $0x13e
+c0103e96:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c0103e9b:	e8 54 c5 ff ff       	call   c01003f4 <__panic>
+c0103ea0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103ea3:	05 00 00 00 40       	add    $0x40000000,%eax
+c0103ea8:	a3 a0 53 1c c0       	mov    %eax,0xc01c53a0
+
+    check_pgdir();
+c0103ead:	e8 38 08 00 00       	call   c01046ea <check_pgdir>
+
+    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);
+
+    // recursively insert boot_pgdir in itself
+    // to form a virtual page table at virtual address VPT
+    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
+c0103eb2:	a1 64 32 1c c0       	mov    0xc01c3264,%eax
+c0103eb7:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
+c0103ebd:	a1 64 32 1c c0       	mov    0xc01c3264,%eax
+c0103ec2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0103ec5:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
+c0103ecc:	77 17                	ja     c0103ee5 <pmm_init+0xa4>
+c0103ece:	ff 75 f0             	pushl  -0x10(%ebp)
+c0103ed1:	68 84 d6 10 c0       	push   $0xc010d684
+c0103ed6:	68 46 01 00 00       	push   $0x146
+c0103edb:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c0103ee0:	e8 0f c5 ff ff       	call   c01003f4 <__panic>
+c0103ee5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0103ee8:	05 00 00 00 40       	add    $0x40000000,%eax
+c0103eed:	83 c8 03             	or     $0x3,%eax
+c0103ef0:	89 02                	mov    %eax,(%edx)
+
+    // map all physical memory to linear memory with base linear addr KERNBASE
+    //linear_addr KERNBASE~KERNBASE+KMEMSIZE = phy_addr 0~KMEMSIZE
+    //But shouldn't use this map until enable_paging() & gdt_init() finished.
+    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
+c0103ef2:	a1 64 32 1c c0       	mov    0xc01c3264,%eax
+c0103ef7:	83 ec 0c             	sub    $0xc,%esp
+c0103efa:	6a 02                	push   $0x2
+c0103efc:	6a 00                	push   $0x0
+c0103efe:	68 00 00 00 38       	push   $0x38000000
+c0103f03:	68 00 00 00 c0       	push   $0xc0000000
+c0103f08:	50                   	push   %eax
+c0103f09:	e8 07 fe ff ff       	call   c0103d15 <boot_map_segment>
+c0103f0e:	83 c4 20             	add    $0x20,%esp
+
+    //temporary map: 
+    //virtual_addr 3G~3G+4M = linear_addr 0~4M = linear_addr 3G~3G+4M = phy_addr 0~4M     
+    boot_pgdir[0] = boot_pgdir[PDX(KERNBASE)];
+c0103f11:	a1 64 32 1c c0       	mov    0xc01c3264,%eax
+c0103f16:	8b 15 64 32 1c c0    	mov    0xc01c3264,%edx
+c0103f1c:	8b 92 00 0c 00 00    	mov    0xc00(%edx),%edx
+c0103f22:	89 10                	mov    %edx,(%eax)
+
+    enable_paging();
+c0103f24:	e8 b2 fd ff ff       	call   c0103cdb <enable_paging>
+
+    //reload gdt(third time,the last time) to map all physical memory
+    //virtual_addr 0~4G=liear_addr 0~4G
+    //then set kernel stack(ss:esp) in TSS, setup TSS in gdt, load TSS
+    gdt_init();
+c0103f29:	e8 ec f7 ff ff       	call   c010371a <gdt_init>
+
+    //disable the map of virtual_addr 0~4M
+    boot_pgdir[0] = 0;
+c0103f2e:	a1 64 32 1c c0       	mov    0xc01c3264,%eax
+c0103f33:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+
+    //now the basic virtual memory map(see memalyout.h) is established.
+    //check the correctness of the basic virtual memory map.
+    check_boot_pgdir();
+c0103f39:	e8 12 0d 00 00       	call   c0104c50 <check_boot_pgdir>
+
+    print_pgdir();
+c0103f3e:	e8 08 11 00 00       	call   c010504b <print_pgdir>
+    
+    kmalloc_init();
+c0103f43:	e8 d0 2b 00 00       	call   c0106b18 <kmalloc_init>
+
+}
+c0103f48:	90                   	nop
+c0103f49:	c9                   	leave  
+c0103f4a:	c3                   	ret    
+
+c0103f4b <get_pte>:
+//  pgdir:  the kernel virtual base address of PDT
+//  la:     the linear address need to map
+//  create: a logical value to decide if alloc a page for PT
+// return vaule: the kernel virtual address of this pte
+pte_t *
+get_pte(pde_t *pgdir, uintptr_t la, bool create) {
+c0103f4b:	55                   	push   %ebp
+c0103f4c:	89 e5                	mov    %esp,%ebp
+c0103f4e:	83 ec 28             	sub    $0x28,%esp
+     *   PTE_P           0x001                   // page table/directory entry flags bit : Present
+     *   PTE_W           0x002                   // page table/directory entry flags bit : Writeable
+     *   PTE_U           0x004                   // page table/directory entry flags bit : User can access
+     */
+
+    pde_t *pdep = NULL;
+c0103f51:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    pdep = pgdir + PDX(la);// (1) find page directory entry
+c0103f58:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0103f5b:	c1 e8 16             	shr    $0x16,%eax
+c0103f5e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0103f65:	8b 45 08             	mov    0x8(%ebp),%eax
+c0103f68:	01 d0                	add    %edx,%eax
+c0103f6a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    bool isPresent = (*pdep) & PTE_P;// (2) check if entry is not present
+c0103f6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103f70:	8b 00                	mov    (%eax),%eax
+c0103f72:	83 e0 01             	and    $0x1,%eax
+c0103f75:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if (!isPresent){
+c0103f78:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0103f7c:	0f 85 92 00 00 00    	jne    c0104014 <get_pte+0xc9>
+    	if (!create) return NULL; // (3) check if creating is needed, then alloc page for page table
+c0103f82:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c0103f86:	75 0a                	jne    c0103f92 <get_pte+0x47>
+c0103f88:	b8 00 00 00 00       	mov    $0x0,%eax
+c0103f8d:	e9 db 00 00 00       	jmp    c010406d <get_pte+0x122>
+    	else{
+    		struct Page *pt_page = alloc_page();
+c0103f92:	83 ec 0c             	sub    $0xc,%esp
+c0103f95:	6a 01                	push   $0x1
+c0103f97:	e8 c4 f8 ff ff       	call   c0103860 <alloc_pages>
+c0103f9c:	83 c4 10             	add    $0x10,%esp
+c0103f9f:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    		uintptr_t pt_p = page2pa(pt_page);
+c0103fa2:	83 ec 0c             	sub    $0xc,%esp
+c0103fa5:	ff 75 ec             	pushl  -0x14(%ebp)
+c0103fa8:	e8 ba f5 ff ff       	call   c0103567 <page2pa>
+c0103fad:	83 c4 10             	add    $0x10,%esp
+c0103fb0:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    		pte_t *pt_k = page2kva(pt_page);// (5) get linear address of page
+c0103fb3:	83 ec 0c             	sub    $0xc,%esp
+c0103fb6:	ff 75 ec             	pushl  -0x14(%ebp)
+c0103fb9:	e8 f9 f5 ff ff       	call   c01035b7 <page2kva>
+c0103fbe:	83 c4 10             	add    $0x10,%esp
+c0103fc1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    		set_page_ref(pt_page, 1); // (4) set page reference
+c0103fc4:	83 ec 08             	sub    $0x8,%esp
+c0103fc7:	6a 01                	push   $0x1
+c0103fc9:	ff 75 ec             	pushl  -0x14(%ebp)
+c0103fcc:	e8 8b f6 ff ff       	call   c010365c <set_page_ref>
+c0103fd1:	83 c4 10             	add    $0x10,%esp
+    		memset(pt_k, 0, PGSIZE); // (6) clear page content using memset
+c0103fd4:	83 ec 04             	sub    $0x4,%esp
+c0103fd7:	68 00 10 00 00       	push   $0x1000
+c0103fdc:	6a 00                	push   $0x0
+c0103fde:	ff 75 e4             	pushl  -0x1c(%ebp)
+c0103fe1:	e8 02 84 00 00       	call   c010c3e8 <memset>
+c0103fe6:	83 c4 10             	add    $0x10,%esp
+    		*pdep = (pt_p & ~0x0FFF) | PTE_U | PTE_W | PTE_P; // (7) set page directory entry's permission
+c0103fe9:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0103fec:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0103ff1:	83 c8 07             	or     $0x7,%eax
+c0103ff4:	89 c2                	mov    %eax,%edx
+c0103ff6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0103ff9:	89 10                	mov    %edx,(%eax)
+    		return pt_k + PTX(la); // (8) return page table entry
+c0103ffb:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0103ffe:	c1 e8 0c             	shr    $0xc,%eax
+c0104001:	25 ff 03 00 00       	and    $0x3ff,%eax
+c0104006:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c010400d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0104010:	01 d0                	add    %edx,%eax
+c0104012:	eb 59                	jmp    c010406d <get_pte+0x122>
+    	}
+    }else{// CAUTION: this page is used for page table, not for common data page
+    	pte_t *pt_p = (pte_t *)((*pdep) & ~0x0FFF);
+c0104014:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104017:	8b 00                	mov    (%eax),%eax
+c0104019:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c010401e:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    	return KADDR((uintptr_t)(pt_p + PTX(la)));
+c0104021:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0104024:	c1 e8 0c             	shr    $0xc,%eax
+c0104027:	25 ff 03 00 00       	and    $0x3ff,%eax
+c010402c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0104033:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0104036:	01 d0                	add    %edx,%eax
+c0104038:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c010403b:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010403e:	c1 e8 0c             	shr    $0xc,%eax
+c0104041:	89 45 d8             	mov    %eax,-0x28(%ebp)
+c0104044:	a1 60 32 1c c0       	mov    0xc01c3260,%eax
+c0104049:	39 45 d8             	cmp    %eax,-0x28(%ebp)
+c010404c:	72 17                	jb     c0104065 <get_pte+0x11a>
+c010404e:	ff 75 dc             	pushl  -0x24(%ebp)
+c0104051:	68 e0 d5 10 c0       	push   $0xc010d5e0
+c0104056:	68 94 01 00 00       	push   $0x194
+c010405b:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c0104060:	e8 8f c3 ff ff       	call   c01003f4 <__panic>
+c0104065:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0104068:	2d 00 00 00 40       	sub    $0x40000000,%eax
+    }
+    return NULL;
+}
+c010406d:	c9                   	leave  
+c010406e:	c3                   	ret    
+
+c010406f <get_page>:
+
+//get_page - get related Page struct for linear address la using PDT pgdir
+struct Page *
+get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
+c010406f:	55                   	push   %ebp
+c0104070:	89 e5                	mov    %esp,%ebp
+c0104072:	83 ec 18             	sub    $0x18,%esp
+    pte_t *ptep = get_pte(pgdir, la, 0);
+c0104075:	83 ec 04             	sub    $0x4,%esp
+c0104078:	6a 00                	push   $0x0
+c010407a:	ff 75 0c             	pushl  0xc(%ebp)
+c010407d:	ff 75 08             	pushl  0x8(%ebp)
+c0104080:	e8 c6 fe ff ff       	call   c0103f4b <get_pte>
+c0104085:	83 c4 10             	add    $0x10,%esp
+c0104088:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (ptep_store != NULL) {
+c010408b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010408f:	74 08                	je     c0104099 <get_page+0x2a>
+        *ptep_store = ptep;
+c0104091:	8b 45 10             	mov    0x10(%ebp),%eax
+c0104094:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0104097:	89 10                	mov    %edx,(%eax)
+    }
+    if (ptep != NULL && *ptep & PTE_P) {
+c0104099:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010409d:	74 1f                	je     c01040be <get_page+0x4f>
+c010409f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01040a2:	8b 00                	mov    (%eax),%eax
+c01040a4:	83 e0 01             	and    $0x1,%eax
+c01040a7:	85 c0                	test   %eax,%eax
+c01040a9:	74 13                	je     c01040be <get_page+0x4f>
+        return pte2page(*ptep);
+c01040ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01040ae:	8b 00                	mov    (%eax),%eax
+c01040b0:	83 ec 0c             	sub    $0xc,%esp
+c01040b3:	50                   	push   %eax
+c01040b4:	e8 43 f5 ff ff       	call   c01035fc <pte2page>
+c01040b9:	83 c4 10             	add    $0x10,%esp
+c01040bc:	eb 05                	jmp    c01040c3 <get_page+0x54>
+    }
+    return NULL;
+c01040be:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01040c3:	c9                   	leave  
+c01040c4:	c3                   	ret    
+
+c01040c5 <page_remove_pte>:
+
+//page_remove_pte - free an Page sturct which is related linear address la
+//                - and clean(invalidate) pte which is related linear address la
+//note: PT is changed, so the TLB need to be invalidate 
+static inline void
+page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
+c01040c5:	55                   	push   %ebp
+c01040c6:	89 e5                	mov    %esp,%ebp
+c01040c8:	83 ec 18             	sub    $0x18,%esp
+     *   tlb_invalidate(pde_t *pgdir, uintptr_t la) : Invalidate a TLB entry, but only if the page tables being
+     *                        edited are the ones currently in use by the processor.
+     * DEFINEs:
+     *   PTE_P           0x001                   // page table/directory entry flags bit : Present
+     */
+	bool isPresent = (*ptep) & PTE_P;
+c01040cb:	8b 45 10             	mov    0x10(%ebp),%eax
+c01040ce:	8b 00                	mov    (%eax),%eax
+c01040d0:	83 e0 01             	and    $0x1,%eax
+c01040d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (isPresent) {                      		//(1) check if this page table entry is present
+c01040d6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01040da:	74 55                	je     c0104131 <page_remove_pte+0x6c>
+        struct Page *page = pte2page(*ptep); 	//(2) find corresponding page to pte
+c01040dc:	8b 45 10             	mov    0x10(%ebp),%eax
+c01040df:	8b 00                	mov    (%eax),%eax
+c01040e1:	83 ec 0c             	sub    $0xc,%esp
+c01040e4:	50                   	push   %eax
+c01040e5:	e8 12 f5 ff ff       	call   c01035fc <pte2page>
+c01040ea:	83 c4 10             	add    $0x10,%esp
+c01040ed:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        int new_ref = page_ref_dec(page);    	//(3) decrease page reference
+c01040f0:	83 ec 0c             	sub    $0xc,%esp
+c01040f3:	ff 75 f0             	pushl  -0x10(%ebp)
+c01040f6:	e8 86 f5 ff ff       	call   c0103681 <page_ref_dec>
+c01040fb:	83 c4 10             	add    $0x10,%esp
+c01040fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        if (!new_ref){                          //(4) and free this page when page reference reachs 0
+c0104101:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c0104105:	75 10                	jne    c0104117 <page_remove_pte+0x52>
+        	free_page(page);    				//(5) clear second page table entry
+c0104107:	83 ec 08             	sub    $0x8,%esp
+c010410a:	6a 01                	push   $0x1
+c010410c:	ff 75 f0             	pushl  -0x10(%ebp)
+c010410f:	e8 b8 f7 ff ff       	call   c01038cc <free_pages>
+c0104114:	83 c4 10             	add    $0x10,%esp
+        }										//(6) flush tlb
+        *ptep = 0x0;
+c0104117:	8b 45 10             	mov    0x10(%ebp),%eax
+c010411a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+        tlb_invalidate(pgdir, la);
+c0104120:	83 ec 08             	sub    $0x8,%esp
+c0104123:	ff 75 0c             	pushl  0xc(%ebp)
+c0104126:	ff 75 08             	pushl  0x8(%ebp)
+c0104129:	e8 98 04 00 00       	call   c01045c6 <tlb_invalidate>
+c010412e:	83 c4 10             	add    $0x10,%esp
+    }
+}
+c0104131:	90                   	nop
+c0104132:	c9                   	leave  
+c0104133:	c3                   	ret    
+
+c0104134 <unmap_range>:
+
+void
+unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
+c0104134:	55                   	push   %ebp
+c0104135:	89 e5                	mov    %esp,%ebp
+c0104137:	83 ec 18             	sub    $0x18,%esp
+    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
+c010413a:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010413d:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0104142:	85 c0                	test   %eax,%eax
+c0104144:	75 0c                	jne    c0104152 <unmap_range+0x1e>
+c0104146:	8b 45 10             	mov    0x10(%ebp),%eax
+c0104149:	25 ff 0f 00 00       	and    $0xfff,%eax
+c010414e:	85 c0                	test   %eax,%eax
+c0104150:	74 19                	je     c010416b <unmap_range+0x37>
+c0104152:	68 08 d7 10 c0       	push   $0xc010d708
+c0104157:	68 cd d6 10 c0       	push   $0xc010d6cd
+c010415c:	68 c9 01 00 00       	push   $0x1c9
+c0104161:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c0104166:	e8 89 c2 ff ff       	call   c01003f4 <__panic>
+    assert(USER_ACCESS(start, end));
+c010416b:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
+c0104172:	76 11                	jbe    c0104185 <unmap_range+0x51>
+c0104174:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0104177:	3b 45 10             	cmp    0x10(%ebp),%eax
+c010417a:	73 09                	jae    c0104185 <unmap_range+0x51>
+c010417c:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
+c0104183:	76 19                	jbe    c010419e <unmap_range+0x6a>
+c0104185:	68 31 d7 10 c0       	push   $0xc010d731
+c010418a:	68 cd d6 10 c0       	push   $0xc010d6cd
+c010418f:	68 ca 01 00 00       	push   $0x1ca
+c0104194:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c0104199:	e8 56 c2 ff ff       	call   c01003f4 <__panic>
+
+    do {
+        pte_t *ptep = get_pte(pgdir, start, 0);
+c010419e:	83 ec 04             	sub    $0x4,%esp
+c01041a1:	6a 00                	push   $0x0
+c01041a3:	ff 75 0c             	pushl  0xc(%ebp)
+c01041a6:	ff 75 08             	pushl  0x8(%ebp)
+c01041a9:	e8 9d fd ff ff       	call   c0103f4b <get_pte>
+c01041ae:	83 c4 10             	add    $0x10,%esp
+c01041b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        if (ptep == NULL) {
+c01041b4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01041b8:	75 18                	jne    c01041d2 <unmap_range+0x9e>
+            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
+c01041ba:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01041bd:	05 00 00 40 00       	add    $0x400000,%eax
+c01041c2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01041c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01041c8:	25 00 00 c0 ff       	and    $0xffc00000,%eax
+c01041cd:	89 45 0c             	mov    %eax,0xc(%ebp)
+            continue ;
+c01041d0:	eb 24                	jmp    c01041f6 <unmap_range+0xc2>
+        }
+        if (*ptep != 0) {
+c01041d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01041d5:	8b 00                	mov    (%eax),%eax
+c01041d7:	85 c0                	test   %eax,%eax
+c01041d9:	74 14                	je     c01041ef <unmap_range+0xbb>
+            page_remove_pte(pgdir, start, ptep);
+c01041db:	83 ec 04             	sub    $0x4,%esp
+c01041de:	ff 75 f4             	pushl  -0xc(%ebp)
+c01041e1:	ff 75 0c             	pushl  0xc(%ebp)
+c01041e4:	ff 75 08             	pushl  0x8(%ebp)
+c01041e7:	e8 d9 fe ff ff       	call   c01040c5 <page_remove_pte>
+c01041ec:	83 c4 10             	add    $0x10,%esp
+        }
+        start += PGSIZE;
+c01041ef:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
+    } while (start != 0 && start < end);
+c01041f6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c01041fa:	74 08                	je     c0104204 <unmap_range+0xd0>
+c01041fc:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01041ff:	3b 45 10             	cmp    0x10(%ebp),%eax
+c0104202:	72 9a                	jb     c010419e <unmap_range+0x6a>
+}
+c0104204:	90                   	nop
+c0104205:	c9                   	leave  
+c0104206:	c3                   	ret    
+
+c0104207 <exit_range>:
+
+void
+exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
+c0104207:	55                   	push   %ebp
+c0104208:	89 e5                	mov    %esp,%ebp
+c010420a:	83 ec 18             	sub    $0x18,%esp
+    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
+c010420d:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0104210:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0104215:	85 c0                	test   %eax,%eax
+c0104217:	75 0c                	jne    c0104225 <exit_range+0x1e>
+c0104219:	8b 45 10             	mov    0x10(%ebp),%eax
+c010421c:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0104221:	85 c0                	test   %eax,%eax
+c0104223:	74 19                	je     c010423e <exit_range+0x37>
+c0104225:	68 08 d7 10 c0       	push   $0xc010d708
+c010422a:	68 cd d6 10 c0       	push   $0xc010d6cd
+c010422f:	68 db 01 00 00       	push   $0x1db
+c0104234:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c0104239:	e8 b6 c1 ff ff       	call   c01003f4 <__panic>
+    assert(USER_ACCESS(start, end));
+c010423e:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
+c0104245:	76 11                	jbe    c0104258 <exit_range+0x51>
+c0104247:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010424a:	3b 45 10             	cmp    0x10(%ebp),%eax
+c010424d:	73 09                	jae    c0104258 <exit_range+0x51>
+c010424f:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
+c0104256:	76 19                	jbe    c0104271 <exit_range+0x6a>
+c0104258:	68 31 d7 10 c0       	push   $0xc010d731
+c010425d:	68 cd d6 10 c0       	push   $0xc010d6cd
+c0104262:	68 dc 01 00 00       	push   $0x1dc
+c0104267:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c010426c:	e8 83 c1 ff ff       	call   c01003f4 <__panic>
+
+    start = ROUNDDOWN(start, PTSIZE);
+c0104271:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0104274:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0104277:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010427a:	25 00 00 c0 ff       	and    $0xffc00000,%eax
+c010427f:	89 45 0c             	mov    %eax,0xc(%ebp)
+    do {
+        int pde_idx = PDX(start);
+c0104282:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0104285:	c1 e8 16             	shr    $0x16,%eax
+c0104288:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        if (pgdir[pde_idx] & PTE_P) {
+c010428b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010428e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0104295:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104298:	01 d0                	add    %edx,%eax
+c010429a:	8b 00                	mov    (%eax),%eax
+c010429c:	83 e0 01             	and    $0x1,%eax
+c010429f:	85 c0                	test   %eax,%eax
+c01042a1:	74 40                	je     c01042e3 <exit_range+0xdc>
+            free_page(pde2page(pgdir[pde_idx]));
+c01042a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01042a6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c01042ad:	8b 45 08             	mov    0x8(%ebp),%eax
+c01042b0:	01 d0                	add    %edx,%eax
+c01042b2:	8b 00                	mov    (%eax),%eax
+c01042b4:	83 ec 0c             	sub    $0xc,%esp
+c01042b7:	50                   	push   %eax
+c01042b8:	e8 79 f3 ff ff       	call   c0103636 <pde2page>
+c01042bd:	83 c4 10             	add    $0x10,%esp
+c01042c0:	83 ec 08             	sub    $0x8,%esp
+c01042c3:	6a 01                	push   $0x1
+c01042c5:	50                   	push   %eax
+c01042c6:	e8 01 f6 ff ff       	call   c01038cc <free_pages>
+c01042cb:	83 c4 10             	add    $0x10,%esp
+            pgdir[pde_idx] = 0;
+c01042ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01042d1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c01042d8:	8b 45 08             	mov    0x8(%ebp),%eax
+c01042db:	01 d0                	add    %edx,%eax
+c01042dd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+        }
+        start += PTSIZE;
+c01042e3:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
+    } while (start != 0 && start < end);
+c01042ea:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c01042ee:	74 08                	je     c01042f8 <exit_range+0xf1>
+c01042f0:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01042f3:	3b 45 10             	cmp    0x10(%ebp),%eax
+c01042f6:	72 8a                	jb     c0104282 <exit_range+0x7b>
+}
+c01042f8:	90                   	nop
+c01042f9:	c9                   	leave  
+c01042fa:	c3                   	ret    
+
+c01042fb <copy_range>:
+ * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
+ *
+ * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
+ */
+int
+copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
+c01042fb:	55                   	push   %ebp
+c01042fc:	89 e5                	mov    %esp,%ebp
+c01042fe:	83 ec 38             	sub    $0x38,%esp
+    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
+c0104301:	8b 45 10             	mov    0x10(%ebp),%eax
+c0104304:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0104309:	85 c0                	test   %eax,%eax
+c010430b:	75 0c                	jne    c0104319 <copy_range+0x1e>
+c010430d:	8b 45 14             	mov    0x14(%ebp),%eax
+c0104310:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0104315:	85 c0                	test   %eax,%eax
+c0104317:	74 19                	je     c0104332 <copy_range+0x37>
+c0104319:	68 08 d7 10 c0       	push   $0xc010d708
+c010431e:	68 cd d6 10 c0       	push   $0xc010d6cd
+c0104323:	68 f1 01 00 00       	push   $0x1f1
+c0104328:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c010432d:	e8 c2 c0 ff ff       	call   c01003f4 <__panic>
+    assert(USER_ACCESS(start, end));
+c0104332:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
+c0104339:	76 11                	jbe    c010434c <copy_range+0x51>
+c010433b:	8b 45 10             	mov    0x10(%ebp),%eax
+c010433e:	3b 45 14             	cmp    0x14(%ebp),%eax
+c0104341:	73 09                	jae    c010434c <copy_range+0x51>
+c0104343:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
+c010434a:	76 19                	jbe    c0104365 <copy_range+0x6a>
+c010434c:	68 31 d7 10 c0       	push   $0xc010d731
+c0104351:	68 cd d6 10 c0       	push   $0xc010d6cd
+c0104356:	68 f2 01 00 00       	push   $0x1f2
+c010435b:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c0104360:	e8 8f c0 ff ff       	call   c01003f4 <__panic>
+    // copy content by page unit.
+    do {
+        //call get_pte to find process A's pte according to the addr start
+        pte_t *ptep = get_pte(from, start, 0), *nptep;
+c0104365:	83 ec 04             	sub    $0x4,%esp
+c0104368:	6a 00                	push   $0x0
+c010436a:	ff 75 10             	pushl  0x10(%ebp)
+c010436d:	ff 75 0c             	pushl  0xc(%ebp)
+c0104370:	e8 d6 fb ff ff       	call   c0103f4b <get_pte>
+c0104375:	83 c4 10             	add    $0x10,%esp
+c0104378:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        if (ptep == NULL) {
+c010437b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010437f:	75 1b                	jne    c010439c <copy_range+0xa1>
+            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
+c0104381:	8b 45 10             	mov    0x10(%ebp),%eax
+c0104384:	05 00 00 40 00       	add    $0x400000,%eax
+c0104389:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010438c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010438f:	25 00 00 c0 ff       	and    $0xffc00000,%eax
+c0104394:	89 45 10             	mov    %eax,0x10(%ebp)
+            continue ;
+c0104397:	e9 1f 01 00 00       	jmp    c01044bb <copy_range+0x1c0>
+        }
+        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
+        if (*ptep & PTE_P) {
+c010439c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010439f:	8b 00                	mov    (%eax),%eax
+c01043a1:	83 e0 01             	and    $0x1,%eax
+c01043a4:	85 c0                	test   %eax,%eax
+c01043a6:	0f 84 08 01 00 00    	je     c01044b4 <copy_range+0x1b9>
+        	if ((nptep = get_pte(to, start, 1)) == NULL) {
+c01043ac:	83 ec 04             	sub    $0x4,%esp
+c01043af:	6a 01                	push   $0x1
+c01043b1:	ff 75 10             	pushl  0x10(%ebp)
+c01043b4:	ff 75 08             	pushl  0x8(%ebp)
+c01043b7:	e8 8f fb ff ff       	call   c0103f4b <get_pte>
+c01043bc:	83 c4 10             	add    $0x10,%esp
+c01043bf:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c01043c2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c01043c6:	75 0a                	jne    c01043d2 <copy_range+0xd7>
+        		return -E_NO_MEM;
+c01043c8:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
+c01043cd:	e9 00 01 00 00       	jmp    c01044d2 <copy_range+0x1d7>
+        	}
+        	uint32_t perm = (*ptep & PTE_USER);
+c01043d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01043d5:	8b 00                	mov    (%eax),%eax
+c01043d7:	83 e0 07             	and    $0x7,%eax
+c01043da:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        	//get page from ptep
+        	struct Page *page = pte2page(*ptep);
+c01043dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01043e0:	8b 00                	mov    (%eax),%eax
+c01043e2:	83 ec 0c             	sub    $0xc,%esp
+c01043e5:	50                   	push   %eax
+c01043e6:	e8 11 f2 ff ff       	call   c01035fc <pte2page>
+c01043eb:	83 c4 10             	add    $0x10,%esp
+c01043ee:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        	// alloc a page for process B
+        	struct Page *npage=alloc_page();
+c01043f1:	83 ec 0c             	sub    $0xc,%esp
+c01043f4:	6a 01                	push   $0x1
+c01043f6:	e8 65 f4 ff ff       	call   c0103860 <alloc_pages>
+c01043fb:	83 c4 10             	add    $0x10,%esp
+c01043fe:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        	assert(page!=NULL);
+c0104401:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c0104405:	75 19                	jne    c0104420 <copy_range+0x125>
+c0104407:	68 49 d7 10 c0       	push   $0xc010d749
+c010440c:	68 cd d6 10 c0       	push   $0xc010d6cd
+c0104411:	68 05 02 00 00       	push   $0x205
+c0104416:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c010441b:	e8 d4 bf ff ff       	call   c01003f4 <__panic>
+        	assert(npage!=NULL);
+c0104420:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+c0104424:	75 19                	jne    c010443f <copy_range+0x144>
+c0104426:	68 54 d7 10 c0       	push   $0xc010d754
+c010442b:	68 cd d6 10 c0       	push   $0xc010d6cd
+c0104430:	68 06 02 00 00       	push   $0x206
+c0104435:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c010443a:	e8 b5 bf ff ff       	call   c01003f4 <__panic>
+        	int ret=0;
+c010443f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+        	 * (2) find dst_kvaddr: the kernel virtual address of npage
+        	 * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
+        	 * (4) build the map of phy addr of  nage with the linear addr start
+        	 */
+
+        	char* src_kvaddr = page2kva(page);
+c0104446:	83 ec 0c             	sub    $0xc,%esp
+c0104449:	ff 75 e4             	pushl  -0x1c(%ebp)
+c010444c:	e8 66 f1 ff ff       	call   c01035b7 <page2kva>
+c0104451:	83 c4 10             	add    $0x10,%esp
+c0104454:	89 45 d8             	mov    %eax,-0x28(%ebp)
+        	char* dst_kvaddr = page2kva(npage);
+c0104457:	83 ec 0c             	sub    $0xc,%esp
+c010445a:	ff 75 e0             	pushl  -0x20(%ebp)
+c010445d:	e8 55 f1 ff ff       	call   c01035b7 <page2kva>
+c0104462:	83 c4 10             	add    $0x10,%esp
+c0104465:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        	memcpy(dst_kvaddr, src_kvaddr, PGSIZE);
+c0104468:	83 ec 04             	sub    $0x4,%esp
+c010446b:	68 00 10 00 00       	push   $0x1000
+c0104470:	ff 75 d8             	pushl  -0x28(%ebp)
+c0104473:	ff 75 d4             	pushl  -0x2c(%ebp)
+c0104476:	e8 50 80 00 00       	call   c010c4cb <memcpy>
+c010447b:	83 c4 10             	add    $0x10,%esp
+        	ret = page_insert(to, npage, start, perm);
+c010447e:	ff 75 e8             	pushl  -0x18(%ebp)
+c0104481:	ff 75 10             	pushl  0x10(%ebp)
+c0104484:	ff 75 e0             	pushl  -0x20(%ebp)
+c0104487:	ff 75 08             	pushl  0x8(%ebp)
+c010448a:	e8 7e 00 00 00       	call   c010450d <page_insert>
+c010448f:	83 c4 10             	add    $0x10,%esp
+c0104492:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        	assert(ret == 0);
+c0104495:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c0104499:	74 19                	je     c01044b4 <copy_range+0x1b9>
+c010449b:	68 60 d7 10 c0       	push   $0xc010d760
+c01044a0:	68 cd d6 10 c0       	push   $0xc010d6cd
+c01044a5:	68 1b 02 00 00       	push   $0x21b
+c01044aa:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c01044af:	e8 40 bf ff ff       	call   c01003f4 <__panic>
+        }
+        start += PGSIZE;
+c01044b4:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
+    } while (start != 0 && start < end);
+c01044bb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c01044bf:	74 0c                	je     c01044cd <copy_range+0x1d2>
+c01044c1:	8b 45 10             	mov    0x10(%ebp),%eax
+c01044c4:	3b 45 14             	cmp    0x14(%ebp),%eax
+c01044c7:	0f 82 98 fe ff ff    	jb     c0104365 <copy_range+0x6a>
+    return 0;
+c01044cd:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01044d2:	c9                   	leave  
+c01044d3:	c3                   	ret    
+
+c01044d4 <page_remove>:
+
+//page_remove - free an Page which is related linear address la and has an validated pte
+void
+page_remove(pde_t *pgdir, uintptr_t la) {
+c01044d4:	55                   	push   %ebp
+c01044d5:	89 e5                	mov    %esp,%ebp
+c01044d7:	83 ec 18             	sub    $0x18,%esp
+    pte_t *ptep = get_pte(pgdir, la, 0);
+c01044da:	83 ec 04             	sub    $0x4,%esp
+c01044dd:	6a 00                	push   $0x0
+c01044df:	ff 75 0c             	pushl  0xc(%ebp)
+c01044e2:	ff 75 08             	pushl  0x8(%ebp)
+c01044e5:	e8 61 fa ff ff       	call   c0103f4b <get_pte>
+c01044ea:	83 c4 10             	add    $0x10,%esp
+c01044ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (ptep != NULL) {
+c01044f0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01044f4:	74 14                	je     c010450a <page_remove+0x36>
+        page_remove_pte(pgdir, la, ptep);
+c01044f6:	83 ec 04             	sub    $0x4,%esp
+c01044f9:	ff 75 f4             	pushl  -0xc(%ebp)
+c01044fc:	ff 75 0c             	pushl  0xc(%ebp)
+c01044ff:	ff 75 08             	pushl  0x8(%ebp)
+c0104502:	e8 be fb ff ff       	call   c01040c5 <page_remove_pte>
+c0104507:	83 c4 10             	add    $0x10,%esp
+    }
+}
+c010450a:	90                   	nop
+c010450b:	c9                   	leave  
+c010450c:	c3                   	ret    
+
+c010450d <page_insert>:
+//  la:    the linear address need to map
+//  perm:  the permission of this Page which is setted in related pte
+// return value: always 0
+//note: PT is changed, so the TLB need to be invalidate 
+int
+page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
+c010450d:	55                   	push   %ebp
+c010450e:	89 e5                	mov    %esp,%ebp
+c0104510:	83 ec 18             	sub    $0x18,%esp
+    pte_t *ptep = get_pte(pgdir, la, 1);
+c0104513:	83 ec 04             	sub    $0x4,%esp
+c0104516:	6a 01                	push   $0x1
+c0104518:	ff 75 10             	pushl  0x10(%ebp)
+c010451b:	ff 75 08             	pushl  0x8(%ebp)
+c010451e:	e8 28 fa ff ff       	call   c0103f4b <get_pte>
+c0104523:	83 c4 10             	add    $0x10,%esp
+c0104526:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (ptep == NULL) {
+c0104529:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010452d:	75 0a                	jne    c0104539 <page_insert+0x2c>
+        return -E_NO_MEM;
+c010452f:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
+c0104534:	e9 8b 00 00 00       	jmp    c01045c4 <page_insert+0xb7>
+    }
+    page_ref_inc(page);
+c0104539:	83 ec 0c             	sub    $0xc,%esp
+c010453c:	ff 75 0c             	pushl  0xc(%ebp)
+c010453f:	e8 26 f1 ff ff       	call   c010366a <page_ref_inc>
+c0104544:	83 c4 10             	add    $0x10,%esp
+    if (*ptep & PTE_P) {
+c0104547:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010454a:	8b 00                	mov    (%eax),%eax
+c010454c:	83 e0 01             	and    $0x1,%eax
+c010454f:	85 c0                	test   %eax,%eax
+c0104551:	74 40                	je     c0104593 <page_insert+0x86>
+        struct Page *p = pte2page(*ptep);
+c0104553:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104556:	8b 00                	mov    (%eax),%eax
+c0104558:	83 ec 0c             	sub    $0xc,%esp
+c010455b:	50                   	push   %eax
+c010455c:	e8 9b f0 ff ff       	call   c01035fc <pte2page>
+c0104561:	83 c4 10             	add    $0x10,%esp
+c0104564:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        if (p == page) {
+c0104567:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010456a:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c010456d:	75 10                	jne    c010457f <page_insert+0x72>
+            page_ref_dec(page);
+c010456f:	83 ec 0c             	sub    $0xc,%esp
+c0104572:	ff 75 0c             	pushl  0xc(%ebp)
+c0104575:	e8 07 f1 ff ff       	call   c0103681 <page_ref_dec>
+c010457a:	83 c4 10             	add    $0x10,%esp
+c010457d:	eb 14                	jmp    c0104593 <page_insert+0x86>
+        }
+        else {
+            page_remove_pte(pgdir, la, ptep);
+c010457f:	83 ec 04             	sub    $0x4,%esp
+c0104582:	ff 75 f4             	pushl  -0xc(%ebp)
+c0104585:	ff 75 10             	pushl  0x10(%ebp)
+c0104588:	ff 75 08             	pushl  0x8(%ebp)
+c010458b:	e8 35 fb ff ff       	call   c01040c5 <page_remove_pte>
+c0104590:	83 c4 10             	add    $0x10,%esp
+        }
+    }
+    *ptep = page2pa(page) | PTE_P | perm;
+c0104593:	83 ec 0c             	sub    $0xc,%esp
+c0104596:	ff 75 0c             	pushl  0xc(%ebp)
+c0104599:	e8 c9 ef ff ff       	call   c0103567 <page2pa>
+c010459e:	83 c4 10             	add    $0x10,%esp
+c01045a1:	0b 45 14             	or     0x14(%ebp),%eax
+c01045a4:	83 c8 01             	or     $0x1,%eax
+c01045a7:	89 c2                	mov    %eax,%edx
+c01045a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01045ac:	89 10                	mov    %edx,(%eax)
+    tlb_invalidate(pgdir, la);
+c01045ae:	83 ec 08             	sub    $0x8,%esp
+c01045b1:	ff 75 10             	pushl  0x10(%ebp)
+c01045b4:	ff 75 08             	pushl  0x8(%ebp)
+c01045b7:	e8 0a 00 00 00       	call   c01045c6 <tlb_invalidate>
+c01045bc:	83 c4 10             	add    $0x10,%esp
+    return 0;
+c01045bf:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01045c4:	c9                   	leave  
+c01045c5:	c3                   	ret    
+
+c01045c6 <tlb_invalidate>:
+
+// invalidate a TLB entry, but only if the page tables being
+// edited are the ones currently in use by the processor.
+void
+tlb_invalidate(pde_t *pgdir, uintptr_t la) {
+c01045c6:	55                   	push   %ebp
+c01045c7:	89 e5                	mov    %esp,%ebp
+c01045c9:	83 ec 18             	sub    $0x18,%esp
+}
+
+static inline uintptr_t
+rcr3(void) {
+    uintptr_t cr3;
+    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
+c01045cc:	0f 20 d8             	mov    %cr3,%eax
+c01045cf:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    return cr3;
+c01045d2:	8b 55 ec             	mov    -0x14(%ebp),%edx
+    if (rcr3() == PADDR(pgdir)) {
+c01045d5:	8b 45 08             	mov    0x8(%ebp),%eax
+c01045d8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01045db:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
+c01045e2:	77 17                	ja     c01045fb <tlb_invalidate+0x35>
+c01045e4:	ff 75 f0             	pushl  -0x10(%ebp)
+c01045e7:	68 84 d6 10 c0       	push   $0xc010d684
+c01045ec:	68 4c 02 00 00       	push   $0x24c
+c01045f1:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c01045f6:	e8 f9 bd ff ff       	call   c01003f4 <__panic>
+c01045fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01045fe:	05 00 00 00 40       	add    $0x40000000,%eax
+c0104603:	39 c2                	cmp    %eax,%edx
+c0104605:	75 0c                	jne    c0104613 <tlb_invalidate+0x4d>
+        invlpg((void *)la);
+c0104607:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010460a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+}
+
+static inline void
+invlpg(void *addr) {
+    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
+c010460d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104610:	0f 01 38             	invlpg (%eax)
+    }
+}
+c0104613:	90                   	nop
+c0104614:	c9                   	leave  
+c0104615:	c3                   	ret    
+
+c0104616 <pgdir_alloc_page>:
+
+// pgdir_alloc_page - call alloc_page & page_insert functions to 
+//                  - allocate a page size memory & setup an addr map
+//                  - pa<->la with linear address la and the PDT pgdir
+struct Page *
+pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
+c0104616:	55                   	push   %ebp
+c0104617:	89 e5                	mov    %esp,%ebp
+c0104619:	83 ec 18             	sub    $0x18,%esp
+    struct Page *page = alloc_page();
+c010461c:	83 ec 0c             	sub    $0xc,%esp
+c010461f:	6a 01                	push   $0x1
+c0104621:	e8 3a f2 ff ff       	call   c0103860 <alloc_pages>
+c0104626:	83 c4 10             	add    $0x10,%esp
+c0104629:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (page != NULL) {
+c010462c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0104630:	0f 84 8c 00 00 00    	je     c01046c2 <pgdir_alloc_page+0xac>
+        if (page_insert(pgdir, page, la, perm) != 0) {
+c0104636:	ff 75 10             	pushl  0x10(%ebp)
+c0104639:	ff 75 0c             	pushl  0xc(%ebp)
+c010463c:	ff 75 f4             	pushl  -0xc(%ebp)
+c010463f:	ff 75 08             	pushl  0x8(%ebp)
+c0104642:	e8 c6 fe ff ff       	call   c010450d <page_insert>
+c0104647:	83 c4 10             	add    $0x10,%esp
+c010464a:	85 c0                	test   %eax,%eax
+c010464c:	74 17                	je     c0104665 <pgdir_alloc_page+0x4f>
+            free_page(page);
+c010464e:	83 ec 08             	sub    $0x8,%esp
+c0104651:	6a 01                	push   $0x1
+c0104653:	ff 75 f4             	pushl  -0xc(%ebp)
+c0104656:	e8 71 f2 ff ff       	call   c01038cc <free_pages>
+c010465b:	83 c4 10             	add    $0x10,%esp
+            return NULL;
+c010465e:	b8 00 00 00 00       	mov    $0x0,%eax
+c0104663:	eb 60                	jmp    c01046c5 <pgdir_alloc_page+0xaf>
+        }
+        if (swap_init_ok){
+c0104665:	a1 f4 32 1c c0       	mov    0xc01c32f4,%eax
+c010466a:	85 c0                	test   %eax,%eax
+c010466c:	74 54                	je     c01046c2 <pgdir_alloc_page+0xac>
+            if(check_mm_struct!=NULL) {
+c010466e:	a1 b0 53 1c c0       	mov    0xc01c53b0,%eax
+c0104673:	85 c0                	test   %eax,%eax
+c0104675:	74 4b                	je     c01046c2 <pgdir_alloc_page+0xac>
+                swap_map_swappable(check_mm_struct, la, page, 0);
+c0104677:	a1 b0 53 1c c0       	mov    0xc01c53b0,%eax
+c010467c:	6a 00                	push   $0x0
+c010467e:	ff 75 f4             	pushl  -0xc(%ebp)
+c0104681:	ff 75 0c             	pushl  0xc(%ebp)
+c0104684:	50                   	push   %eax
+c0104685:	e8 85 28 00 00       	call   c0106f0f <swap_map_swappable>
+c010468a:	83 c4 10             	add    $0x10,%esp
+                page->pra_vaddr=la;
+c010468d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104690:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0104693:	89 50 1c             	mov    %edx,0x1c(%eax)
+                assert(page_ref(page) == 1);
+c0104696:	83 ec 0c             	sub    $0xc,%esp
+c0104699:	ff 75 f4             	pushl  -0xc(%ebp)
+c010469c:	e8 b1 ef ff ff       	call   c0103652 <page_ref>
+c01046a1:	83 c4 10             	add    $0x10,%esp
+c01046a4:	83 f8 01             	cmp    $0x1,%eax
+c01046a7:	74 19                	je     c01046c2 <pgdir_alloc_page+0xac>
+c01046a9:	68 69 d7 10 c0       	push   $0xc010d769
+c01046ae:	68 cd d6 10 c0       	push   $0xc010d6cd
+c01046b3:	68 60 02 00 00       	push   $0x260
+c01046b8:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c01046bd:	e8 32 bd ff ff       	call   c01003f4 <__panic>
+            }
+        }
+
+    }
+
+    return page;
+c01046c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c01046c5:	c9                   	leave  
+c01046c6:	c3                   	ret    
+
+c01046c7 <check_alloc_page>:
+
+static void
+check_alloc_page(void) {
+c01046c7:	55                   	push   %ebp
+c01046c8:	89 e5                	mov    %esp,%ebp
+c01046ca:	83 ec 08             	sub    $0x8,%esp
+    pmm_manager->check();
+c01046cd:	a1 9c 53 1c c0       	mov    0xc01c539c,%eax
+c01046d2:	8b 40 18             	mov    0x18(%eax),%eax
+c01046d5:	ff d0                	call   *%eax
+    cprintf("check_alloc_page() succeeded!\n");
+c01046d7:	83 ec 0c             	sub    $0xc,%esp
+c01046da:	68 80 d7 10 c0       	push   $0xc010d780
+c01046df:	e8 aa bb ff ff       	call   c010028e <cprintf>
+c01046e4:	83 c4 10             	add    $0x10,%esp
+}
+c01046e7:	90                   	nop
+c01046e8:	c9                   	leave  
+c01046e9:	c3                   	ret    
+
+c01046ea <check_pgdir>:
+
+static void
+check_pgdir(void) {
+c01046ea:	55                   	push   %ebp
+c01046eb:	89 e5                	mov    %esp,%ebp
+c01046ed:	83 ec 28             	sub    $0x28,%esp
+    assert(npage <= KMEMSIZE / PGSIZE);
+c01046f0:	a1 60 32 1c c0       	mov    0xc01c3260,%eax
+c01046f5:	3d 00 80 03 00       	cmp    $0x38000,%eax
+c01046fa:	76 19                	jbe    c0104715 <check_pgdir+0x2b>
+c01046fc:	68 9f d7 10 c0       	push   $0xc010d79f
+c0104701:	68 cd d6 10 c0       	push   $0xc010d6cd
+c0104706:	68 78 02 00 00       	push   $0x278
+c010470b:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c0104710:	e8 df bc ff ff       	call   c01003f4 <__panic>
+    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
+c0104715:	a1 64 32 1c c0       	mov    0xc01c3264,%eax
+c010471a:	85 c0                	test   %eax,%eax
+c010471c:	74 0e                	je     c010472c <check_pgdir+0x42>
+c010471e:	a1 64 32 1c c0       	mov    0xc01c3264,%eax
+c0104723:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0104728:	85 c0                	test   %eax,%eax
+c010472a:	74 19                	je     c0104745 <check_pgdir+0x5b>
+c010472c:	68 bc d7 10 c0       	push   $0xc010d7bc
+c0104731:	68 cd d6 10 c0       	push   $0xc010d6cd
+c0104736:	68 79 02 00 00       	push   $0x279
+c010473b:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c0104740:	e8 af bc ff ff       	call   c01003f4 <__panic>
+    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
+c0104745:	a1 64 32 1c c0       	mov    0xc01c3264,%eax
+c010474a:	83 ec 04             	sub    $0x4,%esp
+c010474d:	6a 00                	push   $0x0
+c010474f:	6a 00                	push   $0x0
+c0104751:	50                   	push   %eax
+c0104752:	e8 18 f9 ff ff       	call   c010406f <get_page>
+c0104757:	83 c4 10             	add    $0x10,%esp
+c010475a:	85 c0                	test   %eax,%eax
+c010475c:	74 19                	je     c0104777 <check_pgdir+0x8d>
+c010475e:	68 f4 d7 10 c0       	push   $0xc010d7f4
+c0104763:	68 cd d6 10 c0       	push   $0xc010d6cd
+c0104768:	68 7a 02 00 00       	push   $0x27a
+c010476d:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c0104772:	e8 7d bc ff ff       	call   c01003f4 <__panic>
+
+    struct Page *p1, *p2;
+    p1 = alloc_page();
+c0104777:	83 ec 0c             	sub    $0xc,%esp
+c010477a:	6a 01                	push   $0x1
+c010477c:	e8 df f0 ff ff       	call   c0103860 <alloc_pages>
+c0104781:	83 c4 10             	add    $0x10,%esp
+c0104784:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
+c0104787:	a1 64 32 1c c0       	mov    0xc01c3264,%eax
+c010478c:	6a 00                	push   $0x0
+c010478e:	6a 00                	push   $0x0
+c0104790:	ff 75 f4             	pushl  -0xc(%ebp)
+c0104793:	50                   	push   %eax
+c0104794:	e8 74 fd ff ff       	call   c010450d <page_insert>
+c0104799:	83 c4 10             	add    $0x10,%esp
+c010479c:	85 c0                	test   %eax,%eax
+c010479e:	74 19                	je     c01047b9 <check_pgdir+0xcf>
+c01047a0:	68 1c d8 10 c0       	push   $0xc010d81c
+c01047a5:	68 cd d6 10 c0       	push   $0xc010d6cd
+c01047aa:	68 7e 02 00 00       	push   $0x27e
+c01047af:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c01047b4:	e8 3b bc ff ff       	call   c01003f4 <__panic>
+
+    pte_t *ptep;
+    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
+c01047b9:	a1 64 32 1c c0       	mov    0xc01c3264,%eax
+c01047be:	83 ec 04             	sub    $0x4,%esp
+c01047c1:	6a 00                	push   $0x0
+c01047c3:	6a 00                	push   $0x0
+c01047c5:	50                   	push   %eax
+c01047c6:	e8 80 f7 ff ff       	call   c0103f4b <get_pte>
+c01047cb:	83 c4 10             	add    $0x10,%esp
+c01047ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01047d1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c01047d5:	75 19                	jne    c01047f0 <check_pgdir+0x106>
+c01047d7:	68 48 d8 10 c0       	push   $0xc010d848
+c01047dc:	68 cd d6 10 c0       	push   $0xc010d6cd
+c01047e1:	68 81 02 00 00       	push   $0x281
+c01047e6:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c01047eb:	e8 04 bc ff ff       	call   c01003f4 <__panic>
+    assert(pte2page(*ptep) == p1);
+c01047f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01047f3:	8b 00                	mov    (%eax),%eax
+c01047f5:	83 ec 0c             	sub    $0xc,%esp
+c01047f8:	50                   	push   %eax
+c01047f9:	e8 fe ed ff ff       	call   c01035fc <pte2page>
+c01047fe:	83 c4 10             	add    $0x10,%esp
+c0104801:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0104804:	74 19                	je     c010481f <check_pgdir+0x135>
+c0104806:	68 75 d8 10 c0       	push   $0xc010d875
+c010480b:	68 cd d6 10 c0       	push   $0xc010d6cd
+c0104810:	68 82 02 00 00       	push   $0x282
+c0104815:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c010481a:	e8 d5 bb ff ff       	call   c01003f4 <__panic>
+    assert(page_ref(p1) == 1);
+c010481f:	83 ec 0c             	sub    $0xc,%esp
+c0104822:	ff 75 f4             	pushl  -0xc(%ebp)
+c0104825:	e8 28 ee ff ff       	call   c0103652 <page_ref>
+c010482a:	83 c4 10             	add    $0x10,%esp
+c010482d:	83 f8 01             	cmp    $0x1,%eax
+c0104830:	74 19                	je     c010484b <check_pgdir+0x161>
+c0104832:	68 8b d8 10 c0       	push   $0xc010d88b
+c0104837:	68 cd d6 10 c0       	push   $0xc010d6cd
+c010483c:	68 83 02 00 00       	push   $0x283
+c0104841:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c0104846:	e8 a9 bb ff ff       	call   c01003f4 <__panic>
+
+    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
+c010484b:	a1 64 32 1c c0       	mov    0xc01c3264,%eax
+c0104850:	8b 00                	mov    (%eax),%eax
+c0104852:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0104857:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010485a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010485d:	c1 e8 0c             	shr    $0xc,%eax
+c0104860:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0104863:	a1 60 32 1c c0       	mov    0xc01c3260,%eax
+c0104868:	39 45 e8             	cmp    %eax,-0x18(%ebp)
+c010486b:	72 17                	jb     c0104884 <check_pgdir+0x19a>
+c010486d:	ff 75 ec             	pushl  -0x14(%ebp)
+c0104870:	68 e0 d5 10 c0       	push   $0xc010d5e0
+c0104875:	68 85 02 00 00       	push   $0x285
+c010487a:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c010487f:	e8 70 bb ff ff       	call   c01003f4 <__panic>
+c0104884:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0104887:	2d 00 00 00 40       	sub    $0x40000000,%eax
+c010488c:	83 c0 04             	add    $0x4,%eax
+c010488f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
+c0104892:	a1 64 32 1c c0       	mov    0xc01c3264,%eax
+c0104897:	83 ec 04             	sub    $0x4,%esp
+c010489a:	6a 00                	push   $0x0
+c010489c:	68 00 10 00 00       	push   $0x1000
+c01048a1:	50                   	push   %eax
+c01048a2:	e8 a4 f6 ff ff       	call   c0103f4b <get_pte>
+c01048a7:	83 c4 10             	add    $0x10,%esp
+c01048aa:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c01048ad:	74 19                	je     c01048c8 <check_pgdir+0x1de>
+c01048af:	68 a0 d8 10 c0       	push   $0xc010d8a0
+c01048b4:	68 cd d6 10 c0       	push   $0xc010d6cd
+c01048b9:	68 86 02 00 00       	push   $0x286
+c01048be:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c01048c3:	e8 2c bb ff ff       	call   c01003f4 <__panic>
+
+    p2 = alloc_page();
+c01048c8:	83 ec 0c             	sub    $0xc,%esp
+c01048cb:	6a 01                	push   $0x1
+c01048cd:	e8 8e ef ff ff       	call   c0103860 <alloc_pages>
+c01048d2:	83 c4 10             	add    $0x10,%esp
+c01048d5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
+c01048d8:	a1 64 32 1c c0       	mov    0xc01c3264,%eax
+c01048dd:	6a 06                	push   $0x6
+c01048df:	68 00 10 00 00       	push   $0x1000
+c01048e4:	ff 75 e4             	pushl  -0x1c(%ebp)
+c01048e7:	50                   	push   %eax
+c01048e8:	e8 20 fc ff ff       	call   c010450d <page_insert>
+c01048ed:	83 c4 10             	add    $0x10,%esp
+c01048f0:	85 c0                	test   %eax,%eax
+c01048f2:	74 19                	je     c010490d <check_pgdir+0x223>
+c01048f4:	68 c8 d8 10 c0       	push   $0xc010d8c8
+c01048f9:	68 cd d6 10 c0       	push   $0xc010d6cd
+c01048fe:	68 89 02 00 00       	push   $0x289
+c0104903:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c0104908:	e8 e7 ba ff ff       	call   c01003f4 <__panic>
+    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
+c010490d:	a1 64 32 1c c0       	mov    0xc01c3264,%eax
+c0104912:	83 ec 04             	sub    $0x4,%esp
+c0104915:	6a 00                	push   $0x0
+c0104917:	68 00 10 00 00       	push   $0x1000
+c010491c:	50                   	push   %eax
+c010491d:	e8 29 f6 ff ff       	call   c0103f4b <get_pte>
+c0104922:	83 c4 10             	add    $0x10,%esp
+c0104925:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0104928:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010492c:	75 19                	jne    c0104947 <check_pgdir+0x25d>
+c010492e:	68 00 d9 10 c0       	push   $0xc010d900
+c0104933:	68 cd d6 10 c0       	push   $0xc010d6cd
+c0104938:	68 8a 02 00 00       	push   $0x28a
+c010493d:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c0104942:	e8 ad ba ff ff       	call   c01003f4 <__panic>
+    assert(*ptep & PTE_U);
+c0104947:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010494a:	8b 00                	mov    (%eax),%eax
+c010494c:	83 e0 04             	and    $0x4,%eax
+c010494f:	85 c0                	test   %eax,%eax
+c0104951:	75 19                	jne    c010496c <check_pgdir+0x282>
+c0104953:	68 30 d9 10 c0       	push   $0xc010d930
+c0104958:	68 cd d6 10 c0       	push   $0xc010d6cd
+c010495d:	68 8b 02 00 00       	push   $0x28b
+c0104962:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c0104967:	e8 88 ba ff ff       	call   c01003f4 <__panic>
+    assert(*ptep & PTE_W);
+c010496c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010496f:	8b 00                	mov    (%eax),%eax
+c0104971:	83 e0 02             	and    $0x2,%eax
+c0104974:	85 c0                	test   %eax,%eax
+c0104976:	75 19                	jne    c0104991 <check_pgdir+0x2a7>
+c0104978:	68 3e d9 10 c0       	push   $0xc010d93e
+c010497d:	68 cd d6 10 c0       	push   $0xc010d6cd
+c0104982:	68 8c 02 00 00       	push   $0x28c
+c0104987:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c010498c:	e8 63 ba ff ff       	call   c01003f4 <__panic>
+    assert(boot_pgdir[0] & PTE_U);
+c0104991:	a1 64 32 1c c0       	mov    0xc01c3264,%eax
+c0104996:	8b 00                	mov    (%eax),%eax
+c0104998:	83 e0 04             	and    $0x4,%eax
+c010499b:	85 c0                	test   %eax,%eax
+c010499d:	75 19                	jne    c01049b8 <check_pgdir+0x2ce>
+c010499f:	68 4c d9 10 c0       	push   $0xc010d94c
+c01049a4:	68 cd d6 10 c0       	push   $0xc010d6cd
+c01049a9:	68 8d 02 00 00       	push   $0x28d
+c01049ae:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c01049b3:	e8 3c ba ff ff       	call   c01003f4 <__panic>
+    assert(page_ref(p2) == 1);
+c01049b8:	83 ec 0c             	sub    $0xc,%esp
+c01049bb:	ff 75 e4             	pushl  -0x1c(%ebp)
+c01049be:	e8 8f ec ff ff       	call   c0103652 <page_ref>
+c01049c3:	83 c4 10             	add    $0x10,%esp
+c01049c6:	83 f8 01             	cmp    $0x1,%eax
+c01049c9:	74 19                	je     c01049e4 <check_pgdir+0x2fa>
+c01049cb:	68 62 d9 10 c0       	push   $0xc010d962
+c01049d0:	68 cd d6 10 c0       	push   $0xc010d6cd
+c01049d5:	68 8e 02 00 00       	push   $0x28e
+c01049da:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c01049df:	e8 10 ba ff ff       	call   c01003f4 <__panic>
+
+    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
+c01049e4:	a1 64 32 1c c0       	mov    0xc01c3264,%eax
+c01049e9:	6a 00                	push   $0x0
+c01049eb:	68 00 10 00 00       	push   $0x1000
+c01049f0:	ff 75 f4             	pushl  -0xc(%ebp)
+c01049f3:	50                   	push   %eax
+c01049f4:	e8 14 fb ff ff       	call   c010450d <page_insert>
+c01049f9:	83 c4 10             	add    $0x10,%esp
+c01049fc:	85 c0                	test   %eax,%eax
+c01049fe:	74 19                	je     c0104a19 <check_pgdir+0x32f>
+c0104a00:	68 74 d9 10 c0       	push   $0xc010d974
+c0104a05:	68 cd d6 10 c0       	push   $0xc010d6cd
+c0104a0a:	68 90 02 00 00       	push   $0x290
+c0104a0f:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c0104a14:	e8 db b9 ff ff       	call   c01003f4 <__panic>
+    assert(page_ref(p1) == 2);
+c0104a19:	83 ec 0c             	sub    $0xc,%esp
+c0104a1c:	ff 75 f4             	pushl  -0xc(%ebp)
+c0104a1f:	e8 2e ec ff ff       	call   c0103652 <page_ref>
+c0104a24:	83 c4 10             	add    $0x10,%esp
+c0104a27:	83 f8 02             	cmp    $0x2,%eax
+c0104a2a:	74 19                	je     c0104a45 <check_pgdir+0x35b>
+c0104a2c:	68 a0 d9 10 c0       	push   $0xc010d9a0
+c0104a31:	68 cd d6 10 c0       	push   $0xc010d6cd
+c0104a36:	68 91 02 00 00       	push   $0x291
+c0104a3b:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c0104a40:	e8 af b9 ff ff       	call   c01003f4 <__panic>
+    assert(page_ref(p2) == 0);
+c0104a45:	83 ec 0c             	sub    $0xc,%esp
+c0104a48:	ff 75 e4             	pushl  -0x1c(%ebp)
+c0104a4b:	e8 02 ec ff ff       	call   c0103652 <page_ref>
+c0104a50:	83 c4 10             	add    $0x10,%esp
+c0104a53:	85 c0                	test   %eax,%eax
+c0104a55:	74 19                	je     c0104a70 <check_pgdir+0x386>
+c0104a57:	68 b2 d9 10 c0       	push   $0xc010d9b2
+c0104a5c:	68 cd d6 10 c0       	push   $0xc010d6cd
+c0104a61:	68 92 02 00 00       	push   $0x292
+c0104a66:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c0104a6b:	e8 84 b9 ff ff       	call   c01003f4 <__panic>
+    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
+c0104a70:	a1 64 32 1c c0       	mov    0xc01c3264,%eax
+c0104a75:	83 ec 04             	sub    $0x4,%esp
+c0104a78:	6a 00                	push   $0x0
+c0104a7a:	68 00 10 00 00       	push   $0x1000
+c0104a7f:	50                   	push   %eax
+c0104a80:	e8 c6 f4 ff ff       	call   c0103f4b <get_pte>
+c0104a85:	83 c4 10             	add    $0x10,%esp
+c0104a88:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0104a8b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0104a8f:	75 19                	jne    c0104aaa <check_pgdir+0x3c0>
+c0104a91:	68 00 d9 10 c0       	push   $0xc010d900
+c0104a96:	68 cd d6 10 c0       	push   $0xc010d6cd
+c0104a9b:	68 93 02 00 00       	push   $0x293
+c0104aa0:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c0104aa5:	e8 4a b9 ff ff       	call   c01003f4 <__panic>
+    assert(pte2page(*ptep) == p1);
+c0104aaa:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104aad:	8b 00                	mov    (%eax),%eax
+c0104aaf:	83 ec 0c             	sub    $0xc,%esp
+c0104ab2:	50                   	push   %eax
+c0104ab3:	e8 44 eb ff ff       	call   c01035fc <pte2page>
+c0104ab8:	83 c4 10             	add    $0x10,%esp
+c0104abb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0104abe:	74 19                	je     c0104ad9 <check_pgdir+0x3ef>
+c0104ac0:	68 75 d8 10 c0       	push   $0xc010d875
+c0104ac5:	68 cd d6 10 c0       	push   $0xc010d6cd
+c0104aca:	68 94 02 00 00       	push   $0x294
+c0104acf:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c0104ad4:	e8 1b b9 ff ff       	call   c01003f4 <__panic>
+    assert((*ptep & PTE_U) == 0);
+c0104ad9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104adc:	8b 00                	mov    (%eax),%eax
+c0104ade:	83 e0 04             	and    $0x4,%eax
+c0104ae1:	85 c0                	test   %eax,%eax
+c0104ae3:	74 19                	je     c0104afe <check_pgdir+0x414>
+c0104ae5:	68 c4 d9 10 c0       	push   $0xc010d9c4
+c0104aea:	68 cd d6 10 c0       	push   $0xc010d6cd
+c0104aef:	68 95 02 00 00       	push   $0x295
+c0104af4:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c0104af9:	e8 f6 b8 ff ff       	call   c01003f4 <__panic>
+
+    page_remove(boot_pgdir, 0x0);
+c0104afe:	a1 64 32 1c c0       	mov    0xc01c3264,%eax
+c0104b03:	83 ec 08             	sub    $0x8,%esp
+c0104b06:	6a 00                	push   $0x0
+c0104b08:	50                   	push   %eax
+c0104b09:	e8 c6 f9 ff ff       	call   c01044d4 <page_remove>
+c0104b0e:	83 c4 10             	add    $0x10,%esp
+    assert(page_ref(p1) == 1);
+c0104b11:	83 ec 0c             	sub    $0xc,%esp
+c0104b14:	ff 75 f4             	pushl  -0xc(%ebp)
+c0104b17:	e8 36 eb ff ff       	call   c0103652 <page_ref>
+c0104b1c:	83 c4 10             	add    $0x10,%esp
+c0104b1f:	83 f8 01             	cmp    $0x1,%eax
+c0104b22:	74 19                	je     c0104b3d <check_pgdir+0x453>
+c0104b24:	68 8b d8 10 c0       	push   $0xc010d88b
+c0104b29:	68 cd d6 10 c0       	push   $0xc010d6cd
+c0104b2e:	68 98 02 00 00       	push   $0x298
+c0104b33:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c0104b38:	e8 b7 b8 ff ff       	call   c01003f4 <__panic>
+    assert(page_ref(p2) == 0);
+c0104b3d:	83 ec 0c             	sub    $0xc,%esp
+c0104b40:	ff 75 e4             	pushl  -0x1c(%ebp)
+c0104b43:	e8 0a eb ff ff       	call   c0103652 <page_ref>
+c0104b48:	83 c4 10             	add    $0x10,%esp
+c0104b4b:	85 c0                	test   %eax,%eax
+c0104b4d:	74 19                	je     c0104b68 <check_pgdir+0x47e>
+c0104b4f:	68 b2 d9 10 c0       	push   $0xc010d9b2
+c0104b54:	68 cd d6 10 c0       	push   $0xc010d6cd
+c0104b59:	68 99 02 00 00       	push   $0x299
+c0104b5e:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c0104b63:	e8 8c b8 ff ff       	call   c01003f4 <__panic>
+
+    page_remove(boot_pgdir, PGSIZE);
+c0104b68:	a1 64 32 1c c0       	mov    0xc01c3264,%eax
+c0104b6d:	83 ec 08             	sub    $0x8,%esp
+c0104b70:	68 00 10 00 00       	push   $0x1000
+c0104b75:	50                   	push   %eax
+c0104b76:	e8 59 f9 ff ff       	call   c01044d4 <page_remove>
+c0104b7b:	83 c4 10             	add    $0x10,%esp
+    assert(page_ref(p1) == 0);
+c0104b7e:	83 ec 0c             	sub    $0xc,%esp
+c0104b81:	ff 75 f4             	pushl  -0xc(%ebp)
+c0104b84:	e8 c9 ea ff ff       	call   c0103652 <page_ref>
+c0104b89:	83 c4 10             	add    $0x10,%esp
+c0104b8c:	85 c0                	test   %eax,%eax
+c0104b8e:	74 19                	je     c0104ba9 <check_pgdir+0x4bf>
+c0104b90:	68 d9 d9 10 c0       	push   $0xc010d9d9
+c0104b95:	68 cd d6 10 c0       	push   $0xc010d6cd
+c0104b9a:	68 9c 02 00 00       	push   $0x29c
+c0104b9f:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c0104ba4:	e8 4b b8 ff ff       	call   c01003f4 <__panic>
+    assert(page_ref(p2) == 0);
+c0104ba9:	83 ec 0c             	sub    $0xc,%esp
+c0104bac:	ff 75 e4             	pushl  -0x1c(%ebp)
+c0104baf:	e8 9e ea ff ff       	call   c0103652 <page_ref>
+c0104bb4:	83 c4 10             	add    $0x10,%esp
+c0104bb7:	85 c0                	test   %eax,%eax
+c0104bb9:	74 19                	je     c0104bd4 <check_pgdir+0x4ea>
+c0104bbb:	68 b2 d9 10 c0       	push   $0xc010d9b2
+c0104bc0:	68 cd d6 10 c0       	push   $0xc010d6cd
+c0104bc5:	68 9d 02 00 00       	push   $0x29d
+c0104bca:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c0104bcf:	e8 20 b8 ff ff       	call   c01003f4 <__panic>
+
+    assert(page_ref(pde2page(boot_pgdir[0])) == 1);
+c0104bd4:	a1 64 32 1c c0       	mov    0xc01c3264,%eax
+c0104bd9:	8b 00                	mov    (%eax),%eax
+c0104bdb:	83 ec 0c             	sub    $0xc,%esp
+c0104bde:	50                   	push   %eax
+c0104bdf:	e8 52 ea ff ff       	call   c0103636 <pde2page>
+c0104be4:	83 c4 10             	add    $0x10,%esp
+c0104be7:	83 ec 0c             	sub    $0xc,%esp
+c0104bea:	50                   	push   %eax
+c0104beb:	e8 62 ea ff ff       	call   c0103652 <page_ref>
+c0104bf0:	83 c4 10             	add    $0x10,%esp
+c0104bf3:	83 f8 01             	cmp    $0x1,%eax
+c0104bf6:	74 19                	je     c0104c11 <check_pgdir+0x527>
+c0104bf8:	68 ec d9 10 c0       	push   $0xc010d9ec
+c0104bfd:	68 cd d6 10 c0       	push   $0xc010d6cd
+c0104c02:	68 9f 02 00 00       	push   $0x29f
+c0104c07:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c0104c0c:	e8 e3 b7 ff ff       	call   c01003f4 <__panic>
+    free_page(pde2page(boot_pgdir[0]));
+c0104c11:	a1 64 32 1c c0       	mov    0xc01c3264,%eax
+c0104c16:	8b 00                	mov    (%eax),%eax
+c0104c18:	83 ec 0c             	sub    $0xc,%esp
+c0104c1b:	50                   	push   %eax
+c0104c1c:	e8 15 ea ff ff       	call   c0103636 <pde2page>
+c0104c21:	83 c4 10             	add    $0x10,%esp
+c0104c24:	83 ec 08             	sub    $0x8,%esp
+c0104c27:	6a 01                	push   $0x1
+c0104c29:	50                   	push   %eax
+c0104c2a:	e8 9d ec ff ff       	call   c01038cc <free_pages>
+c0104c2f:	83 c4 10             	add    $0x10,%esp
+    boot_pgdir[0] = 0;
+c0104c32:	a1 64 32 1c c0       	mov    0xc01c3264,%eax
+c0104c37:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+
+    cprintf("check_pgdir() succeeded!\n");
+c0104c3d:	83 ec 0c             	sub    $0xc,%esp
+c0104c40:	68 13 da 10 c0       	push   $0xc010da13
+c0104c45:	e8 44 b6 ff ff       	call   c010028e <cprintf>
+c0104c4a:	83 c4 10             	add    $0x10,%esp
+}
+c0104c4d:	90                   	nop
+c0104c4e:	c9                   	leave  
+c0104c4f:	c3                   	ret    
+
+c0104c50 <check_boot_pgdir>:
+
+static void
+check_boot_pgdir(void) {
+c0104c50:	55                   	push   %ebp
+c0104c51:	89 e5                	mov    %esp,%ebp
+c0104c53:	83 ec 28             	sub    $0x28,%esp
+    pte_t *ptep;
+    int i;
+    for (i = 0; i < npage; i += PGSIZE) {
+c0104c56:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0104c5d:	e9 a3 00 00 00       	jmp    c0104d05 <check_boot_pgdir+0xb5>
+        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
+c0104c62:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104c65:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0104c68:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104c6b:	c1 e8 0c             	shr    $0xc,%eax
+c0104c6e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0104c71:	a1 60 32 1c c0       	mov    0xc01c3260,%eax
+c0104c76:	39 45 ec             	cmp    %eax,-0x14(%ebp)
+c0104c79:	72 17                	jb     c0104c92 <check_boot_pgdir+0x42>
+c0104c7b:	ff 75 f0             	pushl  -0x10(%ebp)
+c0104c7e:	68 e0 d5 10 c0       	push   $0xc010d5e0
+c0104c83:	68 ab 02 00 00       	push   $0x2ab
+c0104c88:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c0104c8d:	e8 62 b7 ff ff       	call   c01003f4 <__panic>
+c0104c92:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0104c95:	2d 00 00 00 40       	sub    $0x40000000,%eax
+c0104c9a:	89 c2                	mov    %eax,%edx
+c0104c9c:	a1 64 32 1c c0       	mov    0xc01c3264,%eax
+c0104ca1:	83 ec 04             	sub    $0x4,%esp
+c0104ca4:	6a 00                	push   $0x0
+c0104ca6:	52                   	push   %edx
+c0104ca7:	50                   	push   %eax
+c0104ca8:	e8 9e f2 ff ff       	call   c0103f4b <get_pte>
+c0104cad:	83 c4 10             	add    $0x10,%esp
+c0104cb0:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0104cb3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c0104cb7:	75 19                	jne    c0104cd2 <check_boot_pgdir+0x82>
+c0104cb9:	68 30 da 10 c0       	push   $0xc010da30
+c0104cbe:	68 cd d6 10 c0       	push   $0xc010d6cd
+c0104cc3:	68 ab 02 00 00       	push   $0x2ab
+c0104cc8:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c0104ccd:	e8 22 b7 ff ff       	call   c01003f4 <__panic>
+        assert(PTE_ADDR(*ptep) == i);
+c0104cd2:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0104cd5:	8b 00                	mov    (%eax),%eax
+c0104cd7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0104cdc:	89 c2                	mov    %eax,%edx
+c0104cde:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0104ce1:	39 c2                	cmp    %eax,%edx
+c0104ce3:	74 19                	je     c0104cfe <check_boot_pgdir+0xae>
+c0104ce5:	68 6d da 10 c0       	push   $0xc010da6d
+c0104cea:	68 cd d6 10 c0       	push   $0xc010d6cd
+c0104cef:	68 ac 02 00 00       	push   $0x2ac
+c0104cf4:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c0104cf9:	e8 f6 b6 ff ff       	call   c01003f4 <__panic>
+
+static void
+check_boot_pgdir(void) {
+    pte_t *ptep;
+    int i;
+    for (i = 0; i < npage; i += PGSIZE) {
+c0104cfe:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
+c0104d05:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0104d08:	a1 60 32 1c c0       	mov    0xc01c3260,%eax
+c0104d0d:	39 c2                	cmp    %eax,%edx
+c0104d0f:	0f 82 4d ff ff ff    	jb     c0104c62 <check_boot_pgdir+0x12>
+        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
+        assert(PTE_ADDR(*ptep) == i);
+    }
+
+    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
+c0104d15:	a1 64 32 1c c0       	mov    0xc01c3264,%eax
+c0104d1a:	05 ac 0f 00 00       	add    $0xfac,%eax
+c0104d1f:	8b 00                	mov    (%eax),%eax
+c0104d21:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0104d26:	89 c2                	mov    %eax,%edx
+c0104d28:	a1 64 32 1c c0       	mov    0xc01c3264,%eax
+c0104d2d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0104d30:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
+c0104d37:	77 17                	ja     c0104d50 <check_boot_pgdir+0x100>
+c0104d39:	ff 75 e4             	pushl  -0x1c(%ebp)
+c0104d3c:	68 84 d6 10 c0       	push   $0xc010d684
+c0104d41:	68 af 02 00 00       	push   $0x2af
+c0104d46:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c0104d4b:	e8 a4 b6 ff ff       	call   c01003f4 <__panic>
+c0104d50:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0104d53:	05 00 00 00 40       	add    $0x40000000,%eax
+c0104d58:	39 c2                	cmp    %eax,%edx
+c0104d5a:	74 19                	je     c0104d75 <check_boot_pgdir+0x125>
+c0104d5c:	68 84 da 10 c0       	push   $0xc010da84
+c0104d61:	68 cd d6 10 c0       	push   $0xc010d6cd
+c0104d66:	68 af 02 00 00       	push   $0x2af
+c0104d6b:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c0104d70:	e8 7f b6 ff ff       	call   c01003f4 <__panic>
+
+    assert(boot_pgdir[0] == 0);
+c0104d75:	a1 64 32 1c c0       	mov    0xc01c3264,%eax
+c0104d7a:	8b 00                	mov    (%eax),%eax
+c0104d7c:	85 c0                	test   %eax,%eax
+c0104d7e:	74 19                	je     c0104d99 <check_boot_pgdir+0x149>
+c0104d80:	68 b8 da 10 c0       	push   $0xc010dab8
+c0104d85:	68 cd d6 10 c0       	push   $0xc010d6cd
+c0104d8a:	68 b1 02 00 00       	push   $0x2b1
+c0104d8f:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c0104d94:	e8 5b b6 ff ff       	call   c01003f4 <__panic>
+
+    struct Page *p;
+    p = alloc_page();
+c0104d99:	83 ec 0c             	sub    $0xc,%esp
+c0104d9c:	6a 01                	push   $0x1
+c0104d9e:	e8 bd ea ff ff       	call   c0103860 <alloc_pages>
+c0104da3:	83 c4 10             	add    $0x10,%esp
+c0104da6:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
+c0104da9:	a1 64 32 1c c0       	mov    0xc01c3264,%eax
+c0104dae:	6a 02                	push   $0x2
+c0104db0:	68 00 01 00 00       	push   $0x100
+c0104db5:	ff 75 e0             	pushl  -0x20(%ebp)
+c0104db8:	50                   	push   %eax
+c0104db9:	e8 4f f7 ff ff       	call   c010450d <page_insert>
+c0104dbe:	83 c4 10             	add    $0x10,%esp
+c0104dc1:	85 c0                	test   %eax,%eax
+c0104dc3:	74 19                	je     c0104dde <check_boot_pgdir+0x18e>
+c0104dc5:	68 cc da 10 c0       	push   $0xc010dacc
+c0104dca:	68 cd d6 10 c0       	push   $0xc010d6cd
+c0104dcf:	68 b5 02 00 00       	push   $0x2b5
+c0104dd4:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c0104dd9:	e8 16 b6 ff ff       	call   c01003f4 <__panic>
+    assert(page_ref(p) == 1);
+c0104dde:	83 ec 0c             	sub    $0xc,%esp
+c0104de1:	ff 75 e0             	pushl  -0x20(%ebp)
+c0104de4:	e8 69 e8 ff ff       	call   c0103652 <page_ref>
+c0104de9:	83 c4 10             	add    $0x10,%esp
+c0104dec:	83 f8 01             	cmp    $0x1,%eax
+c0104def:	74 19                	je     c0104e0a <check_boot_pgdir+0x1ba>
+c0104df1:	68 fa da 10 c0       	push   $0xc010dafa
+c0104df6:	68 cd d6 10 c0       	push   $0xc010d6cd
+c0104dfb:	68 b6 02 00 00       	push   $0x2b6
+c0104e00:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c0104e05:	e8 ea b5 ff ff       	call   c01003f4 <__panic>
+    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
+c0104e0a:	a1 64 32 1c c0       	mov    0xc01c3264,%eax
+c0104e0f:	6a 02                	push   $0x2
+c0104e11:	68 00 11 00 00       	push   $0x1100
+c0104e16:	ff 75 e0             	pushl  -0x20(%ebp)
+c0104e19:	50                   	push   %eax
+c0104e1a:	e8 ee f6 ff ff       	call   c010450d <page_insert>
+c0104e1f:	83 c4 10             	add    $0x10,%esp
+c0104e22:	85 c0                	test   %eax,%eax
+c0104e24:	74 19                	je     c0104e3f <check_boot_pgdir+0x1ef>
+c0104e26:	68 0c db 10 c0       	push   $0xc010db0c
+c0104e2b:	68 cd d6 10 c0       	push   $0xc010d6cd
+c0104e30:	68 b7 02 00 00       	push   $0x2b7
+c0104e35:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c0104e3a:	e8 b5 b5 ff ff       	call   c01003f4 <__panic>
+    assert(page_ref(p) == 2);
+c0104e3f:	83 ec 0c             	sub    $0xc,%esp
+c0104e42:	ff 75 e0             	pushl  -0x20(%ebp)
+c0104e45:	e8 08 e8 ff ff       	call   c0103652 <page_ref>
+c0104e4a:	83 c4 10             	add    $0x10,%esp
+c0104e4d:	83 f8 02             	cmp    $0x2,%eax
+c0104e50:	74 19                	je     c0104e6b <check_boot_pgdir+0x21b>
+c0104e52:	68 43 db 10 c0       	push   $0xc010db43
+c0104e57:	68 cd d6 10 c0       	push   $0xc010d6cd
+c0104e5c:	68 b8 02 00 00       	push   $0x2b8
+c0104e61:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c0104e66:	e8 89 b5 ff ff       	call   c01003f4 <__panic>
+
+    const char *str = "ucore: Hello world!!";
+c0104e6b:	c7 45 dc 54 db 10 c0 	movl   $0xc010db54,-0x24(%ebp)
+    strcpy((void *)0x100, str);
+c0104e72:	83 ec 08             	sub    $0x8,%esp
+c0104e75:	ff 75 dc             	pushl  -0x24(%ebp)
+c0104e78:	68 00 01 00 00       	push   $0x100
+c0104e7d:	e8 8d 72 00 00       	call   c010c10f <strcpy>
+c0104e82:	83 c4 10             	add    $0x10,%esp
+    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
+c0104e85:	83 ec 08             	sub    $0x8,%esp
+c0104e88:	68 00 11 00 00       	push   $0x1100
+c0104e8d:	68 00 01 00 00       	push   $0x100
+c0104e92:	e8 f2 72 00 00       	call   c010c189 <strcmp>
+c0104e97:	83 c4 10             	add    $0x10,%esp
+c0104e9a:	85 c0                	test   %eax,%eax
+c0104e9c:	74 19                	je     c0104eb7 <check_boot_pgdir+0x267>
+c0104e9e:	68 6c db 10 c0       	push   $0xc010db6c
+c0104ea3:	68 cd d6 10 c0       	push   $0xc010d6cd
+c0104ea8:	68 bc 02 00 00       	push   $0x2bc
+c0104ead:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c0104eb2:	e8 3d b5 ff ff       	call   c01003f4 <__panic>
+
+    *(char *)(page2kva(p) + 0x100) = '\0';
+c0104eb7:	83 ec 0c             	sub    $0xc,%esp
+c0104eba:	ff 75 e0             	pushl  -0x20(%ebp)
+c0104ebd:	e8 f5 e6 ff ff       	call   c01035b7 <page2kva>
+c0104ec2:	83 c4 10             	add    $0x10,%esp
+c0104ec5:	05 00 01 00 00       	add    $0x100,%eax
+c0104eca:	c6 00 00             	movb   $0x0,(%eax)
+    assert(strlen((const char *)0x100) == 0);
+c0104ecd:	83 ec 0c             	sub    $0xc,%esp
+c0104ed0:	68 00 01 00 00       	push   $0x100
+c0104ed5:	e8 dd 71 00 00       	call   c010c0b7 <strlen>
+c0104eda:	83 c4 10             	add    $0x10,%esp
+c0104edd:	85 c0                	test   %eax,%eax
+c0104edf:	74 19                	je     c0104efa <check_boot_pgdir+0x2aa>
+c0104ee1:	68 a4 db 10 c0       	push   $0xc010dba4
+c0104ee6:	68 cd d6 10 c0       	push   $0xc010d6cd
+c0104eeb:	68 bf 02 00 00       	push   $0x2bf
+c0104ef0:	68 a8 d6 10 c0       	push   $0xc010d6a8
+c0104ef5:	e8 fa b4 ff ff       	call   c01003f4 <__panic>
+
+    free_page(p);
+c0104efa:	83 ec 08             	sub    $0x8,%esp
+c0104efd:	6a 01                	push   $0x1
+c0104eff:	ff 75 e0             	pushl  -0x20(%ebp)
+c0104f02:	e8 c5 e9 ff ff       	call   c01038cc <free_pages>
+c0104f07:	83 c4 10             	add    $0x10,%esp
+    free_page(pde2page(boot_pgdir[0]));
+c0104f0a:	a1 64 32 1c c0       	mov    0xc01c3264,%eax
+c0104f0f:	8b 00                	mov    (%eax),%eax
+c0104f11:	83 ec 0c             	sub    $0xc,%esp
+c0104f14:	50                   	push   %eax
+c0104f15:	e8 1c e7 ff ff       	call   c0103636 <pde2page>
+c0104f1a:	83 c4 10             	add    $0x10,%esp
+c0104f1d:	83 ec 08             	sub    $0x8,%esp
+c0104f20:	6a 01                	push   $0x1
+c0104f22:	50                   	push   %eax
+c0104f23:	e8 a4 e9 ff ff       	call   c01038cc <free_pages>
+c0104f28:	83 c4 10             	add    $0x10,%esp
+    boot_pgdir[0] = 0;
+c0104f2b:	a1 64 32 1c c0       	mov    0xc01c3264,%eax
+c0104f30:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+
+    cprintf("check_boot_pgdir() succeeded!\n");
+c0104f36:	83 ec 0c             	sub    $0xc,%esp
+c0104f39:	68 c8 db 10 c0       	push   $0xc010dbc8
+c0104f3e:	e8 4b b3 ff ff       	call   c010028e <cprintf>
+c0104f43:	83 c4 10             	add    $0x10,%esp
+}
+c0104f46:	90                   	nop
+c0104f47:	c9                   	leave  
+c0104f48:	c3                   	ret    
+
+c0104f49 <perm2str>:
+
+//perm2str - use string 'u,r,w,-' to present the permission
+static const char *
+perm2str(int perm) {
+c0104f49:	55                   	push   %ebp
+c0104f4a:	89 e5                	mov    %esp,%ebp
+    static char str[4];
+    str[0] = (perm & PTE_U) ? 'u' : '-';
+c0104f4c:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104f4f:	83 e0 04             	and    $0x4,%eax
+c0104f52:	85 c0                	test   %eax,%eax
+c0104f54:	74 07                	je     c0104f5d <perm2str+0x14>
+c0104f56:	b8 75 00 00 00       	mov    $0x75,%eax
+c0104f5b:	eb 05                	jmp    c0104f62 <perm2str+0x19>
+c0104f5d:	b8 2d 00 00 00       	mov    $0x2d,%eax
+c0104f62:	a2 e8 32 1c c0       	mov    %al,0xc01c32e8
+    str[1] = 'r';
+c0104f67:	c6 05 e9 32 1c c0 72 	movb   $0x72,0xc01c32e9
+    str[2] = (perm & PTE_W) ? 'w' : '-';
+c0104f6e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0104f71:	83 e0 02             	and    $0x2,%eax
+c0104f74:	85 c0                	test   %eax,%eax
+c0104f76:	74 07                	je     c0104f7f <perm2str+0x36>
+c0104f78:	b8 77 00 00 00       	mov    $0x77,%eax
+c0104f7d:	eb 05                	jmp    c0104f84 <perm2str+0x3b>
+c0104f7f:	b8 2d 00 00 00       	mov    $0x2d,%eax
+c0104f84:	a2 ea 32 1c c0       	mov    %al,0xc01c32ea
+    str[3] = '\0';
+c0104f89:	c6 05 eb 32 1c c0 00 	movb   $0x0,0xc01c32eb
+    return str;
+c0104f90:	b8 e8 32 1c c0       	mov    $0xc01c32e8,%eax
+}
+c0104f95:	5d                   	pop    %ebp
+c0104f96:	c3                   	ret    
+
+c0104f97 <get_pgtable_items>:
+//  table:       the beginning addr of table
+//  left_store:  the pointer of the high side of table's next range
+//  right_store: the pointer of the low side of table's next range
+// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
+static int
+get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
+c0104f97:	55                   	push   %ebp
+c0104f98:	89 e5                	mov    %esp,%ebp
+c0104f9a:	83 ec 10             	sub    $0x10,%esp
+    if (start >= right) {
+c0104f9d:	8b 45 10             	mov    0x10(%ebp),%eax
+c0104fa0:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0104fa3:	72 0e                	jb     c0104fb3 <get_pgtable_items+0x1c>
+        return 0;
+c0104fa5:	b8 00 00 00 00       	mov    $0x0,%eax
+c0104faa:	e9 9a 00 00 00       	jmp    c0105049 <get_pgtable_items+0xb2>
+    }
+    while (start < right && !(table[start] & PTE_P)) {
+        start ++;
+c0104faf:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+static int
+get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
+    if (start >= right) {
+        return 0;
+    }
+    while (start < right && !(table[start] & PTE_P)) {
+c0104fb3:	8b 45 10             	mov    0x10(%ebp),%eax
+c0104fb6:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0104fb9:	73 18                	jae    c0104fd3 <get_pgtable_items+0x3c>
+c0104fbb:	8b 45 10             	mov    0x10(%ebp),%eax
+c0104fbe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0104fc5:	8b 45 14             	mov    0x14(%ebp),%eax
+c0104fc8:	01 d0                	add    %edx,%eax
+c0104fca:	8b 00                	mov    (%eax),%eax
+c0104fcc:	83 e0 01             	and    $0x1,%eax
+c0104fcf:	85 c0                	test   %eax,%eax
+c0104fd1:	74 dc                	je     c0104faf <get_pgtable_items+0x18>
+        start ++;
+    }
+    if (start < right) {
+c0104fd3:	8b 45 10             	mov    0x10(%ebp),%eax
+c0104fd6:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0104fd9:	73 69                	jae    c0105044 <get_pgtable_items+0xad>
+        if (left_store != NULL) {
+c0104fdb:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
+c0104fdf:	74 08                	je     c0104fe9 <get_pgtable_items+0x52>
+            *left_store = start;
+c0104fe1:	8b 45 18             	mov    0x18(%ebp),%eax
+c0104fe4:	8b 55 10             	mov    0x10(%ebp),%edx
+c0104fe7:	89 10                	mov    %edx,(%eax)
+        }
+        int perm = (table[start ++] & PTE_USER);
+c0104fe9:	8b 45 10             	mov    0x10(%ebp),%eax
+c0104fec:	8d 50 01             	lea    0x1(%eax),%edx
+c0104fef:	89 55 10             	mov    %edx,0x10(%ebp)
+c0104ff2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c0104ff9:	8b 45 14             	mov    0x14(%ebp),%eax
+c0104ffc:	01 d0                	add    %edx,%eax
+c0104ffe:	8b 00                	mov    (%eax),%eax
+c0105000:	83 e0 07             	and    $0x7,%eax
+c0105003:	89 45 fc             	mov    %eax,-0x4(%ebp)
+        while (start < right && (table[start] & PTE_USER) == perm) {
+c0105006:	eb 04                	jmp    c010500c <get_pgtable_items+0x75>
+            start ++;
+c0105008:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+    if (start < right) {
+        if (left_store != NULL) {
+            *left_store = start;
+        }
+        int perm = (table[start ++] & PTE_USER);
+        while (start < right && (table[start] & PTE_USER) == perm) {
+c010500c:	8b 45 10             	mov    0x10(%ebp),%eax
+c010500f:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0105012:	73 1d                	jae    c0105031 <get_pgtable_items+0x9a>
+c0105014:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105017:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+c010501e:	8b 45 14             	mov    0x14(%ebp),%eax
+c0105021:	01 d0                	add    %edx,%eax
+c0105023:	8b 00                	mov    (%eax),%eax
+c0105025:	83 e0 07             	and    $0x7,%eax
+c0105028:	89 c2                	mov    %eax,%edx
+c010502a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010502d:	39 c2                	cmp    %eax,%edx
+c010502f:	74 d7                	je     c0105008 <get_pgtable_items+0x71>
+            start ++;
+        }
+        if (right_store != NULL) {
+c0105031:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+c0105035:	74 08                	je     c010503f <get_pgtable_items+0xa8>
+            *right_store = start;
+c0105037:	8b 45 1c             	mov    0x1c(%ebp),%eax
+c010503a:	8b 55 10             	mov    0x10(%ebp),%edx
+c010503d:	89 10                	mov    %edx,(%eax)
+        }
+        return perm;
+c010503f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0105042:	eb 05                	jmp    c0105049 <get_pgtable_items+0xb2>
+    }
+    return 0;
+c0105044:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0105049:	c9                   	leave  
+c010504a:	c3                   	ret    
+
+c010504b <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+c010504b:	55                   	push   %ebp
+c010504c:	89 e5                	mov    %esp,%ebp
+c010504e:	57                   	push   %edi
+c010504f:	56                   	push   %esi
+c0105050:	53                   	push   %ebx
+c0105051:	83 ec 2c             	sub    $0x2c,%esp
+    cprintf("-------------------- BEGIN --------------------\n");
+c0105054:	83 ec 0c             	sub    $0xc,%esp
+c0105057:	68 e8 db 10 c0       	push   $0xc010dbe8
+c010505c:	e8 2d b2 ff ff       	call   c010028e <cprintf>
+c0105061:	83 c4 10             	add    $0x10,%esp
+    size_t left, right = 0, perm;
+c0105064:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
+c010506b:	e9 e5 00 00 00       	jmp    c0105155 <print_pgdir+0x10a>
+        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
+c0105070:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0105073:	83 ec 0c             	sub    $0xc,%esp
+c0105076:	50                   	push   %eax
+c0105077:	e8 cd fe ff ff       	call   c0104f49 <perm2str>
+c010507c:	83 c4 10             	add    $0x10,%esp
+c010507f:	89 c7                	mov    %eax,%edi
+                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
+c0105081:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0105084:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0105087:	29 c2                	sub    %eax,%edx
+c0105089:	89 d0                	mov    %edx,%eax
+void
+print_pgdir(void) {
+    cprintf("-------------------- BEGIN --------------------\n");
+    size_t left, right = 0, perm;
+    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
+        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
+c010508b:	c1 e0 16             	shl    $0x16,%eax
+c010508e:	89 c3                	mov    %eax,%ebx
+c0105090:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0105093:	c1 e0 16             	shl    $0x16,%eax
+c0105096:	89 c1                	mov    %eax,%ecx
+c0105098:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010509b:	c1 e0 16             	shl    $0x16,%eax
+c010509e:	89 c2                	mov    %eax,%edx
+c01050a0:	8b 75 dc             	mov    -0x24(%ebp),%esi
+c01050a3:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01050a6:	29 c6                	sub    %eax,%esi
+c01050a8:	89 f0                	mov    %esi,%eax
+c01050aa:	83 ec 08             	sub    $0x8,%esp
+c01050ad:	57                   	push   %edi
+c01050ae:	53                   	push   %ebx
+c01050af:	51                   	push   %ecx
+c01050b0:	52                   	push   %edx
+c01050b1:	50                   	push   %eax
+c01050b2:	68 19 dc 10 c0       	push   $0xc010dc19
+c01050b7:	e8 d2 b1 ff ff       	call   c010028e <cprintf>
+c01050bc:	83 c4 20             	add    $0x20,%esp
+                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
+        size_t l, r = left * NPTEENTRY;
+c01050bf:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01050c2:	c1 e0 0a             	shl    $0xa,%eax
+c01050c5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
+c01050c8:	eb 4f                	jmp    c0105119 <print_pgdir+0xce>
+            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
+c01050ca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01050cd:	83 ec 0c             	sub    $0xc,%esp
+c01050d0:	50                   	push   %eax
+c01050d1:	e8 73 fe ff ff       	call   c0104f49 <perm2str>
+c01050d6:	83 c4 10             	add    $0x10,%esp
+c01050d9:	89 c7                	mov    %eax,%edi
+                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
+c01050db:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c01050de:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c01050e1:	29 c2                	sub    %eax,%edx
+c01050e3:	89 d0                	mov    %edx,%eax
+    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
+        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
+                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
+        size_t l, r = left * NPTEENTRY;
+        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
+            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
+c01050e5:	c1 e0 0c             	shl    $0xc,%eax
+c01050e8:	89 c3                	mov    %eax,%ebx
+c01050ea:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c01050ed:	c1 e0 0c             	shl    $0xc,%eax
+c01050f0:	89 c1                	mov    %eax,%ecx
+c01050f2:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c01050f5:	c1 e0 0c             	shl    $0xc,%eax
+c01050f8:	89 c2                	mov    %eax,%edx
+c01050fa:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+c01050fd:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0105100:	29 c6                	sub    %eax,%esi
+c0105102:	89 f0                	mov    %esi,%eax
+c0105104:	83 ec 08             	sub    $0x8,%esp
+c0105107:	57                   	push   %edi
+c0105108:	53                   	push   %ebx
+c0105109:	51                   	push   %ecx
+c010510a:	52                   	push   %edx
+c010510b:	50                   	push   %eax
+c010510c:	68 38 dc 10 c0       	push   $0xc010dc38
+c0105111:	e8 78 b1 ff ff       	call   c010028e <cprintf>
+c0105116:	83 c4 20             	add    $0x20,%esp
+    size_t left, right = 0, perm;
+    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
+        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
+                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
+        size_t l, r = left * NPTEENTRY;
+        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
+c0105119:	be 00 00 c0 fa       	mov    $0xfac00000,%esi
+c010511e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0105121:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0105124:	89 d3                	mov    %edx,%ebx
+c0105126:	c1 e3 0a             	shl    $0xa,%ebx
+c0105129:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c010512c:	89 d1                	mov    %edx,%ecx
+c010512e:	c1 e1 0a             	shl    $0xa,%ecx
+c0105131:	83 ec 08             	sub    $0x8,%esp
+c0105134:	8d 55 d4             	lea    -0x2c(%ebp),%edx
+c0105137:	52                   	push   %edx
+c0105138:	8d 55 d8             	lea    -0x28(%ebp),%edx
+c010513b:	52                   	push   %edx
+c010513c:	56                   	push   %esi
+c010513d:	50                   	push   %eax
+c010513e:	53                   	push   %ebx
+c010513f:	51                   	push   %ecx
+c0105140:	e8 52 fe ff ff       	call   c0104f97 <get_pgtable_items>
+c0105145:	83 c4 20             	add    $0x20,%esp
+c0105148:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c010514b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c010514f:	0f 85 75 ff ff ff    	jne    c01050ca <print_pgdir+0x7f>
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+    cprintf("-------------------- BEGIN --------------------\n");
+    size_t left, right = 0, perm;
+    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
+c0105155:	b9 00 b0 fe fa       	mov    $0xfafeb000,%ecx
+c010515a:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010515d:	83 ec 08             	sub    $0x8,%esp
+c0105160:	8d 55 dc             	lea    -0x24(%ebp),%edx
+c0105163:	52                   	push   %edx
+c0105164:	8d 55 e0             	lea    -0x20(%ebp),%edx
+c0105167:	52                   	push   %edx
+c0105168:	51                   	push   %ecx
+c0105169:	50                   	push   %eax
+c010516a:	68 00 04 00 00       	push   $0x400
+c010516f:	6a 00                	push   $0x0
+c0105171:	e8 21 fe ff ff       	call   c0104f97 <get_pgtable_items>
+c0105176:	83 c4 20             	add    $0x20,%esp
+c0105179:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c010517c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c0105180:	0f 85 ea fe ff ff    	jne    c0105070 <print_pgdir+0x25>
+        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
+            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
+                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
+        }
+    }
+    cprintf("--------------------- END ---------------------\n");
+c0105186:	83 ec 0c             	sub    $0xc,%esp
+c0105189:	68 5c dc 10 c0       	push   $0xc010dc5c
+c010518e:	e8 fb b0 ff ff       	call   c010028e <cprintf>
+c0105193:	83 c4 10             	add    $0x10,%esp
+}
+c0105196:	90                   	nop
+c0105197:	8d 65 f4             	lea    -0xc(%ebp),%esp
+c010519a:	5b                   	pop    %ebx
+c010519b:	5e                   	pop    %esi
+c010519c:	5f                   	pop    %edi
+c010519d:	5d                   	pop    %ebp
+c010519e:	c3                   	ret    
+
+c010519f <_fifo_init_mm>:
+ * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
+ *              Now, From the memory control struct mm_struct, we can access FIFO PRA
+ */
+static int
+_fifo_init_mm(struct mm_struct *mm)
+{     
+c010519f:	55                   	push   %ebp
+c01051a0:	89 e5                	mov    %esp,%ebp
+c01051a2:	83 ec 10             	sub    $0x10,%esp
+c01051a5:	c7 45 fc a8 53 1c c0 	movl   $0xc01c53a8,-0x4(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c01051ac:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01051af:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c01051b2:	89 50 04             	mov    %edx,0x4(%eax)
+c01051b5:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01051b8:	8b 50 04             	mov    0x4(%eax),%edx
+c01051bb:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01051be:	89 10                	mov    %edx,(%eax)
+     list_init(&pra_list_head);
+     mm->sm_priv = &pra_list_head;
+c01051c0:	8b 45 08             	mov    0x8(%ebp),%eax
+c01051c3:	c7 40 14 a8 53 1c c0 	movl   $0xc01c53a8,0x14(%eax)
+     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
+     return 0;
+c01051ca:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01051cf:	c9                   	leave  
+c01051d0:	c3                   	ret    
+
+c01051d1 <_fifo_map_swappable>:
+/*
+ * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
+ */
+static int
+_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
+{
+c01051d1:	55                   	push   %ebp
+c01051d2:	89 e5                	mov    %esp,%ebp
+c01051d4:	83 ec 28             	sub    $0x28,%esp
+    list_entry_t *head=(list_entry_t*) mm->sm_priv;
+c01051d7:	8b 45 08             	mov    0x8(%ebp),%eax
+c01051da:	8b 40 14             	mov    0x14(%eax),%eax
+c01051dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    list_entry_t *entry=&(page->pra_page_link);
+c01051e0:	8b 45 10             	mov    0x10(%ebp),%eax
+c01051e3:	83 c0 14             	add    $0x14,%eax
+c01051e6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ 
+    assert(entry != NULL && head != NULL);
+c01051e9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c01051ed:	74 06                	je     c01051f5 <_fifo_map_swappable+0x24>
+c01051ef:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01051f3:	75 16                	jne    c010520b <_fifo_map_swappable+0x3a>
+c01051f5:	68 90 dc 10 c0       	push   $0xc010dc90
+c01051fa:	68 ae dc 10 c0       	push   $0xc010dcae
+c01051ff:	6a 32                	push   $0x32
+c0105201:	68 c3 dc 10 c0       	push   $0xc010dcc3
+c0105206:	e8 e9 b1 ff ff       	call   c01003f4 <__panic>
+c010520b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010520e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0105211:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105214:	89 45 e8             	mov    %eax,-0x18(%ebp)
+ * Insert the new element @elm *before* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_before(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm->prev, listelm);
+c0105217:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010521a:	8b 00                	mov    (%eax),%eax
+c010521c:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010521f:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+c0105222:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c0105225:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0105228:	89 45 dc             	mov    %eax,-0x24(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c010522b:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010522e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0105231:	89 10                	mov    %edx,(%eax)
+c0105233:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0105236:	8b 10                	mov    (%eax),%edx
+c0105238:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010523b:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c010523e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0105241:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0105244:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c0105247:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010524a:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c010524d:	89 10                	mov    %edx,(%eax)
+    //record the page access situlation
+    /*LAB3 EXERCISE 2: 2013011371*/
+    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
+    list_add_before(head, entry);
+    return 0;
+c010524f:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0105254:	c9                   	leave  
+c0105255:	c3                   	ret    
+
+c0105256 <_fifo_swap_out_victim>:
+ *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
+ *                            then set the addr of addr of this page to ptr_page.
+ */
+static int
+_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
+{
+c0105256:	55                   	push   %ebp
+c0105257:	89 e5                	mov    %esp,%ebp
+c0105259:	83 ec 28             	sub    $0x28,%esp
+     list_entry_t *head=(list_entry_t*) mm->sm_priv;
+c010525c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010525f:	8b 40 14             	mov    0x14(%eax),%eax
+c0105262:	89 45 f4             	mov    %eax,-0xc(%ebp)
+         assert(head != NULL);
+c0105265:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0105269:	75 16                	jne    c0105281 <_fifo_swap_out_victim+0x2b>
+c010526b:	68 d7 dc 10 c0       	push   $0xc010dcd7
+c0105270:	68 ae dc 10 c0       	push   $0xc010dcae
+c0105275:	6a 41                	push   $0x41
+c0105277:	68 c3 dc 10 c0       	push   $0xc010dcc3
+c010527c:	e8 73 b1 ff ff       	call   c01003f4 <__panic>
+     assert(in_tick==0);
+c0105281:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c0105285:	74 16                	je     c010529d <_fifo_swap_out_victim+0x47>
+c0105287:	68 e4 dc 10 c0       	push   $0xc010dce4
+c010528c:	68 ae dc 10 c0       	push   $0xc010dcae
+c0105291:	6a 42                	push   $0x42
+c0105293:	68 c3 dc 10 c0       	push   $0xc010dcc3
+c0105298:	e8 57 b1 ff ff       	call   c01003f4 <__panic>
+c010529d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01052a0:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c01052a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01052a6:	8b 40 04             	mov    0x4(%eax),%eax
+     /* Select the victim */
+     /*LAB3 EXERCISE 2: 2013011371*/
+     //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
+     //(2)  set the addr of addr of this page to ptr_page
+     list_entry_t* victim = list_next(head);
+c01052a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01052ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01052af:	89 45 e8             	mov    %eax,-0x18(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c01052b2:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01052b5:	8b 40 04             	mov    0x4(%eax),%eax
+c01052b8:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c01052bb:	8b 12                	mov    (%edx),%edx
+c01052bd:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+c01052c0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c01052c3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01052c6:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c01052c9:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c01052cc:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01052cf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c01052d2:	89 10                	mov    %edx,(%eax)
+     list_del(victim);
+     *ptr_page = le2page(victim, pra_page_link);
+c01052d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01052d7:	8d 50 ec             	lea    -0x14(%eax),%edx
+c01052da:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01052dd:	89 10                	mov    %edx,(%eax)
+     return 0;
+c01052df:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01052e4:	c9                   	leave  
+c01052e5:	c3                   	ret    
+
+c01052e6 <_fifo_check_swap>:
+
+static int
+_fifo_check_swap(void) {
+c01052e6:	55                   	push   %ebp
+c01052e7:	89 e5                	mov    %esp,%ebp
+c01052e9:	83 ec 08             	sub    $0x8,%esp
+    cprintf("write Virt Page c in fifo_check_swap\n");
+c01052ec:	83 ec 0c             	sub    $0xc,%esp
+c01052ef:	68 f0 dc 10 c0       	push   $0xc010dcf0
+c01052f4:	e8 95 af ff ff       	call   c010028e <cprintf>
+c01052f9:	83 c4 10             	add    $0x10,%esp
+    *(unsigned char *)0x3000 = 0x0c;
+c01052fc:	b8 00 30 00 00       	mov    $0x3000,%eax
+c0105301:	c6 00 0c             	movb   $0xc,(%eax)
+    assert(pgfault_num==4);
+c0105304:	a1 ec 32 1c c0       	mov    0xc01c32ec,%eax
+c0105309:	83 f8 04             	cmp    $0x4,%eax
+c010530c:	74 16                	je     c0105324 <_fifo_check_swap+0x3e>
+c010530e:	68 16 dd 10 c0       	push   $0xc010dd16
+c0105313:	68 ae dc 10 c0       	push   $0xc010dcae
+c0105318:	6a 51                	push   $0x51
+c010531a:	68 c3 dc 10 c0       	push   $0xc010dcc3
+c010531f:	e8 d0 b0 ff ff       	call   c01003f4 <__panic>
+    cprintf("write Virt Page a in fifo_check_swap\n");
+c0105324:	83 ec 0c             	sub    $0xc,%esp
+c0105327:	68 28 dd 10 c0       	push   $0xc010dd28
+c010532c:	e8 5d af ff ff       	call   c010028e <cprintf>
+c0105331:	83 c4 10             	add    $0x10,%esp
+    *(unsigned char *)0x1000 = 0x0a;
+c0105334:	b8 00 10 00 00       	mov    $0x1000,%eax
+c0105339:	c6 00 0a             	movb   $0xa,(%eax)
+    assert(pgfault_num==4);
+c010533c:	a1 ec 32 1c c0       	mov    0xc01c32ec,%eax
+c0105341:	83 f8 04             	cmp    $0x4,%eax
+c0105344:	74 16                	je     c010535c <_fifo_check_swap+0x76>
+c0105346:	68 16 dd 10 c0       	push   $0xc010dd16
+c010534b:	68 ae dc 10 c0       	push   $0xc010dcae
+c0105350:	6a 54                	push   $0x54
+c0105352:	68 c3 dc 10 c0       	push   $0xc010dcc3
+c0105357:	e8 98 b0 ff ff       	call   c01003f4 <__panic>
+    cprintf("write Virt Page d in fifo_check_swap\n");
+c010535c:	83 ec 0c             	sub    $0xc,%esp
+c010535f:	68 50 dd 10 c0       	push   $0xc010dd50
+c0105364:	e8 25 af ff ff       	call   c010028e <cprintf>
+c0105369:	83 c4 10             	add    $0x10,%esp
+    *(unsigned char *)0x4000 = 0x0d;
+c010536c:	b8 00 40 00 00       	mov    $0x4000,%eax
+c0105371:	c6 00 0d             	movb   $0xd,(%eax)
+    assert(pgfault_num==4);
+c0105374:	a1 ec 32 1c c0       	mov    0xc01c32ec,%eax
+c0105379:	83 f8 04             	cmp    $0x4,%eax
+c010537c:	74 16                	je     c0105394 <_fifo_check_swap+0xae>
+c010537e:	68 16 dd 10 c0       	push   $0xc010dd16
+c0105383:	68 ae dc 10 c0       	push   $0xc010dcae
+c0105388:	6a 57                	push   $0x57
+c010538a:	68 c3 dc 10 c0       	push   $0xc010dcc3
+c010538f:	e8 60 b0 ff ff       	call   c01003f4 <__panic>
+    cprintf("write Virt Page b in fifo_check_swap\n");
+c0105394:	83 ec 0c             	sub    $0xc,%esp
+c0105397:	68 78 dd 10 c0       	push   $0xc010dd78
+c010539c:	e8 ed ae ff ff       	call   c010028e <cprintf>
+c01053a1:	83 c4 10             	add    $0x10,%esp
+    *(unsigned char *)0x2000 = 0x0b;
+c01053a4:	b8 00 20 00 00       	mov    $0x2000,%eax
+c01053a9:	c6 00 0b             	movb   $0xb,(%eax)
+    assert(pgfault_num==4);
+c01053ac:	a1 ec 32 1c c0       	mov    0xc01c32ec,%eax
+c01053b1:	83 f8 04             	cmp    $0x4,%eax
+c01053b4:	74 16                	je     c01053cc <_fifo_check_swap+0xe6>
+c01053b6:	68 16 dd 10 c0       	push   $0xc010dd16
+c01053bb:	68 ae dc 10 c0       	push   $0xc010dcae
+c01053c0:	6a 5a                	push   $0x5a
+c01053c2:	68 c3 dc 10 c0       	push   $0xc010dcc3
+c01053c7:	e8 28 b0 ff ff       	call   c01003f4 <__panic>
+    cprintf("write Virt Page e in fifo_check_swap\n");
+c01053cc:	83 ec 0c             	sub    $0xc,%esp
+c01053cf:	68 a0 dd 10 c0       	push   $0xc010dda0
+c01053d4:	e8 b5 ae ff ff       	call   c010028e <cprintf>
+c01053d9:	83 c4 10             	add    $0x10,%esp
+    *(unsigned char *)0x5000 = 0x0e;
+c01053dc:	b8 00 50 00 00       	mov    $0x5000,%eax
+c01053e1:	c6 00 0e             	movb   $0xe,(%eax)
+    assert(pgfault_num==5);
+c01053e4:	a1 ec 32 1c c0       	mov    0xc01c32ec,%eax
+c01053e9:	83 f8 05             	cmp    $0x5,%eax
+c01053ec:	74 16                	je     c0105404 <_fifo_check_swap+0x11e>
+c01053ee:	68 c6 dd 10 c0       	push   $0xc010ddc6
+c01053f3:	68 ae dc 10 c0       	push   $0xc010dcae
+c01053f8:	6a 5d                	push   $0x5d
+c01053fa:	68 c3 dc 10 c0       	push   $0xc010dcc3
+c01053ff:	e8 f0 af ff ff       	call   c01003f4 <__panic>
+    cprintf("write Virt Page b in fifo_check_swap\n");
+c0105404:	83 ec 0c             	sub    $0xc,%esp
+c0105407:	68 78 dd 10 c0       	push   $0xc010dd78
+c010540c:	e8 7d ae ff ff       	call   c010028e <cprintf>
+c0105411:	83 c4 10             	add    $0x10,%esp
+    *(unsigned char *)0x2000 = 0x0b;
+c0105414:	b8 00 20 00 00       	mov    $0x2000,%eax
+c0105419:	c6 00 0b             	movb   $0xb,(%eax)
+    assert(pgfault_num==5);
+c010541c:	a1 ec 32 1c c0       	mov    0xc01c32ec,%eax
+c0105421:	83 f8 05             	cmp    $0x5,%eax
+c0105424:	74 16                	je     c010543c <_fifo_check_swap+0x156>
+c0105426:	68 c6 dd 10 c0       	push   $0xc010ddc6
+c010542b:	68 ae dc 10 c0       	push   $0xc010dcae
+c0105430:	6a 60                	push   $0x60
+c0105432:	68 c3 dc 10 c0       	push   $0xc010dcc3
+c0105437:	e8 b8 af ff ff       	call   c01003f4 <__panic>
+    cprintf("write Virt Page a in fifo_check_swap\n");
+c010543c:	83 ec 0c             	sub    $0xc,%esp
+c010543f:	68 28 dd 10 c0       	push   $0xc010dd28
+c0105444:	e8 45 ae ff ff       	call   c010028e <cprintf>
+c0105449:	83 c4 10             	add    $0x10,%esp
+    *(unsigned char *)0x1000 = 0x0a;
+c010544c:	b8 00 10 00 00       	mov    $0x1000,%eax
+c0105451:	c6 00 0a             	movb   $0xa,(%eax)
+    assert(pgfault_num==6);
+c0105454:	a1 ec 32 1c c0       	mov    0xc01c32ec,%eax
+c0105459:	83 f8 06             	cmp    $0x6,%eax
+c010545c:	74 16                	je     c0105474 <_fifo_check_swap+0x18e>
+c010545e:	68 d5 dd 10 c0       	push   $0xc010ddd5
+c0105463:	68 ae dc 10 c0       	push   $0xc010dcae
+c0105468:	6a 63                	push   $0x63
+c010546a:	68 c3 dc 10 c0       	push   $0xc010dcc3
+c010546f:	e8 80 af ff ff       	call   c01003f4 <__panic>
+    cprintf("write Virt Page b in fifo_check_swap\n");
+c0105474:	83 ec 0c             	sub    $0xc,%esp
+c0105477:	68 78 dd 10 c0       	push   $0xc010dd78
+c010547c:	e8 0d ae ff ff       	call   c010028e <cprintf>
+c0105481:	83 c4 10             	add    $0x10,%esp
+    *(unsigned char *)0x2000 = 0x0b;
+c0105484:	b8 00 20 00 00       	mov    $0x2000,%eax
+c0105489:	c6 00 0b             	movb   $0xb,(%eax)
+    assert(pgfault_num==7);
+c010548c:	a1 ec 32 1c c0       	mov    0xc01c32ec,%eax
+c0105491:	83 f8 07             	cmp    $0x7,%eax
+c0105494:	74 16                	je     c01054ac <_fifo_check_swap+0x1c6>
+c0105496:	68 e4 dd 10 c0       	push   $0xc010dde4
+c010549b:	68 ae dc 10 c0       	push   $0xc010dcae
+c01054a0:	6a 66                	push   $0x66
+c01054a2:	68 c3 dc 10 c0       	push   $0xc010dcc3
+c01054a7:	e8 48 af ff ff       	call   c01003f4 <__panic>
+    cprintf("write Virt Page c in fifo_check_swap\n");
+c01054ac:	83 ec 0c             	sub    $0xc,%esp
+c01054af:	68 f0 dc 10 c0       	push   $0xc010dcf0
+c01054b4:	e8 d5 ad ff ff       	call   c010028e <cprintf>
+c01054b9:	83 c4 10             	add    $0x10,%esp
+    *(unsigned char *)0x3000 = 0x0c;
+c01054bc:	b8 00 30 00 00       	mov    $0x3000,%eax
+c01054c1:	c6 00 0c             	movb   $0xc,(%eax)
+    assert(pgfault_num==8);
+c01054c4:	a1 ec 32 1c c0       	mov    0xc01c32ec,%eax
+c01054c9:	83 f8 08             	cmp    $0x8,%eax
+c01054cc:	74 16                	je     c01054e4 <_fifo_check_swap+0x1fe>
+c01054ce:	68 f3 dd 10 c0       	push   $0xc010ddf3
+c01054d3:	68 ae dc 10 c0       	push   $0xc010dcae
+c01054d8:	6a 69                	push   $0x69
+c01054da:	68 c3 dc 10 c0       	push   $0xc010dcc3
+c01054df:	e8 10 af ff ff       	call   c01003f4 <__panic>
+    cprintf("write Virt Page d in fifo_check_swap\n");
+c01054e4:	83 ec 0c             	sub    $0xc,%esp
+c01054e7:	68 50 dd 10 c0       	push   $0xc010dd50
+c01054ec:	e8 9d ad ff ff       	call   c010028e <cprintf>
+c01054f1:	83 c4 10             	add    $0x10,%esp
+    *(unsigned char *)0x4000 = 0x0d;
+c01054f4:	b8 00 40 00 00       	mov    $0x4000,%eax
+c01054f9:	c6 00 0d             	movb   $0xd,(%eax)
+    assert(pgfault_num==9);
+c01054fc:	a1 ec 32 1c c0       	mov    0xc01c32ec,%eax
+c0105501:	83 f8 09             	cmp    $0x9,%eax
+c0105504:	74 16                	je     c010551c <_fifo_check_swap+0x236>
+c0105506:	68 02 de 10 c0       	push   $0xc010de02
+c010550b:	68 ae dc 10 c0       	push   $0xc010dcae
+c0105510:	6a 6c                	push   $0x6c
+c0105512:	68 c3 dc 10 c0       	push   $0xc010dcc3
+c0105517:	e8 d8 ae ff ff       	call   c01003f4 <__panic>
+    cprintf("write Virt Page e in fifo_check_swap\n");
+c010551c:	83 ec 0c             	sub    $0xc,%esp
+c010551f:	68 a0 dd 10 c0       	push   $0xc010dda0
+c0105524:	e8 65 ad ff ff       	call   c010028e <cprintf>
+c0105529:	83 c4 10             	add    $0x10,%esp
+    *(unsigned char *)0x5000 = 0x0e;
+c010552c:	b8 00 50 00 00       	mov    $0x5000,%eax
+c0105531:	c6 00 0e             	movb   $0xe,(%eax)
+    assert(pgfault_num==10);
+c0105534:	a1 ec 32 1c c0       	mov    0xc01c32ec,%eax
+c0105539:	83 f8 0a             	cmp    $0xa,%eax
+c010553c:	74 16                	je     c0105554 <_fifo_check_swap+0x26e>
+c010553e:	68 11 de 10 c0       	push   $0xc010de11
+c0105543:	68 ae dc 10 c0       	push   $0xc010dcae
+c0105548:	6a 6f                	push   $0x6f
+c010554a:	68 c3 dc 10 c0       	push   $0xc010dcc3
+c010554f:	e8 a0 ae ff ff       	call   c01003f4 <__panic>
+    cprintf("write Virt Page a in fifo_check_swap\n");
+c0105554:	83 ec 0c             	sub    $0xc,%esp
+c0105557:	68 28 dd 10 c0       	push   $0xc010dd28
+c010555c:	e8 2d ad ff ff       	call   c010028e <cprintf>
+c0105561:	83 c4 10             	add    $0x10,%esp
+    assert(*(unsigned char *)0x1000 == 0x0a);
+c0105564:	b8 00 10 00 00       	mov    $0x1000,%eax
+c0105569:	0f b6 00             	movzbl (%eax),%eax
+c010556c:	3c 0a                	cmp    $0xa,%al
+c010556e:	74 16                	je     c0105586 <_fifo_check_swap+0x2a0>
+c0105570:	68 24 de 10 c0       	push   $0xc010de24
+c0105575:	68 ae dc 10 c0       	push   $0xc010dcae
+c010557a:	6a 71                	push   $0x71
+c010557c:	68 c3 dc 10 c0       	push   $0xc010dcc3
+c0105581:	e8 6e ae ff ff       	call   c01003f4 <__panic>
+    *(unsigned char *)0x1000 = 0x0a;
+c0105586:	b8 00 10 00 00       	mov    $0x1000,%eax
+c010558b:	c6 00 0a             	movb   $0xa,(%eax)
+    assert(pgfault_num==11);
+c010558e:	a1 ec 32 1c c0       	mov    0xc01c32ec,%eax
+c0105593:	83 f8 0b             	cmp    $0xb,%eax
+c0105596:	74 16                	je     c01055ae <_fifo_check_swap+0x2c8>
+c0105598:	68 45 de 10 c0       	push   $0xc010de45
+c010559d:	68 ae dc 10 c0       	push   $0xc010dcae
+c01055a2:	6a 73                	push   $0x73
+c01055a4:	68 c3 dc 10 c0       	push   $0xc010dcc3
+c01055a9:	e8 46 ae ff ff       	call   c01003f4 <__panic>
+    return 0;
+c01055ae:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01055b3:	c9                   	leave  
+c01055b4:	c3                   	ret    
+
+c01055b5 <_fifo_init>:
+
+
+static int
+_fifo_init(void)
+{
+c01055b5:	55                   	push   %ebp
+c01055b6:	89 e5                	mov    %esp,%ebp
+    return 0;
+c01055b8:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01055bd:	5d                   	pop    %ebp
+c01055be:	c3                   	ret    
+
+c01055bf <_fifo_set_unswappable>:
+
+static int
+_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
+{
+c01055bf:	55                   	push   %ebp
+c01055c0:	89 e5                	mov    %esp,%ebp
+    return 0;
+c01055c2:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01055c7:	5d                   	pop    %ebp
+c01055c8:	c3                   	ret    
+
+c01055c9 <_fifo_tick_event>:
+
+static int
+_fifo_tick_event(struct mm_struct *mm)
+{ return 0; }
+c01055c9:	55                   	push   %ebp
+c01055ca:	89 e5                	mov    %esp,%ebp
+c01055cc:	b8 00 00 00 00       	mov    $0x0,%eax
+c01055d1:	5d                   	pop    %ebp
+c01055d2:	c3                   	ret    
+
+c01055d3 <mm_count>:
+bool user_mem_check(struct mm_struct *mm, uintptr_t start, size_t len, bool write);
+bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
+bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);
+
+static inline int
+mm_count(struct mm_struct *mm) {
+c01055d3:	55                   	push   %ebp
+c01055d4:	89 e5                	mov    %esp,%ebp
+    return mm->mm_count;
+c01055d6:	8b 45 08             	mov    0x8(%ebp),%eax
+c01055d9:	8b 40 18             	mov    0x18(%eax),%eax
+}
+c01055dc:	5d                   	pop    %ebp
+c01055dd:	c3                   	ret    
+
+c01055de <set_mm_count>:
+
+static inline void
+set_mm_count(struct mm_struct *mm, int val) {
+c01055de:	55                   	push   %ebp
+c01055df:	89 e5                	mov    %esp,%ebp
+    mm->mm_count = val;
+c01055e1:	8b 45 08             	mov    0x8(%ebp),%eax
+c01055e4:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01055e7:	89 50 18             	mov    %edx,0x18(%eax)
+}
+c01055ea:	90                   	nop
+c01055eb:	5d                   	pop    %ebp
+c01055ec:	c3                   	ret    
+
+c01055ed <pa2page>:
+page2pa(struct Page *page) {
+    return page2ppn(page) << PGSHIFT;
+}
+
+static inline struct Page *
+pa2page(uintptr_t pa) {
+c01055ed:	55                   	push   %ebp
+c01055ee:	89 e5                	mov    %esp,%ebp
+c01055f0:	83 ec 08             	sub    $0x8,%esp
+    if (PPN(pa) >= npage) {
+c01055f3:	8b 45 08             	mov    0x8(%ebp),%eax
+c01055f6:	c1 e8 0c             	shr    $0xc,%eax
+c01055f9:	89 c2                	mov    %eax,%edx
+c01055fb:	a1 60 32 1c c0       	mov    0xc01c3260,%eax
+c0105600:	39 c2                	cmp    %eax,%edx
+c0105602:	72 14                	jb     c0105618 <pa2page+0x2b>
+        panic("pa2page called with invalid pa");
+c0105604:	83 ec 04             	sub    $0x4,%esp
+c0105607:	68 68 de 10 c0       	push   $0xc010de68
+c010560c:	6a 5e                	push   $0x5e
+c010560e:	68 87 de 10 c0       	push   $0xc010de87
+c0105613:	e8 dc ad ff ff       	call   c01003f4 <__panic>
+    }
+    return &pages[PPN(pa)];
+c0105618:	a1 a4 53 1c c0       	mov    0xc01c53a4,%eax
+c010561d:	8b 55 08             	mov    0x8(%ebp),%edx
+c0105620:	c1 ea 0c             	shr    $0xc,%edx
+c0105623:	c1 e2 05             	shl    $0x5,%edx
+c0105626:	01 d0                	add    %edx,%eax
+}
+c0105628:	c9                   	leave  
+c0105629:	c3                   	ret    
+
+c010562a <pde2page>:
+    }
+    return pa2page(PTE_ADDR(pte));
+}
+
+static inline struct Page *
+pde2page(pde_t pde) {
+c010562a:	55                   	push   %ebp
+c010562b:	89 e5                	mov    %esp,%ebp
+c010562d:	83 ec 08             	sub    $0x8,%esp
+    return pa2page(PDE_ADDR(pde));
+c0105630:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105633:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0105638:	83 ec 0c             	sub    $0xc,%esp
+c010563b:	50                   	push   %eax
+c010563c:	e8 ac ff ff ff       	call   c01055ed <pa2page>
+c0105641:	83 c4 10             	add    $0x10,%esp
+}
+c0105644:	c9                   	leave  
+c0105645:	c3                   	ret    
+
+c0105646 <mm_create>:
+static void check_vma_struct(void);
+static void check_pgfault(void);
+
+// mm_create -  alloc a mm_struct & initialize it.
+struct mm_struct *
+mm_create(void) {
+c0105646:	55                   	push   %ebp
+c0105647:	89 e5                	mov    %esp,%ebp
+c0105649:	83 ec 18             	sub    $0x18,%esp
+    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
+c010564c:	83 ec 0c             	sub    $0xc,%esp
+c010564f:	6a 2c                	push   $0x2c
+c0105651:	e8 07 16 00 00       	call   c0106c5d <kmalloc>
+c0105656:	83 c4 10             	add    $0x10,%esp
+c0105659:	89 45 f4             	mov    %eax,-0xc(%ebp)
+
+    if (mm != NULL) {
+c010565c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0105660:	74 7f                	je     c01056e1 <mm_create+0x9b>
+        list_init(&(mm->mmap_list));
+c0105662:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105665:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c0105668:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010566b:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010566e:	89 50 04             	mov    %edx,0x4(%eax)
+c0105671:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105674:	8b 50 04             	mov    0x4(%eax),%edx
+c0105677:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010567a:	89 10                	mov    %edx,(%eax)
+        mm->mmap_cache = NULL;
+c010567c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010567f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+        mm->pgdir = NULL;
+c0105686:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105689:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
+        mm->map_count = 0;
+c0105690:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105693:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
+
+        if (swap_init_ok) swap_init_mm(mm);
+c010569a:	a1 f4 32 1c c0       	mov    0xc01c32f4,%eax
+c010569f:	85 c0                	test   %eax,%eax
+c01056a1:	74 10                	je     c01056b3 <mm_create+0x6d>
+c01056a3:	83 ec 0c             	sub    $0xc,%esp
+c01056a6:	ff 75 f4             	pushl  -0xc(%ebp)
+c01056a9:	e8 2b 18 00 00       	call   c0106ed9 <swap_init_mm>
+c01056ae:	83 c4 10             	add    $0x10,%esp
+c01056b1:	eb 0a                	jmp    c01056bd <mm_create+0x77>
+        else mm->sm_priv = NULL;
+c01056b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01056b6:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
+        
+        set_mm_count(mm, 0);
+c01056bd:	83 ec 08             	sub    $0x8,%esp
+c01056c0:	6a 00                	push   $0x0
+c01056c2:	ff 75 f4             	pushl  -0xc(%ebp)
+c01056c5:	e8 14 ff ff ff       	call   c01055de <set_mm_count>
+c01056ca:	83 c4 10             	add    $0x10,%esp
+        sem_init(&(mm->mm_sem), 1);
+c01056cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01056d0:	83 c0 1c             	add    $0x1c,%eax
+c01056d3:	83 ec 08             	sub    $0x8,%esp
+c01056d6:	6a 01                	push   $0x1
+c01056d8:	50                   	push   %eax
+c01056d9:	e8 8a 3c 00 00       	call   c0109368 <sem_init>
+c01056de:	83 c4 10             	add    $0x10,%esp
+    }    
+    return mm;
+c01056e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c01056e4:	c9                   	leave  
+c01056e5:	c3                   	ret    
+
+c01056e6 <vma_create>:
+
+// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
+struct vma_struct *
+vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
+c01056e6:	55                   	push   %ebp
+c01056e7:	89 e5                	mov    %esp,%ebp
+c01056e9:	83 ec 18             	sub    $0x18,%esp
+    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
+c01056ec:	83 ec 0c             	sub    $0xc,%esp
+c01056ef:	6a 18                	push   $0x18
+c01056f1:	e8 67 15 00 00       	call   c0106c5d <kmalloc>
+c01056f6:	83 c4 10             	add    $0x10,%esp
+c01056f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+
+    if (vma != NULL) {
+c01056fc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0105700:	74 1b                	je     c010571d <vma_create+0x37>
+        vma->vm_start = vm_start;
+c0105702:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105705:	8b 55 08             	mov    0x8(%ebp),%edx
+c0105708:	89 50 04             	mov    %edx,0x4(%eax)
+        vma->vm_end = vm_end;
+c010570b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010570e:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0105711:	89 50 08             	mov    %edx,0x8(%eax)
+        vma->vm_flags = vm_flags;
+c0105714:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105717:	8b 55 10             	mov    0x10(%ebp),%edx
+c010571a:	89 50 0c             	mov    %edx,0xc(%eax)
+    }
+    return vma;
+c010571d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0105720:	c9                   	leave  
+c0105721:	c3                   	ret    
+
+c0105722 <find_vma>:
+
+
+// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
+struct vma_struct *
+find_vma(struct mm_struct *mm, uintptr_t addr) {
+c0105722:	55                   	push   %ebp
+c0105723:	89 e5                	mov    %esp,%ebp
+c0105725:	83 ec 20             	sub    $0x20,%esp
+    struct vma_struct *vma = NULL;
+c0105728:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    if (mm != NULL) {
+c010572f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0105733:	0f 84 95 00 00 00    	je     c01057ce <find_vma+0xac>
+        vma = mm->mmap_cache;
+c0105739:	8b 45 08             	mov    0x8(%ebp),%eax
+c010573c:	8b 40 08             	mov    0x8(%eax),%eax
+c010573f:	89 45 fc             	mov    %eax,-0x4(%ebp)
+        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
+c0105742:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+c0105746:	74 16                	je     c010575e <find_vma+0x3c>
+c0105748:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010574b:	8b 40 04             	mov    0x4(%eax),%eax
+c010574e:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0105751:	77 0b                	ja     c010575e <find_vma+0x3c>
+c0105753:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0105756:	8b 40 08             	mov    0x8(%eax),%eax
+c0105759:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c010575c:	77 61                	ja     c01057bf <find_vma+0x9d>
+                bool found = 0;
+c010575e:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+                list_entry_t *list = &(mm->mmap_list), *le = list;
+c0105765:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105768:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010576b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010576e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+                while ((le = list_next(le)) != list) {
+c0105771:	eb 28                	jmp    c010579b <find_vma+0x79>
+                    vma = le2vma(le, list_link);
+c0105773:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105776:	83 e8 10             	sub    $0x10,%eax
+c0105779:	89 45 fc             	mov    %eax,-0x4(%ebp)
+                    if (vma->vm_start<=addr && addr < vma->vm_end) {
+c010577c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010577f:	8b 40 04             	mov    0x4(%eax),%eax
+c0105782:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0105785:	77 14                	ja     c010579b <find_vma+0x79>
+c0105787:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010578a:	8b 40 08             	mov    0x8(%eax),%eax
+c010578d:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0105790:	76 09                	jbe    c010579b <find_vma+0x79>
+                        found = 1;
+c0105792:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
+                        break;
+c0105799:	eb 17                	jmp    c01057b2 <find_vma+0x90>
+c010579b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010579e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c01057a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01057a4:	8b 40 04             	mov    0x4(%eax),%eax
+    if (mm != NULL) {
+        vma = mm->mmap_cache;
+        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
+                bool found = 0;
+                list_entry_t *list = &(mm->mmap_list), *le = list;
+                while ((le = list_next(le)) != list) {
+c01057a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01057aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01057ad:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c01057b0:	75 c1                	jne    c0105773 <find_vma+0x51>
+                    if (vma->vm_start<=addr && addr < vma->vm_end) {
+                        found = 1;
+                        break;
+                    }
+                }
+                if (!found) {
+c01057b2:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
+c01057b6:	75 07                	jne    c01057bf <find_vma+0x9d>
+                    vma = NULL;
+c01057b8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+                }
+        }
+        if (vma != NULL) {
+c01057bf:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+c01057c3:	74 09                	je     c01057ce <find_vma+0xac>
+            mm->mmap_cache = vma;
+c01057c5:	8b 45 08             	mov    0x8(%ebp),%eax
+c01057c8:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c01057cb:	89 50 08             	mov    %edx,0x8(%eax)
+        }
+    }
+    return vma;
+c01057ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+c01057d1:	c9                   	leave  
+c01057d2:	c3                   	ret    
+
+c01057d3 <check_vma_overlap>:
+
+
+// check_vma_overlap - check if vma1 overlaps vma2 ?
+static inline void
+check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
+c01057d3:	55                   	push   %ebp
+c01057d4:	89 e5                	mov    %esp,%ebp
+c01057d6:	83 ec 08             	sub    $0x8,%esp
+    assert(prev->vm_start < prev->vm_end);
+c01057d9:	8b 45 08             	mov    0x8(%ebp),%eax
+c01057dc:	8b 50 04             	mov    0x4(%eax),%edx
+c01057df:	8b 45 08             	mov    0x8(%ebp),%eax
+c01057e2:	8b 40 08             	mov    0x8(%eax),%eax
+c01057e5:	39 c2                	cmp    %eax,%edx
+c01057e7:	72 16                	jb     c01057ff <check_vma_overlap+0x2c>
+c01057e9:	68 95 de 10 c0       	push   $0xc010de95
+c01057ee:	68 b3 de 10 c0       	push   $0xc010deb3
+c01057f3:	6a 6b                	push   $0x6b
+c01057f5:	68 c8 de 10 c0       	push   $0xc010dec8
+c01057fa:	e8 f5 ab ff ff       	call   c01003f4 <__panic>
+    assert(prev->vm_end <= next->vm_start);
+c01057ff:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105802:	8b 50 08             	mov    0x8(%eax),%edx
+c0105805:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105808:	8b 40 04             	mov    0x4(%eax),%eax
+c010580b:	39 c2                	cmp    %eax,%edx
+c010580d:	76 16                	jbe    c0105825 <check_vma_overlap+0x52>
+c010580f:	68 d8 de 10 c0       	push   $0xc010ded8
+c0105814:	68 b3 de 10 c0       	push   $0xc010deb3
+c0105819:	6a 6c                	push   $0x6c
+c010581b:	68 c8 de 10 c0       	push   $0xc010dec8
+c0105820:	e8 cf ab ff ff       	call   c01003f4 <__panic>
+    assert(next->vm_start < next->vm_end);
+c0105825:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105828:	8b 50 04             	mov    0x4(%eax),%edx
+c010582b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010582e:	8b 40 08             	mov    0x8(%eax),%eax
+c0105831:	39 c2                	cmp    %eax,%edx
+c0105833:	72 16                	jb     c010584b <check_vma_overlap+0x78>
+c0105835:	68 f7 de 10 c0       	push   $0xc010def7
+c010583a:	68 b3 de 10 c0       	push   $0xc010deb3
+c010583f:	6a 6d                	push   $0x6d
+c0105841:	68 c8 de 10 c0       	push   $0xc010dec8
+c0105846:	e8 a9 ab ff ff       	call   c01003f4 <__panic>
+}
+c010584b:	90                   	nop
+c010584c:	c9                   	leave  
+c010584d:	c3                   	ret    
+
+c010584e <insert_vma_struct>:
+
+
+// insert_vma_struct -insert vma in mm's list link
+void
+insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
+c010584e:	55                   	push   %ebp
+c010584f:	89 e5                	mov    %esp,%ebp
+c0105851:	83 ec 38             	sub    $0x38,%esp
+    assert(vma->vm_start < vma->vm_end);
+c0105854:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105857:	8b 50 04             	mov    0x4(%eax),%edx
+c010585a:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010585d:	8b 40 08             	mov    0x8(%eax),%eax
+c0105860:	39 c2                	cmp    %eax,%edx
+c0105862:	72 16                	jb     c010587a <insert_vma_struct+0x2c>
+c0105864:	68 15 df 10 c0       	push   $0xc010df15
+c0105869:	68 b3 de 10 c0       	push   $0xc010deb3
+c010586e:	6a 74                	push   $0x74
+c0105870:	68 c8 de 10 c0       	push   $0xc010dec8
+c0105875:	e8 7a ab ff ff       	call   c01003f4 <__panic>
+    list_entry_t *list = &(mm->mmap_list);
+c010587a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010587d:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    list_entry_t *le_prev = list, *le_next;
+c0105880:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0105883:	89 45 f4             	mov    %eax,-0xc(%ebp)
+
+        list_entry_t *le = list;
+c0105886:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0105889:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        while ((le = list_next(le)) != list) {
+c010588c:	eb 1f                	jmp    c01058ad <insert_vma_struct+0x5f>
+            struct vma_struct *mmap_prev = le2vma(le, list_link);
+c010588e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105891:	83 e8 10             	sub    $0x10,%eax
+c0105894:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            if (mmap_prev->vm_start > vma->vm_start) {
+c0105897:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010589a:	8b 50 04             	mov    0x4(%eax),%edx
+c010589d:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01058a0:	8b 40 04             	mov    0x4(%eax),%eax
+c01058a3:	39 c2                	cmp    %eax,%edx
+c01058a5:	77 1f                	ja     c01058c6 <insert_vma_struct+0x78>
+                break;
+            }
+            le_prev = le;
+c01058a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01058aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01058ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01058b0:	89 45 d8             	mov    %eax,-0x28(%ebp)
+c01058b3:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c01058b6:	8b 40 04             	mov    0x4(%eax),%eax
+    assert(vma->vm_start < vma->vm_end);
+    list_entry_t *list = &(mm->mmap_list);
+    list_entry_t *le_prev = list, *le_next;
+
+        list_entry_t *le = list;
+        while ((le = list_next(le)) != list) {
+c01058b9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01058bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01058bf:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c01058c2:	75 ca                	jne    c010588e <insert_vma_struct+0x40>
+c01058c4:	eb 01                	jmp    c01058c7 <insert_vma_struct+0x79>
+            struct vma_struct *mmap_prev = le2vma(le, list_link);
+            if (mmap_prev->vm_start > vma->vm_start) {
+                break;
+c01058c6:	90                   	nop
+c01058c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01058ca:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c01058cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01058d0:	8b 40 04             	mov    0x4(%eax),%eax
+            }
+            le_prev = le;
+        }
+
+    le_next = list_next(le_prev);
+c01058d3:	89 45 dc             	mov    %eax,-0x24(%ebp)
+
+    /* check overlap */
+    if (le_prev != list) {
+c01058d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01058d9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c01058dc:	74 15                	je     c01058f3 <insert_vma_struct+0xa5>
+        check_vma_overlap(le2vma(le_prev, list_link), vma);
+c01058de:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01058e1:	83 e8 10             	sub    $0x10,%eax
+c01058e4:	83 ec 08             	sub    $0x8,%esp
+c01058e7:	ff 75 0c             	pushl  0xc(%ebp)
+c01058ea:	50                   	push   %eax
+c01058eb:	e8 e3 fe ff ff       	call   c01057d3 <check_vma_overlap>
+c01058f0:	83 c4 10             	add    $0x10,%esp
+    }
+    if (le_next != list) {
+c01058f3:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01058f6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c01058f9:	74 15                	je     c0105910 <insert_vma_struct+0xc2>
+        check_vma_overlap(vma, le2vma(le_next, list_link));
+c01058fb:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01058fe:	83 e8 10             	sub    $0x10,%eax
+c0105901:	83 ec 08             	sub    $0x8,%esp
+c0105904:	50                   	push   %eax
+c0105905:	ff 75 0c             	pushl  0xc(%ebp)
+c0105908:	e8 c6 fe ff ff       	call   c01057d3 <check_vma_overlap>
+c010590d:	83 c4 10             	add    $0x10,%esp
+    }
+
+    vma->vm_mm = mm;
+c0105910:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105913:	8b 55 08             	mov    0x8(%ebp),%edx
+c0105916:	89 10                	mov    %edx,(%eax)
+    list_add_after(le_prev, &(vma->list_link));
+c0105918:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010591b:	8d 50 10             	lea    0x10(%eax),%edx
+c010591e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105921:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c0105924:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+ * Insert the new element @elm *after* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_after(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm, listelm->next);
+c0105927:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010592a:	8b 40 04             	mov    0x4(%eax),%eax
+c010592d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0105930:	89 55 d0             	mov    %edx,-0x30(%ebp)
+c0105933:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0105936:	89 55 cc             	mov    %edx,-0x34(%ebp)
+c0105939:	89 45 c8             	mov    %eax,-0x38(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c010593c:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c010593f:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c0105942:	89 10                	mov    %edx,(%eax)
+c0105944:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0105947:	8b 10                	mov    (%eax),%edx
+c0105949:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010594c:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c010594f:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0105952:	8b 55 c8             	mov    -0x38(%ebp),%edx
+c0105955:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c0105958:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010595b:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c010595e:	89 10                	mov    %edx,(%eax)
+
+    mm->map_count ++;
+c0105960:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105963:	8b 40 10             	mov    0x10(%eax),%eax
+c0105966:	8d 50 01             	lea    0x1(%eax),%edx
+c0105969:	8b 45 08             	mov    0x8(%ebp),%eax
+c010596c:	89 50 10             	mov    %edx,0x10(%eax)
+}
+c010596f:	90                   	nop
+c0105970:	c9                   	leave  
+c0105971:	c3                   	ret    
+
+c0105972 <mm_destroy>:
+
+// mm_destroy - free mm and mm internal fields
+void
+mm_destroy(struct mm_struct *mm) {
+c0105972:	55                   	push   %ebp
+c0105973:	89 e5                	mov    %esp,%ebp
+c0105975:	83 ec 28             	sub    $0x28,%esp
+    assert(mm_count(mm) == 0);
+c0105978:	ff 75 08             	pushl  0x8(%ebp)
+c010597b:	e8 53 fc ff ff       	call   c01055d3 <mm_count>
+c0105980:	83 c4 04             	add    $0x4,%esp
+c0105983:	85 c0                	test   %eax,%eax
+c0105985:	74 19                	je     c01059a0 <mm_destroy+0x2e>
+c0105987:	68 31 df 10 c0       	push   $0xc010df31
+c010598c:	68 b3 de 10 c0       	push   $0xc010deb3
+c0105991:	68 94 00 00 00       	push   $0x94
+c0105996:	68 c8 de 10 c0       	push   $0xc010dec8
+c010599b:	e8 54 aa ff ff       	call   c01003f4 <__panic>
+
+    list_entry_t *list = &(mm->mmap_list), *le;
+c01059a0:	8b 45 08             	mov    0x8(%ebp),%eax
+c01059a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    while ((le = list_next(list)) != list) {
+c01059a6:	eb 3a                	jmp    c01059e2 <mm_destroy+0x70>
+c01059a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01059ab:	89 45 e8             	mov    %eax,-0x18(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c01059ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01059b1:	8b 40 04             	mov    0x4(%eax),%eax
+c01059b4:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c01059b7:	8b 12                	mov    (%edx),%edx
+c01059b9:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+c01059bc:	89 45 e0             	mov    %eax,-0x20(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c01059bf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01059c2:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c01059c5:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c01059c8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01059cb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c01059ce:	89 10                	mov    %edx,(%eax)
+        list_del(le);
+        kfree(le2vma(le, list_link));  //kfree vma        
+c01059d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01059d3:	83 e8 10             	sub    $0x10,%eax
+c01059d6:	83 ec 0c             	sub    $0xc,%esp
+c01059d9:	50                   	push   %eax
+c01059da:	e8 96 12 00 00       	call   c0106c75 <kfree>
+c01059df:	83 c4 10             	add    $0x10,%esp
+c01059e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01059e5:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c01059e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01059eb:	8b 40 04             	mov    0x4(%eax),%eax
+void
+mm_destroy(struct mm_struct *mm) {
+    assert(mm_count(mm) == 0);
+
+    list_entry_t *list = &(mm->mmap_list), *le;
+    while ((le = list_next(list)) != list) {
+c01059ee:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01059f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01059f4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c01059f7:	75 af                	jne    c01059a8 <mm_destroy+0x36>
+        list_del(le);
+        kfree(le2vma(le, list_link));  //kfree vma        
+    }
+    kfree(mm); //kfree mm
+c01059f9:	83 ec 0c             	sub    $0xc,%esp
+c01059fc:	ff 75 08             	pushl  0x8(%ebp)
+c01059ff:	e8 71 12 00 00       	call   c0106c75 <kfree>
+c0105a04:	83 c4 10             	add    $0x10,%esp
+    mm=NULL;
+c0105a07:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
+}
+c0105a0e:	90                   	nop
+c0105a0f:	c9                   	leave  
+c0105a10:	c3                   	ret    
+
+c0105a11 <mm_map>:
+
+int
+mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
+       struct vma_struct **vma_store) {
+c0105a11:	55                   	push   %ebp
+c0105a12:	89 e5                	mov    %esp,%ebp
+c0105a14:	83 ec 28             	sub    $0x28,%esp
+    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
+c0105a17:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105a1a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0105a1d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105a20:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0105a25:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0105a28:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
+c0105a2f:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0105a32:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105a35:	01 c2                	add    %eax,%edx
+c0105a37:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0105a3a:	01 d0                	add    %edx,%eax
+c0105a3c:	83 e8 01             	sub    $0x1,%eax
+c0105a3f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0105a42:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0105a45:	ba 00 00 00 00       	mov    $0x0,%edx
+c0105a4a:	f7 75 e8             	divl   -0x18(%ebp)
+c0105a4d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0105a50:	29 d0                	sub    %edx,%eax
+c0105a52:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    if (!USER_ACCESS(start, end)) {
+c0105a55:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
+c0105a5c:	76 11                	jbe    c0105a6f <mm_map+0x5e>
+c0105a5e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0105a61:	3b 45 e0             	cmp    -0x20(%ebp),%eax
+c0105a64:	73 09                	jae    c0105a6f <mm_map+0x5e>
+c0105a66:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
+c0105a6d:	76 0a                	jbe    c0105a79 <mm_map+0x68>
+        return -E_INVAL;
+c0105a6f:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+c0105a74:	e9 9e 00 00 00       	jmp    c0105b17 <mm_map+0x106>
+    }
+
+    assert(mm != NULL);
+c0105a79:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0105a7d:	75 19                	jne    c0105a98 <mm_map+0x87>
+c0105a7f:	68 43 df 10 c0       	push   $0xc010df43
+c0105a84:	68 b3 de 10 c0       	push   $0xc010deb3
+c0105a89:	68 a7 00 00 00       	push   $0xa7
+c0105a8e:	68 c8 de 10 c0       	push   $0xc010dec8
+c0105a93:	e8 5c a9 ff ff       	call   c01003f4 <__panic>
+
+    int ret = -E_INVAL;
+c0105a98:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
+
+    struct vma_struct *vma;
+    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
+c0105a9f:	83 ec 08             	sub    $0x8,%esp
+c0105aa2:	ff 75 ec             	pushl  -0x14(%ebp)
+c0105aa5:	ff 75 08             	pushl  0x8(%ebp)
+c0105aa8:	e8 75 fc ff ff       	call   c0105722 <find_vma>
+c0105aad:	83 c4 10             	add    $0x10,%esp
+c0105ab0:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c0105ab3:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c0105ab7:	74 0b                	je     c0105ac4 <mm_map+0xb3>
+c0105ab9:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0105abc:	8b 40 04             	mov    0x4(%eax),%eax
+c0105abf:	3b 45 e0             	cmp    -0x20(%ebp),%eax
+c0105ac2:	72 4c                	jb     c0105b10 <mm_map+0xff>
+        goto out;
+    }
+    ret = -E_NO_MEM;
+c0105ac4:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
+
+    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
+c0105acb:	83 ec 04             	sub    $0x4,%esp
+c0105ace:	ff 75 14             	pushl  0x14(%ebp)
+c0105ad1:	ff 75 e0             	pushl  -0x20(%ebp)
+c0105ad4:	ff 75 ec             	pushl  -0x14(%ebp)
+c0105ad7:	e8 0a fc ff ff       	call   c01056e6 <vma_create>
+c0105adc:	83 c4 10             	add    $0x10,%esp
+c0105adf:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c0105ae2:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c0105ae6:	74 2b                	je     c0105b13 <mm_map+0x102>
+        goto out;
+    }
+    insert_vma_struct(mm, vma);
+c0105ae8:	83 ec 08             	sub    $0x8,%esp
+c0105aeb:	ff 75 dc             	pushl  -0x24(%ebp)
+c0105aee:	ff 75 08             	pushl  0x8(%ebp)
+c0105af1:	e8 58 fd ff ff       	call   c010584e <insert_vma_struct>
+c0105af6:	83 c4 10             	add    $0x10,%esp
+    if (vma_store != NULL) {
+c0105af9:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
+c0105afd:	74 08                	je     c0105b07 <mm_map+0xf6>
+        *vma_store = vma;
+c0105aff:	8b 45 18             	mov    0x18(%ebp),%eax
+c0105b02:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0105b05:	89 10                	mov    %edx,(%eax)
+    }
+    ret = 0;
+c0105b07:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0105b0e:	eb 04                	jmp    c0105b14 <mm_map+0x103>
+
+    int ret = -E_INVAL;
+
+    struct vma_struct *vma;
+    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
+        goto out;
+c0105b10:	90                   	nop
+c0105b11:	eb 01                	jmp    c0105b14 <mm_map+0x103>
+    }
+    ret = -E_NO_MEM;
+
+    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
+        goto out;
+c0105b13:	90                   	nop
+        *vma_store = vma;
+    }
+    ret = 0;
+
+out:
+    return ret;
+c0105b14:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0105b17:	c9                   	leave  
+c0105b18:	c3                   	ret    
+
+c0105b19 <dup_mmap>:
+
+int
+dup_mmap(struct mm_struct *to, struct mm_struct *from) {
+c0105b19:	55                   	push   %ebp
+c0105b1a:	89 e5                	mov    %esp,%ebp
+c0105b1c:	53                   	push   %ebx
+c0105b1d:	83 ec 24             	sub    $0x24,%esp
+    assert(to != NULL && from != NULL);
+c0105b20:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0105b24:	74 06                	je     c0105b2c <dup_mmap+0x13>
+c0105b26:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c0105b2a:	75 19                	jne    c0105b45 <dup_mmap+0x2c>
+c0105b2c:	68 4e df 10 c0       	push   $0xc010df4e
+c0105b31:	68 b3 de 10 c0       	push   $0xc010deb3
+c0105b36:	68 c0 00 00 00       	push   $0xc0
+c0105b3b:	68 c8 de 10 c0       	push   $0xc010dec8
+c0105b40:	e8 af a8 ff ff       	call   c01003f4 <__panic>
+    list_entry_t *list = &(from->mmap_list), *le = list;
+c0105b45:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105b48:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0105b4b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105b4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    while ((le = list_prev(le)) != list) {
+c0105b51:	e9 86 00 00 00       	jmp    c0105bdc <dup_mmap+0xc3>
+        struct vma_struct *vma, *nvma;
+        vma = le2vma(le, list_link);
+c0105b56:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105b59:	83 e8 10             	sub    $0x10,%eax
+c0105b5c:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
+c0105b5f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0105b62:	8b 48 0c             	mov    0xc(%eax),%ecx
+c0105b65:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0105b68:	8b 50 08             	mov    0x8(%eax),%edx
+c0105b6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0105b6e:	8b 40 04             	mov    0x4(%eax),%eax
+c0105b71:	83 ec 04             	sub    $0x4,%esp
+c0105b74:	51                   	push   %ecx
+c0105b75:	52                   	push   %edx
+c0105b76:	50                   	push   %eax
+c0105b77:	e8 6a fb ff ff       	call   c01056e6 <vma_create>
+c0105b7c:	83 c4 10             	add    $0x10,%esp
+c0105b7f:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        if (nvma == NULL) {
+c0105b82:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c0105b86:	75 07                	jne    c0105b8f <dup_mmap+0x76>
+            return -E_NO_MEM;
+c0105b88:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
+c0105b8d:	eb 6c                	jmp    c0105bfb <dup_mmap+0xe2>
+        }
+
+        insert_vma_struct(to, nvma);
+c0105b8f:	83 ec 08             	sub    $0x8,%esp
+c0105b92:	ff 75 e8             	pushl  -0x18(%ebp)
+c0105b95:	ff 75 08             	pushl  0x8(%ebp)
+c0105b98:	e8 b1 fc ff ff       	call   c010584e <insert_vma_struct>
+c0105b9d:	83 c4 10             	add    $0x10,%esp
+
+        bool share = 0;
+c0105ba0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
+c0105ba7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0105baa:	8b 58 08             	mov    0x8(%eax),%ebx
+c0105bad:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0105bb0:	8b 48 04             	mov    0x4(%eax),%ecx
+c0105bb3:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105bb6:	8b 50 0c             	mov    0xc(%eax),%edx
+c0105bb9:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105bbc:	8b 40 0c             	mov    0xc(%eax),%eax
+c0105bbf:	83 ec 0c             	sub    $0xc,%esp
+c0105bc2:	ff 75 e4             	pushl  -0x1c(%ebp)
+c0105bc5:	53                   	push   %ebx
+c0105bc6:	51                   	push   %ecx
+c0105bc7:	52                   	push   %edx
+c0105bc8:	50                   	push   %eax
+c0105bc9:	e8 2d e7 ff ff       	call   c01042fb <copy_range>
+c0105bce:	83 c4 20             	add    $0x20,%esp
+c0105bd1:	85 c0                	test   %eax,%eax
+c0105bd3:	74 07                	je     c0105bdc <dup_mmap+0xc3>
+            return -E_NO_MEM;
+c0105bd5:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
+c0105bda:	eb 1f                	jmp    c0105bfb <dup_mmap+0xe2>
+c0105bdc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105bdf:	89 45 e0             	mov    %eax,-0x20(%ebp)
+ * list_prev - get the previous entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_prev(list_entry_t *listelm) {
+    return listelm->prev;
+c0105be2:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0105be5:	8b 00                	mov    (%eax),%eax
+
+int
+dup_mmap(struct mm_struct *to, struct mm_struct *from) {
+    assert(to != NULL && from != NULL);
+    list_entry_t *list = &(from->mmap_list), *le = list;
+    while ((le = list_prev(le)) != list) {
+c0105be7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0105bea:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105bed:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c0105bf0:	0f 85 60 ff ff ff    	jne    c0105b56 <dup_mmap+0x3d>
+        bool share = 0;
+        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
+            return -E_NO_MEM;
+        }
+    }
+    return 0;
+c0105bf6:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0105bfb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+c0105bfe:	c9                   	leave  
+c0105bff:	c3                   	ret    
+
+c0105c00 <exit_mmap>:
+
+void
+exit_mmap(struct mm_struct *mm) {
+c0105c00:	55                   	push   %ebp
+c0105c01:	89 e5                	mov    %esp,%ebp
+c0105c03:	83 ec 28             	sub    $0x28,%esp
+    assert(mm != NULL && mm_count(mm) == 0);
+c0105c06:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0105c0a:	74 0f                	je     c0105c1b <exit_mmap+0x1b>
+c0105c0c:	ff 75 08             	pushl  0x8(%ebp)
+c0105c0f:	e8 bf f9 ff ff       	call   c01055d3 <mm_count>
+c0105c14:	83 c4 04             	add    $0x4,%esp
+c0105c17:	85 c0                	test   %eax,%eax
+c0105c19:	74 19                	je     c0105c34 <exit_mmap+0x34>
+c0105c1b:	68 6c df 10 c0       	push   $0xc010df6c
+c0105c20:	68 b3 de 10 c0       	push   $0xc010deb3
+c0105c25:	68 d6 00 00 00       	push   $0xd6
+c0105c2a:	68 c8 de 10 c0       	push   $0xc010dec8
+c0105c2f:	e8 c0 a7 ff ff       	call   c01003f4 <__panic>
+    pde_t *pgdir = mm->pgdir;
+c0105c34:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105c37:	8b 40 0c             	mov    0xc(%eax),%eax
+c0105c3a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    list_entry_t *list = &(mm->mmap_list), *le = list;
+c0105c3d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0105c40:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0105c43:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0105c46:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    while ((le = list_next(le)) != list) {
+c0105c49:	eb 25                	jmp    c0105c70 <exit_mmap+0x70>
+        struct vma_struct *vma = le2vma(le, list_link);
+c0105c4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105c4e:	83 e8 10             	sub    $0x10,%eax
+c0105c51:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        unmap_range(pgdir, vma->vm_start, vma->vm_end);
+c0105c54:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0105c57:	8b 50 08             	mov    0x8(%eax),%edx
+c0105c5a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0105c5d:	8b 40 04             	mov    0x4(%eax),%eax
+c0105c60:	83 ec 04             	sub    $0x4,%esp
+c0105c63:	52                   	push   %edx
+c0105c64:	50                   	push   %eax
+c0105c65:	ff 75 f0             	pushl  -0x10(%ebp)
+c0105c68:	e8 c7 e4 ff ff       	call   c0104134 <unmap_range>
+c0105c6d:	83 c4 10             	add    $0x10,%esp
+c0105c70:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105c73:	89 45 dc             	mov    %eax,-0x24(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c0105c76:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0105c79:	8b 40 04             	mov    0x4(%eax),%eax
+void
+exit_mmap(struct mm_struct *mm) {
+    assert(mm != NULL && mm_count(mm) == 0);
+    pde_t *pgdir = mm->pgdir;
+    list_entry_t *list = &(mm->mmap_list), *le = list;
+    while ((le = list_next(le)) != list) {
+c0105c7c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0105c7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105c82:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c0105c85:	75 c4                	jne    c0105c4b <exit_mmap+0x4b>
+        struct vma_struct *vma = le2vma(le, list_link);
+        unmap_range(pgdir, vma->vm_start, vma->vm_end);
+    }
+    while ((le = list_next(le)) != list) {
+c0105c87:	eb 25                	jmp    c0105cae <exit_mmap+0xae>
+        struct vma_struct *vma = le2vma(le, list_link);
+c0105c89:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105c8c:	83 e8 10             	sub    $0x10,%eax
+c0105c8f:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        exit_range(pgdir, vma->vm_start, vma->vm_end);
+c0105c92:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0105c95:	8b 50 08             	mov    0x8(%eax),%edx
+c0105c98:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0105c9b:	8b 40 04             	mov    0x4(%eax),%eax
+c0105c9e:	83 ec 04             	sub    $0x4,%esp
+c0105ca1:	52                   	push   %edx
+c0105ca2:	50                   	push   %eax
+c0105ca3:	ff 75 f0             	pushl  -0x10(%ebp)
+c0105ca6:	e8 5c e5 ff ff       	call   c0104207 <exit_range>
+c0105cab:	83 c4 10             	add    $0x10,%esp
+c0105cae:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105cb1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0105cb4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0105cb7:	8b 40 04             	mov    0x4(%eax),%eax
+    list_entry_t *list = &(mm->mmap_list), *le = list;
+    while ((le = list_next(le)) != list) {
+        struct vma_struct *vma = le2vma(le, list_link);
+        unmap_range(pgdir, vma->vm_start, vma->vm_end);
+    }
+    while ((le = list_next(le)) != list) {
+c0105cba:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0105cbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105cc0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c0105cc3:	75 c4                	jne    c0105c89 <exit_mmap+0x89>
+        struct vma_struct *vma = le2vma(le, list_link);
+        exit_range(pgdir, vma->vm_start, vma->vm_end);
+    }
+}
+c0105cc5:	90                   	nop
+c0105cc6:	c9                   	leave  
+c0105cc7:	c3                   	ret    
+
+c0105cc8 <copy_from_user>:
+
+bool
+copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
+c0105cc8:	55                   	push   %ebp
+c0105cc9:	89 e5                	mov    %esp,%ebp
+c0105ccb:	83 ec 08             	sub    $0x8,%esp
+    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
+c0105cce:	8b 45 10             	mov    0x10(%ebp),%eax
+c0105cd1:	ff 75 18             	pushl  0x18(%ebp)
+c0105cd4:	ff 75 14             	pushl  0x14(%ebp)
+c0105cd7:	50                   	push   %eax
+c0105cd8:	ff 75 08             	pushl  0x8(%ebp)
+c0105cdb:	e8 74 08 00 00       	call   c0106554 <user_mem_check>
+c0105ce0:	83 c4 10             	add    $0x10,%esp
+c0105ce3:	85 c0                	test   %eax,%eax
+c0105ce5:	75 07                	jne    c0105cee <copy_from_user+0x26>
+        return 0;
+c0105ce7:	b8 00 00 00 00       	mov    $0x0,%eax
+c0105cec:	eb 19                	jmp    c0105d07 <copy_from_user+0x3f>
+    }
+    memcpy(dst, src, len);
+c0105cee:	83 ec 04             	sub    $0x4,%esp
+c0105cf1:	ff 75 14             	pushl  0x14(%ebp)
+c0105cf4:	ff 75 10             	pushl  0x10(%ebp)
+c0105cf7:	ff 75 0c             	pushl  0xc(%ebp)
+c0105cfa:	e8 cc 67 00 00       	call   c010c4cb <memcpy>
+c0105cff:	83 c4 10             	add    $0x10,%esp
+    return 1;
+c0105d02:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+c0105d07:	c9                   	leave  
+c0105d08:	c3                   	ret    
+
+c0105d09 <copy_to_user>:
+
+bool
+copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
+c0105d09:	55                   	push   %ebp
+c0105d0a:	89 e5                	mov    %esp,%ebp
+c0105d0c:	83 ec 08             	sub    $0x8,%esp
+    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
+c0105d0f:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0105d12:	6a 01                	push   $0x1
+c0105d14:	ff 75 14             	pushl  0x14(%ebp)
+c0105d17:	50                   	push   %eax
+c0105d18:	ff 75 08             	pushl  0x8(%ebp)
+c0105d1b:	e8 34 08 00 00       	call   c0106554 <user_mem_check>
+c0105d20:	83 c4 10             	add    $0x10,%esp
+c0105d23:	85 c0                	test   %eax,%eax
+c0105d25:	75 07                	jne    c0105d2e <copy_to_user+0x25>
+        return 0;
+c0105d27:	b8 00 00 00 00       	mov    $0x0,%eax
+c0105d2c:	eb 19                	jmp    c0105d47 <copy_to_user+0x3e>
+    }
+    memcpy(dst, src, len);
+c0105d2e:	83 ec 04             	sub    $0x4,%esp
+c0105d31:	ff 75 14             	pushl  0x14(%ebp)
+c0105d34:	ff 75 10             	pushl  0x10(%ebp)
+c0105d37:	ff 75 0c             	pushl  0xc(%ebp)
+c0105d3a:	e8 8c 67 00 00       	call   c010c4cb <memcpy>
+c0105d3f:	83 c4 10             	add    $0x10,%esp
+    return 1;
+c0105d42:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+c0105d47:	c9                   	leave  
+c0105d48:	c3                   	ret    
+
+c0105d49 <vmm_init>:
+
+// vmm_init - initialize virtual memory management
+//          - now just call check_vmm to check correctness of vmm
+void
+vmm_init(void) {
+c0105d49:	55                   	push   %ebp
+c0105d4a:	89 e5                	mov    %esp,%ebp
+c0105d4c:	83 ec 08             	sub    $0x8,%esp
+    check_vmm();
+c0105d4f:	e8 03 00 00 00       	call   c0105d57 <check_vmm>
+}
+c0105d54:	90                   	nop
+c0105d55:	c9                   	leave  
+c0105d56:	c3                   	ret    
+
+c0105d57 <check_vmm>:
+
+// check_vmm - check correctness of vmm
+static void
+check_vmm(void) {
+c0105d57:	55                   	push   %ebp
+c0105d58:	89 e5                	mov    %esp,%ebp
+c0105d5a:	83 ec 18             	sub    $0x18,%esp
+    size_t nr_free_pages_store = nr_free_pages();
+c0105d5d:	e8 9f db ff ff       	call   c0103901 <nr_free_pages>
+c0105d62:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    
+    check_vma_struct();
+c0105d65:	e8 18 00 00 00       	call   c0105d82 <check_vma_struct>
+    check_pgfault();
+c0105d6a:	e8 10 04 00 00       	call   c010617f <check_pgfault>
+
+    cprintf("check_vmm() succeeded.\n");
+c0105d6f:	83 ec 0c             	sub    $0xc,%esp
+c0105d72:	68 8c df 10 c0       	push   $0xc010df8c
+c0105d77:	e8 12 a5 ff ff       	call   c010028e <cprintf>
+c0105d7c:	83 c4 10             	add    $0x10,%esp
+}
+c0105d7f:	90                   	nop
+c0105d80:	c9                   	leave  
+c0105d81:	c3                   	ret    
+
+c0105d82 <check_vma_struct>:
+
+static void
+check_vma_struct(void) {
+c0105d82:	55                   	push   %ebp
+c0105d83:	89 e5                	mov    %esp,%ebp
+c0105d85:	83 ec 58             	sub    $0x58,%esp
+    size_t nr_free_pages_store = nr_free_pages();
+c0105d88:	e8 74 db ff ff       	call   c0103901 <nr_free_pages>
+c0105d8d:	89 45 ec             	mov    %eax,-0x14(%ebp)
+
+    struct mm_struct *mm = mm_create();
+c0105d90:	e8 b1 f8 ff ff       	call   c0105646 <mm_create>
+c0105d95:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    assert(mm != NULL);
+c0105d98:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c0105d9c:	75 19                	jne    c0105db7 <check_vma_struct+0x35>
+c0105d9e:	68 43 df 10 c0       	push   $0xc010df43
+c0105da3:	68 b3 de 10 c0       	push   $0xc010deb3
+c0105da8:	68 0c 01 00 00       	push   $0x10c
+c0105dad:	68 c8 de 10 c0       	push   $0xc010dec8
+c0105db2:	e8 3d a6 ff ff       	call   c01003f4 <__panic>
+
+    int step1 = 10, step2 = step1 * 10;
+c0105db7:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
+c0105dbe:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0105dc1:	89 d0                	mov    %edx,%eax
+c0105dc3:	c1 e0 02             	shl    $0x2,%eax
+c0105dc6:	01 d0                	add    %edx,%eax
+c0105dc8:	01 c0                	add    %eax,%eax
+c0105dca:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    int i;
+    for (i = step1; i >= 1; i --) {
+c0105dcd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0105dd0:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0105dd3:	eb 5f                	jmp    c0105e34 <check_vma_struct+0xb2>
+        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
+c0105dd5:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0105dd8:	89 d0                	mov    %edx,%eax
+c0105dda:	c1 e0 02             	shl    $0x2,%eax
+c0105ddd:	01 d0                	add    %edx,%eax
+c0105ddf:	83 c0 02             	add    $0x2,%eax
+c0105de2:	89 c1                	mov    %eax,%ecx
+c0105de4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0105de7:	89 d0                	mov    %edx,%eax
+c0105de9:	c1 e0 02             	shl    $0x2,%eax
+c0105dec:	01 d0                	add    %edx,%eax
+c0105dee:	83 ec 04             	sub    $0x4,%esp
+c0105df1:	6a 00                	push   $0x0
+c0105df3:	51                   	push   %ecx
+c0105df4:	50                   	push   %eax
+c0105df5:	e8 ec f8 ff ff       	call   c01056e6 <vma_create>
+c0105dfa:	83 c4 10             	add    $0x10,%esp
+c0105dfd:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        assert(vma != NULL);
+c0105e00:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c0105e04:	75 19                	jne    c0105e1f <check_vma_struct+0x9d>
+c0105e06:	68 a4 df 10 c0       	push   $0xc010dfa4
+c0105e0b:	68 b3 de 10 c0       	push   $0xc010deb3
+c0105e10:	68 13 01 00 00       	push   $0x113
+c0105e15:	68 c8 de 10 c0       	push   $0xc010dec8
+c0105e1a:	e8 d5 a5 ff ff       	call   c01003f4 <__panic>
+        insert_vma_struct(mm, vma);
+c0105e1f:	83 ec 08             	sub    $0x8,%esp
+c0105e22:	ff 75 dc             	pushl  -0x24(%ebp)
+c0105e25:	ff 75 e8             	pushl  -0x18(%ebp)
+c0105e28:	e8 21 fa ff ff       	call   c010584e <insert_vma_struct>
+c0105e2d:	83 c4 10             	add    $0x10,%esp
+    assert(mm != NULL);
+
+    int step1 = 10, step2 = step1 * 10;
+
+    int i;
+    for (i = step1; i >= 1; i --) {
+c0105e30:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+c0105e34:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0105e38:	7f 9b                	jg     c0105dd5 <check_vma_struct+0x53>
+        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
+        assert(vma != NULL);
+        insert_vma_struct(mm, vma);
+    }
+
+    for (i = step1 + 1; i <= step2; i ++) {
+c0105e3a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0105e3d:	83 c0 01             	add    $0x1,%eax
+c0105e40:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0105e43:	eb 5f                	jmp    c0105ea4 <check_vma_struct+0x122>
+        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
+c0105e45:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0105e48:	89 d0                	mov    %edx,%eax
+c0105e4a:	c1 e0 02             	shl    $0x2,%eax
+c0105e4d:	01 d0                	add    %edx,%eax
+c0105e4f:	83 c0 02             	add    $0x2,%eax
+c0105e52:	89 c1                	mov    %eax,%ecx
+c0105e54:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0105e57:	89 d0                	mov    %edx,%eax
+c0105e59:	c1 e0 02             	shl    $0x2,%eax
+c0105e5c:	01 d0                	add    %edx,%eax
+c0105e5e:	83 ec 04             	sub    $0x4,%esp
+c0105e61:	6a 00                	push   $0x0
+c0105e63:	51                   	push   %ecx
+c0105e64:	50                   	push   %eax
+c0105e65:	e8 7c f8 ff ff       	call   c01056e6 <vma_create>
+c0105e6a:	83 c4 10             	add    $0x10,%esp
+c0105e6d:	89 45 d8             	mov    %eax,-0x28(%ebp)
+        assert(vma != NULL);
+c0105e70:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
+c0105e74:	75 19                	jne    c0105e8f <check_vma_struct+0x10d>
+c0105e76:	68 a4 df 10 c0       	push   $0xc010dfa4
+c0105e7b:	68 b3 de 10 c0       	push   $0xc010deb3
+c0105e80:	68 19 01 00 00       	push   $0x119
+c0105e85:	68 c8 de 10 c0       	push   $0xc010dec8
+c0105e8a:	e8 65 a5 ff ff       	call   c01003f4 <__panic>
+        insert_vma_struct(mm, vma);
+c0105e8f:	83 ec 08             	sub    $0x8,%esp
+c0105e92:	ff 75 d8             	pushl  -0x28(%ebp)
+c0105e95:	ff 75 e8             	pushl  -0x18(%ebp)
+c0105e98:	e8 b1 f9 ff ff       	call   c010584e <insert_vma_struct>
+c0105e9d:	83 c4 10             	add    $0x10,%esp
+        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
+        assert(vma != NULL);
+        insert_vma_struct(mm, vma);
+    }
+
+    for (i = step1 + 1; i <= step2; i ++) {
+c0105ea0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0105ea4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105ea7:	3b 45 e0             	cmp    -0x20(%ebp),%eax
+c0105eaa:	7e 99                	jle    c0105e45 <check_vma_struct+0xc3>
+        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
+        assert(vma != NULL);
+        insert_vma_struct(mm, vma);
+    }
+
+    list_entry_t *le = list_next(&(mm->mmap_list));
+c0105eac:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0105eaf:	89 45 b4             	mov    %eax,-0x4c(%ebp)
+c0105eb2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c0105eb5:	8b 40 04             	mov    0x4(%eax),%eax
+c0105eb8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+
+    for (i = 1; i <= step2; i ++) {
+c0105ebb:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
+c0105ec2:	e9 81 00 00 00       	jmp    c0105f48 <check_vma_struct+0x1c6>
+        assert(le != &(mm->mmap_list));
+c0105ec7:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0105eca:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c0105ecd:	75 19                	jne    c0105ee8 <check_vma_struct+0x166>
+c0105ecf:	68 b0 df 10 c0       	push   $0xc010dfb0
+c0105ed4:	68 b3 de 10 c0       	push   $0xc010deb3
+c0105ed9:	68 20 01 00 00       	push   $0x120
+c0105ede:	68 c8 de 10 c0       	push   $0xc010dec8
+c0105ee3:	e8 0c a5 ff ff       	call   c01003f4 <__panic>
+        struct vma_struct *mmap = le2vma(le, list_link);
+c0105ee8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105eeb:	83 e8 10             	sub    $0x10,%eax
+c0105eee:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
+c0105ef1:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0105ef4:	8b 48 04             	mov    0x4(%eax),%ecx
+c0105ef7:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0105efa:	89 d0                	mov    %edx,%eax
+c0105efc:	c1 e0 02             	shl    $0x2,%eax
+c0105eff:	01 d0                	add    %edx,%eax
+c0105f01:	39 c1                	cmp    %eax,%ecx
+c0105f03:	75 17                	jne    c0105f1c <check_vma_struct+0x19a>
+c0105f05:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0105f08:	8b 48 08             	mov    0x8(%eax),%ecx
+c0105f0b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0105f0e:	89 d0                	mov    %edx,%eax
+c0105f10:	c1 e0 02             	shl    $0x2,%eax
+c0105f13:	01 d0                	add    %edx,%eax
+c0105f15:	83 c0 02             	add    $0x2,%eax
+c0105f18:	39 c1                	cmp    %eax,%ecx
+c0105f1a:	74 19                	je     c0105f35 <check_vma_struct+0x1b3>
+c0105f1c:	68 c8 df 10 c0       	push   $0xc010dfc8
+c0105f21:	68 b3 de 10 c0       	push   $0xc010deb3
+c0105f26:	68 22 01 00 00       	push   $0x122
+c0105f2b:	68 c8 de 10 c0       	push   $0xc010dec8
+c0105f30:	e8 bf a4 ff ff       	call   c01003f4 <__panic>
+c0105f35:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0105f38:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+c0105f3b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0105f3e:	8b 40 04             	mov    0x4(%eax),%eax
+        le = list_next(le);
+c0105f41:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        insert_vma_struct(mm, vma);
+    }
+
+    list_entry_t *le = list_next(&(mm->mmap_list));
+
+    for (i = 1; i <= step2; i ++) {
+c0105f44:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0105f48:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105f4b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
+c0105f4e:	0f 8e 73 ff ff ff    	jle    c0105ec7 <check_vma_struct+0x145>
+        struct vma_struct *mmap = le2vma(le, list_link);
+        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
+        le = list_next(le);
+    }
+
+    for (i = 5; i <= 5 * step2; i +=5) {
+c0105f54:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
+c0105f5b:	e9 80 01 00 00       	jmp    c01060e0 <check_vma_struct+0x35e>
+        struct vma_struct *vma1 = find_vma(mm, i);
+c0105f60:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105f63:	83 ec 08             	sub    $0x8,%esp
+c0105f66:	50                   	push   %eax
+c0105f67:	ff 75 e8             	pushl  -0x18(%ebp)
+c0105f6a:	e8 b3 f7 ff ff       	call   c0105722 <find_vma>
+c0105f6f:	83 c4 10             	add    $0x10,%esp
+c0105f72:	89 45 cc             	mov    %eax,-0x34(%ebp)
+        assert(vma1 != NULL);
+c0105f75:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
+c0105f79:	75 19                	jne    c0105f94 <check_vma_struct+0x212>
+c0105f7b:	68 fd df 10 c0       	push   $0xc010dffd
+c0105f80:	68 b3 de 10 c0       	push   $0xc010deb3
+c0105f85:	68 28 01 00 00       	push   $0x128
+c0105f8a:	68 c8 de 10 c0       	push   $0xc010dec8
+c0105f8f:	e8 60 a4 ff ff       	call   c01003f4 <__panic>
+        struct vma_struct *vma2 = find_vma(mm, i+1);
+c0105f94:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105f97:	83 c0 01             	add    $0x1,%eax
+c0105f9a:	83 ec 08             	sub    $0x8,%esp
+c0105f9d:	50                   	push   %eax
+c0105f9e:	ff 75 e8             	pushl  -0x18(%ebp)
+c0105fa1:	e8 7c f7 ff ff       	call   c0105722 <find_vma>
+c0105fa6:	83 c4 10             	add    $0x10,%esp
+c0105fa9:	89 45 c8             	mov    %eax,-0x38(%ebp)
+        assert(vma2 != NULL);
+c0105fac:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
+c0105fb0:	75 19                	jne    c0105fcb <check_vma_struct+0x249>
+c0105fb2:	68 0a e0 10 c0       	push   $0xc010e00a
+c0105fb7:	68 b3 de 10 c0       	push   $0xc010deb3
+c0105fbc:	68 2a 01 00 00       	push   $0x12a
+c0105fc1:	68 c8 de 10 c0       	push   $0xc010dec8
+c0105fc6:	e8 29 a4 ff ff       	call   c01003f4 <__panic>
+        struct vma_struct *vma3 = find_vma(mm, i+2);
+c0105fcb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0105fce:	83 c0 02             	add    $0x2,%eax
+c0105fd1:	83 ec 08             	sub    $0x8,%esp
+c0105fd4:	50                   	push   %eax
+c0105fd5:	ff 75 e8             	pushl  -0x18(%ebp)
+c0105fd8:	e8 45 f7 ff ff       	call   c0105722 <find_vma>
+c0105fdd:	83 c4 10             	add    $0x10,%esp
+c0105fe0:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        assert(vma3 == NULL);
+c0105fe3:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
+c0105fe7:	74 19                	je     c0106002 <check_vma_struct+0x280>
+c0105fe9:	68 17 e0 10 c0       	push   $0xc010e017
+c0105fee:	68 b3 de 10 c0       	push   $0xc010deb3
+c0105ff3:	68 2c 01 00 00       	push   $0x12c
+c0105ff8:	68 c8 de 10 c0       	push   $0xc010dec8
+c0105ffd:	e8 f2 a3 ff ff       	call   c01003f4 <__panic>
+        struct vma_struct *vma4 = find_vma(mm, i+3);
+c0106002:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106005:	83 c0 03             	add    $0x3,%eax
+c0106008:	83 ec 08             	sub    $0x8,%esp
+c010600b:	50                   	push   %eax
+c010600c:	ff 75 e8             	pushl  -0x18(%ebp)
+c010600f:	e8 0e f7 ff ff       	call   c0105722 <find_vma>
+c0106014:	83 c4 10             	add    $0x10,%esp
+c0106017:	89 45 c0             	mov    %eax,-0x40(%ebp)
+        assert(vma4 == NULL);
+c010601a:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
+c010601e:	74 19                	je     c0106039 <check_vma_struct+0x2b7>
+c0106020:	68 24 e0 10 c0       	push   $0xc010e024
+c0106025:	68 b3 de 10 c0       	push   $0xc010deb3
+c010602a:	68 2e 01 00 00       	push   $0x12e
+c010602f:	68 c8 de 10 c0       	push   $0xc010dec8
+c0106034:	e8 bb a3 ff ff       	call   c01003f4 <__panic>
+        struct vma_struct *vma5 = find_vma(mm, i+4);
+c0106039:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010603c:	83 c0 04             	add    $0x4,%eax
+c010603f:	83 ec 08             	sub    $0x8,%esp
+c0106042:	50                   	push   %eax
+c0106043:	ff 75 e8             	pushl  -0x18(%ebp)
+c0106046:	e8 d7 f6 ff ff       	call   c0105722 <find_vma>
+c010604b:	83 c4 10             	add    $0x10,%esp
+c010604e:	89 45 bc             	mov    %eax,-0x44(%ebp)
+        assert(vma5 == NULL);
+c0106051:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
+c0106055:	74 19                	je     c0106070 <check_vma_struct+0x2ee>
+c0106057:	68 31 e0 10 c0       	push   $0xc010e031
+c010605c:	68 b3 de 10 c0       	push   $0xc010deb3
+c0106061:	68 30 01 00 00       	push   $0x130
+c0106066:	68 c8 de 10 c0       	push   $0xc010dec8
+c010606b:	e8 84 a3 ff ff       	call   c01003f4 <__panic>
+
+        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
+c0106070:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0106073:	8b 50 04             	mov    0x4(%eax),%edx
+c0106076:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106079:	39 c2                	cmp    %eax,%edx
+c010607b:	75 10                	jne    c010608d <check_vma_struct+0x30b>
+c010607d:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0106080:	8b 40 08             	mov    0x8(%eax),%eax
+c0106083:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0106086:	83 c2 02             	add    $0x2,%edx
+c0106089:	39 d0                	cmp    %edx,%eax
+c010608b:	74 19                	je     c01060a6 <check_vma_struct+0x324>
+c010608d:	68 40 e0 10 c0       	push   $0xc010e040
+c0106092:	68 b3 de 10 c0       	push   $0xc010deb3
+c0106097:	68 32 01 00 00       	push   $0x132
+c010609c:	68 c8 de 10 c0       	push   $0xc010dec8
+c01060a1:	e8 4e a3 ff ff       	call   c01003f4 <__panic>
+        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
+c01060a6:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c01060a9:	8b 50 04             	mov    0x4(%eax),%edx
+c01060ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01060af:	39 c2                	cmp    %eax,%edx
+c01060b1:	75 10                	jne    c01060c3 <check_vma_struct+0x341>
+c01060b3:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c01060b6:	8b 40 08             	mov    0x8(%eax),%eax
+c01060b9:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01060bc:	83 c2 02             	add    $0x2,%edx
+c01060bf:	39 d0                	cmp    %edx,%eax
+c01060c1:	74 19                	je     c01060dc <check_vma_struct+0x35a>
+c01060c3:	68 70 e0 10 c0       	push   $0xc010e070
+c01060c8:	68 b3 de 10 c0       	push   $0xc010deb3
+c01060cd:	68 33 01 00 00       	push   $0x133
+c01060d2:	68 c8 de 10 c0       	push   $0xc010dec8
+c01060d7:	e8 18 a3 ff ff       	call   c01003f4 <__panic>
+        struct vma_struct *mmap = le2vma(le, list_link);
+        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
+        le = list_next(le);
+    }
+
+    for (i = 5; i <= 5 * step2; i +=5) {
+c01060dc:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
+c01060e0:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c01060e3:	89 d0                	mov    %edx,%eax
+c01060e5:	c1 e0 02             	shl    $0x2,%eax
+c01060e8:	01 d0                	add    %edx,%eax
+c01060ea:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c01060ed:	0f 8d 6d fe ff ff    	jge    c0105f60 <check_vma_struct+0x1de>
+
+        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
+        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
+    }
+
+    for (i =4; i>=0; i--) {
+c01060f3:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
+c01060fa:	eb 5c                	jmp    c0106158 <check_vma_struct+0x3d6>
+        struct vma_struct *vma_below_5= find_vma(mm,i);
+c01060fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01060ff:	83 ec 08             	sub    $0x8,%esp
+c0106102:	50                   	push   %eax
+c0106103:	ff 75 e8             	pushl  -0x18(%ebp)
+c0106106:	e8 17 f6 ff ff       	call   c0105722 <find_vma>
+c010610b:	83 c4 10             	add    $0x10,%esp
+c010610e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+        if (vma_below_5 != NULL ) {
+c0106111:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
+c0106115:	74 1e                	je     c0106135 <check_vma_struct+0x3b3>
+           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
+c0106117:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c010611a:	8b 50 08             	mov    0x8(%eax),%edx
+c010611d:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c0106120:	8b 40 04             	mov    0x4(%eax),%eax
+c0106123:	52                   	push   %edx
+c0106124:	50                   	push   %eax
+c0106125:	ff 75 f4             	pushl  -0xc(%ebp)
+c0106128:	68 a0 e0 10 c0       	push   $0xc010e0a0
+c010612d:	e8 5c a1 ff ff       	call   c010028e <cprintf>
+c0106132:	83 c4 10             	add    $0x10,%esp
+        }
+        assert(vma_below_5 == NULL);
+c0106135:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
+c0106139:	74 19                	je     c0106154 <check_vma_struct+0x3d2>
+c010613b:	68 c5 e0 10 c0       	push   $0xc010e0c5
+c0106140:	68 b3 de 10 c0       	push   $0xc010deb3
+c0106145:	68 3b 01 00 00       	push   $0x13b
+c010614a:	68 c8 de 10 c0       	push   $0xc010dec8
+c010614f:	e8 a0 a2 ff ff       	call   c01003f4 <__panic>
+
+        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
+        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
+    }
+
+    for (i =4; i>=0; i--) {
+c0106154:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+c0106158:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010615c:	79 9e                	jns    c01060fc <check_vma_struct+0x37a>
+           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
+        }
+        assert(vma_below_5 == NULL);
+    }
+
+    mm_destroy(mm);
+c010615e:	83 ec 0c             	sub    $0xc,%esp
+c0106161:	ff 75 e8             	pushl  -0x18(%ebp)
+c0106164:	e8 09 f8 ff ff       	call   c0105972 <mm_destroy>
+c0106169:	83 c4 10             	add    $0x10,%esp
+
+    cprintf("check_vma_struct() succeeded!\n");
+c010616c:	83 ec 0c             	sub    $0xc,%esp
+c010616f:	68 dc e0 10 c0       	push   $0xc010e0dc
+c0106174:	e8 15 a1 ff ff       	call   c010028e <cprintf>
+c0106179:	83 c4 10             	add    $0x10,%esp
+}
+c010617c:	90                   	nop
+c010617d:	c9                   	leave  
+c010617e:	c3                   	ret    
+
+c010617f <check_pgfault>:
+
+struct mm_struct *check_mm_struct;
+
+// check_pgfault - check correctness of pgfault handler
+static void
+check_pgfault(void) {
+c010617f:	55                   	push   %ebp
+c0106180:	89 e5                	mov    %esp,%ebp
+c0106182:	83 ec 28             	sub    $0x28,%esp
+    size_t nr_free_pages_store = nr_free_pages();
+c0106185:	e8 77 d7 ff ff       	call   c0103901 <nr_free_pages>
+c010618a:	89 45 ec             	mov    %eax,-0x14(%ebp)
+
+    check_mm_struct = mm_create();
+c010618d:	e8 b4 f4 ff ff       	call   c0105646 <mm_create>
+c0106192:	a3 b0 53 1c c0       	mov    %eax,0xc01c53b0
+    assert(check_mm_struct != NULL);
+c0106197:	a1 b0 53 1c c0       	mov    0xc01c53b0,%eax
+c010619c:	85 c0                	test   %eax,%eax
+c010619e:	75 19                	jne    c01061b9 <check_pgfault+0x3a>
+c01061a0:	68 fb e0 10 c0       	push   $0xc010e0fb
+c01061a5:	68 b3 de 10 c0       	push   $0xc010deb3
+c01061aa:	68 4b 01 00 00       	push   $0x14b
+c01061af:	68 c8 de 10 c0       	push   $0xc010dec8
+c01061b4:	e8 3b a2 ff ff       	call   c01003f4 <__panic>
+
+    struct mm_struct *mm = check_mm_struct;
+c01061b9:	a1 b0 53 1c c0       	mov    0xc01c53b0,%eax
+c01061be:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    pde_t *pgdir = mm->pgdir = boot_pgdir;
+c01061c1:	8b 15 64 32 1c c0    	mov    0xc01c3264,%edx
+c01061c7:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01061ca:	89 50 0c             	mov    %edx,0xc(%eax)
+c01061cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01061d0:	8b 40 0c             	mov    0xc(%eax),%eax
+c01061d3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    assert(pgdir[0] == 0);
+c01061d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c01061d9:	8b 00                	mov    (%eax),%eax
+c01061db:	85 c0                	test   %eax,%eax
+c01061dd:	74 19                	je     c01061f8 <check_pgfault+0x79>
+c01061df:	68 13 e1 10 c0       	push   $0xc010e113
+c01061e4:	68 b3 de 10 c0       	push   $0xc010deb3
+c01061e9:	68 4f 01 00 00       	push   $0x14f
+c01061ee:	68 c8 de 10 c0       	push   $0xc010dec8
+c01061f3:	e8 fc a1 ff ff       	call   c01003f4 <__panic>
+
+    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
+c01061f8:	83 ec 04             	sub    $0x4,%esp
+c01061fb:	6a 02                	push   $0x2
+c01061fd:	68 00 00 40 00       	push   $0x400000
+c0106202:	6a 00                	push   $0x0
+c0106204:	e8 dd f4 ff ff       	call   c01056e6 <vma_create>
+c0106209:	83 c4 10             	add    $0x10,%esp
+c010620c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    assert(vma != NULL);
+c010620f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+c0106213:	75 19                	jne    c010622e <check_pgfault+0xaf>
+c0106215:	68 a4 df 10 c0       	push   $0xc010dfa4
+c010621a:	68 b3 de 10 c0       	push   $0xc010deb3
+c010621f:	68 52 01 00 00       	push   $0x152
+c0106224:	68 c8 de 10 c0       	push   $0xc010dec8
+c0106229:	e8 c6 a1 ff ff       	call   c01003f4 <__panic>
+
+    insert_vma_struct(mm, vma);
+c010622e:	83 ec 08             	sub    $0x8,%esp
+c0106231:	ff 75 e0             	pushl  -0x20(%ebp)
+c0106234:	ff 75 e8             	pushl  -0x18(%ebp)
+c0106237:	e8 12 f6 ff ff       	call   c010584e <insert_vma_struct>
+c010623c:	83 c4 10             	add    $0x10,%esp
+
+    uintptr_t addr = 0x100;
+c010623f:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
+    assert(find_vma(mm, addr) == vma);
+c0106246:	83 ec 08             	sub    $0x8,%esp
+c0106249:	ff 75 dc             	pushl  -0x24(%ebp)
+c010624c:	ff 75 e8             	pushl  -0x18(%ebp)
+c010624f:	e8 ce f4 ff ff       	call   c0105722 <find_vma>
+c0106254:	83 c4 10             	add    $0x10,%esp
+c0106257:	3b 45 e0             	cmp    -0x20(%ebp),%eax
+c010625a:	74 19                	je     c0106275 <check_pgfault+0xf6>
+c010625c:	68 21 e1 10 c0       	push   $0xc010e121
+c0106261:	68 b3 de 10 c0       	push   $0xc010deb3
+c0106266:	68 57 01 00 00       	push   $0x157
+c010626b:	68 c8 de 10 c0       	push   $0xc010dec8
+c0106270:	e8 7f a1 ff ff       	call   c01003f4 <__panic>
+
+    int i, sum = 0;
+c0106275:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    for (i = 0; i < 100; i ++) {
+c010627c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0106283:	eb 19                	jmp    c010629e <check_pgfault+0x11f>
+        *(char *)(addr + i) = i;
+c0106285:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0106288:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010628b:	01 d0                	add    %edx,%eax
+c010628d:	89 c2                	mov    %eax,%edx
+c010628f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106292:	88 02                	mov    %al,(%edx)
+        sum += i;
+c0106294:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106297:	01 45 f0             	add    %eax,-0x10(%ebp)
+
+    uintptr_t addr = 0x100;
+    assert(find_vma(mm, addr) == vma);
+
+    int i, sum = 0;
+    for (i = 0; i < 100; i ++) {
+c010629a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c010629e:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
+c01062a2:	7e e1                	jle    c0106285 <check_pgfault+0x106>
+        *(char *)(addr + i) = i;
+        sum += i;
+    }
+    for (i = 0; i < 100; i ++) {
+c01062a4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c01062ab:	eb 15                	jmp    c01062c2 <check_pgfault+0x143>
+        sum -= *(char *)(addr + i);
+c01062ad:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c01062b0:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01062b3:	01 d0                	add    %edx,%eax
+c01062b5:	0f b6 00             	movzbl (%eax),%eax
+c01062b8:	0f be c0             	movsbl %al,%eax
+c01062bb:	29 45 f0             	sub    %eax,-0x10(%ebp)
+    int i, sum = 0;
+    for (i = 0; i < 100; i ++) {
+        *(char *)(addr + i) = i;
+        sum += i;
+    }
+    for (i = 0; i < 100; i ++) {
+c01062be:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c01062c2:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
+c01062c6:	7e e5                	jle    c01062ad <check_pgfault+0x12e>
+        sum -= *(char *)(addr + i);
+    }
+    assert(sum == 0);
+c01062c8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c01062cc:	74 19                	je     c01062e7 <check_pgfault+0x168>
+c01062ce:	68 3b e1 10 c0       	push   $0xc010e13b
+c01062d3:	68 b3 de 10 c0       	push   $0xc010deb3
+c01062d8:	68 61 01 00 00       	push   $0x161
+c01062dd:	68 c8 de 10 c0       	push   $0xc010dec8
+c01062e2:	e8 0d a1 ff ff       	call   c01003f4 <__panic>
+
+    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
+c01062e7:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01062ea:	89 45 d8             	mov    %eax,-0x28(%ebp)
+c01062ed:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c01062f0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c01062f5:	83 ec 08             	sub    $0x8,%esp
+c01062f8:	50                   	push   %eax
+c01062f9:	ff 75 e4             	pushl  -0x1c(%ebp)
+c01062fc:	e8 d3 e1 ff ff       	call   c01044d4 <page_remove>
+c0106301:	83 c4 10             	add    $0x10,%esp
+    free_page(pde2page(pgdir[0]));
+c0106304:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0106307:	8b 00                	mov    (%eax),%eax
+c0106309:	83 ec 0c             	sub    $0xc,%esp
+c010630c:	50                   	push   %eax
+c010630d:	e8 18 f3 ff ff       	call   c010562a <pde2page>
+c0106312:	83 c4 10             	add    $0x10,%esp
+c0106315:	83 ec 08             	sub    $0x8,%esp
+c0106318:	6a 01                	push   $0x1
+c010631a:	50                   	push   %eax
+c010631b:	e8 ac d5 ff ff       	call   c01038cc <free_pages>
+c0106320:	83 c4 10             	add    $0x10,%esp
+    pgdir[0] = 0;
+c0106323:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0106326:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+
+    mm->pgdir = NULL;
+c010632c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010632f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
+    mm_destroy(mm);
+c0106336:	83 ec 0c             	sub    $0xc,%esp
+c0106339:	ff 75 e8             	pushl  -0x18(%ebp)
+c010633c:	e8 31 f6 ff ff       	call   c0105972 <mm_destroy>
+c0106341:	83 c4 10             	add    $0x10,%esp
+    check_mm_struct = NULL;
+c0106344:	c7 05 b0 53 1c c0 00 	movl   $0x0,0xc01c53b0
+c010634b:	00 00 00 
+
+    assert(nr_free_pages_store == nr_free_pages());
+c010634e:	e8 ae d5 ff ff       	call   c0103901 <nr_free_pages>
+c0106353:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c0106356:	74 19                	je     c0106371 <check_pgfault+0x1f2>
+c0106358:	68 44 e1 10 c0       	push   $0xc010e144
+c010635d:	68 b3 de 10 c0       	push   $0xc010deb3
+c0106362:	68 6b 01 00 00       	push   $0x16b
+c0106367:	68 c8 de 10 c0       	push   $0xc010dec8
+c010636c:	e8 83 a0 ff ff       	call   c01003f4 <__panic>
+
+    cprintf("check_pgfault() succeeded!\n");
+c0106371:	83 ec 0c             	sub    $0xc,%esp
+c0106374:	68 6b e1 10 c0       	push   $0xc010e16b
+c0106379:	e8 10 9f ff ff       	call   c010028e <cprintf>
+c010637e:	83 c4 10             	add    $0x10,%esp
+}
+c0106381:	90                   	nop
+c0106382:	c9                   	leave  
+c0106383:	c3                   	ret    
+
+c0106384 <do_pgfault>:
+ *            was a read (0) or write (1).
+ *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
+ *            or supervisor mode (0) at the time of the exception.
+ */
+int
+do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
+c0106384:	55                   	push   %ebp
+c0106385:	89 e5                	mov    %esp,%ebp
+c0106387:	83 ec 28             	sub    $0x28,%esp
+    int ret = -E_INVAL;
+c010638a:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
+    //try to find a vma which include addr
+    struct vma_struct *vma = find_vma(mm, addr);
+c0106391:	ff 75 10             	pushl  0x10(%ebp)
+c0106394:	ff 75 08             	pushl  0x8(%ebp)
+c0106397:	e8 86 f3 ff ff       	call   c0105722 <find_vma>
+c010639c:	83 c4 08             	add    $0x8,%esp
+c010639f:	89 45 ec             	mov    %eax,-0x14(%ebp)
+
+    pgfault_num++;
+c01063a2:	a1 ec 32 1c c0       	mov    0xc01c32ec,%eax
+c01063a7:	83 c0 01             	add    $0x1,%eax
+c01063aa:	a3 ec 32 1c c0       	mov    %eax,0xc01c32ec
+    //If the addr is in the range of a mm's vma?
+    if (vma == NULL || vma->vm_start > addr) {
+c01063af:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c01063b3:	74 0b                	je     c01063c0 <do_pgfault+0x3c>
+c01063b5:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01063b8:	8b 40 04             	mov    0x4(%eax),%eax
+c01063bb:	3b 45 10             	cmp    0x10(%ebp),%eax
+c01063be:	76 18                	jbe    c01063d8 <do_pgfault+0x54>
+        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
+c01063c0:	83 ec 08             	sub    $0x8,%esp
+c01063c3:	ff 75 10             	pushl  0x10(%ebp)
+c01063c6:	68 88 e1 10 c0       	push   $0xc010e188
+c01063cb:	e8 be 9e ff ff       	call   c010028e <cprintf>
+c01063d0:	83 c4 10             	add    $0x10,%esp
+        goto failed;
+c01063d3:	e9 77 01 00 00       	jmp    c010654f <do_pgfault+0x1cb>
+    }
+    //check the error_code
+    switch (error_code & 3) {
+c01063d8:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01063db:	83 e0 03             	and    $0x3,%eax
+c01063de:	85 c0                	test   %eax,%eax
+c01063e0:	74 3c                	je     c010641e <do_pgfault+0x9a>
+c01063e2:	83 f8 01             	cmp    $0x1,%eax
+c01063e5:	74 22                	je     c0106409 <do_pgfault+0x85>
+    default:
+            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
+    case 2: /* error code flag : (W/R=1, P=0): write, not present */
+        if (!(vma->vm_flags & VM_WRITE)) {
+c01063e7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01063ea:	8b 40 0c             	mov    0xc(%eax),%eax
+c01063ed:	83 e0 02             	and    $0x2,%eax
+c01063f0:	85 c0                	test   %eax,%eax
+c01063f2:	75 4c                	jne    c0106440 <do_pgfault+0xbc>
+            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
+c01063f4:	83 ec 0c             	sub    $0xc,%esp
+c01063f7:	68 b8 e1 10 c0       	push   $0xc010e1b8
+c01063fc:	e8 8d 9e ff ff       	call   c010028e <cprintf>
+c0106401:	83 c4 10             	add    $0x10,%esp
+            goto failed;
+c0106404:	e9 46 01 00 00       	jmp    c010654f <do_pgfault+0x1cb>
+        }
+        break;
+    case 1: /* error code flag : (W/R=0, P=1): read, present */
+        cprintf("do_pgfault failed: error code flag = read AND present\n");
+c0106409:	83 ec 0c             	sub    $0xc,%esp
+c010640c:	68 18 e2 10 c0       	push   $0xc010e218
+c0106411:	e8 78 9e ff ff       	call   c010028e <cprintf>
+c0106416:	83 c4 10             	add    $0x10,%esp
+        goto failed;
+c0106419:	e9 31 01 00 00       	jmp    c010654f <do_pgfault+0x1cb>
+    case 0: /* error code flag : (W/R=0, P=0): read, not present */
+        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
+c010641e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0106421:	8b 40 0c             	mov    0xc(%eax),%eax
+c0106424:	83 e0 05             	and    $0x5,%eax
+c0106427:	85 c0                	test   %eax,%eax
+c0106429:	75 16                	jne    c0106441 <do_pgfault+0xbd>
+            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
+c010642b:	83 ec 0c             	sub    $0xc,%esp
+c010642e:	68 50 e2 10 c0       	push   $0xc010e250
+c0106433:	e8 56 9e ff ff       	call   c010028e <cprintf>
+c0106438:	83 c4 10             	add    $0x10,%esp
+            goto failed;
+c010643b:	e9 0f 01 00 00       	jmp    c010654f <do_pgfault+0x1cb>
+    case 2: /* error code flag : (W/R=1, P=0): write, not present */
+        if (!(vma->vm_flags & VM_WRITE)) {
+            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
+            goto failed;
+        }
+        break;
+c0106440:	90                   	nop
+     *    (write an non_existed addr && addr is writable) OR
+     *    (read  an non_existed addr && addr is readable)
+     * THEN
+     *    continue process
+     */
+    uint32_t perm = PTE_U;
+c0106441:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
+    if (vma->vm_flags & VM_WRITE) {
+c0106448:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010644b:	8b 40 0c             	mov    0xc(%eax),%eax
+c010644e:	83 e0 02             	and    $0x2,%eax
+c0106451:	85 c0                	test   %eax,%eax
+c0106453:	74 04                	je     c0106459 <do_pgfault+0xd5>
+        perm |= PTE_W;
+c0106455:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
+    }
+    addr = ROUNDDOWN(addr, PGSIZE);
+c0106459:	8b 45 10             	mov    0x10(%ebp),%eax
+c010645c:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010645f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0106462:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0106467:	89 45 10             	mov    %eax,0x10(%ebp)
+
+    ret = -E_NO_MEM;
+c010646a:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
+
+    pte_t *ptep=NULL;
+c0106471:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+    *   mm->pgdir : the PDT of these vma
+    *
+    */
+
+    /*LAB3 EXERCISE 1: 2013011371*/
+    ptep = get_pte(mm->pgdir, addr, 1);              //(1) try to find a pte, if pte's PT(Page Table) isn't existed, then create a PT.
+c0106478:	8b 45 08             	mov    0x8(%ebp),%eax
+c010647b:	8b 40 0c             	mov    0xc(%eax),%eax
+c010647e:	83 ec 04             	sub    $0x4,%esp
+c0106481:	6a 01                	push   $0x1
+c0106483:	ff 75 10             	pushl  0x10(%ebp)
+c0106486:	50                   	push   %eax
+c0106487:	e8 bf da ff ff       	call   c0103f4b <get_pte>
+c010648c:	83 c4 10             	add    $0x10,%esp
+c010648f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    if (*ptep == 0) {//(2) if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr
+c0106492:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0106495:	8b 00                	mov    (%eax),%eax
+c0106497:	85 c0                	test   %eax,%eax
+c0106499:	75 1d                	jne    c01064b8 <do_pgfault+0x134>
+    	pgdir_alloc_page(mm->pgdir, addr, perm);
+c010649b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010649e:	8b 40 0c             	mov    0xc(%eax),%eax
+c01064a1:	83 ec 04             	sub    $0x4,%esp
+c01064a4:	ff 75 f0             	pushl  -0x10(%ebp)
+c01064a7:	ff 75 10             	pushl  0x10(%ebp)
+c01064aa:	50                   	push   %eax
+c01064ab:	e8 66 e1 ff ff       	call   c0104616 <pgdir_alloc_page>
+c01064b0:	83 c4 10             	add    $0x10,%esp
+c01064b3:	e9 90 00 00 00       	jmp    c0106548 <do_pgfault+0x1c4>
+		     If the vma includes this addr is writable, then we can set the page writable by rewrite the *ptep.
+		     This method could be used to implement the Copy on Write (COW) thchnology(a fast fork process method).
+		  2) *ptep & PTE_P == 0 & but *ptep!=0, it means this pte is a  swap entry.
+		     We should add the LAB3's results here.
+     */
+        if(swap_init_ok) {
+c01064b8:	a1 f4 32 1c c0       	mov    0xc01c32f4,%eax
+c01064bd:	85 c0                	test   %eax,%eax
+c01064bf:	74 6f                	je     c0106530 <do_pgfault+0x1ac>
+            struct Page *page=NULL;
+c01064c1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+                                    //(1）According to the mm AND addr, try to load the content of right disk page
+                                    //    into the memory which page managed.
+                                    //(2) According to the mm, addr AND page, setup the map of phy addr <---> logical addr
+                                    //(3) make the page swappable.
+                                    //(4) [NOTICE]: you myabe need to update your lab3's implementation for LAB5's normal execution.
+            if ((ret = swap_in(mm, addr, &page)) != 0) {
+c01064c8:	83 ec 04             	sub    $0x4,%esp
+c01064cb:	8d 45 e0             	lea    -0x20(%ebp),%eax
+c01064ce:	50                   	push   %eax
+c01064cf:	ff 75 10             	pushl  0x10(%ebp)
+c01064d2:	ff 75 08             	pushl  0x8(%ebp)
+c01064d5:	e8 c5 0b 00 00       	call   c010709f <swap_in>
+c01064da:	83 c4 10             	add    $0x10,%esp
+c01064dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01064e0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01064e4:	74 12                	je     c01064f8 <do_pgfault+0x174>
+            	cprintf("swap_in in do_pgfault failed\n");
+c01064e6:	83 ec 0c             	sub    $0xc,%esp
+c01064e9:	68 b3 e2 10 c0       	push   $0xc010e2b3
+c01064ee:	e8 9b 9d ff ff       	call   c010028e <cprintf>
+c01064f3:	83 c4 10             	add    $0x10,%esp
+c01064f6:	eb 57                	jmp    c010654f <do_pgfault+0x1cb>
+            	goto failed;
+            }
+            page_insert(mm->pgdir, page, addr, perm);
+c01064f8:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c01064fb:	8b 45 08             	mov    0x8(%ebp),%eax
+c01064fe:	8b 40 0c             	mov    0xc(%eax),%eax
+c0106501:	ff 75 f0             	pushl  -0x10(%ebp)
+c0106504:	ff 75 10             	pushl  0x10(%ebp)
+c0106507:	52                   	push   %edx
+c0106508:	50                   	push   %eax
+c0106509:	e8 ff df ff ff       	call   c010450d <page_insert>
+c010650e:	83 c4 10             	add    $0x10,%esp
+            swap_map_swappable(mm, addr, page, 1);
+c0106511:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0106514:	6a 01                	push   $0x1
+c0106516:	50                   	push   %eax
+c0106517:	ff 75 10             	pushl  0x10(%ebp)
+c010651a:	ff 75 08             	pushl  0x8(%ebp)
+c010651d:	e8 ed 09 00 00       	call   c0106f0f <swap_map_swappable>
+c0106522:	83 c4 10             	add    $0x10,%esp
+            page->pra_vaddr = addr;
+c0106525:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0106528:	8b 55 10             	mov    0x10(%ebp),%edx
+c010652b:	89 50 1c             	mov    %edx,0x1c(%eax)
+c010652e:	eb 18                	jmp    c0106548 <do_pgfault+0x1c4>
+        }
+        else {
+            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
+c0106530:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0106533:	8b 00                	mov    (%eax),%eax
+c0106535:	83 ec 08             	sub    $0x8,%esp
+c0106538:	50                   	push   %eax
+c0106539:	68 d4 e2 10 c0       	push   $0xc010e2d4
+c010653e:	e8 4b 9d ff ff       	call   c010028e <cprintf>
+c0106543:	83 c4 10             	add    $0x10,%esp
+            goto failed;
+c0106546:	eb 07                	jmp    c010654f <do_pgfault+0x1cb>
+        }
+   }
+   ret = 0;
+c0106548:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+failed:
+    return ret;
+c010654f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0106552:	c9                   	leave  
+c0106553:	c3                   	ret    
+
+c0106554 <user_mem_check>:
+
+bool
+user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
+c0106554:	55                   	push   %ebp
+c0106555:	89 e5                	mov    %esp,%ebp
+c0106557:	83 ec 10             	sub    $0x10,%esp
+    if (mm != NULL) {
+c010655a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010655e:	0f 84 dc 00 00 00    	je     c0106640 <user_mem_check+0xec>
+        if (!USER_ACCESS(addr, addr + len)) {
+c0106564:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
+c010656b:	76 1c                	jbe    c0106589 <user_mem_check+0x35>
+c010656d:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0106570:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106573:	01 d0                	add    %edx,%eax
+c0106575:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0106578:	76 0f                	jbe    c0106589 <user_mem_check+0x35>
+c010657a:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010657d:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106580:	01 d0                	add    %edx,%eax
+c0106582:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
+c0106587:	76 0a                	jbe    c0106593 <user_mem_check+0x3f>
+            return 0;
+c0106589:	b8 00 00 00 00       	mov    $0x0,%eax
+c010658e:	e9 df 00 00 00       	jmp    c0106672 <user_mem_check+0x11e>
+        }
+        struct vma_struct *vma;
+        uintptr_t start = addr, end = addr + len;
+c0106593:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0106596:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c0106599:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010659c:	8b 45 10             	mov    0x10(%ebp),%eax
+c010659f:	01 d0                	add    %edx,%eax
+c01065a1:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        while (start < end) {
+c01065a4:	e9 84 00 00 00       	jmp    c010662d <user_mem_check+0xd9>
+            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
+c01065a9:	ff 75 fc             	pushl  -0x4(%ebp)
+c01065ac:	ff 75 08             	pushl  0x8(%ebp)
+c01065af:	e8 6e f1 ff ff       	call   c0105722 <find_vma>
+c01065b4:	83 c4 08             	add    $0x8,%esp
+c01065b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01065ba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01065be:	74 0b                	je     c01065cb <user_mem_check+0x77>
+c01065c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01065c3:	8b 40 04             	mov    0x4(%eax),%eax
+c01065c6:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+c01065c9:	76 0a                	jbe    c01065d5 <user_mem_check+0x81>
+                return 0;
+c01065cb:	b8 00 00 00 00       	mov    $0x0,%eax
+c01065d0:	e9 9d 00 00 00       	jmp    c0106672 <user_mem_check+0x11e>
+            }
+            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
+c01065d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01065d8:	8b 40 0c             	mov    0xc(%eax),%eax
+c01065db:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+c01065df:	74 07                	je     c01065e8 <user_mem_check+0x94>
+c01065e1:	ba 02 00 00 00       	mov    $0x2,%edx
+c01065e6:	eb 05                	jmp    c01065ed <user_mem_check+0x99>
+c01065e8:	ba 01 00 00 00       	mov    $0x1,%edx
+c01065ed:	21 d0                	and    %edx,%eax
+c01065ef:	85 c0                	test   %eax,%eax
+c01065f1:	75 07                	jne    c01065fa <user_mem_check+0xa6>
+                return 0;
+c01065f3:	b8 00 00 00 00       	mov    $0x0,%eax
+c01065f8:	eb 78                	jmp    c0106672 <user_mem_check+0x11e>
+            }
+            if (write && (vma->vm_flags & VM_STACK)) {
+c01065fa:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+c01065fe:	74 24                	je     c0106624 <user_mem_check+0xd0>
+c0106600:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106603:	8b 40 0c             	mov    0xc(%eax),%eax
+c0106606:	83 e0 08             	and    $0x8,%eax
+c0106609:	85 c0                	test   %eax,%eax
+c010660b:	74 17                	je     c0106624 <user_mem_check+0xd0>
+                if (start < vma->vm_start + PGSIZE) { //check stack start & size
+c010660d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106610:	8b 40 04             	mov    0x4(%eax),%eax
+c0106613:	05 00 10 00 00       	add    $0x1000,%eax
+c0106618:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+c010661b:	76 07                	jbe    c0106624 <user_mem_check+0xd0>
+                    return 0;
+c010661d:	b8 00 00 00 00       	mov    $0x0,%eax
+c0106622:	eb 4e                	jmp    c0106672 <user_mem_check+0x11e>
+                }
+            }
+            start = vma->vm_end;
+c0106624:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106627:	8b 40 08             	mov    0x8(%eax),%eax
+c010662a:	89 45 fc             	mov    %eax,-0x4(%ebp)
+        if (!USER_ACCESS(addr, addr + len)) {
+            return 0;
+        }
+        struct vma_struct *vma;
+        uintptr_t start = addr, end = addr + len;
+        while (start < end) {
+c010662d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0106630:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+c0106633:	0f 82 70 ff ff ff    	jb     c01065a9 <user_mem_check+0x55>
+                    return 0;
+                }
+            }
+            start = vma->vm_end;
+        }
+        return 1;
+c0106639:	b8 01 00 00 00       	mov    $0x1,%eax
+c010663e:	eb 32                	jmp    c0106672 <user_mem_check+0x11e>
+    }
+    return KERN_ACCESS(addr, addr + len);
+c0106640:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
+c0106647:	76 23                	jbe    c010666c <user_mem_check+0x118>
+c0106649:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010664c:	8b 45 10             	mov    0x10(%ebp),%eax
+c010664f:	01 d0                	add    %edx,%eax
+c0106651:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0106654:	76 16                	jbe    c010666c <user_mem_check+0x118>
+c0106656:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0106659:	8b 45 10             	mov    0x10(%ebp),%eax
+c010665c:	01 d0                	add    %edx,%eax
+c010665e:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
+c0106663:	77 07                	ja     c010666c <user_mem_check+0x118>
+c0106665:	b8 01 00 00 00       	mov    $0x1,%eax
+c010666a:	eb 05                	jmp    c0106671 <user_mem_check+0x11d>
+c010666c:	b8 00 00 00 00       	mov    $0x0,%eax
+c0106671:	90                   	nop
+}
+c0106672:	c9                   	leave  
+c0106673:	c3                   	ret    
+
+c0106674 <__intr_save>:
+#include <assert.h>
+#include <atomic.h>
+#include <sched.h>
+
+static inline bool
+__intr_save(void) {
+c0106674:	55                   	push   %ebp
+c0106675:	89 e5                	mov    %esp,%ebp
+c0106677:	83 ec 18             	sub    $0x18,%esp
+}
+
+static inline uint32_t
+read_eflags(void) {
+    uint32_t eflags;
+    asm volatile ("pushfl; popl %0" : "=r" (eflags));
+c010667a:	9c                   	pushf  
+c010667b:	58                   	pop    %eax
+c010667c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return eflags;
+c010667f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    if (read_eflags() & FL_IF) {
+c0106682:	25 00 02 00 00       	and    $0x200,%eax
+c0106687:	85 c0                	test   %eax,%eax
+c0106689:	74 0c                	je     c0106697 <__intr_save+0x23>
+        intr_disable();
+c010668b:	e8 01 bb ff ff       	call   c0102191 <intr_disable>
+        return 1;
+c0106690:	b8 01 00 00 00       	mov    $0x1,%eax
+c0106695:	eb 05                	jmp    c010669c <__intr_save+0x28>
+    }
+    return 0;
+c0106697:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010669c:	c9                   	leave  
+c010669d:	c3                   	ret    
+
+c010669e <__intr_restore>:
+
+static inline void
+__intr_restore(bool flag) {
+c010669e:	55                   	push   %ebp
+c010669f:	89 e5                	mov    %esp,%ebp
+c01066a1:	83 ec 08             	sub    $0x8,%esp
+    if (flag) {
+c01066a4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c01066a8:	74 05                	je     c01066af <__intr_restore+0x11>
+        intr_enable();
+c01066aa:	e8 db ba ff ff       	call   c010218a <intr_enable>
+    }
+}
+c01066af:	90                   	nop
+c01066b0:	c9                   	leave  
+c01066b1:	c3                   	ret    
+
+c01066b2 <page2ppn>:
+
+extern struct Page *pages;
+extern size_t npage;
+
+static inline ppn_t
+page2ppn(struct Page *page) {
+c01066b2:	55                   	push   %ebp
+c01066b3:	89 e5                	mov    %esp,%ebp
+    return page - pages;
+c01066b5:	8b 45 08             	mov    0x8(%ebp),%eax
+c01066b8:	8b 15 a4 53 1c c0    	mov    0xc01c53a4,%edx
+c01066be:	29 d0                	sub    %edx,%eax
+c01066c0:	c1 f8 05             	sar    $0x5,%eax
+}
+c01066c3:	5d                   	pop    %ebp
+c01066c4:	c3                   	ret    
+
+c01066c5 <page2pa>:
+
+static inline uintptr_t
+page2pa(struct Page *page) {
+c01066c5:	55                   	push   %ebp
+c01066c6:	89 e5                	mov    %esp,%ebp
+    return page2ppn(page) << PGSHIFT;
+c01066c8:	ff 75 08             	pushl  0x8(%ebp)
+c01066cb:	e8 e2 ff ff ff       	call   c01066b2 <page2ppn>
+c01066d0:	83 c4 04             	add    $0x4,%esp
+c01066d3:	c1 e0 0c             	shl    $0xc,%eax
+}
+c01066d6:	c9                   	leave  
+c01066d7:	c3                   	ret    
+
+c01066d8 <pa2page>:
+
+static inline struct Page *
+pa2page(uintptr_t pa) {
+c01066d8:	55                   	push   %ebp
+c01066d9:	89 e5                	mov    %esp,%ebp
+c01066db:	83 ec 08             	sub    $0x8,%esp
+    if (PPN(pa) >= npage) {
+c01066de:	8b 45 08             	mov    0x8(%ebp),%eax
+c01066e1:	c1 e8 0c             	shr    $0xc,%eax
+c01066e4:	89 c2                	mov    %eax,%edx
+c01066e6:	a1 60 32 1c c0       	mov    0xc01c3260,%eax
+c01066eb:	39 c2                	cmp    %eax,%edx
+c01066ed:	72 14                	jb     c0106703 <pa2page+0x2b>
+        panic("pa2page called with invalid pa");
+c01066ef:	83 ec 04             	sub    $0x4,%esp
+c01066f2:	68 fc e2 10 c0       	push   $0xc010e2fc
+c01066f7:	6a 5e                	push   $0x5e
+c01066f9:	68 1b e3 10 c0       	push   $0xc010e31b
+c01066fe:	e8 f1 9c ff ff       	call   c01003f4 <__panic>
+    }
+    return &pages[PPN(pa)];
+c0106703:	a1 a4 53 1c c0       	mov    0xc01c53a4,%eax
+c0106708:	8b 55 08             	mov    0x8(%ebp),%edx
+c010670b:	c1 ea 0c             	shr    $0xc,%edx
+c010670e:	c1 e2 05             	shl    $0x5,%edx
+c0106711:	01 d0                	add    %edx,%eax
+}
+c0106713:	c9                   	leave  
+c0106714:	c3                   	ret    
+
+c0106715 <page2kva>:
+
+static inline void *
+page2kva(struct Page *page) {
+c0106715:	55                   	push   %ebp
+c0106716:	89 e5                	mov    %esp,%ebp
+c0106718:	83 ec 18             	sub    $0x18,%esp
+    return KADDR(page2pa(page));
+c010671b:	ff 75 08             	pushl  0x8(%ebp)
+c010671e:	e8 a2 ff ff ff       	call   c01066c5 <page2pa>
+c0106723:	83 c4 04             	add    $0x4,%esp
+c0106726:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0106729:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010672c:	c1 e8 0c             	shr    $0xc,%eax
+c010672f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0106732:	a1 60 32 1c c0       	mov    0xc01c3260,%eax
+c0106737:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c010673a:	72 14                	jb     c0106750 <page2kva+0x3b>
+c010673c:	ff 75 f4             	pushl  -0xc(%ebp)
+c010673f:	68 2c e3 10 c0       	push   $0xc010e32c
+c0106744:	6a 65                	push   $0x65
+c0106746:	68 1b e3 10 c0       	push   $0xc010e31b
+c010674b:	e8 a4 9c ff ff       	call   c01003f4 <__panic>
+c0106750:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106753:	2d 00 00 00 40       	sub    $0x40000000,%eax
+}
+c0106758:	c9                   	leave  
+c0106759:	c3                   	ret    
+
+c010675a <kva2page>:
+
+static inline struct Page *
+kva2page(void *kva) {
+c010675a:	55                   	push   %ebp
+c010675b:	89 e5                	mov    %esp,%ebp
+c010675d:	83 ec 18             	sub    $0x18,%esp
+    return pa2page(PADDR(kva));
+c0106760:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106763:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0106766:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
+c010676d:	77 14                	ja     c0106783 <kva2page+0x29>
+c010676f:	ff 75 f4             	pushl  -0xc(%ebp)
+c0106772:	68 50 e3 10 c0       	push   $0xc010e350
+c0106777:	6a 6a                	push   $0x6a
+c0106779:	68 1b e3 10 c0       	push   $0xc010e31b
+c010677e:	e8 71 9c ff ff       	call   c01003f4 <__panic>
+c0106783:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106786:	05 00 00 00 40       	add    $0x40000000,%eax
+c010678b:	83 ec 0c             	sub    $0xc,%esp
+c010678e:	50                   	push   %eax
+c010678f:	e8 44 ff ff ff       	call   c01066d8 <pa2page>
+c0106794:	83 c4 10             	add    $0x10,%esp
+}
+c0106797:	c9                   	leave  
+c0106798:	c3                   	ret    
+
+c0106799 <__slob_get_free_pages>:
+static slob_t *slobfree = &arena;
+static bigblock_t *bigblocks;
+
+
+static void* __slob_get_free_pages(gfp_t gfp, int order)
+{
+c0106799:	55                   	push   %ebp
+c010679a:	89 e5                	mov    %esp,%ebp
+c010679c:	83 ec 18             	sub    $0x18,%esp
+  struct Page * page = alloc_pages(1 << order);
+c010679f:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01067a2:	ba 01 00 00 00       	mov    $0x1,%edx
+c01067a7:	89 c1                	mov    %eax,%ecx
+c01067a9:	d3 e2                	shl    %cl,%edx
+c01067ab:	89 d0                	mov    %edx,%eax
+c01067ad:	83 ec 0c             	sub    $0xc,%esp
+c01067b0:	50                   	push   %eax
+c01067b1:	e8 aa d0 ff ff       	call   c0103860 <alloc_pages>
+c01067b6:	83 c4 10             	add    $0x10,%esp
+c01067b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  if(!page)
+c01067bc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01067c0:	75 07                	jne    c01067c9 <__slob_get_free_pages+0x30>
+    return NULL;
+c01067c2:	b8 00 00 00 00       	mov    $0x0,%eax
+c01067c7:	eb 0e                	jmp    c01067d7 <__slob_get_free_pages+0x3e>
+  return page2kva(page);
+c01067c9:	83 ec 0c             	sub    $0xc,%esp
+c01067cc:	ff 75 f4             	pushl  -0xc(%ebp)
+c01067cf:	e8 41 ff ff ff       	call   c0106715 <page2kva>
+c01067d4:	83 c4 10             	add    $0x10,%esp
+}
+c01067d7:	c9                   	leave  
+c01067d8:	c3                   	ret    
+
+c01067d9 <__slob_free_pages>:
+
+#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)
+
+static inline void __slob_free_pages(unsigned long kva, int order)
+{
+c01067d9:	55                   	push   %ebp
+c01067da:	89 e5                	mov    %esp,%ebp
+c01067dc:	53                   	push   %ebx
+c01067dd:	83 ec 04             	sub    $0x4,%esp
+  free_pages(kva2page(kva), 1 << order);
+c01067e0:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01067e3:	ba 01 00 00 00       	mov    $0x1,%edx
+c01067e8:	89 c1                	mov    %eax,%ecx
+c01067ea:	d3 e2                	shl    %cl,%edx
+c01067ec:	89 d0                	mov    %edx,%eax
+c01067ee:	89 c3                	mov    %eax,%ebx
+c01067f0:	8b 45 08             	mov    0x8(%ebp),%eax
+c01067f3:	83 ec 0c             	sub    $0xc,%esp
+c01067f6:	50                   	push   %eax
+c01067f7:	e8 5e ff ff ff       	call   c010675a <kva2page>
+c01067fc:	83 c4 10             	add    $0x10,%esp
+c01067ff:	83 ec 08             	sub    $0x8,%esp
+c0106802:	53                   	push   %ebx
+c0106803:	50                   	push   %eax
+c0106804:	e8 c3 d0 ff ff       	call   c01038cc <free_pages>
+c0106809:	83 c4 10             	add    $0x10,%esp
+}
+c010680c:	90                   	nop
+c010680d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+c0106810:	c9                   	leave  
+c0106811:	c3                   	ret    
+
+c0106812 <slob_alloc>:
+
+static void slob_free(void *b, int size);
+
+static void *slob_alloc(size_t size, gfp_t gfp, int align)
+{
+c0106812:	55                   	push   %ebp
+c0106813:	89 e5                	mov    %esp,%ebp
+c0106815:	83 ec 28             	sub    $0x28,%esp
+  assert( (size + SLOB_UNIT) < PAGE_SIZE );
+c0106818:	8b 45 08             	mov    0x8(%ebp),%eax
+c010681b:	83 c0 08             	add    $0x8,%eax
+c010681e:	3d ff 0f 00 00       	cmp    $0xfff,%eax
+c0106823:	76 16                	jbe    c010683b <slob_alloc+0x29>
+c0106825:	68 74 e3 10 c0       	push   $0xc010e374
+c010682a:	68 93 e3 10 c0       	push   $0xc010e393
+c010682f:	6a 64                	push   $0x64
+c0106831:	68 a8 e3 10 c0       	push   $0xc010e3a8
+c0106836:	e8 b9 9b ff ff       	call   c01003f4 <__panic>
+
+	slob_t *prev, *cur, *aligned = 0;
+c010683b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+	int delta = 0, units = SLOB_UNITS(size);
+c0106842:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+c0106849:	8b 45 08             	mov    0x8(%ebp),%eax
+c010684c:	83 c0 07             	add    $0x7,%eax
+c010684f:	c1 e8 03             	shr    $0x3,%eax
+c0106852:	89 45 e0             	mov    %eax,-0x20(%ebp)
+	unsigned long flags;
+
+	spin_lock_irqsave(&slob_lock, flags);
+c0106855:	e8 1a fe ff ff       	call   c0106674 <__intr_save>
+c010685a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+	prev = slobfree;
+c010685d:	a1 68 1a 13 c0       	mov    0xc0131a68,%eax
+c0106862:	89 45 f4             	mov    %eax,-0xc(%ebp)
+	for (cur = prev->next; ; prev = cur, cur = cur->next) {
+c0106865:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106868:	8b 40 04             	mov    0x4(%eax),%eax
+c010686b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+		if (align) {
+c010686e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c0106872:	74 25                	je     c0106899 <slob_alloc+0x87>
+			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
+c0106874:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0106877:	8b 45 10             	mov    0x10(%ebp),%eax
+c010687a:	01 d0                	add    %edx,%eax
+c010687c:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010687f:	8b 45 10             	mov    0x10(%ebp),%eax
+c0106882:	f7 d8                	neg    %eax
+c0106884:	21 d0                	and    %edx,%eax
+c0106886:	89 45 ec             	mov    %eax,-0x14(%ebp)
+			delta = aligned - cur;
+c0106889:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010688c:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010688f:	29 c2                	sub    %eax,%edx
+c0106891:	89 d0                	mov    %edx,%eax
+c0106893:	c1 f8 03             	sar    $0x3,%eax
+c0106896:	89 45 e8             	mov    %eax,-0x18(%ebp)
+		}
+		if (cur->units >= units + delta) { /* room enough? */
+c0106899:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010689c:	8b 00                	mov    (%eax),%eax
+c010689e:	8b 4d e0             	mov    -0x20(%ebp),%ecx
+c01068a1:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c01068a4:	01 ca                	add    %ecx,%edx
+c01068a6:	39 d0                	cmp    %edx,%eax
+c01068a8:	0f 8c b1 00 00 00    	jl     c010695f <slob_alloc+0x14d>
+			if (delta) { /* need to fragment head to align? */
+c01068ae:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c01068b2:	74 38                	je     c01068ec <slob_alloc+0xda>
+				aligned->units = cur->units - delta;
+c01068b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01068b7:	8b 00                	mov    (%eax),%eax
+c01068b9:	2b 45 e8             	sub    -0x18(%ebp),%eax
+c01068bc:	89 c2                	mov    %eax,%edx
+c01068be:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01068c1:	89 10                	mov    %edx,(%eax)
+				aligned->next = cur->next;
+c01068c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01068c6:	8b 50 04             	mov    0x4(%eax),%edx
+c01068c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01068cc:	89 50 04             	mov    %edx,0x4(%eax)
+				cur->next = aligned;
+c01068cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01068d2:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c01068d5:	89 50 04             	mov    %edx,0x4(%eax)
+				cur->units = delta;
+c01068d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01068db:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c01068de:	89 10                	mov    %edx,(%eax)
+				prev = cur;
+c01068e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01068e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+				cur = aligned;
+c01068e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01068e9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+			}
+
+			if (cur->units == units) /* exact fit? */
+c01068ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01068ef:	8b 00                	mov    (%eax),%eax
+c01068f1:	3b 45 e0             	cmp    -0x20(%ebp),%eax
+c01068f4:	75 0e                	jne    c0106904 <slob_alloc+0xf2>
+				prev->next = cur->next; /* unlink */
+c01068f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01068f9:	8b 50 04             	mov    0x4(%eax),%edx
+c01068fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01068ff:	89 50 04             	mov    %edx,0x4(%eax)
+c0106902:	eb 3c                	jmp    c0106940 <slob_alloc+0x12e>
+			else { /* fragment */
+				prev->next = cur + units;
+c0106904:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0106907:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c010690e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106911:	01 c2                	add    %eax,%edx
+c0106913:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106916:	89 50 04             	mov    %edx,0x4(%eax)
+				prev->next->units = cur->units - units;
+c0106919:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010691c:	8b 40 04             	mov    0x4(%eax),%eax
+c010691f:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0106922:	8b 12                	mov    (%edx),%edx
+c0106924:	2b 55 e0             	sub    -0x20(%ebp),%edx
+c0106927:	89 10                	mov    %edx,(%eax)
+				prev->next->next = cur->next;
+c0106929:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010692c:	8b 40 04             	mov    0x4(%eax),%eax
+c010692f:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0106932:	8b 52 04             	mov    0x4(%edx),%edx
+c0106935:	89 50 04             	mov    %edx,0x4(%eax)
+				cur->units = units;
+c0106938:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010693b:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c010693e:	89 10                	mov    %edx,(%eax)
+			}
+
+			slobfree = prev;
+c0106940:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106943:	a3 68 1a 13 c0       	mov    %eax,0xc0131a68
+			spin_unlock_irqrestore(&slob_lock, flags);
+c0106948:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010694b:	83 ec 0c             	sub    $0xc,%esp
+c010694e:	50                   	push   %eax
+c010694f:	e8 4a fd ff ff       	call   c010669e <__intr_restore>
+c0106954:	83 c4 10             	add    $0x10,%esp
+			return cur;
+c0106957:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010695a:	e9 80 00 00 00       	jmp    c01069df <slob_alloc+0x1cd>
+		}
+		if (cur == slobfree) {
+c010695f:	a1 68 1a 13 c0       	mov    0xc0131a68,%eax
+c0106964:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c0106967:	75 62                	jne    c01069cb <slob_alloc+0x1b9>
+			spin_unlock_irqrestore(&slob_lock, flags);
+c0106969:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010696c:	83 ec 0c             	sub    $0xc,%esp
+c010696f:	50                   	push   %eax
+c0106970:	e8 29 fd ff ff       	call   c010669e <__intr_restore>
+c0106975:	83 c4 10             	add    $0x10,%esp
+
+			if (size == PAGE_SIZE) /* trying to shrink arena? */
+c0106978:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
+c010697f:	75 07                	jne    c0106988 <slob_alloc+0x176>
+				return 0;
+c0106981:	b8 00 00 00 00       	mov    $0x0,%eax
+c0106986:	eb 57                	jmp    c01069df <slob_alloc+0x1cd>
+
+			cur = (slob_t *)__slob_get_free_page(gfp);
+c0106988:	83 ec 08             	sub    $0x8,%esp
+c010698b:	6a 00                	push   $0x0
+c010698d:	ff 75 0c             	pushl  0xc(%ebp)
+c0106990:	e8 04 fe ff ff       	call   c0106799 <__slob_get_free_pages>
+c0106995:	83 c4 10             	add    $0x10,%esp
+c0106998:	89 45 f0             	mov    %eax,-0x10(%ebp)
+			if (!cur)
+c010699b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010699f:	75 07                	jne    c01069a8 <slob_alloc+0x196>
+				return 0;
+c01069a1:	b8 00 00 00 00       	mov    $0x0,%eax
+c01069a6:	eb 37                	jmp    c01069df <slob_alloc+0x1cd>
+
+			slob_free(cur, PAGE_SIZE);
+c01069a8:	83 ec 08             	sub    $0x8,%esp
+c01069ab:	68 00 10 00 00       	push   $0x1000
+c01069b0:	ff 75 f0             	pushl  -0x10(%ebp)
+c01069b3:	e8 29 00 00 00       	call   c01069e1 <slob_free>
+c01069b8:	83 c4 10             	add    $0x10,%esp
+			spin_lock_irqsave(&slob_lock, flags);
+c01069bb:	e8 b4 fc ff ff       	call   c0106674 <__intr_save>
+c01069c0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+			cur = slobfree;
+c01069c3:	a1 68 1a 13 c0       	mov    0xc0131a68,%eax
+c01069c8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+	int delta = 0, units = SLOB_UNITS(size);
+	unsigned long flags;
+
+	spin_lock_irqsave(&slob_lock, flags);
+	prev = slobfree;
+	for (cur = prev->next; ; prev = cur, cur = cur->next) {
+c01069cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01069ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01069d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01069d4:	8b 40 04             	mov    0x4(%eax),%eax
+c01069d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+
+			slob_free(cur, PAGE_SIZE);
+			spin_lock_irqsave(&slob_lock, flags);
+			cur = slobfree;
+		}
+	}
+c01069da:	e9 8f fe ff ff       	jmp    c010686e <slob_alloc+0x5c>
+}
+c01069df:	c9                   	leave  
+c01069e0:	c3                   	ret    
+
+c01069e1 <slob_free>:
+
+static void slob_free(void *block, int size)
+{
+c01069e1:	55                   	push   %ebp
+c01069e2:	89 e5                	mov    %esp,%ebp
+c01069e4:	83 ec 18             	sub    $0x18,%esp
+	slob_t *cur, *b = (slob_t *)block;
+c01069e7:	8b 45 08             	mov    0x8(%ebp),%eax
+c01069ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
+	unsigned long flags;
+
+	if (!block)
+c01069ed:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c01069f1:	0f 84 05 01 00 00    	je     c0106afc <slob_free+0x11b>
+		return;
+
+	if (size)
+c01069f7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c01069fb:	74 10                	je     c0106a0d <slob_free+0x2c>
+		b->units = SLOB_UNITS(size);
+c01069fd:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0106a00:	83 c0 07             	add    $0x7,%eax
+c0106a03:	c1 e8 03             	shr    $0x3,%eax
+c0106a06:	89 c2                	mov    %eax,%edx
+c0106a08:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106a0b:	89 10                	mov    %edx,(%eax)
+
+	/* Find reinsertion point */
+	spin_lock_irqsave(&slob_lock, flags);
+c0106a0d:	e8 62 fc ff ff       	call   c0106674 <__intr_save>
+c0106a12:	89 45 ec             	mov    %eax,-0x14(%ebp)
+	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
+c0106a15:	a1 68 1a 13 c0       	mov    0xc0131a68,%eax
+c0106a1a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0106a1d:	eb 27                	jmp    c0106a46 <slob_free+0x65>
+		if (cur >= cur->next && (b > cur || b < cur->next))
+c0106a1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106a22:	8b 40 04             	mov    0x4(%eax),%eax
+c0106a25:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0106a28:	77 13                	ja     c0106a3d <slob_free+0x5c>
+c0106a2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106a2d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0106a30:	77 27                	ja     c0106a59 <slob_free+0x78>
+c0106a32:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106a35:	8b 40 04             	mov    0x4(%eax),%eax
+c0106a38:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c0106a3b:	77 1c                	ja     c0106a59 <slob_free+0x78>
+	if (size)
+		b->units = SLOB_UNITS(size);
+
+	/* Find reinsertion point */
+	spin_lock_irqsave(&slob_lock, flags);
+	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
+c0106a3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106a40:	8b 40 04             	mov    0x4(%eax),%eax
+c0106a43:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0106a46:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106a49:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0106a4c:	76 d1                	jbe    c0106a1f <slob_free+0x3e>
+c0106a4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106a51:	8b 40 04             	mov    0x4(%eax),%eax
+c0106a54:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c0106a57:	76 c6                	jbe    c0106a1f <slob_free+0x3e>
+		if (cur >= cur->next && (b > cur || b < cur->next))
+			break;
+
+	if (b + b->units == cur->next) {
+c0106a59:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106a5c:	8b 00                	mov    (%eax),%eax
+c0106a5e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0106a65:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106a68:	01 c2                	add    %eax,%edx
+c0106a6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106a6d:	8b 40 04             	mov    0x4(%eax),%eax
+c0106a70:	39 c2                	cmp    %eax,%edx
+c0106a72:	75 25                	jne    c0106a99 <slob_free+0xb8>
+		b->units += cur->next->units;
+c0106a74:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106a77:	8b 10                	mov    (%eax),%edx
+c0106a79:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106a7c:	8b 40 04             	mov    0x4(%eax),%eax
+c0106a7f:	8b 00                	mov    (%eax),%eax
+c0106a81:	01 c2                	add    %eax,%edx
+c0106a83:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106a86:	89 10                	mov    %edx,(%eax)
+		b->next = cur->next->next;
+c0106a88:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106a8b:	8b 40 04             	mov    0x4(%eax),%eax
+c0106a8e:	8b 50 04             	mov    0x4(%eax),%edx
+c0106a91:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106a94:	89 50 04             	mov    %edx,0x4(%eax)
+c0106a97:	eb 0c                	jmp    c0106aa5 <slob_free+0xc4>
+	} else
+		b->next = cur->next;
+c0106a99:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106a9c:	8b 50 04             	mov    0x4(%eax),%edx
+c0106a9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106aa2:	89 50 04             	mov    %edx,0x4(%eax)
+
+	if (cur + cur->units == b) {
+c0106aa5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106aa8:	8b 00                	mov    (%eax),%eax
+c0106aaa:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
+c0106ab1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106ab4:	01 d0                	add    %edx,%eax
+c0106ab6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c0106ab9:	75 1f                	jne    c0106ada <slob_free+0xf9>
+		cur->units += b->units;
+c0106abb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106abe:	8b 10                	mov    (%eax),%edx
+c0106ac0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106ac3:	8b 00                	mov    (%eax),%eax
+c0106ac5:	01 c2                	add    %eax,%edx
+c0106ac7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106aca:	89 10                	mov    %edx,(%eax)
+		cur->next = b->next;
+c0106acc:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106acf:	8b 50 04             	mov    0x4(%eax),%edx
+c0106ad2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106ad5:	89 50 04             	mov    %edx,0x4(%eax)
+c0106ad8:	eb 09                	jmp    c0106ae3 <slob_free+0x102>
+	} else
+		cur->next = b;
+c0106ada:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106add:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0106ae0:	89 50 04             	mov    %edx,0x4(%eax)
+
+	slobfree = cur;
+c0106ae3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106ae6:	a3 68 1a 13 c0       	mov    %eax,0xc0131a68
+
+	spin_unlock_irqrestore(&slob_lock, flags);
+c0106aeb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0106aee:	83 ec 0c             	sub    $0xc,%esp
+c0106af1:	50                   	push   %eax
+c0106af2:	e8 a7 fb ff ff       	call   c010669e <__intr_restore>
+c0106af7:	83 c4 10             	add    $0x10,%esp
+c0106afa:	eb 01                	jmp    c0106afd <slob_free+0x11c>
+{
+	slob_t *cur, *b = (slob_t *)block;
+	unsigned long flags;
+
+	if (!block)
+		return;
+c0106afc:	90                   	nop
+		cur->next = b;
+
+	slobfree = cur;
+
+	spin_unlock_irqrestore(&slob_lock, flags);
+}
+c0106afd:	c9                   	leave  
+c0106afe:	c3                   	ret    
+
+c0106aff <slob_init>:
+
+
+
+void
+slob_init(void) {
+c0106aff:	55                   	push   %ebp
+c0106b00:	89 e5                	mov    %esp,%ebp
+c0106b02:	83 ec 08             	sub    $0x8,%esp
+  cprintf("use SLOB allocator\n");
+c0106b05:	83 ec 0c             	sub    $0xc,%esp
+c0106b08:	68 ba e3 10 c0       	push   $0xc010e3ba
+c0106b0d:	e8 7c 97 ff ff       	call   c010028e <cprintf>
+c0106b12:	83 c4 10             	add    $0x10,%esp
+}
+c0106b15:	90                   	nop
+c0106b16:	c9                   	leave  
+c0106b17:	c3                   	ret    
+
+c0106b18 <kmalloc_init>:
+
+inline void 
+kmalloc_init(void) {
+c0106b18:	55                   	push   %ebp
+c0106b19:	89 e5                	mov    %esp,%ebp
+c0106b1b:	83 ec 08             	sub    $0x8,%esp
+    slob_init();
+c0106b1e:	e8 dc ff ff ff       	call   c0106aff <slob_init>
+    cprintf("kmalloc_init() succeeded!\n");
+c0106b23:	83 ec 0c             	sub    $0xc,%esp
+c0106b26:	68 ce e3 10 c0       	push   $0xc010e3ce
+c0106b2b:	e8 5e 97 ff ff       	call   c010028e <cprintf>
+c0106b30:	83 c4 10             	add    $0x10,%esp
+}
+c0106b33:	90                   	nop
+c0106b34:	c9                   	leave  
+c0106b35:	c3                   	ret    
+
+c0106b36 <slob_allocated>:
+
+size_t
+slob_allocated(void) {
+c0106b36:	55                   	push   %ebp
+c0106b37:	89 e5                	mov    %esp,%ebp
+  return 0;
+c0106b39:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0106b3e:	5d                   	pop    %ebp
+c0106b3f:	c3                   	ret    
+
+c0106b40 <kallocated>:
+
+size_t
+kallocated(void) {
+c0106b40:	55                   	push   %ebp
+c0106b41:	89 e5                	mov    %esp,%ebp
+   return slob_allocated();
+c0106b43:	e8 ee ff ff ff       	call   c0106b36 <slob_allocated>
+}
+c0106b48:	5d                   	pop    %ebp
+c0106b49:	c3                   	ret    
+
+c0106b4a <find_order>:
+
+static int find_order(int size)
+{
+c0106b4a:	55                   	push   %ebp
+c0106b4b:	89 e5                	mov    %esp,%ebp
+c0106b4d:	83 ec 10             	sub    $0x10,%esp
+	int order = 0;
+c0106b50:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+	for ( ; size > 4096 ; size >>=1)
+c0106b57:	eb 07                	jmp    c0106b60 <find_order+0x16>
+		order++;
+c0106b59:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+}
+
+static int find_order(int size)
+{
+	int order = 0;
+	for ( ; size > 4096 ; size >>=1)
+c0106b5d:	d1 7d 08             	sarl   0x8(%ebp)
+c0106b60:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
+c0106b67:	7f f0                	jg     c0106b59 <find_order+0xf>
+		order++;
+	return order;
+c0106b69:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+c0106b6c:	c9                   	leave  
+c0106b6d:	c3                   	ret    
+
+c0106b6e <__kmalloc>:
+
+static void *__kmalloc(size_t size, gfp_t gfp)
+{
+c0106b6e:	55                   	push   %ebp
+c0106b6f:	89 e5                	mov    %esp,%ebp
+c0106b71:	83 ec 18             	sub    $0x18,%esp
+	slob_t *m;
+	bigblock_t *bb;
+	unsigned long flags;
+
+	if (size < PAGE_SIZE - SLOB_UNIT) {
+c0106b74:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
+c0106b7b:	77 35                	ja     c0106bb2 <__kmalloc+0x44>
+		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
+c0106b7d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106b80:	83 c0 08             	add    $0x8,%eax
+c0106b83:	83 ec 04             	sub    $0x4,%esp
+c0106b86:	6a 00                	push   $0x0
+c0106b88:	ff 75 0c             	pushl  0xc(%ebp)
+c0106b8b:	50                   	push   %eax
+c0106b8c:	e8 81 fc ff ff       	call   c0106812 <slob_alloc>
+c0106b91:	83 c4 10             	add    $0x10,%esp
+c0106b94:	89 45 f4             	mov    %eax,-0xc(%ebp)
+		return m ? (void *)(m + 1) : 0;
+c0106b97:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0106b9b:	74 0b                	je     c0106ba8 <__kmalloc+0x3a>
+c0106b9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106ba0:	83 c0 08             	add    $0x8,%eax
+c0106ba3:	e9 b3 00 00 00       	jmp    c0106c5b <__kmalloc+0xed>
+c0106ba8:	b8 00 00 00 00       	mov    $0x0,%eax
+c0106bad:	e9 a9 00 00 00       	jmp    c0106c5b <__kmalloc+0xed>
+	}
+
+	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
+c0106bb2:	83 ec 04             	sub    $0x4,%esp
+c0106bb5:	6a 00                	push   $0x0
+c0106bb7:	ff 75 0c             	pushl  0xc(%ebp)
+c0106bba:	6a 0c                	push   $0xc
+c0106bbc:	e8 51 fc ff ff       	call   c0106812 <slob_alloc>
+c0106bc1:	83 c4 10             	add    $0x10,%esp
+c0106bc4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+	if (!bb)
+c0106bc7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0106bcb:	75 0a                	jne    c0106bd7 <__kmalloc+0x69>
+		return 0;
+c0106bcd:	b8 00 00 00 00       	mov    $0x0,%eax
+c0106bd2:	e9 84 00 00 00       	jmp    c0106c5b <__kmalloc+0xed>
+
+	bb->order = find_order(size);
+c0106bd7:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106bda:	83 ec 0c             	sub    $0xc,%esp
+c0106bdd:	50                   	push   %eax
+c0106bde:	e8 67 ff ff ff       	call   c0106b4a <find_order>
+c0106be3:	83 c4 10             	add    $0x10,%esp
+c0106be6:	89 c2                	mov    %eax,%edx
+c0106be8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106beb:	89 10                	mov    %edx,(%eax)
+	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
+c0106bed:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106bf0:	8b 00                	mov    (%eax),%eax
+c0106bf2:	83 ec 08             	sub    $0x8,%esp
+c0106bf5:	50                   	push   %eax
+c0106bf6:	ff 75 0c             	pushl  0xc(%ebp)
+c0106bf9:	e8 9b fb ff ff       	call   c0106799 <__slob_get_free_pages>
+c0106bfe:	83 c4 10             	add    $0x10,%esp
+c0106c01:	89 c2                	mov    %eax,%edx
+c0106c03:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106c06:	89 50 04             	mov    %edx,0x4(%eax)
+
+	if (bb->pages) {
+c0106c09:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106c0c:	8b 40 04             	mov    0x4(%eax),%eax
+c0106c0f:	85 c0                	test   %eax,%eax
+c0106c11:	74 33                	je     c0106c46 <__kmalloc+0xd8>
+		spin_lock_irqsave(&block_lock, flags);
+c0106c13:	e8 5c fa ff ff       	call   c0106674 <__intr_save>
+c0106c18:	89 45 ec             	mov    %eax,-0x14(%ebp)
+		bb->next = bigblocks;
+c0106c1b:	8b 15 f0 32 1c c0    	mov    0xc01c32f0,%edx
+c0106c21:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106c24:	89 50 08             	mov    %edx,0x8(%eax)
+		bigblocks = bb;
+c0106c27:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106c2a:	a3 f0 32 1c c0       	mov    %eax,0xc01c32f0
+		spin_unlock_irqrestore(&block_lock, flags);
+c0106c2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0106c32:	83 ec 0c             	sub    $0xc,%esp
+c0106c35:	50                   	push   %eax
+c0106c36:	e8 63 fa ff ff       	call   c010669e <__intr_restore>
+c0106c3b:	83 c4 10             	add    $0x10,%esp
+		return bb->pages;
+c0106c3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106c41:	8b 40 04             	mov    0x4(%eax),%eax
+c0106c44:	eb 15                	jmp    c0106c5b <__kmalloc+0xed>
+	}
+
+	slob_free(bb, sizeof(bigblock_t));
+c0106c46:	83 ec 08             	sub    $0x8,%esp
+c0106c49:	6a 0c                	push   $0xc
+c0106c4b:	ff 75 f0             	pushl  -0x10(%ebp)
+c0106c4e:	e8 8e fd ff ff       	call   c01069e1 <slob_free>
+c0106c53:	83 c4 10             	add    $0x10,%esp
+	return 0;
+c0106c56:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0106c5b:	c9                   	leave  
+c0106c5c:	c3                   	ret    
+
+c0106c5d <kmalloc>:
+
+void *
+kmalloc(size_t size)
+{
+c0106c5d:	55                   	push   %ebp
+c0106c5e:	89 e5                	mov    %esp,%ebp
+c0106c60:	83 ec 08             	sub    $0x8,%esp
+  return __kmalloc(size, 0);
+c0106c63:	83 ec 08             	sub    $0x8,%esp
+c0106c66:	6a 00                	push   $0x0
+c0106c68:	ff 75 08             	pushl  0x8(%ebp)
+c0106c6b:	e8 fe fe ff ff       	call   c0106b6e <__kmalloc>
+c0106c70:	83 c4 10             	add    $0x10,%esp
+}
+c0106c73:	c9                   	leave  
+c0106c74:	c3                   	ret    
+
+c0106c75 <kfree>:
+
+
+void kfree(void *block)
+{
+c0106c75:	55                   	push   %ebp
+c0106c76:	89 e5                	mov    %esp,%ebp
+c0106c78:	83 ec 18             	sub    $0x18,%esp
+	bigblock_t *bb, **last = &bigblocks;
+c0106c7b:	c7 45 f0 f0 32 1c c0 	movl   $0xc01c32f0,-0x10(%ebp)
+	unsigned long flags;
+
+	if (!block)
+c0106c82:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0106c86:	0f 84 ac 00 00 00    	je     c0106d38 <kfree+0xc3>
+		return;
+
+	if (!((unsigned long)block & (PAGE_SIZE-1))) {
+c0106c8c:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106c8f:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0106c94:	85 c0                	test   %eax,%eax
+c0106c96:	0f 85 85 00 00 00    	jne    c0106d21 <kfree+0xac>
+		/* might be on the big block list */
+		spin_lock_irqsave(&block_lock, flags);
+c0106c9c:	e8 d3 f9 ff ff       	call   c0106674 <__intr_save>
+c0106ca1:	89 45 ec             	mov    %eax,-0x14(%ebp)
+		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
+c0106ca4:	a1 f0 32 1c c0       	mov    0xc01c32f0,%eax
+c0106ca9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0106cac:	eb 5e                	jmp    c0106d0c <kfree+0x97>
+			if (bb->pages == block) {
+c0106cae:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106cb1:	8b 40 04             	mov    0x4(%eax),%eax
+c0106cb4:	3b 45 08             	cmp    0x8(%ebp),%eax
+c0106cb7:	75 41                	jne    c0106cfa <kfree+0x85>
+				*last = bb->next;
+c0106cb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106cbc:	8b 50 08             	mov    0x8(%eax),%edx
+c0106cbf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106cc2:	89 10                	mov    %edx,(%eax)
+				spin_unlock_irqrestore(&block_lock, flags);
+c0106cc4:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0106cc7:	83 ec 0c             	sub    $0xc,%esp
+c0106cca:	50                   	push   %eax
+c0106ccb:	e8 ce f9 ff ff       	call   c010669e <__intr_restore>
+c0106cd0:	83 c4 10             	add    $0x10,%esp
+				__slob_free_pages((unsigned long)block, bb->order);
+c0106cd3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106cd6:	8b 10                	mov    (%eax),%edx
+c0106cd8:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106cdb:	83 ec 08             	sub    $0x8,%esp
+c0106cde:	52                   	push   %edx
+c0106cdf:	50                   	push   %eax
+c0106ce0:	e8 f4 fa ff ff       	call   c01067d9 <__slob_free_pages>
+c0106ce5:	83 c4 10             	add    $0x10,%esp
+				slob_free(bb, sizeof(bigblock_t));
+c0106ce8:	83 ec 08             	sub    $0x8,%esp
+c0106ceb:	6a 0c                	push   $0xc
+c0106ced:	ff 75 f4             	pushl  -0xc(%ebp)
+c0106cf0:	e8 ec fc ff ff       	call   c01069e1 <slob_free>
+c0106cf5:	83 c4 10             	add    $0x10,%esp
+				return;
+c0106cf8:	eb 3f                	jmp    c0106d39 <kfree+0xc4>
+		return;
+
+	if (!((unsigned long)block & (PAGE_SIZE-1))) {
+		/* might be on the big block list */
+		spin_lock_irqsave(&block_lock, flags);
+		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
+c0106cfa:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106cfd:	83 c0 08             	add    $0x8,%eax
+c0106d00:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0106d03:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106d06:	8b 40 08             	mov    0x8(%eax),%eax
+c0106d09:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0106d0c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0106d10:	75 9c                	jne    c0106cae <kfree+0x39>
+				__slob_free_pages((unsigned long)block, bb->order);
+				slob_free(bb, sizeof(bigblock_t));
+				return;
+			}
+		}
+		spin_unlock_irqrestore(&block_lock, flags);
+c0106d12:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0106d15:	83 ec 0c             	sub    $0xc,%esp
+c0106d18:	50                   	push   %eax
+c0106d19:	e8 80 f9 ff ff       	call   c010669e <__intr_restore>
+c0106d1e:	83 c4 10             	add    $0x10,%esp
+	}
+
+	slob_free((slob_t *)block - 1, 0);
+c0106d21:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106d24:	83 e8 08             	sub    $0x8,%eax
+c0106d27:	83 ec 08             	sub    $0x8,%esp
+c0106d2a:	6a 00                	push   $0x0
+c0106d2c:	50                   	push   %eax
+c0106d2d:	e8 af fc ff ff       	call   c01069e1 <slob_free>
+c0106d32:	83 c4 10             	add    $0x10,%esp
+	return;
+c0106d35:	90                   	nop
+c0106d36:	eb 01                	jmp    c0106d39 <kfree+0xc4>
+{
+	bigblock_t *bb, **last = &bigblocks;
+	unsigned long flags;
+
+	if (!block)
+		return;
+c0106d38:	90                   	nop
+		spin_unlock_irqrestore(&block_lock, flags);
+	}
+
+	slob_free((slob_t *)block - 1, 0);
+	return;
+}
+c0106d39:	c9                   	leave  
+c0106d3a:	c3                   	ret    
+
+c0106d3b <ksize>:
+
+
+unsigned int ksize(const void *block)
+{
+c0106d3b:	55                   	push   %ebp
+c0106d3c:	89 e5                	mov    %esp,%ebp
+c0106d3e:	83 ec 18             	sub    $0x18,%esp
+	bigblock_t *bb;
+	unsigned long flags;
+
+	if (!block)
+c0106d41:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0106d45:	75 07                	jne    c0106d4e <ksize+0x13>
+		return 0;
+c0106d47:	b8 00 00 00 00       	mov    $0x0,%eax
+c0106d4c:	eb 73                	jmp    c0106dc1 <ksize+0x86>
+
+	if (!((unsigned long)block & (PAGE_SIZE-1))) {
+c0106d4e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106d51:	25 ff 0f 00 00       	and    $0xfff,%eax
+c0106d56:	85 c0                	test   %eax,%eax
+c0106d58:	75 5c                	jne    c0106db6 <ksize+0x7b>
+		spin_lock_irqsave(&block_lock, flags);
+c0106d5a:	e8 15 f9 ff ff       	call   c0106674 <__intr_save>
+c0106d5f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+		for (bb = bigblocks; bb; bb = bb->next)
+c0106d62:	a1 f0 32 1c c0       	mov    0xc01c32f0,%eax
+c0106d67:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0106d6a:	eb 35                	jmp    c0106da1 <ksize+0x66>
+			if (bb->pages == block) {
+c0106d6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106d6f:	8b 40 04             	mov    0x4(%eax),%eax
+c0106d72:	3b 45 08             	cmp    0x8(%ebp),%eax
+c0106d75:	75 21                	jne    c0106d98 <ksize+0x5d>
+				spin_unlock_irqrestore(&slob_lock, flags);
+c0106d77:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106d7a:	83 ec 0c             	sub    $0xc,%esp
+c0106d7d:	50                   	push   %eax
+c0106d7e:	e8 1b f9 ff ff       	call   c010669e <__intr_restore>
+c0106d83:	83 c4 10             	add    $0x10,%esp
+				return PAGE_SIZE << bb->order;
+c0106d86:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106d89:	8b 00                	mov    (%eax),%eax
+c0106d8b:	ba 00 10 00 00       	mov    $0x1000,%edx
+c0106d90:	89 c1                	mov    %eax,%ecx
+c0106d92:	d3 e2                	shl    %cl,%edx
+c0106d94:	89 d0                	mov    %edx,%eax
+c0106d96:	eb 29                	jmp    c0106dc1 <ksize+0x86>
+	if (!block)
+		return 0;
+
+	if (!((unsigned long)block & (PAGE_SIZE-1))) {
+		spin_lock_irqsave(&block_lock, flags);
+		for (bb = bigblocks; bb; bb = bb->next)
+c0106d98:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0106d9b:	8b 40 08             	mov    0x8(%eax),%eax
+c0106d9e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0106da1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0106da5:	75 c5                	jne    c0106d6c <ksize+0x31>
+			if (bb->pages == block) {
+				spin_unlock_irqrestore(&slob_lock, flags);
+				return PAGE_SIZE << bb->order;
+			}
+		spin_unlock_irqrestore(&block_lock, flags);
+c0106da7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0106daa:	83 ec 0c             	sub    $0xc,%esp
+c0106dad:	50                   	push   %eax
+c0106dae:	e8 eb f8 ff ff       	call   c010669e <__intr_restore>
+c0106db3:	83 c4 10             	add    $0x10,%esp
+	}
+
+	return ((slob_t *)block - 1)->units * SLOB_UNIT;
+c0106db6:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106db9:	83 e8 08             	sub    $0x8,%eax
+c0106dbc:	8b 00                	mov    (%eax),%eax
+c0106dbe:	c1 e0 03             	shl    $0x3,%eax
+}
+c0106dc1:	c9                   	leave  
+c0106dc2:	c3                   	ret    
+
+c0106dc3 <pa2page>:
+page2pa(struct Page *page) {
+    return page2ppn(page) << PGSHIFT;
+}
+
+static inline struct Page *
+pa2page(uintptr_t pa) {
+c0106dc3:	55                   	push   %ebp
+c0106dc4:	89 e5                	mov    %esp,%ebp
+c0106dc6:	83 ec 08             	sub    $0x8,%esp
+    if (PPN(pa) >= npage) {
+c0106dc9:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106dcc:	c1 e8 0c             	shr    $0xc,%eax
+c0106dcf:	89 c2                	mov    %eax,%edx
+c0106dd1:	a1 60 32 1c c0       	mov    0xc01c3260,%eax
+c0106dd6:	39 c2                	cmp    %eax,%edx
+c0106dd8:	72 14                	jb     c0106dee <pa2page+0x2b>
+        panic("pa2page called with invalid pa");
+c0106dda:	83 ec 04             	sub    $0x4,%esp
+c0106ddd:	68 ec e3 10 c0       	push   $0xc010e3ec
+c0106de2:	6a 5e                	push   $0x5e
+c0106de4:	68 0b e4 10 c0       	push   $0xc010e40b
+c0106de9:	e8 06 96 ff ff       	call   c01003f4 <__panic>
+    }
+    return &pages[PPN(pa)];
+c0106dee:	a1 a4 53 1c c0       	mov    0xc01c53a4,%eax
+c0106df3:	8b 55 08             	mov    0x8(%ebp),%edx
+c0106df6:	c1 ea 0c             	shr    $0xc,%edx
+c0106df9:	c1 e2 05             	shl    $0x5,%edx
+c0106dfc:	01 d0                	add    %edx,%eax
+}
+c0106dfe:	c9                   	leave  
+c0106dff:	c3                   	ret    
+
+c0106e00 <pte2page>:
+kva2page(void *kva) {
+    return pa2page(PADDR(kva));
+}
+
+static inline struct Page *
+pte2page(pte_t pte) {
+c0106e00:	55                   	push   %ebp
+c0106e01:	89 e5                	mov    %esp,%ebp
+c0106e03:	83 ec 08             	sub    $0x8,%esp
+    if (!(pte & PTE_P)) {
+c0106e06:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106e09:	83 e0 01             	and    $0x1,%eax
+c0106e0c:	85 c0                	test   %eax,%eax
+c0106e0e:	75 14                	jne    c0106e24 <pte2page+0x24>
+        panic("pte2page called with invalid pte");
+c0106e10:	83 ec 04             	sub    $0x4,%esp
+c0106e13:	68 1c e4 10 c0       	push   $0xc010e41c
+c0106e18:	6a 70                	push   $0x70
+c0106e1a:	68 0b e4 10 c0       	push   $0xc010e40b
+c0106e1f:	e8 d0 95 ff ff       	call   c01003f4 <__panic>
+    }
+    return pa2page(PTE_ADDR(pte));
+c0106e24:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106e27:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0106e2c:	83 ec 0c             	sub    $0xc,%esp
+c0106e2f:	50                   	push   %eax
+c0106e30:	e8 8e ff ff ff       	call   c0106dc3 <pa2page>
+c0106e35:	83 c4 10             	add    $0x10,%esp
+}
+c0106e38:	c9                   	leave  
+c0106e39:	c3                   	ret    
+
+c0106e3a <pde2page>:
+
+static inline struct Page *
+pde2page(pde_t pde) {
+c0106e3a:	55                   	push   %ebp
+c0106e3b:	89 e5                	mov    %esp,%ebp
+c0106e3d:	83 ec 08             	sub    $0x8,%esp
+    return pa2page(PDE_ADDR(pde));
+c0106e40:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106e43:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c0106e48:	83 ec 0c             	sub    $0xc,%esp
+c0106e4b:	50                   	push   %eax
+c0106e4c:	e8 72 ff ff ff       	call   c0106dc3 <pa2page>
+c0106e51:	83 c4 10             	add    $0x10,%esp
+}
+c0106e54:	c9                   	leave  
+c0106e55:	c3                   	ret    
+
+c0106e56 <swap_init>:
+
+static void check_swap(void);
+
+int
+swap_init(void)
+{
+c0106e56:	55                   	push   %ebp
+c0106e57:	89 e5                	mov    %esp,%ebp
+c0106e59:	83 ec 18             	sub    $0x18,%esp
+     swapfs_init();
+c0106e5c:	e8 d5 29 00 00       	call   c0109836 <swapfs_init>
+
+     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
+c0106e61:	a1 5c 54 1c c0       	mov    0xc01c545c,%eax
+c0106e66:	3d ff 03 00 00       	cmp    $0x3ff,%eax
+c0106e6b:	76 0c                	jbe    c0106e79 <swap_init+0x23>
+c0106e6d:	a1 5c 54 1c c0       	mov    0xc01c545c,%eax
+c0106e72:	3d ff ff ff 00       	cmp    $0xffffff,%eax
+c0106e77:	76 17                	jbe    c0106e90 <swap_init+0x3a>
+     {
+          panic("bad max_swap_offset %08x.\n", max_swap_offset);
+c0106e79:	a1 5c 54 1c c0       	mov    0xc01c545c,%eax
+c0106e7e:	50                   	push   %eax
+c0106e7f:	68 3d e4 10 c0       	push   $0xc010e43d
+c0106e84:	6a 27                	push   $0x27
+c0106e86:	68 58 e4 10 c0       	push   $0xc010e458
+c0106e8b:	e8 64 95 ff ff       	call   c01003f4 <__panic>
+     }
+     
+
+     sm = &swap_manager_fifo;
+c0106e90:	c7 05 fc 32 1c c0 40 	movl   $0xc0131a40,0xc01c32fc
+c0106e97:	1a 13 c0 
+     int r = sm->init();
+c0106e9a:	a1 fc 32 1c c0       	mov    0xc01c32fc,%eax
+c0106e9f:	8b 40 04             	mov    0x4(%eax),%eax
+c0106ea2:	ff d0                	call   *%eax
+c0106ea4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+     
+     if (r == 0)
+c0106ea7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0106eab:	75 27                	jne    c0106ed4 <swap_init+0x7e>
+     {
+          swap_init_ok = 1;
+c0106ead:	c7 05 f4 32 1c c0 01 	movl   $0x1,0xc01c32f4
+c0106eb4:	00 00 00 
+          cprintf("SWAP: manager = %s\n", sm->name);
+c0106eb7:	a1 fc 32 1c c0       	mov    0xc01c32fc,%eax
+c0106ebc:	8b 00                	mov    (%eax),%eax
+c0106ebe:	83 ec 08             	sub    $0x8,%esp
+c0106ec1:	50                   	push   %eax
+c0106ec2:	68 67 e4 10 c0       	push   $0xc010e467
+c0106ec7:	e8 c2 93 ff ff       	call   c010028e <cprintf>
+c0106ecc:	83 c4 10             	add    $0x10,%esp
+          check_swap();
+c0106ecf:	e8 f7 03 00 00       	call   c01072cb <check_swap>
+     }
+
+     return r;
+c0106ed4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0106ed7:	c9                   	leave  
+c0106ed8:	c3                   	ret    
+
+c0106ed9 <swap_init_mm>:
+
+int
+swap_init_mm(struct mm_struct *mm)
+{
+c0106ed9:	55                   	push   %ebp
+c0106eda:	89 e5                	mov    %esp,%ebp
+c0106edc:	83 ec 08             	sub    $0x8,%esp
+     return sm->init_mm(mm);
+c0106edf:	a1 fc 32 1c c0       	mov    0xc01c32fc,%eax
+c0106ee4:	8b 40 08             	mov    0x8(%eax),%eax
+c0106ee7:	83 ec 0c             	sub    $0xc,%esp
+c0106eea:	ff 75 08             	pushl  0x8(%ebp)
+c0106eed:	ff d0                	call   *%eax
+c0106eef:	83 c4 10             	add    $0x10,%esp
+}
+c0106ef2:	c9                   	leave  
+c0106ef3:	c3                   	ret    
+
+c0106ef4 <swap_tick_event>:
+
+int
+swap_tick_event(struct mm_struct *mm)
+{
+c0106ef4:	55                   	push   %ebp
+c0106ef5:	89 e5                	mov    %esp,%ebp
+c0106ef7:	83 ec 08             	sub    $0x8,%esp
+     return sm->tick_event(mm);
+c0106efa:	a1 fc 32 1c c0       	mov    0xc01c32fc,%eax
+c0106eff:	8b 40 0c             	mov    0xc(%eax),%eax
+c0106f02:	83 ec 0c             	sub    $0xc,%esp
+c0106f05:	ff 75 08             	pushl  0x8(%ebp)
+c0106f08:	ff d0                	call   *%eax
+c0106f0a:	83 c4 10             	add    $0x10,%esp
+}
+c0106f0d:	c9                   	leave  
+c0106f0e:	c3                   	ret    
+
+c0106f0f <swap_map_swappable>:
+
+int
+swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
+{
+c0106f0f:	55                   	push   %ebp
+c0106f10:	89 e5                	mov    %esp,%ebp
+c0106f12:	83 ec 08             	sub    $0x8,%esp
+     return sm->map_swappable(mm, addr, page, swap_in);
+c0106f15:	a1 fc 32 1c c0       	mov    0xc01c32fc,%eax
+c0106f1a:	8b 40 10             	mov    0x10(%eax),%eax
+c0106f1d:	ff 75 14             	pushl  0x14(%ebp)
+c0106f20:	ff 75 10             	pushl  0x10(%ebp)
+c0106f23:	ff 75 0c             	pushl  0xc(%ebp)
+c0106f26:	ff 75 08             	pushl  0x8(%ebp)
+c0106f29:	ff d0                	call   *%eax
+c0106f2b:	83 c4 10             	add    $0x10,%esp
+}
+c0106f2e:	c9                   	leave  
+c0106f2f:	c3                   	ret    
+
+c0106f30 <swap_set_unswappable>:
+
+int
+swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
+{
+c0106f30:	55                   	push   %ebp
+c0106f31:	89 e5                	mov    %esp,%ebp
+c0106f33:	83 ec 08             	sub    $0x8,%esp
+     return sm->set_unswappable(mm, addr);
+c0106f36:	a1 fc 32 1c c0       	mov    0xc01c32fc,%eax
+c0106f3b:	8b 40 14             	mov    0x14(%eax),%eax
+c0106f3e:	83 ec 08             	sub    $0x8,%esp
+c0106f41:	ff 75 0c             	pushl  0xc(%ebp)
+c0106f44:	ff 75 08             	pushl  0x8(%ebp)
+c0106f47:	ff d0                	call   *%eax
+c0106f49:	83 c4 10             	add    $0x10,%esp
+}
+c0106f4c:	c9                   	leave  
+c0106f4d:	c3                   	ret    
+
+c0106f4e <swap_out>:
+
+volatile unsigned int swap_out_num=0;
+
+int
+swap_out(struct mm_struct *mm, int n, int in_tick)
+{
+c0106f4e:	55                   	push   %ebp
+c0106f4f:	89 e5                	mov    %esp,%ebp
+c0106f51:	83 ec 28             	sub    $0x28,%esp
+     int i;
+     for (i = 0; i != n; ++ i)
+c0106f54:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0106f5b:	e9 2e 01 00 00       	jmp    c010708e <swap_out+0x140>
+     {
+          uintptr_t v;
+          //struct Page **ptr_page=NULL;
+          struct Page *page;
+          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
+          int r = sm->swap_out_victim(mm, &page, in_tick);
+c0106f60:	a1 fc 32 1c c0       	mov    0xc01c32fc,%eax
+c0106f65:	8b 40 18             	mov    0x18(%eax),%eax
+c0106f68:	83 ec 04             	sub    $0x4,%esp
+c0106f6b:	ff 75 10             	pushl  0x10(%ebp)
+c0106f6e:	8d 55 e4             	lea    -0x1c(%ebp),%edx
+c0106f71:	52                   	push   %edx
+c0106f72:	ff 75 08             	pushl  0x8(%ebp)
+c0106f75:	ff d0                	call   *%eax
+c0106f77:	83 c4 10             	add    $0x10,%esp
+c0106f7a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+          if (r != 0) {
+c0106f7d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0106f81:	74 18                	je     c0106f9b <swap_out+0x4d>
+                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
+c0106f83:	83 ec 08             	sub    $0x8,%esp
+c0106f86:	ff 75 f4             	pushl  -0xc(%ebp)
+c0106f89:	68 7c e4 10 c0       	push   $0xc010e47c
+c0106f8e:	e8 fb 92 ff ff       	call   c010028e <cprintf>
+c0106f93:	83 c4 10             	add    $0x10,%esp
+c0106f96:	e9 ff 00 00 00       	jmp    c010709a <swap_out+0x14c>
+          }          
+          //assert(!PageReserved(page));
+
+          //cprintf("SWAP: choose victim page 0x%08x\n", page);
+          
+          v=page->pra_vaddr; 
+c0106f9b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0106f9e:	8b 40 1c             	mov    0x1c(%eax),%eax
+c0106fa1:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          pte_t *ptep = get_pte(mm->pgdir, v, 0);
+c0106fa4:	8b 45 08             	mov    0x8(%ebp),%eax
+c0106fa7:	8b 40 0c             	mov    0xc(%eax),%eax
+c0106faa:	83 ec 04             	sub    $0x4,%esp
+c0106fad:	6a 00                	push   $0x0
+c0106faf:	ff 75 ec             	pushl  -0x14(%ebp)
+c0106fb2:	50                   	push   %eax
+c0106fb3:	e8 93 cf ff ff       	call   c0103f4b <get_pte>
+c0106fb8:	83 c4 10             	add    $0x10,%esp
+c0106fbb:	89 45 e8             	mov    %eax,-0x18(%ebp)
+          assert((*ptep & PTE_P) != 0);
+c0106fbe:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0106fc1:	8b 00                	mov    (%eax),%eax
+c0106fc3:	83 e0 01             	and    $0x1,%eax
+c0106fc6:	85 c0                	test   %eax,%eax
+c0106fc8:	75 16                	jne    c0106fe0 <swap_out+0x92>
+c0106fca:	68 a9 e4 10 c0       	push   $0xc010e4a9
+c0106fcf:	68 be e4 10 c0       	push   $0xc010e4be
+c0106fd4:	6a 67                	push   $0x67
+c0106fd6:	68 58 e4 10 c0       	push   $0xc010e458
+c0106fdb:	e8 14 94 ff ff       	call   c01003f4 <__panic>
+
+          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
+c0106fe0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0106fe3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0106fe6:	8b 52 1c             	mov    0x1c(%edx),%edx
+c0106fe9:	c1 ea 0c             	shr    $0xc,%edx
+c0106fec:	83 c2 01             	add    $0x1,%edx
+c0106fef:	c1 e2 08             	shl    $0x8,%edx
+c0106ff2:	83 ec 08             	sub    $0x8,%esp
+c0106ff5:	50                   	push   %eax
+c0106ff6:	52                   	push   %edx
+c0106ff7:	e8 d6 28 00 00       	call   c01098d2 <swapfs_write>
+c0106ffc:	83 c4 10             	add    $0x10,%esp
+c0106fff:	85 c0                	test   %eax,%eax
+c0107001:	74 2b                	je     c010702e <swap_out+0xe0>
+                    cprintf("SWAP: failed to save\n");
+c0107003:	83 ec 0c             	sub    $0xc,%esp
+c0107006:	68 d3 e4 10 c0       	push   $0xc010e4d3
+c010700b:	e8 7e 92 ff ff       	call   c010028e <cprintf>
+c0107010:	83 c4 10             	add    $0x10,%esp
+                    sm->map_swappable(mm, v, page, 0);
+c0107013:	a1 fc 32 1c c0       	mov    0xc01c32fc,%eax
+c0107018:	8b 40 10             	mov    0x10(%eax),%eax
+c010701b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010701e:	6a 00                	push   $0x0
+c0107020:	52                   	push   %edx
+c0107021:	ff 75 ec             	pushl  -0x14(%ebp)
+c0107024:	ff 75 08             	pushl  0x8(%ebp)
+c0107027:	ff d0                	call   *%eax
+c0107029:	83 c4 10             	add    $0x10,%esp
+c010702c:	eb 5c                	jmp    c010708a <swap_out+0x13c>
+                    continue;
+          }
+          else {
+                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
+c010702e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0107031:	8b 40 1c             	mov    0x1c(%eax),%eax
+c0107034:	c1 e8 0c             	shr    $0xc,%eax
+c0107037:	83 c0 01             	add    $0x1,%eax
+c010703a:	50                   	push   %eax
+c010703b:	ff 75 ec             	pushl  -0x14(%ebp)
+c010703e:	ff 75 f4             	pushl  -0xc(%ebp)
+c0107041:	68 ec e4 10 c0       	push   $0xc010e4ec
+c0107046:	e8 43 92 ff ff       	call   c010028e <cprintf>
+c010704b:	83 c4 10             	add    $0x10,%esp
+                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
+c010704e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0107051:	8b 40 1c             	mov    0x1c(%eax),%eax
+c0107054:	c1 e8 0c             	shr    $0xc,%eax
+c0107057:	83 c0 01             	add    $0x1,%eax
+c010705a:	c1 e0 08             	shl    $0x8,%eax
+c010705d:	89 c2                	mov    %eax,%edx
+c010705f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0107062:	89 10                	mov    %edx,(%eax)
+                    free_page(page);
+c0107064:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0107067:	83 ec 08             	sub    $0x8,%esp
+c010706a:	6a 01                	push   $0x1
+c010706c:	50                   	push   %eax
+c010706d:	e8 5a c8 ff ff       	call   c01038cc <free_pages>
+c0107072:	83 c4 10             	add    $0x10,%esp
+          }
+          
+          tlb_invalidate(mm->pgdir, v);
+c0107075:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107078:	8b 40 0c             	mov    0xc(%eax),%eax
+c010707b:	83 ec 08             	sub    $0x8,%esp
+c010707e:	ff 75 ec             	pushl  -0x14(%ebp)
+c0107081:	50                   	push   %eax
+c0107082:	e8 3f d5 ff ff       	call   c01045c6 <tlb_invalidate>
+c0107087:	83 c4 10             	add    $0x10,%esp
+
+int
+swap_out(struct mm_struct *mm, int n, int in_tick)
+{
+     int i;
+     for (i = 0; i != n; ++ i)
+c010708a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c010708e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107091:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c0107094:	0f 85 c6 fe ff ff    	jne    c0106f60 <swap_out+0x12>
+                    free_page(page);
+          }
+          
+          tlb_invalidate(mm->pgdir, v);
+     }
+     return i;
+c010709a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c010709d:	c9                   	leave  
+c010709e:	c3                   	ret    
+
+c010709f <swap_in>:
+
+int
+swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
+{
+c010709f:	55                   	push   %ebp
+c01070a0:	89 e5                	mov    %esp,%ebp
+c01070a2:	83 ec 18             	sub    $0x18,%esp
+     struct Page *result = alloc_page();
+c01070a5:	83 ec 0c             	sub    $0xc,%esp
+c01070a8:	6a 01                	push   $0x1
+c01070aa:	e8 b1 c7 ff ff       	call   c0103860 <alloc_pages>
+c01070af:	83 c4 10             	add    $0x10,%esp
+c01070b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+     assert(result!=NULL);
+c01070b5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01070b9:	75 16                	jne    c01070d1 <swap_in+0x32>
+c01070bb:	68 2c e5 10 c0       	push   $0xc010e52c
+c01070c0:	68 be e4 10 c0       	push   $0xc010e4be
+c01070c5:	6a 7d                	push   $0x7d
+c01070c7:	68 58 e4 10 c0       	push   $0xc010e458
+c01070cc:	e8 23 93 ff ff       	call   c01003f4 <__panic>
+
+     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
+c01070d1:	8b 45 08             	mov    0x8(%ebp),%eax
+c01070d4:	8b 40 0c             	mov    0xc(%eax),%eax
+c01070d7:	83 ec 04             	sub    $0x4,%esp
+c01070da:	6a 00                	push   $0x0
+c01070dc:	ff 75 0c             	pushl  0xc(%ebp)
+c01070df:	50                   	push   %eax
+c01070e0:	e8 66 ce ff ff       	call   c0103f4b <get_pte>
+c01070e5:	83 c4 10             	add    $0x10,%esp
+c01070e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
+    
+     int r;
+     if ((r = swapfs_read((*ptep), result)) != 0)
+c01070eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01070ee:	8b 00                	mov    (%eax),%eax
+c01070f0:	83 ec 08             	sub    $0x8,%esp
+c01070f3:	ff 75 f4             	pushl  -0xc(%ebp)
+c01070f6:	50                   	push   %eax
+c01070f7:	e8 7d 27 00 00       	call   c0109879 <swapfs_read>
+c01070fc:	83 c4 10             	add    $0x10,%esp
+c01070ff:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0107102:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c0107106:	74 1f                	je     c0107127 <swap_in+0x88>
+     {
+        assert(r!=0);
+c0107108:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c010710c:	75 19                	jne    c0107127 <swap_in+0x88>
+c010710e:	68 39 e5 10 c0       	push   $0xc010e539
+c0107113:	68 be e4 10 c0       	push   $0xc010e4be
+c0107118:	68 85 00 00 00       	push   $0x85
+c010711d:	68 58 e4 10 c0       	push   $0xc010e458
+c0107122:	e8 cd 92 ff ff       	call   c01003f4 <__panic>
+     }
+     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
+c0107127:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010712a:	8b 00                	mov    (%eax),%eax
+c010712c:	c1 e8 08             	shr    $0x8,%eax
+c010712f:	83 ec 04             	sub    $0x4,%esp
+c0107132:	ff 75 0c             	pushl  0xc(%ebp)
+c0107135:	50                   	push   %eax
+c0107136:	68 40 e5 10 c0       	push   $0xc010e540
+c010713b:	e8 4e 91 ff ff       	call   c010028e <cprintf>
+c0107140:	83 c4 10             	add    $0x10,%esp
+     *ptr_result=result;
+c0107143:	8b 45 10             	mov    0x10(%ebp),%eax
+c0107146:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0107149:	89 10                	mov    %edx,(%eax)
+     return 0;
+c010714b:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0107150:	c9                   	leave  
+c0107151:	c3                   	ret    
+
+c0107152 <check_content_set>:
+
+
+
+static inline void
+check_content_set(void)
+{
+c0107152:	55                   	push   %ebp
+c0107153:	89 e5                	mov    %esp,%ebp
+c0107155:	83 ec 08             	sub    $0x8,%esp
+     *(unsigned char *)0x1000 = 0x0a;
+c0107158:	b8 00 10 00 00       	mov    $0x1000,%eax
+c010715d:	c6 00 0a             	movb   $0xa,(%eax)
+     assert(pgfault_num==1);
+c0107160:	a1 ec 32 1c c0       	mov    0xc01c32ec,%eax
+c0107165:	83 f8 01             	cmp    $0x1,%eax
+c0107168:	74 19                	je     c0107183 <check_content_set+0x31>
+c010716a:	68 7e e5 10 c0       	push   $0xc010e57e
+c010716f:	68 be e4 10 c0       	push   $0xc010e4be
+c0107174:	68 92 00 00 00       	push   $0x92
+c0107179:	68 58 e4 10 c0       	push   $0xc010e458
+c010717e:	e8 71 92 ff ff       	call   c01003f4 <__panic>
+     *(unsigned char *)0x1010 = 0x0a;
+c0107183:	b8 10 10 00 00       	mov    $0x1010,%eax
+c0107188:	c6 00 0a             	movb   $0xa,(%eax)
+     assert(pgfault_num==1);
+c010718b:	a1 ec 32 1c c0       	mov    0xc01c32ec,%eax
+c0107190:	83 f8 01             	cmp    $0x1,%eax
+c0107193:	74 19                	je     c01071ae <check_content_set+0x5c>
+c0107195:	68 7e e5 10 c0       	push   $0xc010e57e
+c010719a:	68 be e4 10 c0       	push   $0xc010e4be
+c010719f:	68 94 00 00 00       	push   $0x94
+c01071a4:	68 58 e4 10 c0       	push   $0xc010e458
+c01071a9:	e8 46 92 ff ff       	call   c01003f4 <__panic>
+     *(unsigned char *)0x2000 = 0x0b;
+c01071ae:	b8 00 20 00 00       	mov    $0x2000,%eax
+c01071b3:	c6 00 0b             	movb   $0xb,(%eax)
+     assert(pgfault_num==2);
+c01071b6:	a1 ec 32 1c c0       	mov    0xc01c32ec,%eax
+c01071bb:	83 f8 02             	cmp    $0x2,%eax
+c01071be:	74 19                	je     c01071d9 <check_content_set+0x87>
+c01071c0:	68 8d e5 10 c0       	push   $0xc010e58d
+c01071c5:	68 be e4 10 c0       	push   $0xc010e4be
+c01071ca:	68 96 00 00 00       	push   $0x96
+c01071cf:	68 58 e4 10 c0       	push   $0xc010e458
+c01071d4:	e8 1b 92 ff ff       	call   c01003f4 <__panic>
+     *(unsigned char *)0x2010 = 0x0b;
+c01071d9:	b8 10 20 00 00       	mov    $0x2010,%eax
+c01071de:	c6 00 0b             	movb   $0xb,(%eax)
+     assert(pgfault_num==2);
+c01071e1:	a1 ec 32 1c c0       	mov    0xc01c32ec,%eax
+c01071e6:	83 f8 02             	cmp    $0x2,%eax
+c01071e9:	74 19                	je     c0107204 <check_content_set+0xb2>
+c01071eb:	68 8d e5 10 c0       	push   $0xc010e58d
+c01071f0:	68 be e4 10 c0       	push   $0xc010e4be
+c01071f5:	68 98 00 00 00       	push   $0x98
+c01071fa:	68 58 e4 10 c0       	push   $0xc010e458
+c01071ff:	e8 f0 91 ff ff       	call   c01003f4 <__panic>
+     *(unsigned char *)0x3000 = 0x0c;
+c0107204:	b8 00 30 00 00       	mov    $0x3000,%eax
+c0107209:	c6 00 0c             	movb   $0xc,(%eax)
+     assert(pgfault_num==3);
+c010720c:	a1 ec 32 1c c0       	mov    0xc01c32ec,%eax
+c0107211:	83 f8 03             	cmp    $0x3,%eax
+c0107214:	74 19                	je     c010722f <check_content_set+0xdd>
+c0107216:	68 9c e5 10 c0       	push   $0xc010e59c
+c010721b:	68 be e4 10 c0       	push   $0xc010e4be
+c0107220:	68 9a 00 00 00       	push   $0x9a
+c0107225:	68 58 e4 10 c0       	push   $0xc010e458
+c010722a:	e8 c5 91 ff ff       	call   c01003f4 <__panic>
+     *(unsigned char *)0x3010 = 0x0c;
+c010722f:	b8 10 30 00 00       	mov    $0x3010,%eax
+c0107234:	c6 00 0c             	movb   $0xc,(%eax)
+     assert(pgfault_num==3);
+c0107237:	a1 ec 32 1c c0       	mov    0xc01c32ec,%eax
+c010723c:	83 f8 03             	cmp    $0x3,%eax
+c010723f:	74 19                	je     c010725a <check_content_set+0x108>
+c0107241:	68 9c e5 10 c0       	push   $0xc010e59c
+c0107246:	68 be e4 10 c0       	push   $0xc010e4be
+c010724b:	68 9c 00 00 00       	push   $0x9c
+c0107250:	68 58 e4 10 c0       	push   $0xc010e458
+c0107255:	e8 9a 91 ff ff       	call   c01003f4 <__panic>
+     *(unsigned char *)0x4000 = 0x0d;
+c010725a:	b8 00 40 00 00       	mov    $0x4000,%eax
+c010725f:	c6 00 0d             	movb   $0xd,(%eax)
+     assert(pgfault_num==4);
+c0107262:	a1 ec 32 1c c0       	mov    0xc01c32ec,%eax
+c0107267:	83 f8 04             	cmp    $0x4,%eax
+c010726a:	74 19                	je     c0107285 <check_content_set+0x133>
+c010726c:	68 ab e5 10 c0       	push   $0xc010e5ab
+c0107271:	68 be e4 10 c0       	push   $0xc010e4be
+c0107276:	68 9e 00 00 00       	push   $0x9e
+c010727b:	68 58 e4 10 c0       	push   $0xc010e458
+c0107280:	e8 6f 91 ff ff       	call   c01003f4 <__panic>
+     *(unsigned char *)0x4010 = 0x0d;
+c0107285:	b8 10 40 00 00       	mov    $0x4010,%eax
+c010728a:	c6 00 0d             	movb   $0xd,(%eax)
+     assert(pgfault_num==4);
+c010728d:	a1 ec 32 1c c0       	mov    0xc01c32ec,%eax
+c0107292:	83 f8 04             	cmp    $0x4,%eax
+c0107295:	74 19                	je     c01072b0 <check_content_set+0x15e>
+c0107297:	68 ab e5 10 c0       	push   $0xc010e5ab
+c010729c:	68 be e4 10 c0       	push   $0xc010e4be
+c01072a1:	68 a0 00 00 00       	push   $0xa0
+c01072a6:	68 58 e4 10 c0       	push   $0xc010e458
+c01072ab:	e8 44 91 ff ff       	call   c01003f4 <__panic>
+}
+c01072b0:	90                   	nop
+c01072b1:	c9                   	leave  
+c01072b2:	c3                   	ret    
+
+c01072b3 <check_content_access>:
+
+static inline int
+check_content_access(void)
+{
+c01072b3:	55                   	push   %ebp
+c01072b4:	89 e5                	mov    %esp,%ebp
+c01072b6:	83 ec 18             	sub    $0x18,%esp
+    int ret = sm->check_swap();
+c01072b9:	a1 fc 32 1c c0       	mov    0xc01c32fc,%eax
+c01072be:	8b 40 1c             	mov    0x1c(%eax),%eax
+c01072c1:	ff d0                	call   *%eax
+c01072c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return ret;
+c01072c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c01072c9:	c9                   	leave  
+c01072ca:	c3                   	ret    
+
+c01072cb <check_swap>:
+#define free_list (free_area.free_list)
+#define nr_free (free_area.nr_free)
+
+static void
+check_swap(void)
+{
+c01072cb:	55                   	push   %ebp
+c01072cc:	89 e5                	mov    %esp,%ebp
+c01072ce:	83 ec 68             	sub    $0x68,%esp
+    //backup mem env
+     int ret, count = 0, total = 0, i;
+c01072d1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c01072d8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+     list_entry_t *le = &free_list;
+c01072df:	c7 45 e8 84 54 1c c0 	movl   $0xc01c5484,-0x18(%ebp)
+     while ((le = list_next(le)) != &free_list) {
+c01072e6:	eb 60                	jmp    c0107348 <check_swap+0x7d>
+        struct Page *p = le2page(le, page_link);
+c01072e8:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01072eb:	83 e8 0c             	sub    $0xc,%eax
+c01072ee:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        assert(PageProperty(p));
+c01072f1:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01072f4:	83 c0 04             	add    $0x4,%eax
+c01072f7:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
+c01072fe:	89 45 ac             	mov    %eax,-0x54(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0107301:	8b 45 ac             	mov    -0x54(%ebp),%eax
+c0107304:	8b 55 b0             	mov    -0x50(%ebp),%edx
+c0107307:	0f a3 10             	bt     %edx,(%eax)
+c010730a:	19 c0                	sbb    %eax,%eax
+c010730c:	89 45 a8             	mov    %eax,-0x58(%ebp)
+    return oldbit != 0;
+c010730f:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
+c0107313:	0f 95 c0             	setne  %al
+c0107316:	0f b6 c0             	movzbl %al,%eax
+c0107319:	85 c0                	test   %eax,%eax
+c010731b:	75 19                	jne    c0107336 <check_swap+0x6b>
+c010731d:	68 ba e5 10 c0       	push   $0xc010e5ba
+c0107322:	68 be e4 10 c0       	push   $0xc010e4be
+c0107327:	68 bb 00 00 00       	push   $0xbb
+c010732c:	68 58 e4 10 c0       	push   $0xc010e458
+c0107331:	e8 be 90 ff ff       	call   c01003f4 <__panic>
+        count ++, total += p->property;
+c0107336:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c010733a:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010733d:	8b 50 08             	mov    0x8(%eax),%edx
+c0107340:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107343:	01 d0                	add    %edx,%eax
+c0107345:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0107348:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010734b:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c010734e:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0107351:	8b 40 04             	mov    0x4(%eax),%eax
+check_swap(void)
+{
+    //backup mem env
+     int ret, count = 0, total = 0, i;
+     list_entry_t *le = &free_list;
+     while ((le = list_next(le)) != &free_list) {
+c0107354:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0107357:	81 7d e8 84 54 1c c0 	cmpl   $0xc01c5484,-0x18(%ebp)
+c010735e:	75 88                	jne    c01072e8 <check_swap+0x1d>
+        struct Page *p = le2page(le, page_link);
+        assert(PageProperty(p));
+        count ++, total += p->property;
+     }
+     assert(total == nr_free_pages());
+c0107360:	e8 9c c5 ff ff       	call   c0103901 <nr_free_pages>
+c0107365:	89 c2                	mov    %eax,%edx
+c0107367:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010736a:	39 c2                	cmp    %eax,%edx
+c010736c:	74 19                	je     c0107387 <check_swap+0xbc>
+c010736e:	68 ca e5 10 c0       	push   $0xc010e5ca
+c0107373:	68 be e4 10 c0       	push   $0xc010e4be
+c0107378:	68 be 00 00 00       	push   $0xbe
+c010737d:	68 58 e4 10 c0       	push   $0xc010e458
+c0107382:	e8 6d 90 ff ff       	call   c01003f4 <__panic>
+     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
+c0107387:	83 ec 04             	sub    $0x4,%esp
+c010738a:	ff 75 f0             	pushl  -0x10(%ebp)
+c010738d:	ff 75 f4             	pushl  -0xc(%ebp)
+c0107390:	68 e4 e5 10 c0       	push   $0xc010e5e4
+c0107395:	e8 f4 8e ff ff       	call   c010028e <cprintf>
+c010739a:	83 c4 10             	add    $0x10,%esp
+     
+     //now we set the phy pages env     
+     struct mm_struct *mm = mm_create();
+c010739d:	e8 a4 e2 ff ff       	call   c0105646 <mm_create>
+c01073a2:	89 45 d8             	mov    %eax,-0x28(%ebp)
+     assert(mm != NULL);
+c01073a5:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
+c01073a9:	75 19                	jne    c01073c4 <check_swap+0xf9>
+c01073ab:	68 0a e6 10 c0       	push   $0xc010e60a
+c01073b0:	68 be e4 10 c0       	push   $0xc010e4be
+c01073b5:	68 c3 00 00 00       	push   $0xc3
+c01073ba:	68 58 e4 10 c0       	push   $0xc010e458
+c01073bf:	e8 30 90 ff ff       	call   c01003f4 <__panic>
+
+     extern struct mm_struct *check_mm_struct;
+     assert(check_mm_struct == NULL);
+c01073c4:	a1 b0 53 1c c0       	mov    0xc01c53b0,%eax
+c01073c9:	85 c0                	test   %eax,%eax
+c01073cb:	74 19                	je     c01073e6 <check_swap+0x11b>
+c01073cd:	68 15 e6 10 c0       	push   $0xc010e615
+c01073d2:	68 be e4 10 c0       	push   $0xc010e4be
+c01073d7:	68 c6 00 00 00       	push   $0xc6
+c01073dc:	68 58 e4 10 c0       	push   $0xc010e458
+c01073e1:	e8 0e 90 ff ff       	call   c01003f4 <__panic>
+
+     check_mm_struct = mm;
+c01073e6:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c01073e9:	a3 b0 53 1c c0       	mov    %eax,0xc01c53b0
+
+     pde_t *pgdir = mm->pgdir = boot_pgdir;
+c01073ee:	8b 15 64 32 1c c0    	mov    0xc01c3264,%edx
+c01073f4:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c01073f7:	89 50 0c             	mov    %edx,0xc(%eax)
+c01073fa:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c01073fd:	8b 40 0c             	mov    0xc(%eax),%eax
+c0107400:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+     assert(pgdir[0] == 0);
+c0107403:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0107406:	8b 00                	mov    (%eax),%eax
+c0107408:	85 c0                	test   %eax,%eax
+c010740a:	74 19                	je     c0107425 <check_swap+0x15a>
+c010740c:	68 2d e6 10 c0       	push   $0xc010e62d
+c0107411:	68 be e4 10 c0       	push   $0xc010e4be
+c0107416:	68 cb 00 00 00       	push   $0xcb
+c010741b:	68 58 e4 10 c0       	push   $0xc010e458
+c0107420:	e8 cf 8f ff ff       	call   c01003f4 <__panic>
+
+     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
+c0107425:	83 ec 04             	sub    $0x4,%esp
+c0107428:	6a 03                	push   $0x3
+c010742a:	68 00 60 00 00       	push   $0x6000
+c010742f:	68 00 10 00 00       	push   $0x1000
+c0107434:	e8 ad e2 ff ff       	call   c01056e6 <vma_create>
+c0107439:	83 c4 10             	add    $0x10,%esp
+c010743c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+     assert(vma != NULL);
+c010743f:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
+c0107443:	75 19                	jne    c010745e <check_swap+0x193>
+c0107445:	68 3b e6 10 c0       	push   $0xc010e63b
+c010744a:	68 be e4 10 c0       	push   $0xc010e4be
+c010744f:	68 ce 00 00 00       	push   $0xce
+c0107454:	68 58 e4 10 c0       	push   $0xc010e458
+c0107459:	e8 96 8f ff ff       	call   c01003f4 <__panic>
+
+     insert_vma_struct(mm, vma);
+c010745e:	83 ec 08             	sub    $0x8,%esp
+c0107461:	ff 75 d0             	pushl  -0x30(%ebp)
+c0107464:	ff 75 d8             	pushl  -0x28(%ebp)
+c0107467:	e8 e2 e3 ff ff       	call   c010584e <insert_vma_struct>
+c010746c:	83 c4 10             	add    $0x10,%esp
+
+     //setup the temp Page Table vaddr 0~4MB
+     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
+c010746f:	83 ec 0c             	sub    $0xc,%esp
+c0107472:	68 48 e6 10 c0       	push   $0xc010e648
+c0107477:	e8 12 8e ff ff       	call   c010028e <cprintf>
+c010747c:	83 c4 10             	add    $0x10,%esp
+     pte_t *temp_ptep=NULL;
+c010747f:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
+     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
+c0107486:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0107489:	8b 40 0c             	mov    0xc(%eax),%eax
+c010748c:	83 ec 04             	sub    $0x4,%esp
+c010748f:	6a 01                	push   $0x1
+c0107491:	68 00 10 00 00       	push   $0x1000
+c0107496:	50                   	push   %eax
+c0107497:	e8 af ca ff ff       	call   c0103f4b <get_pte>
+c010749c:	83 c4 10             	add    $0x10,%esp
+c010749f:	89 45 cc             	mov    %eax,-0x34(%ebp)
+     assert(temp_ptep!= NULL);
+c01074a2:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
+c01074a6:	75 19                	jne    c01074c1 <check_swap+0x1f6>
+c01074a8:	68 7c e6 10 c0       	push   $0xc010e67c
+c01074ad:	68 be e4 10 c0       	push   $0xc010e4be
+c01074b2:	68 d6 00 00 00       	push   $0xd6
+c01074b7:	68 58 e4 10 c0       	push   $0xc010e458
+c01074bc:	e8 33 8f ff ff       	call   c01003f4 <__panic>
+     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
+c01074c1:	83 ec 0c             	sub    $0xc,%esp
+c01074c4:	68 90 e6 10 c0       	push   $0xc010e690
+c01074c9:	e8 c0 8d ff ff       	call   c010028e <cprintf>
+c01074ce:	83 c4 10             	add    $0x10,%esp
+     
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c01074d1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c01074d8:	e9 90 00 00 00       	jmp    c010756d <check_swap+0x2a2>
+          check_rp[i] = alloc_page();
+c01074dd:	83 ec 0c             	sub    $0xc,%esp
+c01074e0:	6a 01                	push   $0x1
+c01074e2:	e8 79 c3 ff ff       	call   c0103860 <alloc_pages>
+c01074e7:	83 c4 10             	add    $0x10,%esp
+c01074ea:	89 c2                	mov    %eax,%edx
+c01074ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01074ef:	89 14 85 c0 53 1c c0 	mov    %edx,-0x3fe3ac40(,%eax,4)
+          assert(check_rp[i] != NULL );
+c01074f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01074f9:	8b 04 85 c0 53 1c c0 	mov    -0x3fe3ac40(,%eax,4),%eax
+c0107500:	85 c0                	test   %eax,%eax
+c0107502:	75 19                	jne    c010751d <check_swap+0x252>
+c0107504:	68 b4 e6 10 c0       	push   $0xc010e6b4
+c0107509:	68 be e4 10 c0       	push   $0xc010e4be
+c010750e:	68 db 00 00 00       	push   $0xdb
+c0107513:	68 58 e4 10 c0       	push   $0xc010e458
+c0107518:	e8 d7 8e ff ff       	call   c01003f4 <__panic>
+          assert(!PageProperty(check_rp[i]));
+c010751d:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107520:	8b 04 85 c0 53 1c c0 	mov    -0x3fe3ac40(,%eax,4),%eax
+c0107527:	83 c0 04             	add    $0x4,%eax
+c010752a:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
+c0107531:	89 45 a4             	mov    %eax,-0x5c(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0107534:	8b 45 a4             	mov    -0x5c(%ebp),%eax
+c0107537:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010753a:	0f a3 10             	bt     %edx,(%eax)
+c010753d:	19 c0                	sbb    %eax,%eax
+c010753f:	89 45 a0             	mov    %eax,-0x60(%ebp)
+    return oldbit != 0;
+c0107542:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
+c0107546:	0f 95 c0             	setne  %al
+c0107549:	0f b6 c0             	movzbl %al,%eax
+c010754c:	85 c0                	test   %eax,%eax
+c010754e:	74 19                	je     c0107569 <check_swap+0x29e>
+c0107550:	68 c8 e6 10 c0       	push   $0xc010e6c8
+c0107555:	68 be e4 10 c0       	push   $0xc010e4be
+c010755a:	68 dc 00 00 00       	push   $0xdc
+c010755f:	68 58 e4 10 c0       	push   $0xc010e458
+c0107564:	e8 8b 8e ff ff       	call   c01003f4 <__panic>
+     pte_t *temp_ptep=NULL;
+     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
+     assert(temp_ptep!= NULL);
+     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
+     
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c0107569:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+c010756d:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
+c0107571:	0f 8e 66 ff ff ff    	jle    c01074dd <check_swap+0x212>
+          check_rp[i] = alloc_page();
+          assert(check_rp[i] != NULL );
+          assert(!PageProperty(check_rp[i]));
+     }
+     list_entry_t free_list_store = free_list;
+c0107577:	a1 84 54 1c c0       	mov    0xc01c5484,%eax
+c010757c:	8b 15 88 54 1c c0    	mov    0xc01c5488,%edx
+c0107582:	89 45 98             	mov    %eax,-0x68(%ebp)
+c0107585:	89 55 9c             	mov    %edx,-0x64(%ebp)
+c0107588:	c7 45 c0 84 54 1c c0 	movl   $0xc01c5484,-0x40(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c010758f:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c0107592:	8b 55 c0             	mov    -0x40(%ebp),%edx
+c0107595:	89 50 04             	mov    %edx,0x4(%eax)
+c0107598:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c010759b:	8b 50 04             	mov    0x4(%eax),%edx
+c010759e:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c01075a1:	89 10                	mov    %edx,(%eax)
+c01075a3:	c7 45 c8 84 54 1c c0 	movl   $0xc01c5484,-0x38(%ebp)
+ * list_empty - tests whether a list is empty
+ * @list:       the list to test.
+ * */
+static inline bool
+list_empty(list_entry_t *list) {
+    return list->next == list;
+c01075aa:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c01075ad:	8b 40 04             	mov    0x4(%eax),%eax
+c01075b0:	39 45 c8             	cmp    %eax,-0x38(%ebp)
+c01075b3:	0f 94 c0             	sete   %al
+c01075b6:	0f b6 c0             	movzbl %al,%eax
+     list_init(&free_list);
+     assert(list_empty(&free_list));
+c01075b9:	85 c0                	test   %eax,%eax
+c01075bb:	75 19                	jne    c01075d6 <check_swap+0x30b>
+c01075bd:	68 e3 e6 10 c0       	push   $0xc010e6e3
+c01075c2:	68 be e4 10 c0       	push   $0xc010e4be
+c01075c7:	68 e0 00 00 00       	push   $0xe0
+c01075cc:	68 58 e4 10 c0       	push   $0xc010e458
+c01075d1:	e8 1e 8e ff ff       	call   c01003f4 <__panic>
+     
+     //assert(alloc_page() == NULL);
+     
+     unsigned int nr_free_store = nr_free;
+c01075d6:	a1 8c 54 1c c0       	mov    0xc01c548c,%eax
+c01075db:	89 45 bc             	mov    %eax,-0x44(%ebp)
+     nr_free = 0;
+c01075de:	c7 05 8c 54 1c c0 00 	movl   $0x0,0xc01c548c
+c01075e5:	00 00 00 
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c01075e8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c01075ef:	eb 1c                	jmp    c010760d <check_swap+0x342>
+        free_pages(check_rp[i],1);
+c01075f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01075f4:	8b 04 85 c0 53 1c c0 	mov    -0x3fe3ac40(,%eax,4),%eax
+c01075fb:	83 ec 08             	sub    $0x8,%esp
+c01075fe:	6a 01                	push   $0x1
+c0107600:	50                   	push   %eax
+c0107601:	e8 c6 c2 ff ff       	call   c01038cc <free_pages>
+c0107606:	83 c4 10             	add    $0x10,%esp
+     
+     //assert(alloc_page() == NULL);
+     
+     unsigned int nr_free_store = nr_free;
+     nr_free = 0;
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c0107609:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+c010760d:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
+c0107611:	7e de                	jle    c01075f1 <check_swap+0x326>
+        free_pages(check_rp[i],1);
+     }
+     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
+c0107613:	a1 8c 54 1c c0       	mov    0xc01c548c,%eax
+c0107618:	83 f8 04             	cmp    $0x4,%eax
+c010761b:	74 19                	je     c0107636 <check_swap+0x36b>
+c010761d:	68 fc e6 10 c0       	push   $0xc010e6fc
+c0107622:	68 be e4 10 c0       	push   $0xc010e4be
+c0107627:	68 e9 00 00 00       	push   $0xe9
+c010762c:	68 58 e4 10 c0       	push   $0xc010e458
+c0107631:	e8 be 8d ff ff       	call   c01003f4 <__panic>
+     
+     cprintf("set up init env for check_swap begin!\n");
+c0107636:	83 ec 0c             	sub    $0xc,%esp
+c0107639:	68 20 e7 10 c0       	push   $0xc010e720
+c010763e:	e8 4b 8c ff ff       	call   c010028e <cprintf>
+c0107643:	83 c4 10             	add    $0x10,%esp
+     //setup initial vir_page<->phy_page environment for page relpacement algorithm 
+
+     
+     pgfault_num=0;
+c0107646:	c7 05 ec 32 1c c0 00 	movl   $0x0,0xc01c32ec
+c010764d:	00 00 00 
+     
+     check_content_set();
+c0107650:	e8 fd fa ff ff       	call   c0107152 <check_content_set>
+     assert( nr_free == 0);         
+c0107655:	a1 8c 54 1c c0       	mov    0xc01c548c,%eax
+c010765a:	85 c0                	test   %eax,%eax
+c010765c:	74 19                	je     c0107677 <check_swap+0x3ac>
+c010765e:	68 47 e7 10 c0       	push   $0xc010e747
+c0107663:	68 be e4 10 c0       	push   $0xc010e4be
+c0107668:	68 f2 00 00 00       	push   $0xf2
+c010766d:	68 58 e4 10 c0       	push   $0xc010e458
+c0107672:	e8 7d 8d ff ff       	call   c01003f4 <__panic>
+     for(i = 0; i<MAX_SEQ_NO ; i++) 
+c0107677:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c010767e:	eb 26                	jmp    c01076a6 <check_swap+0x3db>
+         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
+c0107680:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107683:	c7 04 85 e0 53 1c c0 	movl   $0xffffffff,-0x3fe3ac20(,%eax,4)
+c010768a:	ff ff ff ff 
+c010768e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107691:	8b 14 85 e0 53 1c c0 	mov    -0x3fe3ac20(,%eax,4),%edx
+c0107698:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010769b:	89 14 85 20 54 1c c0 	mov    %edx,-0x3fe3abe0(,%eax,4)
+     
+     pgfault_num=0;
+     
+     check_content_set();
+     assert( nr_free == 0);         
+     for(i = 0; i<MAX_SEQ_NO ; i++) 
+c01076a2:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+c01076a6:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
+c01076aa:	7e d4                	jle    c0107680 <check_swap+0x3b5>
+         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
+     
+     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c01076ac:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c01076b3:	e9 cc 00 00 00       	jmp    c0107784 <check_swap+0x4b9>
+         check_ptep[i]=0;
+c01076b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01076bb:	c7 04 85 74 54 1c c0 	movl   $0x0,-0x3fe3ab8c(,%eax,4)
+c01076c2:	00 00 00 00 
+         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
+c01076c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01076c9:	83 c0 01             	add    $0x1,%eax
+c01076cc:	c1 e0 0c             	shl    $0xc,%eax
+c01076cf:	83 ec 04             	sub    $0x4,%esp
+c01076d2:	6a 00                	push   $0x0
+c01076d4:	50                   	push   %eax
+c01076d5:	ff 75 d4             	pushl  -0x2c(%ebp)
+c01076d8:	e8 6e c8 ff ff       	call   c0103f4b <get_pte>
+c01076dd:	83 c4 10             	add    $0x10,%esp
+c01076e0:	89 c2                	mov    %eax,%edx
+c01076e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01076e5:	89 14 85 74 54 1c c0 	mov    %edx,-0x3fe3ab8c(,%eax,4)
+         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
+         assert(check_ptep[i] != NULL);
+c01076ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01076ef:	8b 04 85 74 54 1c c0 	mov    -0x3fe3ab8c(,%eax,4),%eax
+c01076f6:	85 c0                	test   %eax,%eax
+c01076f8:	75 19                	jne    c0107713 <check_swap+0x448>
+c01076fa:	68 54 e7 10 c0       	push   $0xc010e754
+c01076ff:	68 be e4 10 c0       	push   $0xc010e4be
+c0107704:	68 fa 00 00 00       	push   $0xfa
+c0107709:	68 58 e4 10 c0       	push   $0xc010e458
+c010770e:	e8 e1 8c ff ff       	call   c01003f4 <__panic>
+         assert(pte2page(*check_ptep[i]) == check_rp[i]);
+c0107713:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107716:	8b 04 85 74 54 1c c0 	mov    -0x3fe3ab8c(,%eax,4),%eax
+c010771d:	8b 00                	mov    (%eax),%eax
+c010771f:	83 ec 0c             	sub    $0xc,%esp
+c0107722:	50                   	push   %eax
+c0107723:	e8 d8 f6 ff ff       	call   c0106e00 <pte2page>
+c0107728:	83 c4 10             	add    $0x10,%esp
+c010772b:	89 c2                	mov    %eax,%edx
+c010772d:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107730:	8b 04 85 c0 53 1c c0 	mov    -0x3fe3ac40(,%eax,4),%eax
+c0107737:	39 c2                	cmp    %eax,%edx
+c0107739:	74 19                	je     c0107754 <check_swap+0x489>
+c010773b:	68 6c e7 10 c0       	push   $0xc010e76c
+c0107740:	68 be e4 10 c0       	push   $0xc010e4be
+c0107745:	68 fb 00 00 00       	push   $0xfb
+c010774a:	68 58 e4 10 c0       	push   $0xc010e458
+c010774f:	e8 a0 8c ff ff       	call   c01003f4 <__panic>
+         assert((*check_ptep[i] & PTE_P));          
+c0107754:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107757:	8b 04 85 74 54 1c c0 	mov    -0x3fe3ab8c(,%eax,4),%eax
+c010775e:	8b 00                	mov    (%eax),%eax
+c0107760:	83 e0 01             	and    $0x1,%eax
+c0107763:	85 c0                	test   %eax,%eax
+c0107765:	75 19                	jne    c0107780 <check_swap+0x4b5>
+c0107767:	68 94 e7 10 c0       	push   $0xc010e794
+c010776c:	68 be e4 10 c0       	push   $0xc010e4be
+c0107771:	68 fc 00 00 00       	push   $0xfc
+c0107776:	68 58 e4 10 c0       	push   $0xc010e458
+c010777b:	e8 74 8c ff ff       	call   c01003f4 <__panic>
+     check_content_set();
+     assert( nr_free == 0);         
+     for(i = 0; i<MAX_SEQ_NO ; i++) 
+         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
+     
+     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c0107780:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+c0107784:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
+c0107788:	0f 8e 2a ff ff ff    	jle    c01076b8 <check_swap+0x3ed>
+         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
+         assert(check_ptep[i] != NULL);
+         assert(pte2page(*check_ptep[i]) == check_rp[i]);
+         assert((*check_ptep[i] & PTE_P));          
+     }
+     cprintf("set up init env for check_swap over!\n");
+c010778e:	83 ec 0c             	sub    $0xc,%esp
+c0107791:	68 b0 e7 10 c0       	push   $0xc010e7b0
+c0107796:	e8 f3 8a ff ff       	call   c010028e <cprintf>
+c010779b:	83 c4 10             	add    $0x10,%esp
+     // now access the virt pages to test  page relpacement algorithm 
+     ret=check_content_access();
+c010779e:	e8 10 fb ff ff       	call   c01072b3 <check_content_access>
+c01077a3:	89 45 b8             	mov    %eax,-0x48(%ebp)
+     assert(ret==0);
+c01077a6:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
+c01077aa:	74 19                	je     c01077c5 <check_swap+0x4fa>
+c01077ac:	68 d6 e7 10 c0       	push   $0xc010e7d6
+c01077b1:	68 be e4 10 c0       	push   $0xc010e4be
+c01077b6:	68 01 01 00 00       	push   $0x101
+c01077bb:	68 58 e4 10 c0       	push   $0xc010e458
+c01077c0:	e8 2f 8c ff ff       	call   c01003f4 <__panic>
+     
+     //restore kernel mem env
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c01077c5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+c01077cc:	eb 1c                	jmp    c01077ea <check_swap+0x51f>
+         free_pages(check_rp[i],1);
+c01077ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01077d1:	8b 04 85 c0 53 1c c0 	mov    -0x3fe3ac40(,%eax,4),%eax
+c01077d8:	83 ec 08             	sub    $0x8,%esp
+c01077db:	6a 01                	push   $0x1
+c01077dd:	50                   	push   %eax
+c01077de:	e8 e9 c0 ff ff       	call   c01038cc <free_pages>
+c01077e3:	83 c4 10             	add    $0x10,%esp
+     // now access the virt pages to test  page relpacement algorithm 
+     ret=check_content_access();
+     assert(ret==0);
+     
+     //restore kernel mem env
+     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
+c01077e6:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+c01077ea:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
+c01077ee:	7e de                	jle    c01077ce <check_swap+0x503>
+         free_pages(check_rp[i],1);
+     } 
+
+     //free_page(pte2page(*temp_ptep));
+    free_page(pde2page(pgdir[0]));
+c01077f0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c01077f3:	8b 00                	mov    (%eax),%eax
+c01077f5:	83 ec 0c             	sub    $0xc,%esp
+c01077f8:	50                   	push   %eax
+c01077f9:	e8 3c f6 ff ff       	call   c0106e3a <pde2page>
+c01077fe:	83 c4 10             	add    $0x10,%esp
+c0107801:	83 ec 08             	sub    $0x8,%esp
+c0107804:	6a 01                	push   $0x1
+c0107806:	50                   	push   %eax
+c0107807:	e8 c0 c0 ff ff       	call   c01038cc <free_pages>
+c010780c:	83 c4 10             	add    $0x10,%esp
+     pgdir[0] = 0;
+c010780f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0107812:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+     mm->pgdir = NULL;
+c0107818:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010781b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
+     mm_destroy(mm);
+c0107822:	83 ec 0c             	sub    $0xc,%esp
+c0107825:	ff 75 d8             	pushl  -0x28(%ebp)
+c0107828:	e8 45 e1 ff ff       	call   c0105972 <mm_destroy>
+c010782d:	83 c4 10             	add    $0x10,%esp
+     check_mm_struct = NULL;
+c0107830:	c7 05 b0 53 1c c0 00 	movl   $0x0,0xc01c53b0
+c0107837:	00 00 00 
+     
+     nr_free = nr_free_store;
+c010783a:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c010783d:	a3 8c 54 1c c0       	mov    %eax,0xc01c548c
+     free_list = free_list_store;
+c0107842:	8b 45 98             	mov    -0x68(%ebp),%eax
+c0107845:	8b 55 9c             	mov    -0x64(%ebp),%edx
+c0107848:	a3 84 54 1c c0       	mov    %eax,0xc01c5484
+c010784d:	89 15 88 54 1c c0    	mov    %edx,0xc01c5488
+
+     
+     le = &free_list;
+c0107853:	c7 45 e8 84 54 1c c0 	movl   $0xc01c5484,-0x18(%ebp)
+     while ((le = list_next(le)) != &free_list) {
+c010785a:	eb 1d                	jmp    c0107879 <check_swap+0x5ae>
+         struct Page *p = le2page(le, page_link);
+c010785c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010785f:	83 e8 0c             	sub    $0xc,%eax
+c0107862:	89 45 b4             	mov    %eax,-0x4c(%ebp)
+         count --, total -= p->property;
+c0107865:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+c0107869:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010786c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c010786f:	8b 40 08             	mov    0x8(%eax),%eax
+c0107872:	29 c2                	sub    %eax,%edx
+c0107874:	89 d0                	mov    %edx,%eax
+c0107876:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0107879:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010787c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c010787f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c0107882:	8b 40 04             	mov    0x4(%eax),%eax
+     nr_free = nr_free_store;
+     free_list = free_list_store;
+
+     
+     le = &free_list;
+     while ((le = list_next(le)) != &free_list) {
+c0107885:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c0107888:	81 7d e8 84 54 1c c0 	cmpl   $0xc01c5484,-0x18(%ebp)
+c010788f:	75 cb                	jne    c010785c <check_swap+0x591>
+         struct Page *p = le2page(le, page_link);
+         count --, total -= p->property;
+     }
+     cprintf("count is %d, total is %d\n",count,total);
+c0107891:	83 ec 04             	sub    $0x4,%esp
+c0107894:	ff 75 f0             	pushl  -0x10(%ebp)
+c0107897:	ff 75 f4             	pushl  -0xc(%ebp)
+c010789a:	68 dd e7 10 c0       	push   $0xc010e7dd
+c010789f:	e8 ea 89 ff ff       	call   c010028e <cprintf>
+c01078a4:	83 c4 10             	add    $0x10,%esp
+     //assert(count == 0);
+     
+     cprintf("check_swap() succeeded!\n");
+c01078a7:	83 ec 0c             	sub    $0xc,%esp
+c01078aa:	68 f7 e7 10 c0       	push   $0xc010e7f7
+c01078af:	e8 da 89 ff ff       	call   c010028e <cprintf>
+c01078b4:	83 c4 10             	add    $0x10,%esp
+}
+c01078b7:	90                   	nop
+c01078b8:	c9                   	leave  
+c01078b9:	c3                   	ret    
+
+c01078ba <page2ppn>:
+
+extern struct Page *pages;
+extern size_t npage;
+
+static inline ppn_t
+page2ppn(struct Page *page) {
+c01078ba:	55                   	push   %ebp
+c01078bb:	89 e5                	mov    %esp,%ebp
+    return page - pages;
+c01078bd:	8b 45 08             	mov    0x8(%ebp),%eax
+c01078c0:	8b 15 a4 53 1c c0    	mov    0xc01c53a4,%edx
+c01078c6:	29 d0                	sub    %edx,%eax
+c01078c8:	c1 f8 05             	sar    $0x5,%eax
+}
+c01078cb:	5d                   	pop    %ebp
+c01078cc:	c3                   	ret    
+
+c01078cd <page2pa>:
+
+static inline uintptr_t
+page2pa(struct Page *page) {
+c01078cd:	55                   	push   %ebp
+c01078ce:	89 e5                	mov    %esp,%ebp
+    return page2ppn(page) << PGSHIFT;
+c01078d0:	ff 75 08             	pushl  0x8(%ebp)
+c01078d3:	e8 e2 ff ff ff       	call   c01078ba <page2ppn>
+c01078d8:	83 c4 04             	add    $0x4,%esp
+c01078db:	c1 e0 0c             	shl    $0xc,%eax
+}
+c01078de:	c9                   	leave  
+c01078df:	c3                   	ret    
+
+c01078e0 <page_ref>:
+pde2page(pde_t pde) {
+    return pa2page(PDE_ADDR(pde));
+}
+
+static inline int
+page_ref(struct Page *page) {
+c01078e0:	55                   	push   %ebp
+c01078e1:	89 e5                	mov    %esp,%ebp
+    return page->ref;
+c01078e3:	8b 45 08             	mov    0x8(%ebp),%eax
+c01078e6:	8b 00                	mov    (%eax),%eax
+}
+c01078e8:	5d                   	pop    %ebp
+c01078e9:	c3                   	ret    
+
+c01078ea <set_page_ref>:
+
+static inline void
+set_page_ref(struct Page *page, int val) {
+c01078ea:	55                   	push   %ebp
+c01078eb:	89 e5                	mov    %esp,%ebp
+    page->ref = val;
+c01078ed:	8b 45 08             	mov    0x8(%ebp),%eax
+c01078f0:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01078f3:	89 10                	mov    %edx,(%eax)
+}
+c01078f5:	90                   	nop
+c01078f6:	5d                   	pop    %ebp
+c01078f7:	c3                   	ret    
+
+c01078f8 <default_init>:
+
+#define free_list (free_area.free_list)
+#define nr_free (free_area.nr_free)
+
+static void
+default_init(void) {
+c01078f8:	55                   	push   %ebp
+c01078f9:	89 e5                	mov    %esp,%ebp
+c01078fb:	83 ec 10             	sub    $0x10,%esp
+c01078fe:	c7 45 fc 84 54 1c c0 	movl   $0xc01c5484,-0x4(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c0107905:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0107908:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c010790b:	89 50 04             	mov    %edx,0x4(%eax)
+c010790e:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0107911:	8b 50 04             	mov    0x4(%eax),%edx
+c0107914:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0107917:	89 10                	mov    %edx,(%eax)
+    list_init(&free_list);
+    nr_free = 0;
+c0107919:	c7 05 8c 54 1c c0 00 	movl   $0x0,0xc01c548c
+c0107920:	00 00 00 
+}
+c0107923:	90                   	nop
+c0107924:	c9                   	leave  
+c0107925:	c3                   	ret    
+
+c0107926 <default_init_memmap>:
+
+static void
+default_init_memmap(struct Page *base, size_t n) {
+c0107926:	55                   	push   %ebp
+c0107927:	89 e5                	mov    %esp,%ebp
+c0107929:	83 ec 38             	sub    $0x38,%esp
+    assert(n > 0);
+c010792c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c0107930:	75 16                	jne    c0107948 <default_init_memmap+0x22>
+c0107932:	68 10 e8 10 c0       	push   $0xc010e810
+c0107937:	68 16 e8 10 c0       	push   $0xc010e816
+c010793c:	6a 46                	push   $0x46
+c010793e:	68 2b e8 10 c0       	push   $0xc010e82b
+c0107943:	e8 ac 8a ff ff       	call   c01003f4 <__panic>
+    struct Page *p = base;
+c0107948:	8b 45 08             	mov    0x8(%ebp),%eax
+c010794b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    for (; p != base + n; p ++) {
+c010794e:	eb 6c                	jmp    c01079bc <default_init_memmap+0x96>
+        assert(PageReserved(p));
+c0107950:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107953:	83 c0 04             	add    $0x4,%eax
+c0107956:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+c010795d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0107960:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0107963:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c0107966:	0f a3 10             	bt     %edx,(%eax)
+c0107969:	19 c0                	sbb    %eax,%eax
+c010796b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    return oldbit != 0;
+c010796e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
+c0107972:	0f 95 c0             	setne  %al
+c0107975:	0f b6 c0             	movzbl %al,%eax
+c0107978:	85 c0                	test   %eax,%eax
+c010797a:	75 16                	jne    c0107992 <default_init_memmap+0x6c>
+c010797c:	68 41 e8 10 c0       	push   $0xc010e841
+c0107981:	68 16 e8 10 c0       	push   $0xc010e816
+c0107986:	6a 49                	push   $0x49
+c0107988:	68 2b e8 10 c0       	push   $0xc010e82b
+c010798d:	e8 62 8a ff ff       	call   c01003f4 <__panic>
+        p->flags = p->property = 0;
+c0107992:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107995:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+c010799c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010799f:	8b 50 08             	mov    0x8(%eax),%edx
+c01079a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01079a5:	89 50 04             	mov    %edx,0x4(%eax)
+        set_page_ref(p, 0);
+c01079a8:	83 ec 08             	sub    $0x8,%esp
+c01079ab:	6a 00                	push   $0x0
+c01079ad:	ff 75 f4             	pushl  -0xc(%ebp)
+c01079b0:	e8 35 ff ff ff       	call   c01078ea <set_page_ref>
+c01079b5:	83 c4 10             	add    $0x10,%esp
+
+static void
+default_init_memmap(struct Page *base, size_t n) {
+    assert(n > 0);
+    struct Page *p = base;
+    for (; p != base + n; p ++) {
+c01079b8:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
+c01079bc:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01079bf:	c1 e0 05             	shl    $0x5,%eax
+c01079c2:	89 c2                	mov    %eax,%edx
+c01079c4:	8b 45 08             	mov    0x8(%ebp),%eax
+c01079c7:	01 d0                	add    %edx,%eax
+c01079c9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c01079cc:	75 82                	jne    c0107950 <default_init_memmap+0x2a>
+        assert(PageReserved(p));
+        p->flags = p->property = 0;
+        set_page_ref(p, 0);
+    }
+    base->property = n;
+c01079ce:	8b 45 08             	mov    0x8(%ebp),%eax
+c01079d1:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01079d4:	89 50 08             	mov    %edx,0x8(%eax)
+    SetPageProperty(base);
+c01079d7:	8b 45 08             	mov    0x8(%ebp),%eax
+c01079da:	83 c0 04             	add    $0x4,%eax
+c01079dd:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
+c01079e4:	89 45 cc             	mov    %eax,-0x34(%ebp)
+ * Note that @nr may be almost arbitrarily large; this function is not
+ * restricted to acting on a single-word quantity.
+ * */
+static inline void
+set_bit(int nr, volatile void *addr) {
+    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
+c01079e7:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c01079ea:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c01079ed:	0f ab 10             	bts    %edx,(%eax)
+    nr_free += n;
+c01079f0:	8b 15 8c 54 1c c0    	mov    0xc01c548c,%edx
+c01079f6:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01079f9:	01 d0                	add    %edx,%eax
+c01079fb:	a3 8c 54 1c c0       	mov    %eax,0xc01c548c
+    list_add_before(&free_list, &(base->page_link));
+c0107a00:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107a03:	83 c0 0c             	add    $0xc,%eax
+c0107a06:	c7 45 f0 84 54 1c c0 	movl   $0xc01c5484,-0x10(%ebp)
+c0107a0d:	89 45 dc             	mov    %eax,-0x24(%ebp)
+ * Insert the new element @elm *before* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_before(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm->prev, listelm);
+c0107a10:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107a13:	8b 00                	mov    (%eax),%eax
+c0107a15:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0107a18:	89 55 d8             	mov    %edx,-0x28(%ebp)
+c0107a1b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+c0107a1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107a21:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c0107a24:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0107a27:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c0107a2a:	89 10                	mov    %edx,(%eax)
+c0107a2c:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0107a2f:	8b 10                	mov    (%eax),%edx
+c0107a31:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c0107a34:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c0107a37:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0107a3a:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c0107a3d:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c0107a40:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0107a43:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0107a46:	89 10                	mov    %edx,(%eax)
+}
+c0107a48:	90                   	nop
+c0107a49:	c9                   	leave  
+c0107a4a:	c3                   	ret    
+
+c0107a4b <default_alloc_pages>:
+
+static struct Page *
+default_alloc_pages(size_t n) {
+c0107a4b:	55                   	push   %ebp
+c0107a4c:	89 e5                	mov    %esp,%ebp
+c0107a4e:	83 ec 68             	sub    $0x68,%esp
+    assert(n > 0);
+c0107a51:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0107a55:	75 16                	jne    c0107a6d <default_alloc_pages+0x22>
+c0107a57:	68 10 e8 10 c0       	push   $0xc010e810
+c0107a5c:	68 16 e8 10 c0       	push   $0xc010e816
+c0107a61:	6a 55                	push   $0x55
+c0107a63:	68 2b e8 10 c0       	push   $0xc010e82b
+c0107a68:	e8 87 89 ff ff       	call   c01003f4 <__panic>
+    if (n > nr_free) {
+c0107a6d:	a1 8c 54 1c c0       	mov    0xc01c548c,%eax
+c0107a72:	3b 45 08             	cmp    0x8(%ebp),%eax
+c0107a75:	73 0a                	jae    c0107a81 <default_alloc_pages+0x36>
+        return NULL;
+c0107a77:	b8 00 00 00 00       	mov    $0x0,%eax
+c0107a7c:	e9 50 01 00 00       	jmp    c0107bd1 <default_alloc_pages+0x186>
+    }
+    struct Page *page = NULL;
+c0107a81:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    list_entry_t *le = &free_list;
+c0107a88:	c7 45 f0 84 54 1c c0 	movl   $0xc01c5484,-0x10(%ebp)
+    while ((le = list_next(le)) != &free_list) {
+c0107a8f:	eb 1c                	jmp    c0107aad <default_alloc_pages+0x62>
+        struct Page *p = le2page(le, page_link);
+c0107a91:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107a94:	83 e8 0c             	sub    $0xc,%eax
+c0107a97:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        if (p->property >= n) {
+c0107a9a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0107a9d:	8b 40 08             	mov    0x8(%eax),%eax
+c0107aa0:	3b 45 08             	cmp    0x8(%ebp),%eax
+c0107aa3:	72 08                	jb     c0107aad <default_alloc_pages+0x62>
+            page = p;
+c0107aa5:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0107aa8:	89 45 f4             	mov    %eax,-0xc(%ebp)
+            break;
+c0107aab:	eb 18                	jmp    c0107ac5 <default_alloc_pages+0x7a>
+c0107aad:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107ab0:	89 45 cc             	mov    %eax,-0x34(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c0107ab3:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c0107ab6:	8b 40 04             	mov    0x4(%eax),%eax
+    if (n > nr_free) {
+        return NULL;
+    }
+    struct Page *page = NULL;
+    list_entry_t *le = &free_list;
+    while ((le = list_next(le)) != &free_list) {
+c0107ab9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0107abc:	81 7d f0 84 54 1c c0 	cmpl   $0xc01c5484,-0x10(%ebp)
+c0107ac3:	75 cc                	jne    c0107a91 <default_alloc_pages+0x46>
+        if (p->property >= n) {
+            page = p;
+            break;
+        }
+    }
+    if (page != NULL) {
+c0107ac5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0107ac9:	0f 84 ff 00 00 00    	je     c0107bce <default_alloc_pages+0x183>
+    	list_entry_t *prev =list_prev(&(page->page_link));
+c0107acf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107ad2:	83 c0 0c             	add    $0xc,%eax
+c0107ad5:	89 45 dc             	mov    %eax,-0x24(%ebp)
+ * list_prev - get the previous entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_prev(list_entry_t *listelm) {
+    return listelm->prev;
+c0107ad8:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0107adb:	8b 00                	mov    (%eax),%eax
+c0107add:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        list_del(&(page->page_link));
+c0107ae0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107ae3:	83 c0 0c             	add    $0xc,%eax
+c0107ae6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c0107ae9:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107aec:	8b 40 04             	mov    0x4(%eax),%eax
+c0107aef:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0107af2:	8b 12                	mov    (%edx),%edx
+c0107af4:	89 55 c8             	mov    %edx,-0x38(%ebp)
+c0107af7:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c0107afa:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0107afd:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+c0107b00:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c0107b03:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c0107b06:	8b 55 c8             	mov    -0x38(%ebp),%edx
+c0107b09:	89 10                	mov    %edx,(%eax)
+        if (page->property > n) {
+c0107b0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107b0e:	8b 40 08             	mov    0x8(%eax),%eax
+c0107b11:	3b 45 08             	cmp    0x8(%ebp),%eax
+c0107b14:	0f 86 8e 00 00 00    	jbe    c0107ba8 <default_alloc_pages+0x15d>
+            struct Page *p = page + n;
+c0107b1a:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107b1d:	c1 e0 05             	shl    $0x5,%eax
+c0107b20:	89 c2                	mov    %eax,%edx
+c0107b22:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107b25:	01 d0                	add    %edx,%eax
+c0107b27:	89 45 d8             	mov    %eax,-0x28(%ebp)
+            p->property = page->property - n;
+c0107b2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107b2d:	8b 40 08             	mov    0x8(%eax),%eax
+c0107b30:	2b 45 08             	sub    0x8(%ebp),%eax
+c0107b33:	89 c2                	mov    %eax,%edx
+c0107b35:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0107b38:	89 50 08             	mov    %edx,0x8(%eax)
+            list_add(prev, &(p->page_link));
+c0107b3b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0107b3e:	8d 50 0c             	lea    0xc(%eax),%edx
+c0107b41:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0107b44:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c0107b47:	89 55 bc             	mov    %edx,-0x44(%ebp)
+c0107b4a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0107b4d:	89 45 b8             	mov    %eax,-0x48(%ebp)
+c0107b50:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c0107b53:	89 45 b4             	mov    %eax,-0x4c(%ebp)
+ * Insert the new element @elm *after* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_after(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm, listelm->next);
+c0107b56:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c0107b59:	8b 40 04             	mov    0x4(%eax),%eax
+c0107b5c:	8b 55 b4             	mov    -0x4c(%ebp),%edx
+c0107b5f:	89 55 b0             	mov    %edx,-0x50(%ebp)
+c0107b62:	8b 55 b8             	mov    -0x48(%ebp),%edx
+c0107b65:	89 55 ac             	mov    %edx,-0x54(%ebp)
+c0107b68:	89 45 a8             	mov    %eax,-0x58(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c0107b6b:	8b 45 a8             	mov    -0x58(%ebp),%eax
+c0107b6e:	8b 55 b0             	mov    -0x50(%ebp),%edx
+c0107b71:	89 10                	mov    %edx,(%eax)
+c0107b73:	8b 45 a8             	mov    -0x58(%ebp),%eax
+c0107b76:	8b 10                	mov    (%eax),%edx
+c0107b78:	8b 45 ac             	mov    -0x54(%ebp),%eax
+c0107b7b:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c0107b7e:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c0107b81:	8b 55 a8             	mov    -0x58(%ebp),%edx
+c0107b84:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c0107b87:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c0107b8a:	8b 55 ac             	mov    -0x54(%ebp),%edx
+c0107b8d:	89 10                	mov    %edx,(%eax)
+            SetPageProperty(p);
+c0107b8f:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0107b92:	83 c0 04             	add    $0x4,%eax
+c0107b95:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
+c0107b9c:	89 45 c0             	mov    %eax,-0x40(%ebp)
+c0107b9f:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c0107ba2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0107ba5:	0f ab 10             	bts    %edx,(%eax)
+        }
+        nr_free -= n;
+c0107ba8:	a1 8c 54 1c c0       	mov    0xc01c548c,%eax
+c0107bad:	2b 45 08             	sub    0x8(%ebp),%eax
+c0107bb0:	a3 8c 54 1c c0       	mov    %eax,0xc01c548c
+        ClearPageProperty(page);
+c0107bb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107bb8:	83 c0 04             	add    $0x4,%eax
+c0107bbb:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
+c0107bc2:	89 45 a4             	mov    %eax,-0x5c(%ebp)
+ * @nr:     the bit to clear
+ * @addr:   the address to start counting from
+ * */
+static inline void
+clear_bit(int nr, volatile void *addr) {
+    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
+c0107bc5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
+c0107bc8:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0107bcb:	0f b3 10             	btr    %edx,(%eax)
+    }
+    return page;
+c0107bce:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0107bd1:	c9                   	leave  
+c0107bd2:	c3                   	ret    
+
+c0107bd3 <default_free_pages>:
+
+static void
+default_free_pages(struct Page *base, size_t n) {
+c0107bd3:	55                   	push   %ebp
+c0107bd4:	89 e5                	mov    %esp,%ebp
+c0107bd6:	83 ec 78             	sub    $0x78,%esp
+    assert(n > 0);
+c0107bd9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c0107bdd:	75 16                	jne    c0107bf5 <default_free_pages+0x22>
+c0107bdf:	68 10 e8 10 c0       	push   $0xc010e810
+c0107be4:	68 16 e8 10 c0       	push   $0xc010e816
+c0107be9:	6a 73                	push   $0x73
+c0107beb:	68 2b e8 10 c0       	push   $0xc010e82b
+c0107bf0:	e8 ff 87 ff ff       	call   c01003f4 <__panic>
+    struct Page *p = base;
+c0107bf5:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107bf8:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    for (; p != base + n; p ++) {
+c0107bfb:	e9 8c 00 00 00       	jmp    c0107c8c <default_free_pages+0xb9>
+        assert(!PageReserved(p) && !PageProperty(p));
+c0107c00:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107c03:	83 c0 04             	add    $0x4,%eax
+c0107c06:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+c0107c0d:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0107c10:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c0107c13:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+c0107c16:	0f a3 10             	bt     %edx,(%eax)
+c0107c19:	19 c0                	sbb    %eax,%eax
+c0107c1b:	89 45 bc             	mov    %eax,-0x44(%ebp)
+    return oldbit != 0;
+c0107c1e:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
+c0107c22:	0f 95 c0             	setne  %al
+c0107c25:	0f b6 c0             	movzbl %al,%eax
+c0107c28:	85 c0                	test   %eax,%eax
+c0107c2a:	75 2c                	jne    c0107c58 <default_free_pages+0x85>
+c0107c2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107c2f:	83 c0 04             	add    $0x4,%eax
+c0107c32:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
+c0107c39:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0107c3c:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c0107c3f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0107c42:	0f a3 10             	bt     %edx,(%eax)
+c0107c45:	19 c0                	sbb    %eax,%eax
+c0107c47:	89 45 b4             	mov    %eax,-0x4c(%ebp)
+    return oldbit != 0;
+c0107c4a:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
+c0107c4e:	0f 95 c0             	setne  %al
+c0107c51:	0f b6 c0             	movzbl %al,%eax
+c0107c54:	85 c0                	test   %eax,%eax
+c0107c56:	74 16                	je     c0107c6e <default_free_pages+0x9b>
+c0107c58:	68 54 e8 10 c0       	push   $0xc010e854
+c0107c5d:	68 16 e8 10 c0       	push   $0xc010e816
+c0107c62:	6a 76                	push   $0x76
+c0107c64:	68 2b e8 10 c0       	push   $0xc010e82b
+c0107c69:	e8 86 87 ff ff       	call   c01003f4 <__panic>
+        p->flags = 0;
+c0107c6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107c71:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
+        set_page_ref(p, 0);
+c0107c78:	83 ec 08             	sub    $0x8,%esp
+c0107c7b:	6a 00                	push   $0x0
+c0107c7d:	ff 75 f4             	pushl  -0xc(%ebp)
+c0107c80:	e8 65 fc ff ff       	call   c01078ea <set_page_ref>
+c0107c85:	83 c4 10             	add    $0x10,%esp
+
+static void
+default_free_pages(struct Page *base, size_t n) {
+    assert(n > 0);
+    struct Page *p = base;
+    for (; p != base + n; p ++) {
+c0107c88:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
+c0107c8c:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0107c8f:	c1 e0 05             	shl    $0x5,%eax
+c0107c92:	89 c2                	mov    %eax,%edx
+c0107c94:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107c97:	01 d0                	add    %edx,%eax
+c0107c99:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0107c9c:	0f 85 5e ff ff ff    	jne    c0107c00 <default_free_pages+0x2d>
+        assert(!PageReserved(p) && !PageProperty(p));
+        p->flags = 0;
+        set_page_ref(p, 0);
+    }
+    base->property = n;
+c0107ca2:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107ca5:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0107ca8:	89 50 08             	mov    %edx,0x8(%eax)
+    SetPageProperty(base);
+c0107cab:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107cae:	83 c0 04             	add    $0x4,%eax
+c0107cb1:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
+c0107cb8:	89 45 b0             	mov    %eax,-0x50(%ebp)
+ * Note that @nr may be almost arbitrarily large; this function is not
+ * restricted to acting on a single-word quantity.
+ * */
+static inline void
+set_bit(int nr, volatile void *addr) {
+    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
+c0107cbb:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c0107cbe:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0107cc1:	0f ab 10             	bts    %edx,(%eax)
+c0107cc4:	c7 45 e8 84 54 1c c0 	movl   $0xc01c5484,-0x18(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c0107ccb:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0107cce:	8b 40 04             	mov    0x4(%eax),%eax
+    list_entry_t *le = list_next(&free_list);
+c0107cd1:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    while (le != &free_list) {
+c0107cd4:	e9 fa 00 00 00       	jmp    c0107dd3 <default_free_pages+0x200>
+        p = le2page(le, page_link);
+c0107cd9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107cdc:	83 e8 0c             	sub    $0xc,%eax
+c0107cdf:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0107ce2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107ce5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0107ce8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0107ceb:	8b 40 04             	mov    0x4(%eax),%eax
+        le = list_next(le);
+c0107cee:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        if (base + base->property == p) {
+c0107cf1:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107cf4:	8b 40 08             	mov    0x8(%eax),%eax
+c0107cf7:	c1 e0 05             	shl    $0x5,%eax
+c0107cfa:	89 c2                	mov    %eax,%edx
+c0107cfc:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107cff:	01 d0                	add    %edx,%eax
+c0107d01:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0107d04:	75 5a                	jne    c0107d60 <default_free_pages+0x18d>
+            base->property += p->property;
+c0107d06:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107d09:	8b 50 08             	mov    0x8(%eax),%edx
+c0107d0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107d0f:	8b 40 08             	mov    0x8(%eax),%eax
+c0107d12:	01 c2                	add    %eax,%edx
+c0107d14:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107d17:	89 50 08             	mov    %edx,0x8(%eax)
+            ClearPageProperty(p);
+c0107d1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107d1d:	83 c0 04             	add    $0x4,%eax
+c0107d20:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
+c0107d27:	89 45 a4             	mov    %eax,-0x5c(%ebp)
+ * @nr:     the bit to clear
+ * @addr:   the address to start counting from
+ * */
+static inline void
+clear_bit(int nr, volatile void *addr) {
+    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
+c0107d2a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
+c0107d2d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0107d30:	0f b3 10             	btr    %edx,(%eax)
+            list_del(&(p->page_link));
+c0107d33:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107d36:	83 c0 0c             	add    $0xc,%eax
+c0107d39:	89 45 dc             	mov    %eax,-0x24(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c0107d3c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0107d3f:	8b 40 04             	mov    0x4(%eax),%eax
+c0107d42:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0107d45:	8b 12                	mov    (%edx),%edx
+c0107d47:	89 55 ac             	mov    %edx,-0x54(%ebp)
+c0107d4a:	89 45 a8             	mov    %eax,-0x58(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c0107d4d:	8b 45 ac             	mov    -0x54(%ebp),%eax
+c0107d50:	8b 55 a8             	mov    -0x58(%ebp),%edx
+c0107d53:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c0107d56:	8b 45 a8             	mov    -0x58(%ebp),%eax
+c0107d59:	8b 55 ac             	mov    -0x54(%ebp),%edx
+c0107d5c:	89 10                	mov    %edx,(%eax)
+c0107d5e:	eb 73                	jmp    c0107dd3 <default_free_pages+0x200>
+        }
+        else if (p + p->property == base) {
+c0107d60:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107d63:	8b 40 08             	mov    0x8(%eax),%eax
+c0107d66:	c1 e0 05             	shl    $0x5,%eax
+c0107d69:	89 c2                	mov    %eax,%edx
+c0107d6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107d6e:	01 d0                	add    %edx,%eax
+c0107d70:	3b 45 08             	cmp    0x8(%ebp),%eax
+c0107d73:	75 5e                	jne    c0107dd3 <default_free_pages+0x200>
+            p->property += base->property;
+c0107d75:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107d78:	8b 50 08             	mov    0x8(%eax),%edx
+c0107d7b:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107d7e:	8b 40 08             	mov    0x8(%eax),%eax
+c0107d81:	01 c2                	add    %eax,%edx
+c0107d83:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107d86:	89 50 08             	mov    %edx,0x8(%eax)
+            ClearPageProperty(base);
+c0107d89:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107d8c:	83 c0 04             	add    $0x4,%eax
+c0107d8f:	c7 45 cc 01 00 00 00 	movl   $0x1,-0x34(%ebp)
+c0107d96:	89 45 98             	mov    %eax,-0x68(%ebp)
+c0107d99:	8b 45 98             	mov    -0x68(%ebp),%eax
+c0107d9c:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c0107d9f:	0f b3 10             	btr    %edx,(%eax)
+            base = p;
+c0107da2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107da5:	89 45 08             	mov    %eax,0x8(%ebp)
+            list_del(&(p->page_link));
+c0107da8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107dab:	83 c0 0c             	add    $0xc,%eax
+c0107dae:	89 45 d8             	mov    %eax,-0x28(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c0107db1:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0107db4:	8b 40 04             	mov    0x4(%eax),%eax
+c0107db7:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c0107dba:	8b 12                	mov    (%edx),%edx
+c0107dbc:	89 55 a0             	mov    %edx,-0x60(%ebp)
+c0107dbf:	89 45 9c             	mov    %eax,-0x64(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c0107dc2:	8b 45 a0             	mov    -0x60(%ebp),%eax
+c0107dc5:	8b 55 9c             	mov    -0x64(%ebp),%edx
+c0107dc8:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c0107dcb:	8b 45 9c             	mov    -0x64(%ebp),%eax
+c0107dce:	8b 55 a0             	mov    -0x60(%ebp),%edx
+c0107dd1:	89 10                	mov    %edx,(%eax)
+        set_page_ref(p, 0);
+    }
+    base->property = n;
+    SetPageProperty(base);
+    list_entry_t *le = list_next(&free_list);
+    while (le != &free_list) {
+c0107dd3:	81 7d f0 84 54 1c c0 	cmpl   $0xc01c5484,-0x10(%ebp)
+c0107dda:	0f 85 f9 fe ff ff    	jne    c0107cd9 <default_free_pages+0x106>
+            ClearPageProperty(base);
+            base = p;
+            list_del(&(p->page_link));
+        }
+    }
+    nr_free += n;
+c0107de0:	8b 15 8c 54 1c c0    	mov    0xc01c548c,%edx
+c0107de6:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0107de9:	01 d0                	add    %edx,%eax
+c0107deb:	a3 8c 54 1c c0       	mov    %eax,0xc01c548c
+    le = &free_list;
+c0107df0:	c7 45 f0 84 54 1c c0 	movl   $0xc01c5484,-0x10(%ebp)
+    while ((le = list_next(le)) != &free_list && le2page(le,page_link)<base);
+c0107df7:	90                   	nop
+c0107df8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107dfb:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c0107dfe:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0107e01:	8b 40 04             	mov    0x4(%eax),%eax
+c0107e04:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0107e07:	81 7d f0 84 54 1c c0 	cmpl   $0xc01c5484,-0x10(%ebp)
+c0107e0e:	74 0b                	je     c0107e1b <default_free_pages+0x248>
+c0107e10:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107e13:	83 e8 0c             	sub    $0xc,%eax
+c0107e16:	3b 45 08             	cmp    0x8(%ebp),%eax
+c0107e19:	72 dd                	jb     c0107df8 <default_free_pages+0x225>
+    list_add_before(le, &(base->page_link));
+c0107e1b:	8b 45 08             	mov    0x8(%ebp),%eax
+c0107e1e:	8d 50 0c             	lea    0xc(%eax),%edx
+c0107e21:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107e24:	89 45 c8             	mov    %eax,-0x38(%ebp)
+c0107e27:	89 55 94             	mov    %edx,-0x6c(%ebp)
+ * Insert the new element @elm *before* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_before(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm->prev, listelm);
+c0107e2a:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0107e2d:	8b 00                	mov    (%eax),%eax
+c0107e2f:	8b 55 94             	mov    -0x6c(%ebp),%edx
+c0107e32:	89 55 90             	mov    %edx,-0x70(%ebp)
+c0107e35:	89 45 8c             	mov    %eax,-0x74(%ebp)
+c0107e38:	8b 45 c8             	mov    -0x38(%ebp),%eax
+c0107e3b:	89 45 88             	mov    %eax,-0x78(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c0107e3e:	8b 45 88             	mov    -0x78(%ebp),%eax
+c0107e41:	8b 55 90             	mov    -0x70(%ebp),%edx
+c0107e44:	89 10                	mov    %edx,(%eax)
+c0107e46:	8b 45 88             	mov    -0x78(%ebp),%eax
+c0107e49:	8b 10                	mov    (%eax),%edx
+c0107e4b:	8b 45 8c             	mov    -0x74(%ebp),%eax
+c0107e4e:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c0107e51:	8b 45 90             	mov    -0x70(%ebp),%eax
+c0107e54:	8b 55 88             	mov    -0x78(%ebp),%edx
+c0107e57:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c0107e5a:	8b 45 90             	mov    -0x70(%ebp),%eax
+c0107e5d:	8b 55 8c             	mov    -0x74(%ebp),%edx
+c0107e60:	89 10                	mov    %edx,(%eax)
+}
+c0107e62:	90                   	nop
+c0107e63:	c9                   	leave  
+c0107e64:	c3                   	ret    
+
+c0107e65 <default_nr_free_pages>:
+
+static size_t
+default_nr_free_pages(void) {
+c0107e65:	55                   	push   %ebp
+c0107e66:	89 e5                	mov    %esp,%ebp
+    return nr_free;
+c0107e68:	a1 8c 54 1c c0       	mov    0xc01c548c,%eax
+}
+c0107e6d:	5d                   	pop    %ebp
+c0107e6e:	c3                   	ret    
+
+c0107e6f <basic_check>:
+
+static void
+basic_check(void) {
+c0107e6f:	55                   	push   %ebp
+c0107e70:	89 e5                	mov    %esp,%ebp
+c0107e72:	83 ec 38             	sub    $0x38,%esp
+    struct Page *p0, *p1, *p2;
+    p0 = p1 = p2 = NULL;
+c0107e75:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0107e7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0107e7f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0107e82:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107e85:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    assert((p0 = alloc_page()) != NULL);
+c0107e88:	83 ec 0c             	sub    $0xc,%esp
+c0107e8b:	6a 01                	push   $0x1
+c0107e8d:	e8 ce b9 ff ff       	call   c0103860 <alloc_pages>
+c0107e92:	83 c4 10             	add    $0x10,%esp
+c0107e95:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0107e98:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c0107e9c:	75 19                	jne    c0107eb7 <basic_check+0x48>
+c0107e9e:	68 79 e8 10 c0       	push   $0xc010e879
+c0107ea3:	68 16 e8 10 c0       	push   $0xc010e816
+c0107ea8:	68 9b 00 00 00       	push   $0x9b
+c0107ead:	68 2b e8 10 c0       	push   $0xc010e82b
+c0107eb2:	e8 3d 85 ff ff       	call   c01003f4 <__panic>
+    assert((p1 = alloc_page()) != NULL);
+c0107eb7:	83 ec 0c             	sub    $0xc,%esp
+c0107eba:	6a 01                	push   $0x1
+c0107ebc:	e8 9f b9 ff ff       	call   c0103860 <alloc_pages>
+c0107ec1:	83 c4 10             	add    $0x10,%esp
+c0107ec4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0107ec7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0107ecb:	75 19                	jne    c0107ee6 <basic_check+0x77>
+c0107ecd:	68 95 e8 10 c0       	push   $0xc010e895
+c0107ed2:	68 16 e8 10 c0       	push   $0xc010e816
+c0107ed7:	68 9c 00 00 00       	push   $0x9c
+c0107edc:	68 2b e8 10 c0       	push   $0xc010e82b
+c0107ee1:	e8 0e 85 ff ff       	call   c01003f4 <__panic>
+    assert((p2 = alloc_page()) != NULL);
+c0107ee6:	83 ec 0c             	sub    $0xc,%esp
+c0107ee9:	6a 01                	push   $0x1
+c0107eeb:	e8 70 b9 ff ff       	call   c0103860 <alloc_pages>
+c0107ef0:	83 c4 10             	add    $0x10,%esp
+c0107ef3:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0107ef6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0107efa:	75 19                	jne    c0107f15 <basic_check+0xa6>
+c0107efc:	68 b1 e8 10 c0       	push   $0xc010e8b1
+c0107f01:	68 16 e8 10 c0       	push   $0xc010e816
+c0107f06:	68 9d 00 00 00       	push   $0x9d
+c0107f0b:	68 2b e8 10 c0       	push   $0xc010e82b
+c0107f10:	e8 df 84 ff ff       	call   c01003f4 <__panic>
+
+    assert(p0 != p1 && p0 != p2 && p1 != p2);
+c0107f15:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107f18:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c0107f1b:	74 10                	je     c0107f2d <basic_check+0xbe>
+c0107f1d:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0107f20:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0107f23:	74 08                	je     c0107f2d <basic_check+0xbe>
+c0107f25:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0107f28:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+c0107f2b:	75 19                	jne    c0107f46 <basic_check+0xd7>
+c0107f2d:	68 d0 e8 10 c0       	push   $0xc010e8d0
+c0107f32:	68 16 e8 10 c0       	push   $0xc010e816
+c0107f37:	68 9f 00 00 00       	push   $0x9f
+c0107f3c:	68 2b e8 10 c0       	push   $0xc010e82b
+c0107f41:	e8 ae 84 ff ff       	call   c01003f4 <__panic>
+    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
+c0107f46:	83 ec 0c             	sub    $0xc,%esp
+c0107f49:	ff 75 ec             	pushl  -0x14(%ebp)
+c0107f4c:	e8 8f f9 ff ff       	call   c01078e0 <page_ref>
+c0107f51:	83 c4 10             	add    $0x10,%esp
+c0107f54:	85 c0                	test   %eax,%eax
+c0107f56:	75 24                	jne    c0107f7c <basic_check+0x10d>
+c0107f58:	83 ec 0c             	sub    $0xc,%esp
+c0107f5b:	ff 75 f0             	pushl  -0x10(%ebp)
+c0107f5e:	e8 7d f9 ff ff       	call   c01078e0 <page_ref>
+c0107f63:	83 c4 10             	add    $0x10,%esp
+c0107f66:	85 c0                	test   %eax,%eax
+c0107f68:	75 12                	jne    c0107f7c <basic_check+0x10d>
+c0107f6a:	83 ec 0c             	sub    $0xc,%esp
+c0107f6d:	ff 75 f4             	pushl  -0xc(%ebp)
+c0107f70:	e8 6b f9 ff ff       	call   c01078e0 <page_ref>
+c0107f75:	83 c4 10             	add    $0x10,%esp
+c0107f78:	85 c0                	test   %eax,%eax
+c0107f7a:	74 19                	je     c0107f95 <basic_check+0x126>
+c0107f7c:	68 f4 e8 10 c0       	push   $0xc010e8f4
+c0107f81:	68 16 e8 10 c0       	push   $0xc010e816
+c0107f86:	68 a0 00 00 00       	push   $0xa0
+c0107f8b:	68 2b e8 10 c0       	push   $0xc010e82b
+c0107f90:	e8 5f 84 ff ff       	call   c01003f4 <__panic>
+
+    assert(page2pa(p0) < npage * PGSIZE);
+c0107f95:	83 ec 0c             	sub    $0xc,%esp
+c0107f98:	ff 75 ec             	pushl  -0x14(%ebp)
+c0107f9b:	e8 2d f9 ff ff       	call   c01078cd <page2pa>
+c0107fa0:	83 c4 10             	add    $0x10,%esp
+c0107fa3:	89 c2                	mov    %eax,%edx
+c0107fa5:	a1 60 32 1c c0       	mov    0xc01c3260,%eax
+c0107faa:	c1 e0 0c             	shl    $0xc,%eax
+c0107fad:	39 c2                	cmp    %eax,%edx
+c0107faf:	72 19                	jb     c0107fca <basic_check+0x15b>
+c0107fb1:	68 30 e9 10 c0       	push   $0xc010e930
+c0107fb6:	68 16 e8 10 c0       	push   $0xc010e816
+c0107fbb:	68 a2 00 00 00       	push   $0xa2
+c0107fc0:	68 2b e8 10 c0       	push   $0xc010e82b
+c0107fc5:	e8 2a 84 ff ff       	call   c01003f4 <__panic>
+    assert(page2pa(p1) < npage * PGSIZE);
+c0107fca:	83 ec 0c             	sub    $0xc,%esp
+c0107fcd:	ff 75 f0             	pushl  -0x10(%ebp)
+c0107fd0:	e8 f8 f8 ff ff       	call   c01078cd <page2pa>
+c0107fd5:	83 c4 10             	add    $0x10,%esp
+c0107fd8:	89 c2                	mov    %eax,%edx
+c0107fda:	a1 60 32 1c c0       	mov    0xc01c3260,%eax
+c0107fdf:	c1 e0 0c             	shl    $0xc,%eax
+c0107fe2:	39 c2                	cmp    %eax,%edx
+c0107fe4:	72 19                	jb     c0107fff <basic_check+0x190>
+c0107fe6:	68 4d e9 10 c0       	push   $0xc010e94d
+c0107feb:	68 16 e8 10 c0       	push   $0xc010e816
+c0107ff0:	68 a3 00 00 00       	push   $0xa3
+c0107ff5:	68 2b e8 10 c0       	push   $0xc010e82b
+c0107ffa:	e8 f5 83 ff ff       	call   c01003f4 <__panic>
+    assert(page2pa(p2) < npage * PGSIZE);
+c0107fff:	83 ec 0c             	sub    $0xc,%esp
+c0108002:	ff 75 f4             	pushl  -0xc(%ebp)
+c0108005:	e8 c3 f8 ff ff       	call   c01078cd <page2pa>
+c010800a:	83 c4 10             	add    $0x10,%esp
+c010800d:	89 c2                	mov    %eax,%edx
+c010800f:	a1 60 32 1c c0       	mov    0xc01c3260,%eax
+c0108014:	c1 e0 0c             	shl    $0xc,%eax
+c0108017:	39 c2                	cmp    %eax,%edx
+c0108019:	72 19                	jb     c0108034 <basic_check+0x1c5>
+c010801b:	68 6a e9 10 c0       	push   $0xc010e96a
+c0108020:	68 16 e8 10 c0       	push   $0xc010e816
+c0108025:	68 a4 00 00 00       	push   $0xa4
+c010802a:	68 2b e8 10 c0       	push   $0xc010e82b
+c010802f:	e8 c0 83 ff ff       	call   c01003f4 <__panic>
+
+    list_entry_t free_list_store = free_list;
+c0108034:	a1 84 54 1c c0       	mov    0xc01c5484,%eax
+c0108039:	8b 15 88 54 1c c0    	mov    0xc01c5488,%edx
+c010803f:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c0108042:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+c0108045:	c7 45 e4 84 54 1c c0 	movl   $0xc01c5484,-0x1c(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c010804c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010804f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0108052:	89 50 04             	mov    %edx,0x4(%eax)
+c0108055:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0108058:	8b 50 04             	mov    0x4(%eax),%edx
+c010805b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010805e:	89 10                	mov    %edx,(%eax)
+c0108060:	c7 45 d8 84 54 1c c0 	movl   $0xc01c5484,-0x28(%ebp)
+ * list_empty - tests whether a list is empty
+ * @list:       the list to test.
+ * */
+static inline bool
+list_empty(list_entry_t *list) {
+    return list->next == list;
+c0108067:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010806a:	8b 40 04             	mov    0x4(%eax),%eax
+c010806d:	39 45 d8             	cmp    %eax,-0x28(%ebp)
+c0108070:	0f 94 c0             	sete   %al
+c0108073:	0f b6 c0             	movzbl %al,%eax
+    list_init(&free_list);
+    assert(list_empty(&free_list));
+c0108076:	85 c0                	test   %eax,%eax
+c0108078:	75 19                	jne    c0108093 <basic_check+0x224>
+c010807a:	68 87 e9 10 c0       	push   $0xc010e987
+c010807f:	68 16 e8 10 c0       	push   $0xc010e816
+c0108084:	68 a8 00 00 00       	push   $0xa8
+c0108089:	68 2b e8 10 c0       	push   $0xc010e82b
+c010808e:	e8 61 83 ff ff       	call   c01003f4 <__panic>
+
+    unsigned int nr_free_store = nr_free;
+c0108093:	a1 8c 54 1c c0       	mov    0xc01c548c,%eax
+c0108098:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    nr_free = 0;
+c010809b:	c7 05 8c 54 1c c0 00 	movl   $0x0,0xc01c548c
+c01080a2:	00 00 00 
+
+    assert(alloc_page() == NULL);
+c01080a5:	83 ec 0c             	sub    $0xc,%esp
+c01080a8:	6a 01                	push   $0x1
+c01080aa:	e8 b1 b7 ff ff       	call   c0103860 <alloc_pages>
+c01080af:	83 c4 10             	add    $0x10,%esp
+c01080b2:	85 c0                	test   %eax,%eax
+c01080b4:	74 19                	je     c01080cf <basic_check+0x260>
+c01080b6:	68 9e e9 10 c0       	push   $0xc010e99e
+c01080bb:	68 16 e8 10 c0       	push   $0xc010e816
+c01080c0:	68 ad 00 00 00       	push   $0xad
+c01080c5:	68 2b e8 10 c0       	push   $0xc010e82b
+c01080ca:	e8 25 83 ff ff       	call   c01003f4 <__panic>
+
+    free_page(p0);
+c01080cf:	83 ec 08             	sub    $0x8,%esp
+c01080d2:	6a 01                	push   $0x1
+c01080d4:	ff 75 ec             	pushl  -0x14(%ebp)
+c01080d7:	e8 f0 b7 ff ff       	call   c01038cc <free_pages>
+c01080dc:	83 c4 10             	add    $0x10,%esp
+    free_page(p1);
+c01080df:	83 ec 08             	sub    $0x8,%esp
+c01080e2:	6a 01                	push   $0x1
+c01080e4:	ff 75 f0             	pushl  -0x10(%ebp)
+c01080e7:	e8 e0 b7 ff ff       	call   c01038cc <free_pages>
+c01080ec:	83 c4 10             	add    $0x10,%esp
+    free_page(p2);
+c01080ef:	83 ec 08             	sub    $0x8,%esp
+c01080f2:	6a 01                	push   $0x1
+c01080f4:	ff 75 f4             	pushl  -0xc(%ebp)
+c01080f7:	e8 d0 b7 ff ff       	call   c01038cc <free_pages>
+c01080fc:	83 c4 10             	add    $0x10,%esp
+    assert(nr_free == 3);
+c01080ff:	a1 8c 54 1c c0       	mov    0xc01c548c,%eax
+c0108104:	83 f8 03             	cmp    $0x3,%eax
+c0108107:	74 19                	je     c0108122 <basic_check+0x2b3>
+c0108109:	68 b3 e9 10 c0       	push   $0xc010e9b3
+c010810e:	68 16 e8 10 c0       	push   $0xc010e816
+c0108113:	68 b2 00 00 00       	push   $0xb2
+c0108118:	68 2b e8 10 c0       	push   $0xc010e82b
+c010811d:	e8 d2 82 ff ff       	call   c01003f4 <__panic>
+
+    assert((p0 = alloc_page()) != NULL);
+c0108122:	83 ec 0c             	sub    $0xc,%esp
+c0108125:	6a 01                	push   $0x1
+c0108127:	e8 34 b7 ff ff       	call   c0103860 <alloc_pages>
+c010812c:	83 c4 10             	add    $0x10,%esp
+c010812f:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0108132:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c0108136:	75 19                	jne    c0108151 <basic_check+0x2e2>
+c0108138:	68 79 e8 10 c0       	push   $0xc010e879
+c010813d:	68 16 e8 10 c0       	push   $0xc010e816
+c0108142:	68 b4 00 00 00       	push   $0xb4
+c0108147:	68 2b e8 10 c0       	push   $0xc010e82b
+c010814c:	e8 a3 82 ff ff       	call   c01003f4 <__panic>
+    assert((p1 = alloc_page()) != NULL);
+c0108151:	83 ec 0c             	sub    $0xc,%esp
+c0108154:	6a 01                	push   $0x1
+c0108156:	e8 05 b7 ff ff       	call   c0103860 <alloc_pages>
+c010815b:	83 c4 10             	add    $0x10,%esp
+c010815e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0108161:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0108165:	75 19                	jne    c0108180 <basic_check+0x311>
+c0108167:	68 95 e8 10 c0       	push   $0xc010e895
+c010816c:	68 16 e8 10 c0       	push   $0xc010e816
+c0108171:	68 b5 00 00 00       	push   $0xb5
+c0108176:	68 2b e8 10 c0       	push   $0xc010e82b
+c010817b:	e8 74 82 ff ff       	call   c01003f4 <__panic>
+    assert((p2 = alloc_page()) != NULL);
+c0108180:	83 ec 0c             	sub    $0xc,%esp
+c0108183:	6a 01                	push   $0x1
+c0108185:	e8 d6 b6 ff ff       	call   c0103860 <alloc_pages>
+c010818a:	83 c4 10             	add    $0x10,%esp
+c010818d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0108190:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0108194:	75 19                	jne    c01081af <basic_check+0x340>
+c0108196:	68 b1 e8 10 c0       	push   $0xc010e8b1
+c010819b:	68 16 e8 10 c0       	push   $0xc010e816
+c01081a0:	68 b6 00 00 00       	push   $0xb6
+c01081a5:	68 2b e8 10 c0       	push   $0xc010e82b
+c01081aa:	e8 45 82 ff ff       	call   c01003f4 <__panic>
+
+    assert(alloc_page() == NULL);
+c01081af:	83 ec 0c             	sub    $0xc,%esp
+c01081b2:	6a 01                	push   $0x1
+c01081b4:	e8 a7 b6 ff ff       	call   c0103860 <alloc_pages>
+c01081b9:	83 c4 10             	add    $0x10,%esp
+c01081bc:	85 c0                	test   %eax,%eax
+c01081be:	74 19                	je     c01081d9 <basic_check+0x36a>
+c01081c0:	68 9e e9 10 c0       	push   $0xc010e99e
+c01081c5:	68 16 e8 10 c0       	push   $0xc010e816
+c01081ca:	68 b8 00 00 00       	push   $0xb8
+c01081cf:	68 2b e8 10 c0       	push   $0xc010e82b
+c01081d4:	e8 1b 82 ff ff       	call   c01003f4 <__panic>
+
+    free_page(p0);
+c01081d9:	83 ec 08             	sub    $0x8,%esp
+c01081dc:	6a 01                	push   $0x1
+c01081de:	ff 75 ec             	pushl  -0x14(%ebp)
+c01081e1:	e8 e6 b6 ff ff       	call   c01038cc <free_pages>
+c01081e6:	83 c4 10             	add    $0x10,%esp
+c01081e9:	c7 45 e8 84 54 1c c0 	movl   $0xc01c5484,-0x18(%ebp)
+c01081f0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c01081f3:	8b 40 04             	mov    0x4(%eax),%eax
+c01081f6:	39 45 e8             	cmp    %eax,-0x18(%ebp)
+c01081f9:	0f 94 c0             	sete   %al
+c01081fc:	0f b6 c0             	movzbl %al,%eax
+    assert(!list_empty(&free_list));
+c01081ff:	85 c0                	test   %eax,%eax
+c0108201:	74 19                	je     c010821c <basic_check+0x3ad>
+c0108203:	68 c0 e9 10 c0       	push   $0xc010e9c0
+c0108208:	68 16 e8 10 c0       	push   $0xc010e816
+c010820d:	68 bb 00 00 00       	push   $0xbb
+c0108212:	68 2b e8 10 c0       	push   $0xc010e82b
+c0108217:	e8 d8 81 ff ff       	call   c01003f4 <__panic>
+
+    struct Page *p;
+    assert((p = alloc_page()) == p0);
+c010821c:	83 ec 0c             	sub    $0xc,%esp
+c010821f:	6a 01                	push   $0x1
+c0108221:	e8 3a b6 ff ff       	call   c0103860 <alloc_pages>
+c0108226:	83 c4 10             	add    $0x10,%esp
+c0108229:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c010822c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010822f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c0108232:	74 19                	je     c010824d <basic_check+0x3de>
+c0108234:	68 d8 e9 10 c0       	push   $0xc010e9d8
+c0108239:	68 16 e8 10 c0       	push   $0xc010e816
+c010823e:	68 be 00 00 00       	push   $0xbe
+c0108243:	68 2b e8 10 c0       	push   $0xc010e82b
+c0108248:	e8 a7 81 ff ff       	call   c01003f4 <__panic>
+    assert(alloc_page() == NULL);
+c010824d:	83 ec 0c             	sub    $0xc,%esp
+c0108250:	6a 01                	push   $0x1
+c0108252:	e8 09 b6 ff ff       	call   c0103860 <alloc_pages>
+c0108257:	83 c4 10             	add    $0x10,%esp
+c010825a:	85 c0                	test   %eax,%eax
+c010825c:	74 19                	je     c0108277 <basic_check+0x408>
+c010825e:	68 9e e9 10 c0       	push   $0xc010e99e
+c0108263:	68 16 e8 10 c0       	push   $0xc010e816
+c0108268:	68 bf 00 00 00       	push   $0xbf
+c010826d:	68 2b e8 10 c0       	push   $0xc010e82b
+c0108272:	e8 7d 81 ff ff       	call   c01003f4 <__panic>
+
+    assert(nr_free == 0);
+c0108277:	a1 8c 54 1c c0       	mov    0xc01c548c,%eax
+c010827c:	85 c0                	test   %eax,%eax
+c010827e:	74 19                	je     c0108299 <basic_check+0x42a>
+c0108280:	68 f1 e9 10 c0       	push   $0xc010e9f1
+c0108285:	68 16 e8 10 c0       	push   $0xc010e816
+c010828a:	68 c1 00 00 00       	push   $0xc1
+c010828f:	68 2b e8 10 c0       	push   $0xc010e82b
+c0108294:	e8 5b 81 ff ff       	call   c01003f4 <__panic>
+    free_list = free_list_store;
+c0108299:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010829c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c010829f:	a3 84 54 1c c0       	mov    %eax,0xc01c5484
+c01082a4:	89 15 88 54 1c c0    	mov    %edx,0xc01c5488
+    nr_free = nr_free_store;
+c01082aa:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c01082ad:	a3 8c 54 1c c0       	mov    %eax,0xc01c548c
+
+    free_page(p);
+c01082b2:	83 ec 08             	sub    $0x8,%esp
+c01082b5:	6a 01                	push   $0x1
+c01082b7:	ff 75 dc             	pushl  -0x24(%ebp)
+c01082ba:	e8 0d b6 ff ff       	call   c01038cc <free_pages>
+c01082bf:	83 c4 10             	add    $0x10,%esp
+    free_page(p1);
+c01082c2:	83 ec 08             	sub    $0x8,%esp
+c01082c5:	6a 01                	push   $0x1
+c01082c7:	ff 75 f0             	pushl  -0x10(%ebp)
+c01082ca:	e8 fd b5 ff ff       	call   c01038cc <free_pages>
+c01082cf:	83 c4 10             	add    $0x10,%esp
+    free_page(p2);
+c01082d2:	83 ec 08             	sub    $0x8,%esp
+c01082d5:	6a 01                	push   $0x1
+c01082d7:	ff 75 f4             	pushl  -0xc(%ebp)
+c01082da:	e8 ed b5 ff ff       	call   c01038cc <free_pages>
+c01082df:	83 c4 10             	add    $0x10,%esp
+}
+c01082e2:	90                   	nop
+c01082e3:	c9                   	leave  
+c01082e4:	c3                   	ret    
+
+c01082e5 <default_check>:
+
+// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
+// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
+static void
+default_check(void) {
+c01082e5:	55                   	push   %ebp
+c01082e6:	89 e5                	mov    %esp,%ebp
+c01082e8:	81 ec 88 00 00 00    	sub    $0x88,%esp
+    int count = 0, total = 0;
+c01082ee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c01082f5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    list_entry_t *le = &free_list;
+c01082fc:	c7 45 ec 84 54 1c c0 	movl   $0xc01c5484,-0x14(%ebp)
+    while ((le = list_next(le)) != &free_list) {
+c0108303:	eb 60                	jmp    c0108365 <default_check+0x80>
+        struct Page *p = le2page(le, page_link);
+c0108305:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0108308:	83 e8 0c             	sub    $0xc,%eax
+c010830b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        assert(PageProperty(p));
+c010830e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0108311:	83 c0 04             	add    $0x4,%eax
+c0108314:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
+c010831b:	89 45 ac             	mov    %eax,-0x54(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c010831e:	8b 45 ac             	mov    -0x54(%ebp),%eax
+c0108321:	8b 55 b0             	mov    -0x50(%ebp),%edx
+c0108324:	0f a3 10             	bt     %edx,(%eax)
+c0108327:	19 c0                	sbb    %eax,%eax
+c0108329:	89 45 a8             	mov    %eax,-0x58(%ebp)
+    return oldbit != 0;
+c010832c:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
+c0108330:	0f 95 c0             	setne  %al
+c0108333:	0f b6 c0             	movzbl %al,%eax
+c0108336:	85 c0                	test   %eax,%eax
+c0108338:	75 19                	jne    c0108353 <default_check+0x6e>
+c010833a:	68 fe e9 10 c0       	push   $0xc010e9fe
+c010833f:	68 16 e8 10 c0       	push   $0xc010e816
+c0108344:	68 d2 00 00 00       	push   $0xd2
+c0108349:	68 2b e8 10 c0       	push   $0xc010e82b
+c010834e:	e8 a1 80 ff ff       	call   c01003f4 <__panic>
+        count ++, total += p->property;
+c0108353:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0108357:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010835a:	8b 50 08             	mov    0x8(%eax),%edx
+c010835d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0108360:	01 d0                	add    %edx,%eax
+c0108362:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0108365:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0108368:	89 45 e0             	mov    %eax,-0x20(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c010836b:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010836e:	8b 40 04             	mov    0x4(%eax),%eax
+// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
+static void
+default_check(void) {
+    int count = 0, total = 0;
+    list_entry_t *le = &free_list;
+    while ((le = list_next(le)) != &free_list) {
+c0108371:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0108374:	81 7d ec 84 54 1c c0 	cmpl   $0xc01c5484,-0x14(%ebp)
+c010837b:	75 88                	jne    c0108305 <default_check+0x20>
+        struct Page *p = le2page(le, page_link);
+        assert(PageProperty(p));
+        count ++, total += p->property;
+    }
+    assert(total == nr_free_pages());
+c010837d:	e8 7f b5 ff ff       	call   c0103901 <nr_free_pages>
+c0108382:	89 c2                	mov    %eax,%edx
+c0108384:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0108387:	39 c2                	cmp    %eax,%edx
+c0108389:	74 19                	je     c01083a4 <default_check+0xbf>
+c010838b:	68 0e ea 10 c0       	push   $0xc010ea0e
+c0108390:	68 16 e8 10 c0       	push   $0xc010e816
+c0108395:	68 d5 00 00 00       	push   $0xd5
+c010839a:	68 2b e8 10 c0       	push   $0xc010e82b
+c010839f:	e8 50 80 ff ff       	call   c01003f4 <__panic>
+
+    basic_check();
+c01083a4:	e8 c6 fa ff ff       	call   c0107e6f <basic_check>
+
+    struct Page *p0 = alloc_pages(5), *p1, *p2;
+c01083a9:	83 ec 0c             	sub    $0xc,%esp
+c01083ac:	6a 05                	push   $0x5
+c01083ae:	e8 ad b4 ff ff       	call   c0103860 <alloc_pages>
+c01083b3:	83 c4 10             	add    $0x10,%esp
+c01083b6:	89 45 dc             	mov    %eax,-0x24(%ebp)
+    assert(p0 != NULL);
+c01083b9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c01083bd:	75 19                	jne    c01083d8 <default_check+0xf3>
+c01083bf:	68 27 ea 10 c0       	push   $0xc010ea27
+c01083c4:	68 16 e8 10 c0       	push   $0xc010e816
+c01083c9:	68 da 00 00 00       	push   $0xda
+c01083ce:	68 2b e8 10 c0       	push   $0xc010e82b
+c01083d3:	e8 1c 80 ff ff       	call   c01003f4 <__panic>
+    assert(!PageProperty(p0));
+c01083d8:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01083db:	83 c0 04             	add    $0x4,%eax
+c01083de:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
+c01083e5:	89 45 a4             	mov    %eax,-0x5c(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c01083e8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
+c01083eb:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c01083ee:	0f a3 10             	bt     %edx,(%eax)
+c01083f1:	19 c0                	sbb    %eax,%eax
+c01083f3:	89 45 a0             	mov    %eax,-0x60(%ebp)
+    return oldbit != 0;
+c01083f6:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
+c01083fa:	0f 95 c0             	setne  %al
+c01083fd:	0f b6 c0             	movzbl %al,%eax
+c0108400:	85 c0                	test   %eax,%eax
+c0108402:	74 19                	je     c010841d <default_check+0x138>
+c0108404:	68 32 ea 10 c0       	push   $0xc010ea32
+c0108409:	68 16 e8 10 c0       	push   $0xc010e816
+c010840e:	68 db 00 00 00       	push   $0xdb
+c0108413:	68 2b e8 10 c0       	push   $0xc010e82b
+c0108418:	e8 d7 7f ff ff       	call   c01003f4 <__panic>
+
+    list_entry_t free_list_store = free_list;
+c010841d:	a1 84 54 1c c0       	mov    0xc01c5484,%eax
+c0108422:	8b 15 88 54 1c c0    	mov    0xc01c5488,%edx
+c0108428:	89 45 80             	mov    %eax,-0x80(%ebp)
+c010842b:	89 55 84             	mov    %edx,-0x7c(%ebp)
+c010842e:	c7 45 d0 84 54 1c c0 	movl   $0xc01c5484,-0x30(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c0108435:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0108438:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c010843b:	89 50 04             	mov    %edx,0x4(%eax)
+c010843e:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0108441:	8b 50 04             	mov    0x4(%eax),%edx
+c0108444:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c0108447:	89 10                	mov    %edx,(%eax)
+c0108449:	c7 45 d8 84 54 1c c0 	movl   $0xc01c5484,-0x28(%ebp)
+ * list_empty - tests whether a list is empty
+ * @list:       the list to test.
+ * */
+static inline bool
+list_empty(list_entry_t *list) {
+    return list->next == list;
+c0108450:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c0108453:	8b 40 04             	mov    0x4(%eax),%eax
+c0108456:	39 45 d8             	cmp    %eax,-0x28(%ebp)
+c0108459:	0f 94 c0             	sete   %al
+c010845c:	0f b6 c0             	movzbl %al,%eax
+    list_init(&free_list);
+    assert(list_empty(&free_list));
+c010845f:	85 c0                	test   %eax,%eax
+c0108461:	75 19                	jne    c010847c <default_check+0x197>
+c0108463:	68 87 e9 10 c0       	push   $0xc010e987
+c0108468:	68 16 e8 10 c0       	push   $0xc010e816
+c010846d:	68 df 00 00 00       	push   $0xdf
+c0108472:	68 2b e8 10 c0       	push   $0xc010e82b
+c0108477:	e8 78 7f ff ff       	call   c01003f4 <__panic>
+    assert(alloc_page() == NULL);
+c010847c:	83 ec 0c             	sub    $0xc,%esp
+c010847f:	6a 01                	push   $0x1
+c0108481:	e8 da b3 ff ff       	call   c0103860 <alloc_pages>
+c0108486:	83 c4 10             	add    $0x10,%esp
+c0108489:	85 c0                	test   %eax,%eax
+c010848b:	74 19                	je     c01084a6 <default_check+0x1c1>
+c010848d:	68 9e e9 10 c0       	push   $0xc010e99e
+c0108492:	68 16 e8 10 c0       	push   $0xc010e816
+c0108497:	68 e0 00 00 00       	push   $0xe0
+c010849c:	68 2b e8 10 c0       	push   $0xc010e82b
+c01084a1:	e8 4e 7f ff ff       	call   c01003f4 <__panic>
+
+    unsigned int nr_free_store = nr_free;
+c01084a6:	a1 8c 54 1c c0       	mov    0xc01c548c,%eax
+c01084ab:	89 45 cc             	mov    %eax,-0x34(%ebp)
+    nr_free = 0;
+c01084ae:	c7 05 8c 54 1c c0 00 	movl   $0x0,0xc01c548c
+c01084b5:	00 00 00 
+
+    free_pages(p0 + 2, 3);
+c01084b8:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01084bb:	83 c0 40             	add    $0x40,%eax
+c01084be:	83 ec 08             	sub    $0x8,%esp
+c01084c1:	6a 03                	push   $0x3
+c01084c3:	50                   	push   %eax
+c01084c4:	e8 03 b4 ff ff       	call   c01038cc <free_pages>
+c01084c9:	83 c4 10             	add    $0x10,%esp
+    assert(alloc_pages(4) == NULL);
+c01084cc:	83 ec 0c             	sub    $0xc,%esp
+c01084cf:	6a 04                	push   $0x4
+c01084d1:	e8 8a b3 ff ff       	call   c0103860 <alloc_pages>
+c01084d6:	83 c4 10             	add    $0x10,%esp
+c01084d9:	85 c0                	test   %eax,%eax
+c01084db:	74 19                	je     c01084f6 <default_check+0x211>
+c01084dd:	68 44 ea 10 c0       	push   $0xc010ea44
+c01084e2:	68 16 e8 10 c0       	push   $0xc010e816
+c01084e7:	68 e6 00 00 00       	push   $0xe6
+c01084ec:	68 2b e8 10 c0       	push   $0xc010e82b
+c01084f1:	e8 fe 7e ff ff       	call   c01003f4 <__panic>
+    assert(PageProperty(p0 + 2) && p0[2].property == 3);
+c01084f6:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01084f9:	83 c0 40             	add    $0x40,%eax
+c01084fc:	83 c0 04             	add    $0x4,%eax
+c01084ff:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
+c0108506:	89 45 9c             	mov    %eax,-0x64(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0108509:	8b 45 9c             	mov    -0x64(%ebp),%eax
+c010850c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c010850f:	0f a3 10             	bt     %edx,(%eax)
+c0108512:	19 c0                	sbb    %eax,%eax
+c0108514:	89 45 98             	mov    %eax,-0x68(%ebp)
+    return oldbit != 0;
+c0108517:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
+c010851b:	0f 95 c0             	setne  %al
+c010851e:	0f b6 c0             	movzbl %al,%eax
+c0108521:	85 c0                	test   %eax,%eax
+c0108523:	74 0e                	je     c0108533 <default_check+0x24e>
+c0108525:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0108528:	83 c0 40             	add    $0x40,%eax
+c010852b:	8b 40 08             	mov    0x8(%eax),%eax
+c010852e:	83 f8 03             	cmp    $0x3,%eax
+c0108531:	74 19                	je     c010854c <default_check+0x267>
+c0108533:	68 5c ea 10 c0       	push   $0xc010ea5c
+c0108538:	68 16 e8 10 c0       	push   $0xc010e816
+c010853d:	68 e7 00 00 00       	push   $0xe7
+c0108542:	68 2b e8 10 c0       	push   $0xc010e82b
+c0108547:	e8 a8 7e ff ff       	call   c01003f4 <__panic>
+    assert((p1 = alloc_pages(3)) != NULL);
+c010854c:	83 ec 0c             	sub    $0xc,%esp
+c010854f:	6a 03                	push   $0x3
+c0108551:	e8 0a b3 ff ff       	call   c0103860 <alloc_pages>
+c0108556:	83 c4 10             	add    $0x10,%esp
+c0108559:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+c010855c:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
+c0108560:	75 19                	jne    c010857b <default_check+0x296>
+c0108562:	68 88 ea 10 c0       	push   $0xc010ea88
+c0108567:	68 16 e8 10 c0       	push   $0xc010e816
+c010856c:	68 e8 00 00 00       	push   $0xe8
+c0108571:	68 2b e8 10 c0       	push   $0xc010e82b
+c0108576:	e8 79 7e ff ff       	call   c01003f4 <__panic>
+    assert(alloc_page() == NULL);
+c010857b:	83 ec 0c             	sub    $0xc,%esp
+c010857e:	6a 01                	push   $0x1
+c0108580:	e8 db b2 ff ff       	call   c0103860 <alloc_pages>
+c0108585:	83 c4 10             	add    $0x10,%esp
+c0108588:	85 c0                	test   %eax,%eax
+c010858a:	74 19                	je     c01085a5 <default_check+0x2c0>
+c010858c:	68 9e e9 10 c0       	push   $0xc010e99e
+c0108591:	68 16 e8 10 c0       	push   $0xc010e816
+c0108596:	68 e9 00 00 00       	push   $0xe9
+c010859b:	68 2b e8 10 c0       	push   $0xc010e82b
+c01085a0:	e8 4f 7e ff ff       	call   c01003f4 <__panic>
+    assert(p0 + 2 == p1);
+c01085a5:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01085a8:	83 c0 40             	add    $0x40,%eax
+c01085ab:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
+c01085ae:	74 19                	je     c01085c9 <default_check+0x2e4>
+c01085b0:	68 a6 ea 10 c0       	push   $0xc010eaa6
+c01085b5:	68 16 e8 10 c0       	push   $0xc010e816
+c01085ba:	68 ea 00 00 00       	push   $0xea
+c01085bf:	68 2b e8 10 c0       	push   $0xc010e82b
+c01085c4:	e8 2b 7e ff ff       	call   c01003f4 <__panic>
+
+    p2 = p0 + 1;
+c01085c9:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01085cc:	83 c0 20             	add    $0x20,%eax
+c01085cf:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    free_page(p0);
+c01085d2:	83 ec 08             	sub    $0x8,%esp
+c01085d5:	6a 01                	push   $0x1
+c01085d7:	ff 75 dc             	pushl  -0x24(%ebp)
+c01085da:	e8 ed b2 ff ff       	call   c01038cc <free_pages>
+c01085df:	83 c4 10             	add    $0x10,%esp
+    free_pages(p1, 3);
+c01085e2:	83 ec 08             	sub    $0x8,%esp
+c01085e5:	6a 03                	push   $0x3
+c01085e7:	ff 75 c4             	pushl  -0x3c(%ebp)
+c01085ea:	e8 dd b2 ff ff       	call   c01038cc <free_pages>
+c01085ef:	83 c4 10             	add    $0x10,%esp
+    assert(PageProperty(p0) && p0->property == 1);
+c01085f2:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c01085f5:	83 c0 04             	add    $0x4,%eax
+c01085f8:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
+c01085ff:	89 45 94             	mov    %eax,-0x6c(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0108602:	8b 45 94             	mov    -0x6c(%ebp),%eax
+c0108605:	8b 55 c8             	mov    -0x38(%ebp),%edx
+c0108608:	0f a3 10             	bt     %edx,(%eax)
+c010860b:	19 c0                	sbb    %eax,%eax
+c010860d:	89 45 90             	mov    %eax,-0x70(%ebp)
+    return oldbit != 0;
+c0108610:	83 7d 90 00          	cmpl   $0x0,-0x70(%ebp)
+c0108614:	0f 95 c0             	setne  %al
+c0108617:	0f b6 c0             	movzbl %al,%eax
+c010861a:	85 c0                	test   %eax,%eax
+c010861c:	74 0b                	je     c0108629 <default_check+0x344>
+c010861e:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c0108621:	8b 40 08             	mov    0x8(%eax),%eax
+c0108624:	83 f8 01             	cmp    $0x1,%eax
+c0108627:	74 19                	je     c0108642 <default_check+0x35d>
+c0108629:	68 b4 ea 10 c0       	push   $0xc010eab4
+c010862e:	68 16 e8 10 c0       	push   $0xc010e816
+c0108633:	68 ef 00 00 00       	push   $0xef
+c0108638:	68 2b e8 10 c0       	push   $0xc010e82b
+c010863d:	e8 b2 7d ff ff       	call   c01003f4 <__panic>
+    assert(PageProperty(p1) && p1->property == 3);
+c0108642:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c0108645:	83 c0 04             	add    $0x4,%eax
+c0108648:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+c010864f:	89 45 8c             	mov    %eax,-0x74(%ebp)
+ * @addr:   the address to count from
+ * */
+static inline bool
+test_bit(int nr, volatile void *addr) {
+    int oldbit;
+    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
+c0108652:	8b 45 8c             	mov    -0x74(%ebp),%eax
+c0108655:	8b 55 bc             	mov    -0x44(%ebp),%edx
+c0108658:	0f a3 10             	bt     %edx,(%eax)
+c010865b:	19 c0                	sbb    %eax,%eax
+c010865d:	89 45 88             	mov    %eax,-0x78(%ebp)
+    return oldbit != 0;
+c0108660:	83 7d 88 00          	cmpl   $0x0,-0x78(%ebp)
+c0108664:	0f 95 c0             	setne  %al
+c0108667:	0f b6 c0             	movzbl %al,%eax
+c010866a:	85 c0                	test   %eax,%eax
+c010866c:	74 0b                	je     c0108679 <default_check+0x394>
+c010866e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c0108671:	8b 40 08             	mov    0x8(%eax),%eax
+c0108674:	83 f8 03             	cmp    $0x3,%eax
+c0108677:	74 19                	je     c0108692 <default_check+0x3ad>
+c0108679:	68 dc ea 10 c0       	push   $0xc010eadc
+c010867e:	68 16 e8 10 c0       	push   $0xc010e816
+c0108683:	68 f0 00 00 00       	push   $0xf0
+c0108688:	68 2b e8 10 c0       	push   $0xc010e82b
+c010868d:	e8 62 7d ff ff       	call   c01003f4 <__panic>
+
+    assert((p0 = alloc_page()) == p2 - 1);
+c0108692:	83 ec 0c             	sub    $0xc,%esp
+c0108695:	6a 01                	push   $0x1
+c0108697:	e8 c4 b1 ff ff       	call   c0103860 <alloc_pages>
+c010869c:	83 c4 10             	add    $0x10,%esp
+c010869f:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c01086a2:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c01086a5:	83 e8 20             	sub    $0x20,%eax
+c01086a8:	39 45 dc             	cmp    %eax,-0x24(%ebp)
+c01086ab:	74 19                	je     c01086c6 <default_check+0x3e1>
+c01086ad:	68 02 eb 10 c0       	push   $0xc010eb02
+c01086b2:	68 16 e8 10 c0       	push   $0xc010e816
+c01086b7:	68 f2 00 00 00       	push   $0xf2
+c01086bc:	68 2b e8 10 c0       	push   $0xc010e82b
+c01086c1:	e8 2e 7d ff ff       	call   c01003f4 <__panic>
+    free_page(p0);
+c01086c6:	83 ec 08             	sub    $0x8,%esp
+c01086c9:	6a 01                	push   $0x1
+c01086cb:	ff 75 dc             	pushl  -0x24(%ebp)
+c01086ce:	e8 f9 b1 ff ff       	call   c01038cc <free_pages>
+c01086d3:	83 c4 10             	add    $0x10,%esp
+    assert((p0 = alloc_pages(2)) == p2 + 1);
+c01086d6:	83 ec 0c             	sub    $0xc,%esp
+c01086d9:	6a 02                	push   $0x2
+c01086db:	e8 80 b1 ff ff       	call   c0103860 <alloc_pages>
+c01086e0:	83 c4 10             	add    $0x10,%esp
+c01086e3:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c01086e6:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c01086e9:	83 c0 20             	add    $0x20,%eax
+c01086ec:	39 45 dc             	cmp    %eax,-0x24(%ebp)
+c01086ef:	74 19                	je     c010870a <default_check+0x425>
+c01086f1:	68 20 eb 10 c0       	push   $0xc010eb20
+c01086f6:	68 16 e8 10 c0       	push   $0xc010e816
+c01086fb:	68 f4 00 00 00       	push   $0xf4
+c0108700:	68 2b e8 10 c0       	push   $0xc010e82b
+c0108705:	e8 ea 7c ff ff       	call   c01003f4 <__panic>
+
+    free_pages(p0, 2);
+c010870a:	83 ec 08             	sub    $0x8,%esp
+c010870d:	6a 02                	push   $0x2
+c010870f:	ff 75 dc             	pushl  -0x24(%ebp)
+c0108712:	e8 b5 b1 ff ff       	call   c01038cc <free_pages>
+c0108717:	83 c4 10             	add    $0x10,%esp
+    free_page(p2);
+c010871a:	83 ec 08             	sub    $0x8,%esp
+c010871d:	6a 01                	push   $0x1
+c010871f:	ff 75 c0             	pushl  -0x40(%ebp)
+c0108722:	e8 a5 b1 ff ff       	call   c01038cc <free_pages>
+c0108727:	83 c4 10             	add    $0x10,%esp
+
+    assert((p0 = alloc_pages(5)) != NULL);
+c010872a:	83 ec 0c             	sub    $0xc,%esp
+c010872d:	6a 05                	push   $0x5
+c010872f:	e8 2c b1 ff ff       	call   c0103860 <alloc_pages>
+c0108734:	83 c4 10             	add    $0x10,%esp
+c0108737:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c010873a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c010873e:	75 19                	jne    c0108759 <default_check+0x474>
+c0108740:	68 40 eb 10 c0       	push   $0xc010eb40
+c0108745:	68 16 e8 10 c0       	push   $0xc010e816
+c010874a:	68 f9 00 00 00       	push   $0xf9
+c010874f:	68 2b e8 10 c0       	push   $0xc010e82b
+c0108754:	e8 9b 7c ff ff       	call   c01003f4 <__panic>
+    assert(alloc_page() == NULL);
+c0108759:	83 ec 0c             	sub    $0xc,%esp
+c010875c:	6a 01                	push   $0x1
+c010875e:	e8 fd b0 ff ff       	call   c0103860 <alloc_pages>
+c0108763:	83 c4 10             	add    $0x10,%esp
+c0108766:	85 c0                	test   %eax,%eax
+c0108768:	74 19                	je     c0108783 <default_check+0x49e>
+c010876a:	68 9e e9 10 c0       	push   $0xc010e99e
+c010876f:	68 16 e8 10 c0       	push   $0xc010e816
+c0108774:	68 fa 00 00 00       	push   $0xfa
+c0108779:	68 2b e8 10 c0       	push   $0xc010e82b
+c010877e:	e8 71 7c ff ff       	call   c01003f4 <__panic>
+
+    assert(nr_free == 0);
+c0108783:	a1 8c 54 1c c0       	mov    0xc01c548c,%eax
+c0108788:	85 c0                	test   %eax,%eax
+c010878a:	74 19                	je     c01087a5 <default_check+0x4c0>
+c010878c:	68 f1 e9 10 c0       	push   $0xc010e9f1
+c0108791:	68 16 e8 10 c0       	push   $0xc010e816
+c0108796:	68 fc 00 00 00       	push   $0xfc
+c010879b:	68 2b e8 10 c0       	push   $0xc010e82b
+c01087a0:	e8 4f 7c ff ff       	call   c01003f4 <__panic>
+    nr_free = nr_free_store;
+c01087a5:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c01087a8:	a3 8c 54 1c c0       	mov    %eax,0xc01c548c
+
+    free_list = free_list_store;
+c01087ad:	8b 45 80             	mov    -0x80(%ebp),%eax
+c01087b0:	8b 55 84             	mov    -0x7c(%ebp),%edx
+c01087b3:	a3 84 54 1c c0       	mov    %eax,0xc01c5484
+c01087b8:	89 15 88 54 1c c0    	mov    %edx,0xc01c5488
+    free_pages(p0, 5);
+c01087be:	83 ec 08             	sub    $0x8,%esp
+c01087c1:	6a 05                	push   $0x5
+c01087c3:	ff 75 dc             	pushl  -0x24(%ebp)
+c01087c6:	e8 01 b1 ff ff       	call   c01038cc <free_pages>
+c01087cb:	83 c4 10             	add    $0x10,%esp
+
+    le = &free_list;
+c01087ce:	c7 45 ec 84 54 1c c0 	movl   $0xc01c5484,-0x14(%ebp)
+    while ((le = list_next(le)) != &free_list) {
+c01087d5:	eb 1d                	jmp    c01087f4 <default_check+0x50f>
+        struct Page *p = le2page(le, page_link);
+c01087d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01087da:	83 e8 0c             	sub    $0xc,%eax
+c01087dd:	89 45 b4             	mov    %eax,-0x4c(%ebp)
+        count --, total -= p->property;
+c01087e0:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+c01087e4:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c01087e7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c01087ea:	8b 40 08             	mov    0x8(%eax),%eax
+c01087ed:	29 c2                	sub    %eax,%edx
+c01087ef:	89 d0                	mov    %edx,%eax
+c01087f1:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01087f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01087f7:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c01087fa:	8b 45 b8             	mov    -0x48(%ebp),%eax
+c01087fd:	8b 40 04             	mov    0x4(%eax),%eax
+
+    free_list = free_list_store;
+    free_pages(p0, 5);
+
+    le = &free_list;
+    while ((le = list_next(le)) != &free_list) {
+c0108800:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c0108803:	81 7d ec 84 54 1c c0 	cmpl   $0xc01c5484,-0x14(%ebp)
+c010880a:	75 cb                	jne    c01087d7 <default_check+0x4f2>
+        struct Page *p = le2page(le, page_link);
+        count --, total -= p->property;
+    }
+    assert(count == 0);
+c010880c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0108810:	74 19                	je     c010882b <default_check+0x546>
+c0108812:	68 5e eb 10 c0       	push   $0xc010eb5e
+c0108817:	68 16 e8 10 c0       	push   $0xc010e816
+c010881c:	68 07 01 00 00       	push   $0x107
+c0108821:	68 2b e8 10 c0       	push   $0xc010e82b
+c0108826:	e8 c9 7b ff ff       	call   c01003f4 <__panic>
+    assert(total == 0);
+c010882b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010882f:	74 19                	je     c010884a <default_check+0x565>
+c0108831:	68 69 eb 10 c0       	push   $0xc010eb69
+c0108836:	68 16 e8 10 c0       	push   $0xc010e816
+c010883b:	68 08 01 00 00       	push   $0x108
+c0108840:	68 2b e8 10 c0       	push   $0xc010e82b
+c0108845:	e8 aa 7b ff ff       	call   c01003f4 <__panic>
+}
+c010884a:	90                   	nop
+c010884b:	c9                   	leave  
+c010884c:	c3                   	ret    
+
+c010884d <phi_test_sema>:
+semaphore_t s[N]; /* 每个哲学家一个信号量 */
+
+struct proc_struct *philosopher_proc_sema[N];
+
+void phi_test_sema(i) /* i：哲学家号码从0到N-1 */
+{ 
+c010884d:	55                   	push   %ebp
+c010884e:	89 e5                	mov    %esp,%ebp
+c0108850:	83 ec 08             	sub    $0x8,%esp
+    if(state_sema[i]==HUNGRY&&state_sema[LEFT]!=EATING
+c0108853:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108856:	8b 04 85 a0 54 1c c0 	mov    -0x3fe3ab60(,%eax,4),%eax
+c010885d:	83 f8 01             	cmp    $0x1,%eax
+c0108860:	0f 85 8d 00 00 00    	jne    c01088f3 <phi_test_sema+0xa6>
+c0108866:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108869:	8d 48 04             	lea    0x4(%eax),%ecx
+c010886c:	ba 67 66 66 66       	mov    $0x66666667,%edx
+c0108871:	89 c8                	mov    %ecx,%eax
+c0108873:	f7 ea                	imul   %edx
+c0108875:	d1 fa                	sar    %edx
+c0108877:	89 c8                	mov    %ecx,%eax
+c0108879:	c1 f8 1f             	sar    $0x1f,%eax
+c010887c:	29 c2                	sub    %eax,%edx
+c010887e:	89 d0                	mov    %edx,%eax
+c0108880:	89 c2                	mov    %eax,%edx
+c0108882:	c1 e2 02             	shl    $0x2,%edx
+c0108885:	01 c2                	add    %eax,%edx
+c0108887:	89 c8                	mov    %ecx,%eax
+c0108889:	29 d0                	sub    %edx,%eax
+c010888b:	8b 04 85 a0 54 1c c0 	mov    -0x3fe3ab60(,%eax,4),%eax
+c0108892:	83 f8 02             	cmp    $0x2,%eax
+c0108895:	74 5c                	je     c01088f3 <phi_test_sema+0xa6>
+            &&state_sema[RIGHT]!=EATING)
+c0108897:	8b 45 08             	mov    0x8(%ebp),%eax
+c010889a:	8d 48 01             	lea    0x1(%eax),%ecx
+c010889d:	ba 67 66 66 66       	mov    $0x66666667,%edx
+c01088a2:	89 c8                	mov    %ecx,%eax
+c01088a4:	f7 ea                	imul   %edx
+c01088a6:	d1 fa                	sar    %edx
+c01088a8:	89 c8                	mov    %ecx,%eax
+c01088aa:	c1 f8 1f             	sar    $0x1f,%eax
+c01088ad:	29 c2                	sub    %eax,%edx
+c01088af:	89 d0                	mov    %edx,%eax
+c01088b1:	89 c2                	mov    %eax,%edx
+c01088b3:	c1 e2 02             	shl    $0x2,%edx
+c01088b6:	01 c2                	add    %eax,%edx
+c01088b8:	89 c8                	mov    %ecx,%eax
+c01088ba:	29 d0                	sub    %edx,%eax
+c01088bc:	8b 04 85 a0 54 1c c0 	mov    -0x3fe3ab60(,%eax,4),%eax
+c01088c3:	83 f8 02             	cmp    $0x2,%eax
+c01088c6:	74 2b                	je     c01088f3 <phi_test_sema+0xa6>
+    {
+        state_sema[i]=EATING;
+c01088c8:	8b 45 08             	mov    0x8(%ebp),%eax
+c01088cb:	c7 04 85 a0 54 1c c0 	movl   $0x2,-0x3fe3ab60(,%eax,4)
+c01088d2:	02 00 00 00 
+        up(&s[i]);
+c01088d6:	8b 55 08             	mov    0x8(%ebp),%edx
+c01088d9:	89 d0                	mov    %edx,%eax
+c01088db:	01 c0                	add    %eax,%eax
+c01088dd:	01 d0                	add    %edx,%eax
+c01088df:	c1 e0 02             	shl    $0x2,%eax
+c01088e2:	05 40 55 1c c0       	add    $0xc01c5540,%eax
+c01088e7:	83 ec 0c             	sub    $0xc,%esp
+c01088ea:	50                   	push   %eax
+c01088eb:	e8 e5 0b 00 00       	call   c01094d5 <up>
+c01088f0:	83 c4 10             	add    $0x10,%esp
+    }
+}
+c01088f3:	90                   	nop
+c01088f4:	c9                   	leave  
+c01088f5:	c3                   	ret    
+
+c01088f6 <phi_take_forks_sema>:
+
+void phi_take_forks_sema(int i) /* i：哲学家号码从0到N-1 */
+{ 
+c01088f6:	55                   	push   %ebp
+c01088f7:	89 e5                	mov    %esp,%ebp
+c01088f9:	83 ec 08             	sub    $0x8,%esp
+        down(&mutex); /* 进入临界区 */
+c01088fc:	83 ec 0c             	sub    $0xc,%esp
+c01088ff:	68 c8 54 1c c0       	push   $0xc01c54c8
+c0108904:	e8 e8 0b 00 00       	call   c01094f1 <down>
+c0108909:	83 c4 10             	add    $0x10,%esp
+        state_sema[i]=HUNGRY; /* 记录下哲学家i饥饿的事实 */
+c010890c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010890f:	c7 04 85 a0 54 1c c0 	movl   $0x1,-0x3fe3ab60(,%eax,4)
+c0108916:	01 00 00 00 
+        phi_test_sema(i); /* 试图得到两只叉子 */
+c010891a:	83 ec 0c             	sub    $0xc,%esp
+c010891d:	ff 75 08             	pushl  0x8(%ebp)
+c0108920:	e8 28 ff ff ff       	call   c010884d <phi_test_sema>
+c0108925:	83 c4 10             	add    $0x10,%esp
+        up(&mutex); /* 离开临界区 */
+c0108928:	83 ec 0c             	sub    $0xc,%esp
+c010892b:	68 c8 54 1c c0       	push   $0xc01c54c8
+c0108930:	e8 a0 0b 00 00       	call   c01094d5 <up>
+c0108935:	83 c4 10             	add    $0x10,%esp
+        down(&s[i]); /* 如果得不到叉子就阻塞 */
+c0108938:	8b 55 08             	mov    0x8(%ebp),%edx
+c010893b:	89 d0                	mov    %edx,%eax
+c010893d:	01 c0                	add    %eax,%eax
+c010893f:	01 d0                	add    %edx,%eax
+c0108941:	c1 e0 02             	shl    $0x2,%eax
+c0108944:	05 40 55 1c c0       	add    $0xc01c5540,%eax
+c0108949:	83 ec 0c             	sub    $0xc,%esp
+c010894c:	50                   	push   %eax
+c010894d:	e8 9f 0b 00 00       	call   c01094f1 <down>
+c0108952:	83 c4 10             	add    $0x10,%esp
+}
+c0108955:	90                   	nop
+c0108956:	c9                   	leave  
+c0108957:	c3                   	ret    
+
+c0108958 <phi_put_forks_sema>:
+
+void phi_put_forks_sema(int i) /* i：哲学家号码从0到N-1 */
+{ 
+c0108958:	55                   	push   %ebp
+c0108959:	89 e5                	mov    %esp,%ebp
+c010895b:	83 ec 08             	sub    $0x8,%esp
+        down(&mutex); /* 进入临界区 */
+c010895e:	83 ec 0c             	sub    $0xc,%esp
+c0108961:	68 c8 54 1c c0       	push   $0xc01c54c8
+c0108966:	e8 86 0b 00 00       	call   c01094f1 <down>
+c010896b:	83 c4 10             	add    $0x10,%esp
+        state_sema[i]=THINKING; /* 哲学家进餐结束 */
+c010896e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108971:	c7 04 85 a0 54 1c c0 	movl   $0x0,-0x3fe3ab60(,%eax,4)
+c0108978:	00 00 00 00 
+        phi_test_sema(LEFT); /* 看一下左邻居现在是否能进餐 */
+c010897c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010897f:	8d 48 04             	lea    0x4(%eax),%ecx
+c0108982:	ba 67 66 66 66       	mov    $0x66666667,%edx
+c0108987:	89 c8                	mov    %ecx,%eax
+c0108989:	f7 ea                	imul   %edx
+c010898b:	d1 fa                	sar    %edx
+c010898d:	89 c8                	mov    %ecx,%eax
+c010898f:	c1 f8 1f             	sar    $0x1f,%eax
+c0108992:	29 c2                	sub    %eax,%edx
+c0108994:	89 d0                	mov    %edx,%eax
+c0108996:	89 c2                	mov    %eax,%edx
+c0108998:	c1 e2 02             	shl    $0x2,%edx
+c010899b:	01 c2                	add    %eax,%edx
+c010899d:	89 c8                	mov    %ecx,%eax
+c010899f:	29 d0                	sub    %edx,%eax
+c01089a1:	83 ec 0c             	sub    $0xc,%esp
+c01089a4:	50                   	push   %eax
+c01089a5:	e8 a3 fe ff ff       	call   c010884d <phi_test_sema>
+c01089aa:	83 c4 10             	add    $0x10,%esp
+        phi_test_sema(RIGHT); /* 看一下右邻居现在是否能进餐 */
+c01089ad:	8b 45 08             	mov    0x8(%ebp),%eax
+c01089b0:	8d 48 01             	lea    0x1(%eax),%ecx
+c01089b3:	ba 67 66 66 66       	mov    $0x66666667,%edx
+c01089b8:	89 c8                	mov    %ecx,%eax
+c01089ba:	f7 ea                	imul   %edx
+c01089bc:	d1 fa                	sar    %edx
+c01089be:	89 c8                	mov    %ecx,%eax
+c01089c0:	c1 f8 1f             	sar    $0x1f,%eax
+c01089c3:	29 c2                	sub    %eax,%edx
+c01089c5:	89 d0                	mov    %edx,%eax
+c01089c7:	89 c2                	mov    %eax,%edx
+c01089c9:	c1 e2 02             	shl    $0x2,%edx
+c01089cc:	01 c2                	add    %eax,%edx
+c01089ce:	89 c8                	mov    %ecx,%eax
+c01089d0:	29 d0                	sub    %edx,%eax
+c01089d2:	83 ec 0c             	sub    $0xc,%esp
+c01089d5:	50                   	push   %eax
+c01089d6:	e8 72 fe ff ff       	call   c010884d <phi_test_sema>
+c01089db:	83 c4 10             	add    $0x10,%esp
+        up(&mutex); /* 离开临界区 */
+c01089de:	83 ec 0c             	sub    $0xc,%esp
+c01089e1:	68 c8 54 1c c0       	push   $0xc01c54c8
+c01089e6:	e8 ea 0a 00 00       	call   c01094d5 <up>
+c01089eb:	83 c4 10             	add    $0x10,%esp
+}
+c01089ee:	90                   	nop
+c01089ef:	c9                   	leave  
+c01089f0:	c3                   	ret    
+
+c01089f1 <philosopher_using_semaphore>:
+
+int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
+{
+c01089f1:	55                   	push   %ebp
+c01089f2:	89 e5                	mov    %esp,%ebp
+c01089f4:	83 ec 18             	sub    $0x18,%esp
+    int i, iter=0;
+c01089f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    i=(int)arg;
+c01089fe:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108a01:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cprintf("I am No.%d philosopher_sema\n",i);
+c0108a04:	83 ec 08             	sub    $0x8,%esp
+c0108a07:	ff 75 f0             	pushl  -0x10(%ebp)
+c0108a0a:	68 a4 eb 10 c0       	push   $0xc010eba4
+c0108a0f:	e8 7a 78 ff ff       	call   c010028e <cprintf>
+c0108a14:	83 c4 10             	add    $0x10,%esp
+    while(iter++<TIMES)
+c0108a17:	eb 62                	jmp    c0108a7b <philosopher_using_semaphore+0x8a>
+    { /* 无限循环 */
+        cprintf("Iter %d, No.%d philosopher_sema is thinking\n",iter,i); /* 哲学家正在思考 */
+c0108a19:	83 ec 04             	sub    $0x4,%esp
+c0108a1c:	ff 75 f0             	pushl  -0x10(%ebp)
+c0108a1f:	ff 75 f4             	pushl  -0xc(%ebp)
+c0108a22:	68 c4 eb 10 c0       	push   $0xc010ebc4
+c0108a27:	e8 62 78 ff ff       	call   c010028e <cprintf>
+c0108a2c:	83 c4 10             	add    $0x10,%esp
+        do_sleep(SLEEP_TIME);
+c0108a2f:	83 ec 0c             	sub    $0xc,%esp
+c0108a32:	6a 0a                	push   $0xa
+c0108a34:	e8 c0 2a 00 00       	call   c010b4f9 <do_sleep>
+c0108a39:	83 c4 10             	add    $0x10,%esp
+        phi_take_forks_sema(i); 
+c0108a3c:	83 ec 0c             	sub    $0xc,%esp
+c0108a3f:	ff 75 f0             	pushl  -0x10(%ebp)
+c0108a42:	e8 af fe ff ff       	call   c01088f6 <phi_take_forks_sema>
+c0108a47:	83 c4 10             	add    $0x10,%esp
+        /* 需要两只叉子，或者阻塞 */
+        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
+c0108a4a:	83 ec 04             	sub    $0x4,%esp
+c0108a4d:	ff 75 f0             	pushl  -0x10(%ebp)
+c0108a50:	ff 75 f4             	pushl  -0xc(%ebp)
+c0108a53:	68 f4 eb 10 c0       	push   $0xc010ebf4
+c0108a58:	e8 31 78 ff ff       	call   c010028e <cprintf>
+c0108a5d:	83 c4 10             	add    $0x10,%esp
+        do_sleep(SLEEP_TIME);
+c0108a60:	83 ec 0c             	sub    $0xc,%esp
+c0108a63:	6a 0a                	push   $0xa
+c0108a65:	e8 8f 2a 00 00       	call   c010b4f9 <do_sleep>
+c0108a6a:	83 c4 10             	add    $0x10,%esp
+        phi_put_forks_sema(i); 
+c0108a6d:	83 ec 0c             	sub    $0xc,%esp
+c0108a70:	ff 75 f0             	pushl  -0x10(%ebp)
+c0108a73:	e8 e0 fe ff ff       	call   c0108958 <phi_put_forks_sema>
+c0108a78:	83 c4 10             	add    $0x10,%esp
+int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
+{
+    int i, iter=0;
+    i=(int)arg;
+    cprintf("I am No.%d philosopher_sema\n",i);
+    while(iter++<TIMES)
+c0108a7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108a7e:	8d 50 01             	lea    0x1(%eax),%edx
+c0108a81:	89 55 f4             	mov    %edx,-0xc(%ebp)
+c0108a84:	83 f8 03             	cmp    $0x3,%eax
+c0108a87:	7e 90                	jle    c0108a19 <philosopher_using_semaphore+0x28>
+        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
+        do_sleep(SLEEP_TIME);
+        phi_put_forks_sema(i); 
+        /* 把两把叉子同时放回桌子 */
+    }
+    cprintf("No.%d philosopher_sema quit\n",i);
+c0108a89:	83 ec 08             	sub    $0x8,%esp
+c0108a8c:	ff 75 f0             	pushl  -0x10(%ebp)
+c0108a8f:	68 1f ec 10 c0       	push   $0xc010ec1f
+c0108a94:	e8 f5 77 ff ff       	call   c010028e <cprintf>
+c0108a99:	83 c4 10             	add    $0x10,%esp
+    return 0;    
+c0108a9c:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0108aa1:	c9                   	leave  
+c0108aa2:	c3                   	ret    
+
+c0108aa3 <phi_test_condvar>:
+
+struct proc_struct *philosopher_proc_condvar[N]; // N philosopher
+int state_condvar[N];                            // the philosopher's state: EATING, HUNGARY, THINKING  
+monitor_t mt, *mtp=&mt;                          // monitor
+
+void phi_test_condvar (i) { 
+c0108aa3:	55                   	push   %ebp
+c0108aa4:	89 e5                	mov    %esp,%ebp
+c0108aa6:	83 ec 08             	sub    $0x8,%esp
+    if(state_condvar[i]==HUNGRY&&state_condvar[LEFT]!=EATING
+c0108aa9:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108aac:	8b 04 85 00 55 1c c0 	mov    -0x3fe3ab00(,%eax,4),%eax
+c0108ab3:	83 f8 01             	cmp    $0x1,%eax
+c0108ab6:	0f 85 bd 00 00 00    	jne    c0108b79 <phi_test_condvar+0xd6>
+c0108abc:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108abf:	8d 48 04             	lea    0x4(%eax),%ecx
+c0108ac2:	ba 67 66 66 66       	mov    $0x66666667,%edx
+c0108ac7:	89 c8                	mov    %ecx,%eax
+c0108ac9:	f7 ea                	imul   %edx
+c0108acb:	d1 fa                	sar    %edx
+c0108acd:	89 c8                	mov    %ecx,%eax
+c0108acf:	c1 f8 1f             	sar    $0x1f,%eax
+c0108ad2:	29 c2                	sub    %eax,%edx
+c0108ad4:	89 d0                	mov    %edx,%eax
+c0108ad6:	89 c2                	mov    %eax,%edx
+c0108ad8:	c1 e2 02             	shl    $0x2,%edx
+c0108adb:	01 c2                	add    %eax,%edx
+c0108add:	89 c8                	mov    %ecx,%eax
+c0108adf:	29 d0                	sub    %edx,%eax
+c0108ae1:	8b 04 85 00 55 1c c0 	mov    -0x3fe3ab00(,%eax,4),%eax
+c0108ae8:	83 f8 02             	cmp    $0x2,%eax
+c0108aeb:	0f 84 88 00 00 00    	je     c0108b79 <phi_test_condvar+0xd6>
+            &&state_condvar[RIGHT]!=EATING) {
+c0108af1:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108af4:	8d 48 01             	lea    0x1(%eax),%ecx
+c0108af7:	ba 67 66 66 66       	mov    $0x66666667,%edx
+c0108afc:	89 c8                	mov    %ecx,%eax
+c0108afe:	f7 ea                	imul   %edx
+c0108b00:	d1 fa                	sar    %edx
+c0108b02:	89 c8                	mov    %ecx,%eax
+c0108b04:	c1 f8 1f             	sar    $0x1f,%eax
+c0108b07:	29 c2                	sub    %eax,%edx
+c0108b09:	89 d0                	mov    %edx,%eax
+c0108b0b:	89 c2                	mov    %eax,%edx
+c0108b0d:	c1 e2 02             	shl    $0x2,%edx
+c0108b10:	01 c2                	add    %eax,%edx
+c0108b12:	89 c8                	mov    %ecx,%eax
+c0108b14:	29 d0                	sub    %edx,%eax
+c0108b16:	8b 04 85 00 55 1c c0 	mov    -0x3fe3ab00(,%eax,4),%eax
+c0108b1d:	83 f8 02             	cmp    $0x2,%eax
+c0108b20:	74 57                	je     c0108b79 <phi_test_condvar+0xd6>
+        cprintf("phi_test_condvar: state_condvar[%d] will eating\n",i);
+c0108b22:	83 ec 08             	sub    $0x8,%esp
+c0108b25:	ff 75 08             	pushl  0x8(%ebp)
+c0108b28:	68 3c ec 10 c0       	push   $0xc010ec3c
+c0108b2d:	e8 5c 77 ff ff       	call   c010028e <cprintf>
+c0108b32:	83 c4 10             	add    $0x10,%esp
+        state_condvar[i] = EATING ;
+c0108b35:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108b38:	c7 04 85 00 55 1c c0 	movl   $0x2,-0x3fe3ab00(,%eax,4)
+c0108b3f:	02 00 00 00 
+        cprintf("phi_test_condvar: signal self_cv[%d] \n",i);
+c0108b43:	83 ec 08             	sub    $0x8,%esp
+c0108b46:	ff 75 08             	pushl  0x8(%ebp)
+c0108b49:	68 70 ec 10 c0       	push   $0xc010ec70
+c0108b4e:	e8 3b 77 ff ff       	call   c010028e <cprintf>
+c0108b53:	83 c4 10             	add    $0x10,%esp
+        cond_signal(&mtp->cv[i]) ;
+c0108b56:	a1 6c 1a 13 c0       	mov    0xc0131a6c,%eax
+c0108b5b:	8b 48 1c             	mov    0x1c(%eax),%ecx
+c0108b5e:	8b 55 08             	mov    0x8(%ebp),%edx
+c0108b61:	89 d0                	mov    %edx,%eax
+c0108b63:	c1 e0 02             	shl    $0x2,%eax
+c0108b66:	01 d0                	add    %edx,%eax
+c0108b68:	c1 e0 02             	shl    $0x2,%eax
+c0108b6b:	01 c8                	add    %ecx,%eax
+c0108b6d:	83 ec 0c             	sub    $0xc,%esp
+c0108b70:	50                   	push   %eax
+c0108b71:	e8 0a 0b 00 00       	call   c0109680 <cond_signal>
+c0108b76:	83 c4 10             	add    $0x10,%esp
+    }
+}
+c0108b79:	90                   	nop
+c0108b7a:	c9                   	leave  
+c0108b7b:	c3                   	ret    
+
+c0108b7c <phi_take_forks_condvar>:
+
+
+void phi_take_forks_condvar(int i) {
+c0108b7c:	55                   	push   %ebp
+c0108b7d:	89 e5                	mov    %esp,%ebp
+c0108b7f:	83 ec 08             	sub    $0x8,%esp
+     down(&(mtp->mutex));
+c0108b82:	a1 6c 1a 13 c0       	mov    0xc0131a6c,%eax
+c0108b87:	83 ec 0c             	sub    $0xc,%esp
+c0108b8a:	50                   	push   %eax
+c0108b8b:	e8 61 09 00 00       	call   c01094f1 <down>
+c0108b90:	83 c4 10             	add    $0x10,%esp
+//--------into routine in monitor--------------
+     // LAB7 EXERCISE1: 2013011371
+     // I am hungry
+     // try to get fork
+     state_condvar[i] = HUNGRY;
+c0108b93:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108b96:	c7 04 85 00 55 1c c0 	movl   $0x1,-0x3fe3ab00(,%eax,4)
+c0108b9d:	01 00 00 00 
+     phi_test_condvar(i);
+c0108ba1:	83 ec 0c             	sub    $0xc,%esp
+c0108ba4:	ff 75 08             	pushl  0x8(%ebp)
+c0108ba7:	e8 f7 fe ff ff       	call   c0108aa3 <phi_test_condvar>
+c0108bac:	83 c4 10             	add    $0x10,%esp
+     while (state_condvar[i] != EATING){
+c0108baf:	eb 23                	jmp    c0108bd4 <phi_take_forks_condvar+0x58>
+    	 cond_wait(&mtp->cv[i]);
+c0108bb1:	a1 6c 1a 13 c0       	mov    0xc0131a6c,%eax
+c0108bb6:	8b 48 1c             	mov    0x1c(%eax),%ecx
+c0108bb9:	8b 55 08             	mov    0x8(%ebp),%edx
+c0108bbc:	89 d0                	mov    %edx,%eax
+c0108bbe:	c1 e0 02             	shl    $0x2,%eax
+c0108bc1:	01 d0                	add    %edx,%eax
+c0108bc3:	c1 e0 02             	shl    $0x2,%eax
+c0108bc6:	01 c8                	add    %ecx,%eax
+c0108bc8:	83 ec 0c             	sub    $0xc,%esp
+c0108bcb:	50                   	push   %eax
+c0108bcc:	e8 4c 0b 00 00       	call   c010971d <cond_wait>
+c0108bd1:	83 c4 10             	add    $0x10,%esp
+     // LAB7 EXERCISE1: 2013011371
+     // I am hungry
+     // try to get fork
+     state_condvar[i] = HUNGRY;
+     phi_test_condvar(i);
+     while (state_condvar[i] != EATING){
+c0108bd4:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108bd7:	8b 04 85 00 55 1c c0 	mov    -0x3fe3ab00(,%eax,4),%eax
+c0108bde:	83 f8 02             	cmp    $0x2,%eax
+c0108be1:	75 ce                	jne    c0108bb1 <phi_take_forks_condvar+0x35>
+    	 cond_wait(&mtp->cv[i]);
+     }
+//--------leave routine in monitor--------------
+      if(mtp->next_count>0)
+c0108be3:	a1 6c 1a 13 c0       	mov    0xc0131a6c,%eax
+c0108be8:	8b 40 18             	mov    0x18(%eax),%eax
+c0108beb:	85 c0                	test   %eax,%eax
+c0108bed:	7e 16                	jle    c0108c05 <phi_take_forks_condvar+0x89>
+         up(&(mtp->next));
+c0108bef:	a1 6c 1a 13 c0       	mov    0xc0131a6c,%eax
+c0108bf4:	83 c0 0c             	add    $0xc,%eax
+c0108bf7:	83 ec 0c             	sub    $0xc,%esp
+c0108bfa:	50                   	push   %eax
+c0108bfb:	e8 d5 08 00 00       	call   c01094d5 <up>
+c0108c00:	83 c4 10             	add    $0x10,%esp
+      else
+         up(&(mtp->mutex));
+}
+c0108c03:	eb 11                	jmp    c0108c16 <phi_take_forks_condvar+0x9a>
+     }
+//--------leave routine in monitor--------------
+      if(mtp->next_count>0)
+         up(&(mtp->next));
+      else
+         up(&(mtp->mutex));
+c0108c05:	a1 6c 1a 13 c0       	mov    0xc0131a6c,%eax
+c0108c0a:	83 ec 0c             	sub    $0xc,%esp
+c0108c0d:	50                   	push   %eax
+c0108c0e:	e8 c2 08 00 00       	call   c01094d5 <up>
+c0108c13:	83 c4 10             	add    $0x10,%esp
+}
+c0108c16:	90                   	nop
+c0108c17:	c9                   	leave  
+c0108c18:	c3                   	ret    
+
+c0108c19 <phi_put_forks_condvar>:
+
+void phi_put_forks_condvar(int i) {
+c0108c19:	55                   	push   %ebp
+c0108c1a:	89 e5                	mov    %esp,%ebp
+c0108c1c:	83 ec 08             	sub    $0x8,%esp
+     down(&(mtp->mutex));
+c0108c1f:	a1 6c 1a 13 c0       	mov    0xc0131a6c,%eax
+c0108c24:	83 ec 0c             	sub    $0xc,%esp
+c0108c27:	50                   	push   %eax
+c0108c28:	e8 c4 08 00 00       	call   c01094f1 <down>
+c0108c2d:	83 c4 10             	add    $0x10,%esp
+//--------into routine in monitor--------------
+     // LAB7 EXERCISE1: 2013011371
+     // I ate over
+     // test left and right neighbors
+     state_condvar[i] = THINKING;
+c0108c30:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108c33:	c7 04 85 00 55 1c c0 	movl   $0x0,-0x3fe3ab00(,%eax,4)
+c0108c3a:	00 00 00 00 
+     phi_test_condvar(LEFT);
+c0108c3e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108c41:	8d 48 04             	lea    0x4(%eax),%ecx
+c0108c44:	ba 67 66 66 66       	mov    $0x66666667,%edx
+c0108c49:	89 c8                	mov    %ecx,%eax
+c0108c4b:	f7 ea                	imul   %edx
+c0108c4d:	d1 fa                	sar    %edx
+c0108c4f:	89 c8                	mov    %ecx,%eax
+c0108c51:	c1 f8 1f             	sar    $0x1f,%eax
+c0108c54:	29 c2                	sub    %eax,%edx
+c0108c56:	89 d0                	mov    %edx,%eax
+c0108c58:	89 c2                	mov    %eax,%edx
+c0108c5a:	c1 e2 02             	shl    $0x2,%edx
+c0108c5d:	01 c2                	add    %eax,%edx
+c0108c5f:	89 c8                	mov    %ecx,%eax
+c0108c61:	29 d0                	sub    %edx,%eax
+c0108c63:	83 ec 0c             	sub    $0xc,%esp
+c0108c66:	50                   	push   %eax
+c0108c67:	e8 37 fe ff ff       	call   c0108aa3 <phi_test_condvar>
+c0108c6c:	83 c4 10             	add    $0x10,%esp
+     phi_test_condvar(RIGHT);
+c0108c6f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108c72:	8d 48 01             	lea    0x1(%eax),%ecx
+c0108c75:	ba 67 66 66 66       	mov    $0x66666667,%edx
+c0108c7a:	89 c8                	mov    %ecx,%eax
+c0108c7c:	f7 ea                	imul   %edx
+c0108c7e:	d1 fa                	sar    %edx
+c0108c80:	89 c8                	mov    %ecx,%eax
+c0108c82:	c1 f8 1f             	sar    $0x1f,%eax
+c0108c85:	29 c2                	sub    %eax,%edx
+c0108c87:	89 d0                	mov    %edx,%eax
+c0108c89:	89 c2                	mov    %eax,%edx
+c0108c8b:	c1 e2 02             	shl    $0x2,%edx
+c0108c8e:	01 c2                	add    %eax,%edx
+c0108c90:	89 c8                	mov    %ecx,%eax
+c0108c92:	29 d0                	sub    %edx,%eax
+c0108c94:	83 ec 0c             	sub    $0xc,%esp
+c0108c97:	50                   	push   %eax
+c0108c98:	e8 06 fe ff ff       	call   c0108aa3 <phi_test_condvar>
+c0108c9d:	83 c4 10             	add    $0x10,%esp
+//--------leave routine in monitor--------------
+     if(mtp->next_count>0)
+c0108ca0:	a1 6c 1a 13 c0       	mov    0xc0131a6c,%eax
+c0108ca5:	8b 40 18             	mov    0x18(%eax),%eax
+c0108ca8:	85 c0                	test   %eax,%eax
+c0108caa:	7e 16                	jle    c0108cc2 <phi_put_forks_condvar+0xa9>
+        up(&(mtp->next));
+c0108cac:	a1 6c 1a 13 c0       	mov    0xc0131a6c,%eax
+c0108cb1:	83 c0 0c             	add    $0xc,%eax
+c0108cb4:	83 ec 0c             	sub    $0xc,%esp
+c0108cb7:	50                   	push   %eax
+c0108cb8:	e8 18 08 00 00       	call   c01094d5 <up>
+c0108cbd:	83 c4 10             	add    $0x10,%esp
+     else
+        up(&(mtp->mutex));
+}
+c0108cc0:	eb 11                	jmp    c0108cd3 <phi_put_forks_condvar+0xba>
+     phi_test_condvar(RIGHT);
+//--------leave routine in monitor--------------
+     if(mtp->next_count>0)
+        up(&(mtp->next));
+     else
+        up(&(mtp->mutex));
+c0108cc2:	a1 6c 1a 13 c0       	mov    0xc0131a6c,%eax
+c0108cc7:	83 ec 0c             	sub    $0xc,%esp
+c0108cca:	50                   	push   %eax
+c0108ccb:	e8 05 08 00 00       	call   c01094d5 <up>
+c0108cd0:	83 c4 10             	add    $0x10,%esp
+}
+c0108cd3:	90                   	nop
+c0108cd4:	c9                   	leave  
+c0108cd5:	c3                   	ret    
+
+c0108cd6 <philosopher_using_condvar>:
+
+//---------- philosophers using monitor (condition variable) ----------------------
+int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
+c0108cd6:	55                   	push   %ebp
+c0108cd7:	89 e5                	mov    %esp,%ebp
+c0108cd9:	83 ec 18             	sub    $0x18,%esp
+  
+    int i, iter=0;
+c0108cdc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    i=(int)arg;
+c0108ce3:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108ce6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cprintf("I am No.%d philosopher_condvar\n",i);
+c0108ce9:	83 ec 08             	sub    $0x8,%esp
+c0108cec:	ff 75 f0             	pushl  -0x10(%ebp)
+c0108cef:	68 98 ec 10 c0       	push   $0xc010ec98
+c0108cf4:	e8 95 75 ff ff       	call   c010028e <cprintf>
+c0108cf9:	83 c4 10             	add    $0x10,%esp
+    while(iter++<TIMES)
+c0108cfc:	eb 62                	jmp    c0108d60 <philosopher_using_condvar+0x8a>
+    { /* iterate*/
+        cprintf("Iter %d, No.%d philosopher_condvar is thinking\n",iter,i); /* thinking*/
+c0108cfe:	83 ec 04             	sub    $0x4,%esp
+c0108d01:	ff 75 f0             	pushl  -0x10(%ebp)
+c0108d04:	ff 75 f4             	pushl  -0xc(%ebp)
+c0108d07:	68 b8 ec 10 c0       	push   $0xc010ecb8
+c0108d0c:	e8 7d 75 ff ff       	call   c010028e <cprintf>
+c0108d11:	83 c4 10             	add    $0x10,%esp
+        do_sleep(SLEEP_TIME);
+c0108d14:	83 ec 0c             	sub    $0xc,%esp
+c0108d17:	6a 0a                	push   $0xa
+c0108d19:	e8 db 27 00 00       	call   c010b4f9 <do_sleep>
+c0108d1e:	83 c4 10             	add    $0x10,%esp
+        phi_take_forks_condvar(i); 
+c0108d21:	83 ec 0c             	sub    $0xc,%esp
+c0108d24:	ff 75 f0             	pushl  -0x10(%ebp)
+c0108d27:	e8 50 fe ff ff       	call   c0108b7c <phi_take_forks_condvar>
+c0108d2c:	83 c4 10             	add    $0x10,%esp
+        /* need two forks, maybe blocked */
+        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
+c0108d2f:	83 ec 04             	sub    $0x4,%esp
+c0108d32:	ff 75 f0             	pushl  -0x10(%ebp)
+c0108d35:	ff 75 f4             	pushl  -0xc(%ebp)
+c0108d38:	68 e8 ec 10 c0       	push   $0xc010ece8
+c0108d3d:	e8 4c 75 ff ff       	call   c010028e <cprintf>
+c0108d42:	83 c4 10             	add    $0x10,%esp
+        do_sleep(SLEEP_TIME);
+c0108d45:	83 ec 0c             	sub    $0xc,%esp
+c0108d48:	6a 0a                	push   $0xa
+c0108d4a:	e8 aa 27 00 00       	call   c010b4f9 <do_sleep>
+c0108d4f:	83 c4 10             	add    $0x10,%esp
+        phi_put_forks_condvar(i); 
+c0108d52:	83 ec 0c             	sub    $0xc,%esp
+c0108d55:	ff 75 f0             	pushl  -0x10(%ebp)
+c0108d58:	e8 bc fe ff ff       	call   c0108c19 <phi_put_forks_condvar>
+c0108d5d:	83 c4 10             	add    $0x10,%esp
+int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
+  
+    int i, iter=0;
+    i=(int)arg;
+    cprintf("I am No.%d philosopher_condvar\n",i);
+    while(iter++<TIMES)
+c0108d60:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108d63:	8d 50 01             	lea    0x1(%eax),%edx
+c0108d66:	89 55 f4             	mov    %edx,-0xc(%ebp)
+c0108d69:	83 f8 03             	cmp    $0x3,%eax
+c0108d6c:	7e 90                	jle    c0108cfe <philosopher_using_condvar+0x28>
+        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
+        do_sleep(SLEEP_TIME);
+        phi_put_forks_condvar(i); 
+        /* return two forks back*/
+    }
+    cprintf("No.%d philosopher_condvar quit\n",i);
+c0108d6e:	83 ec 08             	sub    $0x8,%esp
+c0108d71:	ff 75 f0             	pushl  -0x10(%ebp)
+c0108d74:	68 18 ed 10 c0       	push   $0xc010ed18
+c0108d79:	e8 10 75 ff ff       	call   c010028e <cprintf>
+c0108d7e:	83 c4 10             	add    $0x10,%esp
+    return 0;    
+c0108d81:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0108d86:	c9                   	leave  
+c0108d87:	c3                   	ret    
+
+c0108d88 <check_sync>:
+
+void check_sync(void){
+c0108d88:	55                   	push   %ebp
+c0108d89:	89 e5                	mov    %esp,%ebp
+c0108d8b:	83 ec 18             	sub    $0x18,%esp
+
+    int i;
+
+    //check semaphore
+    sem_init(&mutex, 1);
+c0108d8e:	83 ec 08             	sub    $0x8,%esp
+c0108d91:	6a 01                	push   $0x1
+c0108d93:	68 c8 54 1c c0       	push   $0xc01c54c8
+c0108d98:	e8 cb 05 00 00       	call   c0109368 <sem_init>
+c0108d9d:	83 c4 10             	add    $0x10,%esp
+    for(i=0;i<N;i++){
+c0108da0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0108da7:	e9 8e 00 00 00       	jmp    c0108e3a <check_sync+0xb2>
+        sem_init(&s[i], 0);
+c0108dac:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0108daf:	89 d0                	mov    %edx,%eax
+c0108db1:	01 c0                	add    %eax,%eax
+c0108db3:	01 d0                	add    %edx,%eax
+c0108db5:	c1 e0 02             	shl    $0x2,%eax
+c0108db8:	05 40 55 1c c0       	add    $0xc01c5540,%eax
+c0108dbd:	83 ec 08             	sub    $0x8,%esp
+c0108dc0:	6a 00                	push   $0x0
+c0108dc2:	50                   	push   %eax
+c0108dc3:	e8 a0 05 00 00       	call   c0109368 <sem_init>
+c0108dc8:	83 c4 10             	add    $0x10,%esp
+        int pid = kernel_thread(philosopher_using_semaphore, (void *)i, 0);
+c0108dcb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108dce:	83 ec 04             	sub    $0x4,%esp
+c0108dd1:	6a 00                	push   $0x0
+c0108dd3:	50                   	push   %eax
+c0108dd4:	68 f1 89 10 c0       	push   $0xc01089f1
+c0108dd9:	e8 b1 13 00 00       	call   c010a18f <kernel_thread>
+c0108dde:	83 c4 10             	add    $0x10,%esp
+c0108de1:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        if (pid <= 0) {
+c0108de4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c0108de8:	7f 17                	jg     c0108e01 <check_sync+0x79>
+            panic("create No.%d philosopher_using_semaphore failed.\n");
+c0108dea:	83 ec 04             	sub    $0x4,%esp
+c0108ded:	68 38 ed 10 c0       	push   $0xc010ed38
+c0108df2:	68 ba 00 00 00       	push   $0xba
+c0108df7:	68 6a ed 10 c0       	push   $0xc010ed6a
+c0108dfc:	e8 f3 75 ff ff       	call   c01003f4 <__panic>
+        }
+        philosopher_proc_sema[i] = find_proc(pid);
+c0108e01:	83 ec 0c             	sub    $0xc,%esp
+c0108e04:	ff 75 f0             	pushl  -0x10(%ebp)
+c0108e07:	e8 11 13 00 00       	call   c010a11d <find_proc>
+c0108e0c:	83 c4 10             	add    $0x10,%esp
+c0108e0f:	89 c2                	mov    %eax,%edx
+c0108e11:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108e14:	89 14 85 14 55 1c c0 	mov    %edx,-0x3fe3aaec(,%eax,4)
+        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
+c0108e1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108e1e:	8b 04 85 14 55 1c c0 	mov    -0x3fe3aaec(,%eax,4),%eax
+c0108e25:	83 ec 08             	sub    $0x8,%esp
+c0108e28:	68 81 ed 10 c0       	push   $0xc010ed81
+c0108e2d:	50                   	push   %eax
+c0108e2e:	e8 dd 0e 00 00       	call   c0109d10 <set_proc_name>
+c0108e33:	83 c4 10             	add    $0x10,%esp
+
+    int i;
+
+    //check semaphore
+    sem_init(&mutex, 1);
+    for(i=0;i<N;i++){
+c0108e36:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0108e3a:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
+c0108e3e:	0f 8e 68 ff ff ff    	jle    c0108dac <check_sync+0x24>
+        philosopher_proc_sema[i] = find_proc(pid);
+        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
+    }
+
+    //check condition variable
+    monitor_init(&mt, N);
+c0108e44:	83 ec 08             	sub    $0x8,%esp
+c0108e47:	6a 05                	push   $0x5
+c0108e49:	68 e0 54 1c c0       	push   $0xc01c54e0
+c0108e4e:	e8 1e 07 00 00       	call   c0109571 <monitor_init>
+c0108e53:	83 c4 10             	add    $0x10,%esp
+    for(i=0;i<N;i++){
+c0108e56:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0108e5d:	eb 7d                	jmp    c0108edc <check_sync+0x154>
+        state_condvar[i]=THINKING;
+c0108e5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108e62:	c7 04 85 00 55 1c c0 	movl   $0x0,-0x3fe3ab00(,%eax,4)
+c0108e69:	00 00 00 00 
+        int pid = kernel_thread(philosopher_using_condvar, (void *)i, 0);
+c0108e6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108e70:	83 ec 04             	sub    $0x4,%esp
+c0108e73:	6a 00                	push   $0x0
+c0108e75:	50                   	push   %eax
+c0108e76:	68 d6 8c 10 c0       	push   $0xc0108cd6
+c0108e7b:	e8 0f 13 00 00       	call   c010a18f <kernel_thread>
+c0108e80:	83 c4 10             	add    $0x10,%esp
+c0108e83:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        if (pid <= 0) {
+c0108e86:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c0108e8a:	7f 17                	jg     c0108ea3 <check_sync+0x11b>
+            panic("create No.%d philosopher_using_condvar failed.\n");
+c0108e8c:	83 ec 04             	sub    $0x4,%esp
+c0108e8f:	68 98 ed 10 c0       	push   $0xc010ed98
+c0108e94:	68 c6 00 00 00       	push   $0xc6
+c0108e99:	68 6a ed 10 c0       	push   $0xc010ed6a
+c0108e9e:	e8 51 75 ff ff       	call   c01003f4 <__panic>
+        }
+        philosopher_proc_condvar[i] = find_proc(pid);
+c0108ea3:	83 ec 0c             	sub    $0xc,%esp
+c0108ea6:	ff 75 ec             	pushl  -0x14(%ebp)
+c0108ea9:	e8 6f 12 00 00       	call   c010a11d <find_proc>
+c0108eae:	83 c4 10             	add    $0x10,%esp
+c0108eb1:	89 c2                	mov    %eax,%edx
+c0108eb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108eb6:	89 14 85 b4 54 1c c0 	mov    %edx,-0x3fe3ab4c(,%eax,4)
+        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
+c0108ebd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108ec0:	8b 04 85 b4 54 1c c0 	mov    -0x3fe3ab4c(,%eax,4),%eax
+c0108ec7:	83 ec 08             	sub    $0x8,%esp
+c0108eca:	68 c8 ed 10 c0       	push   $0xc010edc8
+c0108ecf:	50                   	push   %eax
+c0108ed0:	e8 3b 0e 00 00       	call   c0109d10 <set_proc_name>
+c0108ed5:	83 c4 10             	add    $0x10,%esp
+        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
+    }
+
+    //check condition variable
+    monitor_init(&mt, N);
+    for(i=0;i<N;i++){
+c0108ed8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0108edc:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
+c0108ee0:	0f 8e 79 ff ff ff    	jle    c0108e5f <check_sync+0xd7>
+            panic("create No.%d philosopher_using_condvar failed.\n");
+        }
+        philosopher_proc_condvar[i] = find_proc(pid);
+        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
+    }
+}
+c0108ee6:	90                   	nop
+c0108ee7:	c9                   	leave  
+c0108ee8:	c3                   	ret    
+
+c0108ee9 <wait_init>:
+#include <sync.h>
+#include <wait.h>
+#include <proc.h>
+
+void
+wait_init(wait_t *wait, struct proc_struct *proc) {
+c0108ee9:	55                   	push   %ebp
+c0108eea:	89 e5                	mov    %esp,%ebp
+c0108eec:	83 ec 10             	sub    $0x10,%esp
+    wait->proc = proc;
+c0108eef:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108ef2:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0108ef5:	89 10                	mov    %edx,(%eax)
+    wait->wakeup_flags = WT_INTERRUPTED;
+c0108ef7:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108efa:	c7 40 04 00 00 00 80 	movl   $0x80000000,0x4(%eax)
+    list_init(&(wait->wait_link));
+c0108f01:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108f04:	83 c0 0c             	add    $0xc,%eax
+c0108f07:	89 45 fc             	mov    %eax,-0x4(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c0108f0a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0108f0d:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c0108f10:	89 50 04             	mov    %edx,0x4(%eax)
+c0108f13:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0108f16:	8b 50 04             	mov    0x4(%eax),%edx
+c0108f19:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0108f1c:	89 10                	mov    %edx,(%eax)
+}
+c0108f1e:	90                   	nop
+c0108f1f:	c9                   	leave  
+c0108f20:	c3                   	ret    
+
+c0108f21 <wait_queue_init>:
+
+void
+wait_queue_init(wait_queue_t *queue) {
+c0108f21:	55                   	push   %ebp
+c0108f22:	89 e5                	mov    %esp,%ebp
+c0108f24:	83 ec 10             	sub    $0x10,%esp
+    list_init(&(queue->wait_head));
+c0108f27:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108f2a:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c0108f2d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0108f30:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c0108f33:	89 50 04             	mov    %edx,0x4(%eax)
+c0108f36:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0108f39:	8b 50 04             	mov    0x4(%eax),%edx
+c0108f3c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0108f3f:	89 10                	mov    %edx,(%eax)
+}
+c0108f41:	90                   	nop
+c0108f42:	c9                   	leave  
+c0108f43:	c3                   	ret    
+
+c0108f44 <wait_queue_add>:
+
+void
+wait_queue_add(wait_queue_t *queue, wait_t *wait) {
+c0108f44:	55                   	push   %ebp
+c0108f45:	89 e5                	mov    %esp,%ebp
+c0108f47:	83 ec 28             	sub    $0x28,%esp
+    assert(list_empty(&(wait->wait_link)) && wait->proc != NULL);
+c0108f4a:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0108f4d:	83 c0 0c             	add    $0xc,%eax
+c0108f50:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ * list_empty - tests whether a list is empty
+ * @list:       the list to test.
+ * */
+static inline bool
+list_empty(list_entry_t *list) {
+    return list->next == list;
+c0108f53:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0108f56:	8b 40 04             	mov    0x4(%eax),%eax
+c0108f59:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c0108f5c:	0f 94 c0             	sete   %al
+c0108f5f:	0f b6 c0             	movzbl %al,%eax
+c0108f62:	85 c0                	test   %eax,%eax
+c0108f64:	74 09                	je     c0108f6f <wait_queue_add+0x2b>
+c0108f66:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0108f69:	8b 00                	mov    (%eax),%eax
+c0108f6b:	85 c0                	test   %eax,%eax
+c0108f6d:	75 16                	jne    c0108f85 <wait_queue_add+0x41>
+c0108f6f:	68 e4 ed 10 c0       	push   $0xc010ede4
+c0108f74:	68 19 ee 10 c0       	push   $0xc010ee19
+c0108f79:	6a 15                	push   $0x15
+c0108f7b:	68 2e ee 10 c0       	push   $0xc010ee2e
+c0108f80:	e8 6f 74 ff ff       	call   c01003f4 <__panic>
+    wait->wait_queue = queue;
+c0108f85:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0108f88:	8b 55 08             	mov    0x8(%ebp),%edx
+c0108f8b:	89 50 08             	mov    %edx,0x8(%eax)
+    list_add_before(&(queue->wait_head), &(wait->wait_link));
+c0108f8e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0108f91:	8d 50 0c             	lea    0xc(%eax),%edx
+c0108f94:	8b 45 08             	mov    0x8(%ebp),%eax
+c0108f97:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0108f9a:	89 55 ec             	mov    %edx,-0x14(%ebp)
+ * Insert the new element @elm *before* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_before(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm->prev, listelm);
+c0108f9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108fa0:	8b 00                	mov    (%eax),%eax
+c0108fa2:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0108fa5:	89 55 e8             	mov    %edx,-0x18(%ebp)
+c0108fa8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c0108fab:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0108fae:	89 45 e0             	mov    %eax,-0x20(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c0108fb1:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0108fb4:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c0108fb7:	89 10                	mov    %edx,(%eax)
+c0108fb9:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0108fbc:	8b 10                	mov    (%eax),%edx
+c0108fbe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0108fc1:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c0108fc4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108fc7:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0108fca:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c0108fcd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0108fd0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0108fd3:	89 10                	mov    %edx,(%eax)
+}
+c0108fd5:	90                   	nop
+c0108fd6:	c9                   	leave  
+c0108fd7:	c3                   	ret    
+
+c0108fd8 <wait_queue_del>:
+
+void
+wait_queue_del(wait_queue_t *queue, wait_t *wait) {
+c0108fd8:	55                   	push   %ebp
+c0108fd9:	89 e5                	mov    %esp,%ebp
+c0108fdb:	83 ec 28             	sub    $0x28,%esp
+    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
+c0108fde:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0108fe1:	83 c0 0c             	add    $0xc,%eax
+c0108fe4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ * list_empty - tests whether a list is empty
+ * @list:       the list to test.
+ * */
+static inline bool
+list_empty(list_entry_t *list) {
+    return list->next == list;
+c0108fe7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0108fea:	8b 40 04             	mov    0x4(%eax),%eax
+c0108fed:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c0108ff0:	0f 94 c0             	sete   %al
+c0108ff3:	0f b6 c0             	movzbl %al,%eax
+c0108ff6:	85 c0                	test   %eax,%eax
+c0108ff8:	75 0b                	jne    c0109005 <wait_queue_del+0x2d>
+c0108ffa:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0108ffd:	8b 40 08             	mov    0x8(%eax),%eax
+c0109000:	3b 45 08             	cmp    0x8(%ebp),%eax
+c0109003:	74 16                	je     c010901b <wait_queue_del+0x43>
+c0109005:	68 40 ee 10 c0       	push   $0xc010ee40
+c010900a:	68 19 ee 10 c0       	push   $0xc010ee19
+c010900f:	6a 1c                	push   $0x1c
+c0109011:	68 2e ee 10 c0       	push   $0xc010ee2e
+c0109016:	e8 d9 73 ff ff       	call   c01003f4 <__panic>
+    list_del_init(&(wait->wait_link));
+c010901b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010901e:	83 c0 0c             	add    $0xc,%eax
+c0109021:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0109024:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109027:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c010902a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010902d:	8b 40 04             	mov    0x4(%eax),%eax
+c0109030:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0109033:	8b 12                	mov    (%edx),%edx
+c0109035:	89 55 e8             	mov    %edx,-0x18(%ebp)
+c0109038:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c010903b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010903e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0109041:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c0109044:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0109047:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010904a:	89 10                	mov    %edx,(%eax)
+c010904c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010904f:	89 45 e0             	mov    %eax,-0x20(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c0109052:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0109055:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0109058:	89 50 04             	mov    %edx,0x4(%eax)
+c010905b:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010905e:	8b 50 04             	mov    0x4(%eax),%edx
+c0109061:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c0109064:	89 10                	mov    %edx,(%eax)
+}
+c0109066:	90                   	nop
+c0109067:	c9                   	leave  
+c0109068:	c3                   	ret    
+
+c0109069 <wait_queue_next>:
+
+wait_t *
+wait_queue_next(wait_queue_t *queue, wait_t *wait) {
+c0109069:	55                   	push   %ebp
+c010906a:	89 e5                	mov    %esp,%ebp
+c010906c:	83 ec 18             	sub    $0x18,%esp
+    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
+c010906f:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0109072:	83 c0 0c             	add    $0xc,%eax
+c0109075:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ * list_empty - tests whether a list is empty
+ * @list:       the list to test.
+ * */
+static inline bool
+list_empty(list_entry_t *list) {
+    return list->next == list;
+c0109078:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010907b:	8b 40 04             	mov    0x4(%eax),%eax
+c010907e:	39 45 ec             	cmp    %eax,-0x14(%ebp)
+c0109081:	0f 94 c0             	sete   %al
+c0109084:	0f b6 c0             	movzbl %al,%eax
+c0109087:	85 c0                	test   %eax,%eax
+c0109089:	75 0b                	jne    c0109096 <wait_queue_next+0x2d>
+c010908b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010908e:	8b 40 08             	mov    0x8(%eax),%eax
+c0109091:	3b 45 08             	cmp    0x8(%ebp),%eax
+c0109094:	74 16                	je     c01090ac <wait_queue_next+0x43>
+c0109096:	68 40 ee 10 c0       	push   $0xc010ee40
+c010909b:	68 19 ee 10 c0       	push   $0xc010ee19
+c01090a0:	6a 22                	push   $0x22
+c01090a2:	68 2e ee 10 c0       	push   $0xc010ee2e
+c01090a7:	e8 48 73 ff ff       	call   c01003f4 <__panic>
+    list_entry_t *le = list_next(&(wait->wait_link));
+c01090ac:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01090af:	83 c0 0c             	add    $0xc,%eax
+c01090b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c01090b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01090b8:	8b 40 04             	mov    0x4(%eax),%eax
+c01090bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if (le != &(queue->wait_head)) {
+c01090be:	8b 45 08             	mov    0x8(%ebp),%eax
+c01090c1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c01090c4:	74 08                	je     c01090ce <wait_queue_next+0x65>
+        return le2wait(le, wait_link);
+c01090c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01090c9:	83 e8 0c             	sub    $0xc,%eax
+c01090cc:	eb 05                	jmp    c01090d3 <wait_queue_next+0x6a>
+    }
+    return NULL;
+c01090ce:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01090d3:	c9                   	leave  
+c01090d4:	c3                   	ret    
+
+c01090d5 <wait_queue_prev>:
+
+wait_t *
+wait_queue_prev(wait_queue_t *queue, wait_t *wait) {
+c01090d5:	55                   	push   %ebp
+c01090d6:	89 e5                	mov    %esp,%ebp
+c01090d8:	83 ec 18             	sub    $0x18,%esp
+    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
+c01090db:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01090de:	83 c0 0c             	add    $0xc,%eax
+c01090e1:	89 45 ec             	mov    %eax,-0x14(%ebp)
+ * list_empty - tests whether a list is empty
+ * @list:       the list to test.
+ * */
+static inline bool
+list_empty(list_entry_t *list) {
+    return list->next == list;
+c01090e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c01090e7:	8b 40 04             	mov    0x4(%eax),%eax
+c01090ea:	39 45 ec             	cmp    %eax,-0x14(%ebp)
+c01090ed:	0f 94 c0             	sete   %al
+c01090f0:	0f b6 c0             	movzbl %al,%eax
+c01090f3:	85 c0                	test   %eax,%eax
+c01090f5:	75 0b                	jne    c0109102 <wait_queue_prev+0x2d>
+c01090f7:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01090fa:	8b 40 08             	mov    0x8(%eax),%eax
+c01090fd:	3b 45 08             	cmp    0x8(%ebp),%eax
+c0109100:	74 16                	je     c0109118 <wait_queue_prev+0x43>
+c0109102:	68 40 ee 10 c0       	push   $0xc010ee40
+c0109107:	68 19 ee 10 c0       	push   $0xc010ee19
+c010910c:	6a 2c                	push   $0x2c
+c010910e:	68 2e ee 10 c0       	push   $0xc010ee2e
+c0109113:	e8 dc 72 ff ff       	call   c01003f4 <__panic>
+    list_entry_t *le = list_prev(&(wait->wait_link));
+c0109118:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010911b:	83 c0 0c             	add    $0xc,%eax
+c010911e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ * list_prev - get the previous entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_prev(list_entry_t *listelm) {
+    return listelm->prev;
+c0109121:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109124:	8b 00                	mov    (%eax),%eax
+c0109126:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if (le != &(queue->wait_head)) {
+c0109129:	8b 45 08             	mov    0x8(%ebp),%eax
+c010912c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c010912f:	74 08                	je     c0109139 <wait_queue_prev+0x64>
+        return le2wait(le, wait_link);
+c0109131:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109134:	83 e8 0c             	sub    $0xc,%eax
+c0109137:	eb 05                	jmp    c010913e <wait_queue_prev+0x69>
+    }
+    return NULL;
+c0109139:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010913e:	c9                   	leave  
+c010913f:	c3                   	ret    
+
+c0109140 <wait_queue_first>:
+
+wait_t *
+wait_queue_first(wait_queue_t *queue) {
+c0109140:	55                   	push   %ebp
+c0109141:	89 e5                	mov    %esp,%ebp
+c0109143:	83 ec 10             	sub    $0x10,%esp
+    list_entry_t *le = list_next(&(queue->wait_head));
+c0109146:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109149:	89 45 f8             	mov    %eax,-0x8(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c010914c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010914f:	8b 40 04             	mov    0x4(%eax),%eax
+c0109152:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    if (le != &(queue->wait_head)) {
+c0109155:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109158:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+c010915b:	74 08                	je     c0109165 <wait_queue_first+0x25>
+        return le2wait(le, wait_link);
+c010915d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0109160:	83 e8 0c             	sub    $0xc,%eax
+c0109163:	eb 05                	jmp    c010916a <wait_queue_first+0x2a>
+    }
+    return NULL;
+c0109165:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010916a:	c9                   	leave  
+c010916b:	c3                   	ret    
+
+c010916c <wait_queue_last>:
+
+wait_t *
+wait_queue_last(wait_queue_t *queue) {
+c010916c:	55                   	push   %ebp
+c010916d:	89 e5                	mov    %esp,%ebp
+c010916f:	83 ec 10             	sub    $0x10,%esp
+    list_entry_t *le = list_prev(&(queue->wait_head));
+c0109172:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109175:	89 45 f8             	mov    %eax,-0x8(%ebp)
+ * list_prev - get the previous entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_prev(list_entry_t *listelm) {
+    return listelm->prev;
+c0109178:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010917b:	8b 00                	mov    (%eax),%eax
+c010917d:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    if (le != &(queue->wait_head)) {
+c0109180:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109183:	3b 45 fc             	cmp    -0x4(%ebp),%eax
+c0109186:	74 08                	je     c0109190 <wait_queue_last+0x24>
+        return le2wait(le, wait_link);
+c0109188:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010918b:	83 e8 0c             	sub    $0xc,%eax
+c010918e:	eb 05                	jmp    c0109195 <wait_queue_last+0x29>
+    }
+    return NULL;
+c0109190:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0109195:	c9                   	leave  
+c0109196:	c3                   	ret    
+
+c0109197 <wait_queue_empty>:
+
+bool
+wait_queue_empty(wait_queue_t *queue) {
+c0109197:	55                   	push   %ebp
+c0109198:	89 e5                	mov    %esp,%ebp
+c010919a:	83 ec 10             	sub    $0x10,%esp
+    return list_empty(&(queue->wait_head));
+c010919d:	8b 45 08             	mov    0x8(%ebp),%eax
+c01091a0:	89 45 fc             	mov    %eax,-0x4(%ebp)
+ * list_empty - tests whether a list is empty
+ * @list:       the list to test.
+ * */
+static inline bool
+list_empty(list_entry_t *list) {
+    return list->next == list;
+c01091a3:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01091a6:	8b 40 04             	mov    0x4(%eax),%eax
+c01091a9:	39 45 fc             	cmp    %eax,-0x4(%ebp)
+c01091ac:	0f 94 c0             	sete   %al
+c01091af:	0f b6 c0             	movzbl %al,%eax
+c01091b2:	90                   	nop
+}
+c01091b3:	c9                   	leave  
+c01091b4:	c3                   	ret    
+
+c01091b5 <wait_in_queue>:
+
+bool
+wait_in_queue(wait_t *wait) {
+c01091b5:	55                   	push   %ebp
+c01091b6:	89 e5                	mov    %esp,%ebp
+c01091b8:	83 ec 10             	sub    $0x10,%esp
+    return !list_empty(&(wait->wait_link));
+c01091bb:	8b 45 08             	mov    0x8(%ebp),%eax
+c01091be:	83 c0 0c             	add    $0xc,%eax
+c01091c1:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c01091c4:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c01091c7:	8b 40 04             	mov    0x4(%eax),%eax
+c01091ca:	39 45 fc             	cmp    %eax,-0x4(%ebp)
+c01091cd:	0f 94 c0             	sete   %al
+c01091d0:	0f b6 c0             	movzbl %al,%eax
+c01091d3:	85 c0                	test   %eax,%eax
+c01091d5:	0f 94 c0             	sete   %al
+c01091d8:	0f b6 c0             	movzbl %al,%eax
+}
+c01091db:	c9                   	leave  
+c01091dc:	c3                   	ret    
+
+c01091dd <wakeup_wait>:
+
+void
+wakeup_wait(wait_queue_t *queue, wait_t *wait, uint32_t wakeup_flags, bool del) {
+c01091dd:	55                   	push   %ebp
+c01091de:	89 e5                	mov    %esp,%ebp
+c01091e0:	83 ec 08             	sub    $0x8,%esp
+    if (del) {
+c01091e3:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
+c01091e7:	74 11                	je     c01091fa <wakeup_wait+0x1d>
+        wait_queue_del(queue, wait);
+c01091e9:	83 ec 08             	sub    $0x8,%esp
+c01091ec:	ff 75 0c             	pushl  0xc(%ebp)
+c01091ef:	ff 75 08             	pushl  0x8(%ebp)
+c01091f2:	e8 e1 fd ff ff       	call   c0108fd8 <wait_queue_del>
+c01091f7:	83 c4 10             	add    $0x10,%esp
+    }
+    wait->wakeup_flags = wakeup_flags;
+c01091fa:	8b 45 0c             	mov    0xc(%ebp),%eax
+c01091fd:	8b 55 10             	mov    0x10(%ebp),%edx
+c0109200:	89 50 04             	mov    %edx,0x4(%eax)
+    wakeup_proc(wait->proc);
+c0109203:	8b 45 0c             	mov    0xc(%ebp),%eax
+c0109206:	8b 00                	mov    (%eax),%eax
+c0109208:	83 ec 0c             	sub    $0xc,%esp
+c010920b:	50                   	push   %eax
+c010920c:	e8 c8 24 00 00       	call   c010b6d9 <wakeup_proc>
+c0109211:	83 c4 10             	add    $0x10,%esp
+}
+c0109214:	90                   	nop
+c0109215:	c9                   	leave  
+c0109216:	c3                   	ret    
+
+c0109217 <wakeup_first>:
+
+void
+wakeup_first(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
+c0109217:	55                   	push   %ebp
+c0109218:	89 e5                	mov    %esp,%ebp
+c010921a:	83 ec 18             	sub    $0x18,%esp
+    wait_t *wait;
+    if ((wait = wait_queue_first(queue)) != NULL) {
+c010921d:	ff 75 08             	pushl  0x8(%ebp)
+c0109220:	e8 1b ff ff ff       	call   c0109140 <wait_queue_first>
+c0109225:	83 c4 04             	add    $0x4,%esp
+c0109228:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010922b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010922f:	74 14                	je     c0109245 <wakeup_first+0x2e>
+        wakeup_wait(queue, wait, wakeup_flags, del);
+c0109231:	ff 75 10             	pushl  0x10(%ebp)
+c0109234:	ff 75 0c             	pushl  0xc(%ebp)
+c0109237:	ff 75 f4             	pushl  -0xc(%ebp)
+c010923a:	ff 75 08             	pushl  0x8(%ebp)
+c010923d:	e8 9b ff ff ff       	call   c01091dd <wakeup_wait>
+c0109242:	83 c4 10             	add    $0x10,%esp
+    }
+}
+c0109245:	90                   	nop
+c0109246:	c9                   	leave  
+c0109247:	c3                   	ret    
+
+c0109248 <wakeup_queue>:
+
+void
+wakeup_queue(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
+c0109248:	55                   	push   %ebp
+c0109249:	89 e5                	mov    %esp,%ebp
+c010924b:	83 ec 18             	sub    $0x18,%esp
+    wait_t *wait;
+    if ((wait = wait_queue_first(queue)) != NULL) {
+c010924e:	ff 75 08             	pushl  0x8(%ebp)
+c0109251:	e8 ea fe ff ff       	call   c0109140 <wait_queue_first>
+c0109256:	83 c4 04             	add    $0x4,%esp
+c0109259:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010925c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0109260:	74 5f                	je     c01092c1 <wakeup_queue+0x79>
+        if (del) {
+c0109262:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c0109266:	74 2c                	je     c0109294 <wakeup_queue+0x4c>
+            do {
+                wakeup_wait(queue, wait, wakeup_flags, 1);
+c0109268:	6a 01                	push   $0x1
+c010926a:	ff 75 0c             	pushl  0xc(%ebp)
+c010926d:	ff 75 f4             	pushl  -0xc(%ebp)
+c0109270:	ff 75 08             	pushl  0x8(%ebp)
+c0109273:	e8 65 ff ff ff       	call   c01091dd <wakeup_wait>
+c0109278:	83 c4 10             	add    $0x10,%esp
+            } while ((wait = wait_queue_first(queue)) != NULL);
+c010927b:	83 ec 0c             	sub    $0xc,%esp
+c010927e:	ff 75 08             	pushl  0x8(%ebp)
+c0109281:	e8 ba fe ff ff       	call   c0109140 <wait_queue_first>
+c0109286:	83 c4 10             	add    $0x10,%esp
+c0109289:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010928c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0109290:	75 d6                	jne    c0109268 <wakeup_queue+0x20>
+            do {
+                wakeup_wait(queue, wait, wakeup_flags, 0);
+            } while ((wait = wait_queue_next(queue, wait)) != NULL);
+        }
+    }
+}
+c0109292:	eb 2d                	jmp    c01092c1 <wakeup_queue+0x79>
+                wakeup_wait(queue, wait, wakeup_flags, 1);
+            } while ((wait = wait_queue_first(queue)) != NULL);
+        }
+        else {
+            do {
+                wakeup_wait(queue, wait, wakeup_flags, 0);
+c0109294:	6a 00                	push   $0x0
+c0109296:	ff 75 0c             	pushl  0xc(%ebp)
+c0109299:	ff 75 f4             	pushl  -0xc(%ebp)
+c010929c:	ff 75 08             	pushl  0x8(%ebp)
+c010929f:	e8 39 ff ff ff       	call   c01091dd <wakeup_wait>
+c01092a4:	83 c4 10             	add    $0x10,%esp
+            } while ((wait = wait_queue_next(queue, wait)) != NULL);
+c01092a7:	83 ec 08             	sub    $0x8,%esp
+c01092aa:	ff 75 f4             	pushl  -0xc(%ebp)
+c01092ad:	ff 75 08             	pushl  0x8(%ebp)
+c01092b0:	e8 b4 fd ff ff       	call   c0109069 <wait_queue_next>
+c01092b5:	83 c4 10             	add    $0x10,%esp
+c01092b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01092bb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01092bf:	75 d3                	jne    c0109294 <wakeup_queue+0x4c>
+        }
+    }
+}
+c01092c1:	90                   	nop
+c01092c2:	c9                   	leave  
+c01092c3:	c3                   	ret    
+
+c01092c4 <wait_current_set>:
+
+void
+wait_current_set(wait_queue_t *queue, wait_t *wait, uint32_t wait_state) {
+c01092c4:	55                   	push   %ebp
+c01092c5:	89 e5                	mov    %esp,%ebp
+c01092c7:	83 ec 08             	sub    $0x8,%esp
+    assert(current != NULL);
+c01092ca:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c01092cf:	85 c0                	test   %eax,%eax
+c01092d1:	75 16                	jne    c01092e9 <wait_current_set+0x25>
+c01092d3:	68 7d ee 10 c0       	push   $0xc010ee7d
+c01092d8:	68 19 ee 10 c0       	push   $0xc010ee19
+c01092dd:	6a 74                	push   $0x74
+c01092df:	68 2e ee 10 c0       	push   $0xc010ee2e
+c01092e4:	e8 0b 71 ff ff       	call   c01003f4 <__panic>
+    wait_init(wait, current);
+c01092e9:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c01092ee:	83 ec 08             	sub    $0x8,%esp
+c01092f1:	50                   	push   %eax
+c01092f2:	ff 75 0c             	pushl  0xc(%ebp)
+c01092f5:	e8 ef fb ff ff       	call   c0108ee9 <wait_init>
+c01092fa:	83 c4 10             	add    $0x10,%esp
+    current->state = PROC_SLEEPING;
+c01092fd:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c0109302:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
+    current->wait_state = wait_state;
+c0109308:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010930d:	8b 55 10             	mov    0x10(%ebp),%edx
+c0109310:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
+    wait_queue_add(queue, wait);
+c0109316:	83 ec 08             	sub    $0x8,%esp
+c0109319:	ff 75 0c             	pushl  0xc(%ebp)
+c010931c:	ff 75 08             	pushl  0x8(%ebp)
+c010931f:	e8 20 fc ff ff       	call   c0108f44 <wait_queue_add>
+c0109324:	83 c4 10             	add    $0x10,%esp
+}
+c0109327:	90                   	nop
+c0109328:	c9                   	leave  
+c0109329:	c3                   	ret    
+
+c010932a <__intr_save>:
+#include <assert.h>
+#include <atomic.h>
+#include <sched.h>
+
+static inline bool
+__intr_save(void) {
+c010932a:	55                   	push   %ebp
+c010932b:	89 e5                	mov    %esp,%ebp
+c010932d:	83 ec 18             	sub    $0x18,%esp
+}
+
+static inline uint32_t
+read_eflags(void) {
+    uint32_t eflags;
+    asm volatile ("pushfl; popl %0" : "=r" (eflags));
+c0109330:	9c                   	pushf  
+c0109331:	58                   	pop    %eax
+c0109332:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return eflags;
+c0109335:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    if (read_eflags() & FL_IF) {
+c0109338:	25 00 02 00 00       	and    $0x200,%eax
+c010933d:	85 c0                	test   %eax,%eax
+c010933f:	74 0c                	je     c010934d <__intr_save+0x23>
+        intr_disable();
+c0109341:	e8 4b 8e ff ff       	call   c0102191 <intr_disable>
+        return 1;
+c0109346:	b8 01 00 00 00       	mov    $0x1,%eax
+c010934b:	eb 05                	jmp    c0109352 <__intr_save+0x28>
+    }
+    return 0;
+c010934d:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c0109352:	c9                   	leave  
+c0109353:	c3                   	ret    
+
+c0109354 <__intr_restore>:
+
+static inline void
+__intr_restore(bool flag) {
+c0109354:	55                   	push   %ebp
+c0109355:	89 e5                	mov    %esp,%ebp
+c0109357:	83 ec 08             	sub    $0x8,%esp
+    if (flag) {
+c010935a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010935e:	74 05                	je     c0109365 <__intr_restore+0x11>
+        intr_enable();
+c0109360:	e8 25 8e ff ff       	call   c010218a <intr_enable>
+    }
+}
+c0109365:	90                   	nop
+c0109366:	c9                   	leave  
+c0109367:	c3                   	ret    
+
+c0109368 <sem_init>:
+#include <proc.h>
+#include <sync.h>
+#include <assert.h>
+
+void
+sem_init(semaphore_t *sem, int value) {
+c0109368:	55                   	push   %ebp
+c0109369:	89 e5                	mov    %esp,%ebp
+c010936b:	83 ec 08             	sub    $0x8,%esp
+    sem->value = value;
+c010936e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109371:	8b 55 0c             	mov    0xc(%ebp),%edx
+c0109374:	89 10                	mov    %edx,(%eax)
+    wait_queue_init(&(sem->wait_queue));
+c0109376:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109379:	83 c0 04             	add    $0x4,%eax
+c010937c:	83 ec 0c             	sub    $0xc,%esp
+c010937f:	50                   	push   %eax
+c0109380:	e8 9c fb ff ff       	call   c0108f21 <wait_queue_init>
+c0109385:	83 c4 10             	add    $0x10,%esp
+}
+c0109388:	90                   	nop
+c0109389:	c9                   	leave  
+c010938a:	c3                   	ret    
+
+c010938b <__up>:
+
+static __noinline void __up(semaphore_t *sem, uint32_t wait_state) {
+c010938b:	55                   	push   %ebp
+c010938c:	89 e5                	mov    %esp,%ebp
+c010938e:	83 ec 18             	sub    $0x18,%esp
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c0109391:	e8 94 ff ff ff       	call   c010932a <__intr_save>
+c0109396:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    {
+        wait_t *wait;
+        if ((wait = wait_queue_first(&(sem->wait_queue))) == NULL) {
+c0109399:	8b 45 08             	mov    0x8(%ebp),%eax
+c010939c:	83 c0 04             	add    $0x4,%eax
+c010939f:	83 ec 0c             	sub    $0xc,%esp
+c01093a2:	50                   	push   %eax
+c01093a3:	e8 98 fd ff ff       	call   c0109140 <wait_queue_first>
+c01093a8:	83 c4 10             	add    $0x10,%esp
+c01093ab:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c01093ae:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c01093b2:	75 0f                	jne    c01093c3 <__up+0x38>
+            sem->value ++;
+c01093b4:	8b 45 08             	mov    0x8(%ebp),%eax
+c01093b7:	8b 00                	mov    (%eax),%eax
+c01093b9:	8d 50 01             	lea    0x1(%eax),%edx
+c01093bc:	8b 45 08             	mov    0x8(%ebp),%eax
+c01093bf:	89 10                	mov    %edx,(%eax)
+c01093c1:	eb 3d                	jmp    c0109400 <__up+0x75>
+        }
+        else {
+            assert(wait->proc->wait_state == wait_state);
+c01093c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01093c6:	8b 00                	mov    (%eax),%eax
+c01093c8:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
+c01093ce:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c01093d1:	74 16                	je     c01093e9 <__up+0x5e>
+c01093d3:	68 90 ee 10 c0       	push   $0xc010ee90
+c01093d8:	68 b5 ee 10 c0       	push   $0xc010eeb5
+c01093dd:	6a 19                	push   $0x19
+c01093df:	68 ca ee 10 c0       	push   $0xc010eeca
+c01093e4:	e8 0b 70 ff ff       	call   c01003f4 <__panic>
+            wakeup_wait(&(sem->wait_queue), wait, wait_state, 1);
+c01093e9:	8b 45 08             	mov    0x8(%ebp),%eax
+c01093ec:	83 c0 04             	add    $0x4,%eax
+c01093ef:	6a 01                	push   $0x1
+c01093f1:	ff 75 0c             	pushl  0xc(%ebp)
+c01093f4:	ff 75 f0             	pushl  -0x10(%ebp)
+c01093f7:	50                   	push   %eax
+c01093f8:	e8 e0 fd ff ff       	call   c01091dd <wakeup_wait>
+c01093fd:	83 c4 10             	add    $0x10,%esp
+        }
+    }
+    local_intr_restore(intr_flag);
+c0109400:	83 ec 0c             	sub    $0xc,%esp
+c0109403:	ff 75 f4             	pushl  -0xc(%ebp)
+c0109406:	e8 49 ff ff ff       	call   c0109354 <__intr_restore>
+c010940b:	83 c4 10             	add    $0x10,%esp
+}
+c010940e:	90                   	nop
+c010940f:	c9                   	leave  
+c0109410:	c3                   	ret    
+
+c0109411 <__down>:
+
+static __noinline uint32_t __down(semaphore_t *sem, uint32_t wait_state) {
+c0109411:	55                   	push   %ebp
+c0109412:	89 e5                	mov    %esp,%ebp
+c0109414:	83 ec 28             	sub    $0x28,%esp
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c0109417:	e8 0e ff ff ff       	call   c010932a <__intr_save>
+c010941c:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (sem->value > 0) {
+c010941f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109422:	8b 00                	mov    (%eax),%eax
+c0109424:	85 c0                	test   %eax,%eax
+c0109426:	7e 25                	jle    c010944d <__down+0x3c>
+        sem->value --;
+c0109428:	8b 45 08             	mov    0x8(%ebp),%eax
+c010942b:	8b 00                	mov    (%eax),%eax
+c010942d:	8d 50 ff             	lea    -0x1(%eax),%edx
+c0109430:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109433:	89 10                	mov    %edx,(%eax)
+        local_intr_restore(intr_flag);
+c0109435:	83 ec 0c             	sub    $0xc,%esp
+c0109438:	ff 75 f4             	pushl  -0xc(%ebp)
+c010943b:	e8 14 ff ff ff       	call   c0109354 <__intr_restore>
+c0109440:	83 c4 10             	add    $0x10,%esp
+        return 0;
+c0109443:	b8 00 00 00 00       	mov    $0x0,%eax
+c0109448:	e9 86 00 00 00       	jmp    c01094d3 <__down+0xc2>
+    }
+    wait_t __wait, *wait = &__wait;
+c010944d:	8d 45 dc             	lea    -0x24(%ebp),%eax
+c0109450:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    wait_current_set(&(sem->wait_queue), wait, wait_state);
+c0109453:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109456:	83 c0 04             	add    $0x4,%eax
+c0109459:	83 ec 04             	sub    $0x4,%esp
+c010945c:	ff 75 0c             	pushl  0xc(%ebp)
+c010945f:	ff 75 f0             	pushl  -0x10(%ebp)
+c0109462:	50                   	push   %eax
+c0109463:	e8 5c fe ff ff       	call   c01092c4 <wait_current_set>
+c0109468:	83 c4 10             	add    $0x10,%esp
+    local_intr_restore(intr_flag);
+c010946b:	83 ec 0c             	sub    $0xc,%esp
+c010946e:	ff 75 f4             	pushl  -0xc(%ebp)
+c0109471:	e8 de fe ff ff       	call   c0109354 <__intr_restore>
+c0109476:	83 c4 10             	add    $0x10,%esp
+
+    schedule();
+c0109479:	e8 eb 22 00 00       	call   c010b769 <schedule>
+
+    local_intr_save(intr_flag);
+c010947e:	e8 a7 fe ff ff       	call   c010932a <__intr_save>
+c0109483:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    wait_current_del(&(sem->wait_queue), wait);
+c0109486:	83 ec 0c             	sub    $0xc,%esp
+c0109489:	ff 75 f0             	pushl  -0x10(%ebp)
+c010948c:	e8 24 fd ff ff       	call   c01091b5 <wait_in_queue>
+c0109491:	83 c4 10             	add    $0x10,%esp
+c0109494:	85 c0                	test   %eax,%eax
+c0109496:	74 15                	je     c01094ad <__down+0x9c>
+c0109498:	8b 45 08             	mov    0x8(%ebp),%eax
+c010949b:	83 c0 04             	add    $0x4,%eax
+c010949e:	83 ec 08             	sub    $0x8,%esp
+c01094a1:	ff 75 f0             	pushl  -0x10(%ebp)
+c01094a4:	50                   	push   %eax
+c01094a5:	e8 2e fb ff ff       	call   c0108fd8 <wait_queue_del>
+c01094aa:	83 c4 10             	add    $0x10,%esp
+    local_intr_restore(intr_flag);
+c01094ad:	83 ec 0c             	sub    $0xc,%esp
+c01094b0:	ff 75 f4             	pushl  -0xc(%ebp)
+c01094b3:	e8 9c fe ff ff       	call   c0109354 <__intr_restore>
+c01094b8:	83 c4 10             	add    $0x10,%esp
+
+    if (wait->wakeup_flags != wait_state) {
+c01094bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01094be:	8b 40 04             	mov    0x4(%eax),%eax
+c01094c1:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c01094c4:	74 08                	je     c01094ce <__down+0xbd>
+        return wait->wakeup_flags;
+c01094c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c01094c9:	8b 40 04             	mov    0x4(%eax),%eax
+c01094cc:	eb 05                	jmp    c01094d3 <__down+0xc2>
+    }
+    return 0;
+c01094ce:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01094d3:	c9                   	leave  
+c01094d4:	c3                   	ret    
+
+c01094d5 <up>:
+
+void
+up(semaphore_t *sem) {
+c01094d5:	55                   	push   %ebp
+c01094d6:	89 e5                	mov    %esp,%ebp
+c01094d8:	83 ec 08             	sub    $0x8,%esp
+    __up(sem, WT_KSEM);
+c01094db:	83 ec 08             	sub    $0x8,%esp
+c01094de:	68 00 01 00 00       	push   $0x100
+c01094e3:	ff 75 08             	pushl  0x8(%ebp)
+c01094e6:	e8 a0 fe ff ff       	call   c010938b <__up>
+c01094eb:	83 c4 10             	add    $0x10,%esp
+}
+c01094ee:	90                   	nop
+c01094ef:	c9                   	leave  
+c01094f0:	c3                   	ret    
+
+c01094f1 <down>:
+
+void
+down(semaphore_t *sem) {
+c01094f1:	55                   	push   %ebp
+c01094f2:	89 e5                	mov    %esp,%ebp
+c01094f4:	83 ec 18             	sub    $0x18,%esp
+    uint32_t flags = __down(sem, WT_KSEM);
+c01094f7:	83 ec 08             	sub    $0x8,%esp
+c01094fa:	68 00 01 00 00       	push   $0x100
+c01094ff:	ff 75 08             	pushl  0x8(%ebp)
+c0109502:	e8 0a ff ff ff       	call   c0109411 <__down>
+c0109507:	83 c4 10             	add    $0x10,%esp
+c010950a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    assert(flags == 0);
+c010950d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0109511:	74 16                	je     c0109529 <down+0x38>
+c0109513:	68 da ee 10 c0       	push   $0xc010eeda
+c0109518:	68 b5 ee 10 c0       	push   $0xc010eeb5
+c010951d:	6a 40                	push   $0x40
+c010951f:	68 ca ee 10 c0       	push   $0xc010eeca
+c0109524:	e8 cb 6e ff ff       	call   c01003f4 <__panic>
+}
+c0109529:	90                   	nop
+c010952a:	c9                   	leave  
+c010952b:	c3                   	ret    
+
+c010952c <try_down>:
+
+bool
+try_down(semaphore_t *sem) {
+c010952c:	55                   	push   %ebp
+c010952d:	89 e5                	mov    %esp,%ebp
+c010952f:	83 ec 18             	sub    $0x18,%esp
+    bool intr_flag, ret = 0;
+c0109532:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    local_intr_save(intr_flag);
+c0109539:	e8 ec fd ff ff       	call   c010932a <__intr_save>
+c010953e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if (sem->value > 0) {
+c0109541:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109544:	8b 00                	mov    (%eax),%eax
+c0109546:	85 c0                	test   %eax,%eax
+c0109548:	7e 14                	jle    c010955e <try_down+0x32>
+        sem->value --, ret = 1;
+c010954a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010954d:	8b 00                	mov    (%eax),%eax
+c010954f:	8d 50 ff             	lea    -0x1(%eax),%edx
+c0109552:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109555:	89 10                	mov    %edx,(%eax)
+c0109557:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
+    }
+    local_intr_restore(intr_flag);
+c010955e:	83 ec 0c             	sub    $0xc,%esp
+c0109561:	ff 75 f0             	pushl  -0x10(%ebp)
+c0109564:	e8 eb fd ff ff       	call   c0109354 <__intr_restore>
+c0109569:	83 c4 10             	add    $0x10,%esp
+    return ret;
+c010956c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c010956f:	c9                   	leave  
+c0109570:	c3                   	ret    
+
+c0109571 <monitor_init>:
+#include <assert.h>
+
+
+// Initialize monitor.
+void     
+monitor_init (monitor_t * mtp, size_t num_cv) {
+c0109571:	55                   	push   %ebp
+c0109572:	89 e5                	mov    %esp,%ebp
+c0109574:	83 ec 18             	sub    $0x18,%esp
+    int i;
+    assert(num_cv>0);
+c0109577:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c010957b:	75 16                	jne    c0109593 <monitor_init+0x22>
+c010957d:	68 e8 ee 10 c0       	push   $0xc010eee8
+c0109582:	68 f1 ee 10 c0       	push   $0xc010eef1
+c0109587:	6a 0b                	push   $0xb
+c0109589:	68 06 ef 10 c0       	push   $0xc010ef06
+c010958e:	e8 61 6e ff ff       	call   c01003f4 <__panic>
+    mtp->next_count = 0;
+c0109593:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109596:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
+    mtp->cv = NULL;
+c010959d:	8b 45 08             	mov    0x8(%ebp),%eax
+c01095a0:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
+    sem_init(&(mtp->mutex), 1); //unlocked
+c01095a7:	8b 45 08             	mov    0x8(%ebp),%eax
+c01095aa:	83 ec 08             	sub    $0x8,%esp
+c01095ad:	6a 01                	push   $0x1
+c01095af:	50                   	push   %eax
+c01095b0:	e8 b3 fd ff ff       	call   c0109368 <sem_init>
+c01095b5:	83 c4 10             	add    $0x10,%esp
+    sem_init(&(mtp->next), 0);
+c01095b8:	8b 45 08             	mov    0x8(%ebp),%eax
+c01095bb:	83 c0 0c             	add    $0xc,%eax
+c01095be:	83 ec 08             	sub    $0x8,%esp
+c01095c1:	6a 00                	push   $0x0
+c01095c3:	50                   	push   %eax
+c01095c4:	e8 9f fd ff ff       	call   c0109368 <sem_init>
+c01095c9:	83 c4 10             	add    $0x10,%esp
+    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
+c01095cc:	8b 55 0c             	mov    0xc(%ebp),%edx
+c01095cf:	89 d0                	mov    %edx,%eax
+c01095d1:	c1 e0 02             	shl    $0x2,%eax
+c01095d4:	01 d0                	add    %edx,%eax
+c01095d6:	c1 e0 02             	shl    $0x2,%eax
+c01095d9:	83 ec 0c             	sub    $0xc,%esp
+c01095dc:	50                   	push   %eax
+c01095dd:	e8 7b d6 ff ff       	call   c0106c5d <kmalloc>
+c01095e2:	83 c4 10             	add    $0x10,%esp
+c01095e5:	89 c2                	mov    %eax,%edx
+c01095e7:	8b 45 08             	mov    0x8(%ebp),%eax
+c01095ea:	89 50 1c             	mov    %edx,0x1c(%eax)
+    assert(mtp->cv!=NULL);
+c01095ed:	8b 45 08             	mov    0x8(%ebp),%eax
+c01095f0:	8b 40 1c             	mov    0x1c(%eax),%eax
+c01095f3:	85 c0                	test   %eax,%eax
+c01095f5:	75 16                	jne    c010960d <monitor_init+0x9c>
+c01095f7:	68 1a ef 10 c0       	push   $0xc010ef1a
+c01095fc:	68 f1 ee 10 c0       	push   $0xc010eef1
+c0109601:	6a 11                	push   $0x11
+c0109603:	68 06 ef 10 c0       	push   $0xc010ef06
+c0109608:	e8 e7 6d ff ff       	call   c01003f4 <__panic>
+    for(i=0; i<num_cv; i++){
+c010960d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c0109614:	eb 5f                	jmp    c0109675 <monitor_init+0x104>
+        mtp->cv[i].count=0;
+c0109616:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109619:	8b 48 1c             	mov    0x1c(%eax),%ecx
+c010961c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010961f:	89 d0                	mov    %edx,%eax
+c0109621:	c1 e0 02             	shl    $0x2,%eax
+c0109624:	01 d0                	add    %edx,%eax
+c0109626:	c1 e0 02             	shl    $0x2,%eax
+c0109629:	01 c8                	add    %ecx,%eax
+c010962b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
+        sem_init(&(mtp->cv[i].sem),0);
+c0109632:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109635:	8b 48 1c             	mov    0x1c(%eax),%ecx
+c0109638:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010963b:	89 d0                	mov    %edx,%eax
+c010963d:	c1 e0 02             	shl    $0x2,%eax
+c0109640:	01 d0                	add    %edx,%eax
+c0109642:	c1 e0 02             	shl    $0x2,%eax
+c0109645:	01 c8                	add    %ecx,%eax
+c0109647:	83 ec 08             	sub    $0x8,%esp
+c010964a:	6a 00                	push   $0x0
+c010964c:	50                   	push   %eax
+c010964d:	e8 16 fd ff ff       	call   c0109368 <sem_init>
+c0109652:	83 c4 10             	add    $0x10,%esp
+        mtp->cv[i].owner=mtp;
+c0109655:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109658:	8b 48 1c             	mov    0x1c(%eax),%ecx
+c010965b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010965e:	89 d0                	mov    %edx,%eax
+c0109660:	c1 e0 02             	shl    $0x2,%eax
+c0109663:	01 d0                	add    %edx,%eax
+c0109665:	c1 e0 02             	shl    $0x2,%eax
+c0109668:	8d 14 01             	lea    (%ecx,%eax,1),%edx
+c010966b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010966e:	89 42 10             	mov    %eax,0x10(%edx)
+    mtp->cv = NULL;
+    sem_init(&(mtp->mutex), 1); //unlocked
+    sem_init(&(mtp->next), 0);
+    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
+    assert(mtp->cv!=NULL);
+    for(i=0; i<num_cv; i++){
+c0109671:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c0109675:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109678:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c010967b:	72 99                	jb     c0109616 <monitor_init+0xa5>
+        mtp->cv[i].count=0;
+        sem_init(&(mtp->cv[i].sem),0);
+        mtp->cv[i].owner=mtp;
+    }
+}
+c010967d:	90                   	nop
+c010967e:	c9                   	leave  
+c010967f:	c3                   	ret    
+
+c0109680 <cond_signal>:
+
+// Unlock one of threads waiting on the condition variable. 
+void 
+cond_signal (condvar_t *cvp) {
+c0109680:	55                   	push   %ebp
+c0109681:	89 e5                	mov    %esp,%ebp
+c0109683:	83 ec 18             	sub    $0x18,%esp
+   //LAB7 EXERCISE1: 2013011371
+   cprintf("cond_signal begin: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);  
+c0109686:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109689:	8b 40 10             	mov    0x10(%eax),%eax
+c010968c:	8b 50 18             	mov    0x18(%eax),%edx
+c010968f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109692:	8b 40 0c             	mov    0xc(%eax),%eax
+c0109695:	52                   	push   %edx
+c0109696:	50                   	push   %eax
+c0109697:	ff 75 08             	pushl  0x8(%ebp)
+c010969a:	68 28 ef 10 c0       	push   $0xc010ef28
+c010969f:	e8 ea 6b ff ff       	call   c010028e <cprintf>
+c01096a4:	83 c4 10             	add    $0x10,%esp
+   *             wait(mt.next);
+   *             mt.next_count--;
+   *          }
+   *       }
+   */
+   monitor_t *mnt = cvp->owner;
+c01096a7:	8b 45 08             	mov    0x8(%ebp),%eax
+c01096aa:	8b 40 10             	mov    0x10(%eax),%eax
+c01096ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
+   if (cvp->count > 0){
+c01096b0:	8b 45 08             	mov    0x8(%ebp),%eax
+c01096b3:	8b 40 0c             	mov    0xc(%eax),%eax
+c01096b6:	85 c0                	test   %eax,%eax
+c01096b8:	7e 3f                	jle    c01096f9 <cond_signal+0x79>
+	   mnt->next_count++;
+c01096ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01096bd:	8b 40 18             	mov    0x18(%eax),%eax
+c01096c0:	8d 50 01             	lea    0x1(%eax),%edx
+c01096c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01096c6:	89 50 18             	mov    %edx,0x18(%eax)
+	   up(&(cvp->sem));
+c01096c9:	8b 45 08             	mov    0x8(%ebp),%eax
+c01096cc:	83 ec 0c             	sub    $0xc,%esp
+c01096cf:	50                   	push   %eax
+c01096d0:	e8 00 fe ff ff       	call   c01094d5 <up>
+c01096d5:	83 c4 10             	add    $0x10,%esp
+	   down(&(mnt->next));
+c01096d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01096db:	83 c0 0c             	add    $0xc,%eax
+c01096de:	83 ec 0c             	sub    $0xc,%esp
+c01096e1:	50                   	push   %eax
+c01096e2:	e8 0a fe ff ff       	call   c01094f1 <down>
+c01096e7:	83 c4 10             	add    $0x10,%esp
+	   mnt->next_count--;
+c01096ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01096ed:	8b 40 18             	mov    0x18(%eax),%eax
+c01096f0:	8d 50 ff             	lea    -0x1(%eax),%edx
+c01096f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01096f6:	89 50 18             	mov    %edx,0x18(%eax)
+   }
+   cprintf("cond_signal end: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
+c01096f9:	8b 45 08             	mov    0x8(%ebp),%eax
+c01096fc:	8b 40 10             	mov    0x10(%eax),%eax
+c01096ff:	8b 50 18             	mov    0x18(%eax),%edx
+c0109702:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109705:	8b 40 0c             	mov    0xc(%eax),%eax
+c0109708:	52                   	push   %edx
+c0109709:	50                   	push   %eax
+c010970a:	ff 75 08             	pushl  0x8(%ebp)
+c010970d:	68 70 ef 10 c0       	push   $0xc010ef70
+c0109712:	e8 77 6b ff ff       	call   c010028e <cprintf>
+c0109717:	83 c4 10             	add    $0x10,%esp
+}
+c010971a:	90                   	nop
+c010971b:	c9                   	leave  
+c010971c:	c3                   	ret    
+
+c010971d <cond_wait>:
+
+// Suspend calling thread on a condition variable waiting for condition Atomically unlocks 
+// mutex and suspends calling thread on conditional variable after waking up locks mutex. Notice: mp is mutex semaphore for monitor's procedures
+void
+cond_wait (condvar_t *cvp) {
+c010971d:	55                   	push   %ebp
+c010971e:	89 e5                	mov    %esp,%ebp
+c0109720:	83 ec 18             	sub    $0x18,%esp
+    //LAB7 EXERCISE1: 2013011371
+    cprintf("cond_wait begin:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
+c0109723:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109726:	8b 40 10             	mov    0x10(%eax),%eax
+c0109729:	8b 50 18             	mov    0x18(%eax),%edx
+c010972c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010972f:	8b 40 0c             	mov    0xc(%eax),%eax
+c0109732:	52                   	push   %edx
+c0109733:	50                   	push   %eax
+c0109734:	ff 75 08             	pushl  0x8(%ebp)
+c0109737:	68 b4 ef 10 c0       	push   $0xc010efb4
+c010973c:	e8 4d 6b ff ff       	call   c010028e <cprintf>
+c0109741:	83 c4 10             	add    $0x10,%esp
+    *         else
+    *            signal(mt.mutex);
+    *         wait(cv.sem);
+    *         cv.count --;
+    */
+    monitor_t *mnt = cvp->owner;
+c0109744:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109747:	8b 40 10             	mov    0x10(%eax),%eax
+c010974a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cvp->count++;
+c010974d:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109750:	8b 40 0c             	mov    0xc(%eax),%eax
+c0109753:	8d 50 01             	lea    0x1(%eax),%edx
+c0109756:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109759:	89 50 0c             	mov    %edx,0xc(%eax)
+    if (mnt->next_count > 0){
+c010975c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010975f:	8b 40 18             	mov    0x18(%eax),%eax
+c0109762:	85 c0                	test   %eax,%eax
+c0109764:	7e 14                	jle    c010977a <cond_wait+0x5d>
+    	up(&(mnt->next));
+c0109766:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109769:	83 c0 0c             	add    $0xc,%eax
+c010976c:	83 ec 0c             	sub    $0xc,%esp
+c010976f:	50                   	push   %eax
+c0109770:	e8 60 fd ff ff       	call   c01094d5 <up>
+c0109775:	83 c4 10             	add    $0x10,%esp
+c0109778:	eb 0f                	jmp    c0109789 <cond_wait+0x6c>
+    }else{
+    	up(&(mnt->mutex));
+c010977a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010977d:	83 ec 0c             	sub    $0xc,%esp
+c0109780:	50                   	push   %eax
+c0109781:	e8 4f fd ff ff       	call   c01094d5 <up>
+c0109786:	83 c4 10             	add    $0x10,%esp
+    }
+    down(&(cvp->sem));
+c0109789:	8b 45 08             	mov    0x8(%ebp),%eax
+c010978c:	83 ec 0c             	sub    $0xc,%esp
+c010978f:	50                   	push   %eax
+c0109790:	e8 5c fd ff ff       	call   c01094f1 <down>
+c0109795:	83 c4 10             	add    $0x10,%esp
+    cvp->count--;
+c0109798:	8b 45 08             	mov    0x8(%ebp),%eax
+c010979b:	8b 40 0c             	mov    0xc(%eax),%eax
+c010979e:	8d 50 ff             	lea    -0x1(%eax),%edx
+c01097a1:	8b 45 08             	mov    0x8(%ebp),%eax
+c01097a4:	89 50 0c             	mov    %edx,0xc(%eax)
+    cprintf("cond_wait end:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
+c01097a7:	8b 45 08             	mov    0x8(%ebp),%eax
+c01097aa:	8b 40 10             	mov    0x10(%eax),%eax
+c01097ad:	8b 50 18             	mov    0x18(%eax),%edx
+c01097b0:	8b 45 08             	mov    0x8(%ebp),%eax
+c01097b3:	8b 40 0c             	mov    0xc(%eax),%eax
+c01097b6:	52                   	push   %edx
+c01097b7:	50                   	push   %eax
+c01097b8:	ff 75 08             	pushl  0x8(%ebp)
+c01097bb:	68 f8 ef 10 c0       	push   $0xc010eff8
+c01097c0:	e8 c9 6a ff ff       	call   c010028e <cprintf>
+c01097c5:	83 c4 10             	add    $0x10,%esp
+}
+c01097c8:	90                   	nop
+c01097c9:	c9                   	leave  
+c01097ca:	c3                   	ret    
+
+c01097cb <page2ppn>:
+
+extern struct Page *pages;
+extern size_t npage;
+
+static inline ppn_t
+page2ppn(struct Page *page) {
+c01097cb:	55                   	push   %ebp
+c01097cc:	89 e5                	mov    %esp,%ebp
+    return page - pages;
+c01097ce:	8b 45 08             	mov    0x8(%ebp),%eax
+c01097d1:	8b 15 a4 53 1c c0    	mov    0xc01c53a4,%edx
+c01097d7:	29 d0                	sub    %edx,%eax
+c01097d9:	c1 f8 05             	sar    $0x5,%eax
+}
+c01097dc:	5d                   	pop    %ebp
+c01097dd:	c3                   	ret    
+
+c01097de <page2pa>:
+
+static inline uintptr_t
+page2pa(struct Page *page) {
+c01097de:	55                   	push   %ebp
+c01097df:	89 e5                	mov    %esp,%ebp
+    return page2ppn(page) << PGSHIFT;
+c01097e1:	ff 75 08             	pushl  0x8(%ebp)
+c01097e4:	e8 e2 ff ff ff       	call   c01097cb <page2ppn>
+c01097e9:	83 c4 04             	add    $0x4,%esp
+c01097ec:	c1 e0 0c             	shl    $0xc,%eax
+}
+c01097ef:	c9                   	leave  
+c01097f0:	c3                   	ret    
+
+c01097f1 <page2kva>:
+    }
+    return &pages[PPN(pa)];
+}
+
+static inline void *
+page2kva(struct Page *page) {
+c01097f1:	55                   	push   %ebp
+c01097f2:	89 e5                	mov    %esp,%ebp
+c01097f4:	83 ec 18             	sub    $0x18,%esp
+    return KADDR(page2pa(page));
+c01097f7:	ff 75 08             	pushl  0x8(%ebp)
+c01097fa:	e8 df ff ff ff       	call   c01097de <page2pa>
+c01097ff:	83 c4 04             	add    $0x4,%esp
+c0109802:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0109805:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109808:	c1 e8 0c             	shr    $0xc,%eax
+c010980b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010980e:	a1 60 32 1c c0       	mov    0xc01c3260,%eax
+c0109813:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c0109816:	72 14                	jb     c010982c <page2kva+0x3b>
+c0109818:	ff 75 f4             	pushl  -0xc(%ebp)
+c010981b:	68 3c f0 10 c0       	push   $0xc010f03c
+c0109820:	6a 65                	push   $0x65
+c0109822:	68 5f f0 10 c0       	push   $0xc010f05f
+c0109827:	e8 c8 6b ff ff       	call   c01003f4 <__panic>
+c010982c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010982f:	2d 00 00 00 40       	sub    $0x40000000,%eax
+}
+c0109834:	c9                   	leave  
+c0109835:	c3                   	ret    
+
+c0109836 <swapfs_init>:
+#include <ide.h>
+#include <pmm.h>
+#include <assert.h>
+
+void
+swapfs_init(void) {
+c0109836:	55                   	push   %ebp
+c0109837:	89 e5                	mov    %esp,%ebp
+c0109839:	83 ec 08             	sub    $0x8,%esp
+    static_assert((PGSIZE % SECTSIZE) == 0);
+    if (!ide_device_valid(SWAP_DEV_NO)) {
+c010983c:	83 ec 0c             	sub    $0xc,%esp
+c010983f:	6a 01                	push   $0x1
+c0109841:	e8 68 79 ff ff       	call   c01011ae <ide_device_valid>
+c0109846:	83 c4 10             	add    $0x10,%esp
+c0109849:	85 c0                	test   %eax,%eax
+c010984b:	75 14                	jne    c0109861 <swapfs_init+0x2b>
+        panic("swap fs isn't available.\n");
+c010984d:	83 ec 04             	sub    $0x4,%esp
+c0109850:	68 6d f0 10 c0       	push   $0xc010f06d
+c0109855:	6a 0d                	push   $0xd
+c0109857:	68 87 f0 10 c0       	push   $0xc010f087
+c010985c:	e8 93 6b ff ff       	call   c01003f4 <__panic>
+    }
+    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
+c0109861:	83 ec 0c             	sub    $0xc,%esp
+c0109864:	6a 01                	push   $0x1
+c0109866:	e8 83 79 ff ff       	call   c01011ee <ide_device_size>
+c010986b:	83 c4 10             	add    $0x10,%esp
+c010986e:	c1 e8 03             	shr    $0x3,%eax
+c0109871:	a3 5c 54 1c c0       	mov    %eax,0xc01c545c
+}
+c0109876:	90                   	nop
+c0109877:	c9                   	leave  
+c0109878:	c3                   	ret    
+
+c0109879 <swapfs_read>:
+
+int
+swapfs_read(swap_entry_t entry, struct Page *page) {
+c0109879:	55                   	push   %ebp
+c010987a:	89 e5                	mov    %esp,%ebp
+c010987c:	83 ec 18             	sub    $0x18,%esp
+    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
+c010987f:	83 ec 0c             	sub    $0xc,%esp
+c0109882:	ff 75 0c             	pushl  0xc(%ebp)
+c0109885:	e8 67 ff ff ff       	call   c01097f1 <page2kva>
+c010988a:	83 c4 10             	add    $0x10,%esp
+c010988d:	89 c2                	mov    %eax,%edx
+c010988f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109892:	c1 e8 08             	shr    $0x8,%eax
+c0109895:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0109898:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010989c:	74 0a                	je     c01098a8 <swapfs_read+0x2f>
+c010989e:	a1 5c 54 1c c0       	mov    0xc01c545c,%eax
+c01098a3:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+c01098a6:	72 14                	jb     c01098bc <swapfs_read+0x43>
+c01098a8:	ff 75 08             	pushl  0x8(%ebp)
+c01098ab:	68 98 f0 10 c0       	push   $0xc010f098
+c01098b0:	6a 14                	push   $0x14
+c01098b2:	68 87 f0 10 c0       	push   $0xc010f087
+c01098b7:	e8 38 6b ff ff       	call   c01003f4 <__panic>
+c01098bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c01098bf:	c1 e0 03             	shl    $0x3,%eax
+c01098c2:	6a 08                	push   $0x8
+c01098c4:	52                   	push   %edx
+c01098c5:	50                   	push   %eax
+c01098c6:	6a 01                	push   $0x1
+c01098c8:	e8 61 79 ff ff       	call   c010122e <ide_read_secs>
+c01098cd:	83 c4 10             	add    $0x10,%esp
+}
+c01098d0:	c9                   	leave  
+c01098d1:	c3                   	ret    
+
+c01098d2 <swapfs_write>:
+
+int
+swapfs_write(swap_entry_t entry, struct Page *page) {
+c01098d2:	55                   	push   %ebp
+c01098d3:	89 e5                	mov    %esp,%ebp
+c01098d5:	83 ec 18             	sub    $0x18,%esp
+    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
+c01098d8:	83 ec 0c             	sub    $0xc,%esp
+c01098db:	ff 75 0c             	pushl  0xc(%ebp)
+c01098de:	e8 0e ff ff ff       	call   c01097f1 <page2kva>
+c01098e3:	83 c4 10             	add    $0x10,%esp
+c01098e6:	89 c2                	mov    %eax,%edx
+c01098e8:	8b 45 08             	mov    0x8(%ebp),%eax
+c01098eb:	c1 e8 08             	shr    $0x8,%eax
+c01098ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c01098f1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c01098f5:	74 0a                	je     c0109901 <swapfs_write+0x2f>
+c01098f7:	a1 5c 54 1c c0       	mov    0xc01c545c,%eax
+c01098fc:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+c01098ff:	72 14                	jb     c0109915 <swapfs_write+0x43>
+c0109901:	ff 75 08             	pushl  0x8(%ebp)
+c0109904:	68 98 f0 10 c0       	push   $0xc010f098
+c0109909:	6a 19                	push   $0x19
+c010990b:	68 87 f0 10 c0       	push   $0xc010f087
+c0109910:	e8 df 6a ff ff       	call   c01003f4 <__panic>
+c0109915:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109918:	c1 e0 03             	shl    $0x3,%eax
+c010991b:	6a 08                	push   $0x8
+c010991d:	52                   	push   %edx
+c010991e:	50                   	push   %eax
+c010991f:	6a 01                	push   $0x1
+c0109921:	e8 32 7b ff ff       	call   c0101458 <ide_write_secs>
+c0109926:	83 c4 10             	add    $0x10,%esp
+}
+c0109929:	c9                   	leave  
+c010992a:	c3                   	ret    
+
+c010992b <kernel_thread_entry>:
+.text
+.globl kernel_thread_entry
+kernel_thread_entry:        # void kernel_thread(void)
+
+    pushl %edx              # push arg
+c010992b:	52                   	push   %edx
+    call *%ebx              # call fn
+c010992c:	ff d3                	call   *%ebx
+
+    pushl %eax              # save the return value of fn(arg)
+c010992e:	50                   	push   %eax
+    call do_exit            # call do_exit to terminate current thread
+c010992f:	e8 db 0c 00 00       	call   c010a60f <do_exit>
+
+c0109934 <switch_to>:
+.text
+.globl switch_to
+switch_to:                      # switch_to(from, to)
+
+    # save from's registers
+    movl 4(%esp), %eax          # eax points to from
+c0109934:	8b 44 24 04          	mov    0x4(%esp),%eax
+    popl 0(%eax)                # save eip !popl
+c0109938:	8f 00                	popl   (%eax)
+    movl %esp, 4(%eax)
+c010993a:	89 60 04             	mov    %esp,0x4(%eax)
+    movl %ebx, 8(%eax)
+c010993d:	89 58 08             	mov    %ebx,0x8(%eax)
+    movl %ecx, 12(%eax)
+c0109940:	89 48 0c             	mov    %ecx,0xc(%eax)
+    movl %edx, 16(%eax)
+c0109943:	89 50 10             	mov    %edx,0x10(%eax)
+    movl %esi, 20(%eax)
+c0109946:	89 70 14             	mov    %esi,0x14(%eax)
+    movl %edi, 24(%eax)
+c0109949:	89 78 18             	mov    %edi,0x18(%eax)
+    movl %ebp, 28(%eax)
+c010994c:	89 68 1c             	mov    %ebp,0x1c(%eax)
+
+    # restore to's registers
+    movl 4(%esp), %eax          # not 8(%esp): popped return address already
+c010994f:	8b 44 24 04          	mov    0x4(%esp),%eax
+                                # eax now points to to
+    movl 28(%eax), %ebp
+c0109953:	8b 68 1c             	mov    0x1c(%eax),%ebp
+    movl 24(%eax), %edi
+c0109956:	8b 78 18             	mov    0x18(%eax),%edi
+    movl 20(%eax), %esi
+c0109959:	8b 70 14             	mov    0x14(%eax),%esi
+    movl 16(%eax), %edx
+c010995c:	8b 50 10             	mov    0x10(%eax),%edx
+    movl 12(%eax), %ecx
+c010995f:	8b 48 0c             	mov    0xc(%eax),%ecx
+    movl 8(%eax), %ebx
+c0109962:	8b 58 08             	mov    0x8(%eax),%ebx
+    movl 4(%eax), %esp
+c0109965:	8b 60 04             	mov    0x4(%eax),%esp
+
+    pushl 0(%eax)               # push eip
+c0109968:	ff 30                	pushl  (%eax)
+
+    ret
+c010996a:	c3                   	ret    
+
+c010996b <timer_init>:
+#define le2timer(le, member)            \
+to_struct((le), timer_t, member)
+
+// init a timer
+static inline timer_t *
+timer_init(timer_t *timer, struct proc_struct *proc, int expires) {
+c010996b:	55                   	push   %ebp
+c010996c:	89 e5                	mov    %esp,%ebp
+c010996e:	83 ec 10             	sub    $0x10,%esp
+    timer->expires = expires;
+c0109971:	8b 55 10             	mov    0x10(%ebp),%edx
+c0109974:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109977:	89 10                	mov    %edx,(%eax)
+    timer->proc = proc;
+c0109979:	8b 45 08             	mov    0x8(%ebp),%eax
+c010997c:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010997f:	89 50 04             	mov    %edx,0x4(%eax)
+    list_init(&(timer->timer_link));
+c0109982:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109985:	83 c0 08             	add    $0x8,%eax
+c0109988:	89 45 fc             	mov    %eax,-0x4(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c010998b:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010998e:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c0109991:	89 50 04             	mov    %edx,0x4(%eax)
+c0109994:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0109997:	8b 50 04             	mov    0x4(%eax),%edx
+c010999a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010999d:	89 10                	mov    %edx,(%eax)
+    return timer;
+c010999f:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+c01099a2:	c9                   	leave  
+c01099a3:	c3                   	ret    
+
+c01099a4 <__intr_save>:
+#include <assert.h>
+#include <atomic.h>
+#include <sched.h>
+
+static inline bool
+__intr_save(void) {
+c01099a4:	55                   	push   %ebp
+c01099a5:	89 e5                	mov    %esp,%ebp
+c01099a7:	83 ec 18             	sub    $0x18,%esp
+}
+
+static inline uint32_t
+read_eflags(void) {
+    uint32_t eflags;
+    asm volatile ("pushfl; popl %0" : "=r" (eflags));
+c01099aa:	9c                   	pushf  
+c01099ab:	58                   	pop    %eax
+c01099ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return eflags;
+c01099af:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    if (read_eflags() & FL_IF) {
+c01099b2:	25 00 02 00 00       	and    $0x200,%eax
+c01099b7:	85 c0                	test   %eax,%eax
+c01099b9:	74 0c                	je     c01099c7 <__intr_save+0x23>
+        intr_disable();
+c01099bb:	e8 d1 87 ff ff       	call   c0102191 <intr_disable>
+        return 1;
+c01099c0:	b8 01 00 00 00       	mov    $0x1,%eax
+c01099c5:	eb 05                	jmp    c01099cc <__intr_save+0x28>
+    }
+    return 0;
+c01099c7:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c01099cc:	c9                   	leave  
+c01099cd:	c3                   	ret    
+
+c01099ce <__intr_restore>:
+
+static inline void
+__intr_restore(bool flag) {
+c01099ce:	55                   	push   %ebp
+c01099cf:	89 e5                	mov    %esp,%ebp
+c01099d1:	83 ec 08             	sub    $0x8,%esp
+    if (flag) {
+c01099d4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c01099d8:	74 05                	je     c01099df <__intr_restore+0x11>
+        intr_enable();
+c01099da:	e8 ab 87 ff ff       	call   c010218a <intr_enable>
+    }
+}
+c01099df:	90                   	nop
+c01099e0:	c9                   	leave  
+c01099e1:	c3                   	ret    
+
+c01099e2 <page2ppn>:
+
+extern struct Page *pages;
+extern size_t npage;
+
+static inline ppn_t
+page2ppn(struct Page *page) {
+c01099e2:	55                   	push   %ebp
+c01099e3:	89 e5                	mov    %esp,%ebp
+    return page - pages;
+c01099e5:	8b 45 08             	mov    0x8(%ebp),%eax
+c01099e8:	8b 15 a4 53 1c c0    	mov    0xc01c53a4,%edx
+c01099ee:	29 d0                	sub    %edx,%eax
+c01099f0:	c1 f8 05             	sar    $0x5,%eax
+}
+c01099f3:	5d                   	pop    %ebp
+c01099f4:	c3                   	ret    
+
+c01099f5 <page2pa>:
+
+static inline uintptr_t
+page2pa(struct Page *page) {
+c01099f5:	55                   	push   %ebp
+c01099f6:	89 e5                	mov    %esp,%ebp
+    return page2ppn(page) << PGSHIFT;
+c01099f8:	ff 75 08             	pushl  0x8(%ebp)
+c01099fb:	e8 e2 ff ff ff       	call   c01099e2 <page2ppn>
+c0109a00:	83 c4 04             	add    $0x4,%esp
+c0109a03:	c1 e0 0c             	shl    $0xc,%eax
+}
+c0109a06:	c9                   	leave  
+c0109a07:	c3                   	ret    
+
+c0109a08 <pa2page>:
+
+static inline struct Page *
+pa2page(uintptr_t pa) {
+c0109a08:	55                   	push   %ebp
+c0109a09:	89 e5                	mov    %esp,%ebp
+c0109a0b:	83 ec 08             	sub    $0x8,%esp
+    if (PPN(pa) >= npage) {
+c0109a0e:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109a11:	c1 e8 0c             	shr    $0xc,%eax
+c0109a14:	89 c2                	mov    %eax,%edx
+c0109a16:	a1 60 32 1c c0       	mov    0xc01c3260,%eax
+c0109a1b:	39 c2                	cmp    %eax,%edx
+c0109a1d:	72 14                	jb     c0109a33 <pa2page+0x2b>
+        panic("pa2page called with invalid pa");
+c0109a1f:	83 ec 04             	sub    $0x4,%esp
+c0109a22:	68 b8 f0 10 c0       	push   $0xc010f0b8
+c0109a27:	6a 5e                	push   $0x5e
+c0109a29:	68 d7 f0 10 c0       	push   $0xc010f0d7
+c0109a2e:	e8 c1 69 ff ff       	call   c01003f4 <__panic>
+    }
+    return &pages[PPN(pa)];
+c0109a33:	a1 a4 53 1c c0       	mov    0xc01c53a4,%eax
+c0109a38:	8b 55 08             	mov    0x8(%ebp),%edx
+c0109a3b:	c1 ea 0c             	shr    $0xc,%edx
+c0109a3e:	c1 e2 05             	shl    $0x5,%edx
+c0109a41:	01 d0                	add    %edx,%eax
+}
+c0109a43:	c9                   	leave  
+c0109a44:	c3                   	ret    
+
+c0109a45 <page2kva>:
+
+static inline void *
+page2kva(struct Page *page) {
+c0109a45:	55                   	push   %ebp
+c0109a46:	89 e5                	mov    %esp,%ebp
+c0109a48:	83 ec 18             	sub    $0x18,%esp
+    return KADDR(page2pa(page));
+c0109a4b:	ff 75 08             	pushl  0x8(%ebp)
+c0109a4e:	e8 a2 ff ff ff       	call   c01099f5 <page2pa>
+c0109a53:	83 c4 04             	add    $0x4,%esp
+c0109a56:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0109a59:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109a5c:	c1 e8 0c             	shr    $0xc,%eax
+c0109a5f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0109a62:	a1 60 32 1c c0       	mov    0xc01c3260,%eax
+c0109a67:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c0109a6a:	72 14                	jb     c0109a80 <page2kva+0x3b>
+c0109a6c:	ff 75 f4             	pushl  -0xc(%ebp)
+c0109a6f:	68 e8 f0 10 c0       	push   $0xc010f0e8
+c0109a74:	6a 65                	push   $0x65
+c0109a76:	68 d7 f0 10 c0       	push   $0xc010f0d7
+c0109a7b:	e8 74 69 ff ff       	call   c01003f4 <__panic>
+c0109a80:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109a83:	2d 00 00 00 40       	sub    $0x40000000,%eax
+}
+c0109a88:	c9                   	leave  
+c0109a89:	c3                   	ret    
+
+c0109a8a <kva2page>:
+
+static inline struct Page *
+kva2page(void *kva) {
+c0109a8a:	55                   	push   %ebp
+c0109a8b:	89 e5                	mov    %esp,%ebp
+c0109a8d:	83 ec 18             	sub    $0x18,%esp
+    return pa2page(PADDR(kva));
+c0109a90:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109a93:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0109a96:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
+c0109a9d:	77 14                	ja     c0109ab3 <kva2page+0x29>
+c0109a9f:	ff 75 f4             	pushl  -0xc(%ebp)
+c0109aa2:	68 0c f1 10 c0       	push   $0xc010f10c
+c0109aa7:	6a 6a                	push   $0x6a
+c0109aa9:	68 d7 f0 10 c0       	push   $0xc010f0d7
+c0109aae:	e8 41 69 ff ff       	call   c01003f4 <__panic>
+c0109ab3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109ab6:	05 00 00 00 40       	add    $0x40000000,%eax
+c0109abb:	83 ec 0c             	sub    $0xc,%esp
+c0109abe:	50                   	push   %eax
+c0109abf:	e8 44 ff ff ff       	call   c0109a08 <pa2page>
+c0109ac4:	83 c4 10             	add    $0x10,%esp
+}
+c0109ac7:	c9                   	leave  
+c0109ac8:	c3                   	ret    
+
+c0109ac9 <mm_count_inc>:
+
+static inline int
+mm_count_inc(struct mm_struct *mm) {
+c0109ac9:	55                   	push   %ebp
+c0109aca:	89 e5                	mov    %esp,%ebp
+    mm->mm_count += 1;
+c0109acc:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109acf:	8b 40 18             	mov    0x18(%eax),%eax
+c0109ad2:	8d 50 01             	lea    0x1(%eax),%edx
+c0109ad5:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109ad8:	89 50 18             	mov    %edx,0x18(%eax)
+    return mm->mm_count;
+c0109adb:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109ade:	8b 40 18             	mov    0x18(%eax),%eax
+}
+c0109ae1:	5d                   	pop    %ebp
+c0109ae2:	c3                   	ret    
+
+c0109ae3 <mm_count_dec>:
+
+static inline int
+mm_count_dec(struct mm_struct *mm) {
+c0109ae3:	55                   	push   %ebp
+c0109ae4:	89 e5                	mov    %esp,%ebp
+    mm->mm_count -= 1;
+c0109ae6:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109ae9:	8b 40 18             	mov    0x18(%eax),%eax
+c0109aec:	8d 50 ff             	lea    -0x1(%eax),%edx
+c0109aef:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109af2:	89 50 18             	mov    %edx,0x18(%eax)
+    return mm->mm_count;
+c0109af5:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109af8:	8b 40 18             	mov    0x18(%eax),%eax
+}
+c0109afb:	5d                   	pop    %ebp
+c0109afc:	c3                   	ret    
+
+c0109afd <lock_mm>:
+
+static inline void
+lock_mm(struct mm_struct *mm) {
+c0109afd:	55                   	push   %ebp
+c0109afe:	89 e5                	mov    %esp,%ebp
+c0109b00:	83 ec 08             	sub    $0x8,%esp
+    if (mm != NULL) {
+c0109b03:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0109b07:	74 29                	je     c0109b32 <lock_mm+0x35>
+        down(&(mm->mm_sem));
+c0109b09:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109b0c:	83 c0 1c             	add    $0x1c,%eax
+c0109b0f:	83 ec 0c             	sub    $0xc,%esp
+c0109b12:	50                   	push   %eax
+c0109b13:	e8 d9 f9 ff ff       	call   c01094f1 <down>
+c0109b18:	83 c4 10             	add    $0x10,%esp
+        if (current != NULL) {
+c0109b1b:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c0109b20:	85 c0                	test   %eax,%eax
+c0109b22:	74 0e                	je     c0109b32 <lock_mm+0x35>
+            mm->locked_by = current->pid;
+c0109b24:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c0109b29:	8b 50 04             	mov    0x4(%eax),%edx
+c0109b2c:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109b2f:	89 50 28             	mov    %edx,0x28(%eax)
+        }
+    }
+}
+c0109b32:	90                   	nop
+c0109b33:	c9                   	leave  
+c0109b34:	c3                   	ret    
+
+c0109b35 <unlock_mm>:
+
+static inline void
+unlock_mm(struct mm_struct *mm) {
+c0109b35:	55                   	push   %ebp
+c0109b36:	89 e5                	mov    %esp,%ebp
+c0109b38:	83 ec 08             	sub    $0x8,%esp
+    if (mm != NULL) {
+c0109b3b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c0109b3f:	74 1c                	je     c0109b5d <unlock_mm+0x28>
+        up(&(mm->mm_sem));
+c0109b41:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109b44:	83 c0 1c             	add    $0x1c,%eax
+c0109b47:	83 ec 0c             	sub    $0xc,%esp
+c0109b4a:	50                   	push   %eax
+c0109b4b:	e8 85 f9 ff ff       	call   c01094d5 <up>
+c0109b50:	83 c4 10             	add    $0x10,%esp
+        mm->locked_by = 0;
+c0109b53:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109b56:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
+    }
+}
+c0109b5d:	90                   	nop
+c0109b5e:	c9                   	leave  
+c0109b5f:	c3                   	ret    
+
+c0109b60 <alloc_proc>:
+void forkrets(struct trapframe *tf);
+void switch_to(struct context *from, struct context *to);
+
+// alloc_proc - alloc a proc_struct and init all fields of proc_struct
+static struct proc_struct *
+alloc_proc(void) {
+c0109b60:	55                   	push   %ebp
+c0109b61:	89 e5                	mov    %esp,%ebp
+c0109b63:	83 ec 38             	sub    $0x38,%esp
+	struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
+c0109b66:	83 ec 0c             	sub    $0xc,%esp
+c0109b69:	68 c4 00 00 00       	push   $0xc4
+c0109b6e:	e8 ea d0 ff ff       	call   c0106c5d <kmalloc>
+c0109b73:	83 c4 10             	add    $0x10,%esp
+c0109b76:	89 45 f4             	mov    %eax,-0xc(%ebp)
+	if (proc != NULL) {
+c0109b79:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c0109b7d:	0f 84 88 01 00 00    	je     c0109d0b <alloc_proc+0x1ab>
+		 *     int time_slice;                             // time slice for occupying the CPU
+		 *     skew_heap_entry_t lab6_run_pool;            // FOR LAB6 ONLY: the entry in the run pool
+		 *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process
+		 *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)
+		 */
+		proc->state = PROC_UNINIT;
+c0109b83:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109b86:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+		proc->pid = -1;
+c0109b8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109b8f:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
+		proc->runs = 0;
+c0109b96:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109b99:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+		proc->kstack = 0;
+c0109ba0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109ba3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
+		proc->need_resched = 0;
+c0109baa:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109bad:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
+		proc->parent = NULL;
+c0109bb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109bb7:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
+		proc->mm = NULL;
+c0109bbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109bc1:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
+		struct context nullContext;
+		memset(&nullContext, 0, sizeof(struct context));
+c0109bc8:	83 ec 04             	sub    $0x4,%esp
+c0109bcb:	6a 20                	push   $0x20
+c0109bcd:	6a 00                	push   $0x0
+c0109bcf:	8d 45 d0             	lea    -0x30(%ebp),%eax
+c0109bd2:	50                   	push   %eax
+c0109bd3:	e8 10 28 00 00       	call   c010c3e8 <memset>
+c0109bd8:	83 c4 10             	add    $0x10,%esp
+		proc->context = nullContext;
+c0109bdb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109bde:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c0109be1:	89 50 1c             	mov    %edx,0x1c(%eax)
+c0109be4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c0109be7:	89 50 20             	mov    %edx,0x20(%eax)
+c0109bea:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c0109bed:	89 50 24             	mov    %edx,0x24(%eax)
+c0109bf0:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c0109bf3:	89 50 28             	mov    %edx,0x28(%eax)
+c0109bf6:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c0109bf9:	89 50 2c             	mov    %edx,0x2c(%eax)
+c0109bfc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0109bff:	89 50 30             	mov    %edx,0x30(%eax)
+c0109c02:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c0109c05:	89 50 34             	mov    %edx,0x34(%eax)
+c0109c08:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0109c0b:	89 50 38             	mov    %edx,0x38(%eax)
+		proc->tf = NULL;
+c0109c0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109c11:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
+		proc->cr3 = boot_cr3;
+c0109c18:	8b 15 a0 53 1c c0    	mov    0xc01c53a0,%edx
+c0109c1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109c21:	89 50 40             	mov    %edx,0x40(%eax)
+		proc->flags = 0;
+c0109c24:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109c27:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
+		memset(proc->name, 0, sizeof(proc->name));
+c0109c2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109c31:	83 c0 48             	add    $0x48,%eax
+c0109c34:	83 ec 04             	sub    $0x4,%esp
+c0109c37:	6a 33                	push   $0x33
+c0109c39:	6a 00                	push   $0x0
+c0109c3b:	50                   	push   %eax
+c0109c3c:	e8 a7 27 00 00       	call   c010c3e8 <memset>
+c0109c41:	83 c4 10             	add    $0x10,%esp
+
+		proc->wait_state = 0;
+c0109c44:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109c47:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
+c0109c4e:	00 00 00 
+		proc->cptr = proc->optr = proc->yptr = NULL;
+c0109c51:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109c54:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
+c0109c5b:	00 00 00 
+c0109c5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109c61:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
+c0109c67:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109c6a:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
+c0109c70:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109c73:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
+c0109c79:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109c7c:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
+
+		proc->rq = NULL;
+c0109c82:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109c85:	c7 80 a0 00 00 00 00 	movl   $0x0,0xa0(%eax)
+c0109c8c:	00 00 00 
+		list_init(&(proc->run_link));
+c0109c8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109c92:	05 a4 00 00 00       	add    $0xa4,%eax
+c0109c97:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c0109c9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109c9d:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0109ca0:	89 50 04             	mov    %edx,0x4(%eax)
+c0109ca3:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109ca6:	8b 50 04             	mov    0x4(%eax),%edx
+c0109ca9:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109cac:	89 10                	mov    %edx,(%eax)
+		proc->time_slice = 0;
+c0109cae:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109cb1:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
+c0109cb8:	00 00 00 
+		proc->lab6_run_pool.left = proc->lab6_run_pool.right = proc->lab6_run_pool.parent = NULL;
+c0109cbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109cbe:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
+c0109cc5:	00 00 00 
+c0109cc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109ccb:	8b 90 b0 00 00 00    	mov    0xb0(%eax),%edx
+c0109cd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109cd4:	89 90 b8 00 00 00    	mov    %edx,0xb8(%eax)
+c0109cda:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109cdd:	8b 90 b8 00 00 00    	mov    0xb8(%eax),%edx
+c0109ce3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109ce6:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
+		proc->lab6_priority = proc->lab6_stride = 0;
+c0109cec:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109cef:	c7 80 bc 00 00 00 00 	movl   $0x0,0xbc(%eax)
+c0109cf6:	00 00 00 
+c0109cf9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109cfc:	8b 90 bc 00 00 00    	mov    0xbc(%eax),%edx
+c0109d02:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109d05:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)
+	}
+	return proc;
+c0109d0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c0109d0e:	c9                   	leave  
+c0109d0f:	c3                   	ret    
+
+c0109d10 <set_proc_name>:
+
+// set_proc_name - set the name of proc
+char *
+set_proc_name(struct proc_struct *proc, const char *name) {
+c0109d10:	55                   	push   %ebp
+c0109d11:	89 e5                	mov    %esp,%ebp
+c0109d13:	83 ec 08             	sub    $0x8,%esp
+    memset(proc->name, 0, sizeof(proc->name));
+c0109d16:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109d19:	83 c0 48             	add    $0x48,%eax
+c0109d1c:	83 ec 04             	sub    $0x4,%esp
+c0109d1f:	6a 33                	push   $0x33
+c0109d21:	6a 00                	push   $0x0
+c0109d23:	50                   	push   %eax
+c0109d24:	e8 bf 26 00 00       	call   c010c3e8 <memset>
+c0109d29:	83 c4 10             	add    $0x10,%esp
+    return memcpy(proc->name, name, PROC_NAME_LEN);
+c0109d2c:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109d2f:	83 c0 48             	add    $0x48,%eax
+c0109d32:	83 ec 04             	sub    $0x4,%esp
+c0109d35:	6a 32                	push   $0x32
+c0109d37:	ff 75 0c             	pushl  0xc(%ebp)
+c0109d3a:	50                   	push   %eax
+c0109d3b:	e8 8b 27 00 00       	call   c010c4cb <memcpy>
+c0109d40:	83 c4 10             	add    $0x10,%esp
+}
+c0109d43:	c9                   	leave  
+c0109d44:	c3                   	ret    
+
+c0109d45 <get_proc_name>:
+
+// get_proc_name - get the name of proc
+char *
+get_proc_name(struct proc_struct *proc) {
+c0109d45:	55                   	push   %ebp
+c0109d46:	89 e5                	mov    %esp,%ebp
+c0109d48:	83 ec 08             	sub    $0x8,%esp
+    static char name[PROC_NAME_LEN + 1];
+    memset(name, 0, sizeof(name));
+c0109d4b:	83 ec 04             	sub    $0x4,%esp
+c0109d4e:	6a 33                	push   $0x33
+c0109d50:	6a 00                	push   $0x0
+c0109d52:	68 40 53 1c c0       	push   $0xc01c5340
+c0109d57:	e8 8c 26 00 00       	call   c010c3e8 <memset>
+c0109d5c:	83 c4 10             	add    $0x10,%esp
+    return memcpy(name, proc->name, PROC_NAME_LEN);
+c0109d5f:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109d62:	83 c0 48             	add    $0x48,%eax
+c0109d65:	83 ec 04             	sub    $0x4,%esp
+c0109d68:	6a 32                	push   $0x32
+c0109d6a:	50                   	push   %eax
+c0109d6b:	68 40 53 1c c0       	push   $0xc01c5340
+c0109d70:	e8 56 27 00 00       	call   c010c4cb <memcpy>
+c0109d75:	83 c4 10             	add    $0x10,%esp
+}
+c0109d78:	c9                   	leave  
+c0109d79:	c3                   	ret    
+
+c0109d7a <set_links>:
+
+// set_links - set the relation links of process
+static void
+set_links(struct proc_struct *proc) {
+c0109d7a:	55                   	push   %ebp
+c0109d7b:	89 e5                	mov    %esp,%ebp
+c0109d7d:	83 ec 20             	sub    $0x20,%esp
+    list_add(&proc_list, &(proc->list_link));
+c0109d80:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109d83:	83 c0 7c             	add    $0x7c,%eax
+c0109d86:	c7 45 fc 7c 55 1c c0 	movl   $0xc01c557c,-0x4(%ebp)
+c0109d8d:	89 45 f8             	mov    %eax,-0x8(%ebp)
+c0109d90:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0109d93:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0109d96:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c0109d99:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ * Insert the new element @elm *after* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_after(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm, listelm->next);
+c0109d9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109d9f:	8b 40 04             	mov    0x4(%eax),%eax
+c0109da2:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c0109da5:	89 55 ec             	mov    %edx,-0x14(%ebp)
+c0109da8:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0109dab:	89 55 e8             	mov    %edx,-0x18(%ebp)
+c0109dae:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c0109db1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0109db4:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c0109db7:	89 10                	mov    %edx,(%eax)
+c0109db9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c0109dbc:	8b 10                	mov    (%eax),%edx
+c0109dbe:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c0109dc1:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c0109dc4:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109dc7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c0109dca:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c0109dcd:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c0109dd0:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c0109dd3:	89 10                	mov    %edx,(%eax)
+    proc->yptr = NULL;
+c0109dd5:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109dd8:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
+c0109ddf:	00 00 00 
+    if ((proc->optr = proc->parent->cptr) != NULL) {
+c0109de2:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109de5:	8b 40 14             	mov    0x14(%eax),%eax
+c0109de8:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
+c0109dee:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109df1:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
+c0109df7:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109dfa:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
+c0109e00:	85 c0                	test   %eax,%eax
+c0109e02:	74 12                	je     c0109e16 <set_links+0x9c>
+        proc->optr->yptr = proc;
+c0109e04:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109e07:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
+c0109e0d:	8b 55 08             	mov    0x8(%ebp),%edx
+c0109e10:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
+    }
+    proc->parent->cptr = proc;
+c0109e16:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109e19:	8b 40 14             	mov    0x14(%eax),%eax
+c0109e1c:	8b 55 08             	mov    0x8(%ebp),%edx
+c0109e1f:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
+    nr_process ++;
+c0109e25:	a1 20 53 1c c0       	mov    0xc01c5320,%eax
+c0109e2a:	83 c0 01             	add    $0x1,%eax
+c0109e2d:	a3 20 53 1c c0       	mov    %eax,0xc01c5320
+}
+c0109e32:	90                   	nop
+c0109e33:	c9                   	leave  
+c0109e34:	c3                   	ret    
+
+c0109e35 <remove_links>:
+
+// remove_links - clean the relation links of process
+static void
+remove_links(struct proc_struct *proc) {
+c0109e35:	55                   	push   %ebp
+c0109e36:	89 e5                	mov    %esp,%ebp
+c0109e38:	83 ec 10             	sub    $0x10,%esp
+    list_del(&(proc->list_link));
+c0109e3b:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109e3e:	83 c0 7c             	add    $0x7c,%eax
+c0109e41:	89 45 fc             	mov    %eax,-0x4(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c0109e44:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0109e47:	8b 40 04             	mov    0x4(%eax),%eax
+c0109e4a:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c0109e4d:	8b 12                	mov    (%edx),%edx
+c0109e4f:	89 55 f8             	mov    %edx,-0x8(%ebp)
+c0109e52:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c0109e55:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c0109e58:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c0109e5b:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c0109e5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109e61:	8b 55 f8             	mov    -0x8(%ebp),%edx
+c0109e64:	89 10                	mov    %edx,(%eax)
+    if (proc->optr != NULL) {
+c0109e66:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109e69:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
+c0109e6f:	85 c0                	test   %eax,%eax
+c0109e71:	74 18                	je     c0109e8b <remove_links+0x56>
+        proc->optr->yptr = proc->yptr;
+c0109e73:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109e76:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
+c0109e7c:	8b 55 08             	mov    0x8(%ebp),%edx
+c0109e7f:	8b 92 98 00 00 00    	mov    0x98(%edx),%edx
+c0109e85:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
+    }
+    if (proc->yptr != NULL) {
+c0109e8b:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109e8e:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
+c0109e94:	85 c0                	test   %eax,%eax
+c0109e96:	74 1a                	je     c0109eb2 <remove_links+0x7d>
+        proc->yptr->optr = proc->optr;
+c0109e98:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109e9b:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
+c0109ea1:	8b 55 08             	mov    0x8(%ebp),%edx
+c0109ea4:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
+c0109eaa:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
+c0109eb0:	eb 15                	jmp    c0109ec7 <remove_links+0x92>
+    }
+    else {
+       proc->parent->cptr = proc->optr;
+c0109eb2:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109eb5:	8b 40 14             	mov    0x14(%eax),%eax
+c0109eb8:	8b 55 08             	mov    0x8(%ebp),%edx
+c0109ebb:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
+c0109ec1:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
+    }
+    nr_process --;
+c0109ec7:	a1 20 53 1c c0       	mov    0xc01c5320,%eax
+c0109ecc:	83 e8 01             	sub    $0x1,%eax
+c0109ecf:	a3 20 53 1c c0       	mov    %eax,0xc01c5320
+}
+c0109ed4:	90                   	nop
+c0109ed5:	c9                   	leave  
+c0109ed6:	c3                   	ret    
+
+c0109ed7 <get_pid>:
+
+// get_pid - alloc a unique pid for process
+static int
+get_pid(void) {
+c0109ed7:	55                   	push   %ebp
+c0109ed8:	89 e5                	mov    %esp,%ebp
+c0109eda:	83 ec 10             	sub    $0x10,%esp
+    static_assert(MAX_PID > MAX_PROCESS);
+    struct proc_struct *proc;
+    list_entry_t *list = &proc_list, *le;
+c0109edd:	c7 45 f8 7c 55 1c c0 	movl   $0xc01c557c,-0x8(%ebp)
+    static int next_safe = MAX_PID, last_pid = MAX_PID;
+    if (++ last_pid >= MAX_PID) {
+c0109ee4:	a1 70 1a 13 c0       	mov    0xc0131a70,%eax
+c0109ee9:	83 c0 01             	add    $0x1,%eax
+c0109eec:	a3 70 1a 13 c0       	mov    %eax,0xc0131a70
+c0109ef1:	a1 70 1a 13 c0       	mov    0xc0131a70,%eax
+c0109ef6:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
+c0109efb:	7e 0c                	jle    c0109f09 <get_pid+0x32>
+        last_pid = 1;
+c0109efd:	c7 05 70 1a 13 c0 01 	movl   $0x1,0xc0131a70
+c0109f04:	00 00 00 
+        goto inside;
+c0109f07:	eb 13                	jmp    c0109f1c <get_pid+0x45>
+    }
+    if (last_pid >= next_safe) {
+c0109f09:	8b 15 70 1a 13 c0    	mov    0xc0131a70,%edx
+c0109f0f:	a1 74 1a 13 c0       	mov    0xc0131a74,%eax
+c0109f14:	39 c2                	cmp    %eax,%edx
+c0109f16:	0f 8c ac 00 00 00    	jl     c0109fc8 <get_pid+0xf1>
+    inside:
+        next_safe = MAX_PID;
+c0109f1c:	c7 05 74 1a 13 c0 00 	movl   $0x2000,0xc0131a74
+c0109f23:	20 00 00 
+    repeat:
+        le = list;
+c0109f26:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c0109f29:	89 45 fc             	mov    %eax,-0x4(%ebp)
+        while ((le = list_next(le)) != list) {
+c0109f2c:	eb 7f                	jmp    c0109fad <get_pid+0xd6>
+            proc = le2proc(le, list_link);
+c0109f2e:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0109f31:	83 e8 7c             	sub    $0x7c,%eax
+c0109f34:	89 45 f4             	mov    %eax,-0xc(%ebp)
+            if (proc->pid == last_pid) {
+c0109f37:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109f3a:	8b 50 04             	mov    0x4(%eax),%edx
+c0109f3d:	a1 70 1a 13 c0       	mov    0xc0131a70,%eax
+c0109f42:	39 c2                	cmp    %eax,%edx
+c0109f44:	75 3e                	jne    c0109f84 <get_pid+0xad>
+                if (++ last_pid >= next_safe) {
+c0109f46:	a1 70 1a 13 c0       	mov    0xc0131a70,%eax
+c0109f4b:	83 c0 01             	add    $0x1,%eax
+c0109f4e:	a3 70 1a 13 c0       	mov    %eax,0xc0131a70
+c0109f53:	8b 15 70 1a 13 c0    	mov    0xc0131a70,%edx
+c0109f59:	a1 74 1a 13 c0       	mov    0xc0131a74,%eax
+c0109f5e:	39 c2                	cmp    %eax,%edx
+c0109f60:	7c 4b                	jl     c0109fad <get_pid+0xd6>
+                    if (last_pid >= MAX_PID) {
+c0109f62:	a1 70 1a 13 c0       	mov    0xc0131a70,%eax
+c0109f67:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
+c0109f6c:	7e 0a                	jle    c0109f78 <get_pid+0xa1>
+                        last_pid = 1;
+c0109f6e:	c7 05 70 1a 13 c0 01 	movl   $0x1,0xc0131a70
+c0109f75:	00 00 00 
+                    }
+                    next_safe = MAX_PID;
+c0109f78:	c7 05 74 1a 13 c0 00 	movl   $0x2000,0xc0131a74
+c0109f7f:	20 00 00 
+                    goto repeat;
+c0109f82:	eb a2                	jmp    c0109f26 <get_pid+0x4f>
+                }
+            }
+            else if (proc->pid > last_pid && next_safe > proc->pid) {
+c0109f84:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109f87:	8b 50 04             	mov    0x4(%eax),%edx
+c0109f8a:	a1 70 1a 13 c0       	mov    0xc0131a70,%eax
+c0109f8f:	39 c2                	cmp    %eax,%edx
+c0109f91:	7e 1a                	jle    c0109fad <get_pid+0xd6>
+c0109f93:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109f96:	8b 50 04             	mov    0x4(%eax),%edx
+c0109f99:	a1 74 1a 13 c0       	mov    0xc0131a74,%eax
+c0109f9e:	39 c2                	cmp    %eax,%edx
+c0109fa0:	7d 0b                	jge    c0109fad <get_pid+0xd6>
+                next_safe = proc->pid;
+c0109fa2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c0109fa5:	8b 40 04             	mov    0x4(%eax),%eax
+c0109fa8:	a3 74 1a 13 c0       	mov    %eax,0xc0131a74
+c0109fad:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0109fb0:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c0109fb3:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c0109fb6:	8b 40 04             	mov    0x4(%eax),%eax
+    if (last_pid >= next_safe) {
+    inside:
+        next_safe = MAX_PID;
+    repeat:
+        le = list;
+        while ((le = list_next(le)) != list) {
+c0109fb9:	89 45 fc             	mov    %eax,-0x4(%ebp)
+c0109fbc:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c0109fbf:	3b 45 f8             	cmp    -0x8(%ebp),%eax
+c0109fc2:	0f 85 66 ff ff ff    	jne    c0109f2e <get_pid+0x57>
+            else if (proc->pid > last_pid && next_safe > proc->pid) {
+                next_safe = proc->pid;
+            }
+        }
+    }
+    return last_pid;
+c0109fc8:	a1 70 1a 13 c0       	mov    0xc0131a70,%eax
+}
+c0109fcd:	c9                   	leave  
+c0109fce:	c3                   	ret    
+
+c0109fcf <proc_run>:
+
+// proc_run - make process "proc" running on cpu
+// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
+void
+proc_run(struct proc_struct *proc) {
+c0109fcf:	55                   	push   %ebp
+c0109fd0:	89 e5                	mov    %esp,%ebp
+c0109fd2:	83 ec 18             	sub    $0x18,%esp
+    if (proc != current) {
+c0109fd5:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c0109fda:	39 45 08             	cmp    %eax,0x8(%ebp)
+c0109fdd:	74 6b                	je     c010a04a <proc_run+0x7b>
+        bool intr_flag;
+        struct proc_struct *prev = current, *next = proc;
+c0109fdf:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c0109fe4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c0109fe7:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109fea:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        local_intr_save(intr_flag);
+c0109fed:	e8 b2 f9 ff ff       	call   c01099a4 <__intr_save>
+c0109ff2:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        {
+            current = proc;
+c0109ff5:	8b 45 08             	mov    0x8(%ebp),%eax
+c0109ff8:	a3 08 33 1c c0       	mov    %eax,0xc01c3308
+            load_esp0(next->kstack + KSTACKSIZE);
+c0109ffd:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a000:	8b 40 0c             	mov    0xc(%eax),%eax
+c010a003:	05 00 20 00 00       	add    $0x2000,%eax
+c010a008:	83 ec 0c             	sub    $0xc,%esp
+c010a00b:	50                   	push   %eax
+c010a00c:	e8 fb 96 ff ff       	call   c010370c <load_esp0>
+c010a011:	83 c4 10             	add    $0x10,%esp
+            lcr3(next->cr3);
+c010a014:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a017:	8b 40 40             	mov    0x40(%eax),%eax
+c010a01a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
+}
+
+static inline void
+lcr3(uintptr_t cr3) {
+    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
+c010a01d:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010a020:	0f 22 d8             	mov    %eax,%cr3
+            switch_to(&(prev->context), &(next->context));
+c010a023:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a026:	8d 50 1c             	lea    0x1c(%eax),%edx
+c010a029:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a02c:	83 c0 1c             	add    $0x1c,%eax
+c010a02f:	83 ec 08             	sub    $0x8,%esp
+c010a032:	52                   	push   %edx
+c010a033:	50                   	push   %eax
+c010a034:	e8 fb f8 ff ff       	call   c0109934 <switch_to>
+c010a039:	83 c4 10             	add    $0x10,%esp
+        }
+        local_intr_restore(intr_flag);
+c010a03c:	83 ec 0c             	sub    $0xc,%esp
+c010a03f:	ff 75 ec             	pushl  -0x14(%ebp)
+c010a042:	e8 87 f9 ff ff       	call   c01099ce <__intr_restore>
+c010a047:	83 c4 10             	add    $0x10,%esp
+    }
+}
+c010a04a:	90                   	nop
+c010a04b:	c9                   	leave  
+c010a04c:	c3                   	ret    
+
+c010a04d <forkret>:
+
+// forkret -- the first kernel entry point of a new thread/process
+// NOTE: the addr of forkret is setted in copy_thread function
+//       after switch_to, the current proc will execute here.
+static void
+forkret(void) {
+c010a04d:	55                   	push   %ebp
+c010a04e:	89 e5                	mov    %esp,%ebp
+c010a050:	83 ec 08             	sub    $0x8,%esp
+    forkrets(current->tf);
+c010a053:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010a058:	8b 40 3c             	mov    0x3c(%eax),%eax
+c010a05b:	83 ec 0c             	sub    $0xc,%esp
+c010a05e:	50                   	push   %eax
+c010a05f:	e8 e7 94 ff ff       	call   c010354b <forkrets>
+c010a064:	83 c4 10             	add    $0x10,%esp
+}
+c010a067:	90                   	nop
+c010a068:	c9                   	leave  
+c010a069:	c3                   	ret    
+
+c010a06a <hash_proc>:
+
+// hash_proc - add proc into proc hash_list
+static void
+hash_proc(struct proc_struct *proc) {
+c010a06a:	55                   	push   %ebp
+c010a06b:	89 e5                	mov    %esp,%ebp
+c010a06d:	53                   	push   %ebx
+c010a06e:	83 ec 24             	sub    $0x24,%esp
+    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
+c010a071:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a074:	8d 98 84 00 00 00    	lea    0x84(%eax),%ebx
+c010a07a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a07d:	8b 40 04             	mov    0x4(%eax),%eax
+c010a080:	83 ec 08             	sub    $0x8,%esp
+c010a083:	6a 0a                	push   $0xa
+c010a085:	50                   	push   %eax
+c010a086:	e8 f4 2a 00 00       	call   c010cb7f <hash32>
+c010a08b:	83 c4 10             	add    $0x10,%esp
+c010a08e:	c1 e0 03             	shl    $0x3,%eax
+c010a091:	05 20 33 1c c0       	add    $0xc01c3320,%eax
+c010a096:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010a099:	89 5d f0             	mov    %ebx,-0x10(%ebp)
+c010a09c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a09f:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010a0a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a0a5:	89 45 e8             	mov    %eax,-0x18(%ebp)
+ * Insert the new element @elm *after* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_after(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm, listelm->next);
+c010a0a8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a0ab:	8b 40 04             	mov    0x4(%eax),%eax
+c010a0ae:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010a0b1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+c010a0b4:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010a0b7:	89 55 e0             	mov    %edx,-0x20(%ebp)
+c010a0ba:	89 45 dc             	mov    %eax,-0x24(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c010a0bd:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010a0c0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010a0c3:	89 10                	mov    %edx,(%eax)
+c010a0c5:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010a0c8:	8b 10                	mov    (%eax),%edx
+c010a0ca:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010a0cd:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c010a0d0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010a0d3:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c010a0d6:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c010a0d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010a0dc:	8b 55 e0             	mov    -0x20(%ebp),%edx
+c010a0df:	89 10                	mov    %edx,(%eax)
+}
+c010a0e1:	90                   	nop
+c010a0e2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+c010a0e5:	c9                   	leave  
+c010a0e6:	c3                   	ret    
+
+c010a0e7 <unhash_proc>:
+
+// unhash_proc - delete proc from proc hash_list
+static void
+unhash_proc(struct proc_struct *proc) {
+c010a0e7:	55                   	push   %ebp
+c010a0e8:	89 e5                	mov    %esp,%ebp
+c010a0ea:	83 ec 10             	sub    $0x10,%esp
+    list_del(&(proc->hash_link));
+c010a0ed:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a0f0:	05 84 00 00 00       	add    $0x84,%eax
+c010a0f5:	89 45 fc             	mov    %eax,-0x4(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c010a0f8:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010a0fb:	8b 40 04             	mov    0x4(%eax),%eax
+c010a0fe:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c010a101:	8b 12                	mov    (%edx),%edx
+c010a103:	89 55 f8             	mov    %edx,-0x8(%ebp)
+c010a106:	89 45 f4             	mov    %eax,-0xc(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c010a109:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010a10c:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010a10f:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c010a112:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a115:	8b 55 f8             	mov    -0x8(%ebp),%edx
+c010a118:	89 10                	mov    %edx,(%eax)
+}
+c010a11a:	90                   	nop
+c010a11b:	c9                   	leave  
+c010a11c:	c3                   	ret    
+
+c010a11d <find_proc>:
+
+// find_proc - find proc frome proc hash_list according to pid
+struct proc_struct *
+find_proc(int pid) {
+c010a11d:	55                   	push   %ebp
+c010a11e:	89 e5                	mov    %esp,%ebp
+c010a120:	83 ec 18             	sub    $0x18,%esp
+    if (0 < pid && pid < MAX_PID) {
+c010a123:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010a127:	7e 5f                	jle    c010a188 <find_proc+0x6b>
+c010a129:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
+c010a130:	7f 56                	jg     c010a188 <find_proc+0x6b>
+        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
+c010a132:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a135:	83 ec 08             	sub    $0x8,%esp
+c010a138:	6a 0a                	push   $0xa
+c010a13a:	50                   	push   %eax
+c010a13b:	e8 3f 2a 00 00       	call   c010cb7f <hash32>
+c010a140:	83 c4 10             	add    $0x10,%esp
+c010a143:	c1 e0 03             	shl    $0x3,%eax
+c010a146:	05 20 33 1c c0       	add    $0xc01c3320,%eax
+c010a14b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010a14e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a151:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        while ((le = list_next(le)) != list) {
+c010a154:	eb 1b                	jmp    c010a171 <find_proc+0x54>
+            struct proc_struct *proc = le2proc(le, hash_link);
+c010a156:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a159:	2d 84 00 00 00       	sub    $0x84,%eax
+c010a15e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+            if (proc->pid == pid) {
+c010a161:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a164:	8b 40 04             	mov    0x4(%eax),%eax
+c010a167:	3b 45 08             	cmp    0x8(%ebp),%eax
+c010a16a:	75 05                	jne    c010a171 <find_proc+0x54>
+                return proc;
+c010a16c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a16f:	eb 1c                	jmp    c010a18d <find_proc+0x70>
+c010a171:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a174:	89 45 e8             	mov    %eax,-0x18(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c010a177:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010a17a:	8b 40 04             	mov    0x4(%eax),%eax
+// find_proc - find proc frome proc hash_list according to pid
+struct proc_struct *
+find_proc(int pid) {
+    if (0 < pid && pid < MAX_PID) {
+        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
+        while ((le = list_next(le)) != list) {
+c010a17d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010a180:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a183:	3b 45 f0             	cmp    -0x10(%ebp),%eax
+c010a186:	75 ce                	jne    c010a156 <find_proc+0x39>
+            if (proc->pid == pid) {
+                return proc;
+            }
+        }
+    }
+    return NULL;
+c010a188:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010a18d:	c9                   	leave  
+c010a18e:	c3                   	ret    
+
+c010a18f <kernel_thread>:
+
+// kernel_thread - create a kernel thread using "fn" function
+// NOTE: the contents of temp trapframe tf will be copied to 
+//       proc->tf in do_fork-->copy_thread function
+int
+kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
+c010a18f:	55                   	push   %ebp
+c010a190:	89 e5                	mov    %esp,%ebp
+c010a192:	83 ec 58             	sub    $0x58,%esp
+    struct trapframe tf;
+    memset(&tf, 0, sizeof(struct trapframe));
+c010a195:	83 ec 04             	sub    $0x4,%esp
+c010a198:	6a 4c                	push   $0x4c
+c010a19a:	6a 00                	push   $0x0
+c010a19c:	8d 45 ac             	lea    -0x54(%ebp),%eax
+c010a19f:	50                   	push   %eax
+c010a1a0:	e8 43 22 00 00       	call   c010c3e8 <memset>
+c010a1a5:	83 c4 10             	add    $0x10,%esp
+    tf.tf_cs = KERNEL_CS;
+c010a1a8:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
+    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
+c010a1ae:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
+c010a1b4:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
+c010a1b8:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
+c010a1bc:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
+c010a1c0:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
+    tf.tf_regs.reg_ebx = (uint32_t)fn;
+c010a1c4:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a1c7:	89 45 bc             	mov    %eax,-0x44(%ebp)
+    tf.tf_regs.reg_edx = (uint32_t)arg;
+c010a1ca:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010a1cd:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    tf.tf_eip = (uint32_t)kernel_thread_entry;
+c010a1d0:	b8 2b 99 10 c0       	mov    $0xc010992b,%eax
+c010a1d5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    return do_fork(clone_flags | CLONE_VM, 0, &tf);
+c010a1d8:	8b 45 10             	mov    0x10(%ebp),%eax
+c010a1db:	80 cc 01             	or     $0x1,%ah
+c010a1de:	89 c2                	mov    %eax,%edx
+c010a1e0:	83 ec 04             	sub    $0x4,%esp
+c010a1e3:	8d 45 ac             	lea    -0x54(%ebp),%eax
+c010a1e6:	50                   	push   %eax
+c010a1e7:	6a 00                	push   $0x0
+c010a1e9:	52                   	push   %edx
+c010a1ea:	e8 f2 02 00 00       	call   c010a4e1 <do_fork>
+c010a1ef:	83 c4 10             	add    $0x10,%esp
+}
+c010a1f2:	c9                   	leave  
+c010a1f3:	c3                   	ret    
+
+c010a1f4 <setup_kstack>:
+
+// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
+static int
+setup_kstack(struct proc_struct *proc) {
+c010a1f4:	55                   	push   %ebp
+c010a1f5:	89 e5                	mov    %esp,%ebp
+c010a1f7:	83 ec 18             	sub    $0x18,%esp
+    struct Page *page = alloc_pages(KSTACKPAGE);
+c010a1fa:	83 ec 0c             	sub    $0xc,%esp
+c010a1fd:	6a 02                	push   $0x2
+c010a1ff:	e8 5c 96 ff ff       	call   c0103860 <alloc_pages>
+c010a204:	83 c4 10             	add    $0x10,%esp
+c010a207:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (page != NULL) {
+c010a20a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010a20e:	74 1d                	je     c010a22d <setup_kstack+0x39>
+        proc->kstack = (uintptr_t)page2kva(page);
+c010a210:	83 ec 0c             	sub    $0xc,%esp
+c010a213:	ff 75 f4             	pushl  -0xc(%ebp)
+c010a216:	e8 2a f8 ff ff       	call   c0109a45 <page2kva>
+c010a21b:	83 c4 10             	add    $0x10,%esp
+c010a21e:	89 c2                	mov    %eax,%edx
+c010a220:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a223:	89 50 0c             	mov    %edx,0xc(%eax)
+        return 0;
+c010a226:	b8 00 00 00 00       	mov    $0x0,%eax
+c010a22b:	eb 05                	jmp    c010a232 <setup_kstack+0x3e>
+    }
+    return -E_NO_MEM;
+c010a22d:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
+}
+c010a232:	c9                   	leave  
+c010a233:	c3                   	ret    
+
+c010a234 <put_kstack>:
+
+// put_kstack - free the memory space of process kernel stack
+static void
+put_kstack(struct proc_struct *proc) {
+c010a234:	55                   	push   %ebp
+c010a235:	89 e5                	mov    %esp,%ebp
+c010a237:	83 ec 08             	sub    $0x8,%esp
+    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
+c010a23a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a23d:	8b 40 0c             	mov    0xc(%eax),%eax
+c010a240:	83 ec 0c             	sub    $0xc,%esp
+c010a243:	50                   	push   %eax
+c010a244:	e8 41 f8 ff ff       	call   c0109a8a <kva2page>
+c010a249:	83 c4 10             	add    $0x10,%esp
+c010a24c:	83 ec 08             	sub    $0x8,%esp
+c010a24f:	6a 02                	push   $0x2
+c010a251:	50                   	push   %eax
+c010a252:	e8 75 96 ff ff       	call   c01038cc <free_pages>
+c010a257:	83 c4 10             	add    $0x10,%esp
+}
+c010a25a:	90                   	nop
+c010a25b:	c9                   	leave  
+c010a25c:	c3                   	ret    
+
+c010a25d <setup_pgdir>:
+
+// setup_pgdir - alloc one page as PDT
+static int
+setup_pgdir(struct mm_struct *mm) {
+c010a25d:	55                   	push   %ebp
+c010a25e:	89 e5                	mov    %esp,%ebp
+c010a260:	83 ec 18             	sub    $0x18,%esp
+    struct Page *page;
+    if ((page = alloc_page()) == NULL) {
+c010a263:	83 ec 0c             	sub    $0xc,%esp
+c010a266:	6a 01                	push   $0x1
+c010a268:	e8 f3 95 ff ff       	call   c0103860 <alloc_pages>
+c010a26d:	83 c4 10             	add    $0x10,%esp
+c010a270:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010a273:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010a277:	75 07                	jne    c010a280 <setup_pgdir+0x23>
+        return -E_NO_MEM;
+c010a279:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
+c010a27e:	eb 74                	jmp    c010a2f4 <setup_pgdir+0x97>
+    }
+    pde_t *pgdir = page2kva(page);
+c010a280:	83 ec 0c             	sub    $0xc,%esp
+c010a283:	ff 75 f4             	pushl  -0xc(%ebp)
+c010a286:	e8 ba f7 ff ff       	call   c0109a45 <page2kva>
+c010a28b:	83 c4 10             	add    $0x10,%esp
+c010a28e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    memcpy(pgdir, boot_pgdir, PGSIZE);
+c010a291:	a1 64 32 1c c0       	mov    0xc01c3264,%eax
+c010a296:	83 ec 04             	sub    $0x4,%esp
+c010a299:	68 00 10 00 00       	push   $0x1000
+c010a29e:	50                   	push   %eax
+c010a29f:	ff 75 f0             	pushl  -0x10(%ebp)
+c010a2a2:	e8 24 22 00 00       	call   c010c4cb <memcpy>
+c010a2a7:	83 c4 10             	add    $0x10,%esp
+    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
+c010a2aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a2ad:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
+c010a2b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a2b6:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010a2b9:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
+c010a2c0:	77 17                	ja     c010a2d9 <setup_pgdir+0x7c>
+c010a2c2:	ff 75 ec             	pushl  -0x14(%ebp)
+c010a2c5:	68 0c f1 10 c0       	push   $0xc010f10c
+c010a2ca:	68 41 01 00 00       	push   $0x141
+c010a2cf:	68 30 f1 10 c0       	push   $0xc010f130
+c010a2d4:	e8 1b 61 ff ff       	call   c01003f4 <__panic>
+c010a2d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a2dc:	05 00 00 00 40       	add    $0x40000000,%eax
+c010a2e1:	83 c8 03             	or     $0x3,%eax
+c010a2e4:	89 02                	mov    %eax,(%edx)
+    mm->pgdir = pgdir;
+c010a2e6:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a2e9:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010a2ec:	89 50 0c             	mov    %edx,0xc(%eax)
+    return 0;
+c010a2ef:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010a2f4:	c9                   	leave  
+c010a2f5:	c3                   	ret    
+
+c010a2f6 <put_pgdir>:
+
+// put_pgdir - free the memory space of PDT
+static void
+put_pgdir(struct mm_struct *mm) {
+c010a2f6:	55                   	push   %ebp
+c010a2f7:	89 e5                	mov    %esp,%ebp
+c010a2f9:	83 ec 08             	sub    $0x8,%esp
+    free_page(kva2page(mm->pgdir));
+c010a2fc:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a2ff:	8b 40 0c             	mov    0xc(%eax),%eax
+c010a302:	83 ec 0c             	sub    $0xc,%esp
+c010a305:	50                   	push   %eax
+c010a306:	e8 7f f7 ff ff       	call   c0109a8a <kva2page>
+c010a30b:	83 c4 10             	add    $0x10,%esp
+c010a30e:	83 ec 08             	sub    $0x8,%esp
+c010a311:	6a 01                	push   $0x1
+c010a313:	50                   	push   %eax
+c010a314:	e8 b3 95 ff ff       	call   c01038cc <free_pages>
+c010a319:	83 c4 10             	add    $0x10,%esp
+}
+c010a31c:	90                   	nop
+c010a31d:	c9                   	leave  
+c010a31e:	c3                   	ret    
+
+c010a31f <copy_mm>:
+
+// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
+//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
+static int
+copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
+c010a31f:	55                   	push   %ebp
+c010a320:	89 e5                	mov    %esp,%ebp
+c010a322:	83 ec 18             	sub    $0x18,%esp
+    struct mm_struct *mm, *oldmm = current->mm;
+c010a325:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010a32a:	8b 40 18             	mov    0x18(%eax),%eax
+c010a32d:	89 45 ec             	mov    %eax,-0x14(%ebp)
+
+    /* current is a kernel thread */
+    if (oldmm == NULL) {
+c010a330:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c010a334:	75 0a                	jne    c010a340 <copy_mm+0x21>
+        return 0;
+c010a336:	b8 00 00 00 00       	mov    $0x0,%eax
+c010a33b:	e9 03 01 00 00       	jmp    c010a443 <copy_mm+0x124>
+    }
+    if (clone_flags & CLONE_VM) {
+c010a340:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a343:	25 00 01 00 00       	and    $0x100,%eax
+c010a348:	85 c0                	test   %eax,%eax
+c010a34a:	74 08                	je     c010a354 <copy_mm+0x35>
+        mm = oldmm;
+c010a34c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a34f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        goto good_mm;
+c010a352:	eb 65                	jmp    c010a3b9 <copy_mm+0x9a>
+    }
+
+    int ret = -E_NO_MEM;
+c010a354:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
+    if ((mm = mm_create()) == NULL) {
+c010a35b:	e8 e6 b2 ff ff       	call   c0105646 <mm_create>
+c010a360:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010a363:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010a367:	0f 84 d2 00 00 00    	je     c010a43f <copy_mm+0x120>
+        goto bad_mm;
+    }
+    if (setup_pgdir(mm) != 0) {
+c010a36d:	83 ec 0c             	sub    $0xc,%esp
+c010a370:	ff 75 f4             	pushl  -0xc(%ebp)
+c010a373:	e8 e5 fe ff ff       	call   c010a25d <setup_pgdir>
+c010a378:	83 c4 10             	add    $0x10,%esp
+c010a37b:	85 c0                	test   %eax,%eax
+c010a37d:	0f 85 ab 00 00 00    	jne    c010a42e <copy_mm+0x10f>
+        goto bad_pgdir_cleanup_mm;
+    }
+
+    lock_mm(oldmm);
+c010a383:	83 ec 0c             	sub    $0xc,%esp
+c010a386:	ff 75 ec             	pushl  -0x14(%ebp)
+c010a389:	e8 6f f7 ff ff       	call   c0109afd <lock_mm>
+c010a38e:	83 c4 10             	add    $0x10,%esp
+    {
+        ret = dup_mmap(mm, oldmm);
+c010a391:	83 ec 08             	sub    $0x8,%esp
+c010a394:	ff 75 ec             	pushl  -0x14(%ebp)
+c010a397:	ff 75 f4             	pushl  -0xc(%ebp)
+c010a39a:	e8 7a b7 ff ff       	call   c0105b19 <dup_mmap>
+c010a39f:	83 c4 10             	add    $0x10,%esp
+c010a3a2:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    }
+    unlock_mm(oldmm);
+c010a3a5:	83 ec 0c             	sub    $0xc,%esp
+c010a3a8:	ff 75 ec             	pushl  -0x14(%ebp)
+c010a3ab:	e8 85 f7 ff ff       	call   c0109b35 <unlock_mm>
+c010a3b0:	83 c4 10             	add    $0x10,%esp
+
+    if (ret != 0) {
+c010a3b3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010a3b7:	75 56                	jne    c010a40f <copy_mm+0xf0>
+        goto bad_dup_cleanup_mmap;
+    }
+
+good_mm:
+    mm_count_inc(mm);
+c010a3b9:	83 ec 0c             	sub    $0xc,%esp
+c010a3bc:	ff 75 f4             	pushl  -0xc(%ebp)
+c010a3bf:	e8 05 f7 ff ff       	call   c0109ac9 <mm_count_inc>
+c010a3c4:	83 c4 10             	add    $0x10,%esp
+    proc->mm = mm;
+c010a3c7:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010a3ca:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010a3cd:	89 50 18             	mov    %edx,0x18(%eax)
+    proc->cr3 = PADDR(mm->pgdir);
+c010a3d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a3d3:	8b 40 0c             	mov    0xc(%eax),%eax
+c010a3d6:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010a3d9:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
+c010a3e0:	77 17                	ja     c010a3f9 <copy_mm+0xda>
+c010a3e2:	ff 75 e8             	pushl  -0x18(%ebp)
+c010a3e5:	68 0c f1 10 c0       	push   $0xc010f10c
+c010a3ea:	68 70 01 00 00       	push   $0x170
+c010a3ef:	68 30 f1 10 c0       	push   $0xc010f130
+c010a3f4:	e8 fb 5f ff ff       	call   c01003f4 <__panic>
+c010a3f9:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010a3fc:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
+c010a402:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010a405:	89 50 40             	mov    %edx,0x40(%eax)
+    return 0;
+c010a408:	b8 00 00 00 00       	mov    $0x0,%eax
+c010a40d:	eb 34                	jmp    c010a443 <copy_mm+0x124>
+        ret = dup_mmap(mm, oldmm);
+    }
+    unlock_mm(oldmm);
+
+    if (ret != 0) {
+        goto bad_dup_cleanup_mmap;
+c010a40f:	90                   	nop
+    mm_count_inc(mm);
+    proc->mm = mm;
+    proc->cr3 = PADDR(mm->pgdir);
+    return 0;
+bad_dup_cleanup_mmap:
+    exit_mmap(mm);
+c010a410:	83 ec 0c             	sub    $0xc,%esp
+c010a413:	ff 75 f4             	pushl  -0xc(%ebp)
+c010a416:	e8 e5 b7 ff ff       	call   c0105c00 <exit_mmap>
+c010a41b:	83 c4 10             	add    $0x10,%esp
+    put_pgdir(mm);
+c010a41e:	83 ec 0c             	sub    $0xc,%esp
+c010a421:	ff 75 f4             	pushl  -0xc(%ebp)
+c010a424:	e8 cd fe ff ff       	call   c010a2f6 <put_pgdir>
+c010a429:	83 c4 10             	add    $0x10,%esp
+c010a42c:	eb 01                	jmp    c010a42f <copy_mm+0x110>
+    int ret = -E_NO_MEM;
+    if ((mm = mm_create()) == NULL) {
+        goto bad_mm;
+    }
+    if (setup_pgdir(mm) != 0) {
+        goto bad_pgdir_cleanup_mm;
+c010a42e:	90                   	nop
+    return 0;
+bad_dup_cleanup_mmap:
+    exit_mmap(mm);
+    put_pgdir(mm);
+bad_pgdir_cleanup_mm:
+    mm_destroy(mm);
+c010a42f:	83 ec 0c             	sub    $0xc,%esp
+c010a432:	ff 75 f4             	pushl  -0xc(%ebp)
+c010a435:	e8 38 b5 ff ff       	call   c0105972 <mm_destroy>
+c010a43a:	83 c4 10             	add    $0x10,%esp
+c010a43d:	eb 01                	jmp    c010a440 <copy_mm+0x121>
+        goto good_mm;
+    }
+
+    int ret = -E_NO_MEM;
+    if ((mm = mm_create()) == NULL) {
+        goto bad_mm;
+c010a43f:	90                   	nop
+    exit_mmap(mm);
+    put_pgdir(mm);
+bad_pgdir_cleanup_mm:
+    mm_destroy(mm);
+bad_mm:
+    return ret;
+c010a440:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+c010a443:	c9                   	leave  
+c010a444:	c3                   	ret    
+
+c010a445 <copy_thread>:
+
+// copy_thread - setup the trapframe on the  process's kernel stack top and
+//             - setup the kernel entry point and stack of process
+static void
+copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
+c010a445:	55                   	push   %ebp
+c010a446:	89 e5                	mov    %esp,%ebp
+c010a448:	57                   	push   %edi
+c010a449:	56                   	push   %esi
+c010a44a:	53                   	push   %ebx
+    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
+c010a44b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a44e:	8b 40 0c             	mov    0xc(%eax),%eax
+c010a451:	05 b4 1f 00 00       	add    $0x1fb4,%eax
+c010a456:	89 c2                	mov    %eax,%edx
+c010a458:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a45b:	89 50 3c             	mov    %edx,0x3c(%eax)
+    *(proc->tf) = *tf;
+c010a45e:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a461:	8b 40 3c             	mov    0x3c(%eax),%eax
+c010a464:	8b 55 10             	mov    0x10(%ebp),%edx
+c010a467:	89 d3                	mov    %edx,%ebx
+c010a469:	ba 4c 00 00 00       	mov    $0x4c,%edx
+c010a46e:	8b 0b                	mov    (%ebx),%ecx
+c010a470:	89 08                	mov    %ecx,(%eax)
+c010a472:	8b 4c 13 fc          	mov    -0x4(%ebx,%edx,1),%ecx
+c010a476:	89 4c 10 fc          	mov    %ecx,-0x4(%eax,%edx,1)
+c010a47a:	8d 78 04             	lea    0x4(%eax),%edi
+c010a47d:	83 e7 fc             	and    $0xfffffffc,%edi
+c010a480:	29 f8                	sub    %edi,%eax
+c010a482:	29 c3                	sub    %eax,%ebx
+c010a484:	01 c2                	add    %eax,%edx
+c010a486:	83 e2 fc             	and    $0xfffffffc,%edx
+c010a489:	89 d0                	mov    %edx,%eax
+c010a48b:	c1 e8 02             	shr    $0x2,%eax
+c010a48e:	89 de                	mov    %ebx,%esi
+c010a490:	89 c1                	mov    %eax,%ecx
+c010a492:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+    proc->tf->tf_regs.reg_eax = 0;
+c010a494:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a497:	8b 40 3c             	mov    0x3c(%eax),%eax
+c010a49a:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
+    proc->tf->tf_esp = esp;
+c010a4a1:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a4a4:	8b 40 3c             	mov    0x3c(%eax),%eax
+c010a4a7:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010a4aa:	89 50 44             	mov    %edx,0x44(%eax)
+    proc->tf->tf_eflags |= FL_IF;
+c010a4ad:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a4b0:	8b 40 3c             	mov    0x3c(%eax),%eax
+c010a4b3:	8b 55 08             	mov    0x8(%ebp),%edx
+c010a4b6:	8b 52 3c             	mov    0x3c(%edx),%edx
+c010a4b9:	8b 52 40             	mov    0x40(%edx),%edx
+c010a4bc:	80 ce 02             	or     $0x2,%dh
+c010a4bf:	89 50 40             	mov    %edx,0x40(%eax)
+
+    proc->context.eip = (uintptr_t)forkret;
+c010a4c2:	ba 4d a0 10 c0       	mov    $0xc010a04d,%edx
+c010a4c7:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a4ca:	89 50 1c             	mov    %edx,0x1c(%eax)
+    proc->context.esp = (uintptr_t)(proc->tf);
+c010a4cd:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a4d0:	8b 40 3c             	mov    0x3c(%eax),%eax
+c010a4d3:	89 c2                	mov    %eax,%edx
+c010a4d5:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a4d8:	89 50 20             	mov    %edx,0x20(%eax)
+}
+c010a4db:	90                   	nop
+c010a4dc:	5b                   	pop    %ebx
+c010a4dd:	5e                   	pop    %esi
+c010a4de:	5f                   	pop    %edi
+c010a4df:	5d                   	pop    %ebp
+c010a4e0:	c3                   	ret    
+
+c010a4e1 <do_fork>:
+ * @clone_flags: used to guide how to clone the child process
+ * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
+ * @tf:          the trapframe info, which will be copied to child process's proc->tf
+ */
+int
+do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
+c010a4e1:	55                   	push   %ebp
+c010a4e2:	89 e5                	mov    %esp,%ebp
+c010a4e4:	83 ec 18             	sub    $0x18,%esp
+    int ret = -E_NO_FREE_PROC;
+c010a4e7:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
+    struct proc_struct *proc;
+    if (nr_process >= MAX_PROCESS) {
+c010a4ee:	a1 20 53 1c c0       	mov    0xc01c5320,%eax
+c010a4f3:	3d ff 0f 00 00       	cmp    $0xfff,%eax
+c010a4f8:	0f 8f e4 00 00 00    	jg     c010a5e2 <do_fork+0x101>
+        goto fork_out;
+    }
+    ret = -E_NO_MEM;
+c010a4fe:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
+    *    set_links:  set the relation links of process.  ALSO SEE: remove_links:  lean the relation links of process 
+    *    -------------------
+	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
+	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
+    */
+    if ((proc = alloc_proc()) == NULL) goto fork_out;
+c010a505:	e8 56 f6 ff ff       	call   c0109b60 <alloc_proc>
+c010a50a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010a50d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010a511:	0f 84 ce 00 00 00    	je     c010a5e5 <do_fork+0x104>
+    proc->parent = current;
+c010a517:	8b 15 08 33 1c c0    	mov    0xc01c3308,%edx
+c010a51d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a520:	89 50 14             	mov    %edx,0x14(%eax)
+    assert(current->wait_state == 0);//step 1
+c010a523:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010a528:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
+c010a52e:	85 c0                	test   %eax,%eax
+c010a530:	74 19                	je     c010a54b <do_fork+0x6a>
+c010a532:	68 44 f1 10 c0       	push   $0xc010f144
+c010a537:	68 5d f1 10 c0       	push   $0xc010f15d
+c010a53c:	68 b9 01 00 00       	push   $0x1b9
+c010a541:	68 30 f1 10 c0       	push   $0xc010f130
+c010a546:	e8 a9 5e ff ff       	call   c01003f4 <__panic>
+    if (setup_kstack(proc) != 0) goto bad_fork_cleanup_proc; //step 2
+c010a54b:	83 ec 0c             	sub    $0xc,%esp
+c010a54e:	ff 75 f0             	pushl  -0x10(%ebp)
+c010a551:	e8 9e fc ff ff       	call   c010a1f4 <setup_kstack>
+c010a556:	83 c4 10             	add    $0x10,%esp
+c010a559:	85 c0                	test   %eax,%eax
+c010a55b:	0f 85 9b 00 00 00    	jne    c010a5fc <do_fork+0x11b>
+    if (copy_mm(clone_flags, proc) != 0) goto bad_fork_cleanup_kstack; //step 3
+c010a561:	83 ec 08             	sub    $0x8,%esp
+c010a564:	ff 75 f0             	pushl  -0x10(%ebp)
+c010a567:	ff 75 08             	pushl  0x8(%ebp)
+c010a56a:	e8 b0 fd ff ff       	call   c010a31f <copy_mm>
+c010a56f:	83 c4 10             	add    $0x10,%esp
+c010a572:	85 c0                	test   %eax,%eax
+c010a574:	75 75                	jne    c010a5eb <do_fork+0x10a>
+    copy_thread(proc, stack, tf); //step 4
+c010a576:	83 ec 04             	sub    $0x4,%esp
+c010a579:	ff 75 10             	pushl  0x10(%ebp)
+c010a57c:	ff 75 0c             	pushl  0xc(%ebp)
+c010a57f:	ff 75 f0             	pushl  -0x10(%ebp)
+c010a582:	e8 be fe ff ff       	call   c010a445 <copy_thread>
+c010a587:	83 c4 10             	add    $0x10,%esp
+    bool intr_flag;
+    //make following process atomic
+    local_intr_save(intr_flag);//step 5
+c010a58a:	e8 15 f4 ff ff       	call   c01099a4 <__intr_save>
+c010a58f:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    {
+        proc->pid = get_pid();
+c010a592:	e8 40 f9 ff ff       	call   c0109ed7 <get_pid>
+c010a597:	89 c2                	mov    %eax,%edx
+c010a599:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a59c:	89 50 04             	mov    %edx,0x4(%eax)
+        hash_proc(proc);
+c010a59f:	83 ec 0c             	sub    $0xc,%esp
+c010a5a2:	ff 75 f0             	pushl  -0x10(%ebp)
+c010a5a5:	e8 c0 fa ff ff       	call   c010a06a <hash_proc>
+c010a5aa:	83 c4 10             	add    $0x10,%esp
+        set_links(proc);
+c010a5ad:	83 ec 0c             	sub    $0xc,%esp
+c010a5b0:	ff 75 f0             	pushl  -0x10(%ebp)
+c010a5b3:	e8 c2 f7 ff ff       	call   c0109d7a <set_links>
+c010a5b8:	83 c4 10             	add    $0x10,%esp
+    }
+    local_intr_restore(intr_flag);
+c010a5bb:	83 ec 0c             	sub    $0xc,%esp
+c010a5be:	ff 75 ec             	pushl  -0x14(%ebp)
+c010a5c1:	e8 08 f4 ff ff       	call   c01099ce <__intr_restore>
+c010a5c6:	83 c4 10             	add    $0x10,%esp
+    wakeup_proc(proc); //step 6
+c010a5c9:	83 ec 0c             	sub    $0xc,%esp
+c010a5cc:	ff 75 f0             	pushl  -0x10(%ebp)
+c010a5cf:	e8 05 11 00 00       	call   c010b6d9 <wakeup_proc>
+c010a5d4:	83 c4 10             	add    $0x10,%esp
+    ret = proc->pid; // step 7
+c010a5d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010a5da:	8b 40 04             	mov    0x4(%eax),%eax
+c010a5dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010a5e0:	eb 04                	jmp    c010a5e6 <do_fork+0x105>
+int
+do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
+    int ret = -E_NO_FREE_PROC;
+    struct proc_struct *proc;
+    if (nr_process >= MAX_PROCESS) {
+        goto fork_out;
+c010a5e2:	90                   	nop
+c010a5e3:	eb 01                	jmp    c010a5e6 <do_fork+0x105>
+    *    set_links:  set the relation links of process.  ALSO SEE: remove_links:  lean the relation links of process 
+    *    -------------------
+	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
+	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
+    */
+    if ((proc = alloc_proc()) == NULL) goto fork_out;
+c010a5e5:	90                   	nop
+    }
+    local_intr_restore(intr_flag);
+    wakeup_proc(proc); //step 6
+    ret = proc->pid; // step 7
+fork_out:
+    return ret;
+c010a5e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010a5e9:	eb 22                	jmp    c010a60d <do_fork+0x12c>
+    */
+    if ((proc = alloc_proc()) == NULL) goto fork_out;
+    proc->parent = current;
+    assert(current->wait_state == 0);//step 1
+    if (setup_kstack(proc) != 0) goto bad_fork_cleanup_proc; //step 2
+    if (copy_mm(clone_flags, proc) != 0) goto bad_fork_cleanup_kstack; //step 3
+c010a5eb:	90                   	nop
+    ret = proc->pid; // step 7
+fork_out:
+    return ret;
+
+bad_fork_cleanup_kstack:
+    put_kstack(proc);
+c010a5ec:	83 ec 0c             	sub    $0xc,%esp
+c010a5ef:	ff 75 f0             	pushl  -0x10(%ebp)
+c010a5f2:	e8 3d fc ff ff       	call   c010a234 <put_kstack>
+c010a5f7:	83 c4 10             	add    $0x10,%esp
+c010a5fa:	eb 01                	jmp    c010a5fd <do_fork+0x11c>
+	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
+    */
+    if ((proc = alloc_proc()) == NULL) goto fork_out;
+    proc->parent = current;
+    assert(current->wait_state == 0);//step 1
+    if (setup_kstack(proc) != 0) goto bad_fork_cleanup_proc; //step 2
+c010a5fc:	90                   	nop
+    return ret;
+
+bad_fork_cleanup_kstack:
+    put_kstack(proc);
+bad_fork_cleanup_proc:
+    kfree(proc);
+c010a5fd:	83 ec 0c             	sub    $0xc,%esp
+c010a600:	ff 75 f0             	pushl  -0x10(%ebp)
+c010a603:	e8 6d c6 ff ff       	call   c0106c75 <kfree>
+c010a608:	83 c4 10             	add    $0x10,%esp
+    goto fork_out;
+c010a60b:	eb d9                	jmp    c010a5e6 <do_fork+0x105>
+}
+c010a60d:	c9                   	leave  
+c010a60e:	c3                   	ret    
+
+c010a60f <do_exit>:
+// do_exit - called by sys_exit
+//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
+//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
+//   3. call scheduler to switch to other process
+int
+do_exit(int error_code) {
+c010a60f:	55                   	push   %ebp
+c010a610:	89 e5                	mov    %esp,%ebp
+c010a612:	83 ec 18             	sub    $0x18,%esp
+    if (current == idleproc) {
+c010a615:	8b 15 08 33 1c c0    	mov    0xc01c3308,%edx
+c010a61b:	a1 00 33 1c c0       	mov    0xc01c3300,%eax
+c010a620:	39 c2                	cmp    %eax,%edx
+c010a622:	75 17                	jne    c010a63b <do_exit+0x2c>
+        panic("idleproc exit.\n");
+c010a624:	83 ec 04             	sub    $0x4,%esp
+c010a627:	68 72 f1 10 c0       	push   $0xc010f172
+c010a62c:	68 d9 01 00 00       	push   $0x1d9
+c010a631:	68 30 f1 10 c0       	push   $0xc010f130
+c010a636:	e8 b9 5d ff ff       	call   c01003f4 <__panic>
+    }
+    if (current == initproc) {
+c010a63b:	8b 15 08 33 1c c0    	mov    0xc01c3308,%edx
+c010a641:	a1 04 33 1c c0       	mov    0xc01c3304,%eax
+c010a646:	39 c2                	cmp    %eax,%edx
+c010a648:	75 17                	jne    c010a661 <do_exit+0x52>
+        panic("initproc exit.\n");
+c010a64a:	83 ec 04             	sub    $0x4,%esp
+c010a64d:	68 82 f1 10 c0       	push   $0xc010f182
+c010a652:	68 dc 01 00 00       	push   $0x1dc
+c010a657:	68 30 f1 10 c0       	push   $0xc010f130
+c010a65c:	e8 93 5d ff ff       	call   c01003f4 <__panic>
+    }
+    
+    struct mm_struct *mm = current->mm;
+c010a661:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010a666:	8b 40 18             	mov    0x18(%eax),%eax
+c010a669:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (mm != NULL) {
+c010a66c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010a670:	74 56                	je     c010a6c8 <do_exit+0xb9>
+        lcr3(boot_cr3);
+c010a672:	a1 a0 53 1c c0       	mov    0xc01c53a0,%eax
+c010a677:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010a67a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010a67d:	0f 22 d8             	mov    %eax,%cr3
+        if (mm_count_dec(mm) == 0) {
+c010a680:	83 ec 0c             	sub    $0xc,%esp
+c010a683:	ff 75 f4             	pushl  -0xc(%ebp)
+c010a686:	e8 58 f4 ff ff       	call   c0109ae3 <mm_count_dec>
+c010a68b:	83 c4 10             	add    $0x10,%esp
+c010a68e:	85 c0                	test   %eax,%eax
+c010a690:	75 2a                	jne    c010a6bc <do_exit+0xad>
+            exit_mmap(mm);
+c010a692:	83 ec 0c             	sub    $0xc,%esp
+c010a695:	ff 75 f4             	pushl  -0xc(%ebp)
+c010a698:	e8 63 b5 ff ff       	call   c0105c00 <exit_mmap>
+c010a69d:	83 c4 10             	add    $0x10,%esp
+            put_pgdir(mm);
+c010a6a0:	83 ec 0c             	sub    $0xc,%esp
+c010a6a3:	ff 75 f4             	pushl  -0xc(%ebp)
+c010a6a6:	e8 4b fc ff ff       	call   c010a2f6 <put_pgdir>
+c010a6ab:	83 c4 10             	add    $0x10,%esp
+            mm_destroy(mm);
+c010a6ae:	83 ec 0c             	sub    $0xc,%esp
+c010a6b1:	ff 75 f4             	pushl  -0xc(%ebp)
+c010a6b4:	e8 b9 b2 ff ff       	call   c0105972 <mm_destroy>
+c010a6b9:	83 c4 10             	add    $0x10,%esp
+        }
+        current->mm = NULL;
+c010a6bc:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010a6c1:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
+    }
+    current->state = PROC_ZOMBIE;
+c010a6c8:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010a6cd:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
+    current->exit_code = error_code;
+c010a6d3:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010a6d8:	8b 55 08             	mov    0x8(%ebp),%edx
+c010a6db:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)
+    
+    bool intr_flag;
+    struct proc_struct *proc;
+    local_intr_save(intr_flag);
+c010a6e1:	e8 be f2 ff ff       	call   c01099a4 <__intr_save>
+c010a6e6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    {
+        proc = current->parent;
+c010a6e9:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010a6ee:	8b 40 14             	mov    0x14(%eax),%eax
+c010a6f1:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        if (proc->wait_state == WT_CHILD) {
+c010a6f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a6f7:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
+c010a6fd:	3d 01 00 00 80       	cmp    $0x80000001,%eax
+c010a702:	0f 85 be 00 00 00    	jne    c010a7c6 <do_exit+0x1b7>
+            wakeup_proc(proc);
+c010a708:	83 ec 0c             	sub    $0xc,%esp
+c010a70b:	ff 75 ec             	pushl  -0x14(%ebp)
+c010a70e:	e8 c6 0f 00 00       	call   c010b6d9 <wakeup_proc>
+c010a713:	83 c4 10             	add    $0x10,%esp
+        }
+        while (current->cptr != NULL) {
+c010a716:	e9 ab 00 00 00       	jmp    c010a7c6 <do_exit+0x1b7>
+            proc = current->cptr;
+c010a71b:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010a720:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
+c010a726:	89 45 ec             	mov    %eax,-0x14(%ebp)
+            current->cptr = proc->optr;
+c010a729:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010a72e:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010a731:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
+c010a737:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
+    
+            proc->yptr = NULL;
+c010a73d:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a740:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
+c010a747:	00 00 00 
+            if ((proc->optr = initproc->cptr) != NULL) {
+c010a74a:	a1 04 33 1c c0       	mov    0xc01c3304,%eax
+c010a74f:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
+c010a755:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a758:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
+c010a75e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a761:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
+c010a767:	85 c0                	test   %eax,%eax
+c010a769:	74 14                	je     c010a77f <do_exit+0x170>
+                initproc->cptr->yptr = proc;
+c010a76b:	a1 04 33 1c c0       	mov    0xc01c3304,%eax
+c010a770:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
+c010a776:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010a779:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
+            }
+            proc->parent = initproc;
+c010a77f:	8b 15 04 33 1c c0    	mov    0xc01c3304,%edx
+c010a785:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a788:	89 50 14             	mov    %edx,0x14(%eax)
+            initproc->cptr = proc;
+c010a78b:	a1 04 33 1c c0       	mov    0xc01c3304,%eax
+c010a790:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010a793:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
+            if (proc->state == PROC_ZOMBIE) {
+c010a799:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a79c:	8b 00                	mov    (%eax),%eax
+c010a79e:	83 f8 03             	cmp    $0x3,%eax
+c010a7a1:	75 23                	jne    c010a7c6 <do_exit+0x1b7>
+                if (initproc->wait_state == WT_CHILD) {
+c010a7a3:	a1 04 33 1c c0       	mov    0xc01c3304,%eax
+c010a7a8:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
+c010a7ae:	3d 01 00 00 80       	cmp    $0x80000001,%eax
+c010a7b3:	75 11                	jne    c010a7c6 <do_exit+0x1b7>
+                    wakeup_proc(initproc);
+c010a7b5:	a1 04 33 1c c0       	mov    0xc01c3304,%eax
+c010a7ba:	83 ec 0c             	sub    $0xc,%esp
+c010a7bd:	50                   	push   %eax
+c010a7be:	e8 16 0f 00 00       	call   c010b6d9 <wakeup_proc>
+c010a7c3:	83 c4 10             	add    $0x10,%esp
+    {
+        proc = current->parent;
+        if (proc->wait_state == WT_CHILD) {
+            wakeup_proc(proc);
+        }
+        while (current->cptr != NULL) {
+c010a7c6:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010a7cb:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
+c010a7d1:	85 c0                	test   %eax,%eax
+c010a7d3:	0f 85 42 ff ff ff    	jne    c010a71b <do_exit+0x10c>
+                    wakeup_proc(initproc);
+                }
+            }
+        }
+    }
+    local_intr_restore(intr_flag);
+c010a7d9:	83 ec 0c             	sub    $0xc,%esp
+c010a7dc:	ff 75 f0             	pushl  -0x10(%ebp)
+c010a7df:	e8 ea f1 ff ff       	call   c01099ce <__intr_restore>
+c010a7e4:	83 c4 10             	add    $0x10,%esp
+    
+    schedule();
+c010a7e7:	e8 7d 0f 00 00       	call   c010b769 <schedule>
+    panic("do_exit will not return!! %d.\n", current->pid);
+c010a7ec:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010a7f1:	8b 40 04             	mov    0x4(%eax),%eax
+c010a7f4:	50                   	push   %eax
+c010a7f5:	68 94 f1 10 c0       	push   $0xc010f194
+c010a7fa:	68 08 02 00 00       	push   $0x208
+c010a7ff:	68 30 f1 10 c0       	push   $0xc010f130
+c010a804:	e8 eb 5b ff ff       	call   c01003f4 <__panic>
+
+c010a809 <load_icode>:
+/* load_icode - load the content of binary program(ELF format) as the new content of current process
+ * @binary:  the memory addr of the content of binary program
+ * @size:  the size of the content of binary program
+ */
+static int
+load_icode(unsigned char *binary, size_t size) {
+c010a809:	55                   	push   %ebp
+c010a80a:	89 e5                	mov    %esp,%ebp
+c010a80c:	83 ec 58             	sub    $0x58,%esp
+    if (current->mm != NULL) {
+c010a80f:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010a814:	8b 40 18             	mov    0x18(%eax),%eax
+c010a817:	85 c0                	test   %eax,%eax
+c010a819:	74 17                	je     c010a832 <load_icode+0x29>
+        panic("load_icode: current->mm must be empty.\n");
+c010a81b:	83 ec 04             	sub    $0x4,%esp
+c010a81e:	68 b4 f1 10 c0       	push   $0xc010f1b4
+c010a823:	68 12 02 00 00       	push   $0x212
+c010a828:	68 30 f1 10 c0       	push   $0xc010f130
+c010a82d:	e8 c2 5b ff ff       	call   c01003f4 <__panic>
+    }
+
+    int ret = -E_NO_MEM;
+c010a832:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
+    struct mm_struct *mm;
+    //(1) create a new mm for current process
+    if ((mm = mm_create()) == NULL) {
+c010a839:	e8 08 ae ff ff       	call   c0105646 <mm_create>
+c010a83e:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c010a841:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
+c010a845:	0f 84 97 05 00 00    	je     c010ade2 <load_icode+0x5d9>
+        goto bad_mm;
+    }
+    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
+    if (setup_pgdir(mm) != 0) {
+c010a84b:	83 ec 0c             	sub    $0xc,%esp
+c010a84e:	ff 75 d0             	pushl  -0x30(%ebp)
+c010a851:	e8 07 fa ff ff       	call   c010a25d <setup_pgdir>
+c010a856:	83 c4 10             	add    $0x10,%esp
+c010a859:	85 c0                	test   %eax,%eax
+c010a85b:	0f 85 70 05 00 00    	jne    c010add1 <load_icode+0x5c8>
+        goto bad_pgdir_cleanup_mm;
+    }
+    //(3) copy TEXT/DATA section, build BSS parts in binary to memory space of process
+    struct Page *page;
+    //(3.1) get the file header of the bianry program (ELF format)
+    struct elfhdr *elf = (struct elfhdr *)binary;
+c010a861:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a864:	89 45 cc             	mov    %eax,-0x34(%ebp)
+    //(3.2) get the entry of the program section headers of the bianry program (ELF format)
+    struct proghdr *ph = (struct proghdr *)(binary + elf->e_phoff);
+c010a867:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010a86a:	8b 50 1c             	mov    0x1c(%eax),%edx
+c010a86d:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a870:	01 d0                	add    %edx,%eax
+c010a872:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    //(3.3) This program is valid?
+    if (elf->e_magic != ELF_MAGIC) {
+c010a875:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010a878:	8b 00                	mov    (%eax),%eax
+c010a87a:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
+c010a87f:	74 0c                	je     c010a88d <load_icode+0x84>
+        ret = -E_INVAL_ELF;
+c010a881:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
+        goto bad_elf_cleanup_pgdir;
+c010a888:	e9 34 05 00 00       	jmp    c010adc1 <load_icode+0x5b8>
+    }
+
+    uint32_t vm_flags, perm;
+    struct proghdr *ph_end = ph + elf->e_phnum;
+c010a88d:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010a890:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
+c010a894:	0f b7 c0             	movzwl %ax,%eax
+c010a897:	c1 e0 05             	shl    $0x5,%eax
+c010a89a:	89 c2                	mov    %eax,%edx
+c010a89c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a89f:	01 d0                	add    %edx,%eax
+c010a8a1:	89 45 c8             	mov    %eax,-0x38(%ebp)
+    for (; ph < ph_end; ph ++) {
+c010a8a4:	e9 e0 02 00 00       	jmp    c010ab89 <load_icode+0x380>
+    //(3.4) find every program section headers
+        if (ph->p_type != ELF_PT_LOAD) {
+c010a8a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a8ac:	8b 00                	mov    (%eax),%eax
+c010a8ae:	83 f8 01             	cmp    $0x1,%eax
+c010a8b1:	0f 85 c7 02 00 00    	jne    c010ab7e <load_icode+0x375>
+            continue ;
+        }
+        if (ph->p_filesz > ph->p_memsz) {
+c010a8b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a8ba:	8b 50 10             	mov    0x10(%eax),%edx
+c010a8bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a8c0:	8b 40 14             	mov    0x14(%eax),%eax
+c010a8c3:	39 c2                	cmp    %eax,%edx
+c010a8c5:	76 0c                	jbe    c010a8d3 <load_icode+0xca>
+            ret = -E_INVAL_ELF;
+c010a8c7:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
+            goto bad_cleanup_mmap;
+c010a8ce:	e9 e0 04 00 00       	jmp    c010adb3 <load_icode+0x5aa>
+        }
+        if (ph->p_filesz == 0) {
+c010a8d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a8d6:	8b 40 10             	mov    0x10(%eax),%eax
+c010a8d9:	85 c0                	test   %eax,%eax
+c010a8db:	0f 84 a0 02 00 00    	je     c010ab81 <load_icode+0x378>
+            continue ;
+        }
+    //(3.5) call mm_map fun to setup the new vma ( ph->p_va, ph->p_memsz)
+        vm_flags = 0, perm = PTE_U;
+c010a8e1:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+c010a8e8:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%ebp)
+        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
+c010a8ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a8f2:	8b 40 18             	mov    0x18(%eax),%eax
+c010a8f5:	83 e0 01             	and    $0x1,%eax
+c010a8f8:	85 c0                	test   %eax,%eax
+c010a8fa:	74 04                	je     c010a900 <load_icode+0xf7>
+c010a8fc:	83 4d e8 04          	orl    $0x4,-0x18(%ebp)
+        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
+c010a900:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a903:	8b 40 18             	mov    0x18(%eax),%eax
+c010a906:	83 e0 02             	and    $0x2,%eax
+c010a909:	85 c0                	test   %eax,%eax
+c010a90b:	74 04                	je     c010a911 <load_icode+0x108>
+c010a90d:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
+        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
+c010a911:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a914:	8b 40 18             	mov    0x18(%eax),%eax
+c010a917:	83 e0 04             	and    $0x4,%eax
+c010a91a:	85 c0                	test   %eax,%eax
+c010a91c:	74 04                	je     c010a922 <load_icode+0x119>
+c010a91e:	83 4d e8 01          	orl    $0x1,-0x18(%ebp)
+        if (vm_flags & VM_WRITE) perm |= PTE_W;
+c010a922:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010a925:	83 e0 02             	and    $0x2,%eax
+c010a928:	85 c0                	test   %eax,%eax
+c010a92a:	74 04                	je     c010a930 <load_icode+0x127>
+c010a92c:	83 4d e4 02          	orl    $0x2,-0x1c(%ebp)
+        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
+c010a930:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a933:	8b 50 14             	mov    0x14(%eax),%edx
+c010a936:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a939:	8b 40 08             	mov    0x8(%eax),%eax
+c010a93c:	83 ec 0c             	sub    $0xc,%esp
+c010a93f:	6a 00                	push   $0x0
+c010a941:	ff 75 e8             	pushl  -0x18(%ebp)
+c010a944:	52                   	push   %edx
+c010a945:	50                   	push   %eax
+c010a946:	ff 75 d0             	pushl  -0x30(%ebp)
+c010a949:	e8 c3 b0 ff ff       	call   c0105a11 <mm_map>
+c010a94e:	83 c4 20             	add    $0x20,%esp
+c010a951:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010a954:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010a958:	0f 85 4b 04 00 00    	jne    c010ada9 <load_icode+0x5a0>
+            goto bad_cleanup_mmap;
+        }
+        unsigned char *from = binary + ph->p_offset;
+c010a95e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a961:	8b 50 04             	mov    0x4(%eax),%edx
+c010a964:	8b 45 08             	mov    0x8(%ebp),%eax
+c010a967:	01 d0                	add    %edx,%eax
+c010a969:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        size_t off, size;
+        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
+c010a96c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a96f:	8b 40 08             	mov    0x8(%eax),%eax
+c010a972:	89 45 d8             	mov    %eax,-0x28(%ebp)
+c010a975:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010a978:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+c010a97b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+c010a97e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+c010a983:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+
+        ret = -E_NO_MEM;
+c010a986:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
+
+     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
+        end = ph->p_va + ph->p_filesz;
+c010a98d:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a990:	8b 50 08             	mov    0x8(%eax),%edx
+c010a993:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010a996:	8b 40 10             	mov    0x10(%eax),%eax
+c010a999:	01 d0                	add    %edx,%eax
+c010a99b:	89 45 c0             	mov    %eax,-0x40(%ebp)
+     //(3.6.1) copy TEXT/DATA section of bianry program
+        while (start < end) {
+c010a99e:	e9 84 00 00 00       	jmp    c010aa27 <load_icode+0x21e>
+            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
+c010a9a3:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010a9a6:	8b 40 0c             	mov    0xc(%eax),%eax
+c010a9a9:	83 ec 04             	sub    $0x4,%esp
+c010a9ac:	ff 75 e4             	pushl  -0x1c(%ebp)
+c010a9af:	ff 75 d4             	pushl  -0x2c(%ebp)
+c010a9b2:	50                   	push   %eax
+c010a9b3:	e8 5e 9c ff ff       	call   c0104616 <pgdir_alloc_page>
+c010a9b8:	83 c4 10             	add    $0x10,%esp
+c010a9bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010a9be:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010a9c2:	0f 84 e4 03 00 00    	je     c010adac <load_icode+0x5a3>
+                goto bad_cleanup_mmap;
+            }
+            off = start - la, size = PGSIZE - off, la += PGSIZE;
+c010a9c8:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010a9cb:	2b 45 d4             	sub    -0x2c(%ebp),%eax
+c010a9ce:	89 45 bc             	mov    %eax,-0x44(%ebp)
+c010a9d1:	b8 00 10 00 00       	mov    $0x1000,%eax
+c010a9d6:	2b 45 bc             	sub    -0x44(%ebp),%eax
+c010a9d9:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c010a9dc:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
+            if (end < la) {
+c010a9e3:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c010a9e6:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c010a9e9:	73 09                	jae    c010a9f4 <load_icode+0x1eb>
+                size -= la - end;
+c010a9eb:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c010a9ee:	2b 45 d4             	sub    -0x2c(%ebp),%eax
+c010a9f1:	01 45 dc             	add    %eax,-0x24(%ebp)
+            }
+            memcpy(page2kva(page) + off, from, size);
+c010a9f4:	83 ec 0c             	sub    $0xc,%esp
+c010a9f7:	ff 75 f0             	pushl  -0x10(%ebp)
+c010a9fa:	e8 46 f0 ff ff       	call   c0109a45 <page2kva>
+c010a9ff:	83 c4 10             	add    $0x10,%esp
+c010aa02:	89 c2                	mov    %eax,%edx
+c010aa04:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c010aa07:	01 d0                	add    %edx,%eax
+c010aa09:	83 ec 04             	sub    $0x4,%esp
+c010aa0c:	ff 75 dc             	pushl  -0x24(%ebp)
+c010aa0f:	ff 75 e0             	pushl  -0x20(%ebp)
+c010aa12:	50                   	push   %eax
+c010aa13:	e8 b3 1a 00 00       	call   c010c4cb <memcpy>
+c010aa18:	83 c4 10             	add    $0x10,%esp
+            start += size, from += size;
+c010aa1b:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010aa1e:	01 45 d8             	add    %eax,-0x28(%ebp)
+c010aa21:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010aa24:	01 45 e0             	add    %eax,-0x20(%ebp)
+        ret = -E_NO_MEM;
+
+     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
+        end = ph->p_va + ph->p_filesz;
+     //(3.6.1) copy TEXT/DATA section of bianry program
+        while (start < end) {
+c010aa27:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010aa2a:	3b 45 c0             	cmp    -0x40(%ebp),%eax
+c010aa2d:	0f 82 70 ff ff ff    	jb     c010a9a3 <load_icode+0x19a>
+            memcpy(page2kva(page) + off, from, size);
+            start += size, from += size;
+        }
+
+      //(3.6.2) build BSS section of binary program
+        end = ph->p_va + ph->p_memsz;
+c010aa33:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010aa36:	8b 50 08             	mov    0x8(%eax),%edx
+c010aa39:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010aa3c:	8b 40 14             	mov    0x14(%eax),%eax
+c010aa3f:	01 d0                	add    %edx,%eax
+c010aa41:	89 45 c0             	mov    %eax,-0x40(%ebp)
+        if (start < la) {
+c010aa44:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010aa47:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c010aa4a:	0f 83 20 01 00 00    	jae    c010ab70 <load_icode+0x367>
+            /* ph->p_memsz == ph->p_filesz */
+            if (start == end) {
+c010aa50:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010aa53:	3b 45 c0             	cmp    -0x40(%ebp),%eax
+c010aa56:	0f 84 28 01 00 00    	je     c010ab84 <load_icode+0x37b>
+                continue ;
+            }
+            off = start + PGSIZE - la, size = PGSIZE - off;
+c010aa5c:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010aa5f:	2b 45 d4             	sub    -0x2c(%ebp),%eax
+c010aa62:	05 00 10 00 00       	add    $0x1000,%eax
+c010aa67:	89 45 bc             	mov    %eax,-0x44(%ebp)
+c010aa6a:	b8 00 10 00 00       	mov    $0x1000,%eax
+c010aa6f:	2b 45 bc             	sub    -0x44(%ebp),%eax
+c010aa72:	89 45 dc             	mov    %eax,-0x24(%ebp)
+            if (end < la) {
+c010aa75:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c010aa78:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c010aa7b:	73 09                	jae    c010aa86 <load_icode+0x27d>
+                size -= la - end;
+c010aa7d:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c010aa80:	2b 45 d4             	sub    -0x2c(%ebp),%eax
+c010aa83:	01 45 dc             	add    %eax,-0x24(%ebp)
+            }
+            memset(page2kva(page) + off, 0, size);
+c010aa86:	83 ec 0c             	sub    $0xc,%esp
+c010aa89:	ff 75 f0             	pushl  -0x10(%ebp)
+c010aa8c:	e8 b4 ef ff ff       	call   c0109a45 <page2kva>
+c010aa91:	83 c4 10             	add    $0x10,%esp
+c010aa94:	89 c2                	mov    %eax,%edx
+c010aa96:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c010aa99:	01 d0                	add    %edx,%eax
+c010aa9b:	83 ec 04             	sub    $0x4,%esp
+c010aa9e:	ff 75 dc             	pushl  -0x24(%ebp)
+c010aaa1:	6a 00                	push   $0x0
+c010aaa3:	50                   	push   %eax
+c010aaa4:	e8 3f 19 00 00       	call   c010c3e8 <memset>
+c010aaa9:	83 c4 10             	add    $0x10,%esp
+            start += size;
+c010aaac:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010aaaf:	01 45 d8             	add    %eax,-0x28(%ebp)
+            assert((end < la && start == end) || (end >= la && start == la));
+c010aab2:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c010aab5:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c010aab8:	73 0c                	jae    c010aac6 <load_icode+0x2bd>
+c010aaba:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010aabd:	3b 45 c0             	cmp    -0x40(%ebp),%eax
+c010aac0:	0f 84 aa 00 00 00    	je     c010ab70 <load_icode+0x367>
+c010aac6:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c010aac9:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c010aacc:	72 0c                	jb     c010aada <load_icode+0x2d1>
+c010aace:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010aad1:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c010aad4:	0f 84 96 00 00 00    	je     c010ab70 <load_icode+0x367>
+c010aada:	68 dc f1 10 c0       	push   $0xc010f1dc
+c010aadf:	68 5d f1 10 c0       	push   $0xc010f15d
+c010aae4:	68 64 02 00 00       	push   $0x264
+c010aae9:	68 30 f1 10 c0       	push   $0xc010f130
+c010aaee:	e8 01 59 ff ff       	call   c01003f4 <__panic>
+        }
+        while (start < end) {
+            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
+c010aaf3:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010aaf6:	8b 40 0c             	mov    0xc(%eax),%eax
+c010aaf9:	83 ec 04             	sub    $0x4,%esp
+c010aafc:	ff 75 e4             	pushl  -0x1c(%ebp)
+c010aaff:	ff 75 d4             	pushl  -0x2c(%ebp)
+c010ab02:	50                   	push   %eax
+c010ab03:	e8 0e 9b ff ff       	call   c0104616 <pgdir_alloc_page>
+c010ab08:	83 c4 10             	add    $0x10,%esp
+c010ab0b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010ab0e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010ab12:	0f 84 97 02 00 00    	je     c010adaf <load_icode+0x5a6>
+                goto bad_cleanup_mmap;
+            }
+            off = start - la, size = PGSIZE - off, la += PGSIZE;
+c010ab18:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010ab1b:	2b 45 d4             	sub    -0x2c(%ebp),%eax
+c010ab1e:	89 45 bc             	mov    %eax,-0x44(%ebp)
+c010ab21:	b8 00 10 00 00       	mov    $0x1000,%eax
+c010ab26:	2b 45 bc             	sub    -0x44(%ebp),%eax
+c010ab29:	89 45 dc             	mov    %eax,-0x24(%ebp)
+c010ab2c:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
+            if (end < la) {
+c010ab33:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c010ab36:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
+c010ab39:	73 09                	jae    c010ab44 <load_icode+0x33b>
+                size -= la - end;
+c010ab3b:	8b 45 c0             	mov    -0x40(%ebp),%eax
+c010ab3e:	2b 45 d4             	sub    -0x2c(%ebp),%eax
+c010ab41:	01 45 dc             	add    %eax,-0x24(%ebp)
+            }
+            memset(page2kva(page) + off, 0, size);
+c010ab44:	83 ec 0c             	sub    $0xc,%esp
+c010ab47:	ff 75 f0             	pushl  -0x10(%ebp)
+c010ab4a:	e8 f6 ee ff ff       	call   c0109a45 <page2kva>
+c010ab4f:	83 c4 10             	add    $0x10,%esp
+c010ab52:	89 c2                	mov    %eax,%edx
+c010ab54:	8b 45 bc             	mov    -0x44(%ebp),%eax
+c010ab57:	01 d0                	add    %edx,%eax
+c010ab59:	83 ec 04             	sub    $0x4,%esp
+c010ab5c:	ff 75 dc             	pushl  -0x24(%ebp)
+c010ab5f:	6a 00                	push   $0x0
+c010ab61:	50                   	push   %eax
+c010ab62:	e8 81 18 00 00       	call   c010c3e8 <memset>
+c010ab67:	83 c4 10             	add    $0x10,%esp
+            start += size;
+c010ab6a:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010ab6d:	01 45 d8             	add    %eax,-0x28(%ebp)
+            }
+            memset(page2kva(page) + off, 0, size);
+            start += size;
+            assert((end < la && start == end) || (end >= la && start == la));
+        }
+        while (start < end) {
+c010ab70:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010ab73:	3b 45 c0             	cmp    -0x40(%ebp),%eax
+c010ab76:	0f 82 77 ff ff ff    	jb     c010aaf3 <load_icode+0x2ea>
+c010ab7c:	eb 07                	jmp    c010ab85 <load_icode+0x37c>
+    uint32_t vm_flags, perm;
+    struct proghdr *ph_end = ph + elf->e_phnum;
+    for (; ph < ph_end; ph ++) {
+    //(3.4) find every program section headers
+        if (ph->p_type != ELF_PT_LOAD) {
+            continue ;
+c010ab7e:	90                   	nop
+c010ab7f:	eb 04                	jmp    c010ab85 <load_icode+0x37c>
+        if (ph->p_filesz > ph->p_memsz) {
+            ret = -E_INVAL_ELF;
+            goto bad_cleanup_mmap;
+        }
+        if (ph->p_filesz == 0) {
+            continue ;
+c010ab81:	90                   	nop
+c010ab82:	eb 01                	jmp    c010ab85 <load_icode+0x37c>
+      //(3.6.2) build BSS section of binary program
+        end = ph->p_va + ph->p_memsz;
+        if (start < la) {
+            /* ph->p_memsz == ph->p_filesz */
+            if (start == end) {
+                continue ;
+c010ab84:	90                   	nop
+        goto bad_elf_cleanup_pgdir;
+    }
+
+    uint32_t vm_flags, perm;
+    struct proghdr *ph_end = ph + elf->e_phnum;
+    for (; ph < ph_end; ph ++) {
+c010ab85:	83 45 ec 20          	addl   $0x20,-0x14(%ebp)
+c010ab89:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010ab8c:	3b 45 c8             	cmp    -0x38(%ebp),%eax
+c010ab8f:	0f 82 14 fd ff ff    	jb     c010a8a9 <load_icode+0xa0>
+            memset(page2kva(page) + off, 0, size);
+            start += size;
+        }
+    }
+    //(4) build user stack memory
+    vm_flags = VM_READ | VM_WRITE | VM_STACK;
+c010ab95:	c7 45 e8 0b 00 00 00 	movl   $0xb,-0x18(%ebp)
+    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
+c010ab9c:	83 ec 0c             	sub    $0xc,%esp
+c010ab9f:	6a 00                	push   $0x0
+c010aba1:	ff 75 e8             	pushl  -0x18(%ebp)
+c010aba4:	68 00 00 10 00       	push   $0x100000
+c010aba9:	68 00 00 f0 af       	push   $0xaff00000
+c010abae:	ff 75 d0             	pushl  -0x30(%ebp)
+c010abb1:	e8 5b ae ff ff       	call   c0105a11 <mm_map>
+c010abb6:	83 c4 20             	add    $0x20,%esp
+c010abb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010abbc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010abc0:	0f 85 ec 01 00 00    	jne    c010adb2 <load_icode+0x5a9>
+        goto bad_cleanup_mmap;
+    }
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
+c010abc6:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010abc9:	8b 40 0c             	mov    0xc(%eax),%eax
+c010abcc:	83 ec 04             	sub    $0x4,%esp
+c010abcf:	6a 07                	push   $0x7
+c010abd1:	68 00 f0 ff af       	push   $0xaffff000
+c010abd6:	50                   	push   %eax
+c010abd7:	e8 3a 9a ff ff       	call   c0104616 <pgdir_alloc_page>
+c010abdc:	83 c4 10             	add    $0x10,%esp
+c010abdf:	85 c0                	test   %eax,%eax
+c010abe1:	75 19                	jne    c010abfc <load_icode+0x3f3>
+c010abe3:	68 18 f2 10 c0       	push   $0xc010f218
+c010abe8:	68 5d f1 10 c0       	push   $0xc010f15d
+c010abed:	68 77 02 00 00       	push   $0x277
+c010abf2:	68 30 f1 10 c0       	push   $0xc010f130
+c010abf7:	e8 f8 57 ff ff       	call   c01003f4 <__panic>
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
+c010abfc:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010abff:	8b 40 0c             	mov    0xc(%eax),%eax
+c010ac02:	83 ec 04             	sub    $0x4,%esp
+c010ac05:	6a 07                	push   $0x7
+c010ac07:	68 00 e0 ff af       	push   $0xafffe000
+c010ac0c:	50                   	push   %eax
+c010ac0d:	e8 04 9a ff ff       	call   c0104616 <pgdir_alloc_page>
+c010ac12:	83 c4 10             	add    $0x10,%esp
+c010ac15:	85 c0                	test   %eax,%eax
+c010ac17:	75 19                	jne    c010ac32 <load_icode+0x429>
+c010ac19:	68 5c f2 10 c0       	push   $0xc010f25c
+c010ac1e:	68 5d f1 10 c0       	push   $0xc010f15d
+c010ac23:	68 78 02 00 00       	push   $0x278
+c010ac28:	68 30 f1 10 c0       	push   $0xc010f130
+c010ac2d:	e8 c2 57 ff ff       	call   c01003f4 <__panic>
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
+c010ac32:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010ac35:	8b 40 0c             	mov    0xc(%eax),%eax
+c010ac38:	83 ec 04             	sub    $0x4,%esp
+c010ac3b:	6a 07                	push   $0x7
+c010ac3d:	68 00 d0 ff af       	push   $0xafffd000
+c010ac42:	50                   	push   %eax
+c010ac43:	e8 ce 99 ff ff       	call   c0104616 <pgdir_alloc_page>
+c010ac48:	83 c4 10             	add    $0x10,%esp
+c010ac4b:	85 c0                	test   %eax,%eax
+c010ac4d:	75 19                	jne    c010ac68 <load_icode+0x45f>
+c010ac4f:	68 a0 f2 10 c0       	push   $0xc010f2a0
+c010ac54:	68 5d f1 10 c0       	push   $0xc010f15d
+c010ac59:	68 79 02 00 00       	push   $0x279
+c010ac5e:	68 30 f1 10 c0       	push   $0xc010f130
+c010ac63:	e8 8c 57 ff ff       	call   c01003f4 <__panic>
+    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
+c010ac68:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010ac6b:	8b 40 0c             	mov    0xc(%eax),%eax
+c010ac6e:	83 ec 04             	sub    $0x4,%esp
+c010ac71:	6a 07                	push   $0x7
+c010ac73:	68 00 c0 ff af       	push   $0xafffc000
+c010ac78:	50                   	push   %eax
+c010ac79:	e8 98 99 ff ff       	call   c0104616 <pgdir_alloc_page>
+c010ac7e:	83 c4 10             	add    $0x10,%esp
+c010ac81:	85 c0                	test   %eax,%eax
+c010ac83:	75 19                	jne    c010ac9e <load_icode+0x495>
+c010ac85:	68 e4 f2 10 c0       	push   $0xc010f2e4
+c010ac8a:	68 5d f1 10 c0       	push   $0xc010f15d
+c010ac8f:	68 7a 02 00 00       	push   $0x27a
+c010ac94:	68 30 f1 10 c0       	push   $0xc010f130
+c010ac99:	e8 56 57 ff ff       	call   c01003f4 <__panic>
+    
+    //(5) set current process's mm, sr3, and set CR3 reg = physical addr of Page Directory
+    mm_count_inc(mm);
+c010ac9e:	83 ec 0c             	sub    $0xc,%esp
+c010aca1:	ff 75 d0             	pushl  -0x30(%ebp)
+c010aca4:	e8 20 ee ff ff       	call   c0109ac9 <mm_count_inc>
+c010aca9:	83 c4 10             	add    $0x10,%esp
+    current->mm = mm;
+c010acac:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010acb1:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c010acb4:	89 50 18             	mov    %edx,0x18(%eax)
+    current->cr3 = PADDR(mm->pgdir);
+c010acb7:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010acbc:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c010acbf:	8b 52 0c             	mov    0xc(%edx),%edx
+c010acc2:	89 55 b8             	mov    %edx,-0x48(%ebp)
+c010acc5:	81 7d b8 ff ff ff bf 	cmpl   $0xbfffffff,-0x48(%ebp)
+c010accc:	77 17                	ja     c010ace5 <load_icode+0x4dc>
+c010acce:	ff 75 b8             	pushl  -0x48(%ebp)
+c010acd1:	68 0c f1 10 c0       	push   $0xc010f10c
+c010acd6:	68 7f 02 00 00       	push   $0x27f
+c010acdb:	68 30 f1 10 c0       	push   $0xc010f130
+c010ace0:	e8 0f 57 ff ff       	call   c01003f4 <__panic>
+c010ace5:	8b 55 b8             	mov    -0x48(%ebp),%edx
+c010ace8:	81 c2 00 00 00 40    	add    $0x40000000,%edx
+c010acee:	89 50 40             	mov    %edx,0x40(%eax)
+    lcr3(PADDR(mm->pgdir));
+c010acf1:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010acf4:	8b 40 0c             	mov    0xc(%eax),%eax
+c010acf7:	89 45 b4             	mov    %eax,-0x4c(%ebp)
+c010acfa:	81 7d b4 ff ff ff bf 	cmpl   $0xbfffffff,-0x4c(%ebp)
+c010ad01:	77 17                	ja     c010ad1a <load_icode+0x511>
+c010ad03:	ff 75 b4             	pushl  -0x4c(%ebp)
+c010ad06:	68 0c f1 10 c0       	push   $0xc010f10c
+c010ad0b:	68 80 02 00 00       	push   $0x280
+c010ad10:	68 30 f1 10 c0       	push   $0xc010f130
+c010ad15:	e8 da 56 ff ff       	call   c01003f4 <__panic>
+c010ad1a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+c010ad1d:	05 00 00 00 40       	add    $0x40000000,%eax
+c010ad22:	89 45 ac             	mov    %eax,-0x54(%ebp)
+c010ad25:	8b 45 ac             	mov    -0x54(%ebp),%eax
+c010ad28:	0f 22 d8             	mov    %eax,%cr3
+
+    //(6) setup trapframe for user environment
+    struct trapframe *tf = current->tf;
+c010ad2b:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010ad30:	8b 40 3c             	mov    0x3c(%eax),%eax
+c010ad33:	89 45 b0             	mov    %eax,-0x50(%ebp)
+    memset(tf, 0, sizeof(struct trapframe));
+c010ad36:	83 ec 04             	sub    $0x4,%esp
+c010ad39:	6a 4c                	push   $0x4c
+c010ad3b:	6a 00                	push   $0x0
+c010ad3d:	ff 75 b0             	pushl  -0x50(%ebp)
+c010ad40:	e8 a3 16 00 00       	call   c010c3e8 <memset>
+c010ad45:	83 c4 10             	add    $0x10,%esp
+     *          tf_ds=tf_es=tf_ss should be USER_DS segment
+     *          tf_esp should be the top addr of user stack (USTACKTOP)
+     *          tf_eip should be the entry point of this binary program (elf->e_entry)
+     *          tf_eflags should be set to enable computer to produce Interrupt
+     */
+    tf->tf_cs = USER_CS;
+c010ad48:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010ad4b:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
+    tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
+c010ad51:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010ad54:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
+c010ad5a:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010ad5d:	0f b7 50 48          	movzwl 0x48(%eax),%edx
+c010ad61:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010ad64:	66 89 50 28          	mov    %dx,0x28(%eax)
+c010ad68:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010ad6b:	0f b7 50 28          	movzwl 0x28(%eax),%edx
+c010ad6f:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010ad72:	66 89 50 2c          	mov    %dx,0x2c(%eax)
+    tf->tf_esp = USTACKTOP;
+c010ad76:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010ad79:	c7 40 44 00 00 00 b0 	movl   $0xb0000000,0x44(%eax)
+    tf->tf_eip = elf->e_entry;
+c010ad80:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010ad83:	8b 50 18             	mov    0x18(%eax),%edx
+c010ad86:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010ad89:	89 50 38             	mov    %edx,0x38(%eax)
+    tf->tf_eflags |= FL_IF;
+c010ad8c:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010ad8f:	8b 40 40             	mov    0x40(%eax),%eax
+c010ad92:	80 cc 02             	or     $0x2,%ah
+c010ad95:	89 c2                	mov    %eax,%edx
+c010ad97:	8b 45 b0             	mov    -0x50(%ebp),%eax
+c010ad9a:	89 50 40             	mov    %edx,0x40(%eax)
+    ret = 0;
+c010ad9d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+out:
+    return ret;
+c010ada4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010ada7:	eb 3c                	jmp    c010ade5 <load_icode+0x5dc>
+        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
+        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
+        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
+        if (vm_flags & VM_WRITE) perm |= PTE_W;
+        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
+            goto bad_cleanup_mmap;
+c010ada9:	90                   	nop
+c010adaa:	eb 07                	jmp    c010adb3 <load_icode+0x5aa>
+     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
+        end = ph->p_va + ph->p_filesz;
+     //(3.6.1) copy TEXT/DATA section of bianry program
+        while (start < end) {
+            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
+                goto bad_cleanup_mmap;
+c010adac:	90                   	nop
+c010adad:	eb 04                	jmp    c010adb3 <load_icode+0x5aa>
+            start += size;
+            assert((end < la && start == end) || (end >= la && start == la));
+        }
+        while (start < end) {
+            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
+                goto bad_cleanup_mmap;
+c010adaf:	90                   	nop
+c010adb0:	eb 01                	jmp    c010adb3 <load_icode+0x5aa>
+        }
+    }
+    //(4) build user stack memory
+    vm_flags = VM_READ | VM_WRITE | VM_STACK;
+    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
+        goto bad_cleanup_mmap;
+c010adb2:	90                   	nop
+    tf->tf_eflags |= FL_IF;
+    ret = 0;
+out:
+    return ret;
+bad_cleanup_mmap:
+    exit_mmap(mm);
+c010adb3:	83 ec 0c             	sub    $0xc,%esp
+c010adb6:	ff 75 d0             	pushl  -0x30(%ebp)
+c010adb9:	e8 42 ae ff ff       	call   c0105c00 <exit_mmap>
+c010adbe:	83 c4 10             	add    $0x10,%esp
+bad_elf_cleanup_pgdir:
+    put_pgdir(mm);
+c010adc1:	83 ec 0c             	sub    $0xc,%esp
+c010adc4:	ff 75 d0             	pushl  -0x30(%ebp)
+c010adc7:	e8 2a f5 ff ff       	call   c010a2f6 <put_pgdir>
+c010adcc:	83 c4 10             	add    $0x10,%esp
+c010adcf:	eb 01                	jmp    c010add2 <load_icode+0x5c9>
+    if ((mm = mm_create()) == NULL) {
+        goto bad_mm;
+    }
+    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
+    if (setup_pgdir(mm) != 0) {
+        goto bad_pgdir_cleanup_mm;
+c010add1:	90                   	nop
+bad_cleanup_mmap:
+    exit_mmap(mm);
+bad_elf_cleanup_pgdir:
+    put_pgdir(mm);
+bad_pgdir_cleanup_mm:
+    mm_destroy(mm);
+c010add2:	83 ec 0c             	sub    $0xc,%esp
+c010add5:	ff 75 d0             	pushl  -0x30(%ebp)
+c010add8:	e8 95 ab ff ff       	call   c0105972 <mm_destroy>
+c010addd:	83 c4 10             	add    $0x10,%esp
+bad_mm:
+    goto out;
+c010ade0:	eb c2                	jmp    c010ada4 <load_icode+0x59b>
+
+    int ret = -E_NO_MEM;
+    struct mm_struct *mm;
+    //(1) create a new mm for current process
+    if ((mm = mm_create()) == NULL) {
+        goto bad_mm;
+c010ade2:	90                   	nop
+bad_elf_cleanup_pgdir:
+    put_pgdir(mm);
+bad_pgdir_cleanup_mm:
+    mm_destroy(mm);
+bad_mm:
+    goto out;
+c010ade3:	eb bf                	jmp    c010ada4 <load_icode+0x59b>
+}
+c010ade5:	c9                   	leave  
+c010ade6:	c3                   	ret    
+
+c010ade7 <do_execve>:
+
+// do_execve - call exit_mmap(mm)&put_pgdir(mm) to reclaim memory space of current process
+//           - call load_icode to setup new memory space accroding binary prog.
+int
+do_execve(const char *name, size_t len, unsigned char *binary, size_t size) {
+c010ade7:	55                   	push   %ebp
+c010ade8:	89 e5                	mov    %esp,%ebp
+c010adea:	83 ec 48             	sub    $0x48,%esp
+    struct mm_struct *mm = current->mm;
+c010aded:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010adf2:	8b 40 18             	mov    0x18(%eax),%eax
+c010adf5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (!user_mem_check(mm, (uintptr_t)name, len, 0)) {
+c010adf8:	8b 45 08             	mov    0x8(%ebp),%eax
+c010adfb:	6a 00                	push   $0x0
+c010adfd:	ff 75 0c             	pushl  0xc(%ebp)
+c010ae00:	50                   	push   %eax
+c010ae01:	ff 75 f4             	pushl  -0xc(%ebp)
+c010ae04:	e8 4b b7 ff ff       	call   c0106554 <user_mem_check>
+c010ae09:	83 c4 10             	add    $0x10,%esp
+c010ae0c:	85 c0                	test   %eax,%eax
+c010ae0e:	75 0a                	jne    c010ae1a <do_execve+0x33>
+        return -E_INVAL;
+c010ae10:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+c010ae15:	e9 ed 00 00 00       	jmp    c010af07 <do_execve+0x120>
+    }
+    if (len > PROC_NAME_LEN) {
+c010ae1a:	83 7d 0c 32          	cmpl   $0x32,0xc(%ebp)
+c010ae1e:	76 07                	jbe    c010ae27 <do_execve+0x40>
+        len = PROC_NAME_LEN;
+c010ae20:	c7 45 0c 32 00 00 00 	movl   $0x32,0xc(%ebp)
+    }
+
+    char local_name[PROC_NAME_LEN + 1];
+    memset(local_name, 0, sizeof(local_name));
+c010ae27:	83 ec 04             	sub    $0x4,%esp
+c010ae2a:	6a 33                	push   $0x33
+c010ae2c:	6a 00                	push   $0x0
+c010ae2e:	8d 45 b9             	lea    -0x47(%ebp),%eax
+c010ae31:	50                   	push   %eax
+c010ae32:	e8 b1 15 00 00       	call   c010c3e8 <memset>
+c010ae37:	83 c4 10             	add    $0x10,%esp
+    memcpy(local_name, name, len);
+c010ae3a:	83 ec 04             	sub    $0x4,%esp
+c010ae3d:	ff 75 0c             	pushl  0xc(%ebp)
+c010ae40:	ff 75 08             	pushl  0x8(%ebp)
+c010ae43:	8d 45 b9             	lea    -0x47(%ebp),%eax
+c010ae46:	50                   	push   %eax
+c010ae47:	e8 7f 16 00 00       	call   c010c4cb <memcpy>
+c010ae4c:	83 c4 10             	add    $0x10,%esp
+
+    if (mm != NULL) {
+c010ae4f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010ae53:	74 56                	je     c010aeab <do_execve+0xc4>
+        lcr3(boot_cr3);
+c010ae55:	a1 a0 53 1c c0       	mov    0xc01c53a0,%eax
+c010ae5a:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010ae5d:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010ae60:	0f 22 d8             	mov    %eax,%cr3
+        if (mm_count_dec(mm) == 0) {
+c010ae63:	83 ec 0c             	sub    $0xc,%esp
+c010ae66:	ff 75 f4             	pushl  -0xc(%ebp)
+c010ae69:	e8 75 ec ff ff       	call   c0109ae3 <mm_count_dec>
+c010ae6e:	83 c4 10             	add    $0x10,%esp
+c010ae71:	85 c0                	test   %eax,%eax
+c010ae73:	75 2a                	jne    c010ae9f <do_execve+0xb8>
+            exit_mmap(mm);
+c010ae75:	83 ec 0c             	sub    $0xc,%esp
+c010ae78:	ff 75 f4             	pushl  -0xc(%ebp)
+c010ae7b:	e8 80 ad ff ff       	call   c0105c00 <exit_mmap>
+c010ae80:	83 c4 10             	add    $0x10,%esp
+            put_pgdir(mm);
+c010ae83:	83 ec 0c             	sub    $0xc,%esp
+c010ae86:	ff 75 f4             	pushl  -0xc(%ebp)
+c010ae89:	e8 68 f4 ff ff       	call   c010a2f6 <put_pgdir>
+c010ae8e:	83 c4 10             	add    $0x10,%esp
+            mm_destroy(mm);
+c010ae91:	83 ec 0c             	sub    $0xc,%esp
+c010ae94:	ff 75 f4             	pushl  -0xc(%ebp)
+c010ae97:	e8 d6 aa ff ff       	call   c0105972 <mm_destroy>
+c010ae9c:	83 c4 10             	add    $0x10,%esp
+        }
+        current->mm = NULL;
+c010ae9f:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010aea4:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
+    }
+    int ret;
+    if ((ret = load_icode(binary, size)) != 0) {
+c010aeab:	83 ec 08             	sub    $0x8,%esp
+c010aeae:	ff 75 14             	pushl  0x14(%ebp)
+c010aeb1:	ff 75 10             	pushl  0x10(%ebp)
+c010aeb4:	e8 50 f9 ff ff       	call   c010a809 <load_icode>
+c010aeb9:	83 c4 10             	add    $0x10,%esp
+c010aebc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010aebf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010aec3:	75 1c                	jne    c010aee1 <do_execve+0xfa>
+        goto execve_exit;
+    }
+    set_proc_name(current, local_name);
+c010aec5:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010aeca:	83 ec 08             	sub    $0x8,%esp
+c010aecd:	8d 55 b9             	lea    -0x47(%ebp),%edx
+c010aed0:	52                   	push   %edx
+c010aed1:	50                   	push   %eax
+c010aed2:	e8 39 ee ff ff       	call   c0109d10 <set_proc_name>
+c010aed7:	83 c4 10             	add    $0x10,%esp
+    return 0;
+c010aeda:	b8 00 00 00 00       	mov    $0x0,%eax
+c010aedf:	eb 26                	jmp    c010af07 <do_execve+0x120>
+        }
+        current->mm = NULL;
+    }
+    int ret;
+    if ((ret = load_icode(binary, size)) != 0) {
+        goto execve_exit;
+c010aee1:	90                   	nop
+    }
+    set_proc_name(current, local_name);
+    return 0;
+
+execve_exit:
+    do_exit(ret);
+c010aee2:	83 ec 0c             	sub    $0xc,%esp
+c010aee5:	ff 75 f0             	pushl  -0x10(%ebp)
+c010aee8:	e8 22 f7 ff ff       	call   c010a60f <do_exit>
+c010aeed:	83 c4 10             	add    $0x10,%esp
+    panic("already exit: %e.\n", ret);
+c010aef0:	ff 75 f0             	pushl  -0x10(%ebp)
+c010aef3:	68 27 f3 10 c0       	push   $0xc010f327
+c010aef8:	68 c2 02 00 00       	push   $0x2c2
+c010aefd:	68 30 f1 10 c0       	push   $0xc010f130
+c010af02:	e8 ed 54 ff ff       	call   c01003f4 <__panic>
+}
+c010af07:	c9                   	leave  
+c010af08:	c3                   	ret    
+
+c010af09 <do_yield>:
+
+// do_yield - ask the scheduler to reschedule
+int
+do_yield(void) {
+c010af09:	55                   	push   %ebp
+c010af0a:	89 e5                	mov    %esp,%ebp
+    current->need_resched = 1;
+c010af0c:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010af11:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
+    return 0;
+c010af18:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010af1d:	5d                   	pop    %ebp
+c010af1e:	c3                   	ret    
+
+c010af1f <do_wait>:
+
+// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
+//         - proc struct of this child.
+// NOTE: only after do_wait function, all resources of the child proces are free.
+int
+do_wait(int pid, int *code_store) {
+c010af1f:	55                   	push   %ebp
+c010af20:	89 e5                	mov    %esp,%ebp
+c010af22:	83 ec 18             	sub    $0x18,%esp
+    struct mm_struct *mm = current->mm;
+c010af25:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010af2a:	8b 40 18             	mov    0x18(%eax),%eax
+c010af2d:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    if (code_store != NULL) {
+c010af30:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c010af34:	74 21                	je     c010af57 <do_wait+0x38>
+        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
+c010af36:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010af39:	6a 01                	push   $0x1
+c010af3b:	6a 04                	push   $0x4
+c010af3d:	50                   	push   %eax
+c010af3e:	ff 75 ec             	pushl  -0x14(%ebp)
+c010af41:	e8 0e b6 ff ff       	call   c0106554 <user_mem_check>
+c010af46:	83 c4 10             	add    $0x10,%esp
+c010af49:	85 c0                	test   %eax,%eax
+c010af4b:	75 0a                	jne    c010af57 <do_wait+0x38>
+            return -E_INVAL;
+c010af4d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+c010af52:	e9 63 01 00 00       	jmp    c010b0ba <do_wait+0x19b>
+    }
+
+    struct proc_struct *proc;
+    bool intr_flag, haskid;
+repeat:
+    haskid = 0;
+c010af57:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    if (pid != 0) {
+c010af5e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010af62:	74 3c                	je     c010afa0 <do_wait+0x81>
+        proc = find_proc(pid);
+c010af64:	83 ec 0c             	sub    $0xc,%esp
+c010af67:	ff 75 08             	pushl  0x8(%ebp)
+c010af6a:	e8 ae f1 ff ff       	call   c010a11d <find_proc>
+c010af6f:	83 c4 10             	add    $0x10,%esp
+c010af72:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        if (proc != NULL && proc->parent == current) {
+c010af75:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010af79:	74 58                	je     c010afd3 <do_wait+0xb4>
+c010af7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010af7e:	8b 50 14             	mov    0x14(%eax),%edx
+c010af81:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010af86:	39 c2                	cmp    %eax,%edx
+c010af88:	75 49                	jne    c010afd3 <do_wait+0xb4>
+            haskid = 1;
+c010af8a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
+            if (proc->state == PROC_ZOMBIE) {
+c010af91:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010af94:	8b 00                	mov    (%eax),%eax
+c010af96:	83 f8 03             	cmp    $0x3,%eax
+c010af99:	75 38                	jne    c010afd3 <do_wait+0xb4>
+                goto found;
+c010af9b:	e9 88 00 00 00       	jmp    c010b028 <do_wait+0x109>
+            }
+        }
+    }
+    else {
+        proc = current->cptr;
+c010afa0:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010afa5:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
+c010afab:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        for (; proc != NULL; proc = proc->optr) {
+c010afae:	eb 1d                	jmp    c010afcd <do_wait+0xae>
+            haskid = 1;
+c010afb0:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
+            if (proc->state == PROC_ZOMBIE) {
+c010afb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010afba:	8b 00                	mov    (%eax),%eax
+c010afbc:	83 f8 03             	cmp    $0x3,%eax
+c010afbf:	74 66                	je     c010b027 <do_wait+0x108>
+            }
+        }
+    }
+    else {
+        proc = current->cptr;
+        for (; proc != NULL; proc = proc->optr) {
+c010afc1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010afc4:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
+c010afca:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010afcd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010afd1:	75 dd                	jne    c010afb0 <do_wait+0x91>
+            if (proc->state == PROC_ZOMBIE) {
+                goto found;
+            }
+        }
+    }
+    if (haskid) {
+c010afd3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010afd7:	74 44                	je     c010b01d <do_wait+0xfe>
+        current->state = PROC_SLEEPING;
+c010afd9:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010afde:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
+        current->wait_state = WT_CHILD;
+c010afe4:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010afe9:	c7 80 90 00 00 00 01 	movl   $0x80000001,0x90(%eax)
+c010aff0:	00 00 80 
+        schedule();
+c010aff3:	e8 71 07 00 00       	call   c010b769 <schedule>
+        if (current->flags & PF_EXITING) {
+c010aff8:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010affd:	8b 40 44             	mov    0x44(%eax),%eax
+c010b000:	83 e0 01             	and    $0x1,%eax
+c010b003:	85 c0                	test   %eax,%eax
+c010b005:	0f 84 4c ff ff ff    	je     c010af57 <do_wait+0x38>
+            do_exit(-E_KILLED);
+c010b00b:	83 ec 0c             	sub    $0xc,%esp
+c010b00e:	6a f7                	push   $0xfffffff7
+c010b010:	e8 fa f5 ff ff       	call   c010a60f <do_exit>
+c010b015:	83 c4 10             	add    $0x10,%esp
+        }
+        goto repeat;
+c010b018:	e9 3a ff ff ff       	jmp    c010af57 <do_wait+0x38>
+    }
+    return -E_BAD_PROC;
+c010b01d:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
+c010b022:	e9 93 00 00 00       	jmp    c010b0ba <do_wait+0x19b>
+    else {
+        proc = current->cptr;
+        for (; proc != NULL; proc = proc->optr) {
+            haskid = 1;
+            if (proc->state == PROC_ZOMBIE) {
+                goto found;
+c010b027:	90                   	nop
+        goto repeat;
+    }
+    return -E_BAD_PROC;
+
+found:
+    if (proc == idleproc || proc == initproc) {
+c010b028:	a1 00 33 1c c0       	mov    0xc01c3300,%eax
+c010b02d:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+c010b030:	74 0a                	je     c010b03c <do_wait+0x11d>
+c010b032:	a1 04 33 1c c0       	mov    0xc01c3304,%eax
+c010b037:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+c010b03a:	75 17                	jne    c010b053 <do_wait+0x134>
+        panic("wait idleproc or initproc.\n");
+c010b03c:	83 ec 04             	sub    $0x4,%esp
+c010b03f:	68 3a f3 10 c0       	push   $0xc010f33a
+c010b044:	68 fb 02 00 00       	push   $0x2fb
+c010b049:	68 30 f1 10 c0       	push   $0xc010f130
+c010b04e:	e8 a1 53 ff ff       	call   c01003f4 <__panic>
+    }
+    if (code_store != NULL) {
+c010b053:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c010b057:	74 0e                	je     c010b067 <do_wait+0x148>
+        *code_store = proc->exit_code;
+c010b059:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b05c:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
+c010b062:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010b065:	89 10                	mov    %edx,(%eax)
+    }
+    local_intr_save(intr_flag);
+c010b067:	e8 38 e9 ff ff       	call   c01099a4 <__intr_save>
+c010b06c:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    {
+        unhash_proc(proc);
+c010b06f:	83 ec 0c             	sub    $0xc,%esp
+c010b072:	ff 75 f4             	pushl  -0xc(%ebp)
+c010b075:	e8 6d f0 ff ff       	call   c010a0e7 <unhash_proc>
+c010b07a:	83 c4 10             	add    $0x10,%esp
+        remove_links(proc);
+c010b07d:	83 ec 0c             	sub    $0xc,%esp
+c010b080:	ff 75 f4             	pushl  -0xc(%ebp)
+c010b083:	e8 ad ed ff ff       	call   c0109e35 <remove_links>
+c010b088:	83 c4 10             	add    $0x10,%esp
+    }
+    local_intr_restore(intr_flag);
+c010b08b:	83 ec 0c             	sub    $0xc,%esp
+c010b08e:	ff 75 e8             	pushl  -0x18(%ebp)
+c010b091:	e8 38 e9 ff ff       	call   c01099ce <__intr_restore>
+c010b096:	83 c4 10             	add    $0x10,%esp
+    put_kstack(proc);
+c010b099:	83 ec 0c             	sub    $0xc,%esp
+c010b09c:	ff 75 f4             	pushl  -0xc(%ebp)
+c010b09f:	e8 90 f1 ff ff       	call   c010a234 <put_kstack>
+c010b0a4:	83 c4 10             	add    $0x10,%esp
+    kfree(proc);
+c010b0a7:	83 ec 0c             	sub    $0xc,%esp
+c010b0aa:	ff 75 f4             	pushl  -0xc(%ebp)
+c010b0ad:	e8 c3 bb ff ff       	call   c0106c75 <kfree>
+c010b0b2:	83 c4 10             	add    $0x10,%esp
+    return 0;
+c010b0b5:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010b0ba:	c9                   	leave  
+c010b0bb:	c3                   	ret    
+
+c010b0bc <do_kill>:
+
+// do_kill - kill process with pid by set this process's flags with PF_EXITING
+int
+do_kill(int pid) {
+c010b0bc:	55                   	push   %ebp
+c010b0bd:	89 e5                	mov    %esp,%ebp
+c010b0bf:	83 ec 18             	sub    $0x18,%esp
+    struct proc_struct *proc;
+    if ((proc = find_proc(pid)) != NULL) {
+c010b0c2:	83 ec 0c             	sub    $0xc,%esp
+c010b0c5:	ff 75 08             	pushl  0x8(%ebp)
+c010b0c8:	e8 50 f0 ff ff       	call   c010a11d <find_proc>
+c010b0cd:	83 c4 10             	add    $0x10,%esp
+c010b0d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010b0d3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010b0d7:	74 47                	je     c010b120 <do_kill+0x64>
+        if (!(proc->flags & PF_EXITING)) {
+c010b0d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b0dc:	8b 40 44             	mov    0x44(%eax),%eax
+c010b0df:	83 e0 01             	and    $0x1,%eax
+c010b0e2:	85 c0                	test   %eax,%eax
+c010b0e4:	75 33                	jne    c010b119 <do_kill+0x5d>
+            proc->flags |= PF_EXITING;
+c010b0e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b0e9:	8b 40 44             	mov    0x44(%eax),%eax
+c010b0ec:	83 c8 01             	or     $0x1,%eax
+c010b0ef:	89 c2                	mov    %eax,%edx
+c010b0f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b0f4:	89 50 44             	mov    %edx,0x44(%eax)
+            if (proc->wait_state & WT_INTERRUPTED) {
+c010b0f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b0fa:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
+c010b100:	85 c0                	test   %eax,%eax
+c010b102:	79 0e                	jns    c010b112 <do_kill+0x56>
+                wakeup_proc(proc);
+c010b104:	83 ec 0c             	sub    $0xc,%esp
+c010b107:	ff 75 f4             	pushl  -0xc(%ebp)
+c010b10a:	e8 ca 05 00 00       	call   c010b6d9 <wakeup_proc>
+c010b10f:	83 c4 10             	add    $0x10,%esp
+            }
+            return 0;
+c010b112:	b8 00 00 00 00       	mov    $0x0,%eax
+c010b117:	eb 0c                	jmp    c010b125 <do_kill+0x69>
+        }
+        return -E_KILLED;
+c010b119:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
+c010b11e:	eb 05                	jmp    c010b125 <do_kill+0x69>
+    }
+    return -E_INVAL;
+c010b120:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+}
+c010b125:	c9                   	leave  
+c010b126:	c3                   	ret    
+
+c010b127 <kernel_execve>:
+
+// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
+static int
+kernel_execve(const char *name, unsigned char *binary, size_t size) {
+c010b127:	55                   	push   %ebp
+c010b128:	89 e5                	mov    %esp,%ebp
+c010b12a:	57                   	push   %edi
+c010b12b:	56                   	push   %esi
+c010b12c:	53                   	push   %ebx
+c010b12d:	83 ec 1c             	sub    $0x1c,%esp
+    int ret, len = strlen(name);
+c010b130:	83 ec 0c             	sub    $0xc,%esp
+c010b133:	ff 75 08             	pushl  0x8(%ebp)
+c010b136:	e8 7c 0f 00 00       	call   c010c0b7 <strlen>
+c010b13b:	83 c4 10             	add    $0x10,%esp
+c010b13e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    asm volatile (
+c010b141:	b8 04 00 00 00       	mov    $0x4,%eax
+c010b146:	8b 55 08             	mov    0x8(%ebp),%edx
+c010b149:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+c010b14c:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+c010b14f:	8b 75 10             	mov    0x10(%ebp),%esi
+c010b152:	89 f7                	mov    %esi,%edi
+c010b154:	cd 80                	int    $0x80
+c010b156:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (len), "b" (binary), "D" (size)
+        : "memory");
+    return ret;
+c010b159:	8b 45 e0             	mov    -0x20(%ebp),%eax
+}
+c010b15c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+c010b15f:	5b                   	pop    %ebx
+c010b160:	5e                   	pop    %esi
+c010b161:	5f                   	pop    %edi
+c010b162:	5d                   	pop    %ebp
+c010b163:	c3                   	ret    
+
+c010b164 <user_main>:
+
+#define KERNEL_EXECVE2(x, xstart, xsize)        __KERNEL_EXECVE2(x, xstart, xsize)
+
+// user_main - kernel thread used to exec a user program
+static int
+user_main(void *arg) {
+c010b164:	55                   	push   %ebp
+c010b165:	89 e5                	mov    %esp,%ebp
+c010b167:	83 ec 08             	sub    $0x8,%esp
+#ifdef TEST
+    KERNEL_EXECVE2(TEST, TESTSTART, TESTSIZE);
+c010b16a:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010b16f:	8b 40 04             	mov    0x4(%eax),%eax
+c010b172:	83 ec 04             	sub    $0x4,%esp
+c010b175:	68 56 f3 10 c0       	push   $0xc010f356
+c010b17a:	50                   	push   %eax
+c010b17b:	68 60 f3 10 c0       	push   $0xc010f360
+c010b180:	e8 09 51 ff ff       	call   c010028e <cprintf>
+c010b185:	83 c4 10             	add    $0x10,%esp
+c010b188:	b8 f4 79 00 00       	mov    $0x79f4,%eax
+c010b18d:	83 ec 04             	sub    $0x4,%esp
+c010b190:	50                   	push   %eax
+c010b191:	68 d0 a8 1b c0       	push   $0xc01ba8d0
+c010b196:	68 56 f3 10 c0       	push   $0xc010f356
+c010b19b:	e8 87 ff ff ff       	call   c010b127 <kernel_execve>
+c010b1a0:	83 c4 10             	add    $0x10,%esp
+#else
+    KERNEL_EXECVE(exit);
+#endif
+    panic("user_main execve failed.\n");
+c010b1a3:	83 ec 04             	sub    $0x4,%esp
+c010b1a6:	68 87 f3 10 c0       	push   $0xc010f387
+c010b1ab:	68 44 03 00 00       	push   $0x344
+c010b1b0:	68 30 f1 10 c0       	push   $0xc010f130
+c010b1b5:	e8 3a 52 ff ff       	call   c01003f4 <__panic>
+
+c010b1ba <init_main>:
+}
+
+// init_main - the second kernel thread used to create user_main kernel threads
+static int
+init_main(void *arg) {
+c010b1ba:	55                   	push   %ebp
+c010b1bb:	89 e5                	mov    %esp,%ebp
+c010b1bd:	83 ec 28             	sub    $0x28,%esp
+    size_t nr_free_pages_store = nr_free_pages();
+c010b1c0:	e8 3c 87 ff ff       	call   c0103901 <nr_free_pages>
+c010b1c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    size_t kernel_allocated_store = kallocated();
+c010b1c8:	e8 73 b9 ff ff       	call   c0106b40 <kallocated>
+c010b1cd:	89 45 f0             	mov    %eax,-0x10(%ebp)
+
+    int pid = kernel_thread(user_main, NULL, 0);
+c010b1d0:	83 ec 04             	sub    $0x4,%esp
+c010b1d3:	6a 00                	push   $0x0
+c010b1d5:	6a 00                	push   $0x0
+c010b1d7:	68 64 b1 10 c0       	push   $0xc010b164
+c010b1dc:	e8 ae ef ff ff       	call   c010a18f <kernel_thread>
+c010b1e1:	83 c4 10             	add    $0x10,%esp
+c010b1e4:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    if (pid <= 0) {
+c010b1e7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c010b1eb:	7f 17                	jg     c010b204 <init_main+0x4a>
+        panic("create user_main failed.\n");
+c010b1ed:	83 ec 04             	sub    $0x4,%esp
+c010b1f0:	68 a1 f3 10 c0       	push   $0xc010f3a1
+c010b1f5:	68 4f 03 00 00       	push   $0x34f
+c010b1fa:	68 30 f1 10 c0       	push   $0xc010f130
+c010b1ff:	e8 f0 51 ff ff       	call   c01003f4 <__panic>
+    }
+ extern void check_sync(void);
+    check_sync();                // check philosopher sync problem
+c010b204:	e8 7f db ff ff       	call   c0108d88 <check_sync>
+
+    while (do_wait(0, NULL) == 0) {
+c010b209:	eb 05                	jmp    c010b210 <init_main+0x56>
+        schedule();
+c010b20b:	e8 59 05 00 00       	call   c010b769 <schedule>
+        panic("create user_main failed.\n");
+    }
+ extern void check_sync(void);
+    check_sync();                // check philosopher sync problem
+
+    while (do_wait(0, NULL) == 0) {
+c010b210:	83 ec 08             	sub    $0x8,%esp
+c010b213:	6a 00                	push   $0x0
+c010b215:	6a 00                	push   $0x0
+c010b217:	e8 03 fd ff ff       	call   c010af1f <do_wait>
+c010b21c:	83 c4 10             	add    $0x10,%esp
+c010b21f:	85 c0                	test   %eax,%eax
+c010b221:	74 e8                	je     c010b20b <init_main+0x51>
+        schedule();
+    }
+
+    cprintf("all user-mode processes have quit.\n");
+c010b223:	83 ec 0c             	sub    $0xc,%esp
+c010b226:	68 bc f3 10 c0       	push   $0xc010f3bc
+c010b22b:	e8 5e 50 ff ff       	call   c010028e <cprintf>
+c010b230:	83 c4 10             	add    $0x10,%esp
+    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
+c010b233:	a1 04 33 1c c0       	mov    0xc01c3304,%eax
+c010b238:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
+c010b23e:	85 c0                	test   %eax,%eax
+c010b240:	75 1e                	jne    c010b260 <init_main+0xa6>
+c010b242:	a1 04 33 1c c0       	mov    0xc01c3304,%eax
+c010b247:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
+c010b24d:	85 c0                	test   %eax,%eax
+c010b24f:	75 0f                	jne    c010b260 <init_main+0xa6>
+c010b251:	a1 04 33 1c c0       	mov    0xc01c3304,%eax
+c010b256:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
+c010b25c:	85 c0                	test   %eax,%eax
+c010b25e:	74 19                	je     c010b279 <init_main+0xbf>
+c010b260:	68 e0 f3 10 c0       	push   $0xc010f3e0
+c010b265:	68 5d f1 10 c0       	push   $0xc010f15d
+c010b26a:	68 59 03 00 00       	push   $0x359
+c010b26f:	68 30 f1 10 c0       	push   $0xc010f130
+c010b274:	e8 7b 51 ff ff       	call   c01003f4 <__panic>
+    assert(nr_process == 2);
+c010b279:	a1 20 53 1c c0       	mov    0xc01c5320,%eax
+c010b27e:	83 f8 02             	cmp    $0x2,%eax
+c010b281:	74 19                	je     c010b29c <init_main+0xe2>
+c010b283:	68 2b f4 10 c0       	push   $0xc010f42b
+c010b288:	68 5d f1 10 c0       	push   $0xc010f15d
+c010b28d:	68 5a 03 00 00       	push   $0x35a
+c010b292:	68 30 f1 10 c0       	push   $0xc010f130
+c010b297:	e8 58 51 ff ff       	call   c01003f4 <__panic>
+c010b29c:	c7 45 e4 7c 55 1c c0 	movl   $0xc01c557c,-0x1c(%ebp)
+c010b2a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010b2a6:	8b 40 04             	mov    0x4(%eax),%eax
+    assert(list_next(&proc_list) == &(initproc->list_link));
+c010b2a9:	8b 15 04 33 1c c0    	mov    0xc01c3304,%edx
+c010b2af:	83 c2 7c             	add    $0x7c,%edx
+c010b2b2:	39 d0                	cmp    %edx,%eax
+c010b2b4:	74 19                	je     c010b2cf <init_main+0x115>
+c010b2b6:	68 3c f4 10 c0       	push   $0xc010f43c
+c010b2bb:	68 5d f1 10 c0       	push   $0xc010f15d
+c010b2c0:	68 5b 03 00 00       	push   $0x35b
+c010b2c5:	68 30 f1 10 c0       	push   $0xc010f130
+c010b2ca:	e8 25 51 ff ff       	call   c01003f4 <__panic>
+c010b2cf:	c7 45 e8 7c 55 1c c0 	movl   $0xc01c557c,-0x18(%ebp)
+ * list_prev - get the previous entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_prev(list_entry_t *listelm) {
+    return listelm->prev;
+c010b2d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010b2d9:	8b 00                	mov    (%eax),%eax
+    assert(list_prev(&proc_list) == &(initproc->list_link));
+c010b2db:	8b 15 04 33 1c c0    	mov    0xc01c3304,%edx
+c010b2e1:	83 c2 7c             	add    $0x7c,%edx
+c010b2e4:	39 d0                	cmp    %edx,%eax
+c010b2e6:	74 19                	je     c010b301 <init_main+0x147>
+c010b2e8:	68 6c f4 10 c0       	push   $0xc010f46c
+c010b2ed:	68 5d f1 10 c0       	push   $0xc010f15d
+c010b2f2:	68 5c 03 00 00       	push   $0x35c
+c010b2f7:	68 30 f1 10 c0       	push   $0xc010f130
+c010b2fc:	e8 f3 50 ff ff       	call   c01003f4 <__panic>
+
+    cprintf("init check memory pass.\n");
+c010b301:	83 ec 0c             	sub    $0xc,%esp
+c010b304:	68 9c f4 10 c0       	push   $0xc010f49c
+c010b309:	e8 80 4f ff ff       	call   c010028e <cprintf>
+c010b30e:	83 c4 10             	add    $0x10,%esp
+    return 0;
+c010b311:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010b316:	c9                   	leave  
+c010b317:	c3                   	ret    
+
+c010b318 <proc_init>:
+
+// proc_init - set up the first kernel thread idleproc "idle" by itself and 
+//           - create the second kernel thread init_main
+void
+proc_init(void) {
+c010b318:	55                   	push   %ebp
+c010b319:	89 e5                	mov    %esp,%ebp
+c010b31b:	83 ec 18             	sub    $0x18,%esp
+c010b31e:	c7 45 e8 7c 55 1c c0 	movl   $0xc01c557c,-0x18(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c010b325:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010b328:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010b32b:	89 50 04             	mov    %edx,0x4(%eax)
+c010b32e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010b331:	8b 50 04             	mov    0x4(%eax),%edx
+c010b334:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010b337:	89 10                	mov    %edx,(%eax)
+    int i;
+
+    list_init(&proc_list);
+    for (i = 0; i < HASH_LIST_SIZE; i ++) {
+c010b339:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+c010b340:	eb 26                	jmp    c010b368 <proc_init+0x50>
+        list_init(hash_list + i);
+c010b342:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b345:	c1 e0 03             	shl    $0x3,%eax
+c010b348:	05 20 33 1c c0       	add    $0xc01c3320,%eax
+c010b34d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010b350:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b353:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010b356:	89 50 04             	mov    %edx,0x4(%eax)
+c010b359:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b35c:	8b 50 04             	mov    0x4(%eax),%edx
+c010b35f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b362:	89 10                	mov    %edx,(%eax)
+void
+proc_init(void) {
+    int i;
+
+    list_init(&proc_list);
+    for (i = 0; i < HASH_LIST_SIZE; i ++) {
+c010b364:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+c010b368:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
+c010b36f:	7e d1                	jle    c010b342 <proc_init+0x2a>
+        list_init(hash_list + i);
+    }
+
+    if ((idleproc = alloc_proc()) == NULL) {
+c010b371:	e8 ea e7 ff ff       	call   c0109b60 <alloc_proc>
+c010b376:	a3 00 33 1c c0       	mov    %eax,0xc01c3300
+c010b37b:	a1 00 33 1c c0       	mov    0xc01c3300,%eax
+c010b380:	85 c0                	test   %eax,%eax
+c010b382:	75 17                	jne    c010b39b <proc_init+0x83>
+        panic("cannot alloc idleproc.\n");
+c010b384:	83 ec 04             	sub    $0x4,%esp
+c010b387:	68 b5 f4 10 c0       	push   $0xc010f4b5
+c010b38c:	68 6e 03 00 00       	push   $0x36e
+c010b391:	68 30 f1 10 c0       	push   $0xc010f130
+c010b396:	e8 59 50 ff ff       	call   c01003f4 <__panic>
+    }
+
+    idleproc->pid = 0;
+c010b39b:	a1 00 33 1c c0       	mov    0xc01c3300,%eax
+c010b3a0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
+    idleproc->state = PROC_RUNNABLE;
+c010b3a7:	a1 00 33 1c c0       	mov    0xc01c3300,%eax
+c010b3ac:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
+    idleproc->kstack = (uintptr_t)bootstack;
+c010b3b2:	a1 00 33 1c c0       	mov    0xc01c3300,%eax
+c010b3b7:	ba 00 f0 12 c0       	mov    $0xc012f000,%edx
+c010b3bc:	89 50 0c             	mov    %edx,0xc(%eax)
+    idleproc->need_resched = 1;
+c010b3bf:	a1 00 33 1c c0       	mov    0xc01c3300,%eax
+c010b3c4:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
+    set_proc_name(idleproc, "idle");
+c010b3cb:	a1 00 33 1c c0       	mov    0xc01c3300,%eax
+c010b3d0:	83 ec 08             	sub    $0x8,%esp
+c010b3d3:	68 cd f4 10 c0       	push   $0xc010f4cd
+c010b3d8:	50                   	push   %eax
+c010b3d9:	e8 32 e9 ff ff       	call   c0109d10 <set_proc_name>
+c010b3de:	83 c4 10             	add    $0x10,%esp
+    nr_process ++;
+c010b3e1:	a1 20 53 1c c0       	mov    0xc01c5320,%eax
+c010b3e6:	83 c0 01             	add    $0x1,%eax
+c010b3e9:	a3 20 53 1c c0       	mov    %eax,0xc01c5320
+
+    current = idleproc;
+c010b3ee:	a1 00 33 1c c0       	mov    0xc01c3300,%eax
+c010b3f3:	a3 08 33 1c c0       	mov    %eax,0xc01c3308
+
+    int pid = kernel_thread(init_main, NULL, 0);
+c010b3f8:	83 ec 04             	sub    $0x4,%esp
+c010b3fb:	6a 00                	push   $0x0
+c010b3fd:	6a 00                	push   $0x0
+c010b3ff:	68 ba b1 10 c0       	push   $0xc010b1ba
+c010b404:	e8 86 ed ff ff       	call   c010a18f <kernel_thread>
+c010b409:	83 c4 10             	add    $0x10,%esp
+c010b40c:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    if (pid <= 0) {
+c010b40f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
+c010b413:	7f 17                	jg     c010b42c <proc_init+0x114>
+        panic("create init_main failed.\n");
+c010b415:	83 ec 04             	sub    $0x4,%esp
+c010b418:	68 d2 f4 10 c0       	push   $0xc010f4d2
+c010b41d:	68 7c 03 00 00       	push   $0x37c
+c010b422:	68 30 f1 10 c0       	push   $0xc010f130
+c010b427:	e8 c8 4f ff ff       	call   c01003f4 <__panic>
+    }
+
+    initproc = find_proc(pid);
+c010b42c:	83 ec 0c             	sub    $0xc,%esp
+c010b42f:	ff 75 ec             	pushl  -0x14(%ebp)
+c010b432:	e8 e6 ec ff ff       	call   c010a11d <find_proc>
+c010b437:	83 c4 10             	add    $0x10,%esp
+c010b43a:	a3 04 33 1c c0       	mov    %eax,0xc01c3304
+    set_proc_name(initproc, "init");
+c010b43f:	a1 04 33 1c c0       	mov    0xc01c3304,%eax
+c010b444:	83 ec 08             	sub    $0x8,%esp
+c010b447:	68 ec f4 10 c0       	push   $0xc010f4ec
+c010b44c:	50                   	push   %eax
+c010b44d:	e8 be e8 ff ff       	call   c0109d10 <set_proc_name>
+c010b452:	83 c4 10             	add    $0x10,%esp
+
+    assert(idleproc != NULL && idleproc->pid == 0);
+c010b455:	a1 00 33 1c c0       	mov    0xc01c3300,%eax
+c010b45a:	85 c0                	test   %eax,%eax
+c010b45c:	74 0c                	je     c010b46a <proc_init+0x152>
+c010b45e:	a1 00 33 1c c0       	mov    0xc01c3300,%eax
+c010b463:	8b 40 04             	mov    0x4(%eax),%eax
+c010b466:	85 c0                	test   %eax,%eax
+c010b468:	74 19                	je     c010b483 <proc_init+0x16b>
+c010b46a:	68 f4 f4 10 c0       	push   $0xc010f4f4
+c010b46f:	68 5d f1 10 c0       	push   $0xc010f15d
+c010b474:	68 82 03 00 00       	push   $0x382
+c010b479:	68 30 f1 10 c0       	push   $0xc010f130
+c010b47e:	e8 71 4f ff ff       	call   c01003f4 <__panic>
+    assert(initproc != NULL && initproc->pid == 1);
+c010b483:	a1 04 33 1c c0       	mov    0xc01c3304,%eax
+c010b488:	85 c0                	test   %eax,%eax
+c010b48a:	74 0d                	je     c010b499 <proc_init+0x181>
+c010b48c:	a1 04 33 1c c0       	mov    0xc01c3304,%eax
+c010b491:	8b 40 04             	mov    0x4(%eax),%eax
+c010b494:	83 f8 01             	cmp    $0x1,%eax
+c010b497:	74 19                	je     c010b4b2 <proc_init+0x19a>
+c010b499:	68 1c f5 10 c0       	push   $0xc010f51c
+c010b49e:	68 5d f1 10 c0       	push   $0xc010f15d
+c010b4a3:	68 83 03 00 00       	push   $0x383
+c010b4a8:	68 30 f1 10 c0       	push   $0xc010f130
+c010b4ad:	e8 42 4f ff ff       	call   c01003f4 <__panic>
+}
+c010b4b2:	90                   	nop
+c010b4b3:	c9                   	leave  
+c010b4b4:	c3                   	ret    
+
+c010b4b5 <cpu_idle>:
+
+// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
+void
+cpu_idle(void) {
+c010b4b5:	55                   	push   %ebp
+c010b4b6:	89 e5                	mov    %esp,%ebp
+c010b4b8:	83 ec 08             	sub    $0x8,%esp
+    while (1) {
+        if (current->need_resched) {
+c010b4bb:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010b4c0:	8b 40 10             	mov    0x10(%eax),%eax
+c010b4c3:	85 c0                	test   %eax,%eax
+c010b4c5:	74 f4                	je     c010b4bb <cpu_idle+0x6>
+            schedule();
+c010b4c7:	e8 9d 02 00 00       	call   c010b769 <schedule>
+        }
+    }
+c010b4cc:	eb ed                	jmp    c010b4bb <cpu_idle+0x6>
+
+c010b4ce <lab6_set_priority>:
+}
+
+//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
+void
+lab6_set_priority(uint32_t priority)
+{
+c010b4ce:	55                   	push   %ebp
+c010b4cf:	89 e5                	mov    %esp,%ebp
+    if (priority == 0)
+c010b4d1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010b4d5:	75 11                	jne    c010b4e8 <lab6_set_priority+0x1a>
+        current->lab6_priority = 1;
+c010b4d7:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010b4dc:	c7 80 c0 00 00 00 01 	movl   $0x1,0xc0(%eax)
+c010b4e3:	00 00 00 
+    else current->lab6_priority = priority;
+}
+c010b4e6:	eb 0e                	jmp    c010b4f6 <lab6_set_priority+0x28>
+void
+lab6_set_priority(uint32_t priority)
+{
+    if (priority == 0)
+        current->lab6_priority = 1;
+    else current->lab6_priority = priority;
+c010b4e8:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010b4ed:	8b 55 08             	mov    0x8(%ebp),%edx
+c010b4f0:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)
+}
+c010b4f6:	90                   	nop
+c010b4f7:	5d                   	pop    %ebp
+c010b4f8:	c3                   	ret    
+
+c010b4f9 <do_sleep>:
+
+// do_sleep - set current process state to sleep and add timer with "time"
+//          - then call scheduler. if process run again, delete timer first.
+int
+do_sleep(unsigned int time) {
+c010b4f9:	55                   	push   %ebp
+c010b4fa:	89 e5                	mov    %esp,%ebp
+c010b4fc:	83 ec 28             	sub    $0x28,%esp
+    if (time == 0) {
+c010b4ff:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010b503:	75 07                	jne    c010b50c <do_sleep+0x13>
+        return 0;
+c010b505:	b8 00 00 00 00       	mov    $0x0,%eax
+c010b50a:	eb 72                	jmp    c010b57e <do_sleep+0x85>
+    }
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c010b50c:	e8 93 e4 ff ff       	call   c01099a4 <__intr_save>
+c010b511:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    timer_t __timer, *timer = timer_init(&__timer, current, time);
+c010b514:	8b 55 08             	mov    0x8(%ebp),%edx
+c010b517:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010b51c:	83 ec 04             	sub    $0x4,%esp
+c010b51f:	52                   	push   %edx
+c010b520:	50                   	push   %eax
+c010b521:	8d 45 e0             	lea    -0x20(%ebp),%eax
+c010b524:	50                   	push   %eax
+c010b525:	e8 41 e4 ff ff       	call   c010996b <timer_init>
+c010b52a:	83 c4 10             	add    $0x10,%esp
+c010b52d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    current->state = PROC_SLEEPING;
+c010b530:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010b535:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
+    current->wait_state = WT_TIMER;
+c010b53b:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010b540:	c7 80 90 00 00 00 02 	movl   $0x80000002,0x90(%eax)
+c010b547:	00 00 80 
+    add_timer(timer);
+c010b54a:	83 ec 0c             	sub    $0xc,%esp
+c010b54d:	ff 75 f0             	pushl  -0x10(%ebp)
+c010b550:	e8 ad 02 00 00       	call   c010b802 <add_timer>
+c010b555:	83 c4 10             	add    $0x10,%esp
+    local_intr_restore(intr_flag);
+c010b558:	83 ec 0c             	sub    $0xc,%esp
+c010b55b:	ff 75 f4             	pushl  -0xc(%ebp)
+c010b55e:	e8 6b e4 ff ff       	call   c01099ce <__intr_restore>
+c010b563:	83 c4 10             	add    $0x10,%esp
+
+    schedule();
+c010b566:	e8 fe 01 00 00       	call   c010b769 <schedule>
+
+    del_timer(timer);
+c010b56b:	83 ec 0c             	sub    $0xc,%esp
+c010b56e:	ff 75 f0             	pushl  -0x10(%ebp)
+c010b571:	e8 b2 03 00 00       	call   c010b928 <del_timer>
+c010b576:	83 c4 10             	add    $0x10,%esp
+    return 0;
+c010b579:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010b57e:	c9                   	leave  
+c010b57f:	c3                   	ret    
+
+c010b580 <__intr_save>:
+#include <assert.h>
+#include <atomic.h>
+#include <sched.h>
+
+static inline bool
+__intr_save(void) {
+c010b580:	55                   	push   %ebp
+c010b581:	89 e5                	mov    %esp,%ebp
+c010b583:	83 ec 18             	sub    $0x18,%esp
+}
+
+static inline uint32_t
+read_eflags(void) {
+    uint32_t eflags;
+    asm volatile ("pushfl; popl %0" : "=r" (eflags));
+c010b586:	9c                   	pushf  
+c010b587:	58                   	pop    %eax
+c010b588:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return eflags;
+c010b58b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    if (read_eflags() & FL_IF) {
+c010b58e:	25 00 02 00 00       	and    $0x200,%eax
+c010b593:	85 c0                	test   %eax,%eax
+c010b595:	74 0c                	je     c010b5a3 <__intr_save+0x23>
+        intr_disable();
+c010b597:	e8 f5 6b ff ff       	call   c0102191 <intr_disable>
+        return 1;
+c010b59c:	b8 01 00 00 00       	mov    $0x1,%eax
+c010b5a1:	eb 05                	jmp    c010b5a8 <__intr_save+0x28>
+    }
+    return 0;
+c010b5a3:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010b5a8:	c9                   	leave  
+c010b5a9:	c3                   	ret    
+
+c010b5aa <__intr_restore>:
+
+static inline void
+__intr_restore(bool flag) {
+c010b5aa:	55                   	push   %ebp
+c010b5ab:	89 e5                	mov    %esp,%ebp
+c010b5ad:	83 ec 08             	sub    $0x8,%esp
+    if (flag) {
+c010b5b0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010b5b4:	74 05                	je     c010b5bb <__intr_restore+0x11>
+        intr_enable();
+c010b5b6:	e8 cf 6b ff ff       	call   c010218a <intr_enable>
+    }
+}
+c010b5bb:	90                   	nop
+c010b5bc:	c9                   	leave  
+c010b5bd:	c3                   	ret    
+
+c010b5be <sched_class_enqueue>:
+static struct sched_class *sched_class;
+
+static struct run_queue *rq;
+
+static inline void
+sched_class_enqueue(struct proc_struct *proc) {
+c010b5be:	55                   	push   %ebp
+c010b5bf:	89 e5                	mov    %esp,%ebp
+c010b5c1:	83 ec 08             	sub    $0x8,%esp
+    if (proc != idleproc) {
+c010b5c4:	a1 00 33 1c c0       	mov    0xc01c3300,%eax
+c010b5c9:	39 45 08             	cmp    %eax,0x8(%ebp)
+c010b5cc:	74 1a                	je     c010b5e8 <sched_class_enqueue+0x2a>
+        sched_class->enqueue(rq, proc);
+c010b5ce:	a1 7c 53 1c c0       	mov    0xc01c537c,%eax
+c010b5d3:	8b 40 08             	mov    0x8(%eax),%eax
+c010b5d6:	8b 15 80 53 1c c0    	mov    0xc01c5380,%edx
+c010b5dc:	83 ec 08             	sub    $0x8,%esp
+c010b5df:	ff 75 08             	pushl  0x8(%ebp)
+c010b5e2:	52                   	push   %edx
+c010b5e3:	ff d0                	call   *%eax
+c010b5e5:	83 c4 10             	add    $0x10,%esp
+    }
+}
+c010b5e8:	90                   	nop
+c010b5e9:	c9                   	leave  
+c010b5ea:	c3                   	ret    
+
+c010b5eb <sched_class_dequeue>:
+
+static inline void
+sched_class_dequeue(struct proc_struct *proc) {
+c010b5eb:	55                   	push   %ebp
+c010b5ec:	89 e5                	mov    %esp,%ebp
+c010b5ee:	83 ec 08             	sub    $0x8,%esp
+    sched_class->dequeue(rq, proc);
+c010b5f1:	a1 7c 53 1c c0       	mov    0xc01c537c,%eax
+c010b5f6:	8b 40 0c             	mov    0xc(%eax),%eax
+c010b5f9:	8b 15 80 53 1c c0    	mov    0xc01c5380,%edx
+c010b5ff:	83 ec 08             	sub    $0x8,%esp
+c010b602:	ff 75 08             	pushl  0x8(%ebp)
+c010b605:	52                   	push   %edx
+c010b606:	ff d0                	call   *%eax
+c010b608:	83 c4 10             	add    $0x10,%esp
+}
+c010b60b:	90                   	nop
+c010b60c:	c9                   	leave  
+c010b60d:	c3                   	ret    
+
+c010b60e <sched_class_pick_next>:
+
+static inline struct proc_struct *
+sched_class_pick_next(void) {
+c010b60e:	55                   	push   %ebp
+c010b60f:	89 e5                	mov    %esp,%ebp
+c010b611:	83 ec 08             	sub    $0x8,%esp
+    return sched_class->pick_next(rq);
+c010b614:	a1 7c 53 1c c0       	mov    0xc01c537c,%eax
+c010b619:	8b 40 10             	mov    0x10(%eax),%eax
+c010b61c:	8b 15 80 53 1c c0    	mov    0xc01c5380,%edx
+c010b622:	83 ec 0c             	sub    $0xc,%esp
+c010b625:	52                   	push   %edx
+c010b626:	ff d0                	call   *%eax
+c010b628:	83 c4 10             	add    $0x10,%esp
+}
+c010b62b:	c9                   	leave  
+c010b62c:	c3                   	ret    
+
+c010b62d <sched_class_proc_tick>:
+
+extern void
+sched_class_proc_tick(struct proc_struct *proc) {
+c010b62d:	55                   	push   %ebp
+c010b62e:	89 e5                	mov    %esp,%ebp
+c010b630:	83 ec 08             	sub    $0x8,%esp
+    if (proc != idleproc) {
+c010b633:	a1 00 33 1c c0       	mov    0xc01c3300,%eax
+c010b638:	39 45 08             	cmp    %eax,0x8(%ebp)
+c010b63b:	74 1c                	je     c010b659 <sched_class_proc_tick+0x2c>
+        sched_class->proc_tick(rq, proc);
+c010b63d:	a1 7c 53 1c c0       	mov    0xc01c537c,%eax
+c010b642:	8b 40 14             	mov    0x14(%eax),%eax
+c010b645:	8b 15 80 53 1c c0    	mov    0xc01c5380,%edx
+c010b64b:	83 ec 08             	sub    $0x8,%esp
+c010b64e:	ff 75 08             	pushl  0x8(%ebp)
+c010b651:	52                   	push   %edx
+c010b652:	ff d0                	call   *%eax
+c010b654:	83 c4 10             	add    $0x10,%esp
+    }
+    else {
+        proc->need_resched = 1;
+    }
+}
+c010b657:	eb 0a                	jmp    c010b663 <sched_class_proc_tick+0x36>
+sched_class_proc_tick(struct proc_struct *proc) {
+    if (proc != idleproc) {
+        sched_class->proc_tick(rq, proc);
+    }
+    else {
+        proc->need_resched = 1;
+c010b659:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b65c:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
+    }
+}
+c010b663:	90                   	nop
+c010b664:	c9                   	leave  
+c010b665:	c3                   	ret    
+
+c010b666 <sched_init>:
+
+static struct run_queue __rq;
+
+void
+sched_init(void) {
+c010b666:	55                   	push   %ebp
+c010b667:	89 e5                	mov    %esp,%ebp
+c010b669:	83 ec 18             	sub    $0x18,%esp
+c010b66c:	c7 45 f4 74 53 1c c0 	movl   $0xc01c5374,-0xc(%ebp)
+c010b673:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b676:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010b679:	89 50 04             	mov    %edx,0x4(%eax)
+c010b67c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b67f:	8b 50 04             	mov    0x4(%eax),%edx
+c010b682:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b685:	89 10                	mov    %edx,(%eax)
+    list_init(&timer_list);
+
+    sched_class = &default_sched_class;
+c010b687:	c7 05 7c 53 1c c0 78 	movl   $0xc0131a78,0xc01c537c
+c010b68e:	1a 13 c0 
+
+    rq = &__rq;
+c010b691:	c7 05 80 53 1c c0 84 	movl   $0xc01c5384,0xc01c5380
+c010b698:	53 1c c0 
+    rq->max_time_slice = 5;
+c010b69b:	a1 80 53 1c c0       	mov    0xc01c5380,%eax
+c010b6a0:	c7 40 0c 05 00 00 00 	movl   $0x5,0xc(%eax)
+    sched_class->init(rq);
+c010b6a7:	a1 7c 53 1c c0       	mov    0xc01c537c,%eax
+c010b6ac:	8b 40 04             	mov    0x4(%eax),%eax
+c010b6af:	8b 15 80 53 1c c0    	mov    0xc01c5380,%edx
+c010b6b5:	83 ec 0c             	sub    $0xc,%esp
+c010b6b8:	52                   	push   %edx
+c010b6b9:	ff d0                	call   *%eax
+c010b6bb:	83 c4 10             	add    $0x10,%esp
+
+    cprintf("sched class: %s\n", sched_class->name);
+c010b6be:	a1 7c 53 1c c0       	mov    0xc01c537c,%eax
+c010b6c3:	8b 00                	mov    (%eax),%eax
+c010b6c5:	83 ec 08             	sub    $0x8,%esp
+c010b6c8:	50                   	push   %eax
+c010b6c9:	68 44 f5 10 c0       	push   $0xc010f544
+c010b6ce:	e8 bb 4b ff ff       	call   c010028e <cprintf>
+c010b6d3:	83 c4 10             	add    $0x10,%esp
+}
+c010b6d6:	90                   	nop
+c010b6d7:	c9                   	leave  
+c010b6d8:	c3                   	ret    
+
+c010b6d9 <wakeup_proc>:
+
+void
+wakeup_proc(struct proc_struct *proc) {
+c010b6d9:	55                   	push   %ebp
+c010b6da:	89 e5                	mov    %esp,%ebp
+c010b6dc:	83 ec 18             	sub    $0x18,%esp
+    assert(proc->state != PROC_ZOMBIE);
+c010b6df:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b6e2:	8b 00                	mov    (%eax),%eax
+c010b6e4:	83 f8 03             	cmp    $0x3,%eax
+c010b6e7:	75 16                	jne    c010b6ff <wakeup_proc+0x26>
+c010b6e9:	68 55 f5 10 c0       	push   $0xc010f555
+c010b6ee:	68 70 f5 10 c0       	push   $0xc010f570
+c010b6f3:	6a 3c                	push   $0x3c
+c010b6f5:	68 85 f5 10 c0       	push   $0xc010f585
+c010b6fa:	e8 f5 4c ff ff       	call   c01003f4 <__panic>
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c010b6ff:	e8 7c fe ff ff       	call   c010b580 <__intr_save>
+c010b704:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    {
+        if (proc->state != PROC_RUNNABLE) {
+c010b707:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b70a:	8b 00                	mov    (%eax),%eax
+c010b70c:	83 f8 02             	cmp    $0x2,%eax
+c010b70f:	74 30                	je     c010b741 <wakeup_proc+0x68>
+            proc->state = PROC_RUNNABLE;
+c010b711:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b714:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
+            proc->wait_state = 0;
+c010b71a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b71d:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
+c010b724:	00 00 00 
+            if (proc != current) {
+c010b727:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010b72c:	39 45 08             	cmp    %eax,0x8(%ebp)
+c010b72f:	74 27                	je     c010b758 <wakeup_proc+0x7f>
+                sched_class_enqueue(proc);
+c010b731:	83 ec 0c             	sub    $0xc,%esp
+c010b734:	ff 75 08             	pushl  0x8(%ebp)
+c010b737:	e8 82 fe ff ff       	call   c010b5be <sched_class_enqueue>
+c010b73c:	83 c4 10             	add    $0x10,%esp
+c010b73f:	eb 17                	jmp    c010b758 <wakeup_proc+0x7f>
+            }
+        }
+        else {
+            warn("wakeup runnable process.\n");
+c010b741:	83 ec 04             	sub    $0x4,%esp
+c010b744:	68 9b f5 10 c0       	push   $0xc010f59b
+c010b749:	6a 48                	push   $0x48
+c010b74b:	68 85 f5 10 c0       	push   $0xc010f585
+c010b750:	e8 0d 4d ff ff       	call   c0100462 <__warn>
+c010b755:	83 c4 10             	add    $0x10,%esp
+        }
+    }
+    local_intr_restore(intr_flag);
+c010b758:	83 ec 0c             	sub    $0xc,%esp
+c010b75b:	ff 75 f4             	pushl  -0xc(%ebp)
+c010b75e:	e8 47 fe ff ff       	call   c010b5aa <__intr_restore>
+c010b763:	83 c4 10             	add    $0x10,%esp
+}
+c010b766:	90                   	nop
+c010b767:	c9                   	leave  
+c010b768:	c3                   	ret    
+
+c010b769 <schedule>:
+
+void
+schedule(void) {
+c010b769:	55                   	push   %ebp
+c010b76a:	89 e5                	mov    %esp,%ebp
+c010b76c:	83 ec 18             	sub    $0x18,%esp
+    bool intr_flag;
+    struct proc_struct *next;
+    local_intr_save(intr_flag);
+c010b76f:	e8 0c fe ff ff       	call   c010b580 <__intr_save>
+c010b774:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    {
+        current->need_resched = 0;
+c010b777:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010b77c:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
+        //cprintf("time up: %s %d\n", current->name, current->pid);
+        if (current->state == PROC_RUNNABLE) {
+c010b783:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010b788:	8b 00                	mov    (%eax),%eax
+c010b78a:	83 f8 02             	cmp    $0x2,%eax
+c010b78d:	75 11                	jne    c010b7a0 <schedule+0x37>
+            sched_class_enqueue(current);
+c010b78f:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010b794:	83 ec 0c             	sub    $0xc,%esp
+c010b797:	50                   	push   %eax
+c010b798:	e8 21 fe ff ff       	call   c010b5be <sched_class_enqueue>
+c010b79d:	83 c4 10             	add    $0x10,%esp
+        }
+        if ((next = sched_class_pick_next()) != NULL) {
+c010b7a0:	e8 69 fe ff ff       	call   c010b60e <sched_class_pick_next>
+c010b7a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010b7a8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010b7ac:	74 0e                	je     c010b7bc <schedule+0x53>
+            sched_class_dequeue(next);
+c010b7ae:	83 ec 0c             	sub    $0xc,%esp
+c010b7b1:	ff 75 f4             	pushl  -0xc(%ebp)
+c010b7b4:	e8 32 fe ff ff       	call   c010b5eb <sched_class_dequeue>
+c010b7b9:	83 c4 10             	add    $0x10,%esp
+            //cprintf("next proc: %s %d\n", next->name, next->pid);
+        }
+        if (next == NULL) {
+c010b7bc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010b7c0:	75 08                	jne    c010b7ca <schedule+0x61>
+            next = idleproc;
+c010b7c2:	a1 00 33 1c c0       	mov    0xc01c3300,%eax
+c010b7c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        next->runs ++;
+c010b7ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b7cd:	8b 40 08             	mov    0x8(%eax),%eax
+c010b7d0:	8d 50 01             	lea    0x1(%eax),%edx
+c010b7d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b7d6:	89 50 08             	mov    %edx,0x8(%eax)
+        if (next != current) {
+c010b7d9:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010b7de:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+c010b7e1:	74 0e                	je     c010b7f1 <schedule+0x88>
+            proc_run(next);
+c010b7e3:	83 ec 0c             	sub    $0xc,%esp
+c010b7e6:	ff 75 f4             	pushl  -0xc(%ebp)
+c010b7e9:	e8 e1 e7 ff ff       	call   c0109fcf <proc_run>
+c010b7ee:	83 c4 10             	add    $0x10,%esp
+        }
+    }
+    local_intr_restore(intr_flag);
+c010b7f1:	83 ec 0c             	sub    $0xc,%esp
+c010b7f4:	ff 75 f0             	pushl  -0x10(%ebp)
+c010b7f7:	e8 ae fd ff ff       	call   c010b5aa <__intr_restore>
+c010b7fc:	83 c4 10             	add    $0x10,%esp
+}
+c010b7ff:	90                   	nop
+c010b800:	c9                   	leave  
+c010b801:	c3                   	ret    
+
+c010b802 <add_timer>:
+
+// add timer to timer_list
+void
+add_timer(timer_t *timer) {
+c010b802:	55                   	push   %ebp
+c010b803:	89 e5                	mov    %esp,%ebp
+c010b805:	83 ec 38             	sub    $0x38,%esp
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c010b808:	e8 73 fd ff ff       	call   c010b580 <__intr_save>
+c010b80d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    {
+        assert(timer->expires > 0 && timer->proc != NULL);
+c010b810:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b813:	8b 00                	mov    (%eax),%eax
+c010b815:	85 c0                	test   %eax,%eax
+c010b817:	74 0a                	je     c010b823 <add_timer+0x21>
+c010b819:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b81c:	8b 40 04             	mov    0x4(%eax),%eax
+c010b81f:	85 c0                	test   %eax,%eax
+c010b821:	75 16                	jne    c010b839 <add_timer+0x37>
+c010b823:	68 b8 f5 10 c0       	push   $0xc010f5b8
+c010b828:	68 70 f5 10 c0       	push   $0xc010f570
+c010b82d:	6a 6e                	push   $0x6e
+c010b82f:	68 85 f5 10 c0       	push   $0xc010f585
+c010b834:	e8 bb 4b ff ff       	call   c01003f4 <__panic>
+        assert(list_empty(&(timer->timer_link)));
+c010b839:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b83c:	83 c0 08             	add    $0x8,%eax
+c010b83f:	89 45 dc             	mov    %eax,-0x24(%ebp)
+ * list_empty - tests whether a list is empty
+ * @list:       the list to test.
+ * */
+static inline bool
+list_empty(list_entry_t *list) {
+    return list->next == list;
+c010b842:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010b845:	8b 40 04             	mov    0x4(%eax),%eax
+c010b848:	39 45 dc             	cmp    %eax,-0x24(%ebp)
+c010b84b:	0f 94 c0             	sete   %al
+c010b84e:	0f b6 c0             	movzbl %al,%eax
+c010b851:	85 c0                	test   %eax,%eax
+c010b853:	75 16                	jne    c010b86b <add_timer+0x69>
+c010b855:	68 e4 f5 10 c0       	push   $0xc010f5e4
+c010b85a:	68 70 f5 10 c0       	push   $0xc010f570
+c010b85f:	6a 6f                	push   $0x6f
+c010b861:	68 85 f5 10 c0       	push   $0xc010f585
+c010b866:	e8 89 4b ff ff       	call   c01003f4 <__panic>
+c010b86b:	c7 45 ec 74 53 1c c0 	movl   $0xc01c5374,-0x14(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c010b872:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b875:	8b 40 04             	mov    0x4(%eax),%eax
+        list_entry_t *le = list_next(&timer_list);
+c010b878:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        while (le != &timer_list) {
+c010b87b:	eb 4a                	jmp    c010b8c7 <add_timer+0xc5>
+            timer_t *next = le2timer(le, timer_link);
+c010b87d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b880:	83 e8 08             	sub    $0x8,%eax
+c010b883:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            if (timer->expires < next->expires) {
+c010b886:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b889:	8b 10                	mov    (%eax),%edx
+c010b88b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010b88e:	8b 00                	mov    (%eax),%eax
+c010b890:	39 c2                	cmp    %eax,%edx
+c010b892:	73 13                	jae    c010b8a7 <add_timer+0xa5>
+                next->expires -= timer->expires;
+c010b894:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010b897:	8b 10                	mov    (%eax),%edx
+c010b899:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b89c:	8b 00                	mov    (%eax),%eax
+c010b89e:	29 c2                	sub    %eax,%edx
+c010b8a0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010b8a3:	89 10                	mov    %edx,(%eax)
+                break;
+c010b8a5:	eb 29                	jmp    c010b8d0 <add_timer+0xce>
+            }
+            timer->expires -= next->expires;
+c010b8a7:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b8aa:	8b 10                	mov    (%eax),%edx
+c010b8ac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010b8af:	8b 00                	mov    (%eax),%eax
+c010b8b1:	29 c2                	sub    %eax,%edx
+c010b8b3:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b8b6:	89 10                	mov    %edx,(%eax)
+c010b8b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b8bb:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010b8be:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010b8c1:	8b 40 04             	mov    0x4(%eax),%eax
+            le = list_next(le);
+c010b8c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    local_intr_save(intr_flag);
+    {
+        assert(timer->expires > 0 && timer->proc != NULL);
+        assert(list_empty(&(timer->timer_link)));
+        list_entry_t *le = list_next(&timer_list);
+        while (le != &timer_list) {
+c010b8c7:	81 7d f4 74 53 1c c0 	cmpl   $0xc01c5374,-0xc(%ebp)
+c010b8ce:	75 ad                	jne    c010b87d <add_timer+0x7b>
+                break;
+            }
+            timer->expires -= next->expires;
+            le = list_next(le);
+        }
+        list_add_before(le, &(timer->timer_link));
+c010b8d0:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b8d3:	8d 50 08             	lea    0x8(%eax),%edx
+c010b8d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010b8d9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c010b8dc:	89 55 d8             	mov    %edx,-0x28(%ebp)
+ * Insert the new element @elm *before* the element @listelm which
+ * is already in the list.
+ * */
+static inline void
+list_add_before(list_entry_t *listelm, list_entry_t *elm) {
+    __list_add(elm, listelm->prev, listelm);
+c010b8df:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010b8e2:	8b 00                	mov    (%eax),%eax
+c010b8e4:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c010b8e7:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+c010b8ea:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c010b8ed:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010b8f0:	89 45 cc             	mov    %eax,-0x34(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
+    prev->next = next->prev = elm;
+c010b8f3:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010b8f6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c010b8f9:	89 10                	mov    %edx,(%eax)
+c010b8fb:	8b 45 cc             	mov    -0x34(%ebp),%eax
+c010b8fe:	8b 10                	mov    (%eax),%edx
+c010b900:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010b903:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->next = next;
+c010b906:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010b909:	8b 55 cc             	mov    -0x34(%ebp),%edx
+c010b90c:	89 50 04             	mov    %edx,0x4(%eax)
+    elm->prev = prev;
+c010b90f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010b912:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c010b915:	89 10                	mov    %edx,(%eax)
+    }
+    local_intr_restore(intr_flag);
+c010b917:	83 ec 0c             	sub    $0xc,%esp
+c010b91a:	ff 75 f0             	pushl  -0x10(%ebp)
+c010b91d:	e8 88 fc ff ff       	call   c010b5aa <__intr_restore>
+c010b922:	83 c4 10             	add    $0x10,%esp
+}
+c010b925:	90                   	nop
+c010b926:	c9                   	leave  
+c010b927:	c3                   	ret    
+
+c010b928 <del_timer>:
+
+// del timer from timer_list
+void
+del_timer(timer_t *timer) {
+c010b928:	55                   	push   %ebp
+c010b929:	89 e5                	mov    %esp,%ebp
+c010b92b:	83 ec 38             	sub    $0x38,%esp
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c010b92e:	e8 4d fc ff ff       	call   c010b580 <__intr_save>
+c010b933:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    {
+        if (!list_empty(&(timer->timer_link))) {
+c010b936:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b939:	83 c0 08             	add    $0x8,%eax
+c010b93c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+ * list_empty - tests whether a list is empty
+ * @list:       the list to test.
+ * */
+static inline bool
+list_empty(list_entry_t *list) {
+    return list->next == list;
+c010b93f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010b942:	8b 40 04             	mov    0x4(%eax),%eax
+c010b945:	39 45 e0             	cmp    %eax,-0x20(%ebp)
+c010b948:	0f 94 c0             	sete   %al
+c010b94b:	0f b6 c0             	movzbl %al,%eax
+c010b94e:	85 c0                	test   %eax,%eax
+c010b950:	0f 85 89 00 00 00    	jne    c010b9df <del_timer+0xb7>
+            if (timer->expires != 0) {
+c010b956:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b959:	8b 00                	mov    (%eax),%eax
+c010b95b:	85 c0                	test   %eax,%eax
+c010b95d:	74 35                	je     c010b994 <del_timer+0x6c>
+                list_entry_t *le = list_next(&(timer->timer_link));
+c010b95f:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b962:	83 c0 08             	add    $0x8,%eax
+c010b965:	89 45 f0             	mov    %eax,-0x10(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c010b968:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010b96b:	8b 40 04             	mov    0x4(%eax),%eax
+c010b96e:	89 45 e8             	mov    %eax,-0x18(%ebp)
+                if (le != &timer_list) {
+c010b971:	81 7d e8 74 53 1c c0 	cmpl   $0xc01c5374,-0x18(%ebp)
+c010b978:	74 1a                	je     c010b994 <del_timer+0x6c>
+                    timer_t *next = le2timer(le, timer_link);
+c010b97a:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010b97d:	83 e8 08             	sub    $0x8,%eax
+c010b980:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                    next->expires += timer->expires;
+c010b983:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010b986:	8b 10                	mov    (%eax),%edx
+c010b988:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b98b:	8b 00                	mov    (%eax),%eax
+c010b98d:	01 c2                	add    %eax,%edx
+c010b98f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010b992:	89 10                	mov    %edx,(%eax)
+                }
+            }
+            list_del_init(&(timer->timer_link));
+c010b994:	8b 45 08             	mov    0x8(%ebp),%eax
+c010b997:	83 c0 08             	add    $0x8,%eax
+c010b99a:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010b99d:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b9a0:	89 45 dc             	mov    %eax,-0x24(%ebp)
+ * Note: list_empty() on @listelm does not return true after this, the entry is
+ * in an undefined state.
+ * */
+static inline void
+list_del(list_entry_t *listelm) {
+    __list_del(listelm->prev, listelm->next);
+c010b9a3:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010b9a6:	8b 40 04             	mov    0x4(%eax),%eax
+c010b9a9:	8b 55 dc             	mov    -0x24(%ebp),%edx
+c010b9ac:	8b 12                	mov    (%edx),%edx
+c010b9ae:	89 55 d8             	mov    %edx,-0x28(%ebp)
+c010b9b1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ * This is only for internal list manipulation where we know
+ * the prev/next entries already!
+ * */
+static inline void
+__list_del(list_entry_t *prev, list_entry_t *next) {
+    prev->next = next;
+c010b9b4:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010b9b7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c010b9ba:	89 50 04             	mov    %edx,0x4(%eax)
+    next->prev = prev;
+c010b9bd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+c010b9c0:	8b 55 d8             	mov    -0x28(%ebp),%edx
+c010b9c3:	89 10                	mov    %edx,(%eax)
+c010b9c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010b9c8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c010b9cb:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010b9ce:	8b 55 d0             	mov    -0x30(%ebp),%edx
+c010b9d1:	89 50 04             	mov    %edx,0x4(%eax)
+c010b9d4:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010b9d7:	8b 50 04             	mov    0x4(%eax),%edx
+c010b9da:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010b9dd:	89 10                	mov    %edx,(%eax)
+        }
+    }
+    local_intr_restore(intr_flag);
+c010b9df:	83 ec 0c             	sub    $0xc,%esp
+c010b9e2:	ff 75 f4             	pushl  -0xc(%ebp)
+c010b9e5:	e8 c0 fb ff ff       	call   c010b5aa <__intr_restore>
+c010b9ea:	83 c4 10             	add    $0x10,%esp
+}
+c010b9ed:	90                   	nop
+c010b9ee:	c9                   	leave  
+c010b9ef:	c3                   	ret    
+
+c010b9f0 <run_timer_list>:
+
+// call scheduler to update tick related info, and check the timer is expired? If expired, then wakup proc
+void
+run_timer_list(void) {
+c010b9f0:	55                   	push   %ebp
+c010b9f1:	89 e5                	mov    %esp,%ebp
+c010b9f3:	83 ec 28             	sub    $0x28,%esp
+    bool intr_flag;
+    local_intr_save(intr_flag);
+c010b9f6:	e8 85 fb ff ff       	call   c010b580 <__intr_save>
+c010b9fb:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010b9fe:	c7 45 e0 74 53 1c c0 	movl   $0xc01c5374,-0x20(%ebp)
+ * list_next - get the next entry
+ * @listelm:    the list head
+ **/
+static inline list_entry_t *
+list_next(list_entry_t *listelm) {
+    return listelm->next;
+c010ba05:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010ba08:	8b 40 04             	mov    0x4(%eax),%eax
+    {
+        list_entry_t *le = list_next(&timer_list);
+c010ba0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        if (le != &timer_list) {
+c010ba0e:	81 7d f4 74 53 1c c0 	cmpl   $0xc01c5374,-0xc(%ebp)
+c010ba15:	0f 84 e4 00 00 00    	je     c010baff <run_timer_list+0x10f>
+            timer_t *timer = le2timer(le, timer_link);
+c010ba1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010ba1e:	83 e8 08             	sub    $0x8,%eax
+c010ba21:	89 45 f0             	mov    %eax,-0x10(%ebp)
+            assert(timer->expires != 0);
+c010ba24:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010ba27:	8b 00                	mov    (%eax),%eax
+c010ba29:	85 c0                	test   %eax,%eax
+c010ba2b:	75 19                	jne    c010ba46 <run_timer_list+0x56>
+c010ba2d:	68 05 f6 10 c0       	push   $0xc010f605
+c010ba32:	68 70 f5 10 c0       	push   $0xc010f570
+c010ba37:	68 9c 00 00 00       	push   $0x9c
+c010ba3c:	68 85 f5 10 c0       	push   $0xc010f585
+c010ba41:	e8 ae 49 ff ff       	call   c01003f4 <__panic>
+            timer->expires --;
+c010ba46:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010ba49:	8b 00                	mov    (%eax),%eax
+c010ba4b:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010ba4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010ba51:	89 10                	mov    %edx,(%eax)
+            while (timer->expires == 0) {
+c010ba53:	e9 97 00 00 00       	jmp    c010baef <run_timer_list+0xff>
+c010ba58:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010ba5b:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010ba5e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010ba61:	8b 40 04             	mov    0x4(%eax),%eax
+                le = list_next(le);
+c010ba64:	89 45 f4             	mov    %eax,-0xc(%ebp)
+                struct proc_struct *proc = timer->proc;
+c010ba67:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010ba6a:	8b 40 04             	mov    0x4(%eax),%eax
+c010ba6d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                if (proc->wait_state != 0) {
+c010ba70:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010ba73:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
+c010ba79:	85 c0                	test   %eax,%eax
+c010ba7b:	74 26                	je     c010baa3 <run_timer_list+0xb3>
+                    assert(proc->wait_state & WT_INTERRUPTED);
+c010ba7d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010ba80:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
+c010ba86:	85 c0                	test   %eax,%eax
+c010ba88:	78 37                	js     c010bac1 <run_timer_list+0xd1>
+c010ba8a:	68 1c f6 10 c0       	push   $0xc010f61c
+c010ba8f:	68 70 f5 10 c0       	push   $0xc010f570
+c010ba94:	68 a2 00 00 00       	push   $0xa2
+c010ba99:	68 85 f5 10 c0       	push   $0xc010f585
+c010ba9e:	e8 51 49 ff ff       	call   c01003f4 <__panic>
+                }
+                else {
+                    warn("process %d's wait_state == 0.\n", proc->pid);
+c010baa3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010baa6:	8b 40 04             	mov    0x4(%eax),%eax
+c010baa9:	50                   	push   %eax
+c010baaa:	68 40 f6 10 c0       	push   $0xc010f640
+c010baaf:	68 a5 00 00 00       	push   $0xa5
+c010bab4:	68 85 f5 10 c0       	push   $0xc010f585
+c010bab9:	e8 a4 49 ff ff       	call   c0100462 <__warn>
+c010babe:	83 c4 10             	add    $0x10,%esp
+                }
+                wakeup_proc(proc);
+c010bac1:	83 ec 0c             	sub    $0xc,%esp
+c010bac4:	ff 75 e4             	pushl  -0x1c(%ebp)
+c010bac7:	e8 0d fc ff ff       	call   c010b6d9 <wakeup_proc>
+c010bacc:	83 c4 10             	add    $0x10,%esp
+                del_timer(timer);
+c010bacf:	83 ec 0c             	sub    $0xc,%esp
+c010bad2:	ff 75 f0             	pushl  -0x10(%ebp)
+c010bad5:	e8 4e fe ff ff       	call   c010b928 <del_timer>
+c010bada:	83 c4 10             	add    $0x10,%esp
+                if (le == &timer_list) {
+c010badd:	81 7d f4 74 53 1c c0 	cmpl   $0xc01c5374,-0xc(%ebp)
+c010bae4:	74 18                	je     c010bafe <run_timer_list+0x10e>
+                    break;
+                }
+                timer = le2timer(le, timer_link);
+c010bae6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010bae9:	83 e8 08             	sub    $0x8,%eax
+c010baec:	89 45 f0             	mov    %eax,-0x10(%ebp)
+        list_entry_t *le = list_next(&timer_list);
+        if (le != &timer_list) {
+            timer_t *timer = le2timer(le, timer_link);
+            assert(timer->expires != 0);
+            timer->expires --;
+            while (timer->expires == 0) {
+c010baef:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010baf2:	8b 00                	mov    (%eax),%eax
+c010baf4:	85 c0                	test   %eax,%eax
+c010baf6:	0f 84 5c ff ff ff    	je     c010ba58 <run_timer_list+0x68>
+c010bafc:	eb 01                	jmp    c010baff <run_timer_list+0x10f>
+                    warn("process %d's wait_state == 0.\n", proc->pid);
+                }
+                wakeup_proc(proc);
+                del_timer(timer);
+                if (le == &timer_list) {
+                    break;
+c010bafe:	90                   	nop
+                }
+                timer = le2timer(le, timer_link);
+            }
+        }
+        sched_class_proc_tick(current);
+c010baff:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010bb04:	83 ec 0c             	sub    $0xc,%esp
+c010bb07:	50                   	push   %eax
+c010bb08:	e8 20 fb ff ff       	call   c010b62d <sched_class_proc_tick>
+c010bb0d:	83 c4 10             	add    $0x10,%esp
+    }
+    local_intr_restore(intr_flag);
+c010bb10:	83 ec 0c             	sub    $0xc,%esp
+c010bb13:	ff 75 ec             	pushl  -0x14(%ebp)
+c010bb16:	e8 8f fa ff ff       	call   c010b5aa <__intr_restore>
+c010bb1b:	83 c4 10             	add    $0x10,%esp
+}
+c010bb1e:	90                   	nop
+c010bb1f:	c9                   	leave  
+c010bb20:	c3                   	ret    
+
+c010bb21 <skew_heap_merge>:
+}
+
+static inline skew_heap_entry_t *
+skew_heap_merge(skew_heap_entry_t *a, skew_heap_entry_t *b,
+                compare_f comp)
+{
+c010bb21:	55                   	push   %ebp
+c010bb22:	89 e5                	mov    %esp,%ebp
+c010bb24:	83 ec 18             	sub    $0x18,%esp
+     if (a == NULL) return b;
+c010bb27:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010bb2b:	75 08                	jne    c010bb35 <skew_heap_merge+0x14>
+c010bb2d:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bb30:	e9 b4 00 00 00       	jmp    c010bbe9 <skew_heap_merge+0xc8>
+     else if (b == NULL) return a;
+c010bb35:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c010bb39:	75 08                	jne    c010bb43 <skew_heap_merge+0x22>
+c010bb3b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bb3e:	e9 a6 00 00 00       	jmp    c010bbe9 <skew_heap_merge+0xc8>
+     
+     skew_heap_entry_t *l, *r;
+     if (comp(a, b) == -1)
+c010bb43:	83 ec 08             	sub    $0x8,%esp
+c010bb46:	ff 75 0c             	pushl  0xc(%ebp)
+c010bb49:	ff 75 08             	pushl  0x8(%ebp)
+c010bb4c:	8b 45 10             	mov    0x10(%ebp),%eax
+c010bb4f:	ff d0                	call   *%eax
+c010bb51:	83 c4 10             	add    $0x10,%esp
+c010bb54:	83 f8 ff             	cmp    $0xffffffff,%eax
+c010bb57:	75 49                	jne    c010bba2 <skew_heap_merge+0x81>
+     {
+          r = a->left;
+c010bb59:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bb5c:	8b 40 04             	mov    0x4(%eax),%eax
+c010bb5f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+          l = skew_heap_merge(a->right, b, comp);
+c010bb62:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bb65:	8b 40 08             	mov    0x8(%eax),%eax
+c010bb68:	83 ec 04             	sub    $0x4,%esp
+c010bb6b:	ff 75 10             	pushl  0x10(%ebp)
+c010bb6e:	ff 75 0c             	pushl  0xc(%ebp)
+c010bb71:	50                   	push   %eax
+c010bb72:	e8 aa ff ff ff       	call   c010bb21 <skew_heap_merge>
+c010bb77:	83 c4 10             	add    $0x10,%esp
+c010bb7a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+          
+          a->left = l;
+c010bb7d:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bb80:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010bb83:	89 50 04             	mov    %edx,0x4(%eax)
+          a->right = r;
+c010bb86:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bb89:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010bb8c:	89 50 08             	mov    %edx,0x8(%eax)
+          if (l) l->parent = a;
+c010bb8f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010bb93:	74 08                	je     c010bb9d <skew_heap_merge+0x7c>
+c010bb95:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010bb98:	8b 55 08             	mov    0x8(%ebp),%edx
+c010bb9b:	89 10                	mov    %edx,(%eax)
+
+          return a;
+c010bb9d:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bba0:	eb 47                	jmp    c010bbe9 <skew_heap_merge+0xc8>
+     }
+     else
+     {
+          r = b->left;
+c010bba2:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bba5:	8b 40 04             	mov    0x4(%eax),%eax
+c010bba8:	89 45 f4             	mov    %eax,-0xc(%ebp)
+          l = skew_heap_merge(a, b->right, comp);
+c010bbab:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bbae:	8b 40 08             	mov    0x8(%eax),%eax
+c010bbb1:	83 ec 04             	sub    $0x4,%esp
+c010bbb4:	ff 75 10             	pushl  0x10(%ebp)
+c010bbb7:	50                   	push   %eax
+c010bbb8:	ff 75 08             	pushl  0x8(%ebp)
+c010bbbb:	e8 61 ff ff ff       	call   c010bb21 <skew_heap_merge>
+c010bbc0:	83 c4 10             	add    $0x10,%esp
+c010bbc3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+          
+          b->left = l;
+c010bbc6:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bbc9:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010bbcc:	89 50 04             	mov    %edx,0x4(%eax)
+          b->right = r;
+c010bbcf:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bbd2:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010bbd5:	89 50 08             	mov    %edx,0x8(%eax)
+          if (l) l->parent = b;
+c010bbd8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010bbdc:	74 08                	je     c010bbe6 <skew_heap_merge+0xc5>
+c010bbde:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010bbe1:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010bbe4:	89 10                	mov    %edx,(%eax)
+
+          return b;
+c010bbe6:	8b 45 0c             	mov    0xc(%ebp),%eax
+     }
+}
+c010bbe9:	c9                   	leave  
+c010bbea:	c3                   	ret    
+
+c010bbeb <proc_stride_comp_f>:
+
+/* The compare function for two skew_heap_node_t's and the
+ * corresponding procs*/
+static int
+proc_stride_comp_f(void *a, void *b)
+{
+c010bbeb:	55                   	push   %ebp
+c010bbec:	89 e5                	mov    %esp,%ebp
+c010bbee:	83 ec 10             	sub    $0x10,%esp
+     struct proc_struct *p = le2proc(a, lab6_run_pool);
+c010bbf1:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bbf4:	2d b0 00 00 00       	sub    $0xb0,%eax
+c010bbf9:	89 45 fc             	mov    %eax,-0x4(%ebp)
+     struct proc_struct *q = le2proc(b, lab6_run_pool);
+c010bbfc:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bbff:	2d b0 00 00 00       	sub    $0xb0,%eax
+c010bc04:	89 45 f8             	mov    %eax,-0x8(%ebp)
+     int32_t c = p->lab6_stride - q->lab6_stride;
+c010bc07:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010bc0a:	8b 90 bc 00 00 00    	mov    0xbc(%eax),%edx
+c010bc10:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010bc13:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
+c010bc19:	29 c2                	sub    %eax,%edx
+c010bc1b:	89 d0                	mov    %edx,%eax
+c010bc1d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+     if (c > 0) return 1;
+c010bc20:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010bc24:	7e 07                	jle    c010bc2d <proc_stride_comp_f+0x42>
+c010bc26:	b8 01 00 00 00       	mov    $0x1,%eax
+c010bc2b:	eb 12                	jmp    c010bc3f <proc_stride_comp_f+0x54>
+     else if (c == 0) return 0;
+c010bc2d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+c010bc31:	75 07                	jne    c010bc3a <proc_stride_comp_f+0x4f>
+c010bc33:	b8 00 00 00 00       	mov    $0x0,%eax
+c010bc38:	eb 05                	jmp    c010bc3f <proc_stride_comp_f+0x54>
+     else return -1;
+c010bc3a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+c010bc3f:	c9                   	leave  
+c010bc40:	c3                   	ret    
+
+c010bc41 <stride_init>:
+ *   - max_time_slice: no need here, the variable would be assigned by the caller.
+ *
+ * hint: see libs/list.h for routines of the list structures.
+ */
+static void
+stride_init(struct run_queue *rq) {
+c010bc41:	55                   	push   %ebp
+c010bc42:	89 e5                	mov    %esp,%ebp
+c010bc44:	83 ec 10             	sub    $0x10,%esp
+     /* LAB6: 2103011371
+      * (1) init the ready process list: rq->run_list
+      * (2) init the run pool: rq->lab6_run_pool
+      * (3) set number of process: rq->proc_num to 0       
+      */
+	list_init(&(rq->run_list));
+c010bc47:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bc4a:	89 45 fc             	mov    %eax,-0x4(%ebp)
+ * list_init - initialize a new entry
+ * @elm:        new entry to be initialized
+ * */
+static inline void
+list_init(list_entry_t *elm) {
+    elm->prev = elm->next = elm;
+c010bc4d:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010bc50:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c010bc53:	89 50 04             	mov    %edx,0x4(%eax)
+c010bc56:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010bc59:	8b 50 04             	mov    0x4(%eax),%edx
+c010bc5c:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010bc5f:	89 10                	mov    %edx,(%eax)
+	rq->lab6_run_pool = NULL;
+c010bc61:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bc64:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
+	rq->proc_num = 0;
+c010bc6b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bc6e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+}
+c010bc75:	90                   	nop
+c010bc76:	c9                   	leave  
+c010bc77:	c3                   	ret    
+
+c010bc78 <stride_enqueue>:
+ * 
+ * hint: see libs/skew_heap.h for routines of the priority
+ * queue structures.
+ */
+static void
+stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
+c010bc78:	55                   	push   %ebp
+c010bc79:	89 e5                	mov    %esp,%ebp
+c010bc7b:	83 ec 18             	sub    $0x18,%esp
+      *         list_add_before: insert  a entry into the last of list   
+      * (2) recalculate proc->time_slice
+      * (3) set proc->rq pointer to rq
+      * (4) increase rq->proc_num
+      */
+	rq->lab6_run_pool = skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
+c010bc7e:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bc81:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
+c010bc87:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bc8a:	8b 40 10             	mov    0x10(%eax),%eax
+c010bc8d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010bc90:	89 55 f0             	mov    %edx,-0x10(%ebp)
+c010bc93:	c7 45 ec eb bb 10 c0 	movl   $0xc010bbeb,-0x14(%ebp)
+c010bc9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010bc9d:	89 45 e8             	mov    %eax,-0x18(%ebp)
+     compare_f comp) __attribute__((always_inline));
+
+static inline void
+skew_heap_init(skew_heap_entry_t *a)
+{
+     a->left = a->right = a->parent = NULL;
+c010bca0:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010bca3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+c010bca9:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010bcac:	8b 10                	mov    (%eax),%edx
+c010bcae:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010bcb1:	89 50 08             	mov    %edx,0x8(%eax)
+c010bcb4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010bcb7:	8b 50 08             	mov    0x8(%eax),%edx
+c010bcba:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010bcbd:	89 50 04             	mov    %edx,0x4(%eax)
+static inline skew_heap_entry_t *
+skew_heap_insert(skew_heap_entry_t *a, skew_heap_entry_t *b,
+                 compare_f comp)
+{
+     skew_heap_init(b);
+     return skew_heap_merge(a, b, comp);
+c010bcc0:	83 ec 04             	sub    $0x4,%esp
+c010bcc3:	ff 75 ec             	pushl  -0x14(%ebp)
+c010bcc6:	ff 75 f0             	pushl  -0x10(%ebp)
+c010bcc9:	ff 75 f4             	pushl  -0xc(%ebp)
+c010bccc:	e8 50 fe ff ff       	call   c010bb21 <skew_heap_merge>
+c010bcd1:	83 c4 10             	add    $0x10,%esp
+c010bcd4:	89 c2                	mov    %eax,%edx
+c010bcd6:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bcd9:	89 50 10             	mov    %edx,0x10(%eax)
+	if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
+c010bcdc:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bcdf:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
+c010bce5:	85 c0                	test   %eax,%eax
+c010bce7:	74 13                	je     c010bcfc <stride_enqueue+0x84>
+c010bce9:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bcec:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
+c010bcf2:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bcf5:	8b 40 0c             	mov    0xc(%eax),%eax
+c010bcf8:	39 c2                	cmp    %eax,%edx
+c010bcfa:	7e 0f                	jle    c010bd0b <stride_enqueue+0x93>
+		proc->time_slice = rq->max_time_slice;
+c010bcfc:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bcff:	8b 50 0c             	mov    0xc(%eax),%edx
+c010bd02:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bd05:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
+	}
+	proc->rq = rq;
+c010bd0b:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bd0e:	8b 55 08             	mov    0x8(%ebp),%edx
+c010bd11:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
+	rq->proc_num++;
+c010bd17:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bd1a:	8b 40 08             	mov    0x8(%eax),%eax
+c010bd1d:	8d 50 01             	lea    0x1(%eax),%edx
+c010bd20:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bd23:	89 50 08             	mov    %edx,0x8(%eax)
+}
+c010bd26:	90                   	nop
+c010bd27:	c9                   	leave  
+c010bd28:	c3                   	ret    
+
+c010bd29 <stride_dequeue>:
+ *
+ * hint: see libs/skew_heap.h for routines of the priority
+ * queue structures.
+ */
+static void
+stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
+c010bd29:	55                   	push   %ebp
+c010bd2a:	89 e5                	mov    %esp,%ebp
+c010bd2c:	83 ec 28             	sub    $0x28,%esp
+      * (1) remove the proc from rq correctly
+      * NOTICE: you can use skew_heap or list. Important functions
+      *         skew_heap_remove: remove a entry from skew_heap
+      *         list_del_init: remove a entry from the  list
+      */
+	rq->lab6_run_pool = skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
+c010bd2f:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010bd32:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
+c010bd38:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bd3b:	8b 40 10             	mov    0x10(%eax),%eax
+c010bd3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010bd41:	89 55 f0             	mov    %edx,-0x10(%ebp)
+c010bd44:	c7 45 ec eb bb 10 c0 	movl   $0xc010bbeb,-0x14(%ebp)
+
+static inline skew_heap_entry_t *
+skew_heap_remove(skew_heap_entry_t *a, skew_heap_entry_t *b,
+                 compare_f comp)
+{
+     skew_heap_entry_t *p   = b->parent;
+c010bd4b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010bd4e:	8b 00                	mov    (%eax),%eax
+c010bd50:	89 45 e8             	mov    %eax,-0x18(%ebp)
+     skew_heap_entry_t *rep = skew_heap_merge(b->left, b->right, comp);
+c010bd53:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010bd56:	8b 50 08             	mov    0x8(%eax),%edx
+c010bd59:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010bd5c:	8b 40 04             	mov    0x4(%eax),%eax
+c010bd5f:	83 ec 04             	sub    $0x4,%esp
+c010bd62:	ff 75 ec             	pushl  -0x14(%ebp)
+c010bd65:	52                   	push   %edx
+c010bd66:	50                   	push   %eax
+c010bd67:	e8 b5 fd ff ff       	call   c010bb21 <skew_heap_merge>
+c010bd6c:	83 c4 10             	add    $0x10,%esp
+c010bd6f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+     if (rep) rep->parent = p;
+c010bd72:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c010bd76:	74 08                	je     c010bd80 <stride_dequeue+0x57>
+c010bd78:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010bd7b:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010bd7e:	89 10                	mov    %edx,(%eax)
+     
+     if (p)
+c010bd80:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010bd84:	74 24                	je     c010bdaa <stride_dequeue+0x81>
+     {
+          if (p->left == b)
+c010bd86:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010bd89:	8b 40 04             	mov    0x4(%eax),%eax
+c010bd8c:	39 45 f0             	cmp    %eax,-0x10(%ebp)
+c010bd8f:	75 0b                	jne    c010bd9c <stride_dequeue+0x73>
+               p->left = rep;
+c010bd91:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010bd94:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010bd97:	89 50 04             	mov    %edx,0x4(%eax)
+c010bd9a:	eb 09                	jmp    c010bda5 <stride_dequeue+0x7c>
+          else p->right = rep;
+c010bd9c:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010bd9f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010bda2:	89 50 08             	mov    %edx,0x8(%eax)
+          return a;
+c010bda5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010bda8:	eb 03                	jmp    c010bdad <stride_dequeue+0x84>
+     }
+     else return rep;
+c010bdaa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010bdad:	8b 55 08             	mov    0x8(%ebp),%edx
+c010bdb0:	89 42 10             	mov    %eax,0x10(%edx)
+	rq->proc_num--;
+c010bdb3:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bdb6:	8b 40 08             	mov    0x8(%eax),%eax
+c010bdb9:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010bdbc:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bdbf:	89 50 08             	mov    %edx,0x8(%eax)
+}
+c010bdc2:	90                   	nop
+c010bdc3:	c9                   	leave  
+c010bdc4:	c3                   	ret    
+
+c010bdc5 <stride_pick_next>:
+ *
+ * hint: see libs/skew_heap.h for routines of the priority
+ * queue structures.
+ */
+static struct proc_struct *
+stride_pick_next(struct run_queue *rq) {
+c010bdc5:	55                   	push   %ebp
+c010bdc6:	89 e5                	mov    %esp,%ebp
+c010bdc8:	53                   	push   %ebx
+c010bdc9:	83 ec 10             	sub    $0x10,%esp
+             (1.1) If using skew_heap, we can use le2proc get the p from rq->lab6_run_poll
+             (1.2) If using list, we have to search list to find the p with minimum stride value
+      * (2) update p;s stride value: p->lab6_stride
+      * (3) return p
+      */
+	if (rq->lab6_run_pool == NULL) return NULL;
+c010bdcc:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bdcf:	8b 40 10             	mov    0x10(%eax),%eax
+c010bdd2:	85 c0                	test   %eax,%eax
+c010bdd4:	75 07                	jne    c010bddd <stride_pick_next+0x18>
+c010bdd6:	b8 00 00 00 00       	mov    $0x0,%eax
+c010bddb:	eb 62                	jmp    c010be3f <stride_pick_next+0x7a>
+	struct proc_struct *next_proc = le2proc(rq->lab6_run_pool, lab6_run_pool);
+c010bddd:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bde0:	8b 40 10             	mov    0x10(%eax),%eax
+c010bde3:	2d b0 00 00 00       	sub    $0xb0,%eax
+c010bde8:	89 45 f8             	mov    %eax,-0x8(%ebp)
+	if (next_proc->lab6_priority == 0 ) next_proc->lab6_stride += BIG_STRIDE;
+c010bdeb:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010bdee:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
+c010bdf4:	85 c0                	test   %eax,%eax
+c010bdf6:	75 1a                	jne    c010be12 <stride_pick_next+0x4d>
+c010bdf8:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010bdfb:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
+c010be01:	8d 90 ff ff ff 7f    	lea    0x7fffffff(%eax),%edx
+c010be07:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010be0a:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
+c010be10:	eb 2a                	jmp    c010be3c <stride_pick_next+0x77>
+	else{
+		next_proc->lab6_stride += BIG_STRIDE/next_proc->lab6_priority;
+c010be12:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010be15:	8b 88 bc 00 00 00    	mov    0xbc(%eax),%ecx
+c010be1b:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010be1e:	8b 98 c0 00 00 00    	mov    0xc0(%eax),%ebx
+c010be24:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
+c010be29:	ba 00 00 00 00       	mov    $0x0,%edx
+c010be2e:	f7 f3                	div    %ebx
+c010be30:	8d 14 01             	lea    (%ecx,%eax,1),%edx
+c010be33:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010be36:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
+	}
+	return next_proc;
+c010be3c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+c010be3f:	83 c4 10             	add    $0x10,%esp
+c010be42:	5b                   	pop    %ebx
+c010be43:	5d                   	pop    %ebp
+c010be44:	c3                   	ret    
+
+c010be45 <stride_proc_tick>:
+ * denotes the time slices left for current
+ * process. proc->need_resched is the flag variable for process
+ * switching.
+ */
+static void
+stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
+c010be45:	55                   	push   %ebp
+c010be46:	89 e5                	mov    %esp,%ebp
+     /* LAB6: 2013011371 */
+	if (proc->time_slice > 0){
+c010be48:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010be4b:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
+c010be51:	85 c0                	test   %eax,%eax
+c010be53:	7e 15                	jle    c010be6a <stride_proc_tick+0x25>
+		proc->time_slice--;
+c010be55:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010be58:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
+c010be5e:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010be61:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010be64:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
+	}
+	if (proc->time_slice == 0){
+c010be6a:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010be6d:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
+c010be73:	85 c0                	test   %eax,%eax
+c010be75:	75 0a                	jne    c010be81 <stride_proc_tick+0x3c>
+		proc->need_resched = 1;
+c010be77:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010be7a:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
+	}
+}
+c010be81:	90                   	nop
+c010be82:	5d                   	pop    %ebp
+c010be83:	c3                   	ret    
+
+c010be84 <sys_exit>:
+#include <pmm.h>
+#include <assert.h>
+#include <clock.h>
+
+static int
+sys_exit(uint32_t arg[]) {
+c010be84:	55                   	push   %ebp
+c010be85:	89 e5                	mov    %esp,%ebp
+c010be87:	83 ec 18             	sub    $0x18,%esp
+    int error_code = (int)arg[0];
+c010be8a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010be8d:	8b 00                	mov    (%eax),%eax
+c010be8f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return do_exit(error_code);
+c010be92:	83 ec 0c             	sub    $0xc,%esp
+c010be95:	ff 75 f4             	pushl  -0xc(%ebp)
+c010be98:	e8 72 e7 ff ff       	call   c010a60f <do_exit>
+c010be9d:	83 c4 10             	add    $0x10,%esp
+}
+c010bea0:	c9                   	leave  
+c010bea1:	c3                   	ret    
+
+c010bea2 <sys_fork>:
+
+static int
+sys_fork(uint32_t arg[]) {
+c010bea2:	55                   	push   %ebp
+c010bea3:	89 e5                	mov    %esp,%ebp
+c010bea5:	83 ec 18             	sub    $0x18,%esp
+    struct trapframe *tf = current->tf;
+c010bea8:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010bead:	8b 40 3c             	mov    0x3c(%eax),%eax
+c010beb0:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    uintptr_t stack = tf->tf_esp;
+c010beb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010beb6:	8b 40 44             	mov    0x44(%eax),%eax
+c010beb9:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    return do_fork(0, stack, tf);
+c010bebc:	83 ec 04             	sub    $0x4,%esp
+c010bebf:	ff 75 f4             	pushl  -0xc(%ebp)
+c010bec2:	ff 75 f0             	pushl  -0x10(%ebp)
+c010bec5:	6a 00                	push   $0x0
+c010bec7:	e8 15 e6 ff ff       	call   c010a4e1 <do_fork>
+c010becc:	83 c4 10             	add    $0x10,%esp
+}
+c010becf:	c9                   	leave  
+c010bed0:	c3                   	ret    
+
+c010bed1 <sys_wait>:
+
+static int
+sys_wait(uint32_t arg[]) {
+c010bed1:	55                   	push   %ebp
+c010bed2:	89 e5                	mov    %esp,%ebp
+c010bed4:	83 ec 18             	sub    $0x18,%esp
+    int pid = (int)arg[0];
+c010bed7:	8b 45 08             	mov    0x8(%ebp),%eax
+c010beda:	8b 00                	mov    (%eax),%eax
+c010bedc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    int *store = (int *)arg[1];
+c010bedf:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bee2:	83 c0 04             	add    $0x4,%eax
+c010bee5:	8b 00                	mov    (%eax),%eax
+c010bee7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    return do_wait(pid, store);
+c010beea:	83 ec 08             	sub    $0x8,%esp
+c010beed:	ff 75 f0             	pushl  -0x10(%ebp)
+c010bef0:	ff 75 f4             	pushl  -0xc(%ebp)
+c010bef3:	e8 27 f0 ff ff       	call   c010af1f <do_wait>
+c010bef8:	83 c4 10             	add    $0x10,%esp
+}
+c010befb:	c9                   	leave  
+c010befc:	c3                   	ret    
+
+c010befd <sys_exec>:
+
+static int
+sys_exec(uint32_t arg[]) {
+c010befd:	55                   	push   %ebp
+c010befe:	89 e5                	mov    %esp,%ebp
+c010bf00:	83 ec 18             	sub    $0x18,%esp
+    const char *name = (const char *)arg[0];
+c010bf03:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bf06:	8b 00                	mov    (%eax),%eax
+c010bf08:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    size_t len = (size_t)arg[1];
+c010bf0b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bf0e:	83 c0 04             	add    $0x4,%eax
+c010bf11:	8b 00                	mov    (%eax),%eax
+c010bf13:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    unsigned char *binary = (unsigned char *)arg[2];
+c010bf16:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bf19:	83 c0 08             	add    $0x8,%eax
+c010bf1c:	8b 00                	mov    (%eax),%eax
+c010bf1e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    size_t size = (size_t)arg[3];
+c010bf21:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bf24:	83 c0 0c             	add    $0xc,%eax
+c010bf27:	8b 00                	mov    (%eax),%eax
+c010bf29:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    return do_execve(name, len, binary, size);
+c010bf2c:	ff 75 e8             	pushl  -0x18(%ebp)
+c010bf2f:	ff 75 ec             	pushl  -0x14(%ebp)
+c010bf32:	ff 75 f0             	pushl  -0x10(%ebp)
+c010bf35:	ff 75 f4             	pushl  -0xc(%ebp)
+c010bf38:	e8 aa ee ff ff       	call   c010ade7 <do_execve>
+c010bf3d:	83 c4 10             	add    $0x10,%esp
+}
+c010bf40:	c9                   	leave  
+c010bf41:	c3                   	ret    
+
+c010bf42 <sys_yield>:
+
+static int
+sys_yield(uint32_t arg[]) {
+c010bf42:	55                   	push   %ebp
+c010bf43:	89 e5                	mov    %esp,%ebp
+c010bf45:	83 ec 08             	sub    $0x8,%esp
+    return do_yield();
+c010bf48:	e8 bc ef ff ff       	call   c010af09 <do_yield>
+}
+c010bf4d:	c9                   	leave  
+c010bf4e:	c3                   	ret    
+
+c010bf4f <sys_kill>:
+
+static int
+sys_kill(uint32_t arg[]) {
+c010bf4f:	55                   	push   %ebp
+c010bf50:	89 e5                	mov    %esp,%ebp
+c010bf52:	83 ec 18             	sub    $0x18,%esp
+    int pid = (int)arg[0];
+c010bf55:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bf58:	8b 00                	mov    (%eax),%eax
+c010bf5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return do_kill(pid);
+c010bf5d:	83 ec 0c             	sub    $0xc,%esp
+c010bf60:	ff 75 f4             	pushl  -0xc(%ebp)
+c010bf63:	e8 54 f1 ff ff       	call   c010b0bc <do_kill>
+c010bf68:	83 c4 10             	add    $0x10,%esp
+}
+c010bf6b:	c9                   	leave  
+c010bf6c:	c3                   	ret    
+
+c010bf6d <sys_getpid>:
+
+static int
+sys_getpid(uint32_t arg[]) {
+c010bf6d:	55                   	push   %ebp
+c010bf6e:	89 e5                	mov    %esp,%ebp
+    return current->pid;
+c010bf70:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010bf75:	8b 40 04             	mov    0x4(%eax),%eax
+}
+c010bf78:	5d                   	pop    %ebp
+c010bf79:	c3                   	ret    
+
+c010bf7a <sys_putc>:
+
+static int
+sys_putc(uint32_t arg[]) {
+c010bf7a:	55                   	push   %ebp
+c010bf7b:	89 e5                	mov    %esp,%ebp
+c010bf7d:	83 ec 18             	sub    $0x18,%esp
+    int c = (int)arg[0];
+c010bf80:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bf83:	8b 00                	mov    (%eax),%eax
+c010bf85:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cputchar(c);
+c010bf88:	83 ec 0c             	sub    $0xc,%esp
+c010bf8b:	ff 75 f4             	pushl  -0xc(%ebp)
+c010bf8e:	e8 21 43 ff ff       	call   c01002b4 <cputchar>
+c010bf93:	83 c4 10             	add    $0x10,%esp
+    return 0;
+c010bf96:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010bf9b:	c9                   	leave  
+c010bf9c:	c3                   	ret    
+
+c010bf9d <sys_pgdir>:
+
+static int
+sys_pgdir(uint32_t arg[]) {
+c010bf9d:	55                   	push   %ebp
+c010bf9e:	89 e5                	mov    %esp,%ebp
+c010bfa0:	83 ec 08             	sub    $0x8,%esp
+    print_pgdir();
+c010bfa3:	e8 a3 90 ff ff       	call   c010504b <print_pgdir>
+    return 0;
+c010bfa8:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010bfad:	c9                   	leave  
+c010bfae:	c3                   	ret    
+
+c010bfaf <sys_gettime>:
+
+static int
+sys_gettime(uint32_t arg[]) {
+c010bfaf:	55                   	push   %ebp
+c010bfb0:	89 e5                	mov    %esp,%ebp
+    return (int)ticks;
+c010bfb2:	a1 98 53 1c c0       	mov    0xc01c5398,%eax
+}
+c010bfb7:	5d                   	pop    %ebp
+c010bfb8:	c3                   	ret    
+
+c010bfb9 <sys_lab6_set_priority>:
+static int
+sys_lab6_set_priority(uint32_t arg[])
+{
+c010bfb9:	55                   	push   %ebp
+c010bfba:	89 e5                	mov    %esp,%ebp
+c010bfbc:	83 ec 18             	sub    $0x18,%esp
+    uint32_t priority = (uint32_t)arg[0];
+c010bfbf:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bfc2:	8b 00                	mov    (%eax),%eax
+c010bfc4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    lab6_set_priority(priority);
+c010bfc7:	83 ec 0c             	sub    $0xc,%esp
+c010bfca:	ff 75 f4             	pushl  -0xc(%ebp)
+c010bfcd:	e8 fc f4 ff ff       	call   c010b4ce <lab6_set_priority>
+c010bfd2:	83 c4 10             	add    $0x10,%esp
+    return 0;
+c010bfd5:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010bfda:	c9                   	leave  
+c010bfdb:	c3                   	ret    
+
+c010bfdc <sys_sleep>:
+
+static int
+sys_sleep(uint32_t arg[]) {
+c010bfdc:	55                   	push   %ebp
+c010bfdd:	89 e5                	mov    %esp,%ebp
+c010bfdf:	83 ec 18             	sub    $0x18,%esp
+    unsigned int time = (unsigned int)arg[0];
+c010bfe2:	8b 45 08             	mov    0x8(%ebp),%eax
+c010bfe5:	8b 00                	mov    (%eax),%eax
+c010bfe7:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    return do_sleep(time);
+c010bfea:	83 ec 0c             	sub    $0xc,%esp
+c010bfed:	ff 75 f4             	pushl  -0xc(%ebp)
+c010bff0:	e8 04 f5 ff ff       	call   c010b4f9 <do_sleep>
+c010bff5:	83 c4 10             	add    $0x10,%esp
+}
+c010bff8:	c9                   	leave  
+c010bff9:	c3                   	ret    
+
+c010bffa <syscall>:
+};
+
+#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))
+
+void
+syscall(void) {
+c010bffa:	55                   	push   %ebp
+c010bffb:	89 e5                	mov    %esp,%ebp
+c010bffd:	83 ec 28             	sub    $0x28,%esp
+    struct trapframe *tf = current->tf;
+c010c000:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010c005:	8b 40 3c             	mov    0x3c(%eax),%eax
+c010c008:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    uint32_t arg[5];
+    int num = tf->tf_regs.reg_eax;
+c010c00b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c00e:	8b 40 1c             	mov    0x1c(%eax),%eax
+c010c011:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    if (num >= 0 && num < NUM_SYSCALLS) {
+c010c014:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010c018:	78 64                	js     c010c07e <syscall+0x84>
+c010c01a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c01d:	3d ff 00 00 00       	cmp    $0xff,%eax
+c010c022:	77 5a                	ja     c010c07e <syscall+0x84>
+        if (syscalls[num] != NULL) {
+c010c024:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c027:	8b 04 85 a0 1a 13 c0 	mov    -0x3fece560(,%eax,4),%eax
+c010c02e:	85 c0                	test   %eax,%eax
+c010c030:	74 4c                	je     c010c07e <syscall+0x84>
+            arg[0] = tf->tf_regs.reg_edx;
+c010c032:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c035:	8b 40 14             	mov    0x14(%eax),%eax
+c010c038:	89 45 dc             	mov    %eax,-0x24(%ebp)
+            arg[1] = tf->tf_regs.reg_ecx;
+c010c03b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c03e:	8b 40 18             	mov    0x18(%eax),%eax
+c010c041:	89 45 e0             	mov    %eax,-0x20(%ebp)
+            arg[2] = tf->tf_regs.reg_ebx;
+c010c044:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c047:	8b 40 10             	mov    0x10(%eax),%eax
+c010c04a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            arg[3] = tf->tf_regs.reg_edi;
+c010c04d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c050:	8b 00                	mov    (%eax),%eax
+c010c052:	89 45 e8             	mov    %eax,-0x18(%ebp)
+            arg[4] = tf->tf_regs.reg_esi;
+c010c055:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c058:	8b 40 04             	mov    0x4(%eax),%eax
+c010c05b:	89 45 ec             	mov    %eax,-0x14(%ebp)
+            tf->tf_regs.reg_eax = syscalls[num](arg);
+c010c05e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c061:	8b 04 85 a0 1a 13 c0 	mov    -0x3fece560(,%eax,4),%eax
+c010c068:	83 ec 0c             	sub    $0xc,%esp
+c010c06b:	8d 55 dc             	lea    -0x24(%ebp),%edx
+c010c06e:	52                   	push   %edx
+c010c06f:	ff d0                	call   *%eax
+c010c071:	83 c4 10             	add    $0x10,%esp
+c010c074:	89 c2                	mov    %eax,%edx
+c010c076:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c079:	89 50 1c             	mov    %edx,0x1c(%eax)
+            return ;
+c010c07c:	eb 37                	jmp    c010c0b5 <syscall+0xbb>
+        }
+    }
+    print_trapframe(tf);
+c010c07e:	83 ec 0c             	sub    $0xc,%esp
+c010c081:	ff 75 f4             	pushl  -0xc(%ebp)
+c010c084:	e8 7d 63 ff ff       	call   c0102406 <print_trapframe>
+c010c089:	83 c4 10             	add    $0x10,%esp
+    panic("undefined syscall %d, pid = %d, name = %s.\n",
+c010c08c:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010c091:	8d 50 48             	lea    0x48(%eax),%edx
+c010c094:	a1 08 33 1c c0       	mov    0xc01c3308,%eax
+c010c099:	8b 40 04             	mov    0x4(%eax),%eax
+c010c09c:	83 ec 08             	sub    $0x8,%esp
+c010c09f:	52                   	push   %edx
+c010c0a0:	50                   	push   %eax
+c010c0a1:	ff 75 f0             	pushl  -0x10(%ebp)
+c010c0a4:	68 70 f6 10 c0       	push   $0xc010f670
+c010c0a9:	6a 79                	push   $0x79
+c010c0ab:	68 9c f6 10 c0       	push   $0xc010f69c
+c010c0b0:	e8 3f 43 ff ff       	call   c01003f4 <__panic>
+            num, current->pid, current->name);
+}
+c010c0b5:	c9                   	leave  
+c010c0b6:	c3                   	ret    
+
+c010c0b7 <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+c010c0b7:	55                   	push   %ebp
+c010c0b8:	89 e5                	mov    %esp,%ebp
+c010c0ba:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+c010c0bd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+c010c0c4:	eb 04                	jmp    c010c0ca <strlen+0x13>
+        cnt ++;
+c010c0c6:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+c010c0ca:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c0cd:	8d 50 01             	lea    0x1(%eax),%edx
+c010c0d0:	89 55 08             	mov    %edx,0x8(%ebp)
+c010c0d3:	0f b6 00             	movzbl (%eax),%eax
+c010c0d6:	84 c0                	test   %al,%al
+c010c0d8:	75 ec                	jne    c010c0c6 <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+c010c0da:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+c010c0dd:	c9                   	leave  
+c010c0de:	c3                   	ret    
+
+c010c0df <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+c010c0df:	55                   	push   %ebp
+c010c0e0:	89 e5                	mov    %esp,%ebp
+c010c0e2:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+c010c0e5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+c010c0ec:	eb 04                	jmp    c010c0f2 <strnlen+0x13>
+        cnt ++;
+c010c0ee:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+c010c0f2:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010c0f5:	3b 45 0c             	cmp    0xc(%ebp),%eax
+c010c0f8:	73 10                	jae    c010c10a <strnlen+0x2b>
+c010c0fa:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c0fd:	8d 50 01             	lea    0x1(%eax),%edx
+c010c100:	89 55 08             	mov    %edx,0x8(%ebp)
+c010c103:	0f b6 00             	movzbl (%eax),%eax
+c010c106:	84 c0                	test   %al,%al
+c010c108:	75 e4                	jne    c010c0ee <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+c010c10a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+c010c10d:	c9                   	leave  
+c010c10e:	c3                   	ret    
+
+c010c10f <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+c010c10f:	55                   	push   %ebp
+c010c110:	89 e5                	mov    %esp,%ebp
+c010c112:	57                   	push   %edi
+c010c113:	56                   	push   %esi
+c010c114:	83 ec 20             	sub    $0x20,%esp
+c010c117:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c11a:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010c11d:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c120:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+c010c123:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010c126:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c129:	89 d1                	mov    %edx,%ecx
+c010c12b:	89 c2                	mov    %eax,%edx
+c010c12d:	89 ce                	mov    %ecx,%esi
+c010c12f:	89 d7                	mov    %edx,%edi
+c010c131:	ac                   	lods   %ds:(%esi),%al
+c010c132:	aa                   	stos   %al,%es:(%edi)
+c010c133:	84 c0                	test   %al,%al
+c010c135:	75 fa                	jne    c010c131 <strcpy+0x22>
+c010c137:	89 fa                	mov    %edi,%edx
+c010c139:	89 f1                	mov    %esi,%ecx
+c010c13b:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+c010c13e:	89 55 e8             	mov    %edx,-0x18(%ebp)
+c010c141:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+c010c144:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+c010c147:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+c010c148:	83 c4 20             	add    $0x20,%esp
+c010c14b:	5e                   	pop    %esi
+c010c14c:	5f                   	pop    %edi
+c010c14d:	5d                   	pop    %ebp
+c010c14e:	c3                   	ret    
+
+c010c14f <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+c010c14f:	55                   	push   %ebp
+c010c150:	89 e5                	mov    %esp,%ebp
+c010c152:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+c010c155:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c158:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+c010c15b:	eb 21                	jmp    c010c17e <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+c010c15d:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c160:	0f b6 10             	movzbl (%eax),%edx
+c010c163:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010c166:	88 10                	mov    %dl,(%eax)
+c010c168:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010c16b:	0f b6 00             	movzbl (%eax),%eax
+c010c16e:	84 c0                	test   %al,%al
+c010c170:	74 04                	je     c010c176 <strncpy+0x27>
+            src ++;
+c010c172:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+c010c176:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+c010c17a:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+c010c17e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010c182:	75 d9                	jne    c010c15d <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+c010c184:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+c010c187:	c9                   	leave  
+c010c188:	c3                   	ret    
+
+c010c189 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+c010c189:	55                   	push   %ebp
+c010c18a:	89 e5                	mov    %esp,%ebp
+c010c18c:	57                   	push   %edi
+c010c18d:	56                   	push   %esi
+c010c18e:	83 ec 20             	sub    $0x20,%esp
+c010c191:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c194:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010c197:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c19a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+c010c19d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010c1a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c1a3:	89 d1                	mov    %edx,%ecx
+c010c1a5:	89 c2                	mov    %eax,%edx
+c010c1a7:	89 ce                	mov    %ecx,%esi
+c010c1a9:	89 d7                	mov    %edx,%edi
+c010c1ab:	ac                   	lods   %ds:(%esi),%al
+c010c1ac:	ae                   	scas   %es:(%edi),%al
+c010c1ad:	75 08                	jne    c010c1b7 <strcmp+0x2e>
+c010c1af:	84 c0                	test   %al,%al
+c010c1b1:	75 f8                	jne    c010c1ab <strcmp+0x22>
+c010c1b3:	31 c0                	xor    %eax,%eax
+c010c1b5:	eb 04                	jmp    c010c1bb <strcmp+0x32>
+c010c1b7:	19 c0                	sbb    %eax,%eax
+c010c1b9:	0c 01                	or     $0x1,%al
+c010c1bb:	89 fa                	mov    %edi,%edx
+c010c1bd:	89 f1                	mov    %esi,%ecx
+c010c1bf:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010c1c2:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+c010c1c5:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+c010c1c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+c010c1cb:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+c010c1cc:	83 c4 20             	add    $0x20,%esp
+c010c1cf:	5e                   	pop    %esi
+c010c1d0:	5f                   	pop    %edi
+c010c1d1:	5d                   	pop    %ebp
+c010c1d2:	c3                   	ret    
+
+c010c1d3 <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+c010c1d3:	55                   	push   %ebp
+c010c1d4:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+c010c1d6:	eb 0c                	jmp    c010c1e4 <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+c010c1d8:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+c010c1dc:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+c010c1e0:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+c010c1e4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010c1e8:	74 1a                	je     c010c204 <strncmp+0x31>
+c010c1ea:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c1ed:	0f b6 00             	movzbl (%eax),%eax
+c010c1f0:	84 c0                	test   %al,%al
+c010c1f2:	74 10                	je     c010c204 <strncmp+0x31>
+c010c1f4:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c1f7:	0f b6 10             	movzbl (%eax),%edx
+c010c1fa:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c1fd:	0f b6 00             	movzbl (%eax),%eax
+c010c200:	38 c2                	cmp    %al,%dl
+c010c202:	74 d4                	je     c010c1d8 <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+c010c204:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010c208:	74 18                	je     c010c222 <strncmp+0x4f>
+c010c20a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c20d:	0f b6 00             	movzbl (%eax),%eax
+c010c210:	0f b6 d0             	movzbl %al,%edx
+c010c213:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c216:	0f b6 00             	movzbl (%eax),%eax
+c010c219:	0f b6 c0             	movzbl %al,%eax
+c010c21c:	29 c2                	sub    %eax,%edx
+c010c21e:	89 d0                	mov    %edx,%eax
+c010c220:	eb 05                	jmp    c010c227 <strncmp+0x54>
+c010c222:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010c227:	5d                   	pop    %ebp
+c010c228:	c3                   	ret    
+
+c010c229 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+c010c229:	55                   	push   %ebp
+c010c22a:	89 e5                	mov    %esp,%ebp
+c010c22c:	83 ec 04             	sub    $0x4,%esp
+c010c22f:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c232:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+c010c235:	eb 14                	jmp    c010c24b <strchr+0x22>
+        if (*s == c) {
+c010c237:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c23a:	0f b6 00             	movzbl (%eax),%eax
+c010c23d:	3a 45 fc             	cmp    -0x4(%ebp),%al
+c010c240:	75 05                	jne    c010c247 <strchr+0x1e>
+            return (char *)s;
+c010c242:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c245:	eb 13                	jmp    c010c25a <strchr+0x31>
+        }
+        s ++;
+c010c247:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+c010c24b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c24e:	0f b6 00             	movzbl (%eax),%eax
+c010c251:	84 c0                	test   %al,%al
+c010c253:	75 e2                	jne    c010c237 <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+c010c255:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010c25a:	c9                   	leave  
+c010c25b:	c3                   	ret    
+
+c010c25c <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+c010c25c:	55                   	push   %ebp
+c010c25d:	89 e5                	mov    %esp,%ebp
+c010c25f:	83 ec 04             	sub    $0x4,%esp
+c010c262:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c265:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+c010c268:	eb 0f                	jmp    c010c279 <strfind+0x1d>
+        if (*s == c) {
+c010c26a:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c26d:	0f b6 00             	movzbl (%eax),%eax
+c010c270:	3a 45 fc             	cmp    -0x4(%ebp),%al
+c010c273:	74 10                	je     c010c285 <strfind+0x29>
+            break;
+        }
+        s ++;
+c010c275:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+c010c279:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c27c:	0f b6 00             	movzbl (%eax),%eax
+c010c27f:	84 c0                	test   %al,%al
+c010c281:	75 e7                	jne    c010c26a <strfind+0xe>
+c010c283:	eb 01                	jmp    c010c286 <strfind+0x2a>
+        if (*s == c) {
+            break;
+c010c285:	90                   	nop
+        }
+        s ++;
+    }
+    return (char *)s;
+c010c286:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+c010c289:	c9                   	leave  
+c010c28a:	c3                   	ret    
+
+c010c28b <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+c010c28b:	55                   	push   %ebp
+c010c28c:	89 e5                	mov    %esp,%ebp
+c010c28e:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+c010c291:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+c010c298:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+c010c29f:	eb 04                	jmp    c010c2a5 <strtol+0x1a>
+        s ++;
+c010c2a1:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+c010c2a5:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c2a8:	0f b6 00             	movzbl (%eax),%eax
+c010c2ab:	3c 20                	cmp    $0x20,%al
+c010c2ad:	74 f2                	je     c010c2a1 <strtol+0x16>
+c010c2af:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c2b2:	0f b6 00             	movzbl (%eax),%eax
+c010c2b5:	3c 09                	cmp    $0x9,%al
+c010c2b7:	74 e8                	je     c010c2a1 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+c010c2b9:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c2bc:	0f b6 00             	movzbl (%eax),%eax
+c010c2bf:	3c 2b                	cmp    $0x2b,%al
+c010c2c1:	75 06                	jne    c010c2c9 <strtol+0x3e>
+        s ++;
+c010c2c3:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+c010c2c7:	eb 15                	jmp    c010c2de <strtol+0x53>
+    }
+    else if (*s == '-') {
+c010c2c9:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c2cc:	0f b6 00             	movzbl (%eax),%eax
+c010c2cf:	3c 2d                	cmp    $0x2d,%al
+c010c2d1:	75 0b                	jne    c010c2de <strtol+0x53>
+        s ++, neg = 1;
+c010c2d3:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+c010c2d7:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+c010c2de:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010c2e2:	74 06                	je     c010c2ea <strtol+0x5f>
+c010c2e4:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+c010c2e8:	75 24                	jne    c010c30e <strtol+0x83>
+c010c2ea:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c2ed:	0f b6 00             	movzbl (%eax),%eax
+c010c2f0:	3c 30                	cmp    $0x30,%al
+c010c2f2:	75 1a                	jne    c010c30e <strtol+0x83>
+c010c2f4:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c2f7:	83 c0 01             	add    $0x1,%eax
+c010c2fa:	0f b6 00             	movzbl (%eax),%eax
+c010c2fd:	3c 78                	cmp    $0x78,%al
+c010c2ff:	75 0d                	jne    c010c30e <strtol+0x83>
+        s += 2, base = 16;
+c010c301:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+c010c305:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+c010c30c:	eb 2a                	jmp    c010c338 <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+c010c30e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010c312:	75 17                	jne    c010c32b <strtol+0xa0>
+c010c314:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c317:	0f b6 00             	movzbl (%eax),%eax
+c010c31a:	3c 30                	cmp    $0x30,%al
+c010c31c:	75 0d                	jne    c010c32b <strtol+0xa0>
+        s ++, base = 8;
+c010c31e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+c010c322:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+c010c329:	eb 0d                	jmp    c010c338 <strtol+0xad>
+    }
+    else if (base == 0) {
+c010c32b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+c010c32f:	75 07                	jne    c010c338 <strtol+0xad>
+        base = 10;
+c010c331:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+c010c338:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c33b:	0f b6 00             	movzbl (%eax),%eax
+c010c33e:	3c 2f                	cmp    $0x2f,%al
+c010c340:	7e 1b                	jle    c010c35d <strtol+0xd2>
+c010c342:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c345:	0f b6 00             	movzbl (%eax),%eax
+c010c348:	3c 39                	cmp    $0x39,%al
+c010c34a:	7f 11                	jg     c010c35d <strtol+0xd2>
+            dig = *s - '0';
+c010c34c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c34f:	0f b6 00             	movzbl (%eax),%eax
+c010c352:	0f be c0             	movsbl %al,%eax
+c010c355:	83 e8 30             	sub    $0x30,%eax
+c010c358:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010c35b:	eb 48                	jmp    c010c3a5 <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+c010c35d:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c360:	0f b6 00             	movzbl (%eax),%eax
+c010c363:	3c 60                	cmp    $0x60,%al
+c010c365:	7e 1b                	jle    c010c382 <strtol+0xf7>
+c010c367:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c36a:	0f b6 00             	movzbl (%eax),%eax
+c010c36d:	3c 7a                	cmp    $0x7a,%al
+c010c36f:	7f 11                	jg     c010c382 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+c010c371:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c374:	0f b6 00             	movzbl (%eax),%eax
+c010c377:	0f be c0             	movsbl %al,%eax
+c010c37a:	83 e8 57             	sub    $0x57,%eax
+c010c37d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010c380:	eb 23                	jmp    c010c3a5 <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+c010c382:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c385:	0f b6 00             	movzbl (%eax),%eax
+c010c388:	3c 40                	cmp    $0x40,%al
+c010c38a:	7e 3c                	jle    c010c3c8 <strtol+0x13d>
+c010c38c:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c38f:	0f b6 00             	movzbl (%eax),%eax
+c010c392:	3c 5a                	cmp    $0x5a,%al
+c010c394:	7f 32                	jg     c010c3c8 <strtol+0x13d>
+            dig = *s - 'A' + 10;
+c010c396:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c399:	0f b6 00             	movzbl (%eax),%eax
+c010c39c:	0f be c0             	movsbl %al,%eax
+c010c39f:	83 e8 37             	sub    $0x37,%eax
+c010c3a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+c010c3a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c3a8:	3b 45 10             	cmp    0x10(%ebp),%eax
+c010c3ab:	7d 1a                	jge    c010c3c7 <strtol+0x13c>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+c010c3ad:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+c010c3b1:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010c3b4:	0f af 45 10          	imul   0x10(%ebp),%eax
+c010c3b8:	89 c2                	mov    %eax,%edx
+c010c3ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c3bd:	01 d0                	add    %edx,%eax
+c010c3bf:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+c010c3c2:	e9 71 ff ff ff       	jmp    c010c338 <strtol+0xad>
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+            break;
+c010c3c7:	90                   	nop
+        }
+        s ++, val = (val * base) + dig;
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+c010c3c8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c010c3cc:	74 08                	je     c010c3d6 <strtol+0x14b>
+        *endptr = (char *) s;
+c010c3ce:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c3d1:	8b 55 08             	mov    0x8(%ebp),%edx
+c010c3d4:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+c010c3d6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+c010c3da:	74 07                	je     c010c3e3 <strtol+0x158>
+c010c3dc:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010c3df:	f7 d8                	neg    %eax
+c010c3e1:	eb 03                	jmp    c010c3e6 <strtol+0x15b>
+c010c3e3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+c010c3e6:	c9                   	leave  
+c010c3e7:	c3                   	ret    
+
+c010c3e8 <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+c010c3e8:	55                   	push   %ebp
+c010c3e9:	89 e5                	mov    %esp,%ebp
+c010c3eb:	57                   	push   %edi
+c010c3ec:	83 ec 24             	sub    $0x24,%esp
+c010c3ef:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c3f2:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+c010c3f5:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+c010c3f9:	8b 55 08             	mov    0x8(%ebp),%edx
+c010c3fc:	89 55 f8             	mov    %edx,-0x8(%ebp)
+c010c3ff:	88 45 f7             	mov    %al,-0x9(%ebp)
+c010c402:	8b 45 10             	mov    0x10(%ebp),%eax
+c010c405:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+c010c408:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+c010c40b:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+c010c40f:	8b 55 f8             	mov    -0x8(%ebp),%edx
+c010c412:	89 d7                	mov    %edx,%edi
+c010c414:	f3 aa                	rep stos %al,%es:(%edi)
+c010c416:	89 fa                	mov    %edi,%edx
+c010c418:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+c010c41b:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+c010c41e:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010c421:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+c010c422:	83 c4 24             	add    $0x24,%esp
+c010c425:	5f                   	pop    %edi
+c010c426:	5d                   	pop    %ebp
+c010c427:	c3                   	ret    
+
+c010c428 <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+c010c428:	55                   	push   %ebp
+c010c429:	89 e5                	mov    %esp,%ebp
+c010c42b:	57                   	push   %edi
+c010c42c:	56                   	push   %esi
+c010c42d:	53                   	push   %ebx
+c010c42e:	83 ec 30             	sub    $0x30,%esp
+c010c431:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c434:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010c437:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c43a:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010c43d:	8b 45 10             	mov    0x10(%ebp),%eax
+c010c440:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+c010c443:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c446:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+c010c449:	73 42                	jae    c010c48d <memmove+0x65>
+c010c44b:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c44e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c010c451:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010c454:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c010c457:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010c45a:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+c010c45d:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010c460:	c1 e8 02             	shr    $0x2,%eax
+c010c463:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+c010c465:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010c468:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010c46b:	89 d7                	mov    %edx,%edi
+c010c46d:	89 c6                	mov    %eax,%esi
+c010c46f:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+c010c471:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+c010c474:	83 e1 03             	and    $0x3,%ecx
+c010c477:	74 02                	je     c010c47b <memmove+0x53>
+c010c479:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+c010c47b:	89 f0                	mov    %esi,%eax
+c010c47d:	89 fa                	mov    %edi,%edx
+c010c47f:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+c010c482:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+c010c485:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+c010c488:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+c010c48b:	eb 36                	jmp    c010c4c3 <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+c010c48d:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010c490:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010c493:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010c496:	01 c2                	add    %eax,%edx
+c010c498:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010c49b:	8d 48 ff             	lea    -0x1(%eax),%ecx
+c010c49e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c4a1:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+c010c4a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010c4a7:	89 c1                	mov    %eax,%ecx
+c010c4a9:	89 d8                	mov    %ebx,%eax
+c010c4ab:	89 d6                	mov    %edx,%esi
+c010c4ad:	89 c7                	mov    %eax,%edi
+c010c4af:	fd                   	std    
+c010c4b0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+c010c4b2:	fc                   	cld    
+c010c4b3:	89 f8                	mov    %edi,%eax
+c010c4b5:	89 f2                	mov    %esi,%edx
+c010c4b7:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+c010c4ba:	89 55 c8             	mov    %edx,-0x38(%ebp)
+c010c4bd:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+c010c4c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+c010c4c3:	83 c4 30             	add    $0x30,%esp
+c010c4c6:	5b                   	pop    %ebx
+c010c4c7:	5e                   	pop    %esi
+c010c4c8:	5f                   	pop    %edi
+c010c4c9:	5d                   	pop    %ebp
+c010c4ca:	c3                   	ret    
+
+c010c4cb <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+c010c4cb:	55                   	push   %ebp
+c010c4cc:	89 e5                	mov    %esp,%ebp
+c010c4ce:	57                   	push   %edi
+c010c4cf:	56                   	push   %esi
+c010c4d0:	83 ec 20             	sub    $0x20,%esp
+c010c4d3:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c4d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010c4d9:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c4dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010c4df:	8b 45 10             	mov    0x10(%ebp),%eax
+c010c4e2:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+c010c4e5:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010c4e8:	c1 e8 02             	shr    $0x2,%eax
+c010c4eb:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+c010c4ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010c4f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c4f3:	89 d7                	mov    %edx,%edi
+c010c4f5:	89 c6                	mov    %eax,%esi
+c010c4f7:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+c010c4f9:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+c010c4fc:	83 e1 03             	and    $0x3,%ecx
+c010c4ff:	74 02                	je     c010c503 <memcpy+0x38>
+c010c501:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+c010c503:	89 f0                	mov    %esi,%eax
+c010c505:	89 fa                	mov    %edi,%edx
+c010c507:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+c010c50a:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+c010c50d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+c010c510:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+c010c513:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+c010c514:	83 c4 20             	add    $0x20,%esp
+c010c517:	5e                   	pop    %esi
+c010c518:	5f                   	pop    %edi
+c010c519:	5d                   	pop    %ebp
+c010c51a:	c3                   	ret    
+
+c010c51b <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+c010c51b:	55                   	push   %ebp
+c010c51c:	89 e5                	mov    %esp,%ebp
+c010c51e:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+c010c521:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c524:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+c010c527:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010c52a:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+c010c52d:	eb 30                	jmp    c010c55f <memcmp+0x44>
+        if (*s1 != *s2) {
+c010c52f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010c532:	0f b6 10             	movzbl (%eax),%edx
+c010c535:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010c538:	0f b6 00             	movzbl (%eax),%eax
+c010c53b:	38 c2                	cmp    %al,%dl
+c010c53d:	74 18                	je     c010c557 <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+c010c53f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+c010c542:	0f b6 00             	movzbl (%eax),%eax
+c010c545:	0f b6 d0             	movzbl %al,%edx
+c010c548:	8b 45 f8             	mov    -0x8(%ebp),%eax
+c010c54b:	0f b6 00             	movzbl (%eax),%eax
+c010c54e:	0f b6 c0             	movzbl %al,%eax
+c010c551:	29 c2                	sub    %eax,%edx
+c010c553:	89 d0                	mov    %edx,%eax
+c010c555:	eb 1a                	jmp    c010c571 <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+c010c557:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+c010c55b:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+c010c55f:	8b 45 10             	mov    0x10(%ebp),%eax
+c010c562:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010c565:	89 55 10             	mov    %edx,0x10(%ebp)
+c010c568:	85 c0                	test   %eax,%eax
+c010c56a:	75 c3                	jne    c010c52f <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+c010c56c:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+c010c571:	c9                   	leave  
+c010c572:	c3                   	ret    
+
+c010c573 <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+c010c573:	55                   	push   %ebp
+c010c574:	89 e5                	mov    %esp,%ebp
+c010c576:	83 ec 38             	sub    $0x38,%esp
+c010c579:	8b 45 10             	mov    0x10(%ebp),%eax
+c010c57c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+c010c57f:	8b 45 14             	mov    0x14(%ebp),%eax
+c010c582:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+c010c585:	8b 45 d0             	mov    -0x30(%ebp),%eax
+c010c588:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+c010c58b:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010c58e:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+c010c591:	8b 45 18             	mov    0x18(%ebp),%eax
+c010c594:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+c010c597:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010c59a:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010c59d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c010c5a0:	89 55 f0             	mov    %edx,-0x10(%ebp)
+c010c5a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c5a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
+c010c5a9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+c010c5ad:	74 1c                	je     c010c5cb <printnum+0x58>
+c010c5af:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c5b2:	ba 00 00 00 00       	mov    $0x0,%edx
+c010c5b7:	f7 75 e4             	divl   -0x1c(%ebp)
+c010c5ba:	89 55 f4             	mov    %edx,-0xc(%ebp)
+c010c5bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c5c0:	ba 00 00 00 00       	mov    $0x0,%edx
+c010c5c5:	f7 75 e4             	divl   -0x1c(%ebp)
+c010c5c8:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010c5cb:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010c5ce:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010c5d1:	f7 75 e4             	divl   -0x1c(%ebp)
+c010c5d4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c010c5d7:	89 55 dc             	mov    %edx,-0x24(%ebp)
+c010c5da:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010c5dd:	8b 55 f0             	mov    -0x10(%ebp),%edx
+c010c5e0:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010c5e3:	89 55 ec             	mov    %edx,-0x14(%ebp)
+c010c5e6:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010c5e9:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+c010c5ec:	8b 45 18             	mov    0x18(%ebp),%eax
+c010c5ef:	ba 00 00 00 00       	mov    $0x0,%edx
+c010c5f4:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+c010c5f7:	77 41                	ja     c010c63a <printnum+0xc7>
+c010c5f9:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+c010c5fc:	72 05                	jb     c010c603 <printnum+0x90>
+c010c5fe:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+c010c601:	77 37                	ja     c010c63a <printnum+0xc7>
+        printnum(putch, putdat, result, base, width - 1, padc);
+c010c603:	8b 45 1c             	mov    0x1c(%ebp),%eax
+c010c606:	83 e8 01             	sub    $0x1,%eax
+c010c609:	83 ec 04             	sub    $0x4,%esp
+c010c60c:	ff 75 20             	pushl  0x20(%ebp)
+c010c60f:	50                   	push   %eax
+c010c610:	ff 75 18             	pushl  0x18(%ebp)
+c010c613:	ff 75 ec             	pushl  -0x14(%ebp)
+c010c616:	ff 75 e8             	pushl  -0x18(%ebp)
+c010c619:	ff 75 0c             	pushl  0xc(%ebp)
+c010c61c:	ff 75 08             	pushl  0x8(%ebp)
+c010c61f:	e8 4f ff ff ff       	call   c010c573 <printnum>
+c010c624:	83 c4 20             	add    $0x20,%esp
+c010c627:	eb 1b                	jmp    c010c644 <printnum+0xd1>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+c010c629:	83 ec 08             	sub    $0x8,%esp
+c010c62c:	ff 75 0c             	pushl  0xc(%ebp)
+c010c62f:	ff 75 20             	pushl  0x20(%ebp)
+c010c632:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c635:	ff d0                	call   *%eax
+c010c637:	83 c4 10             	add    $0x10,%esp
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+c010c63a:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+c010c63e:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+c010c642:	7f e5                	jg     c010c629 <printnum+0xb6>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+c010c644:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010c647:	05 c4 f7 10 c0       	add    $0xc010f7c4,%eax
+c010c64c:	0f b6 00             	movzbl (%eax),%eax
+c010c64f:	0f be c0             	movsbl %al,%eax
+c010c652:	83 ec 08             	sub    $0x8,%esp
+c010c655:	ff 75 0c             	pushl  0xc(%ebp)
+c010c658:	50                   	push   %eax
+c010c659:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c65c:	ff d0                	call   *%eax
+c010c65e:	83 c4 10             	add    $0x10,%esp
+}
+c010c661:	90                   	nop
+c010c662:	c9                   	leave  
+c010c663:	c3                   	ret    
+
+c010c664 <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+c010c664:	55                   	push   %ebp
+c010c665:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+c010c667:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+c010c66b:	7e 14                	jle    c010c681 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+c010c66d:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c670:	8b 00                	mov    (%eax),%eax
+c010c672:	8d 48 08             	lea    0x8(%eax),%ecx
+c010c675:	8b 55 08             	mov    0x8(%ebp),%edx
+c010c678:	89 0a                	mov    %ecx,(%edx)
+c010c67a:	8b 50 04             	mov    0x4(%eax),%edx
+c010c67d:	8b 00                	mov    (%eax),%eax
+c010c67f:	eb 30                	jmp    c010c6b1 <getuint+0x4d>
+    }
+    else if (lflag) {
+c010c681:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c010c685:	74 16                	je     c010c69d <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+c010c687:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c68a:	8b 00                	mov    (%eax),%eax
+c010c68c:	8d 48 04             	lea    0x4(%eax),%ecx
+c010c68f:	8b 55 08             	mov    0x8(%ebp),%edx
+c010c692:	89 0a                	mov    %ecx,(%edx)
+c010c694:	8b 00                	mov    (%eax),%eax
+c010c696:	ba 00 00 00 00       	mov    $0x0,%edx
+c010c69b:	eb 14                	jmp    c010c6b1 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+c010c69d:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c6a0:	8b 00                	mov    (%eax),%eax
+c010c6a2:	8d 48 04             	lea    0x4(%eax),%ecx
+c010c6a5:	8b 55 08             	mov    0x8(%ebp),%edx
+c010c6a8:	89 0a                	mov    %ecx,(%edx)
+c010c6aa:	8b 00                	mov    (%eax),%eax
+c010c6ac:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+c010c6b1:	5d                   	pop    %ebp
+c010c6b2:	c3                   	ret    
+
+c010c6b3 <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+c010c6b3:	55                   	push   %ebp
+c010c6b4:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+c010c6b6:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+c010c6ba:	7e 14                	jle    c010c6d0 <getint+0x1d>
+        return va_arg(*ap, long long);
+c010c6bc:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c6bf:	8b 00                	mov    (%eax),%eax
+c010c6c1:	8d 48 08             	lea    0x8(%eax),%ecx
+c010c6c4:	8b 55 08             	mov    0x8(%ebp),%edx
+c010c6c7:	89 0a                	mov    %ecx,(%edx)
+c010c6c9:	8b 50 04             	mov    0x4(%eax),%edx
+c010c6cc:	8b 00                	mov    (%eax),%eax
+c010c6ce:	eb 28                	jmp    c010c6f8 <getint+0x45>
+    }
+    else if (lflag) {
+c010c6d0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+c010c6d4:	74 12                	je     c010c6e8 <getint+0x35>
+        return va_arg(*ap, long);
+c010c6d6:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c6d9:	8b 00                	mov    (%eax),%eax
+c010c6db:	8d 48 04             	lea    0x4(%eax),%ecx
+c010c6de:	8b 55 08             	mov    0x8(%ebp),%edx
+c010c6e1:	89 0a                	mov    %ecx,(%edx)
+c010c6e3:	8b 00                	mov    (%eax),%eax
+c010c6e5:	99                   	cltd   
+c010c6e6:	eb 10                	jmp    c010c6f8 <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+c010c6e8:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c6eb:	8b 00                	mov    (%eax),%eax
+c010c6ed:	8d 48 04             	lea    0x4(%eax),%ecx
+c010c6f0:	8b 55 08             	mov    0x8(%ebp),%edx
+c010c6f3:	89 0a                	mov    %ecx,(%edx)
+c010c6f5:	8b 00                	mov    (%eax),%eax
+c010c6f7:	99                   	cltd   
+    }
+}
+c010c6f8:	5d                   	pop    %ebp
+c010c6f9:	c3                   	ret    
+
+c010c6fa <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+c010c6fa:	55                   	push   %ebp
+c010c6fb:	89 e5                	mov    %esp,%ebp
+c010c6fd:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+c010c700:	8d 45 14             	lea    0x14(%ebp),%eax
+c010c703:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+c010c706:	8b 45 f4             	mov    -0xc(%ebp),%eax
+c010c709:	50                   	push   %eax
+c010c70a:	ff 75 10             	pushl  0x10(%ebp)
+c010c70d:	ff 75 0c             	pushl  0xc(%ebp)
+c010c710:	ff 75 08             	pushl  0x8(%ebp)
+c010c713:	e8 06 00 00 00       	call   c010c71e <vprintfmt>
+c010c718:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+c010c71b:	90                   	nop
+c010c71c:	c9                   	leave  
+c010c71d:	c3                   	ret    
+
+c010c71e <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+c010c71e:	55                   	push   %ebp
+c010c71f:	89 e5                	mov    %esp,%ebp
+c010c721:	56                   	push   %esi
+c010c722:	53                   	push   %ebx
+c010c723:	83 ec 20             	sub    $0x20,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+c010c726:	eb 17                	jmp    c010c73f <vprintfmt+0x21>
+            if (ch == '\0') {
+c010c728:	85 db                	test   %ebx,%ebx
+c010c72a:	0f 84 8e 03 00 00    	je     c010cabe <vprintfmt+0x3a0>
+                return;
+            }
+            putch(ch, putdat);
+c010c730:	83 ec 08             	sub    $0x8,%esp
+c010c733:	ff 75 0c             	pushl  0xc(%ebp)
+c010c736:	53                   	push   %ebx
+c010c737:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c73a:	ff d0                	call   *%eax
+c010c73c:	83 c4 10             	add    $0x10,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+c010c73f:	8b 45 10             	mov    0x10(%ebp),%eax
+c010c742:	8d 50 01             	lea    0x1(%eax),%edx
+c010c745:	89 55 10             	mov    %edx,0x10(%ebp)
+c010c748:	0f b6 00             	movzbl (%eax),%eax
+c010c74b:	0f b6 d8             	movzbl %al,%ebx
+c010c74e:	83 fb 25             	cmp    $0x25,%ebx
+c010c751:	75 d5                	jne    c010c728 <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+c010c753:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+c010c757:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+c010c75e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010c761:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+c010c764:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+c010c76b:	8b 45 dc             	mov    -0x24(%ebp),%eax
+c010c76e:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+c010c771:	8b 45 10             	mov    0x10(%ebp),%eax
+c010c774:	8d 50 01             	lea    0x1(%eax),%edx
+c010c777:	89 55 10             	mov    %edx,0x10(%ebp)
+c010c77a:	0f b6 00             	movzbl (%eax),%eax
+c010c77d:	0f b6 d8             	movzbl %al,%ebx
+c010c780:	8d 43 dd             	lea    -0x23(%ebx),%eax
+c010c783:	83 f8 55             	cmp    $0x55,%eax
+c010c786:	0f 87 05 03 00 00    	ja     c010ca91 <vprintfmt+0x373>
+c010c78c:	8b 04 85 e8 f7 10 c0 	mov    -0x3fef0818(,%eax,4),%eax
+c010c793:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+c010c795:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+c010c799:	eb d6                	jmp    c010c771 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+c010c79b:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+c010c79f:	eb d0                	jmp    c010c771 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+c010c7a1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+c010c7a8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010c7ab:	89 d0                	mov    %edx,%eax
+c010c7ad:	c1 e0 02             	shl    $0x2,%eax
+c010c7b0:	01 d0                	add    %edx,%eax
+c010c7b2:	01 c0                	add    %eax,%eax
+c010c7b4:	01 d8                	add    %ebx,%eax
+c010c7b6:	83 e8 30             	sub    $0x30,%eax
+c010c7b9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+c010c7bc:	8b 45 10             	mov    0x10(%ebp),%eax
+c010c7bf:	0f b6 00             	movzbl (%eax),%eax
+c010c7c2:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+c010c7c5:	83 fb 2f             	cmp    $0x2f,%ebx
+c010c7c8:	7e 39                	jle    c010c803 <vprintfmt+0xe5>
+c010c7ca:	83 fb 39             	cmp    $0x39,%ebx
+c010c7cd:	7f 34                	jg     c010c803 <vprintfmt+0xe5>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+c010c7cf:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+c010c7d3:	eb d3                	jmp    c010c7a8 <vprintfmt+0x8a>
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+c010c7d5:	8b 45 14             	mov    0x14(%ebp),%eax
+c010c7d8:	8d 50 04             	lea    0x4(%eax),%edx
+c010c7db:	89 55 14             	mov    %edx,0x14(%ebp)
+c010c7de:	8b 00                	mov    (%eax),%eax
+c010c7e0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+c010c7e3:	eb 1f                	jmp    c010c804 <vprintfmt+0xe6>
+
+        case '.':
+            if (width < 0)
+c010c7e5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010c7e9:	79 86                	jns    c010c771 <vprintfmt+0x53>
+                width = 0;
+c010c7eb:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+c010c7f2:	e9 7a ff ff ff       	jmp    c010c771 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+c010c7f7:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+c010c7fe:	e9 6e ff ff ff       	jmp    c010c771 <vprintfmt+0x53>
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+            goto process_precision;
+c010c803:	90                   	nop
+        case '#':
+            altflag = 1;
+            goto reswitch;
+
+        process_precision:
+            if (width < 0)
+c010c804:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010c808:	0f 89 63 ff ff ff    	jns    c010c771 <vprintfmt+0x53>
+                width = precision, precision = -1;
+c010c80e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010c811:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010c814:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+c010c81b:	e9 51 ff ff ff       	jmp    c010c771 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+c010c820:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+c010c824:	e9 48 ff ff ff       	jmp    c010c771 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+c010c829:	8b 45 14             	mov    0x14(%ebp),%eax
+c010c82c:	8d 50 04             	lea    0x4(%eax),%edx
+c010c82f:	89 55 14             	mov    %edx,0x14(%ebp)
+c010c832:	8b 00                	mov    (%eax),%eax
+c010c834:	83 ec 08             	sub    $0x8,%esp
+c010c837:	ff 75 0c             	pushl  0xc(%ebp)
+c010c83a:	50                   	push   %eax
+c010c83b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c83e:	ff d0                	call   *%eax
+c010c840:	83 c4 10             	add    $0x10,%esp
+            break;
+c010c843:	e9 71 02 00 00       	jmp    c010cab9 <vprintfmt+0x39b>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+c010c848:	8b 45 14             	mov    0x14(%ebp),%eax
+c010c84b:	8d 50 04             	lea    0x4(%eax),%edx
+c010c84e:	89 55 14             	mov    %edx,0x14(%ebp)
+c010c851:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+c010c853:	85 db                	test   %ebx,%ebx
+c010c855:	79 02                	jns    c010c859 <vprintfmt+0x13b>
+                err = -err;
+c010c857:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+c010c859:	83 fb 18             	cmp    $0x18,%ebx
+c010c85c:	7f 0b                	jg     c010c869 <vprintfmt+0x14b>
+c010c85e:	8b 34 9d 60 f7 10 c0 	mov    -0x3fef08a0(,%ebx,4),%esi
+c010c865:	85 f6                	test   %esi,%esi
+c010c867:	75 19                	jne    c010c882 <vprintfmt+0x164>
+                printfmt(putch, putdat, "error %d", err);
+c010c869:	53                   	push   %ebx
+c010c86a:	68 d5 f7 10 c0       	push   $0xc010f7d5
+c010c86f:	ff 75 0c             	pushl  0xc(%ebp)
+c010c872:	ff 75 08             	pushl  0x8(%ebp)
+c010c875:	e8 80 fe ff ff       	call   c010c6fa <printfmt>
+c010c87a:	83 c4 10             	add    $0x10,%esp
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+c010c87d:	e9 37 02 00 00       	jmp    c010cab9 <vprintfmt+0x39b>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+c010c882:	56                   	push   %esi
+c010c883:	68 de f7 10 c0       	push   $0xc010f7de
+c010c888:	ff 75 0c             	pushl  0xc(%ebp)
+c010c88b:	ff 75 08             	pushl  0x8(%ebp)
+c010c88e:	e8 67 fe ff ff       	call   c010c6fa <printfmt>
+c010c893:	83 c4 10             	add    $0x10,%esp
+            }
+            break;
+c010c896:	e9 1e 02 00 00       	jmp    c010cab9 <vprintfmt+0x39b>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+c010c89b:	8b 45 14             	mov    0x14(%ebp),%eax
+c010c89e:	8d 50 04             	lea    0x4(%eax),%edx
+c010c8a1:	89 55 14             	mov    %edx,0x14(%ebp)
+c010c8a4:	8b 30                	mov    (%eax),%esi
+c010c8a6:	85 f6                	test   %esi,%esi
+c010c8a8:	75 05                	jne    c010c8af <vprintfmt+0x191>
+                p = "(null)";
+c010c8aa:	be e1 f7 10 c0       	mov    $0xc010f7e1,%esi
+            }
+            if (width > 0 && padc != '-') {
+c010c8af:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010c8b3:	7e 76                	jle    c010c92b <vprintfmt+0x20d>
+c010c8b5:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+c010c8b9:	74 70                	je     c010c92b <vprintfmt+0x20d>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+c010c8bb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+c010c8be:	83 ec 08             	sub    $0x8,%esp
+c010c8c1:	50                   	push   %eax
+c010c8c2:	56                   	push   %esi
+c010c8c3:	e8 17 f8 ff ff       	call   c010c0df <strnlen>
+c010c8c8:	83 c4 10             	add    $0x10,%esp
+c010c8cb:	89 c2                	mov    %eax,%edx
+c010c8cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010c8d0:	29 d0                	sub    %edx,%eax
+c010c8d2:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010c8d5:	eb 17                	jmp    c010c8ee <vprintfmt+0x1d0>
+                    putch(padc, putdat);
+c010c8d7:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+c010c8db:	83 ec 08             	sub    $0x8,%esp
+c010c8de:	ff 75 0c             	pushl  0xc(%ebp)
+c010c8e1:	50                   	push   %eax
+c010c8e2:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c8e5:	ff d0                	call   *%eax
+c010c8e7:	83 c4 10             	add    $0x10,%esp
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+c010c8ea:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+c010c8ee:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010c8f2:	7f e3                	jg     c010c8d7 <vprintfmt+0x1b9>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+c010c8f4:	eb 35                	jmp    c010c92b <vprintfmt+0x20d>
+                if (altflag && (ch < ' ' || ch > '~')) {
+c010c8f6:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+c010c8fa:	74 1c                	je     c010c918 <vprintfmt+0x1fa>
+c010c8fc:	83 fb 1f             	cmp    $0x1f,%ebx
+c010c8ff:	7e 05                	jle    c010c906 <vprintfmt+0x1e8>
+c010c901:	83 fb 7e             	cmp    $0x7e,%ebx
+c010c904:	7e 12                	jle    c010c918 <vprintfmt+0x1fa>
+                    putch('?', putdat);
+c010c906:	83 ec 08             	sub    $0x8,%esp
+c010c909:	ff 75 0c             	pushl  0xc(%ebp)
+c010c90c:	6a 3f                	push   $0x3f
+c010c90e:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c911:	ff d0                	call   *%eax
+c010c913:	83 c4 10             	add    $0x10,%esp
+c010c916:	eb 0f                	jmp    c010c927 <vprintfmt+0x209>
+                }
+                else {
+                    putch(ch, putdat);
+c010c918:	83 ec 08             	sub    $0x8,%esp
+c010c91b:	ff 75 0c             	pushl  0xc(%ebp)
+c010c91e:	53                   	push   %ebx
+c010c91f:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c922:	ff d0                	call   *%eax
+c010c924:	83 c4 10             	add    $0x10,%esp
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+c010c927:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+c010c92b:	89 f0                	mov    %esi,%eax
+c010c92d:	8d 70 01             	lea    0x1(%eax),%esi
+c010c930:	0f b6 00             	movzbl (%eax),%eax
+c010c933:	0f be d8             	movsbl %al,%ebx
+c010c936:	85 db                	test   %ebx,%ebx
+c010c938:	74 26                	je     c010c960 <vprintfmt+0x242>
+c010c93a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c010c93e:	78 b6                	js     c010c8f6 <vprintfmt+0x1d8>
+c010c940:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+c010c944:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+c010c948:	79 ac                	jns    c010c8f6 <vprintfmt+0x1d8>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+c010c94a:	eb 14                	jmp    c010c960 <vprintfmt+0x242>
+                putch(' ', putdat);
+c010c94c:	83 ec 08             	sub    $0x8,%esp
+c010c94f:	ff 75 0c             	pushl  0xc(%ebp)
+c010c952:	6a 20                	push   $0x20
+c010c954:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c957:	ff d0                	call   *%eax
+c010c959:	83 c4 10             	add    $0x10,%esp
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+c010c95c:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+c010c960:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010c964:	7f e6                	jg     c010c94c <vprintfmt+0x22e>
+                putch(' ', putdat);
+            }
+            break;
+c010c966:	e9 4e 01 00 00       	jmp    c010cab9 <vprintfmt+0x39b>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+c010c96b:	83 ec 08             	sub    $0x8,%esp
+c010c96e:	ff 75 e0             	pushl  -0x20(%ebp)
+c010c971:	8d 45 14             	lea    0x14(%ebp),%eax
+c010c974:	50                   	push   %eax
+c010c975:	e8 39 fd ff ff       	call   c010c6b3 <getint>
+c010c97a:	83 c4 10             	add    $0x10,%esp
+c010c97d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010c980:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+c010c983:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c986:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010c989:	85 d2                	test   %edx,%edx
+c010c98b:	79 23                	jns    c010c9b0 <vprintfmt+0x292>
+                putch('-', putdat);
+c010c98d:	83 ec 08             	sub    $0x8,%esp
+c010c990:	ff 75 0c             	pushl  0xc(%ebp)
+c010c993:	6a 2d                	push   $0x2d
+c010c995:	8b 45 08             	mov    0x8(%ebp),%eax
+c010c998:	ff d0                	call   *%eax
+c010c99a:	83 c4 10             	add    $0x10,%esp
+                num = -(long long)num;
+c010c99d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010c9a0:	8b 55 f4             	mov    -0xc(%ebp),%edx
+c010c9a3:	f7 d8                	neg    %eax
+c010c9a5:	83 d2 00             	adc    $0x0,%edx
+c010c9a8:	f7 da                	neg    %edx
+c010c9aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010c9ad:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+c010c9b0:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+c010c9b7:	e9 9f 00 00 00       	jmp    c010ca5b <vprintfmt+0x33d>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+c010c9bc:	83 ec 08             	sub    $0x8,%esp
+c010c9bf:	ff 75 e0             	pushl  -0x20(%ebp)
+c010c9c2:	8d 45 14             	lea    0x14(%ebp),%eax
+c010c9c5:	50                   	push   %eax
+c010c9c6:	e8 99 fc ff ff       	call   c010c664 <getuint>
+c010c9cb:	83 c4 10             	add    $0x10,%esp
+c010c9ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010c9d1:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+c010c9d4:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+c010c9db:	eb 7e                	jmp    c010ca5b <vprintfmt+0x33d>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+c010c9dd:	83 ec 08             	sub    $0x8,%esp
+c010c9e0:	ff 75 e0             	pushl  -0x20(%ebp)
+c010c9e3:	8d 45 14             	lea    0x14(%ebp),%eax
+c010c9e6:	50                   	push   %eax
+c010c9e7:	e8 78 fc ff ff       	call   c010c664 <getuint>
+c010c9ec:	83 c4 10             	add    $0x10,%esp
+c010c9ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010c9f2:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+c010c9f5:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+c010c9fc:	eb 5d                	jmp    c010ca5b <vprintfmt+0x33d>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+c010c9fe:	83 ec 08             	sub    $0x8,%esp
+c010ca01:	ff 75 0c             	pushl  0xc(%ebp)
+c010ca04:	6a 30                	push   $0x30
+c010ca06:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ca09:	ff d0                	call   *%eax
+c010ca0b:	83 c4 10             	add    $0x10,%esp
+            putch('x', putdat);
+c010ca0e:	83 ec 08             	sub    $0x8,%esp
+c010ca11:	ff 75 0c             	pushl  0xc(%ebp)
+c010ca14:	6a 78                	push   $0x78
+c010ca16:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ca19:	ff d0                	call   *%eax
+c010ca1b:	83 c4 10             	add    $0x10,%esp
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+c010ca1e:	8b 45 14             	mov    0x14(%ebp),%eax
+c010ca21:	8d 50 04             	lea    0x4(%eax),%edx
+c010ca24:	89 55 14             	mov    %edx,0x14(%ebp)
+c010ca27:	8b 00                	mov    (%eax),%eax
+c010ca29:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010ca2c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+c010ca33:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+c010ca3a:	eb 1f                	jmp    c010ca5b <vprintfmt+0x33d>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+c010ca3c:	83 ec 08             	sub    $0x8,%esp
+c010ca3f:	ff 75 e0             	pushl  -0x20(%ebp)
+c010ca42:	8d 45 14             	lea    0x14(%ebp),%eax
+c010ca45:	50                   	push   %eax
+c010ca46:	e8 19 fc ff ff       	call   c010c664 <getuint>
+c010ca4b:	83 c4 10             	add    $0x10,%esp
+c010ca4e:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010ca51:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+c010ca54:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+c010ca5b:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+c010ca5f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010ca62:	83 ec 04             	sub    $0x4,%esp
+c010ca65:	52                   	push   %edx
+c010ca66:	ff 75 e8             	pushl  -0x18(%ebp)
+c010ca69:	50                   	push   %eax
+c010ca6a:	ff 75 f4             	pushl  -0xc(%ebp)
+c010ca6d:	ff 75 f0             	pushl  -0x10(%ebp)
+c010ca70:	ff 75 0c             	pushl  0xc(%ebp)
+c010ca73:	ff 75 08             	pushl  0x8(%ebp)
+c010ca76:	e8 f8 fa ff ff       	call   c010c573 <printnum>
+c010ca7b:	83 c4 20             	add    $0x20,%esp
+            break;
+c010ca7e:	eb 39                	jmp    c010cab9 <vprintfmt+0x39b>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+c010ca80:	83 ec 08             	sub    $0x8,%esp
+c010ca83:	ff 75 0c             	pushl  0xc(%ebp)
+c010ca86:	53                   	push   %ebx
+c010ca87:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ca8a:	ff d0                	call   *%eax
+c010ca8c:	83 c4 10             	add    $0x10,%esp
+            break;
+c010ca8f:	eb 28                	jmp    c010cab9 <vprintfmt+0x39b>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+c010ca91:	83 ec 08             	sub    $0x8,%esp
+c010ca94:	ff 75 0c             	pushl  0xc(%ebp)
+c010ca97:	6a 25                	push   $0x25
+c010ca99:	8b 45 08             	mov    0x8(%ebp),%eax
+c010ca9c:	ff d0                	call   *%eax
+c010ca9e:	83 c4 10             	add    $0x10,%esp
+            for (fmt --; fmt[-1] != '%'; fmt --)
+c010caa1:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+c010caa5:	eb 04                	jmp    c010caab <vprintfmt+0x38d>
+c010caa7:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+c010caab:	8b 45 10             	mov    0x10(%ebp),%eax
+c010caae:	83 e8 01             	sub    $0x1,%eax
+c010cab1:	0f b6 00             	movzbl (%eax),%eax
+c010cab4:	3c 25                	cmp    $0x25,%al
+c010cab6:	75 ef                	jne    c010caa7 <vprintfmt+0x389>
+                /* do nothing */;
+            break;
+c010cab8:	90                   	nop
+        }
+    }
+c010cab9:	e9 68 fc ff ff       	jmp    c010c726 <vprintfmt+0x8>
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+            if (ch == '\0') {
+                return;
+c010cabe:	90                   	nop
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+c010cabf:	8d 65 f8             	lea    -0x8(%ebp),%esp
+c010cac2:	5b                   	pop    %ebx
+c010cac3:	5e                   	pop    %esi
+c010cac4:	5d                   	pop    %ebp
+c010cac5:	c3                   	ret    
+
+c010cac6 <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+c010cac6:	55                   	push   %ebp
+c010cac7:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+c010cac9:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010cacc:	8b 40 08             	mov    0x8(%eax),%eax
+c010cacf:	8d 50 01             	lea    0x1(%eax),%edx
+c010cad2:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010cad5:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+c010cad8:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010cadb:	8b 10                	mov    (%eax),%edx
+c010cadd:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010cae0:	8b 40 04             	mov    0x4(%eax),%eax
+c010cae3:	39 c2                	cmp    %eax,%edx
+c010cae5:	73 12                	jae    c010caf9 <sprintputch+0x33>
+        *b->buf ++ = ch;
+c010cae7:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010caea:	8b 00                	mov    (%eax),%eax
+c010caec:	8d 48 01             	lea    0x1(%eax),%ecx
+c010caef:	8b 55 0c             	mov    0xc(%ebp),%edx
+c010caf2:	89 0a                	mov    %ecx,(%edx)
+c010caf4:	8b 55 08             	mov    0x8(%ebp),%edx
+c010caf7:	88 10                	mov    %dl,(%eax)
+    }
+}
+c010caf9:	90                   	nop
+c010cafa:	5d                   	pop    %ebp
+c010cafb:	c3                   	ret    
+
+c010cafc <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+c010cafc:	55                   	push   %ebp
+c010cafd:	89 e5                	mov    %esp,%ebp
+c010caff:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+c010cb02:	8d 45 14             	lea    0x14(%ebp),%eax
+c010cb05:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+c010cb08:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010cb0b:	50                   	push   %eax
+c010cb0c:	ff 75 10             	pushl  0x10(%ebp)
+c010cb0f:	ff 75 0c             	pushl  0xc(%ebp)
+c010cb12:	ff 75 08             	pushl  0x8(%ebp)
+c010cb15:	e8 0b 00 00 00       	call   c010cb25 <vsnprintf>
+c010cb1a:	83 c4 10             	add    $0x10,%esp
+c010cb1d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+c010cb20:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c010cb23:	c9                   	leave  
+c010cb24:	c3                   	ret    
+
+c010cb25 <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+c010cb25:	55                   	push   %ebp
+c010cb26:	89 e5                	mov    %esp,%ebp
+c010cb28:	83 ec 18             	sub    $0x18,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+c010cb2b:	8b 45 08             	mov    0x8(%ebp),%eax
+c010cb2e:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010cb31:	8b 45 0c             	mov    0xc(%ebp),%eax
+c010cb34:	8d 50 ff             	lea    -0x1(%eax),%edx
+c010cb37:	8b 45 08             	mov    0x8(%ebp),%eax
+c010cb3a:	01 d0                	add    %edx,%eax
+c010cb3c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+c010cb3f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+c010cb46:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+c010cb4a:	74 0a                	je     c010cb56 <vsnprintf+0x31>
+c010cb4c:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010cb4f:	8b 45 f0             	mov    -0x10(%ebp),%eax
+c010cb52:	39 c2                	cmp    %eax,%edx
+c010cb54:	76 07                	jbe    c010cb5d <vsnprintf+0x38>
+        return -E_INVAL;
+c010cb56:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+c010cb5b:	eb 20                	jmp    c010cb7d <vsnprintf+0x58>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+c010cb5d:	ff 75 14             	pushl  0x14(%ebp)
+c010cb60:	ff 75 10             	pushl  0x10(%ebp)
+c010cb63:	8d 45 ec             	lea    -0x14(%ebp),%eax
+c010cb66:	50                   	push   %eax
+c010cb67:	68 c6 ca 10 c0       	push   $0xc010cac6
+c010cb6c:	e8 ad fb ff ff       	call   c010c71e <vprintfmt>
+c010cb71:	83 c4 10             	add    $0x10,%esp
+    // null terminate the buffer
+    *b.buf = '\0';
+c010cb74:	8b 45 ec             	mov    -0x14(%ebp),%eax
+c010cb77:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+c010cb7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+c010cb7d:	c9                   	leave  
+c010cb7e:	c3                   	ret    
+
+c010cb7f <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+c010cb7f:	55                   	push   %ebp
+c010cb80:	89 e5                	mov    %esp,%ebp
+c010cb82:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+c010cb85:	8b 45 08             	mov    0x8(%ebp),%eax
+c010cb88:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+c010cb8e:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+c010cb91:	b8 20 00 00 00       	mov    $0x20,%eax
+c010cb96:	2b 45 0c             	sub    0xc(%ebp),%eax
+c010cb99:	8b 55 fc             	mov    -0x4(%ebp),%edx
+c010cb9c:	89 c1                	mov    %eax,%ecx
+c010cb9e:	d3 ea                	shr    %cl,%edx
+c010cba0:	89 d0                	mov    %edx,%eax
+}
+c010cba2:	c9                   	leave  
+c010cba3:	c3                   	ret    
+
+c010cba4 <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+c010cba4:	55                   	push   %ebp
+c010cba5:	89 e5                	mov    %esp,%ebp
+c010cba7:	57                   	push   %edi
+c010cba8:	56                   	push   %esi
+c010cba9:	53                   	push   %ebx
+c010cbaa:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+c010cbad:	a1 a0 1e 13 c0       	mov    0xc0131ea0,%eax
+c010cbb2:	8b 15 a4 1e 13 c0    	mov    0xc0131ea4,%edx
+c010cbb8:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+c010cbbe:	6b f0 05             	imul   $0x5,%eax,%esi
+c010cbc1:	01 fe                	add    %edi,%esi
+c010cbc3:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+c010cbc8:	f7 e7                	mul    %edi
+c010cbca:	01 d6                	add    %edx,%esi
+c010cbcc:	89 f2                	mov    %esi,%edx
+c010cbce:	83 c0 0b             	add    $0xb,%eax
+c010cbd1:	83 d2 00             	adc    $0x0,%edx
+c010cbd4:	89 c7                	mov    %eax,%edi
+c010cbd6:	83 e7 ff             	and    $0xffffffff,%edi
+c010cbd9:	89 f9                	mov    %edi,%ecx
+c010cbdb:	0f b7 da             	movzwl %dx,%ebx
+c010cbde:	89 0d a0 1e 13 c0    	mov    %ecx,0xc0131ea0
+c010cbe4:	89 1d a4 1e 13 c0    	mov    %ebx,0xc0131ea4
+    unsigned long long result = (next >> 12);
+c010cbea:	a1 a0 1e 13 c0       	mov    0xc0131ea0,%eax
+c010cbef:	8b 15 a4 1e 13 c0    	mov    0xc0131ea4,%edx
+c010cbf5:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+c010cbf9:	c1 ea 0c             	shr    $0xc,%edx
+c010cbfc:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c010cbff:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+c010cc02:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+c010cc09:	8b 45 e0             	mov    -0x20(%ebp),%eax
+c010cc0c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+c010cc0f:	89 45 d8             	mov    %eax,-0x28(%ebp)
+c010cc12:	89 55 e8             	mov    %edx,-0x18(%ebp)
+c010cc15:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010cc18:	89 45 ec             	mov    %eax,-0x14(%ebp)
+c010cc1b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+c010cc1f:	74 1c                	je     c010cc3d <rand+0x99>
+c010cc21:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010cc24:	ba 00 00 00 00       	mov    $0x0,%edx
+c010cc29:	f7 75 dc             	divl   -0x24(%ebp)
+c010cc2c:	89 55 ec             	mov    %edx,-0x14(%ebp)
+c010cc2f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+c010cc32:	ba 00 00 00 00       	mov    $0x0,%edx
+c010cc37:	f7 75 dc             	divl   -0x24(%ebp)
+c010cc3a:	89 45 e8             	mov    %eax,-0x18(%ebp)
+c010cc3d:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010cc40:	8b 55 ec             	mov    -0x14(%ebp),%edx
+c010cc43:	f7 75 dc             	divl   -0x24(%ebp)
+c010cc46:	89 45 d8             	mov    %eax,-0x28(%ebp)
+c010cc49:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+c010cc4c:	8b 45 d8             	mov    -0x28(%ebp),%eax
+c010cc4f:	8b 55 e8             	mov    -0x18(%ebp),%edx
+c010cc52:	89 45 e0             	mov    %eax,-0x20(%ebp)
+c010cc55:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+c010cc58:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+c010cc5b:	83 c4 24             	add    $0x24,%esp
+c010cc5e:	5b                   	pop    %ebx
+c010cc5f:	5e                   	pop    %esi
+c010cc60:	5f                   	pop    %edi
+c010cc61:	5d                   	pop    %ebp
+c010cc62:	c3                   	ret    
+
+c010cc63 <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+c010cc63:	55                   	push   %ebp
+c010cc64:	89 e5                	mov    %esp,%ebp
+    next = seed;
+c010cc66:	8b 45 08             	mov    0x8(%ebp),%eax
+c010cc69:	ba 00 00 00 00       	mov    $0x0,%edx
+c010cc6e:	a3 a0 1e 13 c0       	mov    %eax,0xc0131ea0
+c010cc73:	89 15 a4 1e 13 c0    	mov    %edx,0xc0131ea4
+}
+c010cc79:	90                   	nop
+c010cc7a:	5d                   	pop    %ebp
+c010cc7b:	c3                   	ret    
diff -r -u -P lab7_original/obj/kernel.sym lab7/obj/kernel.sym
--- lab7_original/obj/kernel.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/kernel.sym	2016-05-06 22:00:42.540935888 +0800
@@ -0,0 +1,778 @@
+c0100000 .text
+c010cc80 .rodata
+c010f940 .stab
+c0127455 .stabstr
+c012f000 .data
+c01c22e0 .bss
+00000000 .comment
+00000000 obj/kern/init/entry.o
+c0131018 __gdtdesc
+c0100019 relocated
+c0100028 spin
+c0131000 __gdt
+00000000 init.c
+c010012b lab1_print_cur_status
+c01c22e0 round.2135
+c01001e8 lab1_switch_to_user
+c01001f5 lab1_switch_to_kernel
+c01001ff lab1_switch_test
+00000000 stdio.c
+c0100241 cputch
+00000000 readline.c
+c01c2300 buf
+00000000 panic.c
+c01c2700 is_panic
+00000000 kdebug.c
+c01004b3 stab_binsearch
+c0100b28 read_eip
+00000000 kmonitor.c
+c0131020 commands
+c0100bf8 parse
+c0100cb4 runcmd
+00000000 ide.c
+c010cf84 channels
+c01c2720 ide_devices
+c0100e50 ide_wait_ready
+00000000 clock.c
+00000000 console.c
+c01016eb __intr_save
+c0101715 __intr_restore
+c0101729 delay
+c01c2800 crt_buf
+c01c2804 crt_pos
+c01c2806 addr_6845
+c0101772 cga_init
+c01c2808 serial_exists
+c0101859 serial_init
+c010193e lpt_putc_sub
+c01019b8 lpt_putc
+c01019ef cga_putc
+c0101bc4 serial_putc_sub
+c0101c1e serial_putc
+c01c2820 cons
+c0101c55 cons_intr
+c0101ca1 serial_proc_data
+c0131060 shiftcode
+c0131160 togglecode
+c0131260 normalmap
+c0131360 shiftmap
+c0131460 ctlmap
+c0131560 charcode
+c0101d1a kbd_proc_data
+c01c2a28 shift.1707
+c0101ea7 kbd_intr
+c0101ec0 kbd_init
+00000000 picirq.c
+c0131570 irq_mask
+c01c2a2c did_init
+c0101fc7 pic_setmask
+00000000 intr.c
+00000000 trap.c
+c0102198 print_ticks
+c01c2a40 idt
+c0131580 idt_pd
+c01023bf trapname
+c010d560 excnames.2015
+c01315a0 IA32flags
+c01026a3 print_pgfault
+c0102718 pgfault_handler
+c01c3240 in_swap_tick_event
+c01027d8 trap_dispatch
+00000000 pmm.c
+c0103554 page2ppn
+c0103567 page2pa
+c010357a pa2page
+c01035b7 page2kva
+c01035fc pte2page
+c0103636 pde2page
+c0103652 page_ref
+c010365c set_page_ref
+c010366a page_ref_inc
+c0103681 page_ref_dec
+c0103698 __intr_save
+c01036c2 __intr_restore
+c01c3280 ts
+c0131a00 gdt
+c0131a30 gdt_pd
+c01036d6 lgdt
+c010371a gdt_init
+c010380c init_pmm_manager
+c0103841 init_memmap
+c010392f page_init
+c0103cdb enable_paging
+c0103d15 boot_map_segment
+c0103dfe boot_alloc_page
+c01046c7 check_alloc_page
+c01046ea check_pgdir
+c0104c50 check_boot_pgdir
+c01040c5 page_remove_pte
+c0104f49 perm2str
+c01c32e8 str.2286
+c0104f97 get_pgtable_items
+00000000 swap_fifo.c
+c010519f _fifo_init_mm
+c01051d1 _fifo_map_swappable
+c0105256 _fifo_swap_out_victim
+c01052e6 _fifo_check_swap
+c01055b5 _fifo_init
+c01055bf _fifo_set_unswappable
+c01055c9 _fifo_tick_event
+00000000 vmm.c
+c01055d3 mm_count
+c01055de set_mm_count
+c01055ed pa2page
+c010562a pde2page
+c01057d3 check_vma_overlap
+c0105d57 check_vmm
+c0105d82 check_vma_struct
+c010617f check_pgfault
+00000000 kmalloc.c
+c0106674 __intr_save
+c010669e __intr_restore
+c01066b2 page2ppn
+c01066c5 page2pa
+c01066d8 pa2page
+c0106715 page2kva
+c010675a kva2page
+c0131a60 arena
+c0131a68 slobfree
+c01c32f0 bigblocks
+c0106799 __slob_get_free_pages
+c01067d9 __slob_free_pages
+c0106812 slob_alloc
+c01069e1 slob_free
+c0106b4a find_order
+c0106b6e __kmalloc
+00000000 swap.c
+c0106dc3 pa2page
+c0106e00 pte2page
+c0106e3a pde2page
+c01c32fc sm
+c01072cb check_swap
+c0107152 check_content_set
+c01072b3 check_content_access
+00000000 default_pmm.c
+c01078ba page2ppn
+c01078cd page2pa
+c01078e0 page_ref
+c01078ea set_page_ref
+c01078f8 default_init
+c0107926 default_init_memmap
+c0107a4b default_alloc_pages
+c0107bd3 default_free_pages
+c0107e65 default_nr_free_pages
+c0107e6f basic_check
+c01082e5 default_check
+00000000 check_sync.c
+00000000 wait.c
+00000000 sem.c
+c010932a __intr_save
+c0109354 __intr_restore
+c010938b __up
+c0109411 __down
+00000000 monitor.c
+00000000 swapfs.c
+c01097cb page2ppn
+c01097de page2pa
+c01097f1 page2kva
+00000000 proc.c
+c010996b timer_init
+c01099a4 __intr_save
+c01099ce __intr_restore
+c01099e2 page2ppn
+c01099f5 page2pa
+c0109a08 pa2page
+c0109a45 page2kva
+c0109a8a kva2page
+c0109ac9 mm_count_inc
+c0109ae3 mm_count_dec
+c0109afd lock_mm
+c0109b35 unlock_mm
+c01c3320 hash_list
+c01c5320 nr_process
+c0109b60 alloc_proc
+c01c5340 name.2042
+c0109d7a set_links
+c0109e35 remove_links
+c0109ed7 get_pid
+c0131a70 last_pid.2058
+c0131a74 next_safe.2057
+c010a04d forkret
+c010a06a hash_proc
+c010a0e7 unhash_proc
+c010a1f4 setup_kstack
+c010a234 put_kstack
+c010a25d setup_pgdir
+c010a2f6 put_pgdir
+c010a31f copy_mm
+c010a445 copy_thread
+c010a809 load_icode
+c010b127 kernel_execve
+c010b164 user_main
+c010b1ba init_main
+00000000 sched.c
+c010b580 __intr_save
+c010b5aa __intr_restore
+c01c5374 timer_list
+c01c537c sched_class
+c01c5380 rq
+c010b5be sched_class_enqueue
+c010b5eb sched_class_dequeue
+c010b60e sched_class_pick_next
+c01c5384 __rq
+00000000 default_sched.c
+c010bb21 skew_heap_merge
+c010bbeb proc_stride_comp_f
+c010bc41 stride_init
+c010bc78 stride_enqueue
+c010bd29 stride_dequeue
+c010bdc5 stride_pick_next
+c010be45 stride_proc_tick
+00000000 syscall.c
+c010be84 sys_exit
+c010bea2 sys_fork
+c010bed1 sys_wait
+c010befd sys_exec
+c010bf42 sys_yield
+c010bf4f sys_kill
+c010bf6d sys_getpid
+c010bf7a sys_putc
+c010bf9d sys_pgdir
+c010bfaf sys_gettime
+c010bfb9 sys_lab6_set_priority
+c010bfdc sys_sleep
+c0131aa0 syscalls
+00000000 string.c
+00000000 printfmt.c
+c010f760 error_string
+c010c573 printnum
+c010c664 getuint
+c010c6b3 getint
+c010cac6 sprintputch
+00000000 hash.c
+00000000 rand.c
+c0131ea0 next
+c0103481 vector242
+c0102ed8 vector119
+c01009ef print_kerninfo
+c0102db8 vector87
+c0102daf vector86
+c01034ed vector251
+c010c10f strcpy
+c01011ae ide_device_valid
+c0102ddc vector91
+c0102bd2 vector33
+c01030c1 vector162
+c0103325 vector213
+c0102e75 vector108
+c0102c2c vector43
+c0109248 wakeup_queue
+00007950 _binary_obj___user_yield_out_size
+c0106b36 slob_allocated
+c0100000 kern_entry
+c0100e3e mon_backtrace
+c01030e5 vector165
+c0148acc _binary_obj___user_badsegment_out_start
+c01031d5 vector185
+c0109680 cond_signal
+c0102eb4 vector115
+c0102ef3 vector122
+00007950 _binary_obj___user_hello_out_size
+c0105cc8 copy_from_user
+c01b2f80 _binary_obj___user_forktest_out_end
+c010450d page_insert
+c0103079 vector156
+c01034a5 vector245
+c0108f44 wait_queue_add
+c0103205 vector189
+c0102af8 vector7
+c0102cce vector61
+c0102b81 vector24
+c0102e90 vector111
+c0108aa3 phi_test_condvar
+c0103289 vector200
+000079a4 _binary_obj___user_testbss_out_size
+c0102d04 vector67
+c010b6d9 wakeup_proc
+c0106b40 kallocated
+c0104616 pgdir_alloc_page
+c0102fa1 vector138
+c0102d43 vector74
+c010c428 memmove
+c0102caa vector57
+c016707c _binary_obj___user_exit_out_end
+c0105646 mm_create
+c010cafc snprintf
+c010bffa syscall
+c0102406 print_trapframe
+c0103331 vector214
+c010c71e vprintfmt
+c0102e24 vector99
+c010406f get_page
+c0103529 __alltraps
+c0101f55 cons_getc
+c0102fc5 vector141
+c01004a9 is_kernel_panic
+c0103139 vector172
+c010916c wait_queue_last
+c0100b39 print_stackframe
+c0103475 vector241
+c01c53a8 pra_list_head
+c0103505 vector253
+c0102ad4 vector3
+c010354b forkrets
+c0102acb vector2
+c010a4e1 do_fork
+c01033cd vector227
+c010a18f kernel_thread
+c0103301 vector210
+c01c3300 idleproc
+c01033a9 vector224
+c01092c4 wait_current_set
+c0108c19 phi_put_forks_condvar
+c0102c1a vector41
+c0131a40 swap_manager_fifo
+c010028e cprintf
+c01a3cbc _binary_obj___user_testbss_out_end
+c01c557c proc_list
+c0102b66 vector21
+c0103175 vector177
+c01094d5 up
+c0102ecf vector118
+c0102d1f vector70
+c0105a11 mm_map
+c0102d16 vector69
+c0103445 vector237
+c0102ce9 vector64
+c0102b9c vector27
+c0105b19 dup_mmap
+c0105d49 vmm_init
+c0102f59 vector132
+c01397f8 _binary_obj___user_badarg_out_start
+c0105c00 exit_mmap
+c01031e1 vector186
+00007950 _binary_obj___user_badarg_out_size
+c0103355 vector217
+c0105972 mm_destroy
+c010992b kernel_thread_entry
+c010af1f do_wait
+c010c4cb memcpy
+c0102ac2 vector1
+c0103181 vector178
+c0102bff vector38
+c0106c75 kfree
+c01ba8d0 _binary_obj___user_pgdir_out_end
+c0103451 vector238
+c01949c8 _binary_obj___user_yield_out_start
+c0100332 readline
+c0131ea8 _binary_obj___user_hello_out_start
+c0102f65 vector133
+c0102d3a vector73
+c0102fe9 vector144
+c010d62c vpd
+c010002a kern_init
+c015f714 _binary_obj___user_exit_out_start
+c0103511 vector254
+c0102e36 vector101
+c010330d vector211
+c0103151 vector174
+c010348d vector243
+c0108958 phi_put_forks_sema
+c01042fb copy_range
+c0102f29 vector128
+c01c22c4 _binary_obj___user_matrix_out_end
+c0109140 wait_queue_first
+c0102d82 vector81
+c010b4ce lab6_set_priority
+c01038cc free_pages
+c0102b24 vector13
+c010cb25 vsnprintf
+c0102c74 vector51
+c0102b3b vector16
+c01c22c4 edata
+c0101edb cons_init
+c010709f swap_in
+c0101458 ide_write_secs
+c01c539c pmm_manager
+c0103469 vector240
+c0102c8f vector54
+c0102b54 vector19
+c0127454 __STAB_END__
+c0102de5 vector92
+c0103499 vector244
+c01c32f4 swap_init_ok
+c01c54a0 state_sema
+c010370c load_esp0
+c0102fb9 vector140
+c0102c3e vector45
+c0102d70 vector79
+c01033e5 vector229
+c0106e56 swap_init
+c0103091 vector158
+c0102020 pic_enable
+c0109836 swapfs_init
+c01c53c0 check_rp
+00007950 _binary_obj___user_softint_out_size
+c0104207 exit_range
+c0102c08 vector39
+c0103109 vector168
+c018d07c _binary_obj___user_waitkill_out_end
+c0102be4 vector35
+c0102ea2 vector113
+c0127455 __STABSTR_BEGIN__
+c010b0bc do_kill
+c0102f0e vector125
+c01003f4 __panic
+c01397f8 _binary_obj___user_hello_out_end
+00007954 _binary_obj___user_sleepkill_out_size
+c01089f1 philosopher_using_semaphore
+c01c3304 initproc
+c0103349 vector216
+c0102ce0 vector63
+c0102b93 vector26
+c0101cf8 serial_intr
+c0103235 vector193
+c0103259 vector196
+c01000f0 grade_backtrace0
+c0108cd6 philosopher_using_condvar
+c01032f5 vector209
+c01c54b4 philosopher_proc_condvar
+c0102add vector4
+c0103121 vector170
+c010b769 schedule
+c0102f89 vector136
+c0102b0f vector10
+c010884d phi_test_sema
+c018566c _binary_obj___user_softint_out_end
+c01032d1 vector206
+c010351d vector255
+c01031a5 vector181
+c0102cbc vector59
+c010010a grade_backtrace
+c0102da6 vector85
+c0102d9d vector84
+c0109934 switch_to
+c01031bd vector183
+c010309d vector159
+c0103319 vector212
+c0102c50 vector47
+c010c28b strtol
+c01033d9 vector228
+c0102c23 vector42
+c0102eab vector114
+c010c0df strnlen
+c017dd1c _binary_obj___user_softint_out_start
+c0150420 _binary_obj___user_faultread_out_start
+c010315d vector175
+c0102fdd vector143
+c0102f41 vector130
+c010eb88 default_pmm_manager
+c01034b1 vector246
+c0102b08 vector9
+c0102fd1 vector142
+c0102e2d vector100
+00007984 _binary_obj___user_forktree_out_size
+c010b62d sched_class_proc_tick
+c0103295 vector201
+c01021d4 idt_init
+c0100a8c print_debuginfo
+c0105722 find_vma
+c01c53e0 swap_in_seq_no
+c0141148 _binary_obj___user_forktree_out_start
+c0102cc5 vector60
+c0102b78 vector23
+c0103439 vector236
+c01c3260 npage
+c0106384 do_pgfault
+c01033fd vector231
+000079a0 _binary_obj___user_divzero_out_size
+c0109d10 set_proc_name
+c01088f6 phi_take_forks_sema
+c0102cfb vector66
+c0102bae vector29
+c010504b print_pgdir
+c0102f7d vector135
+c0100d64 kmonitor
+00007954 _binary_obj___user_badsegment_out_size
+c0102d5e vector77
+c0103199 vector180
+c0101682 clock_init
+c01032e9 vector208
+c0102e1b vector98
+c0102e12 vector97
+c0103901 nr_free_pages
+c0106d3b ksize
+00007950 _binary_obj___user_pgdir_out_size
+c0103169 vector176
+c019c318 _binary_obj___user_testbss_out_start
+c0103241 vector194
+c0102bc9 vector32
+c01c53a0 boot_cr3
+c01c54c8 mutex
+c01c5584 end
+c010327d vector199
+c010a60f do_exit
+c01c54e0 mt
+c0102f4d vector131
+c01034f9 vector252
+c0102ab9 vector0
+c01a3cbc _binary_obj___user_faultreadkernel_out_start
+c0150420 _binary_obj___user_badsegment_out_end
+c010c25c strfind
+00007a10 _binary_obj___user_waitkill_out_size
+c0101f0c cons_putc
+c01c5420 swap_out_seq_no
+c010cc7c etext
+c0102ff5 vector145
+c0102e6c vector107
+c01c3264 boot_pgdir
+c0102c11 vector40
+c010b802 add_timer
+c010218a intr_enable
+c0102e3f vector102
+c01949c8 _binary_obj___user_spin_out_end
+c0109368 sem_init
+c01094f1 down
+c0102ca1 vector56
+c0102d0d vector68
+c0102aef vector6
+c010cba4 rand
+c0102f35 vector129
+c0103265 vector197
+c0103049 vector152
+c0131600 __vectors
+c010b4f9 do_sleep
+c01033f1 vector230
+c010c1d3 strncmp
+c01090d5 wait_queue_prev
+c0106aff slob_init
+c0103f4b get_pte
+c01011ee ide_device_size
+c0102bf6 vector37
+c01c5448 check_swap_addr
+c01032c5 vector205
+c01030b5 vector161
+c01c3308 current
+c010c14f strncpy
+c0105d09 copy_to_user
+c0102d28 vector71
+c01030a9 vector160
+c01ab614 _binary_obj___user_forktest_out_start
+c0106b18 kmalloc_init
+c010333d vector215
+c0109217 wakeup_first
+0000794c _binary_obj___user_spin_out_size
+c0103085 vector157
+c0102191 intr_disable
+c01025e3 print_regs
+c0108ee9 wait_init
+c01091b5 wait_in_queue
+c0102e99 vector112
+c01000b1 grade_backtrace2
+c01031b1 vector182
+c0102b1d vector12
+c010c51b memcmp
+c0108f21 wait_queue_init
+c0102e7e vector109
+c0102b5d vector20
+c0102c86 vector53
+c0102b4b vector18
+c010b4b5 cpu_idle
+c0102e00 vector95
+c010ade7 do_execve
+c01033c1 vector226
+c0102c62 vector49
+c0102c35 vector44
+c0102d67 vector78
+c0103145 vector173
+c0109879 swapfs_read
+c0102ec6 vector117
+c01023f0 trap_in_kernel
+c0106f30 swap_set_unswappable
+c0102d8b vector82
+c0103391 vector222
+c010b9f0 run_timer_list
+c0102b01 vector8
+c0103025 vector149
+c01002b4 cputchar
+c010c3e8 memset
+c0103409 vector232
+c010122e ide_read_secs
+c0102e63 vector106
+c0103379 vector220
+c0102dd3 vector90
+c01030cd vector163
+c010cc63 srand
+c01091dd wakeup_wait
+c0103421 vector234
+c0106f0f swap_map_swappable
+c0102cd7 vector62
+c0102b8a vector25
+c0103271 vector198
+c0102ee1 vector120
+c0141148 _binary_obj___user_badarg_out_end
+c0100319 getchar
+c01044d4 page_remove
+c010cb7f hash32
+c0102c6b vector50
+c0102b32 vector15
+c01c32f8 swap_out_num
+c010c6fa printfmt
+c01ab614 _binary_obj___user_faultreadkernel_out_end
+c010af09 do_yield
+c01c5500 state_condvar
+c010303d vector151
+c0131a6c mtp
+c0102d94 vector83
+c0102dca vector89
+c0102dc1 vector88
+c0102a24 trap
+c010318d vector179
+c0102bdb vector34
+c012e401 __STABSTR_END__
+c0102c47 vector46
+c010c189 strcmp
+c0102f71 vector134
+c010339d vector223
+c0109571 monitor_init
+c01763c8 _binary_obj___user_sleepkill_out_start
+c0103361 vector218
+c010060a debuginfo_eip
+c01c5514 philosopher_proc_sema
+c01c545c max_swap_offset
+00007958 _binary_obj___user_faultreadkernel_out_size
+c010584e insert_vma_struct
+c010204d pic_init
+c01033b5 vector225
+c01031ed vector187
+c0103e41 pmm_init
+c0102bb7 vector30
+c0108fd8 wait_queue_del
+c0102f20 vector127
+c01c5540 s
+c01c5398 ticks
+c0103229 vector192
+c01030f1 vector166
+c0102d55 vector76
+c0102d4c vector75
+c010324d vector195
+c0103031 vector150
+c0102cb3 vector58
+c01034c9 vector248
+c0148acc _binary_obj___user_forktree_out_end
+c0102efc vector123
+c0102e09 vector96
+00007968 _binary_obj___user_exit_out_size
+c0102bc0 vector31
+c0108b7c phi_take_forks_condvar
+c01032ad vector203
+c0103860 alloc_pages
+c018566c _binary_obj___user_waitkill_out_start
+c0102fad vector139
+c0103055 vector153
+c01030d9 vector164
+c01763c8 _binary_obj___user_priority_out_end
+c0102eea vector121
+c0102ae6 vector5
+c018d07c _binary_obj___user_spin_out_start
+c01030fd vector167
+c010306d vector155
+c01034d5 vector249
+c010d628 vpt
+c01034e1 vector250
+c0102f05 vector124
+00007964 _binary_obj___user_sleep_out_size
+c0102e87 vector110
+c01032b9 vector204
+c0157d74 _binary_obj___user_faultread_out_end
+c01c5460 swap_page
+c01b2f80 _binary_obj___user_pgdir_out_start
+c0103540 __trapret
+c01ba8d0 _binary_obj___user_matrix_out_start
+c0100265 vcprintf
+c0102f95 vector137
+c017dd1c _binary_obj___user_sleepkill_out_end
+00007954 _binary_obj___user_faultread_out_size
+c0100462 __warn
+c01034bd vector247
+c0108d88 check_sync
+c0102b6f vector22
+c01032a1 vector202
+c0102d31 vector72
+c0102c98 vector55
+c01002cb cputs
+c0131000 bootstacktop
+c010a11d find_proc
+c0102f17 vector126
+c0102cf2 vector65
+c0102ba5 vector28
+c0103115 vector169
+c0106ef4 swap_tick_event
+c0103415 vector233
+000079f4 _binary_obj___user_matrix_out_size
+c0106f4e swap_out
+c0106c5d kmalloc
+c015f714 _binary_obj___user_divzero_out_end
+c01056e6 vma_create
+c0109197 wait_queue_empty
+c010300d vector147
+c0109fcf proc_run
+c012f000 bootstack
+c0102e51 vector104
+c01c5484 free_area
+c0102ebd vector116
+c0157d74 _binary_obj___user_divzero_out_start
+000079e8 _binary_obj___user_priority_out_size
+c01098d2 swapfs_write
+c010f940 __STAB_BEGIN__
+c0106554 user_mem_check
+c010b666 sched_init
+c01c5474 check_ptep
+c0102c7d vector52
+c0102b44 vector17
+c0109069 wait_queue_next
+c01031c9 vector184
+c010c0b7 strlen
+c0131a78 default_sched_class
+c010b928 del_timer
+c0109d45 get_proc_name
+c016e9e0 _binary_obj___user_priority_out_start
+c01c32ec pgfault_num
+c01032dd vector207
+c019c318 _binary_obj___user_yield_out_end
+c0103211 vector190
+c0100eaa ide_init
+c010345d vector239
+c0102df7 vector94
+c0102dee vector93
+c01031f9 vector188
+c010c229 strchr
+c0102c59 vector48
+c01c53b0 check_mm_struct
+c0106ed9 swap_init_mm
+c01000cb grade_backtrace1
+c010336d vector219
+c0103019 vector148
+c0103385 vector221
+c0102d79 vector80
+c010312d vector171
+c0103061 vector154
+c0102bed vector36
+c010342d vector235
+c0102e5a vector105
+c0100e2c mon_kerninfo
+c010952c try_down
+c01c53a4 pages
+c0103001 vector146
+c0104134 unmap_range
+c010321d vector191
+c010b318 proc_init
+c0102e48 vector103
+c010971d cond_wait
+c016707c _binary_obj___user_sleep_out_start
+c0100dd2 mon_help
+c016e9e0 _binary_obj___user_sleep_out_end
+c0102b16 vector11
+0000796c _binary_obj___user_forktest_out_size
+c01045c6 tlb_invalidate
+c0102b2b vector14
diff -r -u -P lab7_original/obj/libs/hash.d lab7/obj/libs/hash.d
--- lab7_original/obj/libs/hash.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/libs/hash.d	2016-05-06 21:59:27.614123272 +0800
@@ -0,0 +1 @@
+obj/libs/hash.o obj/libs/hash.d: libs/hash.c libs/stdlib.h libs/defs.h
Binary files lab7_original/obj/libs/hash.o and lab7/obj/libs/hash.o differ
diff -r -u -P lab7_original/obj/libs/printfmt.d lab7/obj/libs/printfmt.d
--- lab7_original/obj/libs/printfmt.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/libs/printfmt.d	2016-05-06 21:59:27.606122983 +0800
@@ -0,0 +1,2 @@
+obj/libs/printfmt.o obj/libs/printfmt.d: libs/printfmt.c libs/defs.h \
+ libs/x86.h libs/error.h libs/stdio.h libs/stdarg.h libs/string.h
Binary files lab7_original/obj/libs/printfmt.o and lab7/obj/libs/printfmt.o differ
diff -r -u -P lab7_original/obj/libs/rand.d lab7/obj/libs/rand.d
--- lab7_original/obj/libs/rand.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/libs/rand.d	2016-05-06 21:59:27.578121968 +0800
@@ -0,0 +1,2 @@
+obj/libs/rand.o obj/libs/rand.d: libs/rand.c libs/x86.h libs/defs.h \
+ libs/stdlib.h
Binary files lab7_original/obj/libs/rand.o and lab7/obj/libs/rand.o differ
diff -r -u -P lab7_original/obj/libs/string.d lab7/obj/libs/string.d
--- lab7_original/obj/libs/string.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/libs/string.d	2016-05-06 21:59:27.634123997 +0800
@@ -0,0 +1,2 @@
+obj/libs/string.o obj/libs/string.d: libs/string.c libs/string.h \
+ libs/defs.h libs/x86.h
Binary files lab7_original/obj/libs/string.o and lab7/obj/libs/string.o differ
diff -r -u -P lab7_original/obj/sign/tools/sign.d lab7/obj/sign/tools/sign.d
--- lab7_original/obj/sign/tools/sign.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/sign/tools/sign.d	2016-05-06 21:59:27.622123562 +0800
@@ -0,0 +1 @@
+obj/sign/tools/sign.o obj/sign/tools/sign.d: tools/sign.c
Binary files lab7_original/obj/sign/tools/sign.o and lab7/obj/sign/tools/sign.o differ
diff -r -u -P lab7_original/obj/user/badarg.asm lab7/obj/user/badarg.asm
--- lab7_original/obj/user/badarg.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/badarg.asm	2016-05-06 21:59:28.662161485 +0800
@@ -0,0 +1,2697 @@
+
+obj/__user_badarg.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 18             	sub    $0x18,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	83 ec 04             	sub    $0x4,%esp
+  80002f:	ff 75 0c             	pushl  0xc(%ebp)
+  800032:	ff 75 08             	pushl  0x8(%ebp)
+  800035:	68 80 10 80 00       	push   $0x801080
+  80003a:	e8 c2 02 00 00       	call   800301 <cprintf>
+  80003f:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800042:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800045:	83 ec 08             	sub    $0x8,%esp
+  800048:	50                   	push   %eax
+  800049:	ff 75 10             	pushl  0x10(%ebp)
+  80004c:	e8 87 02 00 00       	call   8002d8 <vcprintf>
+  800051:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  800054:	83 ec 0c             	sub    $0xc,%esp
+  800057:	68 9a 10 80 00       	push   $0x80109a
+  80005c:	e8 a0 02 00 00       	call   800301 <cprintf>
+  800061:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	83 ec 0c             	sub    $0xc,%esp
+  800067:	6a f6                	push   $0xfffffff6
+  800069:	e8 5b 01 00 00       	call   8001c9 <exit>
+
+0080006e <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80006e:	55                   	push   %ebp
+  80006f:	89 e5                	mov    %esp,%ebp
+  800071:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800074:	8d 45 14             	lea    0x14(%ebp),%eax
+  800077:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007a:	83 ec 04             	sub    $0x4,%esp
+  80007d:	ff 75 0c             	pushl  0xc(%ebp)
+  800080:	ff 75 08             	pushl  0x8(%ebp)
+  800083:	68 9c 10 80 00       	push   $0x80109c
+  800088:	e8 74 02 00 00       	call   800301 <cprintf>
+  80008d:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800090:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800093:	83 ec 08             	sub    $0x8,%esp
+  800096:	50                   	push   %eax
+  800097:	ff 75 10             	pushl  0x10(%ebp)
+  80009a:	e8 39 02 00 00       	call   8002d8 <vcprintf>
+  80009f:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  8000a2:	83 ec 0c             	sub    $0xc,%esp
+  8000a5:	68 9a 10 80 00       	push   $0x80109a
+  8000aa:	e8 52 02 00 00       	call   800301 <cprintf>
+  8000af:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8000b2:	90                   	nop
+  8000b3:	c9                   	leave  
+  8000b4:	c3                   	ret    
+
+008000b5 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b5:	55                   	push   %ebp
+  8000b6:	89 e5                	mov    %esp,%ebp
+  8000b8:	57                   	push   %edi
+  8000b9:	56                   	push   %esi
+  8000ba:	53                   	push   %ebx
+  8000bb:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000be:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cb:	eb 16                	jmp    8000e3 <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8000cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d0:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d3:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d6:	8b 10                	mov    (%eax),%edx
+  8000d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000db:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000df:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8000e3:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e7:	7e e4                	jle    8000cd <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000e9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ec:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000ef:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f2:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f5:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8000f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fb:	cd 80                	int    $0x80
+  8000fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  800100:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800103:	83 c4 20             	add    $0x20,%esp
+  800106:	5b                   	pop    %ebx
+  800107:	5e                   	pop    %esi
+  800108:	5f                   	pop    %edi
+  800109:	5d                   	pop    %ebp
+  80010a:	c3                   	ret    
+
+0080010b <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010b:	55                   	push   %ebp
+  80010c:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_exit, error_code);
+  80010e:	ff 75 08             	pushl  0x8(%ebp)
+  800111:	6a 01                	push   $0x1
+  800113:	e8 9d ff ff ff       	call   8000b5 <syscall>
+  800118:	83 c4 08             	add    $0x8,%esp
+}
+  80011b:	c9                   	leave  
+  80011c:	c3                   	ret    
+
+0080011d <sys_fork>:
+
+int
+sys_fork(void) {
+  80011d:	55                   	push   %ebp
+  80011e:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_fork);
+  800120:	6a 02                	push   $0x2
+  800122:	e8 8e ff ff ff       	call   8000b5 <syscall>
+  800127:	83 c4 04             	add    $0x4,%esp
+}
+  80012a:	c9                   	leave  
+  80012b:	c3                   	ret    
+
+0080012c <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80012c:	55                   	push   %ebp
+  80012d:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_wait, pid, store);
+  80012f:	ff 75 0c             	pushl  0xc(%ebp)
+  800132:	ff 75 08             	pushl  0x8(%ebp)
+  800135:	6a 03                	push   $0x3
+  800137:	e8 79 ff ff ff       	call   8000b5 <syscall>
+  80013c:	83 c4 0c             	add    $0xc,%esp
+}
+  80013f:	c9                   	leave  
+  800140:	c3                   	ret    
+
+00800141 <sys_yield>:
+
+int
+sys_yield(void) {
+  800141:	55                   	push   %ebp
+  800142:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_yield);
+  800144:	6a 0a                	push   $0xa
+  800146:	e8 6a ff ff ff       	call   8000b5 <syscall>
+  80014b:	83 c4 04             	add    $0x4,%esp
+}
+  80014e:	c9                   	leave  
+  80014f:	c3                   	ret    
+
+00800150 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800150:	55                   	push   %ebp
+  800151:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_kill, pid);
+  800153:	ff 75 08             	pushl  0x8(%ebp)
+  800156:	6a 0c                	push   $0xc
+  800158:	e8 58 ff ff ff       	call   8000b5 <syscall>
+  80015d:	83 c4 08             	add    $0x8,%esp
+}
+  800160:	c9                   	leave  
+  800161:	c3                   	ret    
+
+00800162 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800162:	55                   	push   %ebp
+  800163:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_getpid);
+  800165:	6a 12                	push   $0x12
+  800167:	e8 49 ff ff ff       	call   8000b5 <syscall>
+  80016c:	83 c4 04             	add    $0x4,%esp
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_putc, c);
+  800174:	ff 75 08             	pushl  0x8(%ebp)
+  800177:	6a 1e                	push   $0x1e
+  800179:	e8 37 ff ff ff       	call   8000b5 <syscall>
+  80017e:	83 c4 08             	add    $0x8,%esp
+}
+  800181:	c9                   	leave  
+  800182:	c3                   	ret    
+
+00800183 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800183:	55                   	push   %ebp
+  800184:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_pgdir);
+  800186:	6a 1f                	push   $0x1f
+  800188:	e8 28 ff ff ff       	call   8000b5 <syscall>
+  80018d:	83 c4 04             	add    $0x4,%esp
+}
+  800190:	c9                   	leave  
+  800191:	c3                   	ret    
+
+00800192 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  800192:	55                   	push   %ebp
+  800193:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_gettime);
+  800195:	6a 11                	push   $0x11
+  800197:	e8 19 ff ff ff       	call   8000b5 <syscall>
+  80019c:	83 c4 04             	add    $0x4,%esp
+}
+  80019f:	c9                   	leave  
+  8001a0:	c3                   	ret    
+
+008001a1 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001a1:	55                   	push   %ebp
+  8001a2:	89 e5                	mov    %esp,%ebp
+    syscall(SYS_lab6_set_priority, priority);
+  8001a4:	ff 75 08             	pushl  0x8(%ebp)
+  8001a7:	68 ff 00 00 00       	push   $0xff
+  8001ac:	e8 04 ff ff ff       	call   8000b5 <syscall>
+  8001b1:	83 c4 08             	add    $0x8,%esp
+}
+  8001b4:	90                   	nop
+  8001b5:	c9                   	leave  
+  8001b6:	c3                   	ret    
+
+008001b7 <sys_sleep>:
+
+int
+sys_sleep(unsigned int time) {
+  8001b7:	55                   	push   %ebp
+  8001b8:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_sleep, time);
+  8001ba:	ff 75 08             	pushl  0x8(%ebp)
+  8001bd:	6a 0b                	push   $0xb
+  8001bf:	e8 f1 fe ff ff       	call   8000b5 <syscall>
+  8001c4:	83 c4 08             	add    $0x8,%esp
+}
+  8001c7:	c9                   	leave  
+  8001c8:	c3                   	ret    
+
+008001c9 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001c9:	55                   	push   %ebp
+  8001ca:	89 e5                	mov    %esp,%ebp
+  8001cc:	83 ec 08             	sub    $0x8,%esp
+    sys_exit(error_code);
+  8001cf:	83 ec 0c             	sub    $0xc,%esp
+  8001d2:	ff 75 08             	pushl  0x8(%ebp)
+  8001d5:	e8 31 ff ff ff       	call   80010b <sys_exit>
+  8001da:	83 c4 10             	add    $0x10,%esp
+    cprintf("BUG: exit failed.\n");
+  8001dd:	83 ec 0c             	sub    $0xc,%esp
+  8001e0:	68 b8 10 80 00       	push   $0x8010b8
+  8001e5:	e8 17 01 00 00       	call   800301 <cprintf>
+  8001ea:	83 c4 10             	add    $0x10,%esp
+    while (1);
+  8001ed:	eb fe                	jmp    8001ed <exit+0x24>
+
+008001ef <fork>:
+}
+
+int
+fork(void) {
+  8001ef:	55                   	push   %ebp
+  8001f0:	89 e5                	mov    %esp,%ebp
+  8001f2:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8001f5:	e8 23 ff ff ff       	call   80011d <sys_fork>
+}
+  8001fa:	c9                   	leave  
+  8001fb:	c3                   	ret    
+
+008001fc <wait>:
+
+int
+wait(void) {
+  8001fc:	55                   	push   %ebp
+  8001fd:	89 e5                	mov    %esp,%ebp
+  8001ff:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(0, NULL);
+  800202:	83 ec 08             	sub    $0x8,%esp
+  800205:	6a 00                	push   $0x0
+  800207:	6a 00                	push   $0x0
+  800209:	e8 1e ff ff ff       	call   80012c <sys_wait>
+  80020e:	83 c4 10             	add    $0x10,%esp
+}
+  800211:	c9                   	leave  
+  800212:	c3                   	ret    
+
+00800213 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800213:	55                   	push   %ebp
+  800214:	89 e5                	mov    %esp,%ebp
+  800216:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(pid, store);
+  800219:	83 ec 08             	sub    $0x8,%esp
+  80021c:	ff 75 0c             	pushl  0xc(%ebp)
+  80021f:	ff 75 08             	pushl  0x8(%ebp)
+  800222:	e8 05 ff ff ff       	call   80012c <sys_wait>
+  800227:	83 c4 10             	add    $0x10,%esp
+}
+  80022a:	c9                   	leave  
+  80022b:	c3                   	ret    
+
+0080022c <yield>:
+
+void
+yield(void) {
+  80022c:	55                   	push   %ebp
+  80022d:	89 e5                	mov    %esp,%ebp
+  80022f:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800232:	e8 0a ff ff ff       	call   800141 <sys_yield>
+}
+  800237:	90                   	nop
+  800238:	c9                   	leave  
+  800239:	c3                   	ret    
+
+0080023a <kill>:
+
+int
+kill(int pid) {
+  80023a:	55                   	push   %ebp
+  80023b:	89 e5                	mov    %esp,%ebp
+  80023d:	83 ec 08             	sub    $0x8,%esp
+    return sys_kill(pid);
+  800240:	83 ec 0c             	sub    $0xc,%esp
+  800243:	ff 75 08             	pushl  0x8(%ebp)
+  800246:	e8 05 ff ff ff       	call   800150 <sys_kill>
+  80024b:	83 c4 10             	add    $0x10,%esp
+}
+  80024e:	c9                   	leave  
+  80024f:	c3                   	ret    
+
+00800250 <getpid>:
+
+int
+getpid(void) {
+  800250:	55                   	push   %ebp
+  800251:	89 e5                	mov    %esp,%ebp
+  800253:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800256:	e8 07 ff ff ff       	call   800162 <sys_getpid>
+}
+  80025b:	c9                   	leave  
+  80025c:	c3                   	ret    
+
+0080025d <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80025d:	55                   	push   %ebp
+  80025e:	89 e5                	mov    %esp,%ebp
+  800260:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800263:	e8 1b ff ff ff       	call   800183 <sys_pgdir>
+}
+  800268:	90                   	nop
+  800269:	c9                   	leave  
+  80026a:	c3                   	ret    
+
+0080026b <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80026b:	55                   	push   %ebp
+  80026c:	89 e5                	mov    %esp,%ebp
+  80026e:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800271:	e8 1c ff ff ff       	call   800192 <sys_gettime>
+}
+  800276:	c9                   	leave  
+  800277:	c3                   	ret    
+
+00800278 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800278:	55                   	push   %ebp
+  800279:	89 e5                	mov    %esp,%ebp
+  80027b:	83 ec 08             	sub    $0x8,%esp
+    sys_lab6_set_priority(priority);
+  80027e:	83 ec 0c             	sub    $0xc,%esp
+  800281:	ff 75 08             	pushl  0x8(%ebp)
+  800284:	e8 18 ff ff ff       	call   8001a1 <sys_lab6_set_priority>
+  800289:	83 c4 10             	add    $0x10,%esp
+}
+  80028c:	90                   	nop
+  80028d:	c9                   	leave  
+  80028e:	c3                   	ret    
+
+0080028f <sleep>:
+
+int
+sleep(unsigned int time) {
+  80028f:	55                   	push   %ebp
+  800290:	89 e5                	mov    %esp,%ebp
+  800292:	83 ec 08             	sub    $0x8,%esp
+    return sys_sleep(time);
+  800295:	83 ec 0c             	sub    $0xc,%esp
+  800298:	ff 75 08             	pushl  0x8(%ebp)
+  80029b:	e8 17 ff ff ff       	call   8001b7 <sys_sleep>
+  8002a0:	83 c4 10             	add    $0x10,%esp
+}
+  8002a3:	c9                   	leave  
+  8002a4:	c3                   	ret    
+
+008002a5 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  8002a5:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  8002aa:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  8002ad:	e8 c3 00 00 00       	call   800375 <umain>
+1:  jmp 1b
+  8002b2:	eb fe                	jmp    8002b2 <_start+0xd>
+
+008002b4 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8002b4:	55                   	push   %ebp
+  8002b5:	89 e5                	mov    %esp,%ebp
+  8002b7:	83 ec 08             	sub    $0x8,%esp
+    sys_putc(c);
+  8002ba:	83 ec 0c             	sub    $0xc,%esp
+  8002bd:	ff 75 08             	pushl  0x8(%ebp)
+  8002c0:	e8 ac fe ff ff       	call   800171 <sys_putc>
+  8002c5:	83 c4 10             	add    $0x10,%esp
+    (*cnt) ++;
+  8002c8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002cb:	8b 00                	mov    (%eax),%eax
+  8002cd:	8d 50 01             	lea    0x1(%eax),%edx
+  8002d0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002d3:	89 10                	mov    %edx,(%eax)
+}
+  8002d5:	90                   	nop
+  8002d6:	c9                   	leave  
+  8002d7:	c3                   	ret    
+
+008002d8 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002d8:	55                   	push   %ebp
+  8002d9:	89 e5                	mov    %esp,%ebp
+  8002db:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  8002de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002e5:	ff 75 0c             	pushl  0xc(%ebp)
+  8002e8:	ff 75 08             	pushl  0x8(%ebp)
+  8002eb:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  8002ee:	50                   	push   %eax
+  8002ef:	68 b4 02 80 00       	push   $0x8002b4
+  8002f4:	e8 fc 06 00 00       	call   8009f5 <vprintfmt>
+  8002f9:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  8002fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002ff:	c9                   	leave  
+  800300:	c3                   	ret    
+
+00800301 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800301:	55                   	push   %ebp
+  800302:	89 e5                	mov    %esp,%ebp
+  800304:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800307:	8d 45 0c             	lea    0xc(%ebp),%eax
+  80030a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  80030d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800310:	83 ec 08             	sub    $0x8,%esp
+  800313:	50                   	push   %eax
+  800314:	ff 75 08             	pushl  0x8(%ebp)
+  800317:	e8 bc ff ff ff       	call   8002d8 <vcprintf>
+  80031c:	83 c4 10             	add    $0x10,%esp
+  80031f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800322:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800325:	c9                   	leave  
+  800326:	c3                   	ret    
+
+00800327 <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  800327:	55                   	push   %ebp
+  800328:	89 e5                	mov    %esp,%ebp
+  80032a:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  80032d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  800334:	eb 14                	jmp    80034a <cputs+0x23>
+        cputch(c, &cnt);
+  800336:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  80033a:	83 ec 08             	sub    $0x8,%esp
+  80033d:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800340:	52                   	push   %edx
+  800341:	50                   	push   %eax
+  800342:	e8 6d ff ff ff       	call   8002b4 <cputch>
+  800347:	83 c4 10             	add    $0x10,%esp
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  80034a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80034d:	8d 50 01             	lea    0x1(%eax),%edx
+  800350:	89 55 08             	mov    %edx,0x8(%ebp)
+  800353:	0f b6 00             	movzbl (%eax),%eax
+  800356:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800359:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  80035d:	75 d7                	jne    800336 <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  80035f:	83 ec 08             	sub    $0x8,%esp
+  800362:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800365:	50                   	push   %eax
+  800366:	6a 0a                	push   $0xa
+  800368:	e8 47 ff ff ff       	call   8002b4 <cputch>
+  80036d:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  800370:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  800373:	c9                   	leave  
+  800374:	c3                   	ret    
+
+00800375 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800375:	55                   	push   %ebp
+  800376:	89 e5                	mov    %esp,%ebp
+  800378:	83 ec 18             	sub    $0x18,%esp
+    int ret = main();
+  80037b:	e8 d3 0b 00 00       	call   800f53 <main>
+  800380:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  800383:	83 ec 0c             	sub    $0xc,%esp
+  800386:	ff 75 f4             	pushl  -0xc(%ebp)
+  800389:	e8 3b fe ff ff       	call   8001c9 <exit>
+
+0080038e <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  80038e:	55                   	push   %ebp
+  80038f:	89 e5                	mov    %esp,%ebp
+  800391:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800394:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  80039b:	eb 04                	jmp    8003a1 <strlen+0x13>
+        cnt ++;
+  80039d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  8003a1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003a4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003a7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003aa:	0f b6 00             	movzbl (%eax),%eax
+  8003ad:	84 c0                	test   %al,%al
+  8003af:	75 ec                	jne    80039d <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003b4:	c9                   	leave  
+  8003b5:	c3                   	ret    
+
+008003b6 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  8003b6:	55                   	push   %ebp
+  8003b7:	89 e5                	mov    %esp,%ebp
+  8003b9:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003bc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003c3:	eb 04                	jmp    8003c9 <strnlen+0x13>
+        cnt ++;
+  8003c5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  8003c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003cc:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003cf:	73 10                	jae    8003e1 <strnlen+0x2b>
+  8003d1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003d4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003d7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003da:	0f b6 00             	movzbl (%eax),%eax
+  8003dd:	84 c0                	test   %al,%al
+  8003df:	75 e4                	jne    8003c5 <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003e4:	c9                   	leave  
+  8003e5:	c3                   	ret    
+
+008003e6 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  8003e6:	55                   	push   %ebp
+  8003e7:	89 e5                	mov    %esp,%ebp
+  8003e9:	57                   	push   %edi
+  8003ea:	56                   	push   %esi
+  8003eb:	83 ec 20             	sub    $0x20,%esp
+  8003ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003f4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8003f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  8003fa:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800400:	89 d1                	mov    %edx,%ecx
+  800402:	89 c2                	mov    %eax,%edx
+  800404:	89 ce                	mov    %ecx,%esi
+  800406:	89 d7                	mov    %edx,%edi
+  800408:	ac                   	lods   %ds:(%esi),%al
+  800409:	aa                   	stos   %al,%es:(%edi)
+  80040a:	84 c0                	test   %al,%al
+  80040c:	75 fa                	jne    800408 <strcpy+0x22>
+  80040e:	89 fa                	mov    %edi,%edx
+  800410:	89 f1                	mov    %esi,%ecx
+  800412:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800415:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800418:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  80041b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  80041e:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  80041f:	83 c4 20             	add    $0x20,%esp
+  800422:	5e                   	pop    %esi
+  800423:	5f                   	pop    %edi
+  800424:	5d                   	pop    %ebp
+  800425:	c3                   	ret    
+
+00800426 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800426:	55                   	push   %ebp
+  800427:	89 e5                	mov    %esp,%ebp
+  800429:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  80042c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80042f:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800432:	eb 21                	jmp    800455 <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800434:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800437:	0f b6 10             	movzbl (%eax),%edx
+  80043a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80043d:	88 10                	mov    %dl,(%eax)
+  80043f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800442:	0f b6 00             	movzbl (%eax),%eax
+  800445:	84 c0                	test   %al,%al
+  800447:	74 04                	je     80044d <strncpy+0x27>
+            src ++;
+  800449:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  80044d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800451:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800455:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800459:	75 d9                	jne    800434 <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  80045b:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  80045e:	c9                   	leave  
+  80045f:	c3                   	ret    
+
+00800460 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800460:	55                   	push   %ebp
+  800461:	89 e5                	mov    %esp,%ebp
+  800463:	57                   	push   %edi
+  800464:	56                   	push   %esi
+  800465:	83 ec 20             	sub    $0x20,%esp
+  800468:	8b 45 08             	mov    0x8(%ebp),%eax
+  80046b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80046e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800471:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800474:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800477:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80047a:	89 d1                	mov    %edx,%ecx
+  80047c:	89 c2                	mov    %eax,%edx
+  80047e:	89 ce                	mov    %ecx,%esi
+  800480:	89 d7                	mov    %edx,%edi
+  800482:	ac                   	lods   %ds:(%esi),%al
+  800483:	ae                   	scas   %es:(%edi),%al
+  800484:	75 08                	jne    80048e <strcmp+0x2e>
+  800486:	84 c0                	test   %al,%al
+  800488:	75 f8                	jne    800482 <strcmp+0x22>
+  80048a:	31 c0                	xor    %eax,%eax
+  80048c:	eb 04                	jmp    800492 <strcmp+0x32>
+  80048e:	19 c0                	sbb    %eax,%eax
+  800490:	0c 01                	or     $0x1,%al
+  800492:	89 fa                	mov    %edi,%edx
+  800494:	89 f1                	mov    %esi,%ecx
+  800496:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800499:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  80049c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  80049f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  8004a2:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  8004a3:	83 c4 20             	add    $0x20,%esp
+  8004a6:	5e                   	pop    %esi
+  8004a7:	5f                   	pop    %edi
+  8004a8:	5d                   	pop    %ebp
+  8004a9:	c3                   	ret    
+
+008004aa <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  8004aa:	55                   	push   %ebp
+  8004ab:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004ad:	eb 0c                	jmp    8004bb <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  8004af:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  8004b3:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8004b7:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004bb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004bf:	74 1a                	je     8004db <strncmp+0x31>
+  8004c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004c4:	0f b6 00             	movzbl (%eax),%eax
+  8004c7:	84 c0                	test   %al,%al
+  8004c9:	74 10                	je     8004db <strncmp+0x31>
+  8004cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004ce:	0f b6 10             	movzbl (%eax),%edx
+  8004d1:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004d4:	0f b6 00             	movzbl (%eax),%eax
+  8004d7:	38 c2                	cmp    %al,%dl
+  8004d9:	74 d4                	je     8004af <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004db:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004df:	74 18                	je     8004f9 <strncmp+0x4f>
+  8004e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e4:	0f b6 00             	movzbl (%eax),%eax
+  8004e7:	0f b6 d0             	movzbl %al,%edx
+  8004ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ed:	0f b6 00             	movzbl (%eax),%eax
+  8004f0:	0f b6 c0             	movzbl %al,%eax
+  8004f3:	29 c2                	sub    %eax,%edx
+  8004f5:	89 d0                	mov    %edx,%eax
+  8004f7:	eb 05                	jmp    8004fe <strncmp+0x54>
+  8004f9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8004fe:	5d                   	pop    %ebp
+  8004ff:	c3                   	ret    
+
+00800500 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800500:	55                   	push   %ebp
+  800501:	89 e5                	mov    %esp,%ebp
+  800503:	83 ec 04             	sub    $0x4,%esp
+  800506:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800509:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  80050c:	eb 14                	jmp    800522 <strchr+0x22>
+        if (*s == c) {
+  80050e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800511:	0f b6 00             	movzbl (%eax),%eax
+  800514:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800517:	75 05                	jne    80051e <strchr+0x1e>
+            return (char *)s;
+  800519:	8b 45 08             	mov    0x8(%ebp),%eax
+  80051c:	eb 13                	jmp    800531 <strchr+0x31>
+        }
+        s ++;
+  80051e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800522:	8b 45 08             	mov    0x8(%ebp),%eax
+  800525:	0f b6 00             	movzbl (%eax),%eax
+  800528:	84 c0                	test   %al,%al
+  80052a:	75 e2                	jne    80050e <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  80052c:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800531:	c9                   	leave  
+  800532:	c3                   	ret    
+
+00800533 <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800533:	55                   	push   %ebp
+  800534:	89 e5                	mov    %esp,%ebp
+  800536:	83 ec 04             	sub    $0x4,%esp
+  800539:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80053c:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  80053f:	eb 0f                	jmp    800550 <strfind+0x1d>
+        if (*s == c) {
+  800541:	8b 45 08             	mov    0x8(%ebp),%eax
+  800544:	0f b6 00             	movzbl (%eax),%eax
+  800547:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  80054a:	74 10                	je     80055c <strfind+0x29>
+            break;
+        }
+        s ++;
+  80054c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800550:	8b 45 08             	mov    0x8(%ebp),%eax
+  800553:	0f b6 00             	movzbl (%eax),%eax
+  800556:	84 c0                	test   %al,%al
+  800558:	75 e7                	jne    800541 <strfind+0xe>
+  80055a:	eb 01                	jmp    80055d <strfind+0x2a>
+        if (*s == c) {
+            break;
+  80055c:	90                   	nop
+        }
+        s ++;
+    }
+    return (char *)s;
+  80055d:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800560:	c9                   	leave  
+  800561:	c3                   	ret    
+
+00800562 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800562:	55                   	push   %ebp
+  800563:	89 e5                	mov    %esp,%ebp
+  800565:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800568:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  80056f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800576:	eb 04                	jmp    80057c <strtol+0x1a>
+        s ++;
+  800578:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80057c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80057f:	0f b6 00             	movzbl (%eax),%eax
+  800582:	3c 20                	cmp    $0x20,%al
+  800584:	74 f2                	je     800578 <strtol+0x16>
+  800586:	8b 45 08             	mov    0x8(%ebp),%eax
+  800589:	0f b6 00             	movzbl (%eax),%eax
+  80058c:	3c 09                	cmp    $0x9,%al
+  80058e:	74 e8                	je     800578 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800590:	8b 45 08             	mov    0x8(%ebp),%eax
+  800593:	0f b6 00             	movzbl (%eax),%eax
+  800596:	3c 2b                	cmp    $0x2b,%al
+  800598:	75 06                	jne    8005a0 <strtol+0x3e>
+        s ++;
+  80059a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  80059e:	eb 15                	jmp    8005b5 <strtol+0x53>
+    }
+    else if (*s == '-') {
+  8005a0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a3:	0f b6 00             	movzbl (%eax),%eax
+  8005a6:	3c 2d                	cmp    $0x2d,%al
+  8005a8:	75 0b                	jne    8005b5 <strtol+0x53>
+        s ++, neg = 1;
+  8005aa:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005ae:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  8005b5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005b9:	74 06                	je     8005c1 <strtol+0x5f>
+  8005bb:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  8005bf:	75 24                	jne    8005e5 <strtol+0x83>
+  8005c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005c4:	0f b6 00             	movzbl (%eax),%eax
+  8005c7:	3c 30                	cmp    $0x30,%al
+  8005c9:	75 1a                	jne    8005e5 <strtol+0x83>
+  8005cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ce:	83 c0 01             	add    $0x1,%eax
+  8005d1:	0f b6 00             	movzbl (%eax),%eax
+  8005d4:	3c 78                	cmp    $0x78,%al
+  8005d6:	75 0d                	jne    8005e5 <strtol+0x83>
+        s += 2, base = 16;
+  8005d8:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005dc:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005e3:	eb 2a                	jmp    80060f <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005e5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005e9:	75 17                	jne    800602 <strtol+0xa0>
+  8005eb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ee:	0f b6 00             	movzbl (%eax),%eax
+  8005f1:	3c 30                	cmp    $0x30,%al
+  8005f3:	75 0d                	jne    800602 <strtol+0xa0>
+        s ++, base = 8;
+  8005f5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005f9:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800600:	eb 0d                	jmp    80060f <strtol+0xad>
+    }
+    else if (base == 0) {
+  800602:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800606:	75 07                	jne    80060f <strtol+0xad>
+        base = 10;
+  800608:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  80060f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800612:	0f b6 00             	movzbl (%eax),%eax
+  800615:	3c 2f                	cmp    $0x2f,%al
+  800617:	7e 1b                	jle    800634 <strtol+0xd2>
+  800619:	8b 45 08             	mov    0x8(%ebp),%eax
+  80061c:	0f b6 00             	movzbl (%eax),%eax
+  80061f:	3c 39                	cmp    $0x39,%al
+  800621:	7f 11                	jg     800634 <strtol+0xd2>
+            dig = *s - '0';
+  800623:	8b 45 08             	mov    0x8(%ebp),%eax
+  800626:	0f b6 00             	movzbl (%eax),%eax
+  800629:	0f be c0             	movsbl %al,%eax
+  80062c:	83 e8 30             	sub    $0x30,%eax
+  80062f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800632:	eb 48                	jmp    80067c <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800634:	8b 45 08             	mov    0x8(%ebp),%eax
+  800637:	0f b6 00             	movzbl (%eax),%eax
+  80063a:	3c 60                	cmp    $0x60,%al
+  80063c:	7e 1b                	jle    800659 <strtol+0xf7>
+  80063e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800641:	0f b6 00             	movzbl (%eax),%eax
+  800644:	3c 7a                	cmp    $0x7a,%al
+  800646:	7f 11                	jg     800659 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800648:	8b 45 08             	mov    0x8(%ebp),%eax
+  80064b:	0f b6 00             	movzbl (%eax),%eax
+  80064e:	0f be c0             	movsbl %al,%eax
+  800651:	83 e8 57             	sub    $0x57,%eax
+  800654:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800657:	eb 23                	jmp    80067c <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800659:	8b 45 08             	mov    0x8(%ebp),%eax
+  80065c:	0f b6 00             	movzbl (%eax),%eax
+  80065f:	3c 40                	cmp    $0x40,%al
+  800661:	7e 3c                	jle    80069f <strtol+0x13d>
+  800663:	8b 45 08             	mov    0x8(%ebp),%eax
+  800666:	0f b6 00             	movzbl (%eax),%eax
+  800669:	3c 5a                	cmp    $0x5a,%al
+  80066b:	7f 32                	jg     80069f <strtol+0x13d>
+            dig = *s - 'A' + 10;
+  80066d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800670:	0f b6 00             	movzbl (%eax),%eax
+  800673:	0f be c0             	movsbl %al,%eax
+  800676:	83 e8 37             	sub    $0x37,%eax
+  800679:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  80067c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80067f:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800682:	7d 1a                	jge    80069e <strtol+0x13c>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  800684:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800688:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80068b:	0f af 45 10          	imul   0x10(%ebp),%eax
+  80068f:	89 c2                	mov    %eax,%edx
+  800691:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800694:	01 d0                	add    %edx,%eax
+  800696:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800699:	e9 71 ff ff ff       	jmp    80060f <strtol+0xad>
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+            break;
+  80069e:	90                   	nop
+        }
+        s ++, val = (val * base) + dig;
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  80069f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8006a3:	74 08                	je     8006ad <strtol+0x14b>
+        *endptr = (char *) s;
+  8006a5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006a8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006ab:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  8006ad:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  8006b1:	74 07                	je     8006ba <strtol+0x158>
+  8006b3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006b6:	f7 d8                	neg    %eax
+  8006b8:	eb 03                	jmp    8006bd <strtol+0x15b>
+  8006ba:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  8006bd:	c9                   	leave  
+  8006be:	c3                   	ret    
+
+008006bf <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  8006bf:	55                   	push   %ebp
+  8006c0:	89 e5                	mov    %esp,%ebp
+  8006c2:	57                   	push   %edi
+  8006c3:	83 ec 24             	sub    $0x24,%esp
+  8006c6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006c9:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006cc:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006d0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006d3:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006d6:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006d9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006df:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006e2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006e6:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006e9:	89 d7                	mov    %edx,%edi
+  8006eb:	f3 aa                	rep stos %al,%es:(%edi)
+  8006ed:	89 fa                	mov    %edi,%edx
+  8006ef:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8006f2:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  8006f5:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006f8:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  8006f9:	83 c4 24             	add    $0x24,%esp
+  8006fc:	5f                   	pop    %edi
+  8006fd:	5d                   	pop    %ebp
+  8006fe:	c3                   	ret    
+
+008006ff <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  8006ff:	55                   	push   %ebp
+  800700:	89 e5                	mov    %esp,%ebp
+  800702:	57                   	push   %edi
+  800703:	56                   	push   %esi
+  800704:	53                   	push   %ebx
+  800705:	83 ec 30             	sub    $0x30,%esp
+  800708:	8b 45 08             	mov    0x8(%ebp),%eax
+  80070b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80070e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800711:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800714:	8b 45 10             	mov    0x10(%ebp),%eax
+  800717:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  80071a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80071d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800720:	73 42                	jae    800764 <memmove+0x65>
+  800722:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800725:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800728:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80072b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80072e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800731:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800734:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800737:	c1 e8 02             	shr    $0x2,%eax
+  80073a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  80073c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  80073f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800742:	89 d7                	mov    %edx,%edi
+  800744:	89 c6                	mov    %eax,%esi
+  800746:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800748:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  80074b:	83 e1 03             	and    $0x3,%ecx
+  80074e:	74 02                	je     800752 <memmove+0x53>
+  800750:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800752:	89 f0                	mov    %esi,%eax
+  800754:	89 fa                	mov    %edi,%edx
+  800756:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800759:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  80075c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  80075f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  800762:	eb 36                	jmp    80079a <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800764:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800767:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80076a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80076d:	01 c2                	add    %eax,%edx
+  80076f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800772:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800775:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800778:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  80077b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80077e:	89 c1                	mov    %eax,%ecx
+  800780:	89 d8                	mov    %ebx,%eax
+  800782:	89 d6                	mov    %edx,%esi
+  800784:	89 c7                	mov    %eax,%edi
+  800786:	fd                   	std    
+  800787:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800789:	fc                   	cld    
+  80078a:	89 f8                	mov    %edi,%eax
+  80078c:	89 f2                	mov    %esi,%edx
+  80078e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800791:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800794:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800797:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  80079a:	83 c4 30             	add    $0x30,%esp
+  80079d:	5b                   	pop    %ebx
+  80079e:	5e                   	pop    %esi
+  80079f:	5f                   	pop    %edi
+  8007a0:	5d                   	pop    %ebp
+  8007a1:	c3                   	ret    
+
+008007a2 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  8007a2:	55                   	push   %ebp
+  8007a3:	89 e5                	mov    %esp,%ebp
+  8007a5:	57                   	push   %edi
+  8007a6:	56                   	push   %esi
+  8007a7:	83 ec 20             	sub    $0x20,%esp
+  8007aa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8007b0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007b6:	8b 45 10             	mov    0x10(%ebp),%eax
+  8007b9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  8007bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8007bf:	c1 e8 02             	shr    $0x2,%eax
+  8007c2:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  8007c4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007ca:	89 d7                	mov    %edx,%edi
+  8007cc:	89 c6                	mov    %eax,%esi
+  8007ce:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007d0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007d3:	83 e1 03             	and    $0x3,%ecx
+  8007d6:	74 02                	je     8007da <memcpy+0x38>
+  8007d8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007da:	89 f0                	mov    %esi,%eax
+  8007dc:	89 fa                	mov    %edi,%edx
+  8007de:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007e1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007e4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  8007e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007ea:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007eb:	83 c4 20             	add    $0x20,%esp
+  8007ee:	5e                   	pop    %esi
+  8007ef:	5f                   	pop    %edi
+  8007f0:	5d                   	pop    %ebp
+  8007f1:	c3                   	ret    
+
+008007f2 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  8007f2:	55                   	push   %ebp
+  8007f3:	89 e5                	mov    %esp,%ebp
+  8007f5:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  8007f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007fb:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  8007fe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800801:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800804:	eb 30                	jmp    800836 <memcmp+0x44>
+        if (*s1 != *s2) {
+  800806:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800809:	0f b6 10             	movzbl (%eax),%edx
+  80080c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80080f:	0f b6 00             	movzbl (%eax),%eax
+  800812:	38 c2                	cmp    %al,%dl
+  800814:	74 18                	je     80082e <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800816:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800819:	0f b6 00             	movzbl (%eax),%eax
+  80081c:	0f b6 d0             	movzbl %al,%edx
+  80081f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800822:	0f b6 00             	movzbl (%eax),%eax
+  800825:	0f b6 c0             	movzbl %al,%eax
+  800828:	29 c2                	sub    %eax,%edx
+  80082a:	89 d0                	mov    %edx,%eax
+  80082c:	eb 1a                	jmp    800848 <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  80082e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800832:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800836:	8b 45 10             	mov    0x10(%ebp),%eax
+  800839:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80083c:	89 55 10             	mov    %edx,0x10(%ebp)
+  80083f:	85 c0                	test   %eax,%eax
+  800841:	75 c3                	jne    800806 <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800843:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800848:	c9                   	leave  
+  800849:	c3                   	ret    
+
+0080084a <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  80084a:	55                   	push   %ebp
+  80084b:	89 e5                	mov    %esp,%ebp
+  80084d:	83 ec 38             	sub    $0x38,%esp
+  800850:	8b 45 10             	mov    0x10(%ebp),%eax
+  800853:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800856:	8b 45 14             	mov    0x14(%ebp),%eax
+  800859:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80085c:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  80085f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800862:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800865:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800868:	8b 45 18             	mov    0x18(%ebp),%eax
+  80086b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  80086e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800871:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800874:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800877:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  80087a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80087d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800880:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800884:	74 1c                	je     8008a2 <printnum+0x58>
+  800886:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800889:	ba 00 00 00 00       	mov    $0x0,%edx
+  80088e:	f7 75 e4             	divl   -0x1c(%ebp)
+  800891:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800894:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800897:	ba 00 00 00 00       	mov    $0x0,%edx
+  80089c:	f7 75 e4             	divl   -0x1c(%ebp)
+  80089f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008a2:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008a8:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008ab:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8008ae:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8008b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008b4:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8008b7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8008ba:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8008bd:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8008c0:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8008c3:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008c6:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008cb:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008ce:	77 41                	ja     800911 <printnum+0xc7>
+  8008d0:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008d3:	72 05                	jb     8008da <printnum+0x90>
+  8008d5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  8008d8:	77 37                	ja     800911 <printnum+0xc7>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008da:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008dd:	83 e8 01             	sub    $0x1,%eax
+  8008e0:	83 ec 04             	sub    $0x4,%esp
+  8008e3:	ff 75 20             	pushl  0x20(%ebp)
+  8008e6:	50                   	push   %eax
+  8008e7:	ff 75 18             	pushl  0x18(%ebp)
+  8008ea:	ff 75 ec             	pushl  -0x14(%ebp)
+  8008ed:	ff 75 e8             	pushl  -0x18(%ebp)
+  8008f0:	ff 75 0c             	pushl  0xc(%ebp)
+  8008f3:	ff 75 08             	pushl  0x8(%ebp)
+  8008f6:	e8 4f ff ff ff       	call   80084a <printnum>
+  8008fb:	83 c4 20             	add    $0x20,%esp
+  8008fe:	eb 1b                	jmp    80091b <printnum+0xd1>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800900:	83 ec 08             	sub    $0x8,%esp
+  800903:	ff 75 0c             	pushl  0xc(%ebp)
+  800906:	ff 75 20             	pushl  0x20(%ebp)
+  800909:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090c:	ff d0                	call   *%eax
+  80090e:	83 c4 10             	add    $0x10,%esp
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  800911:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  800915:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  800919:	7f e5                	jg     800900 <printnum+0xb6>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  80091b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  80091e:	05 e4 11 80 00       	add    $0x8011e4,%eax
+  800923:	0f b6 00             	movzbl (%eax),%eax
+  800926:	0f be c0             	movsbl %al,%eax
+  800929:	83 ec 08             	sub    $0x8,%esp
+  80092c:	ff 75 0c             	pushl  0xc(%ebp)
+  80092f:	50                   	push   %eax
+  800930:	8b 45 08             	mov    0x8(%ebp),%eax
+  800933:	ff d0                	call   *%eax
+  800935:	83 c4 10             	add    $0x10,%esp
+}
+  800938:	90                   	nop
+  800939:	c9                   	leave  
+  80093a:	c3                   	ret    
+
+0080093b <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  80093b:	55                   	push   %ebp
+  80093c:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  80093e:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800942:	7e 14                	jle    800958 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  800944:	8b 45 08             	mov    0x8(%ebp),%eax
+  800947:	8b 00                	mov    (%eax),%eax
+  800949:	8d 48 08             	lea    0x8(%eax),%ecx
+  80094c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80094f:	89 0a                	mov    %ecx,(%edx)
+  800951:	8b 50 04             	mov    0x4(%eax),%edx
+  800954:	8b 00                	mov    (%eax),%eax
+  800956:	eb 30                	jmp    800988 <getuint+0x4d>
+    }
+    else if (lflag) {
+  800958:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80095c:	74 16                	je     800974 <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  80095e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800961:	8b 00                	mov    (%eax),%eax
+  800963:	8d 48 04             	lea    0x4(%eax),%ecx
+  800966:	8b 55 08             	mov    0x8(%ebp),%edx
+  800969:	89 0a                	mov    %ecx,(%edx)
+  80096b:	8b 00                	mov    (%eax),%eax
+  80096d:	ba 00 00 00 00       	mov    $0x0,%edx
+  800972:	eb 14                	jmp    800988 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  800974:	8b 45 08             	mov    0x8(%ebp),%eax
+  800977:	8b 00                	mov    (%eax),%eax
+  800979:	8d 48 04             	lea    0x4(%eax),%ecx
+  80097c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80097f:	89 0a                	mov    %ecx,(%edx)
+  800981:	8b 00                	mov    (%eax),%eax
+  800983:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800988:	5d                   	pop    %ebp
+  800989:	c3                   	ret    
+
+0080098a <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  80098a:	55                   	push   %ebp
+  80098b:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  80098d:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800991:	7e 14                	jle    8009a7 <getint+0x1d>
+        return va_arg(*ap, long long);
+  800993:	8b 45 08             	mov    0x8(%ebp),%eax
+  800996:	8b 00                	mov    (%eax),%eax
+  800998:	8d 48 08             	lea    0x8(%eax),%ecx
+  80099b:	8b 55 08             	mov    0x8(%ebp),%edx
+  80099e:	89 0a                	mov    %ecx,(%edx)
+  8009a0:	8b 50 04             	mov    0x4(%eax),%edx
+  8009a3:	8b 00                	mov    (%eax),%eax
+  8009a5:	eb 28                	jmp    8009cf <getint+0x45>
+    }
+    else if (lflag) {
+  8009a7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8009ab:	74 12                	je     8009bf <getint+0x35>
+        return va_arg(*ap, long);
+  8009ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b0:	8b 00                	mov    (%eax),%eax
+  8009b2:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009b5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009b8:	89 0a                	mov    %ecx,(%edx)
+  8009ba:	8b 00                	mov    (%eax),%eax
+  8009bc:	99                   	cltd   
+  8009bd:	eb 10                	jmp    8009cf <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  8009bf:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009c2:	8b 00                	mov    (%eax),%eax
+  8009c4:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009c7:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009ca:	89 0a                	mov    %ecx,(%edx)
+  8009cc:	8b 00                	mov    (%eax),%eax
+  8009ce:	99                   	cltd   
+    }
+}
+  8009cf:	5d                   	pop    %ebp
+  8009d0:	c3                   	ret    
+
+008009d1 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009d1:	55                   	push   %ebp
+  8009d2:	89 e5                	mov    %esp,%ebp
+  8009d4:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009d7:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009da:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8009e0:	50                   	push   %eax
+  8009e1:	ff 75 10             	pushl  0x10(%ebp)
+  8009e4:	ff 75 0c             	pushl  0xc(%ebp)
+  8009e7:	ff 75 08             	pushl  0x8(%ebp)
+  8009ea:	e8 06 00 00 00       	call   8009f5 <vprintfmt>
+  8009ef:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8009f2:	90                   	nop
+  8009f3:	c9                   	leave  
+  8009f4:	c3                   	ret    
+
+008009f5 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8009f5:	55                   	push   %ebp
+  8009f6:	89 e5                	mov    %esp,%ebp
+  8009f8:	56                   	push   %esi
+  8009f9:	53                   	push   %ebx
+  8009fa:	83 ec 20             	sub    $0x20,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009fd:	eb 17                	jmp    800a16 <vprintfmt+0x21>
+            if (ch == '\0') {
+  8009ff:	85 db                	test   %ebx,%ebx
+  800a01:	0f 84 8e 03 00 00    	je     800d95 <vprintfmt+0x3a0>
+                return;
+            }
+            putch(ch, putdat);
+  800a07:	83 ec 08             	sub    $0x8,%esp
+  800a0a:	ff 75 0c             	pushl  0xc(%ebp)
+  800a0d:	53                   	push   %ebx
+  800a0e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a11:	ff d0                	call   *%eax
+  800a13:	83 c4 10             	add    $0x10,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a16:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a19:	8d 50 01             	lea    0x1(%eax),%edx
+  800a1c:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a1f:	0f b6 00             	movzbl (%eax),%eax
+  800a22:	0f b6 d8             	movzbl %al,%ebx
+  800a25:	83 fb 25             	cmp    $0x25,%ebx
+  800a28:	75 d5                	jne    8009ff <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a2a:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a2e:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a38:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a3b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a42:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a45:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a48:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a4b:	8d 50 01             	lea    0x1(%eax),%edx
+  800a4e:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a51:	0f b6 00             	movzbl (%eax),%eax
+  800a54:	0f b6 d8             	movzbl %al,%ebx
+  800a57:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a5a:	83 f8 55             	cmp    $0x55,%eax
+  800a5d:	0f 87 05 03 00 00    	ja     800d68 <vprintfmt+0x373>
+  800a63:	8b 04 85 08 12 80 00 	mov    0x801208(,%eax,4),%eax
+  800a6a:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a6c:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a70:	eb d6                	jmp    800a48 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a72:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800a76:	eb d0                	jmp    800a48 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a78:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800a7f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a82:	89 d0                	mov    %edx,%eax
+  800a84:	c1 e0 02             	shl    $0x2,%eax
+  800a87:	01 d0                	add    %edx,%eax
+  800a89:	01 c0                	add    %eax,%eax
+  800a8b:	01 d8                	add    %ebx,%eax
+  800a8d:	83 e8 30             	sub    $0x30,%eax
+  800a90:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800a93:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a96:	0f b6 00             	movzbl (%eax),%eax
+  800a99:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800a9c:	83 fb 2f             	cmp    $0x2f,%ebx
+  800a9f:	7e 39                	jle    800ada <vprintfmt+0xe5>
+  800aa1:	83 fb 39             	cmp    $0x39,%ebx
+  800aa4:	7f 34                	jg     800ada <vprintfmt+0xe5>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800aa6:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  800aaa:	eb d3                	jmp    800a7f <vprintfmt+0x8a>
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800aac:	8b 45 14             	mov    0x14(%ebp),%eax
+  800aaf:	8d 50 04             	lea    0x4(%eax),%edx
+  800ab2:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ab5:	8b 00                	mov    (%eax),%eax
+  800ab7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800aba:	eb 1f                	jmp    800adb <vprintfmt+0xe6>
+
+        case '.':
+            if (width < 0)
+  800abc:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ac0:	79 86                	jns    800a48 <vprintfmt+0x53>
+                width = 0;
+  800ac2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800ac9:	e9 7a ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800ace:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800ad5:	e9 6e ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+            goto process_precision;
+  800ada:	90                   	nop
+        case '#':
+            altflag = 1;
+            goto reswitch;
+
+        process_precision:
+            if (width < 0)
+  800adb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800adf:	0f 89 63 ff ff ff    	jns    800a48 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800ae5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ae8:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800aeb:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800af2:	e9 51 ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800af7:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800afb:	e9 48 ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800b00:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b03:	8d 50 04             	lea    0x4(%eax),%edx
+  800b06:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b09:	8b 00                	mov    (%eax),%eax
+  800b0b:	83 ec 08             	sub    $0x8,%esp
+  800b0e:	ff 75 0c             	pushl  0xc(%ebp)
+  800b11:	50                   	push   %eax
+  800b12:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b15:	ff d0                	call   *%eax
+  800b17:	83 c4 10             	add    $0x10,%esp
+            break;
+  800b1a:	e9 71 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800b1f:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b22:	8d 50 04             	lea    0x4(%eax),%edx
+  800b25:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b28:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b2a:	85 db                	test   %ebx,%ebx
+  800b2c:	79 02                	jns    800b30 <vprintfmt+0x13b>
+                err = -err;
+  800b2e:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b30:	83 fb 18             	cmp    $0x18,%ebx
+  800b33:	7f 0b                	jg     800b40 <vprintfmt+0x14b>
+  800b35:	8b 34 9d 80 11 80 00 	mov    0x801180(,%ebx,4),%esi
+  800b3c:	85 f6                	test   %esi,%esi
+  800b3e:	75 19                	jne    800b59 <vprintfmt+0x164>
+                printfmt(putch, putdat, "error %d", err);
+  800b40:	53                   	push   %ebx
+  800b41:	68 f5 11 80 00       	push   $0x8011f5
+  800b46:	ff 75 0c             	pushl  0xc(%ebp)
+  800b49:	ff 75 08             	pushl  0x8(%ebp)
+  800b4c:	e8 80 fe ff ff       	call   8009d1 <printfmt>
+  800b51:	83 c4 10             	add    $0x10,%esp
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b54:	e9 37 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  800b59:	56                   	push   %esi
+  800b5a:	68 fe 11 80 00       	push   $0x8011fe
+  800b5f:	ff 75 0c             	pushl  0xc(%ebp)
+  800b62:	ff 75 08             	pushl  0x8(%ebp)
+  800b65:	e8 67 fe ff ff       	call   8009d1 <printfmt>
+  800b6a:	83 c4 10             	add    $0x10,%esp
+            }
+            break;
+  800b6d:	e9 1e 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800b72:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b75:	8d 50 04             	lea    0x4(%eax),%edx
+  800b78:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b7b:	8b 30                	mov    (%eax),%esi
+  800b7d:	85 f6                	test   %esi,%esi
+  800b7f:	75 05                	jne    800b86 <vprintfmt+0x191>
+                p = "(null)";
+  800b81:	be 01 12 80 00       	mov    $0x801201,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800b86:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b8a:	7e 76                	jle    800c02 <vprintfmt+0x20d>
+  800b8c:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800b90:	74 70                	je     800c02 <vprintfmt+0x20d>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b92:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b95:	83 ec 08             	sub    $0x8,%esp
+  800b98:	50                   	push   %eax
+  800b99:	56                   	push   %esi
+  800b9a:	e8 17 f8 ff ff       	call   8003b6 <strnlen>
+  800b9f:	83 c4 10             	add    $0x10,%esp
+  800ba2:	89 c2                	mov    %eax,%edx
+  800ba4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ba7:	29 d0                	sub    %edx,%eax
+  800ba9:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800bac:	eb 17                	jmp    800bc5 <vprintfmt+0x1d0>
+                    putch(padc, putdat);
+  800bae:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800bb2:	83 ec 08             	sub    $0x8,%esp
+  800bb5:	ff 75 0c             	pushl  0xc(%ebp)
+  800bb8:	50                   	push   %eax
+  800bb9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bbc:	ff d0                	call   *%eax
+  800bbe:	83 c4 10             	add    $0x10,%esp
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bc1:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800bc5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800bc9:	7f e3                	jg     800bae <vprintfmt+0x1b9>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bcb:	eb 35                	jmp    800c02 <vprintfmt+0x20d>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800bcd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800bd1:	74 1c                	je     800bef <vprintfmt+0x1fa>
+  800bd3:	83 fb 1f             	cmp    $0x1f,%ebx
+  800bd6:	7e 05                	jle    800bdd <vprintfmt+0x1e8>
+  800bd8:	83 fb 7e             	cmp    $0x7e,%ebx
+  800bdb:	7e 12                	jle    800bef <vprintfmt+0x1fa>
+                    putch('?', putdat);
+  800bdd:	83 ec 08             	sub    $0x8,%esp
+  800be0:	ff 75 0c             	pushl  0xc(%ebp)
+  800be3:	6a 3f                	push   $0x3f
+  800be5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800be8:	ff d0                	call   *%eax
+  800bea:	83 c4 10             	add    $0x10,%esp
+  800bed:	eb 0f                	jmp    800bfe <vprintfmt+0x209>
+                }
+                else {
+                    putch(ch, putdat);
+  800bef:	83 ec 08             	sub    $0x8,%esp
+  800bf2:	ff 75 0c             	pushl  0xc(%ebp)
+  800bf5:	53                   	push   %ebx
+  800bf6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bf9:	ff d0                	call   *%eax
+  800bfb:	83 c4 10             	add    $0x10,%esp
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bfe:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c02:	89 f0                	mov    %esi,%eax
+  800c04:	8d 70 01             	lea    0x1(%eax),%esi
+  800c07:	0f b6 00             	movzbl (%eax),%eax
+  800c0a:	0f be d8             	movsbl %al,%ebx
+  800c0d:	85 db                	test   %ebx,%ebx
+  800c0f:	74 26                	je     800c37 <vprintfmt+0x242>
+  800c11:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c15:	78 b6                	js     800bcd <vprintfmt+0x1d8>
+  800c17:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  800c1b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c1f:	79 ac                	jns    800bcd <vprintfmt+0x1d8>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c21:	eb 14                	jmp    800c37 <vprintfmt+0x242>
+                putch(' ', putdat);
+  800c23:	83 ec 08             	sub    $0x8,%esp
+  800c26:	ff 75 0c             	pushl  0xc(%ebp)
+  800c29:	6a 20                	push   $0x20
+  800c2b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2e:	ff d0                	call   *%eax
+  800c30:	83 c4 10             	add    $0x10,%esp
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c33:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c37:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c3b:	7f e6                	jg     800c23 <vprintfmt+0x22e>
+                putch(' ', putdat);
+            }
+            break;
+  800c3d:	e9 4e 01 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c42:	83 ec 08             	sub    $0x8,%esp
+  800c45:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c48:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c4b:	50                   	push   %eax
+  800c4c:	e8 39 fd ff ff       	call   80098a <getint>
+  800c51:	83 c4 10             	add    $0x10,%esp
+  800c54:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c57:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c5d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c60:	85 d2                	test   %edx,%edx
+  800c62:	79 23                	jns    800c87 <vprintfmt+0x292>
+                putch('-', putdat);
+  800c64:	83 ec 08             	sub    $0x8,%esp
+  800c67:	ff 75 0c             	pushl  0xc(%ebp)
+  800c6a:	6a 2d                	push   $0x2d
+  800c6c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c6f:	ff d0                	call   *%eax
+  800c71:	83 c4 10             	add    $0x10,%esp
+                num = -(long long)num;
+  800c74:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c77:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c7a:	f7 d8                	neg    %eax
+  800c7c:	83 d2 00             	adc    $0x0,%edx
+  800c7f:	f7 da                	neg    %edx
+  800c81:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c84:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800c87:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c8e:	e9 9f 00 00 00       	jmp    800d32 <vprintfmt+0x33d>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800c93:	83 ec 08             	sub    $0x8,%esp
+  800c96:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c99:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c9c:	50                   	push   %eax
+  800c9d:	e8 99 fc ff ff       	call   80093b <getuint>
+  800ca2:	83 c4 10             	add    $0x10,%esp
+  800ca5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ca8:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800cab:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cb2:	eb 7e                	jmp    800d32 <vprintfmt+0x33d>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800cb4:	83 ec 08             	sub    $0x8,%esp
+  800cb7:	ff 75 e0             	pushl  -0x20(%ebp)
+  800cba:	8d 45 14             	lea    0x14(%ebp),%eax
+  800cbd:	50                   	push   %eax
+  800cbe:	e8 78 fc ff ff       	call   80093b <getuint>
+  800cc3:	83 c4 10             	add    $0x10,%esp
+  800cc6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cc9:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800ccc:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800cd3:	eb 5d                	jmp    800d32 <vprintfmt+0x33d>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800cd5:	83 ec 08             	sub    $0x8,%esp
+  800cd8:	ff 75 0c             	pushl  0xc(%ebp)
+  800cdb:	6a 30                	push   $0x30
+  800cdd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ce0:	ff d0                	call   *%eax
+  800ce2:	83 c4 10             	add    $0x10,%esp
+            putch('x', putdat);
+  800ce5:	83 ec 08             	sub    $0x8,%esp
+  800ce8:	ff 75 0c             	pushl  0xc(%ebp)
+  800ceb:	6a 78                	push   $0x78
+  800ced:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cf0:	ff d0                	call   *%eax
+  800cf2:	83 c4 10             	add    $0x10,%esp
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800cf5:	8b 45 14             	mov    0x14(%ebp),%eax
+  800cf8:	8d 50 04             	lea    0x4(%eax),%edx
+  800cfb:	89 55 14             	mov    %edx,0x14(%ebp)
+  800cfe:	8b 00                	mov    (%eax),%eax
+  800d00:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d03:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800d0a:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800d11:	eb 1f                	jmp    800d32 <vprintfmt+0x33d>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800d13:	83 ec 08             	sub    $0x8,%esp
+  800d16:	ff 75 e0             	pushl  -0x20(%ebp)
+  800d19:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d1c:	50                   	push   %eax
+  800d1d:	e8 19 fc ff ff       	call   80093b <getuint>
+  800d22:	83 c4 10             	add    $0x10,%esp
+  800d25:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d28:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d2b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d32:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d36:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d39:	83 ec 04             	sub    $0x4,%esp
+  800d3c:	52                   	push   %edx
+  800d3d:	ff 75 e8             	pushl  -0x18(%ebp)
+  800d40:	50                   	push   %eax
+  800d41:	ff 75 f4             	pushl  -0xc(%ebp)
+  800d44:	ff 75 f0             	pushl  -0x10(%ebp)
+  800d47:	ff 75 0c             	pushl  0xc(%ebp)
+  800d4a:	ff 75 08             	pushl  0x8(%ebp)
+  800d4d:	e8 f8 fa ff ff       	call   80084a <printnum>
+  800d52:	83 c4 20             	add    $0x20,%esp
+            break;
+  800d55:	eb 39                	jmp    800d90 <vprintfmt+0x39b>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800d57:	83 ec 08             	sub    $0x8,%esp
+  800d5a:	ff 75 0c             	pushl  0xc(%ebp)
+  800d5d:	53                   	push   %ebx
+  800d5e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d61:	ff d0                	call   *%eax
+  800d63:	83 c4 10             	add    $0x10,%esp
+            break;
+  800d66:	eb 28                	jmp    800d90 <vprintfmt+0x39b>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800d68:	83 ec 08             	sub    $0x8,%esp
+  800d6b:	ff 75 0c             	pushl  0xc(%ebp)
+  800d6e:	6a 25                	push   $0x25
+  800d70:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d73:	ff d0                	call   *%eax
+  800d75:	83 c4 10             	add    $0x10,%esp
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800d78:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d7c:	eb 04                	jmp    800d82 <vprintfmt+0x38d>
+  800d7e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d82:	8b 45 10             	mov    0x10(%ebp),%eax
+  800d85:	83 e8 01             	sub    $0x1,%eax
+  800d88:	0f b6 00             	movzbl (%eax),%eax
+  800d8b:	3c 25                	cmp    $0x25,%al
+  800d8d:	75 ef                	jne    800d7e <vprintfmt+0x389>
+                /* do nothing */;
+            break;
+  800d8f:	90                   	nop
+        }
+    }
+  800d90:	e9 68 fc ff ff       	jmp    8009fd <vprintfmt+0x8>
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+            if (ch == '\0') {
+                return;
+  800d95:	90                   	nop
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  800d96:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  800d99:	5b                   	pop    %ebx
+  800d9a:	5e                   	pop    %esi
+  800d9b:	5d                   	pop    %ebp
+  800d9c:	c3                   	ret    
+
+00800d9d <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800d9d:	55                   	push   %ebp
+  800d9e:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800da0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800da3:	8b 40 08             	mov    0x8(%eax),%eax
+  800da6:	8d 50 01             	lea    0x1(%eax),%edx
+  800da9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dac:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800daf:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db2:	8b 10                	mov    (%eax),%edx
+  800db4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db7:	8b 40 04             	mov    0x4(%eax),%eax
+  800dba:	39 c2                	cmp    %eax,%edx
+  800dbc:	73 12                	jae    800dd0 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800dbe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dc1:	8b 00                	mov    (%eax),%eax
+  800dc3:	8d 48 01             	lea    0x1(%eax),%ecx
+  800dc6:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800dc9:	89 0a                	mov    %ecx,(%edx)
+  800dcb:	8b 55 08             	mov    0x8(%ebp),%edx
+  800dce:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800dd0:	90                   	nop
+  800dd1:	5d                   	pop    %ebp
+  800dd2:	c3                   	ret    
+
+00800dd3 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800dd3:	55                   	push   %ebp
+  800dd4:	89 e5                	mov    %esp,%ebp
+  800dd6:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800dd9:	8d 45 14             	lea    0x14(%ebp),%eax
+  800ddc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800ddf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800de2:	50                   	push   %eax
+  800de3:	ff 75 10             	pushl  0x10(%ebp)
+  800de6:	ff 75 0c             	pushl  0xc(%ebp)
+  800de9:	ff 75 08             	pushl  0x8(%ebp)
+  800dec:	e8 0b 00 00 00       	call   800dfc <vsnprintf>
+  800df1:	83 c4 10             	add    $0x10,%esp
+  800df4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800df7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800dfa:	c9                   	leave  
+  800dfb:	c3                   	ret    
+
+00800dfc <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800dfc:	55                   	push   %ebp
+  800dfd:	89 e5                	mov    %esp,%ebp
+  800dff:	83 ec 18             	sub    $0x18,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800e02:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e05:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e08:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e0b:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800e0e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e11:	01 d0                	add    %edx,%eax
+  800e13:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e16:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800e1d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800e21:	74 0a                	je     800e2d <vsnprintf+0x31>
+  800e23:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800e26:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e29:	39 c2                	cmp    %eax,%edx
+  800e2b:	76 07                	jbe    800e34 <vsnprintf+0x38>
+        return -E_INVAL;
+  800e2d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e32:	eb 20                	jmp    800e54 <vsnprintf+0x58>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e34:	ff 75 14             	pushl  0x14(%ebp)
+  800e37:	ff 75 10             	pushl  0x10(%ebp)
+  800e3a:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800e3d:	50                   	push   %eax
+  800e3e:	68 9d 0d 80 00       	push   $0x800d9d
+  800e43:	e8 ad fb ff ff       	call   8009f5 <vprintfmt>
+  800e48:	83 c4 10             	add    $0x10,%esp
+    // null terminate the buffer
+    *b.buf = '\0';
+  800e4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e4e:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800e51:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e54:	c9                   	leave  
+  800e55:	c3                   	ret    
+
+00800e56 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800e56:	55                   	push   %ebp
+  800e57:	89 e5                	mov    %esp,%ebp
+  800e59:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800e5c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e5f:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800e65:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800e68:	b8 20 00 00 00       	mov    $0x20,%eax
+  800e6d:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800e70:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800e73:	89 c1                	mov    %eax,%ecx
+  800e75:	d3 ea                	shr    %cl,%edx
+  800e77:	89 d0                	mov    %edx,%eax
+}
+  800e79:	c9                   	leave  
+  800e7a:	c3                   	ret    
+
+00800e7b <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800e7b:	55                   	push   %ebp
+  800e7c:	89 e5                	mov    %esp,%ebp
+  800e7e:	57                   	push   %edi
+  800e7f:	56                   	push   %esi
+  800e80:	53                   	push   %ebx
+  800e81:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800e84:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e89:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800e8f:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800e95:	6b f0 05             	imul   $0x5,%eax,%esi
+  800e98:	01 fe                	add    %edi,%esi
+  800e9a:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800e9f:	f7 e7                	mul    %edi
+  800ea1:	01 d6                	add    %edx,%esi
+  800ea3:	89 f2                	mov    %esi,%edx
+  800ea5:	83 c0 0b             	add    $0xb,%eax
+  800ea8:	83 d2 00             	adc    $0x0,%edx
+  800eab:	89 c7                	mov    %eax,%edi
+  800ead:	83 e7 ff             	and    $0xffffffff,%edi
+  800eb0:	89 f9                	mov    %edi,%ecx
+  800eb2:	0f b7 da             	movzwl %dx,%ebx
+  800eb5:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800ebb:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800ec1:	a1 00 20 80 00       	mov    0x802000,%eax
+  800ec6:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ecc:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ed0:	c1 ea 0c             	shr    $0xc,%edx
+  800ed3:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ed6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800ed9:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ee0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ee3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ee6:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ee9:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800eec:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eef:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ef2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ef6:	74 1c                	je     800f14 <rand+0x99>
+  800ef8:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800efb:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f00:	f7 75 dc             	divl   -0x24(%ebp)
+  800f03:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800f06:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f09:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f0e:	f7 75 dc             	divl   -0x24(%ebp)
+  800f11:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800f14:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f17:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800f1a:	f7 75 dc             	divl   -0x24(%ebp)
+  800f1d:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f20:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f23:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f26:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800f29:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f2c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f2f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800f32:	83 c4 24             	add    $0x24,%esp
+  800f35:	5b                   	pop    %ebx
+  800f36:	5e                   	pop    %esi
+  800f37:	5f                   	pop    %edi
+  800f38:	5d                   	pop    %ebp
+  800f39:	c3                   	ret    
+
+00800f3a <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800f3a:	55                   	push   %ebp
+  800f3b:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800f3d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f40:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f45:	a3 00 20 80 00       	mov    %eax,0x802000
+  800f4a:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800f50:	90                   	nop
+  800f51:	5d                   	pop    %ebp
+  800f52:	c3                   	ret    
+
+00800f53 <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  800f53:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  800f57:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f5a:	ff 71 fc             	pushl  -0x4(%ecx)
+  800f5d:	55                   	push   %ebp
+  800f5e:	89 e5                	mov    %esp,%ebp
+  800f60:	51                   	push   %ecx
+  800f61:	83 ec 14             	sub    $0x14,%esp
+    int pid, exit_code;
+    if ((pid = fork()) == 0) {
+  800f64:	e8 86 f2 ff ff       	call   8001ef <fork>
+  800f69:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800f6c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800f70:	75 35                	jne    800fa7 <main+0x54>
+        cprintf("fork ok.\n");
+  800f72:	83 ec 0c             	sub    $0xc,%esp
+  800f75:	68 60 13 80 00       	push   $0x801360
+  800f7a:	e8 82 f3 ff ff       	call   800301 <cprintf>
+  800f7f:	83 c4 10             	add    $0x10,%esp
+        int i;
+        for (i = 0; i < 10; i ++) {
+  800f82:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  800f89:	eb 09                	jmp    800f94 <main+0x41>
+            yield();
+  800f8b:	e8 9c f2 ff ff       	call   80022c <yield>
+main(void) {
+    int pid, exit_code;
+    if ((pid = fork()) == 0) {
+        cprintf("fork ok.\n");
+        int i;
+        for (i = 0; i < 10; i ++) {
+  800f90:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  800f94:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
+  800f98:	7e f1                	jle    800f8b <main+0x38>
+            yield();
+        }
+        exit(0xbeaf);
+  800f9a:	83 ec 0c             	sub    $0xc,%esp
+  800f9d:	68 af be 00 00       	push   $0xbeaf
+  800fa2:	e8 22 f2 ff ff       	call   8001c9 <exit>
+    }
+    assert(pid > 0);
+  800fa7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800fab:	7f 16                	jg     800fc3 <main+0x70>
+  800fad:	68 6a 13 80 00       	push   $0x80136a
+  800fb2:	68 72 13 80 00       	push   $0x801372
+  800fb7:	6a 0f                	push   $0xf
+  800fb9:	68 87 13 80 00       	push   $0x801387
+  800fbe:	e8 5d f0 ff ff       	call   800020 <__panic>
+    assert(waitpid(-1, NULL) != 0);
+  800fc3:	83 ec 08             	sub    $0x8,%esp
+  800fc6:	6a 00                	push   $0x0
+  800fc8:	6a ff                	push   $0xffffffff
+  800fca:	e8 44 f2 ff ff       	call   800213 <waitpid>
+  800fcf:	83 c4 10             	add    $0x10,%esp
+  800fd2:	85 c0                	test   %eax,%eax
+  800fd4:	75 16                	jne    800fec <main+0x99>
+  800fd6:	68 95 13 80 00       	push   $0x801395
+  800fdb:	68 72 13 80 00       	push   $0x801372
+  800fe0:	6a 10                	push   $0x10
+  800fe2:	68 87 13 80 00       	push   $0x801387
+  800fe7:	e8 34 f0 ff ff       	call   800020 <__panic>
+    assert(waitpid(pid, (void *)0xC0000000) != 0);
+  800fec:	83 ec 08             	sub    $0x8,%esp
+  800fef:	68 00 00 00 c0       	push   $0xc0000000
+  800ff4:	ff 75 f0             	pushl  -0x10(%ebp)
+  800ff7:	e8 17 f2 ff ff       	call   800213 <waitpid>
+  800ffc:	83 c4 10             	add    $0x10,%esp
+  800fff:	85 c0                	test   %eax,%eax
+  801001:	75 16                	jne    801019 <main+0xc6>
+  801003:	68 ac 13 80 00       	push   $0x8013ac
+  801008:	68 72 13 80 00       	push   $0x801372
+  80100d:	6a 11                	push   $0x11
+  80100f:	68 87 13 80 00       	push   $0x801387
+  801014:	e8 07 f0 ff ff       	call   800020 <__panic>
+    assert(waitpid(pid, &exit_code) == 0 && exit_code == 0xbeaf);
+  801019:	83 ec 08             	sub    $0x8,%esp
+  80101c:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  80101f:	50                   	push   %eax
+  801020:	ff 75 f0             	pushl  -0x10(%ebp)
+  801023:	e8 eb f1 ff ff       	call   800213 <waitpid>
+  801028:	83 c4 10             	add    $0x10,%esp
+  80102b:	85 c0                	test   %eax,%eax
+  80102d:	75 0a                	jne    801039 <main+0xe6>
+  80102f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  801032:	3d af be 00 00       	cmp    $0xbeaf,%eax
+  801037:	74 16                	je     80104f <main+0xfc>
+  801039:	68 d4 13 80 00       	push   $0x8013d4
+  80103e:	68 72 13 80 00       	push   $0x801372
+  801043:	6a 12                	push   $0x12
+  801045:	68 87 13 80 00       	push   $0x801387
+  80104a:	e8 d1 ef ff ff       	call   800020 <__panic>
+    cprintf("badarg pass.\n");
+  80104f:	83 ec 0c             	sub    $0xc,%esp
+  801052:	68 09 14 80 00       	push   $0x801409
+  801057:	e8 a5 f2 ff ff       	call   800301 <cprintf>
+  80105c:	83 c4 10             	add    $0x10,%esp
+    return 0;
+  80105f:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  801064:	8b 4d fc             	mov    -0x4(%ebp),%ecx
+  801067:	c9                   	leave  
+  801068:	8d 61 fc             	lea    -0x4(%ecx),%esp
+  80106b:	c3                   	ret    
diff -r -u -P lab7_original/obj/user/badarg.d lab7/obj/user/badarg.d
--- lab7_original/obj/user/badarg.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/badarg.d	2016-05-06 21:59:27.610123127 +0800
@@ -0,0 +1,2 @@
+obj/user/badarg.o obj/user/badarg.d: user/badarg.c libs/stdio.h \
+ libs/defs.h libs/stdarg.h user/libs/ulib.h
Binary files lab7_original/obj/user/badarg.o and lab7/obj/user/badarg.o differ
diff -r -u -P lab7_original/obj/user/badarg.sym lab7/obj/user/badarg.sym
--- lab7_original/obj/user/badarg.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/badarg.sym	2016-05-06 21:59:28.694162656 +0800
@@ -0,0 +1,78 @@
+00800020 .text
+00801080 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202e25 .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b5 syscall
+00000000 ulib.c
+00000000 stdio.c
+008002b4 cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+00801180 error_string
+0080084a printnum
+0080093b getuint
+0080098a getint
+00800d9d sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 badarg.c
+008003e6 strcpy
+0080022c yield
+00800213 waitpid
+00800141 sys_yield
+008006ff memmove
+00800dd3 snprintf
+008009f5 vprintfmt
+0080011d sys_fork
+00800301 cprintf
+00800250 getpid
+008007a2 memcpy
+0080028f sleep
+00800278 lab6_set_priority
+00800dfc vsnprintf
+00800375 umain
+00202e24 __STAB_END__
+00800150 sys_kill
+00202e25 __STABSTR_BEGIN__
+00800020 __panic
+008001b7 sys_sleep
+00800562 strtol
+008003b6 strnlen
+0080025d print_pgdir
+0080023a kill
+00800533 strfind
+008001fc wait
+008002a5 _start
+00800e7b rand
+008004aa strncmp
+00800171 sys_putc
+00800426 strncpy
+008007f2 memcmp
+008001ef fork
+008006bf memset
+00800f53 main
+00800f3a srand
+00800e56 hash32
+008009d1 printfmt
+00203c48 __STABSTR_END__
+00800460 strcmp
+0080026b gettime_msec
+00800192 sys_gettime
+008002d8 vcprintf
+0080006e __warn
+00800327 cputs
+008001a1 sys_lab6_set_priority
+008001c9 exit
+0080012c sys_wait
+0080010b sys_exit
+00200010 __STAB_BEGIN__
+0080038e strlen
+00800183 sys_pgdir
+00800500 strchr
+00800162 sys_getpid
diff -r -u -P lab7_original/obj/user/badsegment.asm lab7/obj/user/badsegment.asm
--- lab7_original/obj/user/badsegment.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/badsegment.asm	2016-05-06 21:59:28.622160021 +0800
@@ -0,0 +1,2611 @@
+
+obj/__user_badsegment.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 18             	sub    $0x18,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	83 ec 04             	sub    $0x4,%esp
+  80002f:	ff 75 0c             	pushl  0xc(%ebp)
+  800032:	ff 75 08             	pushl  0x8(%ebp)
+  800035:	68 80 0f 80 00       	push   $0x800f80
+  80003a:	e8 c2 02 00 00       	call   800301 <cprintf>
+  80003f:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800042:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800045:	83 ec 08             	sub    $0x8,%esp
+  800048:	50                   	push   %eax
+  800049:	ff 75 10             	pushl  0x10(%ebp)
+  80004c:	e8 87 02 00 00       	call   8002d8 <vcprintf>
+  800051:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  800054:	83 ec 0c             	sub    $0xc,%esp
+  800057:	68 9a 0f 80 00       	push   $0x800f9a
+  80005c:	e8 a0 02 00 00       	call   800301 <cprintf>
+  800061:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	83 ec 0c             	sub    $0xc,%esp
+  800067:	6a f6                	push   $0xfffffff6
+  800069:	e8 5b 01 00 00       	call   8001c9 <exit>
+
+0080006e <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80006e:	55                   	push   %ebp
+  80006f:	89 e5                	mov    %esp,%ebp
+  800071:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800074:	8d 45 14             	lea    0x14(%ebp),%eax
+  800077:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007a:	83 ec 04             	sub    $0x4,%esp
+  80007d:	ff 75 0c             	pushl  0xc(%ebp)
+  800080:	ff 75 08             	pushl  0x8(%ebp)
+  800083:	68 9c 0f 80 00       	push   $0x800f9c
+  800088:	e8 74 02 00 00       	call   800301 <cprintf>
+  80008d:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800090:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800093:	83 ec 08             	sub    $0x8,%esp
+  800096:	50                   	push   %eax
+  800097:	ff 75 10             	pushl  0x10(%ebp)
+  80009a:	e8 39 02 00 00       	call   8002d8 <vcprintf>
+  80009f:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  8000a2:	83 ec 0c             	sub    $0xc,%esp
+  8000a5:	68 9a 0f 80 00       	push   $0x800f9a
+  8000aa:	e8 52 02 00 00       	call   800301 <cprintf>
+  8000af:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8000b2:	90                   	nop
+  8000b3:	c9                   	leave  
+  8000b4:	c3                   	ret    
+
+008000b5 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b5:	55                   	push   %ebp
+  8000b6:	89 e5                	mov    %esp,%ebp
+  8000b8:	57                   	push   %edi
+  8000b9:	56                   	push   %esi
+  8000ba:	53                   	push   %ebx
+  8000bb:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000be:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cb:	eb 16                	jmp    8000e3 <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8000cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d0:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d3:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d6:	8b 10                	mov    (%eax),%edx
+  8000d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000db:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000df:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8000e3:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e7:	7e e4                	jle    8000cd <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000e9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ec:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000ef:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f2:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f5:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8000f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fb:	cd 80                	int    $0x80
+  8000fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  800100:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800103:	83 c4 20             	add    $0x20,%esp
+  800106:	5b                   	pop    %ebx
+  800107:	5e                   	pop    %esi
+  800108:	5f                   	pop    %edi
+  800109:	5d                   	pop    %ebp
+  80010a:	c3                   	ret    
+
+0080010b <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010b:	55                   	push   %ebp
+  80010c:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_exit, error_code);
+  80010e:	ff 75 08             	pushl  0x8(%ebp)
+  800111:	6a 01                	push   $0x1
+  800113:	e8 9d ff ff ff       	call   8000b5 <syscall>
+  800118:	83 c4 08             	add    $0x8,%esp
+}
+  80011b:	c9                   	leave  
+  80011c:	c3                   	ret    
+
+0080011d <sys_fork>:
+
+int
+sys_fork(void) {
+  80011d:	55                   	push   %ebp
+  80011e:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_fork);
+  800120:	6a 02                	push   $0x2
+  800122:	e8 8e ff ff ff       	call   8000b5 <syscall>
+  800127:	83 c4 04             	add    $0x4,%esp
+}
+  80012a:	c9                   	leave  
+  80012b:	c3                   	ret    
+
+0080012c <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80012c:	55                   	push   %ebp
+  80012d:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_wait, pid, store);
+  80012f:	ff 75 0c             	pushl  0xc(%ebp)
+  800132:	ff 75 08             	pushl  0x8(%ebp)
+  800135:	6a 03                	push   $0x3
+  800137:	e8 79 ff ff ff       	call   8000b5 <syscall>
+  80013c:	83 c4 0c             	add    $0xc,%esp
+}
+  80013f:	c9                   	leave  
+  800140:	c3                   	ret    
+
+00800141 <sys_yield>:
+
+int
+sys_yield(void) {
+  800141:	55                   	push   %ebp
+  800142:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_yield);
+  800144:	6a 0a                	push   $0xa
+  800146:	e8 6a ff ff ff       	call   8000b5 <syscall>
+  80014b:	83 c4 04             	add    $0x4,%esp
+}
+  80014e:	c9                   	leave  
+  80014f:	c3                   	ret    
+
+00800150 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800150:	55                   	push   %ebp
+  800151:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_kill, pid);
+  800153:	ff 75 08             	pushl  0x8(%ebp)
+  800156:	6a 0c                	push   $0xc
+  800158:	e8 58 ff ff ff       	call   8000b5 <syscall>
+  80015d:	83 c4 08             	add    $0x8,%esp
+}
+  800160:	c9                   	leave  
+  800161:	c3                   	ret    
+
+00800162 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800162:	55                   	push   %ebp
+  800163:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_getpid);
+  800165:	6a 12                	push   $0x12
+  800167:	e8 49 ff ff ff       	call   8000b5 <syscall>
+  80016c:	83 c4 04             	add    $0x4,%esp
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_putc, c);
+  800174:	ff 75 08             	pushl  0x8(%ebp)
+  800177:	6a 1e                	push   $0x1e
+  800179:	e8 37 ff ff ff       	call   8000b5 <syscall>
+  80017e:	83 c4 08             	add    $0x8,%esp
+}
+  800181:	c9                   	leave  
+  800182:	c3                   	ret    
+
+00800183 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800183:	55                   	push   %ebp
+  800184:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_pgdir);
+  800186:	6a 1f                	push   $0x1f
+  800188:	e8 28 ff ff ff       	call   8000b5 <syscall>
+  80018d:	83 c4 04             	add    $0x4,%esp
+}
+  800190:	c9                   	leave  
+  800191:	c3                   	ret    
+
+00800192 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  800192:	55                   	push   %ebp
+  800193:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_gettime);
+  800195:	6a 11                	push   $0x11
+  800197:	e8 19 ff ff ff       	call   8000b5 <syscall>
+  80019c:	83 c4 04             	add    $0x4,%esp
+}
+  80019f:	c9                   	leave  
+  8001a0:	c3                   	ret    
+
+008001a1 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001a1:	55                   	push   %ebp
+  8001a2:	89 e5                	mov    %esp,%ebp
+    syscall(SYS_lab6_set_priority, priority);
+  8001a4:	ff 75 08             	pushl  0x8(%ebp)
+  8001a7:	68 ff 00 00 00       	push   $0xff
+  8001ac:	e8 04 ff ff ff       	call   8000b5 <syscall>
+  8001b1:	83 c4 08             	add    $0x8,%esp
+}
+  8001b4:	90                   	nop
+  8001b5:	c9                   	leave  
+  8001b6:	c3                   	ret    
+
+008001b7 <sys_sleep>:
+
+int
+sys_sleep(unsigned int time) {
+  8001b7:	55                   	push   %ebp
+  8001b8:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_sleep, time);
+  8001ba:	ff 75 08             	pushl  0x8(%ebp)
+  8001bd:	6a 0b                	push   $0xb
+  8001bf:	e8 f1 fe ff ff       	call   8000b5 <syscall>
+  8001c4:	83 c4 08             	add    $0x8,%esp
+}
+  8001c7:	c9                   	leave  
+  8001c8:	c3                   	ret    
+
+008001c9 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001c9:	55                   	push   %ebp
+  8001ca:	89 e5                	mov    %esp,%ebp
+  8001cc:	83 ec 08             	sub    $0x8,%esp
+    sys_exit(error_code);
+  8001cf:	83 ec 0c             	sub    $0xc,%esp
+  8001d2:	ff 75 08             	pushl  0x8(%ebp)
+  8001d5:	e8 31 ff ff ff       	call   80010b <sys_exit>
+  8001da:	83 c4 10             	add    $0x10,%esp
+    cprintf("BUG: exit failed.\n");
+  8001dd:	83 ec 0c             	sub    $0xc,%esp
+  8001e0:	68 b8 0f 80 00       	push   $0x800fb8
+  8001e5:	e8 17 01 00 00       	call   800301 <cprintf>
+  8001ea:	83 c4 10             	add    $0x10,%esp
+    while (1);
+  8001ed:	eb fe                	jmp    8001ed <exit+0x24>
+
+008001ef <fork>:
+}
+
+int
+fork(void) {
+  8001ef:	55                   	push   %ebp
+  8001f0:	89 e5                	mov    %esp,%ebp
+  8001f2:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8001f5:	e8 23 ff ff ff       	call   80011d <sys_fork>
+}
+  8001fa:	c9                   	leave  
+  8001fb:	c3                   	ret    
+
+008001fc <wait>:
+
+int
+wait(void) {
+  8001fc:	55                   	push   %ebp
+  8001fd:	89 e5                	mov    %esp,%ebp
+  8001ff:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(0, NULL);
+  800202:	83 ec 08             	sub    $0x8,%esp
+  800205:	6a 00                	push   $0x0
+  800207:	6a 00                	push   $0x0
+  800209:	e8 1e ff ff ff       	call   80012c <sys_wait>
+  80020e:	83 c4 10             	add    $0x10,%esp
+}
+  800211:	c9                   	leave  
+  800212:	c3                   	ret    
+
+00800213 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800213:	55                   	push   %ebp
+  800214:	89 e5                	mov    %esp,%ebp
+  800216:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(pid, store);
+  800219:	83 ec 08             	sub    $0x8,%esp
+  80021c:	ff 75 0c             	pushl  0xc(%ebp)
+  80021f:	ff 75 08             	pushl  0x8(%ebp)
+  800222:	e8 05 ff ff ff       	call   80012c <sys_wait>
+  800227:	83 c4 10             	add    $0x10,%esp
+}
+  80022a:	c9                   	leave  
+  80022b:	c3                   	ret    
+
+0080022c <yield>:
+
+void
+yield(void) {
+  80022c:	55                   	push   %ebp
+  80022d:	89 e5                	mov    %esp,%ebp
+  80022f:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800232:	e8 0a ff ff ff       	call   800141 <sys_yield>
+}
+  800237:	90                   	nop
+  800238:	c9                   	leave  
+  800239:	c3                   	ret    
+
+0080023a <kill>:
+
+int
+kill(int pid) {
+  80023a:	55                   	push   %ebp
+  80023b:	89 e5                	mov    %esp,%ebp
+  80023d:	83 ec 08             	sub    $0x8,%esp
+    return sys_kill(pid);
+  800240:	83 ec 0c             	sub    $0xc,%esp
+  800243:	ff 75 08             	pushl  0x8(%ebp)
+  800246:	e8 05 ff ff ff       	call   800150 <sys_kill>
+  80024b:	83 c4 10             	add    $0x10,%esp
+}
+  80024e:	c9                   	leave  
+  80024f:	c3                   	ret    
+
+00800250 <getpid>:
+
+int
+getpid(void) {
+  800250:	55                   	push   %ebp
+  800251:	89 e5                	mov    %esp,%ebp
+  800253:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800256:	e8 07 ff ff ff       	call   800162 <sys_getpid>
+}
+  80025b:	c9                   	leave  
+  80025c:	c3                   	ret    
+
+0080025d <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80025d:	55                   	push   %ebp
+  80025e:	89 e5                	mov    %esp,%ebp
+  800260:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800263:	e8 1b ff ff ff       	call   800183 <sys_pgdir>
+}
+  800268:	90                   	nop
+  800269:	c9                   	leave  
+  80026a:	c3                   	ret    
+
+0080026b <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80026b:	55                   	push   %ebp
+  80026c:	89 e5                	mov    %esp,%ebp
+  80026e:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800271:	e8 1c ff ff ff       	call   800192 <sys_gettime>
+}
+  800276:	c9                   	leave  
+  800277:	c3                   	ret    
+
+00800278 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800278:	55                   	push   %ebp
+  800279:	89 e5                	mov    %esp,%ebp
+  80027b:	83 ec 08             	sub    $0x8,%esp
+    sys_lab6_set_priority(priority);
+  80027e:	83 ec 0c             	sub    $0xc,%esp
+  800281:	ff 75 08             	pushl  0x8(%ebp)
+  800284:	e8 18 ff ff ff       	call   8001a1 <sys_lab6_set_priority>
+  800289:	83 c4 10             	add    $0x10,%esp
+}
+  80028c:	90                   	nop
+  80028d:	c9                   	leave  
+  80028e:	c3                   	ret    
+
+0080028f <sleep>:
+
+int
+sleep(unsigned int time) {
+  80028f:	55                   	push   %ebp
+  800290:	89 e5                	mov    %esp,%ebp
+  800292:	83 ec 08             	sub    $0x8,%esp
+    return sys_sleep(time);
+  800295:	83 ec 0c             	sub    $0xc,%esp
+  800298:	ff 75 08             	pushl  0x8(%ebp)
+  80029b:	e8 17 ff ff ff       	call   8001b7 <sys_sleep>
+  8002a0:	83 c4 10             	add    $0x10,%esp
+}
+  8002a3:	c9                   	leave  
+  8002a4:	c3                   	ret    
+
+008002a5 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  8002a5:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  8002aa:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  8002ad:	e8 c3 00 00 00       	call   800375 <umain>
+1:  jmp 1b
+  8002b2:	eb fe                	jmp    8002b2 <_start+0xd>
+
+008002b4 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8002b4:	55                   	push   %ebp
+  8002b5:	89 e5                	mov    %esp,%ebp
+  8002b7:	83 ec 08             	sub    $0x8,%esp
+    sys_putc(c);
+  8002ba:	83 ec 0c             	sub    $0xc,%esp
+  8002bd:	ff 75 08             	pushl  0x8(%ebp)
+  8002c0:	e8 ac fe ff ff       	call   800171 <sys_putc>
+  8002c5:	83 c4 10             	add    $0x10,%esp
+    (*cnt) ++;
+  8002c8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002cb:	8b 00                	mov    (%eax),%eax
+  8002cd:	8d 50 01             	lea    0x1(%eax),%edx
+  8002d0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002d3:	89 10                	mov    %edx,(%eax)
+}
+  8002d5:	90                   	nop
+  8002d6:	c9                   	leave  
+  8002d7:	c3                   	ret    
+
+008002d8 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002d8:	55                   	push   %ebp
+  8002d9:	89 e5                	mov    %esp,%ebp
+  8002db:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  8002de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002e5:	ff 75 0c             	pushl  0xc(%ebp)
+  8002e8:	ff 75 08             	pushl  0x8(%ebp)
+  8002eb:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  8002ee:	50                   	push   %eax
+  8002ef:	68 b4 02 80 00       	push   $0x8002b4
+  8002f4:	e8 fc 06 00 00       	call   8009f5 <vprintfmt>
+  8002f9:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  8002fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002ff:	c9                   	leave  
+  800300:	c3                   	ret    
+
+00800301 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800301:	55                   	push   %ebp
+  800302:	89 e5                	mov    %esp,%ebp
+  800304:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800307:	8d 45 0c             	lea    0xc(%ebp),%eax
+  80030a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  80030d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800310:	83 ec 08             	sub    $0x8,%esp
+  800313:	50                   	push   %eax
+  800314:	ff 75 08             	pushl  0x8(%ebp)
+  800317:	e8 bc ff ff ff       	call   8002d8 <vcprintf>
+  80031c:	83 c4 10             	add    $0x10,%esp
+  80031f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800322:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800325:	c9                   	leave  
+  800326:	c3                   	ret    
+
+00800327 <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  800327:	55                   	push   %ebp
+  800328:	89 e5                	mov    %esp,%ebp
+  80032a:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  80032d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  800334:	eb 14                	jmp    80034a <cputs+0x23>
+        cputch(c, &cnt);
+  800336:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  80033a:	83 ec 08             	sub    $0x8,%esp
+  80033d:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800340:	52                   	push   %edx
+  800341:	50                   	push   %eax
+  800342:	e8 6d ff ff ff       	call   8002b4 <cputch>
+  800347:	83 c4 10             	add    $0x10,%esp
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  80034a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80034d:	8d 50 01             	lea    0x1(%eax),%edx
+  800350:	89 55 08             	mov    %edx,0x8(%ebp)
+  800353:	0f b6 00             	movzbl (%eax),%eax
+  800356:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800359:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  80035d:	75 d7                	jne    800336 <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  80035f:	83 ec 08             	sub    $0x8,%esp
+  800362:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800365:	50                   	push   %eax
+  800366:	6a 0a                	push   $0xa
+  800368:	e8 47 ff ff ff       	call   8002b4 <cputch>
+  80036d:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  800370:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  800373:	c9                   	leave  
+  800374:	c3                   	ret    
+
+00800375 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800375:	55                   	push   %ebp
+  800376:	89 e5                	mov    %esp,%ebp
+  800378:	83 ec 18             	sub    $0x18,%esp
+    int ret = main();
+  80037b:	e8 d3 0b 00 00       	call   800f53 <main>
+  800380:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  800383:	83 ec 0c             	sub    $0xc,%esp
+  800386:	ff 75 f4             	pushl  -0xc(%ebp)
+  800389:	e8 3b fe ff ff       	call   8001c9 <exit>
+
+0080038e <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  80038e:	55                   	push   %ebp
+  80038f:	89 e5                	mov    %esp,%ebp
+  800391:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800394:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  80039b:	eb 04                	jmp    8003a1 <strlen+0x13>
+        cnt ++;
+  80039d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  8003a1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003a4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003a7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003aa:	0f b6 00             	movzbl (%eax),%eax
+  8003ad:	84 c0                	test   %al,%al
+  8003af:	75 ec                	jne    80039d <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003b4:	c9                   	leave  
+  8003b5:	c3                   	ret    
+
+008003b6 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  8003b6:	55                   	push   %ebp
+  8003b7:	89 e5                	mov    %esp,%ebp
+  8003b9:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003bc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003c3:	eb 04                	jmp    8003c9 <strnlen+0x13>
+        cnt ++;
+  8003c5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  8003c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003cc:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003cf:	73 10                	jae    8003e1 <strnlen+0x2b>
+  8003d1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003d4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003d7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003da:	0f b6 00             	movzbl (%eax),%eax
+  8003dd:	84 c0                	test   %al,%al
+  8003df:	75 e4                	jne    8003c5 <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003e4:	c9                   	leave  
+  8003e5:	c3                   	ret    
+
+008003e6 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  8003e6:	55                   	push   %ebp
+  8003e7:	89 e5                	mov    %esp,%ebp
+  8003e9:	57                   	push   %edi
+  8003ea:	56                   	push   %esi
+  8003eb:	83 ec 20             	sub    $0x20,%esp
+  8003ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003f4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8003f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  8003fa:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800400:	89 d1                	mov    %edx,%ecx
+  800402:	89 c2                	mov    %eax,%edx
+  800404:	89 ce                	mov    %ecx,%esi
+  800406:	89 d7                	mov    %edx,%edi
+  800408:	ac                   	lods   %ds:(%esi),%al
+  800409:	aa                   	stos   %al,%es:(%edi)
+  80040a:	84 c0                	test   %al,%al
+  80040c:	75 fa                	jne    800408 <strcpy+0x22>
+  80040e:	89 fa                	mov    %edi,%edx
+  800410:	89 f1                	mov    %esi,%ecx
+  800412:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800415:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800418:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  80041b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  80041e:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  80041f:	83 c4 20             	add    $0x20,%esp
+  800422:	5e                   	pop    %esi
+  800423:	5f                   	pop    %edi
+  800424:	5d                   	pop    %ebp
+  800425:	c3                   	ret    
+
+00800426 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800426:	55                   	push   %ebp
+  800427:	89 e5                	mov    %esp,%ebp
+  800429:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  80042c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80042f:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800432:	eb 21                	jmp    800455 <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800434:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800437:	0f b6 10             	movzbl (%eax),%edx
+  80043a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80043d:	88 10                	mov    %dl,(%eax)
+  80043f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800442:	0f b6 00             	movzbl (%eax),%eax
+  800445:	84 c0                	test   %al,%al
+  800447:	74 04                	je     80044d <strncpy+0x27>
+            src ++;
+  800449:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  80044d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800451:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800455:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800459:	75 d9                	jne    800434 <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  80045b:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  80045e:	c9                   	leave  
+  80045f:	c3                   	ret    
+
+00800460 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800460:	55                   	push   %ebp
+  800461:	89 e5                	mov    %esp,%ebp
+  800463:	57                   	push   %edi
+  800464:	56                   	push   %esi
+  800465:	83 ec 20             	sub    $0x20,%esp
+  800468:	8b 45 08             	mov    0x8(%ebp),%eax
+  80046b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80046e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800471:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800474:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800477:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80047a:	89 d1                	mov    %edx,%ecx
+  80047c:	89 c2                	mov    %eax,%edx
+  80047e:	89 ce                	mov    %ecx,%esi
+  800480:	89 d7                	mov    %edx,%edi
+  800482:	ac                   	lods   %ds:(%esi),%al
+  800483:	ae                   	scas   %es:(%edi),%al
+  800484:	75 08                	jne    80048e <strcmp+0x2e>
+  800486:	84 c0                	test   %al,%al
+  800488:	75 f8                	jne    800482 <strcmp+0x22>
+  80048a:	31 c0                	xor    %eax,%eax
+  80048c:	eb 04                	jmp    800492 <strcmp+0x32>
+  80048e:	19 c0                	sbb    %eax,%eax
+  800490:	0c 01                	or     $0x1,%al
+  800492:	89 fa                	mov    %edi,%edx
+  800494:	89 f1                	mov    %esi,%ecx
+  800496:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800499:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  80049c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  80049f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  8004a2:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  8004a3:	83 c4 20             	add    $0x20,%esp
+  8004a6:	5e                   	pop    %esi
+  8004a7:	5f                   	pop    %edi
+  8004a8:	5d                   	pop    %ebp
+  8004a9:	c3                   	ret    
+
+008004aa <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  8004aa:	55                   	push   %ebp
+  8004ab:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004ad:	eb 0c                	jmp    8004bb <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  8004af:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  8004b3:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8004b7:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004bb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004bf:	74 1a                	je     8004db <strncmp+0x31>
+  8004c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004c4:	0f b6 00             	movzbl (%eax),%eax
+  8004c7:	84 c0                	test   %al,%al
+  8004c9:	74 10                	je     8004db <strncmp+0x31>
+  8004cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004ce:	0f b6 10             	movzbl (%eax),%edx
+  8004d1:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004d4:	0f b6 00             	movzbl (%eax),%eax
+  8004d7:	38 c2                	cmp    %al,%dl
+  8004d9:	74 d4                	je     8004af <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004db:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004df:	74 18                	je     8004f9 <strncmp+0x4f>
+  8004e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e4:	0f b6 00             	movzbl (%eax),%eax
+  8004e7:	0f b6 d0             	movzbl %al,%edx
+  8004ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ed:	0f b6 00             	movzbl (%eax),%eax
+  8004f0:	0f b6 c0             	movzbl %al,%eax
+  8004f3:	29 c2                	sub    %eax,%edx
+  8004f5:	89 d0                	mov    %edx,%eax
+  8004f7:	eb 05                	jmp    8004fe <strncmp+0x54>
+  8004f9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8004fe:	5d                   	pop    %ebp
+  8004ff:	c3                   	ret    
+
+00800500 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800500:	55                   	push   %ebp
+  800501:	89 e5                	mov    %esp,%ebp
+  800503:	83 ec 04             	sub    $0x4,%esp
+  800506:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800509:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  80050c:	eb 14                	jmp    800522 <strchr+0x22>
+        if (*s == c) {
+  80050e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800511:	0f b6 00             	movzbl (%eax),%eax
+  800514:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800517:	75 05                	jne    80051e <strchr+0x1e>
+            return (char *)s;
+  800519:	8b 45 08             	mov    0x8(%ebp),%eax
+  80051c:	eb 13                	jmp    800531 <strchr+0x31>
+        }
+        s ++;
+  80051e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800522:	8b 45 08             	mov    0x8(%ebp),%eax
+  800525:	0f b6 00             	movzbl (%eax),%eax
+  800528:	84 c0                	test   %al,%al
+  80052a:	75 e2                	jne    80050e <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  80052c:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800531:	c9                   	leave  
+  800532:	c3                   	ret    
+
+00800533 <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800533:	55                   	push   %ebp
+  800534:	89 e5                	mov    %esp,%ebp
+  800536:	83 ec 04             	sub    $0x4,%esp
+  800539:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80053c:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  80053f:	eb 0f                	jmp    800550 <strfind+0x1d>
+        if (*s == c) {
+  800541:	8b 45 08             	mov    0x8(%ebp),%eax
+  800544:	0f b6 00             	movzbl (%eax),%eax
+  800547:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  80054a:	74 10                	je     80055c <strfind+0x29>
+            break;
+        }
+        s ++;
+  80054c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800550:	8b 45 08             	mov    0x8(%ebp),%eax
+  800553:	0f b6 00             	movzbl (%eax),%eax
+  800556:	84 c0                	test   %al,%al
+  800558:	75 e7                	jne    800541 <strfind+0xe>
+  80055a:	eb 01                	jmp    80055d <strfind+0x2a>
+        if (*s == c) {
+            break;
+  80055c:	90                   	nop
+        }
+        s ++;
+    }
+    return (char *)s;
+  80055d:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800560:	c9                   	leave  
+  800561:	c3                   	ret    
+
+00800562 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800562:	55                   	push   %ebp
+  800563:	89 e5                	mov    %esp,%ebp
+  800565:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800568:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  80056f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800576:	eb 04                	jmp    80057c <strtol+0x1a>
+        s ++;
+  800578:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80057c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80057f:	0f b6 00             	movzbl (%eax),%eax
+  800582:	3c 20                	cmp    $0x20,%al
+  800584:	74 f2                	je     800578 <strtol+0x16>
+  800586:	8b 45 08             	mov    0x8(%ebp),%eax
+  800589:	0f b6 00             	movzbl (%eax),%eax
+  80058c:	3c 09                	cmp    $0x9,%al
+  80058e:	74 e8                	je     800578 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800590:	8b 45 08             	mov    0x8(%ebp),%eax
+  800593:	0f b6 00             	movzbl (%eax),%eax
+  800596:	3c 2b                	cmp    $0x2b,%al
+  800598:	75 06                	jne    8005a0 <strtol+0x3e>
+        s ++;
+  80059a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  80059e:	eb 15                	jmp    8005b5 <strtol+0x53>
+    }
+    else if (*s == '-') {
+  8005a0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a3:	0f b6 00             	movzbl (%eax),%eax
+  8005a6:	3c 2d                	cmp    $0x2d,%al
+  8005a8:	75 0b                	jne    8005b5 <strtol+0x53>
+        s ++, neg = 1;
+  8005aa:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005ae:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  8005b5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005b9:	74 06                	je     8005c1 <strtol+0x5f>
+  8005bb:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  8005bf:	75 24                	jne    8005e5 <strtol+0x83>
+  8005c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005c4:	0f b6 00             	movzbl (%eax),%eax
+  8005c7:	3c 30                	cmp    $0x30,%al
+  8005c9:	75 1a                	jne    8005e5 <strtol+0x83>
+  8005cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ce:	83 c0 01             	add    $0x1,%eax
+  8005d1:	0f b6 00             	movzbl (%eax),%eax
+  8005d4:	3c 78                	cmp    $0x78,%al
+  8005d6:	75 0d                	jne    8005e5 <strtol+0x83>
+        s += 2, base = 16;
+  8005d8:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005dc:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005e3:	eb 2a                	jmp    80060f <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005e5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005e9:	75 17                	jne    800602 <strtol+0xa0>
+  8005eb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ee:	0f b6 00             	movzbl (%eax),%eax
+  8005f1:	3c 30                	cmp    $0x30,%al
+  8005f3:	75 0d                	jne    800602 <strtol+0xa0>
+        s ++, base = 8;
+  8005f5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005f9:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800600:	eb 0d                	jmp    80060f <strtol+0xad>
+    }
+    else if (base == 0) {
+  800602:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800606:	75 07                	jne    80060f <strtol+0xad>
+        base = 10;
+  800608:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  80060f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800612:	0f b6 00             	movzbl (%eax),%eax
+  800615:	3c 2f                	cmp    $0x2f,%al
+  800617:	7e 1b                	jle    800634 <strtol+0xd2>
+  800619:	8b 45 08             	mov    0x8(%ebp),%eax
+  80061c:	0f b6 00             	movzbl (%eax),%eax
+  80061f:	3c 39                	cmp    $0x39,%al
+  800621:	7f 11                	jg     800634 <strtol+0xd2>
+            dig = *s - '0';
+  800623:	8b 45 08             	mov    0x8(%ebp),%eax
+  800626:	0f b6 00             	movzbl (%eax),%eax
+  800629:	0f be c0             	movsbl %al,%eax
+  80062c:	83 e8 30             	sub    $0x30,%eax
+  80062f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800632:	eb 48                	jmp    80067c <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800634:	8b 45 08             	mov    0x8(%ebp),%eax
+  800637:	0f b6 00             	movzbl (%eax),%eax
+  80063a:	3c 60                	cmp    $0x60,%al
+  80063c:	7e 1b                	jle    800659 <strtol+0xf7>
+  80063e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800641:	0f b6 00             	movzbl (%eax),%eax
+  800644:	3c 7a                	cmp    $0x7a,%al
+  800646:	7f 11                	jg     800659 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800648:	8b 45 08             	mov    0x8(%ebp),%eax
+  80064b:	0f b6 00             	movzbl (%eax),%eax
+  80064e:	0f be c0             	movsbl %al,%eax
+  800651:	83 e8 57             	sub    $0x57,%eax
+  800654:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800657:	eb 23                	jmp    80067c <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800659:	8b 45 08             	mov    0x8(%ebp),%eax
+  80065c:	0f b6 00             	movzbl (%eax),%eax
+  80065f:	3c 40                	cmp    $0x40,%al
+  800661:	7e 3c                	jle    80069f <strtol+0x13d>
+  800663:	8b 45 08             	mov    0x8(%ebp),%eax
+  800666:	0f b6 00             	movzbl (%eax),%eax
+  800669:	3c 5a                	cmp    $0x5a,%al
+  80066b:	7f 32                	jg     80069f <strtol+0x13d>
+            dig = *s - 'A' + 10;
+  80066d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800670:	0f b6 00             	movzbl (%eax),%eax
+  800673:	0f be c0             	movsbl %al,%eax
+  800676:	83 e8 37             	sub    $0x37,%eax
+  800679:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  80067c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80067f:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800682:	7d 1a                	jge    80069e <strtol+0x13c>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  800684:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800688:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80068b:	0f af 45 10          	imul   0x10(%ebp),%eax
+  80068f:	89 c2                	mov    %eax,%edx
+  800691:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800694:	01 d0                	add    %edx,%eax
+  800696:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800699:	e9 71 ff ff ff       	jmp    80060f <strtol+0xad>
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+            break;
+  80069e:	90                   	nop
+        }
+        s ++, val = (val * base) + dig;
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  80069f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8006a3:	74 08                	je     8006ad <strtol+0x14b>
+        *endptr = (char *) s;
+  8006a5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006a8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006ab:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  8006ad:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  8006b1:	74 07                	je     8006ba <strtol+0x158>
+  8006b3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006b6:	f7 d8                	neg    %eax
+  8006b8:	eb 03                	jmp    8006bd <strtol+0x15b>
+  8006ba:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  8006bd:	c9                   	leave  
+  8006be:	c3                   	ret    
+
+008006bf <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  8006bf:	55                   	push   %ebp
+  8006c0:	89 e5                	mov    %esp,%ebp
+  8006c2:	57                   	push   %edi
+  8006c3:	83 ec 24             	sub    $0x24,%esp
+  8006c6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006c9:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006cc:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006d0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006d3:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006d6:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006d9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006df:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006e2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006e6:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006e9:	89 d7                	mov    %edx,%edi
+  8006eb:	f3 aa                	rep stos %al,%es:(%edi)
+  8006ed:	89 fa                	mov    %edi,%edx
+  8006ef:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8006f2:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  8006f5:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006f8:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  8006f9:	83 c4 24             	add    $0x24,%esp
+  8006fc:	5f                   	pop    %edi
+  8006fd:	5d                   	pop    %ebp
+  8006fe:	c3                   	ret    
+
+008006ff <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  8006ff:	55                   	push   %ebp
+  800700:	89 e5                	mov    %esp,%ebp
+  800702:	57                   	push   %edi
+  800703:	56                   	push   %esi
+  800704:	53                   	push   %ebx
+  800705:	83 ec 30             	sub    $0x30,%esp
+  800708:	8b 45 08             	mov    0x8(%ebp),%eax
+  80070b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80070e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800711:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800714:	8b 45 10             	mov    0x10(%ebp),%eax
+  800717:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  80071a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80071d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800720:	73 42                	jae    800764 <memmove+0x65>
+  800722:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800725:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800728:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80072b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80072e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800731:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800734:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800737:	c1 e8 02             	shr    $0x2,%eax
+  80073a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  80073c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  80073f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800742:	89 d7                	mov    %edx,%edi
+  800744:	89 c6                	mov    %eax,%esi
+  800746:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800748:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  80074b:	83 e1 03             	and    $0x3,%ecx
+  80074e:	74 02                	je     800752 <memmove+0x53>
+  800750:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800752:	89 f0                	mov    %esi,%eax
+  800754:	89 fa                	mov    %edi,%edx
+  800756:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800759:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  80075c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  80075f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  800762:	eb 36                	jmp    80079a <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800764:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800767:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80076a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80076d:	01 c2                	add    %eax,%edx
+  80076f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800772:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800775:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800778:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  80077b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80077e:	89 c1                	mov    %eax,%ecx
+  800780:	89 d8                	mov    %ebx,%eax
+  800782:	89 d6                	mov    %edx,%esi
+  800784:	89 c7                	mov    %eax,%edi
+  800786:	fd                   	std    
+  800787:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800789:	fc                   	cld    
+  80078a:	89 f8                	mov    %edi,%eax
+  80078c:	89 f2                	mov    %esi,%edx
+  80078e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800791:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800794:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800797:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  80079a:	83 c4 30             	add    $0x30,%esp
+  80079d:	5b                   	pop    %ebx
+  80079e:	5e                   	pop    %esi
+  80079f:	5f                   	pop    %edi
+  8007a0:	5d                   	pop    %ebp
+  8007a1:	c3                   	ret    
+
+008007a2 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  8007a2:	55                   	push   %ebp
+  8007a3:	89 e5                	mov    %esp,%ebp
+  8007a5:	57                   	push   %edi
+  8007a6:	56                   	push   %esi
+  8007a7:	83 ec 20             	sub    $0x20,%esp
+  8007aa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8007b0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007b6:	8b 45 10             	mov    0x10(%ebp),%eax
+  8007b9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  8007bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8007bf:	c1 e8 02             	shr    $0x2,%eax
+  8007c2:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  8007c4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007ca:	89 d7                	mov    %edx,%edi
+  8007cc:	89 c6                	mov    %eax,%esi
+  8007ce:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007d0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007d3:	83 e1 03             	and    $0x3,%ecx
+  8007d6:	74 02                	je     8007da <memcpy+0x38>
+  8007d8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007da:	89 f0                	mov    %esi,%eax
+  8007dc:	89 fa                	mov    %edi,%edx
+  8007de:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007e1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007e4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  8007e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007ea:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007eb:	83 c4 20             	add    $0x20,%esp
+  8007ee:	5e                   	pop    %esi
+  8007ef:	5f                   	pop    %edi
+  8007f0:	5d                   	pop    %ebp
+  8007f1:	c3                   	ret    
+
+008007f2 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  8007f2:	55                   	push   %ebp
+  8007f3:	89 e5                	mov    %esp,%ebp
+  8007f5:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  8007f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007fb:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  8007fe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800801:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800804:	eb 30                	jmp    800836 <memcmp+0x44>
+        if (*s1 != *s2) {
+  800806:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800809:	0f b6 10             	movzbl (%eax),%edx
+  80080c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80080f:	0f b6 00             	movzbl (%eax),%eax
+  800812:	38 c2                	cmp    %al,%dl
+  800814:	74 18                	je     80082e <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800816:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800819:	0f b6 00             	movzbl (%eax),%eax
+  80081c:	0f b6 d0             	movzbl %al,%edx
+  80081f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800822:	0f b6 00             	movzbl (%eax),%eax
+  800825:	0f b6 c0             	movzbl %al,%eax
+  800828:	29 c2                	sub    %eax,%edx
+  80082a:	89 d0                	mov    %edx,%eax
+  80082c:	eb 1a                	jmp    800848 <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  80082e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800832:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800836:	8b 45 10             	mov    0x10(%ebp),%eax
+  800839:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80083c:	89 55 10             	mov    %edx,0x10(%ebp)
+  80083f:	85 c0                	test   %eax,%eax
+  800841:	75 c3                	jne    800806 <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800843:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800848:	c9                   	leave  
+  800849:	c3                   	ret    
+
+0080084a <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  80084a:	55                   	push   %ebp
+  80084b:	89 e5                	mov    %esp,%ebp
+  80084d:	83 ec 38             	sub    $0x38,%esp
+  800850:	8b 45 10             	mov    0x10(%ebp),%eax
+  800853:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800856:	8b 45 14             	mov    0x14(%ebp),%eax
+  800859:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80085c:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  80085f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800862:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800865:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800868:	8b 45 18             	mov    0x18(%ebp),%eax
+  80086b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  80086e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800871:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800874:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800877:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  80087a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80087d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800880:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800884:	74 1c                	je     8008a2 <printnum+0x58>
+  800886:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800889:	ba 00 00 00 00       	mov    $0x0,%edx
+  80088e:	f7 75 e4             	divl   -0x1c(%ebp)
+  800891:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800894:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800897:	ba 00 00 00 00       	mov    $0x0,%edx
+  80089c:	f7 75 e4             	divl   -0x1c(%ebp)
+  80089f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008a2:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008a8:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008ab:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8008ae:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8008b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008b4:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8008b7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8008ba:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8008bd:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8008c0:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8008c3:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008c6:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008cb:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008ce:	77 41                	ja     800911 <printnum+0xc7>
+  8008d0:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008d3:	72 05                	jb     8008da <printnum+0x90>
+  8008d5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  8008d8:	77 37                	ja     800911 <printnum+0xc7>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008da:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008dd:	83 e8 01             	sub    $0x1,%eax
+  8008e0:	83 ec 04             	sub    $0x4,%esp
+  8008e3:	ff 75 20             	pushl  0x20(%ebp)
+  8008e6:	50                   	push   %eax
+  8008e7:	ff 75 18             	pushl  0x18(%ebp)
+  8008ea:	ff 75 ec             	pushl  -0x14(%ebp)
+  8008ed:	ff 75 e8             	pushl  -0x18(%ebp)
+  8008f0:	ff 75 0c             	pushl  0xc(%ebp)
+  8008f3:	ff 75 08             	pushl  0x8(%ebp)
+  8008f6:	e8 4f ff ff ff       	call   80084a <printnum>
+  8008fb:	83 c4 20             	add    $0x20,%esp
+  8008fe:	eb 1b                	jmp    80091b <printnum+0xd1>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800900:	83 ec 08             	sub    $0x8,%esp
+  800903:	ff 75 0c             	pushl  0xc(%ebp)
+  800906:	ff 75 20             	pushl  0x20(%ebp)
+  800909:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090c:	ff d0                	call   *%eax
+  80090e:	83 c4 10             	add    $0x10,%esp
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  800911:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  800915:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  800919:	7f e5                	jg     800900 <printnum+0xb6>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  80091b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  80091e:	05 e4 10 80 00       	add    $0x8010e4,%eax
+  800923:	0f b6 00             	movzbl (%eax),%eax
+  800926:	0f be c0             	movsbl %al,%eax
+  800929:	83 ec 08             	sub    $0x8,%esp
+  80092c:	ff 75 0c             	pushl  0xc(%ebp)
+  80092f:	50                   	push   %eax
+  800930:	8b 45 08             	mov    0x8(%ebp),%eax
+  800933:	ff d0                	call   *%eax
+  800935:	83 c4 10             	add    $0x10,%esp
+}
+  800938:	90                   	nop
+  800939:	c9                   	leave  
+  80093a:	c3                   	ret    
+
+0080093b <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  80093b:	55                   	push   %ebp
+  80093c:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  80093e:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800942:	7e 14                	jle    800958 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  800944:	8b 45 08             	mov    0x8(%ebp),%eax
+  800947:	8b 00                	mov    (%eax),%eax
+  800949:	8d 48 08             	lea    0x8(%eax),%ecx
+  80094c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80094f:	89 0a                	mov    %ecx,(%edx)
+  800951:	8b 50 04             	mov    0x4(%eax),%edx
+  800954:	8b 00                	mov    (%eax),%eax
+  800956:	eb 30                	jmp    800988 <getuint+0x4d>
+    }
+    else if (lflag) {
+  800958:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80095c:	74 16                	je     800974 <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  80095e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800961:	8b 00                	mov    (%eax),%eax
+  800963:	8d 48 04             	lea    0x4(%eax),%ecx
+  800966:	8b 55 08             	mov    0x8(%ebp),%edx
+  800969:	89 0a                	mov    %ecx,(%edx)
+  80096b:	8b 00                	mov    (%eax),%eax
+  80096d:	ba 00 00 00 00       	mov    $0x0,%edx
+  800972:	eb 14                	jmp    800988 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  800974:	8b 45 08             	mov    0x8(%ebp),%eax
+  800977:	8b 00                	mov    (%eax),%eax
+  800979:	8d 48 04             	lea    0x4(%eax),%ecx
+  80097c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80097f:	89 0a                	mov    %ecx,(%edx)
+  800981:	8b 00                	mov    (%eax),%eax
+  800983:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800988:	5d                   	pop    %ebp
+  800989:	c3                   	ret    
+
+0080098a <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  80098a:	55                   	push   %ebp
+  80098b:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  80098d:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800991:	7e 14                	jle    8009a7 <getint+0x1d>
+        return va_arg(*ap, long long);
+  800993:	8b 45 08             	mov    0x8(%ebp),%eax
+  800996:	8b 00                	mov    (%eax),%eax
+  800998:	8d 48 08             	lea    0x8(%eax),%ecx
+  80099b:	8b 55 08             	mov    0x8(%ebp),%edx
+  80099e:	89 0a                	mov    %ecx,(%edx)
+  8009a0:	8b 50 04             	mov    0x4(%eax),%edx
+  8009a3:	8b 00                	mov    (%eax),%eax
+  8009a5:	eb 28                	jmp    8009cf <getint+0x45>
+    }
+    else if (lflag) {
+  8009a7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8009ab:	74 12                	je     8009bf <getint+0x35>
+        return va_arg(*ap, long);
+  8009ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b0:	8b 00                	mov    (%eax),%eax
+  8009b2:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009b5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009b8:	89 0a                	mov    %ecx,(%edx)
+  8009ba:	8b 00                	mov    (%eax),%eax
+  8009bc:	99                   	cltd   
+  8009bd:	eb 10                	jmp    8009cf <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  8009bf:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009c2:	8b 00                	mov    (%eax),%eax
+  8009c4:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009c7:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009ca:	89 0a                	mov    %ecx,(%edx)
+  8009cc:	8b 00                	mov    (%eax),%eax
+  8009ce:	99                   	cltd   
+    }
+}
+  8009cf:	5d                   	pop    %ebp
+  8009d0:	c3                   	ret    
+
+008009d1 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009d1:	55                   	push   %ebp
+  8009d2:	89 e5                	mov    %esp,%ebp
+  8009d4:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009d7:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009da:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8009e0:	50                   	push   %eax
+  8009e1:	ff 75 10             	pushl  0x10(%ebp)
+  8009e4:	ff 75 0c             	pushl  0xc(%ebp)
+  8009e7:	ff 75 08             	pushl  0x8(%ebp)
+  8009ea:	e8 06 00 00 00       	call   8009f5 <vprintfmt>
+  8009ef:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8009f2:	90                   	nop
+  8009f3:	c9                   	leave  
+  8009f4:	c3                   	ret    
+
+008009f5 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8009f5:	55                   	push   %ebp
+  8009f6:	89 e5                	mov    %esp,%ebp
+  8009f8:	56                   	push   %esi
+  8009f9:	53                   	push   %ebx
+  8009fa:	83 ec 20             	sub    $0x20,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009fd:	eb 17                	jmp    800a16 <vprintfmt+0x21>
+            if (ch == '\0') {
+  8009ff:	85 db                	test   %ebx,%ebx
+  800a01:	0f 84 8e 03 00 00    	je     800d95 <vprintfmt+0x3a0>
+                return;
+            }
+            putch(ch, putdat);
+  800a07:	83 ec 08             	sub    $0x8,%esp
+  800a0a:	ff 75 0c             	pushl  0xc(%ebp)
+  800a0d:	53                   	push   %ebx
+  800a0e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a11:	ff d0                	call   *%eax
+  800a13:	83 c4 10             	add    $0x10,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a16:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a19:	8d 50 01             	lea    0x1(%eax),%edx
+  800a1c:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a1f:	0f b6 00             	movzbl (%eax),%eax
+  800a22:	0f b6 d8             	movzbl %al,%ebx
+  800a25:	83 fb 25             	cmp    $0x25,%ebx
+  800a28:	75 d5                	jne    8009ff <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a2a:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a2e:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a38:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a3b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a42:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a45:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a48:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a4b:	8d 50 01             	lea    0x1(%eax),%edx
+  800a4e:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a51:	0f b6 00             	movzbl (%eax),%eax
+  800a54:	0f b6 d8             	movzbl %al,%ebx
+  800a57:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a5a:	83 f8 55             	cmp    $0x55,%eax
+  800a5d:	0f 87 05 03 00 00    	ja     800d68 <vprintfmt+0x373>
+  800a63:	8b 04 85 08 11 80 00 	mov    0x801108(,%eax,4),%eax
+  800a6a:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a6c:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a70:	eb d6                	jmp    800a48 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a72:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800a76:	eb d0                	jmp    800a48 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a78:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800a7f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a82:	89 d0                	mov    %edx,%eax
+  800a84:	c1 e0 02             	shl    $0x2,%eax
+  800a87:	01 d0                	add    %edx,%eax
+  800a89:	01 c0                	add    %eax,%eax
+  800a8b:	01 d8                	add    %ebx,%eax
+  800a8d:	83 e8 30             	sub    $0x30,%eax
+  800a90:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800a93:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a96:	0f b6 00             	movzbl (%eax),%eax
+  800a99:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800a9c:	83 fb 2f             	cmp    $0x2f,%ebx
+  800a9f:	7e 39                	jle    800ada <vprintfmt+0xe5>
+  800aa1:	83 fb 39             	cmp    $0x39,%ebx
+  800aa4:	7f 34                	jg     800ada <vprintfmt+0xe5>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800aa6:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  800aaa:	eb d3                	jmp    800a7f <vprintfmt+0x8a>
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800aac:	8b 45 14             	mov    0x14(%ebp),%eax
+  800aaf:	8d 50 04             	lea    0x4(%eax),%edx
+  800ab2:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ab5:	8b 00                	mov    (%eax),%eax
+  800ab7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800aba:	eb 1f                	jmp    800adb <vprintfmt+0xe6>
+
+        case '.':
+            if (width < 0)
+  800abc:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ac0:	79 86                	jns    800a48 <vprintfmt+0x53>
+                width = 0;
+  800ac2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800ac9:	e9 7a ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800ace:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800ad5:	e9 6e ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+            goto process_precision;
+  800ada:	90                   	nop
+        case '#':
+            altflag = 1;
+            goto reswitch;
+
+        process_precision:
+            if (width < 0)
+  800adb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800adf:	0f 89 63 ff ff ff    	jns    800a48 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800ae5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ae8:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800aeb:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800af2:	e9 51 ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800af7:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800afb:	e9 48 ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800b00:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b03:	8d 50 04             	lea    0x4(%eax),%edx
+  800b06:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b09:	8b 00                	mov    (%eax),%eax
+  800b0b:	83 ec 08             	sub    $0x8,%esp
+  800b0e:	ff 75 0c             	pushl  0xc(%ebp)
+  800b11:	50                   	push   %eax
+  800b12:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b15:	ff d0                	call   *%eax
+  800b17:	83 c4 10             	add    $0x10,%esp
+            break;
+  800b1a:	e9 71 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800b1f:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b22:	8d 50 04             	lea    0x4(%eax),%edx
+  800b25:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b28:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b2a:	85 db                	test   %ebx,%ebx
+  800b2c:	79 02                	jns    800b30 <vprintfmt+0x13b>
+                err = -err;
+  800b2e:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b30:	83 fb 18             	cmp    $0x18,%ebx
+  800b33:	7f 0b                	jg     800b40 <vprintfmt+0x14b>
+  800b35:	8b 34 9d 80 10 80 00 	mov    0x801080(,%ebx,4),%esi
+  800b3c:	85 f6                	test   %esi,%esi
+  800b3e:	75 19                	jne    800b59 <vprintfmt+0x164>
+                printfmt(putch, putdat, "error %d", err);
+  800b40:	53                   	push   %ebx
+  800b41:	68 f5 10 80 00       	push   $0x8010f5
+  800b46:	ff 75 0c             	pushl  0xc(%ebp)
+  800b49:	ff 75 08             	pushl  0x8(%ebp)
+  800b4c:	e8 80 fe ff ff       	call   8009d1 <printfmt>
+  800b51:	83 c4 10             	add    $0x10,%esp
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b54:	e9 37 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  800b59:	56                   	push   %esi
+  800b5a:	68 fe 10 80 00       	push   $0x8010fe
+  800b5f:	ff 75 0c             	pushl  0xc(%ebp)
+  800b62:	ff 75 08             	pushl  0x8(%ebp)
+  800b65:	e8 67 fe ff ff       	call   8009d1 <printfmt>
+  800b6a:	83 c4 10             	add    $0x10,%esp
+            }
+            break;
+  800b6d:	e9 1e 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800b72:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b75:	8d 50 04             	lea    0x4(%eax),%edx
+  800b78:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b7b:	8b 30                	mov    (%eax),%esi
+  800b7d:	85 f6                	test   %esi,%esi
+  800b7f:	75 05                	jne    800b86 <vprintfmt+0x191>
+                p = "(null)";
+  800b81:	be 01 11 80 00       	mov    $0x801101,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800b86:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b8a:	7e 76                	jle    800c02 <vprintfmt+0x20d>
+  800b8c:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800b90:	74 70                	je     800c02 <vprintfmt+0x20d>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b92:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b95:	83 ec 08             	sub    $0x8,%esp
+  800b98:	50                   	push   %eax
+  800b99:	56                   	push   %esi
+  800b9a:	e8 17 f8 ff ff       	call   8003b6 <strnlen>
+  800b9f:	83 c4 10             	add    $0x10,%esp
+  800ba2:	89 c2                	mov    %eax,%edx
+  800ba4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ba7:	29 d0                	sub    %edx,%eax
+  800ba9:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800bac:	eb 17                	jmp    800bc5 <vprintfmt+0x1d0>
+                    putch(padc, putdat);
+  800bae:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800bb2:	83 ec 08             	sub    $0x8,%esp
+  800bb5:	ff 75 0c             	pushl  0xc(%ebp)
+  800bb8:	50                   	push   %eax
+  800bb9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bbc:	ff d0                	call   *%eax
+  800bbe:	83 c4 10             	add    $0x10,%esp
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bc1:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800bc5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800bc9:	7f e3                	jg     800bae <vprintfmt+0x1b9>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bcb:	eb 35                	jmp    800c02 <vprintfmt+0x20d>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800bcd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800bd1:	74 1c                	je     800bef <vprintfmt+0x1fa>
+  800bd3:	83 fb 1f             	cmp    $0x1f,%ebx
+  800bd6:	7e 05                	jle    800bdd <vprintfmt+0x1e8>
+  800bd8:	83 fb 7e             	cmp    $0x7e,%ebx
+  800bdb:	7e 12                	jle    800bef <vprintfmt+0x1fa>
+                    putch('?', putdat);
+  800bdd:	83 ec 08             	sub    $0x8,%esp
+  800be0:	ff 75 0c             	pushl  0xc(%ebp)
+  800be3:	6a 3f                	push   $0x3f
+  800be5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800be8:	ff d0                	call   *%eax
+  800bea:	83 c4 10             	add    $0x10,%esp
+  800bed:	eb 0f                	jmp    800bfe <vprintfmt+0x209>
+                }
+                else {
+                    putch(ch, putdat);
+  800bef:	83 ec 08             	sub    $0x8,%esp
+  800bf2:	ff 75 0c             	pushl  0xc(%ebp)
+  800bf5:	53                   	push   %ebx
+  800bf6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bf9:	ff d0                	call   *%eax
+  800bfb:	83 c4 10             	add    $0x10,%esp
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bfe:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c02:	89 f0                	mov    %esi,%eax
+  800c04:	8d 70 01             	lea    0x1(%eax),%esi
+  800c07:	0f b6 00             	movzbl (%eax),%eax
+  800c0a:	0f be d8             	movsbl %al,%ebx
+  800c0d:	85 db                	test   %ebx,%ebx
+  800c0f:	74 26                	je     800c37 <vprintfmt+0x242>
+  800c11:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c15:	78 b6                	js     800bcd <vprintfmt+0x1d8>
+  800c17:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  800c1b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c1f:	79 ac                	jns    800bcd <vprintfmt+0x1d8>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c21:	eb 14                	jmp    800c37 <vprintfmt+0x242>
+                putch(' ', putdat);
+  800c23:	83 ec 08             	sub    $0x8,%esp
+  800c26:	ff 75 0c             	pushl  0xc(%ebp)
+  800c29:	6a 20                	push   $0x20
+  800c2b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2e:	ff d0                	call   *%eax
+  800c30:	83 c4 10             	add    $0x10,%esp
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c33:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c37:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c3b:	7f e6                	jg     800c23 <vprintfmt+0x22e>
+                putch(' ', putdat);
+            }
+            break;
+  800c3d:	e9 4e 01 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c42:	83 ec 08             	sub    $0x8,%esp
+  800c45:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c48:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c4b:	50                   	push   %eax
+  800c4c:	e8 39 fd ff ff       	call   80098a <getint>
+  800c51:	83 c4 10             	add    $0x10,%esp
+  800c54:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c57:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c5d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c60:	85 d2                	test   %edx,%edx
+  800c62:	79 23                	jns    800c87 <vprintfmt+0x292>
+                putch('-', putdat);
+  800c64:	83 ec 08             	sub    $0x8,%esp
+  800c67:	ff 75 0c             	pushl  0xc(%ebp)
+  800c6a:	6a 2d                	push   $0x2d
+  800c6c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c6f:	ff d0                	call   *%eax
+  800c71:	83 c4 10             	add    $0x10,%esp
+                num = -(long long)num;
+  800c74:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c77:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c7a:	f7 d8                	neg    %eax
+  800c7c:	83 d2 00             	adc    $0x0,%edx
+  800c7f:	f7 da                	neg    %edx
+  800c81:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c84:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800c87:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c8e:	e9 9f 00 00 00       	jmp    800d32 <vprintfmt+0x33d>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800c93:	83 ec 08             	sub    $0x8,%esp
+  800c96:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c99:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c9c:	50                   	push   %eax
+  800c9d:	e8 99 fc ff ff       	call   80093b <getuint>
+  800ca2:	83 c4 10             	add    $0x10,%esp
+  800ca5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ca8:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800cab:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cb2:	eb 7e                	jmp    800d32 <vprintfmt+0x33d>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800cb4:	83 ec 08             	sub    $0x8,%esp
+  800cb7:	ff 75 e0             	pushl  -0x20(%ebp)
+  800cba:	8d 45 14             	lea    0x14(%ebp),%eax
+  800cbd:	50                   	push   %eax
+  800cbe:	e8 78 fc ff ff       	call   80093b <getuint>
+  800cc3:	83 c4 10             	add    $0x10,%esp
+  800cc6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cc9:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800ccc:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800cd3:	eb 5d                	jmp    800d32 <vprintfmt+0x33d>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800cd5:	83 ec 08             	sub    $0x8,%esp
+  800cd8:	ff 75 0c             	pushl  0xc(%ebp)
+  800cdb:	6a 30                	push   $0x30
+  800cdd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ce0:	ff d0                	call   *%eax
+  800ce2:	83 c4 10             	add    $0x10,%esp
+            putch('x', putdat);
+  800ce5:	83 ec 08             	sub    $0x8,%esp
+  800ce8:	ff 75 0c             	pushl  0xc(%ebp)
+  800ceb:	6a 78                	push   $0x78
+  800ced:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cf0:	ff d0                	call   *%eax
+  800cf2:	83 c4 10             	add    $0x10,%esp
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800cf5:	8b 45 14             	mov    0x14(%ebp),%eax
+  800cf8:	8d 50 04             	lea    0x4(%eax),%edx
+  800cfb:	89 55 14             	mov    %edx,0x14(%ebp)
+  800cfe:	8b 00                	mov    (%eax),%eax
+  800d00:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d03:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800d0a:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800d11:	eb 1f                	jmp    800d32 <vprintfmt+0x33d>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800d13:	83 ec 08             	sub    $0x8,%esp
+  800d16:	ff 75 e0             	pushl  -0x20(%ebp)
+  800d19:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d1c:	50                   	push   %eax
+  800d1d:	e8 19 fc ff ff       	call   80093b <getuint>
+  800d22:	83 c4 10             	add    $0x10,%esp
+  800d25:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d28:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d2b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d32:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d36:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d39:	83 ec 04             	sub    $0x4,%esp
+  800d3c:	52                   	push   %edx
+  800d3d:	ff 75 e8             	pushl  -0x18(%ebp)
+  800d40:	50                   	push   %eax
+  800d41:	ff 75 f4             	pushl  -0xc(%ebp)
+  800d44:	ff 75 f0             	pushl  -0x10(%ebp)
+  800d47:	ff 75 0c             	pushl  0xc(%ebp)
+  800d4a:	ff 75 08             	pushl  0x8(%ebp)
+  800d4d:	e8 f8 fa ff ff       	call   80084a <printnum>
+  800d52:	83 c4 20             	add    $0x20,%esp
+            break;
+  800d55:	eb 39                	jmp    800d90 <vprintfmt+0x39b>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800d57:	83 ec 08             	sub    $0x8,%esp
+  800d5a:	ff 75 0c             	pushl  0xc(%ebp)
+  800d5d:	53                   	push   %ebx
+  800d5e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d61:	ff d0                	call   *%eax
+  800d63:	83 c4 10             	add    $0x10,%esp
+            break;
+  800d66:	eb 28                	jmp    800d90 <vprintfmt+0x39b>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800d68:	83 ec 08             	sub    $0x8,%esp
+  800d6b:	ff 75 0c             	pushl  0xc(%ebp)
+  800d6e:	6a 25                	push   $0x25
+  800d70:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d73:	ff d0                	call   *%eax
+  800d75:	83 c4 10             	add    $0x10,%esp
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800d78:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d7c:	eb 04                	jmp    800d82 <vprintfmt+0x38d>
+  800d7e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d82:	8b 45 10             	mov    0x10(%ebp),%eax
+  800d85:	83 e8 01             	sub    $0x1,%eax
+  800d88:	0f b6 00             	movzbl (%eax),%eax
+  800d8b:	3c 25                	cmp    $0x25,%al
+  800d8d:	75 ef                	jne    800d7e <vprintfmt+0x389>
+                /* do nothing */;
+            break;
+  800d8f:	90                   	nop
+        }
+    }
+  800d90:	e9 68 fc ff ff       	jmp    8009fd <vprintfmt+0x8>
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+            if (ch == '\0') {
+                return;
+  800d95:	90                   	nop
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  800d96:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  800d99:	5b                   	pop    %ebx
+  800d9a:	5e                   	pop    %esi
+  800d9b:	5d                   	pop    %ebp
+  800d9c:	c3                   	ret    
+
+00800d9d <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800d9d:	55                   	push   %ebp
+  800d9e:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800da0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800da3:	8b 40 08             	mov    0x8(%eax),%eax
+  800da6:	8d 50 01             	lea    0x1(%eax),%edx
+  800da9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dac:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800daf:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db2:	8b 10                	mov    (%eax),%edx
+  800db4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db7:	8b 40 04             	mov    0x4(%eax),%eax
+  800dba:	39 c2                	cmp    %eax,%edx
+  800dbc:	73 12                	jae    800dd0 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800dbe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dc1:	8b 00                	mov    (%eax),%eax
+  800dc3:	8d 48 01             	lea    0x1(%eax),%ecx
+  800dc6:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800dc9:	89 0a                	mov    %ecx,(%edx)
+  800dcb:	8b 55 08             	mov    0x8(%ebp),%edx
+  800dce:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800dd0:	90                   	nop
+  800dd1:	5d                   	pop    %ebp
+  800dd2:	c3                   	ret    
+
+00800dd3 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800dd3:	55                   	push   %ebp
+  800dd4:	89 e5                	mov    %esp,%ebp
+  800dd6:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800dd9:	8d 45 14             	lea    0x14(%ebp),%eax
+  800ddc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800ddf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800de2:	50                   	push   %eax
+  800de3:	ff 75 10             	pushl  0x10(%ebp)
+  800de6:	ff 75 0c             	pushl  0xc(%ebp)
+  800de9:	ff 75 08             	pushl  0x8(%ebp)
+  800dec:	e8 0b 00 00 00       	call   800dfc <vsnprintf>
+  800df1:	83 c4 10             	add    $0x10,%esp
+  800df4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800df7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800dfa:	c9                   	leave  
+  800dfb:	c3                   	ret    
+
+00800dfc <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800dfc:	55                   	push   %ebp
+  800dfd:	89 e5                	mov    %esp,%ebp
+  800dff:	83 ec 18             	sub    $0x18,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800e02:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e05:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e08:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e0b:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800e0e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e11:	01 d0                	add    %edx,%eax
+  800e13:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e16:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800e1d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800e21:	74 0a                	je     800e2d <vsnprintf+0x31>
+  800e23:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800e26:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e29:	39 c2                	cmp    %eax,%edx
+  800e2b:	76 07                	jbe    800e34 <vsnprintf+0x38>
+        return -E_INVAL;
+  800e2d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e32:	eb 20                	jmp    800e54 <vsnprintf+0x58>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e34:	ff 75 14             	pushl  0x14(%ebp)
+  800e37:	ff 75 10             	pushl  0x10(%ebp)
+  800e3a:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800e3d:	50                   	push   %eax
+  800e3e:	68 9d 0d 80 00       	push   $0x800d9d
+  800e43:	e8 ad fb ff ff       	call   8009f5 <vprintfmt>
+  800e48:	83 c4 10             	add    $0x10,%esp
+    // null terminate the buffer
+    *b.buf = '\0';
+  800e4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e4e:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800e51:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e54:	c9                   	leave  
+  800e55:	c3                   	ret    
+
+00800e56 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800e56:	55                   	push   %ebp
+  800e57:	89 e5                	mov    %esp,%ebp
+  800e59:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800e5c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e5f:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800e65:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800e68:	b8 20 00 00 00       	mov    $0x20,%eax
+  800e6d:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800e70:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800e73:	89 c1                	mov    %eax,%ecx
+  800e75:	d3 ea                	shr    %cl,%edx
+  800e77:	89 d0                	mov    %edx,%eax
+}
+  800e79:	c9                   	leave  
+  800e7a:	c3                   	ret    
+
+00800e7b <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800e7b:	55                   	push   %ebp
+  800e7c:	89 e5                	mov    %esp,%ebp
+  800e7e:	57                   	push   %edi
+  800e7f:	56                   	push   %esi
+  800e80:	53                   	push   %ebx
+  800e81:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800e84:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e89:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800e8f:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800e95:	6b f0 05             	imul   $0x5,%eax,%esi
+  800e98:	01 fe                	add    %edi,%esi
+  800e9a:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800e9f:	f7 e7                	mul    %edi
+  800ea1:	01 d6                	add    %edx,%esi
+  800ea3:	89 f2                	mov    %esi,%edx
+  800ea5:	83 c0 0b             	add    $0xb,%eax
+  800ea8:	83 d2 00             	adc    $0x0,%edx
+  800eab:	89 c7                	mov    %eax,%edi
+  800ead:	83 e7 ff             	and    $0xffffffff,%edi
+  800eb0:	89 f9                	mov    %edi,%ecx
+  800eb2:	0f b7 da             	movzwl %dx,%ebx
+  800eb5:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800ebb:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800ec1:	a1 00 20 80 00       	mov    0x802000,%eax
+  800ec6:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ecc:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ed0:	c1 ea 0c             	shr    $0xc,%edx
+  800ed3:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ed6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800ed9:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ee0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ee3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ee6:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ee9:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800eec:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eef:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ef2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ef6:	74 1c                	je     800f14 <rand+0x99>
+  800ef8:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800efb:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f00:	f7 75 dc             	divl   -0x24(%ebp)
+  800f03:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800f06:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f09:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f0e:	f7 75 dc             	divl   -0x24(%ebp)
+  800f11:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800f14:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f17:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800f1a:	f7 75 dc             	divl   -0x24(%ebp)
+  800f1d:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f20:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f23:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f26:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800f29:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f2c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f2f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800f32:	83 c4 24             	add    $0x24,%esp
+  800f35:	5b                   	pop    %ebx
+  800f36:	5e                   	pop    %esi
+  800f37:	5f                   	pop    %edi
+  800f38:	5d                   	pop    %ebp
+  800f39:	c3                   	ret    
+
+00800f3a <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800f3a:	55                   	push   %ebp
+  800f3b:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800f3d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f40:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f45:	a3 00 20 80 00       	mov    %eax,0x802000
+  800f4a:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800f50:	90                   	nop
+  800f51:	5d                   	pop    %ebp
+  800f52:	c3                   	ret    
+
+00800f53 <main>:
+#include <ulib.h>
+
+/* try to load the kernel's TSS selector into the DS register */
+
+int
+main(void) {
+  800f53:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  800f57:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f5a:	ff 71 fc             	pushl  -0x4(%ecx)
+  800f5d:	55                   	push   %ebp
+  800f5e:	89 e5                	mov    %esp,%ebp
+  800f60:	51                   	push   %ecx
+  800f61:	83 ec 04             	sub    $0x4,%esp
+    asm volatile("movw $0x28,%ax; movw %ax,%ds");
+  800f64:	66 b8 28 00          	mov    $0x28,%ax
+  800f68:	8e d8                	mov    %eax,%ds
+    panic("FAIL: T.T\n");
+  800f6a:	83 ec 04             	sub    $0x4,%esp
+  800f6d:	68 60 12 80 00       	push   $0x801260
+  800f72:	6a 09                	push   $0x9
+  800f74:	68 6b 12 80 00       	push   $0x80126b
+  800f79:	e8 a2 f0 ff ff       	call   800020 <__panic>
diff -r -u -P lab7_original/obj/user/badsegment.d lab7/obj/user/badsegment.d
--- lab7_original/obj/user/badsegment.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/badsegment.d	2016-05-06 21:59:27.590122403 +0800
@@ -0,0 +1,2 @@
+obj/user/badsegment.o obj/user/badsegment.d: user/badsegment.c \
+ libs/stdio.h libs/defs.h libs/stdarg.h user/libs/ulib.h
Binary files lab7_original/obj/user/badsegment.o and lab7/obj/user/badsegment.o differ
diff -r -u -P lab7_original/obj/user/badsegment.sym lab7/obj/user/badsegment.sym
--- lab7_original/obj/user/badsegment.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/badsegment.sym	2016-05-06 21:59:28.674161924 +0800
@@ -0,0 +1,78 @@
+00800020 .text
+00800f80 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202d05 .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b5 syscall
+00000000 ulib.c
+00000000 stdio.c
+008002b4 cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+00801080 error_string
+0080084a printnum
+0080093b getuint
+0080098a getint
+00800d9d sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 badsegment.c
+008003e6 strcpy
+0080022c yield
+00800213 waitpid
+00800141 sys_yield
+008006ff memmove
+00800dd3 snprintf
+008009f5 vprintfmt
+0080011d sys_fork
+00800301 cprintf
+00800250 getpid
+008007a2 memcpy
+0080028f sleep
+00800278 lab6_set_priority
+00800dfc vsnprintf
+00800375 umain
+00202d04 __STAB_END__
+00800150 sys_kill
+00202d05 __STABSTR_BEGIN__
+00800020 __panic
+008001b7 sys_sleep
+00800562 strtol
+008003b6 strnlen
+0080025d print_pgdir
+0080023a kill
+00800533 strfind
+008001fc wait
+008002a5 _start
+00800e7b rand
+008004aa strncmp
+00800171 sys_putc
+00800426 strncpy
+008007f2 memcmp
+008001ef fork
+008006bf memset
+00800f53 main
+00800f3a srand
+00800e56 hash32
+008009d1 printfmt
+00203b12 __STABSTR_END__
+00800460 strcmp
+0080026b gettime_msec
+00800192 sys_gettime
+008002d8 vcprintf
+0080006e __warn
+00800327 cputs
+008001a1 sys_lab6_set_priority
+008001c9 exit
+0080012c sys_wait
+0080010b sys_exit
+00200010 __STAB_BEGIN__
+0080038e strlen
+00800183 sys_pgdir
+00800500 strchr
+00800162 sys_getpid
diff -r -u -P lab7_original/obj/user/divzero.asm lab7/obj/user/divzero.asm
--- lab7_original/obj/user/divzero.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/divzero.asm	2016-05-06 21:59:28.586158704 +0800
@@ -0,0 +1,2618 @@
+
+obj/__user_divzero.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 18             	sub    $0x18,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	83 ec 04             	sub    $0x4,%esp
+  80002f:	ff 75 0c             	pushl  0xc(%ebp)
+  800032:	ff 75 08             	pushl  0x8(%ebp)
+  800035:	68 a0 0f 80 00       	push   $0x800fa0
+  80003a:	e8 c2 02 00 00       	call   800301 <cprintf>
+  80003f:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800042:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800045:	83 ec 08             	sub    $0x8,%esp
+  800048:	50                   	push   %eax
+  800049:	ff 75 10             	pushl  0x10(%ebp)
+  80004c:	e8 87 02 00 00       	call   8002d8 <vcprintf>
+  800051:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  800054:	83 ec 0c             	sub    $0xc,%esp
+  800057:	68 ba 0f 80 00       	push   $0x800fba
+  80005c:	e8 a0 02 00 00       	call   800301 <cprintf>
+  800061:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	83 ec 0c             	sub    $0xc,%esp
+  800067:	6a f6                	push   $0xfffffff6
+  800069:	e8 5b 01 00 00       	call   8001c9 <exit>
+
+0080006e <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80006e:	55                   	push   %ebp
+  80006f:	89 e5                	mov    %esp,%ebp
+  800071:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800074:	8d 45 14             	lea    0x14(%ebp),%eax
+  800077:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007a:	83 ec 04             	sub    $0x4,%esp
+  80007d:	ff 75 0c             	pushl  0xc(%ebp)
+  800080:	ff 75 08             	pushl  0x8(%ebp)
+  800083:	68 bc 0f 80 00       	push   $0x800fbc
+  800088:	e8 74 02 00 00       	call   800301 <cprintf>
+  80008d:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800090:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800093:	83 ec 08             	sub    $0x8,%esp
+  800096:	50                   	push   %eax
+  800097:	ff 75 10             	pushl  0x10(%ebp)
+  80009a:	e8 39 02 00 00       	call   8002d8 <vcprintf>
+  80009f:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  8000a2:	83 ec 0c             	sub    $0xc,%esp
+  8000a5:	68 ba 0f 80 00       	push   $0x800fba
+  8000aa:	e8 52 02 00 00       	call   800301 <cprintf>
+  8000af:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8000b2:	90                   	nop
+  8000b3:	c9                   	leave  
+  8000b4:	c3                   	ret    
+
+008000b5 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b5:	55                   	push   %ebp
+  8000b6:	89 e5                	mov    %esp,%ebp
+  8000b8:	57                   	push   %edi
+  8000b9:	56                   	push   %esi
+  8000ba:	53                   	push   %ebx
+  8000bb:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000be:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cb:	eb 16                	jmp    8000e3 <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8000cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d0:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d3:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d6:	8b 10                	mov    (%eax),%edx
+  8000d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000db:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000df:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8000e3:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e7:	7e e4                	jle    8000cd <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000e9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ec:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000ef:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f2:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f5:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8000f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fb:	cd 80                	int    $0x80
+  8000fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  800100:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800103:	83 c4 20             	add    $0x20,%esp
+  800106:	5b                   	pop    %ebx
+  800107:	5e                   	pop    %esi
+  800108:	5f                   	pop    %edi
+  800109:	5d                   	pop    %ebp
+  80010a:	c3                   	ret    
+
+0080010b <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010b:	55                   	push   %ebp
+  80010c:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_exit, error_code);
+  80010e:	ff 75 08             	pushl  0x8(%ebp)
+  800111:	6a 01                	push   $0x1
+  800113:	e8 9d ff ff ff       	call   8000b5 <syscall>
+  800118:	83 c4 08             	add    $0x8,%esp
+}
+  80011b:	c9                   	leave  
+  80011c:	c3                   	ret    
+
+0080011d <sys_fork>:
+
+int
+sys_fork(void) {
+  80011d:	55                   	push   %ebp
+  80011e:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_fork);
+  800120:	6a 02                	push   $0x2
+  800122:	e8 8e ff ff ff       	call   8000b5 <syscall>
+  800127:	83 c4 04             	add    $0x4,%esp
+}
+  80012a:	c9                   	leave  
+  80012b:	c3                   	ret    
+
+0080012c <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80012c:	55                   	push   %ebp
+  80012d:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_wait, pid, store);
+  80012f:	ff 75 0c             	pushl  0xc(%ebp)
+  800132:	ff 75 08             	pushl  0x8(%ebp)
+  800135:	6a 03                	push   $0x3
+  800137:	e8 79 ff ff ff       	call   8000b5 <syscall>
+  80013c:	83 c4 0c             	add    $0xc,%esp
+}
+  80013f:	c9                   	leave  
+  800140:	c3                   	ret    
+
+00800141 <sys_yield>:
+
+int
+sys_yield(void) {
+  800141:	55                   	push   %ebp
+  800142:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_yield);
+  800144:	6a 0a                	push   $0xa
+  800146:	e8 6a ff ff ff       	call   8000b5 <syscall>
+  80014b:	83 c4 04             	add    $0x4,%esp
+}
+  80014e:	c9                   	leave  
+  80014f:	c3                   	ret    
+
+00800150 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800150:	55                   	push   %ebp
+  800151:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_kill, pid);
+  800153:	ff 75 08             	pushl  0x8(%ebp)
+  800156:	6a 0c                	push   $0xc
+  800158:	e8 58 ff ff ff       	call   8000b5 <syscall>
+  80015d:	83 c4 08             	add    $0x8,%esp
+}
+  800160:	c9                   	leave  
+  800161:	c3                   	ret    
+
+00800162 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800162:	55                   	push   %ebp
+  800163:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_getpid);
+  800165:	6a 12                	push   $0x12
+  800167:	e8 49 ff ff ff       	call   8000b5 <syscall>
+  80016c:	83 c4 04             	add    $0x4,%esp
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_putc, c);
+  800174:	ff 75 08             	pushl  0x8(%ebp)
+  800177:	6a 1e                	push   $0x1e
+  800179:	e8 37 ff ff ff       	call   8000b5 <syscall>
+  80017e:	83 c4 08             	add    $0x8,%esp
+}
+  800181:	c9                   	leave  
+  800182:	c3                   	ret    
+
+00800183 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800183:	55                   	push   %ebp
+  800184:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_pgdir);
+  800186:	6a 1f                	push   $0x1f
+  800188:	e8 28 ff ff ff       	call   8000b5 <syscall>
+  80018d:	83 c4 04             	add    $0x4,%esp
+}
+  800190:	c9                   	leave  
+  800191:	c3                   	ret    
+
+00800192 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  800192:	55                   	push   %ebp
+  800193:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_gettime);
+  800195:	6a 11                	push   $0x11
+  800197:	e8 19 ff ff ff       	call   8000b5 <syscall>
+  80019c:	83 c4 04             	add    $0x4,%esp
+}
+  80019f:	c9                   	leave  
+  8001a0:	c3                   	ret    
+
+008001a1 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001a1:	55                   	push   %ebp
+  8001a2:	89 e5                	mov    %esp,%ebp
+    syscall(SYS_lab6_set_priority, priority);
+  8001a4:	ff 75 08             	pushl  0x8(%ebp)
+  8001a7:	68 ff 00 00 00       	push   $0xff
+  8001ac:	e8 04 ff ff ff       	call   8000b5 <syscall>
+  8001b1:	83 c4 08             	add    $0x8,%esp
+}
+  8001b4:	90                   	nop
+  8001b5:	c9                   	leave  
+  8001b6:	c3                   	ret    
+
+008001b7 <sys_sleep>:
+
+int
+sys_sleep(unsigned int time) {
+  8001b7:	55                   	push   %ebp
+  8001b8:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_sleep, time);
+  8001ba:	ff 75 08             	pushl  0x8(%ebp)
+  8001bd:	6a 0b                	push   $0xb
+  8001bf:	e8 f1 fe ff ff       	call   8000b5 <syscall>
+  8001c4:	83 c4 08             	add    $0x8,%esp
+}
+  8001c7:	c9                   	leave  
+  8001c8:	c3                   	ret    
+
+008001c9 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001c9:	55                   	push   %ebp
+  8001ca:	89 e5                	mov    %esp,%ebp
+  8001cc:	83 ec 08             	sub    $0x8,%esp
+    sys_exit(error_code);
+  8001cf:	83 ec 0c             	sub    $0xc,%esp
+  8001d2:	ff 75 08             	pushl  0x8(%ebp)
+  8001d5:	e8 31 ff ff ff       	call   80010b <sys_exit>
+  8001da:	83 c4 10             	add    $0x10,%esp
+    cprintf("BUG: exit failed.\n");
+  8001dd:	83 ec 0c             	sub    $0xc,%esp
+  8001e0:	68 d8 0f 80 00       	push   $0x800fd8
+  8001e5:	e8 17 01 00 00       	call   800301 <cprintf>
+  8001ea:	83 c4 10             	add    $0x10,%esp
+    while (1);
+  8001ed:	eb fe                	jmp    8001ed <exit+0x24>
+
+008001ef <fork>:
+}
+
+int
+fork(void) {
+  8001ef:	55                   	push   %ebp
+  8001f0:	89 e5                	mov    %esp,%ebp
+  8001f2:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8001f5:	e8 23 ff ff ff       	call   80011d <sys_fork>
+}
+  8001fa:	c9                   	leave  
+  8001fb:	c3                   	ret    
+
+008001fc <wait>:
+
+int
+wait(void) {
+  8001fc:	55                   	push   %ebp
+  8001fd:	89 e5                	mov    %esp,%ebp
+  8001ff:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(0, NULL);
+  800202:	83 ec 08             	sub    $0x8,%esp
+  800205:	6a 00                	push   $0x0
+  800207:	6a 00                	push   $0x0
+  800209:	e8 1e ff ff ff       	call   80012c <sys_wait>
+  80020e:	83 c4 10             	add    $0x10,%esp
+}
+  800211:	c9                   	leave  
+  800212:	c3                   	ret    
+
+00800213 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800213:	55                   	push   %ebp
+  800214:	89 e5                	mov    %esp,%ebp
+  800216:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(pid, store);
+  800219:	83 ec 08             	sub    $0x8,%esp
+  80021c:	ff 75 0c             	pushl  0xc(%ebp)
+  80021f:	ff 75 08             	pushl  0x8(%ebp)
+  800222:	e8 05 ff ff ff       	call   80012c <sys_wait>
+  800227:	83 c4 10             	add    $0x10,%esp
+}
+  80022a:	c9                   	leave  
+  80022b:	c3                   	ret    
+
+0080022c <yield>:
+
+void
+yield(void) {
+  80022c:	55                   	push   %ebp
+  80022d:	89 e5                	mov    %esp,%ebp
+  80022f:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800232:	e8 0a ff ff ff       	call   800141 <sys_yield>
+}
+  800237:	90                   	nop
+  800238:	c9                   	leave  
+  800239:	c3                   	ret    
+
+0080023a <kill>:
+
+int
+kill(int pid) {
+  80023a:	55                   	push   %ebp
+  80023b:	89 e5                	mov    %esp,%ebp
+  80023d:	83 ec 08             	sub    $0x8,%esp
+    return sys_kill(pid);
+  800240:	83 ec 0c             	sub    $0xc,%esp
+  800243:	ff 75 08             	pushl  0x8(%ebp)
+  800246:	e8 05 ff ff ff       	call   800150 <sys_kill>
+  80024b:	83 c4 10             	add    $0x10,%esp
+}
+  80024e:	c9                   	leave  
+  80024f:	c3                   	ret    
+
+00800250 <getpid>:
+
+int
+getpid(void) {
+  800250:	55                   	push   %ebp
+  800251:	89 e5                	mov    %esp,%ebp
+  800253:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800256:	e8 07 ff ff ff       	call   800162 <sys_getpid>
+}
+  80025b:	c9                   	leave  
+  80025c:	c3                   	ret    
+
+0080025d <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80025d:	55                   	push   %ebp
+  80025e:	89 e5                	mov    %esp,%ebp
+  800260:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800263:	e8 1b ff ff ff       	call   800183 <sys_pgdir>
+}
+  800268:	90                   	nop
+  800269:	c9                   	leave  
+  80026a:	c3                   	ret    
+
+0080026b <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80026b:	55                   	push   %ebp
+  80026c:	89 e5                	mov    %esp,%ebp
+  80026e:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800271:	e8 1c ff ff ff       	call   800192 <sys_gettime>
+}
+  800276:	c9                   	leave  
+  800277:	c3                   	ret    
+
+00800278 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800278:	55                   	push   %ebp
+  800279:	89 e5                	mov    %esp,%ebp
+  80027b:	83 ec 08             	sub    $0x8,%esp
+    sys_lab6_set_priority(priority);
+  80027e:	83 ec 0c             	sub    $0xc,%esp
+  800281:	ff 75 08             	pushl  0x8(%ebp)
+  800284:	e8 18 ff ff ff       	call   8001a1 <sys_lab6_set_priority>
+  800289:	83 c4 10             	add    $0x10,%esp
+}
+  80028c:	90                   	nop
+  80028d:	c9                   	leave  
+  80028e:	c3                   	ret    
+
+0080028f <sleep>:
+
+int
+sleep(unsigned int time) {
+  80028f:	55                   	push   %ebp
+  800290:	89 e5                	mov    %esp,%ebp
+  800292:	83 ec 08             	sub    $0x8,%esp
+    return sys_sleep(time);
+  800295:	83 ec 0c             	sub    $0xc,%esp
+  800298:	ff 75 08             	pushl  0x8(%ebp)
+  80029b:	e8 17 ff ff ff       	call   8001b7 <sys_sleep>
+  8002a0:	83 c4 10             	add    $0x10,%esp
+}
+  8002a3:	c9                   	leave  
+  8002a4:	c3                   	ret    
+
+008002a5 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  8002a5:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  8002aa:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  8002ad:	e8 c3 00 00 00       	call   800375 <umain>
+1:  jmp 1b
+  8002b2:	eb fe                	jmp    8002b2 <_start+0xd>
+
+008002b4 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8002b4:	55                   	push   %ebp
+  8002b5:	89 e5                	mov    %esp,%ebp
+  8002b7:	83 ec 08             	sub    $0x8,%esp
+    sys_putc(c);
+  8002ba:	83 ec 0c             	sub    $0xc,%esp
+  8002bd:	ff 75 08             	pushl  0x8(%ebp)
+  8002c0:	e8 ac fe ff ff       	call   800171 <sys_putc>
+  8002c5:	83 c4 10             	add    $0x10,%esp
+    (*cnt) ++;
+  8002c8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002cb:	8b 00                	mov    (%eax),%eax
+  8002cd:	8d 50 01             	lea    0x1(%eax),%edx
+  8002d0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002d3:	89 10                	mov    %edx,(%eax)
+}
+  8002d5:	90                   	nop
+  8002d6:	c9                   	leave  
+  8002d7:	c3                   	ret    
+
+008002d8 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002d8:	55                   	push   %ebp
+  8002d9:	89 e5                	mov    %esp,%ebp
+  8002db:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  8002de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002e5:	ff 75 0c             	pushl  0xc(%ebp)
+  8002e8:	ff 75 08             	pushl  0x8(%ebp)
+  8002eb:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  8002ee:	50                   	push   %eax
+  8002ef:	68 b4 02 80 00       	push   $0x8002b4
+  8002f4:	e8 fc 06 00 00       	call   8009f5 <vprintfmt>
+  8002f9:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  8002fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002ff:	c9                   	leave  
+  800300:	c3                   	ret    
+
+00800301 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800301:	55                   	push   %ebp
+  800302:	89 e5                	mov    %esp,%ebp
+  800304:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800307:	8d 45 0c             	lea    0xc(%ebp),%eax
+  80030a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  80030d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800310:	83 ec 08             	sub    $0x8,%esp
+  800313:	50                   	push   %eax
+  800314:	ff 75 08             	pushl  0x8(%ebp)
+  800317:	e8 bc ff ff ff       	call   8002d8 <vcprintf>
+  80031c:	83 c4 10             	add    $0x10,%esp
+  80031f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800322:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800325:	c9                   	leave  
+  800326:	c3                   	ret    
+
+00800327 <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  800327:	55                   	push   %ebp
+  800328:	89 e5                	mov    %esp,%ebp
+  80032a:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  80032d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  800334:	eb 14                	jmp    80034a <cputs+0x23>
+        cputch(c, &cnt);
+  800336:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  80033a:	83 ec 08             	sub    $0x8,%esp
+  80033d:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800340:	52                   	push   %edx
+  800341:	50                   	push   %eax
+  800342:	e8 6d ff ff ff       	call   8002b4 <cputch>
+  800347:	83 c4 10             	add    $0x10,%esp
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  80034a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80034d:	8d 50 01             	lea    0x1(%eax),%edx
+  800350:	89 55 08             	mov    %edx,0x8(%ebp)
+  800353:	0f b6 00             	movzbl (%eax),%eax
+  800356:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800359:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  80035d:	75 d7                	jne    800336 <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  80035f:	83 ec 08             	sub    $0x8,%esp
+  800362:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800365:	50                   	push   %eax
+  800366:	6a 0a                	push   $0xa
+  800368:	e8 47 ff ff ff       	call   8002b4 <cputch>
+  80036d:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  800370:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  800373:	c9                   	leave  
+  800374:	c3                   	ret    
+
+00800375 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800375:	55                   	push   %ebp
+  800376:	89 e5                	mov    %esp,%ebp
+  800378:	83 ec 18             	sub    $0x18,%esp
+    int ret = main();
+  80037b:	e8 d3 0b 00 00       	call   800f53 <main>
+  800380:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  800383:	83 ec 0c             	sub    $0xc,%esp
+  800386:	ff 75 f4             	pushl  -0xc(%ebp)
+  800389:	e8 3b fe ff ff       	call   8001c9 <exit>
+
+0080038e <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  80038e:	55                   	push   %ebp
+  80038f:	89 e5                	mov    %esp,%ebp
+  800391:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800394:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  80039b:	eb 04                	jmp    8003a1 <strlen+0x13>
+        cnt ++;
+  80039d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  8003a1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003a4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003a7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003aa:	0f b6 00             	movzbl (%eax),%eax
+  8003ad:	84 c0                	test   %al,%al
+  8003af:	75 ec                	jne    80039d <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003b4:	c9                   	leave  
+  8003b5:	c3                   	ret    
+
+008003b6 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  8003b6:	55                   	push   %ebp
+  8003b7:	89 e5                	mov    %esp,%ebp
+  8003b9:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003bc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003c3:	eb 04                	jmp    8003c9 <strnlen+0x13>
+        cnt ++;
+  8003c5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  8003c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003cc:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003cf:	73 10                	jae    8003e1 <strnlen+0x2b>
+  8003d1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003d4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003d7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003da:	0f b6 00             	movzbl (%eax),%eax
+  8003dd:	84 c0                	test   %al,%al
+  8003df:	75 e4                	jne    8003c5 <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003e4:	c9                   	leave  
+  8003e5:	c3                   	ret    
+
+008003e6 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  8003e6:	55                   	push   %ebp
+  8003e7:	89 e5                	mov    %esp,%ebp
+  8003e9:	57                   	push   %edi
+  8003ea:	56                   	push   %esi
+  8003eb:	83 ec 20             	sub    $0x20,%esp
+  8003ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003f4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8003f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  8003fa:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800400:	89 d1                	mov    %edx,%ecx
+  800402:	89 c2                	mov    %eax,%edx
+  800404:	89 ce                	mov    %ecx,%esi
+  800406:	89 d7                	mov    %edx,%edi
+  800408:	ac                   	lods   %ds:(%esi),%al
+  800409:	aa                   	stos   %al,%es:(%edi)
+  80040a:	84 c0                	test   %al,%al
+  80040c:	75 fa                	jne    800408 <strcpy+0x22>
+  80040e:	89 fa                	mov    %edi,%edx
+  800410:	89 f1                	mov    %esi,%ecx
+  800412:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800415:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800418:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  80041b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  80041e:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  80041f:	83 c4 20             	add    $0x20,%esp
+  800422:	5e                   	pop    %esi
+  800423:	5f                   	pop    %edi
+  800424:	5d                   	pop    %ebp
+  800425:	c3                   	ret    
+
+00800426 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800426:	55                   	push   %ebp
+  800427:	89 e5                	mov    %esp,%ebp
+  800429:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  80042c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80042f:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800432:	eb 21                	jmp    800455 <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800434:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800437:	0f b6 10             	movzbl (%eax),%edx
+  80043a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80043d:	88 10                	mov    %dl,(%eax)
+  80043f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800442:	0f b6 00             	movzbl (%eax),%eax
+  800445:	84 c0                	test   %al,%al
+  800447:	74 04                	je     80044d <strncpy+0x27>
+            src ++;
+  800449:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  80044d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800451:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800455:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800459:	75 d9                	jne    800434 <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  80045b:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  80045e:	c9                   	leave  
+  80045f:	c3                   	ret    
+
+00800460 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800460:	55                   	push   %ebp
+  800461:	89 e5                	mov    %esp,%ebp
+  800463:	57                   	push   %edi
+  800464:	56                   	push   %esi
+  800465:	83 ec 20             	sub    $0x20,%esp
+  800468:	8b 45 08             	mov    0x8(%ebp),%eax
+  80046b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80046e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800471:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800474:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800477:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80047a:	89 d1                	mov    %edx,%ecx
+  80047c:	89 c2                	mov    %eax,%edx
+  80047e:	89 ce                	mov    %ecx,%esi
+  800480:	89 d7                	mov    %edx,%edi
+  800482:	ac                   	lods   %ds:(%esi),%al
+  800483:	ae                   	scas   %es:(%edi),%al
+  800484:	75 08                	jne    80048e <strcmp+0x2e>
+  800486:	84 c0                	test   %al,%al
+  800488:	75 f8                	jne    800482 <strcmp+0x22>
+  80048a:	31 c0                	xor    %eax,%eax
+  80048c:	eb 04                	jmp    800492 <strcmp+0x32>
+  80048e:	19 c0                	sbb    %eax,%eax
+  800490:	0c 01                	or     $0x1,%al
+  800492:	89 fa                	mov    %edi,%edx
+  800494:	89 f1                	mov    %esi,%ecx
+  800496:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800499:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  80049c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  80049f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  8004a2:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  8004a3:	83 c4 20             	add    $0x20,%esp
+  8004a6:	5e                   	pop    %esi
+  8004a7:	5f                   	pop    %edi
+  8004a8:	5d                   	pop    %ebp
+  8004a9:	c3                   	ret    
+
+008004aa <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  8004aa:	55                   	push   %ebp
+  8004ab:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004ad:	eb 0c                	jmp    8004bb <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  8004af:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  8004b3:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8004b7:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004bb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004bf:	74 1a                	je     8004db <strncmp+0x31>
+  8004c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004c4:	0f b6 00             	movzbl (%eax),%eax
+  8004c7:	84 c0                	test   %al,%al
+  8004c9:	74 10                	je     8004db <strncmp+0x31>
+  8004cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004ce:	0f b6 10             	movzbl (%eax),%edx
+  8004d1:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004d4:	0f b6 00             	movzbl (%eax),%eax
+  8004d7:	38 c2                	cmp    %al,%dl
+  8004d9:	74 d4                	je     8004af <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004db:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004df:	74 18                	je     8004f9 <strncmp+0x4f>
+  8004e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e4:	0f b6 00             	movzbl (%eax),%eax
+  8004e7:	0f b6 d0             	movzbl %al,%edx
+  8004ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ed:	0f b6 00             	movzbl (%eax),%eax
+  8004f0:	0f b6 c0             	movzbl %al,%eax
+  8004f3:	29 c2                	sub    %eax,%edx
+  8004f5:	89 d0                	mov    %edx,%eax
+  8004f7:	eb 05                	jmp    8004fe <strncmp+0x54>
+  8004f9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8004fe:	5d                   	pop    %ebp
+  8004ff:	c3                   	ret    
+
+00800500 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800500:	55                   	push   %ebp
+  800501:	89 e5                	mov    %esp,%ebp
+  800503:	83 ec 04             	sub    $0x4,%esp
+  800506:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800509:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  80050c:	eb 14                	jmp    800522 <strchr+0x22>
+        if (*s == c) {
+  80050e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800511:	0f b6 00             	movzbl (%eax),%eax
+  800514:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800517:	75 05                	jne    80051e <strchr+0x1e>
+            return (char *)s;
+  800519:	8b 45 08             	mov    0x8(%ebp),%eax
+  80051c:	eb 13                	jmp    800531 <strchr+0x31>
+        }
+        s ++;
+  80051e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800522:	8b 45 08             	mov    0x8(%ebp),%eax
+  800525:	0f b6 00             	movzbl (%eax),%eax
+  800528:	84 c0                	test   %al,%al
+  80052a:	75 e2                	jne    80050e <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  80052c:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800531:	c9                   	leave  
+  800532:	c3                   	ret    
+
+00800533 <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800533:	55                   	push   %ebp
+  800534:	89 e5                	mov    %esp,%ebp
+  800536:	83 ec 04             	sub    $0x4,%esp
+  800539:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80053c:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  80053f:	eb 0f                	jmp    800550 <strfind+0x1d>
+        if (*s == c) {
+  800541:	8b 45 08             	mov    0x8(%ebp),%eax
+  800544:	0f b6 00             	movzbl (%eax),%eax
+  800547:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  80054a:	74 10                	je     80055c <strfind+0x29>
+            break;
+        }
+        s ++;
+  80054c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800550:	8b 45 08             	mov    0x8(%ebp),%eax
+  800553:	0f b6 00             	movzbl (%eax),%eax
+  800556:	84 c0                	test   %al,%al
+  800558:	75 e7                	jne    800541 <strfind+0xe>
+  80055a:	eb 01                	jmp    80055d <strfind+0x2a>
+        if (*s == c) {
+            break;
+  80055c:	90                   	nop
+        }
+        s ++;
+    }
+    return (char *)s;
+  80055d:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800560:	c9                   	leave  
+  800561:	c3                   	ret    
+
+00800562 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800562:	55                   	push   %ebp
+  800563:	89 e5                	mov    %esp,%ebp
+  800565:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800568:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  80056f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800576:	eb 04                	jmp    80057c <strtol+0x1a>
+        s ++;
+  800578:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80057c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80057f:	0f b6 00             	movzbl (%eax),%eax
+  800582:	3c 20                	cmp    $0x20,%al
+  800584:	74 f2                	je     800578 <strtol+0x16>
+  800586:	8b 45 08             	mov    0x8(%ebp),%eax
+  800589:	0f b6 00             	movzbl (%eax),%eax
+  80058c:	3c 09                	cmp    $0x9,%al
+  80058e:	74 e8                	je     800578 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800590:	8b 45 08             	mov    0x8(%ebp),%eax
+  800593:	0f b6 00             	movzbl (%eax),%eax
+  800596:	3c 2b                	cmp    $0x2b,%al
+  800598:	75 06                	jne    8005a0 <strtol+0x3e>
+        s ++;
+  80059a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  80059e:	eb 15                	jmp    8005b5 <strtol+0x53>
+    }
+    else if (*s == '-') {
+  8005a0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a3:	0f b6 00             	movzbl (%eax),%eax
+  8005a6:	3c 2d                	cmp    $0x2d,%al
+  8005a8:	75 0b                	jne    8005b5 <strtol+0x53>
+        s ++, neg = 1;
+  8005aa:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005ae:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  8005b5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005b9:	74 06                	je     8005c1 <strtol+0x5f>
+  8005bb:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  8005bf:	75 24                	jne    8005e5 <strtol+0x83>
+  8005c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005c4:	0f b6 00             	movzbl (%eax),%eax
+  8005c7:	3c 30                	cmp    $0x30,%al
+  8005c9:	75 1a                	jne    8005e5 <strtol+0x83>
+  8005cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ce:	83 c0 01             	add    $0x1,%eax
+  8005d1:	0f b6 00             	movzbl (%eax),%eax
+  8005d4:	3c 78                	cmp    $0x78,%al
+  8005d6:	75 0d                	jne    8005e5 <strtol+0x83>
+        s += 2, base = 16;
+  8005d8:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005dc:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005e3:	eb 2a                	jmp    80060f <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005e5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005e9:	75 17                	jne    800602 <strtol+0xa0>
+  8005eb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ee:	0f b6 00             	movzbl (%eax),%eax
+  8005f1:	3c 30                	cmp    $0x30,%al
+  8005f3:	75 0d                	jne    800602 <strtol+0xa0>
+        s ++, base = 8;
+  8005f5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005f9:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800600:	eb 0d                	jmp    80060f <strtol+0xad>
+    }
+    else if (base == 0) {
+  800602:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800606:	75 07                	jne    80060f <strtol+0xad>
+        base = 10;
+  800608:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  80060f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800612:	0f b6 00             	movzbl (%eax),%eax
+  800615:	3c 2f                	cmp    $0x2f,%al
+  800617:	7e 1b                	jle    800634 <strtol+0xd2>
+  800619:	8b 45 08             	mov    0x8(%ebp),%eax
+  80061c:	0f b6 00             	movzbl (%eax),%eax
+  80061f:	3c 39                	cmp    $0x39,%al
+  800621:	7f 11                	jg     800634 <strtol+0xd2>
+            dig = *s - '0';
+  800623:	8b 45 08             	mov    0x8(%ebp),%eax
+  800626:	0f b6 00             	movzbl (%eax),%eax
+  800629:	0f be c0             	movsbl %al,%eax
+  80062c:	83 e8 30             	sub    $0x30,%eax
+  80062f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800632:	eb 48                	jmp    80067c <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800634:	8b 45 08             	mov    0x8(%ebp),%eax
+  800637:	0f b6 00             	movzbl (%eax),%eax
+  80063a:	3c 60                	cmp    $0x60,%al
+  80063c:	7e 1b                	jle    800659 <strtol+0xf7>
+  80063e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800641:	0f b6 00             	movzbl (%eax),%eax
+  800644:	3c 7a                	cmp    $0x7a,%al
+  800646:	7f 11                	jg     800659 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800648:	8b 45 08             	mov    0x8(%ebp),%eax
+  80064b:	0f b6 00             	movzbl (%eax),%eax
+  80064e:	0f be c0             	movsbl %al,%eax
+  800651:	83 e8 57             	sub    $0x57,%eax
+  800654:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800657:	eb 23                	jmp    80067c <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800659:	8b 45 08             	mov    0x8(%ebp),%eax
+  80065c:	0f b6 00             	movzbl (%eax),%eax
+  80065f:	3c 40                	cmp    $0x40,%al
+  800661:	7e 3c                	jle    80069f <strtol+0x13d>
+  800663:	8b 45 08             	mov    0x8(%ebp),%eax
+  800666:	0f b6 00             	movzbl (%eax),%eax
+  800669:	3c 5a                	cmp    $0x5a,%al
+  80066b:	7f 32                	jg     80069f <strtol+0x13d>
+            dig = *s - 'A' + 10;
+  80066d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800670:	0f b6 00             	movzbl (%eax),%eax
+  800673:	0f be c0             	movsbl %al,%eax
+  800676:	83 e8 37             	sub    $0x37,%eax
+  800679:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  80067c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80067f:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800682:	7d 1a                	jge    80069e <strtol+0x13c>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  800684:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800688:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80068b:	0f af 45 10          	imul   0x10(%ebp),%eax
+  80068f:	89 c2                	mov    %eax,%edx
+  800691:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800694:	01 d0                	add    %edx,%eax
+  800696:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800699:	e9 71 ff ff ff       	jmp    80060f <strtol+0xad>
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+            break;
+  80069e:	90                   	nop
+        }
+        s ++, val = (val * base) + dig;
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  80069f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8006a3:	74 08                	je     8006ad <strtol+0x14b>
+        *endptr = (char *) s;
+  8006a5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006a8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006ab:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  8006ad:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  8006b1:	74 07                	je     8006ba <strtol+0x158>
+  8006b3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006b6:	f7 d8                	neg    %eax
+  8006b8:	eb 03                	jmp    8006bd <strtol+0x15b>
+  8006ba:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  8006bd:	c9                   	leave  
+  8006be:	c3                   	ret    
+
+008006bf <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  8006bf:	55                   	push   %ebp
+  8006c0:	89 e5                	mov    %esp,%ebp
+  8006c2:	57                   	push   %edi
+  8006c3:	83 ec 24             	sub    $0x24,%esp
+  8006c6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006c9:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006cc:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006d0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006d3:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006d6:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006d9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006df:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006e2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006e6:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006e9:	89 d7                	mov    %edx,%edi
+  8006eb:	f3 aa                	rep stos %al,%es:(%edi)
+  8006ed:	89 fa                	mov    %edi,%edx
+  8006ef:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8006f2:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  8006f5:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006f8:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  8006f9:	83 c4 24             	add    $0x24,%esp
+  8006fc:	5f                   	pop    %edi
+  8006fd:	5d                   	pop    %ebp
+  8006fe:	c3                   	ret    
+
+008006ff <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  8006ff:	55                   	push   %ebp
+  800700:	89 e5                	mov    %esp,%ebp
+  800702:	57                   	push   %edi
+  800703:	56                   	push   %esi
+  800704:	53                   	push   %ebx
+  800705:	83 ec 30             	sub    $0x30,%esp
+  800708:	8b 45 08             	mov    0x8(%ebp),%eax
+  80070b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80070e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800711:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800714:	8b 45 10             	mov    0x10(%ebp),%eax
+  800717:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  80071a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80071d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800720:	73 42                	jae    800764 <memmove+0x65>
+  800722:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800725:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800728:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80072b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80072e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800731:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800734:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800737:	c1 e8 02             	shr    $0x2,%eax
+  80073a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  80073c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  80073f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800742:	89 d7                	mov    %edx,%edi
+  800744:	89 c6                	mov    %eax,%esi
+  800746:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800748:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  80074b:	83 e1 03             	and    $0x3,%ecx
+  80074e:	74 02                	je     800752 <memmove+0x53>
+  800750:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800752:	89 f0                	mov    %esi,%eax
+  800754:	89 fa                	mov    %edi,%edx
+  800756:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800759:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  80075c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  80075f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  800762:	eb 36                	jmp    80079a <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800764:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800767:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80076a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80076d:	01 c2                	add    %eax,%edx
+  80076f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800772:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800775:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800778:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  80077b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80077e:	89 c1                	mov    %eax,%ecx
+  800780:	89 d8                	mov    %ebx,%eax
+  800782:	89 d6                	mov    %edx,%esi
+  800784:	89 c7                	mov    %eax,%edi
+  800786:	fd                   	std    
+  800787:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800789:	fc                   	cld    
+  80078a:	89 f8                	mov    %edi,%eax
+  80078c:	89 f2                	mov    %esi,%edx
+  80078e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800791:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800794:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800797:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  80079a:	83 c4 30             	add    $0x30,%esp
+  80079d:	5b                   	pop    %ebx
+  80079e:	5e                   	pop    %esi
+  80079f:	5f                   	pop    %edi
+  8007a0:	5d                   	pop    %ebp
+  8007a1:	c3                   	ret    
+
+008007a2 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  8007a2:	55                   	push   %ebp
+  8007a3:	89 e5                	mov    %esp,%ebp
+  8007a5:	57                   	push   %edi
+  8007a6:	56                   	push   %esi
+  8007a7:	83 ec 20             	sub    $0x20,%esp
+  8007aa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8007b0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007b6:	8b 45 10             	mov    0x10(%ebp),%eax
+  8007b9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  8007bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8007bf:	c1 e8 02             	shr    $0x2,%eax
+  8007c2:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  8007c4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007ca:	89 d7                	mov    %edx,%edi
+  8007cc:	89 c6                	mov    %eax,%esi
+  8007ce:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007d0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007d3:	83 e1 03             	and    $0x3,%ecx
+  8007d6:	74 02                	je     8007da <memcpy+0x38>
+  8007d8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007da:	89 f0                	mov    %esi,%eax
+  8007dc:	89 fa                	mov    %edi,%edx
+  8007de:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007e1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007e4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  8007e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007ea:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007eb:	83 c4 20             	add    $0x20,%esp
+  8007ee:	5e                   	pop    %esi
+  8007ef:	5f                   	pop    %edi
+  8007f0:	5d                   	pop    %ebp
+  8007f1:	c3                   	ret    
+
+008007f2 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  8007f2:	55                   	push   %ebp
+  8007f3:	89 e5                	mov    %esp,%ebp
+  8007f5:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  8007f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007fb:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  8007fe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800801:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800804:	eb 30                	jmp    800836 <memcmp+0x44>
+        if (*s1 != *s2) {
+  800806:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800809:	0f b6 10             	movzbl (%eax),%edx
+  80080c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80080f:	0f b6 00             	movzbl (%eax),%eax
+  800812:	38 c2                	cmp    %al,%dl
+  800814:	74 18                	je     80082e <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800816:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800819:	0f b6 00             	movzbl (%eax),%eax
+  80081c:	0f b6 d0             	movzbl %al,%edx
+  80081f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800822:	0f b6 00             	movzbl (%eax),%eax
+  800825:	0f b6 c0             	movzbl %al,%eax
+  800828:	29 c2                	sub    %eax,%edx
+  80082a:	89 d0                	mov    %edx,%eax
+  80082c:	eb 1a                	jmp    800848 <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  80082e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800832:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800836:	8b 45 10             	mov    0x10(%ebp),%eax
+  800839:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80083c:	89 55 10             	mov    %edx,0x10(%ebp)
+  80083f:	85 c0                	test   %eax,%eax
+  800841:	75 c3                	jne    800806 <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800843:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800848:	c9                   	leave  
+  800849:	c3                   	ret    
+
+0080084a <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  80084a:	55                   	push   %ebp
+  80084b:	89 e5                	mov    %esp,%ebp
+  80084d:	83 ec 38             	sub    $0x38,%esp
+  800850:	8b 45 10             	mov    0x10(%ebp),%eax
+  800853:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800856:	8b 45 14             	mov    0x14(%ebp),%eax
+  800859:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80085c:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  80085f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800862:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800865:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800868:	8b 45 18             	mov    0x18(%ebp),%eax
+  80086b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  80086e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800871:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800874:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800877:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  80087a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80087d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800880:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800884:	74 1c                	je     8008a2 <printnum+0x58>
+  800886:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800889:	ba 00 00 00 00       	mov    $0x0,%edx
+  80088e:	f7 75 e4             	divl   -0x1c(%ebp)
+  800891:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800894:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800897:	ba 00 00 00 00       	mov    $0x0,%edx
+  80089c:	f7 75 e4             	divl   -0x1c(%ebp)
+  80089f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008a2:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008a8:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008ab:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8008ae:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8008b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008b4:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8008b7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8008ba:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8008bd:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8008c0:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8008c3:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008c6:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008cb:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008ce:	77 41                	ja     800911 <printnum+0xc7>
+  8008d0:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008d3:	72 05                	jb     8008da <printnum+0x90>
+  8008d5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  8008d8:	77 37                	ja     800911 <printnum+0xc7>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008da:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008dd:	83 e8 01             	sub    $0x1,%eax
+  8008e0:	83 ec 04             	sub    $0x4,%esp
+  8008e3:	ff 75 20             	pushl  0x20(%ebp)
+  8008e6:	50                   	push   %eax
+  8008e7:	ff 75 18             	pushl  0x18(%ebp)
+  8008ea:	ff 75 ec             	pushl  -0x14(%ebp)
+  8008ed:	ff 75 e8             	pushl  -0x18(%ebp)
+  8008f0:	ff 75 0c             	pushl  0xc(%ebp)
+  8008f3:	ff 75 08             	pushl  0x8(%ebp)
+  8008f6:	e8 4f ff ff ff       	call   80084a <printnum>
+  8008fb:	83 c4 20             	add    $0x20,%esp
+  8008fe:	eb 1b                	jmp    80091b <printnum+0xd1>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800900:	83 ec 08             	sub    $0x8,%esp
+  800903:	ff 75 0c             	pushl  0xc(%ebp)
+  800906:	ff 75 20             	pushl  0x20(%ebp)
+  800909:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090c:	ff d0                	call   *%eax
+  80090e:	83 c4 10             	add    $0x10,%esp
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  800911:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  800915:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  800919:	7f e5                	jg     800900 <printnum+0xb6>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  80091b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  80091e:	05 04 11 80 00       	add    $0x801104,%eax
+  800923:	0f b6 00             	movzbl (%eax),%eax
+  800926:	0f be c0             	movsbl %al,%eax
+  800929:	83 ec 08             	sub    $0x8,%esp
+  80092c:	ff 75 0c             	pushl  0xc(%ebp)
+  80092f:	50                   	push   %eax
+  800930:	8b 45 08             	mov    0x8(%ebp),%eax
+  800933:	ff d0                	call   *%eax
+  800935:	83 c4 10             	add    $0x10,%esp
+}
+  800938:	90                   	nop
+  800939:	c9                   	leave  
+  80093a:	c3                   	ret    
+
+0080093b <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  80093b:	55                   	push   %ebp
+  80093c:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  80093e:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800942:	7e 14                	jle    800958 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  800944:	8b 45 08             	mov    0x8(%ebp),%eax
+  800947:	8b 00                	mov    (%eax),%eax
+  800949:	8d 48 08             	lea    0x8(%eax),%ecx
+  80094c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80094f:	89 0a                	mov    %ecx,(%edx)
+  800951:	8b 50 04             	mov    0x4(%eax),%edx
+  800954:	8b 00                	mov    (%eax),%eax
+  800956:	eb 30                	jmp    800988 <getuint+0x4d>
+    }
+    else if (lflag) {
+  800958:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80095c:	74 16                	je     800974 <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  80095e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800961:	8b 00                	mov    (%eax),%eax
+  800963:	8d 48 04             	lea    0x4(%eax),%ecx
+  800966:	8b 55 08             	mov    0x8(%ebp),%edx
+  800969:	89 0a                	mov    %ecx,(%edx)
+  80096b:	8b 00                	mov    (%eax),%eax
+  80096d:	ba 00 00 00 00       	mov    $0x0,%edx
+  800972:	eb 14                	jmp    800988 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  800974:	8b 45 08             	mov    0x8(%ebp),%eax
+  800977:	8b 00                	mov    (%eax),%eax
+  800979:	8d 48 04             	lea    0x4(%eax),%ecx
+  80097c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80097f:	89 0a                	mov    %ecx,(%edx)
+  800981:	8b 00                	mov    (%eax),%eax
+  800983:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800988:	5d                   	pop    %ebp
+  800989:	c3                   	ret    
+
+0080098a <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  80098a:	55                   	push   %ebp
+  80098b:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  80098d:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800991:	7e 14                	jle    8009a7 <getint+0x1d>
+        return va_arg(*ap, long long);
+  800993:	8b 45 08             	mov    0x8(%ebp),%eax
+  800996:	8b 00                	mov    (%eax),%eax
+  800998:	8d 48 08             	lea    0x8(%eax),%ecx
+  80099b:	8b 55 08             	mov    0x8(%ebp),%edx
+  80099e:	89 0a                	mov    %ecx,(%edx)
+  8009a0:	8b 50 04             	mov    0x4(%eax),%edx
+  8009a3:	8b 00                	mov    (%eax),%eax
+  8009a5:	eb 28                	jmp    8009cf <getint+0x45>
+    }
+    else if (lflag) {
+  8009a7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8009ab:	74 12                	je     8009bf <getint+0x35>
+        return va_arg(*ap, long);
+  8009ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b0:	8b 00                	mov    (%eax),%eax
+  8009b2:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009b5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009b8:	89 0a                	mov    %ecx,(%edx)
+  8009ba:	8b 00                	mov    (%eax),%eax
+  8009bc:	99                   	cltd   
+  8009bd:	eb 10                	jmp    8009cf <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  8009bf:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009c2:	8b 00                	mov    (%eax),%eax
+  8009c4:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009c7:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009ca:	89 0a                	mov    %ecx,(%edx)
+  8009cc:	8b 00                	mov    (%eax),%eax
+  8009ce:	99                   	cltd   
+    }
+}
+  8009cf:	5d                   	pop    %ebp
+  8009d0:	c3                   	ret    
+
+008009d1 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009d1:	55                   	push   %ebp
+  8009d2:	89 e5                	mov    %esp,%ebp
+  8009d4:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009d7:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009da:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8009e0:	50                   	push   %eax
+  8009e1:	ff 75 10             	pushl  0x10(%ebp)
+  8009e4:	ff 75 0c             	pushl  0xc(%ebp)
+  8009e7:	ff 75 08             	pushl  0x8(%ebp)
+  8009ea:	e8 06 00 00 00       	call   8009f5 <vprintfmt>
+  8009ef:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8009f2:	90                   	nop
+  8009f3:	c9                   	leave  
+  8009f4:	c3                   	ret    
+
+008009f5 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8009f5:	55                   	push   %ebp
+  8009f6:	89 e5                	mov    %esp,%ebp
+  8009f8:	56                   	push   %esi
+  8009f9:	53                   	push   %ebx
+  8009fa:	83 ec 20             	sub    $0x20,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009fd:	eb 17                	jmp    800a16 <vprintfmt+0x21>
+            if (ch == '\0') {
+  8009ff:	85 db                	test   %ebx,%ebx
+  800a01:	0f 84 8e 03 00 00    	je     800d95 <vprintfmt+0x3a0>
+                return;
+            }
+            putch(ch, putdat);
+  800a07:	83 ec 08             	sub    $0x8,%esp
+  800a0a:	ff 75 0c             	pushl  0xc(%ebp)
+  800a0d:	53                   	push   %ebx
+  800a0e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a11:	ff d0                	call   *%eax
+  800a13:	83 c4 10             	add    $0x10,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a16:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a19:	8d 50 01             	lea    0x1(%eax),%edx
+  800a1c:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a1f:	0f b6 00             	movzbl (%eax),%eax
+  800a22:	0f b6 d8             	movzbl %al,%ebx
+  800a25:	83 fb 25             	cmp    $0x25,%ebx
+  800a28:	75 d5                	jne    8009ff <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a2a:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a2e:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a38:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a3b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a42:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a45:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a48:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a4b:	8d 50 01             	lea    0x1(%eax),%edx
+  800a4e:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a51:	0f b6 00             	movzbl (%eax),%eax
+  800a54:	0f b6 d8             	movzbl %al,%ebx
+  800a57:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a5a:	83 f8 55             	cmp    $0x55,%eax
+  800a5d:	0f 87 05 03 00 00    	ja     800d68 <vprintfmt+0x373>
+  800a63:	8b 04 85 28 11 80 00 	mov    0x801128(,%eax,4),%eax
+  800a6a:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a6c:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a70:	eb d6                	jmp    800a48 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a72:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800a76:	eb d0                	jmp    800a48 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a78:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800a7f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a82:	89 d0                	mov    %edx,%eax
+  800a84:	c1 e0 02             	shl    $0x2,%eax
+  800a87:	01 d0                	add    %edx,%eax
+  800a89:	01 c0                	add    %eax,%eax
+  800a8b:	01 d8                	add    %ebx,%eax
+  800a8d:	83 e8 30             	sub    $0x30,%eax
+  800a90:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800a93:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a96:	0f b6 00             	movzbl (%eax),%eax
+  800a99:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800a9c:	83 fb 2f             	cmp    $0x2f,%ebx
+  800a9f:	7e 39                	jle    800ada <vprintfmt+0xe5>
+  800aa1:	83 fb 39             	cmp    $0x39,%ebx
+  800aa4:	7f 34                	jg     800ada <vprintfmt+0xe5>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800aa6:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  800aaa:	eb d3                	jmp    800a7f <vprintfmt+0x8a>
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800aac:	8b 45 14             	mov    0x14(%ebp),%eax
+  800aaf:	8d 50 04             	lea    0x4(%eax),%edx
+  800ab2:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ab5:	8b 00                	mov    (%eax),%eax
+  800ab7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800aba:	eb 1f                	jmp    800adb <vprintfmt+0xe6>
+
+        case '.':
+            if (width < 0)
+  800abc:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ac0:	79 86                	jns    800a48 <vprintfmt+0x53>
+                width = 0;
+  800ac2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800ac9:	e9 7a ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800ace:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800ad5:	e9 6e ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+            goto process_precision;
+  800ada:	90                   	nop
+        case '#':
+            altflag = 1;
+            goto reswitch;
+
+        process_precision:
+            if (width < 0)
+  800adb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800adf:	0f 89 63 ff ff ff    	jns    800a48 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800ae5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ae8:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800aeb:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800af2:	e9 51 ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800af7:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800afb:	e9 48 ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800b00:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b03:	8d 50 04             	lea    0x4(%eax),%edx
+  800b06:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b09:	8b 00                	mov    (%eax),%eax
+  800b0b:	83 ec 08             	sub    $0x8,%esp
+  800b0e:	ff 75 0c             	pushl  0xc(%ebp)
+  800b11:	50                   	push   %eax
+  800b12:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b15:	ff d0                	call   *%eax
+  800b17:	83 c4 10             	add    $0x10,%esp
+            break;
+  800b1a:	e9 71 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800b1f:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b22:	8d 50 04             	lea    0x4(%eax),%edx
+  800b25:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b28:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b2a:	85 db                	test   %ebx,%ebx
+  800b2c:	79 02                	jns    800b30 <vprintfmt+0x13b>
+                err = -err;
+  800b2e:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b30:	83 fb 18             	cmp    $0x18,%ebx
+  800b33:	7f 0b                	jg     800b40 <vprintfmt+0x14b>
+  800b35:	8b 34 9d a0 10 80 00 	mov    0x8010a0(,%ebx,4),%esi
+  800b3c:	85 f6                	test   %esi,%esi
+  800b3e:	75 19                	jne    800b59 <vprintfmt+0x164>
+                printfmt(putch, putdat, "error %d", err);
+  800b40:	53                   	push   %ebx
+  800b41:	68 15 11 80 00       	push   $0x801115
+  800b46:	ff 75 0c             	pushl  0xc(%ebp)
+  800b49:	ff 75 08             	pushl  0x8(%ebp)
+  800b4c:	e8 80 fe ff ff       	call   8009d1 <printfmt>
+  800b51:	83 c4 10             	add    $0x10,%esp
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b54:	e9 37 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  800b59:	56                   	push   %esi
+  800b5a:	68 1e 11 80 00       	push   $0x80111e
+  800b5f:	ff 75 0c             	pushl  0xc(%ebp)
+  800b62:	ff 75 08             	pushl  0x8(%ebp)
+  800b65:	e8 67 fe ff ff       	call   8009d1 <printfmt>
+  800b6a:	83 c4 10             	add    $0x10,%esp
+            }
+            break;
+  800b6d:	e9 1e 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800b72:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b75:	8d 50 04             	lea    0x4(%eax),%edx
+  800b78:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b7b:	8b 30                	mov    (%eax),%esi
+  800b7d:	85 f6                	test   %esi,%esi
+  800b7f:	75 05                	jne    800b86 <vprintfmt+0x191>
+                p = "(null)";
+  800b81:	be 21 11 80 00       	mov    $0x801121,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800b86:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b8a:	7e 76                	jle    800c02 <vprintfmt+0x20d>
+  800b8c:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800b90:	74 70                	je     800c02 <vprintfmt+0x20d>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b92:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b95:	83 ec 08             	sub    $0x8,%esp
+  800b98:	50                   	push   %eax
+  800b99:	56                   	push   %esi
+  800b9a:	e8 17 f8 ff ff       	call   8003b6 <strnlen>
+  800b9f:	83 c4 10             	add    $0x10,%esp
+  800ba2:	89 c2                	mov    %eax,%edx
+  800ba4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ba7:	29 d0                	sub    %edx,%eax
+  800ba9:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800bac:	eb 17                	jmp    800bc5 <vprintfmt+0x1d0>
+                    putch(padc, putdat);
+  800bae:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800bb2:	83 ec 08             	sub    $0x8,%esp
+  800bb5:	ff 75 0c             	pushl  0xc(%ebp)
+  800bb8:	50                   	push   %eax
+  800bb9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bbc:	ff d0                	call   *%eax
+  800bbe:	83 c4 10             	add    $0x10,%esp
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bc1:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800bc5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800bc9:	7f e3                	jg     800bae <vprintfmt+0x1b9>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bcb:	eb 35                	jmp    800c02 <vprintfmt+0x20d>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800bcd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800bd1:	74 1c                	je     800bef <vprintfmt+0x1fa>
+  800bd3:	83 fb 1f             	cmp    $0x1f,%ebx
+  800bd6:	7e 05                	jle    800bdd <vprintfmt+0x1e8>
+  800bd8:	83 fb 7e             	cmp    $0x7e,%ebx
+  800bdb:	7e 12                	jle    800bef <vprintfmt+0x1fa>
+                    putch('?', putdat);
+  800bdd:	83 ec 08             	sub    $0x8,%esp
+  800be0:	ff 75 0c             	pushl  0xc(%ebp)
+  800be3:	6a 3f                	push   $0x3f
+  800be5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800be8:	ff d0                	call   *%eax
+  800bea:	83 c4 10             	add    $0x10,%esp
+  800bed:	eb 0f                	jmp    800bfe <vprintfmt+0x209>
+                }
+                else {
+                    putch(ch, putdat);
+  800bef:	83 ec 08             	sub    $0x8,%esp
+  800bf2:	ff 75 0c             	pushl  0xc(%ebp)
+  800bf5:	53                   	push   %ebx
+  800bf6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bf9:	ff d0                	call   *%eax
+  800bfb:	83 c4 10             	add    $0x10,%esp
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bfe:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c02:	89 f0                	mov    %esi,%eax
+  800c04:	8d 70 01             	lea    0x1(%eax),%esi
+  800c07:	0f b6 00             	movzbl (%eax),%eax
+  800c0a:	0f be d8             	movsbl %al,%ebx
+  800c0d:	85 db                	test   %ebx,%ebx
+  800c0f:	74 26                	je     800c37 <vprintfmt+0x242>
+  800c11:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c15:	78 b6                	js     800bcd <vprintfmt+0x1d8>
+  800c17:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  800c1b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c1f:	79 ac                	jns    800bcd <vprintfmt+0x1d8>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c21:	eb 14                	jmp    800c37 <vprintfmt+0x242>
+                putch(' ', putdat);
+  800c23:	83 ec 08             	sub    $0x8,%esp
+  800c26:	ff 75 0c             	pushl  0xc(%ebp)
+  800c29:	6a 20                	push   $0x20
+  800c2b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2e:	ff d0                	call   *%eax
+  800c30:	83 c4 10             	add    $0x10,%esp
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c33:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c37:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c3b:	7f e6                	jg     800c23 <vprintfmt+0x22e>
+                putch(' ', putdat);
+            }
+            break;
+  800c3d:	e9 4e 01 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c42:	83 ec 08             	sub    $0x8,%esp
+  800c45:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c48:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c4b:	50                   	push   %eax
+  800c4c:	e8 39 fd ff ff       	call   80098a <getint>
+  800c51:	83 c4 10             	add    $0x10,%esp
+  800c54:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c57:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c5d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c60:	85 d2                	test   %edx,%edx
+  800c62:	79 23                	jns    800c87 <vprintfmt+0x292>
+                putch('-', putdat);
+  800c64:	83 ec 08             	sub    $0x8,%esp
+  800c67:	ff 75 0c             	pushl  0xc(%ebp)
+  800c6a:	6a 2d                	push   $0x2d
+  800c6c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c6f:	ff d0                	call   *%eax
+  800c71:	83 c4 10             	add    $0x10,%esp
+                num = -(long long)num;
+  800c74:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c77:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c7a:	f7 d8                	neg    %eax
+  800c7c:	83 d2 00             	adc    $0x0,%edx
+  800c7f:	f7 da                	neg    %edx
+  800c81:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c84:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800c87:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c8e:	e9 9f 00 00 00       	jmp    800d32 <vprintfmt+0x33d>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800c93:	83 ec 08             	sub    $0x8,%esp
+  800c96:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c99:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c9c:	50                   	push   %eax
+  800c9d:	e8 99 fc ff ff       	call   80093b <getuint>
+  800ca2:	83 c4 10             	add    $0x10,%esp
+  800ca5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ca8:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800cab:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cb2:	eb 7e                	jmp    800d32 <vprintfmt+0x33d>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800cb4:	83 ec 08             	sub    $0x8,%esp
+  800cb7:	ff 75 e0             	pushl  -0x20(%ebp)
+  800cba:	8d 45 14             	lea    0x14(%ebp),%eax
+  800cbd:	50                   	push   %eax
+  800cbe:	e8 78 fc ff ff       	call   80093b <getuint>
+  800cc3:	83 c4 10             	add    $0x10,%esp
+  800cc6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cc9:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800ccc:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800cd3:	eb 5d                	jmp    800d32 <vprintfmt+0x33d>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800cd5:	83 ec 08             	sub    $0x8,%esp
+  800cd8:	ff 75 0c             	pushl  0xc(%ebp)
+  800cdb:	6a 30                	push   $0x30
+  800cdd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ce0:	ff d0                	call   *%eax
+  800ce2:	83 c4 10             	add    $0x10,%esp
+            putch('x', putdat);
+  800ce5:	83 ec 08             	sub    $0x8,%esp
+  800ce8:	ff 75 0c             	pushl  0xc(%ebp)
+  800ceb:	6a 78                	push   $0x78
+  800ced:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cf0:	ff d0                	call   *%eax
+  800cf2:	83 c4 10             	add    $0x10,%esp
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800cf5:	8b 45 14             	mov    0x14(%ebp),%eax
+  800cf8:	8d 50 04             	lea    0x4(%eax),%edx
+  800cfb:	89 55 14             	mov    %edx,0x14(%ebp)
+  800cfe:	8b 00                	mov    (%eax),%eax
+  800d00:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d03:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800d0a:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800d11:	eb 1f                	jmp    800d32 <vprintfmt+0x33d>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800d13:	83 ec 08             	sub    $0x8,%esp
+  800d16:	ff 75 e0             	pushl  -0x20(%ebp)
+  800d19:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d1c:	50                   	push   %eax
+  800d1d:	e8 19 fc ff ff       	call   80093b <getuint>
+  800d22:	83 c4 10             	add    $0x10,%esp
+  800d25:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d28:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d2b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d32:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d36:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d39:	83 ec 04             	sub    $0x4,%esp
+  800d3c:	52                   	push   %edx
+  800d3d:	ff 75 e8             	pushl  -0x18(%ebp)
+  800d40:	50                   	push   %eax
+  800d41:	ff 75 f4             	pushl  -0xc(%ebp)
+  800d44:	ff 75 f0             	pushl  -0x10(%ebp)
+  800d47:	ff 75 0c             	pushl  0xc(%ebp)
+  800d4a:	ff 75 08             	pushl  0x8(%ebp)
+  800d4d:	e8 f8 fa ff ff       	call   80084a <printnum>
+  800d52:	83 c4 20             	add    $0x20,%esp
+            break;
+  800d55:	eb 39                	jmp    800d90 <vprintfmt+0x39b>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800d57:	83 ec 08             	sub    $0x8,%esp
+  800d5a:	ff 75 0c             	pushl  0xc(%ebp)
+  800d5d:	53                   	push   %ebx
+  800d5e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d61:	ff d0                	call   *%eax
+  800d63:	83 c4 10             	add    $0x10,%esp
+            break;
+  800d66:	eb 28                	jmp    800d90 <vprintfmt+0x39b>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800d68:	83 ec 08             	sub    $0x8,%esp
+  800d6b:	ff 75 0c             	pushl  0xc(%ebp)
+  800d6e:	6a 25                	push   $0x25
+  800d70:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d73:	ff d0                	call   *%eax
+  800d75:	83 c4 10             	add    $0x10,%esp
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800d78:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d7c:	eb 04                	jmp    800d82 <vprintfmt+0x38d>
+  800d7e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d82:	8b 45 10             	mov    0x10(%ebp),%eax
+  800d85:	83 e8 01             	sub    $0x1,%eax
+  800d88:	0f b6 00             	movzbl (%eax),%eax
+  800d8b:	3c 25                	cmp    $0x25,%al
+  800d8d:	75 ef                	jne    800d7e <vprintfmt+0x389>
+                /* do nothing */;
+            break;
+  800d8f:	90                   	nop
+        }
+    }
+  800d90:	e9 68 fc ff ff       	jmp    8009fd <vprintfmt+0x8>
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+            if (ch == '\0') {
+                return;
+  800d95:	90                   	nop
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  800d96:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  800d99:	5b                   	pop    %ebx
+  800d9a:	5e                   	pop    %esi
+  800d9b:	5d                   	pop    %ebp
+  800d9c:	c3                   	ret    
+
+00800d9d <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800d9d:	55                   	push   %ebp
+  800d9e:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800da0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800da3:	8b 40 08             	mov    0x8(%eax),%eax
+  800da6:	8d 50 01             	lea    0x1(%eax),%edx
+  800da9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dac:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800daf:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db2:	8b 10                	mov    (%eax),%edx
+  800db4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db7:	8b 40 04             	mov    0x4(%eax),%eax
+  800dba:	39 c2                	cmp    %eax,%edx
+  800dbc:	73 12                	jae    800dd0 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800dbe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dc1:	8b 00                	mov    (%eax),%eax
+  800dc3:	8d 48 01             	lea    0x1(%eax),%ecx
+  800dc6:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800dc9:	89 0a                	mov    %ecx,(%edx)
+  800dcb:	8b 55 08             	mov    0x8(%ebp),%edx
+  800dce:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800dd0:	90                   	nop
+  800dd1:	5d                   	pop    %ebp
+  800dd2:	c3                   	ret    
+
+00800dd3 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800dd3:	55                   	push   %ebp
+  800dd4:	89 e5                	mov    %esp,%ebp
+  800dd6:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800dd9:	8d 45 14             	lea    0x14(%ebp),%eax
+  800ddc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800ddf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800de2:	50                   	push   %eax
+  800de3:	ff 75 10             	pushl  0x10(%ebp)
+  800de6:	ff 75 0c             	pushl  0xc(%ebp)
+  800de9:	ff 75 08             	pushl  0x8(%ebp)
+  800dec:	e8 0b 00 00 00       	call   800dfc <vsnprintf>
+  800df1:	83 c4 10             	add    $0x10,%esp
+  800df4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800df7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800dfa:	c9                   	leave  
+  800dfb:	c3                   	ret    
+
+00800dfc <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800dfc:	55                   	push   %ebp
+  800dfd:	89 e5                	mov    %esp,%ebp
+  800dff:	83 ec 18             	sub    $0x18,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800e02:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e05:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e08:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e0b:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800e0e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e11:	01 d0                	add    %edx,%eax
+  800e13:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e16:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800e1d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800e21:	74 0a                	je     800e2d <vsnprintf+0x31>
+  800e23:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800e26:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e29:	39 c2                	cmp    %eax,%edx
+  800e2b:	76 07                	jbe    800e34 <vsnprintf+0x38>
+        return -E_INVAL;
+  800e2d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e32:	eb 20                	jmp    800e54 <vsnprintf+0x58>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e34:	ff 75 14             	pushl  0x14(%ebp)
+  800e37:	ff 75 10             	pushl  0x10(%ebp)
+  800e3a:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800e3d:	50                   	push   %eax
+  800e3e:	68 9d 0d 80 00       	push   $0x800d9d
+  800e43:	e8 ad fb ff ff       	call   8009f5 <vprintfmt>
+  800e48:	83 c4 10             	add    $0x10,%esp
+    // null terminate the buffer
+    *b.buf = '\0';
+  800e4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e4e:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800e51:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e54:	c9                   	leave  
+  800e55:	c3                   	ret    
+
+00800e56 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800e56:	55                   	push   %ebp
+  800e57:	89 e5                	mov    %esp,%ebp
+  800e59:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800e5c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e5f:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800e65:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800e68:	b8 20 00 00 00       	mov    $0x20,%eax
+  800e6d:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800e70:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800e73:	89 c1                	mov    %eax,%ecx
+  800e75:	d3 ea                	shr    %cl,%edx
+  800e77:	89 d0                	mov    %edx,%eax
+}
+  800e79:	c9                   	leave  
+  800e7a:	c3                   	ret    
+
+00800e7b <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800e7b:	55                   	push   %ebp
+  800e7c:	89 e5                	mov    %esp,%ebp
+  800e7e:	57                   	push   %edi
+  800e7f:	56                   	push   %esi
+  800e80:	53                   	push   %ebx
+  800e81:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800e84:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e89:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800e8f:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800e95:	6b f0 05             	imul   $0x5,%eax,%esi
+  800e98:	01 fe                	add    %edi,%esi
+  800e9a:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800e9f:	f7 e7                	mul    %edi
+  800ea1:	01 d6                	add    %edx,%esi
+  800ea3:	89 f2                	mov    %esi,%edx
+  800ea5:	83 c0 0b             	add    $0xb,%eax
+  800ea8:	83 d2 00             	adc    $0x0,%edx
+  800eab:	89 c7                	mov    %eax,%edi
+  800ead:	83 e7 ff             	and    $0xffffffff,%edi
+  800eb0:	89 f9                	mov    %edi,%ecx
+  800eb2:	0f b7 da             	movzwl %dx,%ebx
+  800eb5:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800ebb:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800ec1:	a1 00 20 80 00       	mov    0x802000,%eax
+  800ec6:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ecc:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ed0:	c1 ea 0c             	shr    $0xc,%edx
+  800ed3:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ed6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800ed9:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ee0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ee3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ee6:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ee9:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800eec:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eef:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ef2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ef6:	74 1c                	je     800f14 <rand+0x99>
+  800ef8:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800efb:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f00:	f7 75 dc             	divl   -0x24(%ebp)
+  800f03:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800f06:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f09:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f0e:	f7 75 dc             	divl   -0x24(%ebp)
+  800f11:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800f14:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f17:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800f1a:	f7 75 dc             	divl   -0x24(%ebp)
+  800f1d:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f20:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f23:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f26:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800f29:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f2c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f2f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800f32:	83 c4 24             	add    $0x24,%esp
+  800f35:	5b                   	pop    %ebx
+  800f36:	5e                   	pop    %esi
+  800f37:	5f                   	pop    %edi
+  800f38:	5d                   	pop    %ebp
+  800f39:	c3                   	ret    
+
+00800f3a <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800f3a:	55                   	push   %ebp
+  800f3b:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800f3d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f40:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f45:	a3 00 20 80 00       	mov    %eax,0x802000
+  800f4a:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800f50:	90                   	nop
+  800f51:	5d                   	pop    %ebp
+  800f52:	c3                   	ret    
+
+00800f53 <main>:
+#include <ulib.h>
+
+int zero;
+
+int
+main(void) {
+  800f53:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  800f57:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f5a:	ff 71 fc             	pushl  -0x4(%ecx)
+  800f5d:	55                   	push   %ebp
+  800f5e:	89 e5                	mov    %esp,%ebp
+  800f60:	51                   	push   %ecx
+  800f61:	83 ec 04             	sub    $0x4,%esp
+    cprintf("value is %d.\n", 1 / zero);
+  800f64:	8b 0d 08 20 80 00    	mov    0x802008,%ecx
+  800f6a:	b8 01 00 00 00       	mov    $0x1,%eax
+  800f6f:	99                   	cltd   
+  800f70:	f7 f9                	idiv   %ecx
+  800f72:	83 ec 08             	sub    $0x8,%esp
+  800f75:	50                   	push   %eax
+  800f76:	68 80 12 80 00       	push   $0x801280
+  800f7b:	e8 81 f3 ff ff       	call   800301 <cprintf>
+  800f80:	83 c4 10             	add    $0x10,%esp
+    panic("FAIL: T.T\n");
+  800f83:	83 ec 04             	sub    $0x4,%esp
+  800f86:	68 8e 12 80 00       	push   $0x80128e
+  800f8b:	6a 09                	push   $0x9
+  800f8d:	68 99 12 80 00       	push   $0x801299
+  800f92:	e8 89 f0 ff ff       	call   800020 <__panic>
diff -r -u -P lab7_original/obj/user/divzero.d lab7/obj/user/divzero.d
--- lab7_original/obj/user/divzero.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/divzero.d	2016-05-06 21:59:27.566121534 +0800
@@ -0,0 +1,2 @@
+obj/user/divzero.o obj/user/divzero.d: user/divzero.c libs/stdio.h \
+ libs/defs.h libs/stdarg.h user/libs/ulib.h
Binary files lab7_original/obj/user/divzero.o and lab7/obj/user/divzero.o differ
diff -r -u -P lab7_original/obj/user/divzero.sym lab7/obj/user/divzero.sym
--- lab7_original/obj/user/divzero.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/divzero.sym	2016-05-06 21:59:28.630160314 +0800
@@ -0,0 +1,80 @@
+00800020 .text
+00800fa0 .rodata
+00802000 .data
+00802008 .bss
+00200000 .stab_info
+00200010 .stab
+00202d11 .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b5 syscall
+00000000 ulib.c
+00000000 stdio.c
+008002b4 cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+008010a0 error_string
+0080084a printnum
+0080093b getuint
+0080098a getint
+00800d9d sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 divzero.c
+008003e6 strcpy
+0080022c yield
+00800213 waitpid
+00800141 sys_yield
+008006ff memmove
+00800dd3 snprintf
+008009f5 vprintfmt
+0080011d sys_fork
+00800301 cprintf
+00800250 getpid
+008007a2 memcpy
+0080028f sleep
+00800278 lab6_set_priority
+00800dfc vsnprintf
+00800375 umain
+00202d10 __STAB_END__
+00800150 sys_kill
+00202d11 __STABSTR_BEGIN__
+00800020 __panic
+008001b7 sys_sleep
+00800562 strtol
+008003b6 strnlen
+0080025d print_pgdir
+0080023a kill
+00800533 strfind
+008001fc wait
+008002a5 _start
+00800e7b rand
+008004aa strncmp
+00800171 sys_putc
+00800426 strncpy
+008007f2 memcmp
+008001ef fork
+008006bf memset
+00800f53 main
+00800f3a srand
+00800e56 hash32
+008009d1 printfmt
+00203b27 __STABSTR_END__
+00800460 strcmp
+00802008 zero
+0080026b gettime_msec
+00800192 sys_gettime
+008002d8 vcprintf
+0080006e __warn
+00800327 cputs
+008001a1 sys_lab6_set_priority
+008001c9 exit
+0080012c sys_wait
+0080010b sys_exit
+00200010 __STAB_BEGIN__
+0080038e strlen
+00800183 sys_pgdir
+00800500 strchr
+00800162 sys_getpid
diff -r -u -P lab7_original/obj/user/exit.asm lab7/obj/user/exit.asm
--- lab7_original/obj/user/exit.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/exit.asm	2016-05-06 21:59:28.606159436 +0800
@@ -0,0 +1,2714 @@
+
+obj/__user_exit.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 18             	sub    $0x18,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	83 ec 04             	sub    $0x4,%esp
+  80002f:	ff 75 0c             	pushl  0xc(%ebp)
+  800032:	ff 75 08             	pushl  0x8(%ebp)
+  800035:	68 a0 10 80 00       	push   $0x8010a0
+  80003a:	e8 c2 02 00 00       	call   800301 <cprintf>
+  80003f:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800042:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800045:	83 ec 08             	sub    $0x8,%esp
+  800048:	50                   	push   %eax
+  800049:	ff 75 10             	pushl  0x10(%ebp)
+  80004c:	e8 87 02 00 00       	call   8002d8 <vcprintf>
+  800051:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  800054:	83 ec 0c             	sub    $0xc,%esp
+  800057:	68 ba 10 80 00       	push   $0x8010ba
+  80005c:	e8 a0 02 00 00       	call   800301 <cprintf>
+  800061:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	83 ec 0c             	sub    $0xc,%esp
+  800067:	6a f6                	push   $0xfffffff6
+  800069:	e8 5b 01 00 00       	call   8001c9 <exit>
+
+0080006e <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80006e:	55                   	push   %ebp
+  80006f:	89 e5                	mov    %esp,%ebp
+  800071:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800074:	8d 45 14             	lea    0x14(%ebp),%eax
+  800077:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007a:	83 ec 04             	sub    $0x4,%esp
+  80007d:	ff 75 0c             	pushl  0xc(%ebp)
+  800080:	ff 75 08             	pushl  0x8(%ebp)
+  800083:	68 bc 10 80 00       	push   $0x8010bc
+  800088:	e8 74 02 00 00       	call   800301 <cprintf>
+  80008d:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800090:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800093:	83 ec 08             	sub    $0x8,%esp
+  800096:	50                   	push   %eax
+  800097:	ff 75 10             	pushl  0x10(%ebp)
+  80009a:	e8 39 02 00 00       	call   8002d8 <vcprintf>
+  80009f:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  8000a2:	83 ec 0c             	sub    $0xc,%esp
+  8000a5:	68 ba 10 80 00       	push   $0x8010ba
+  8000aa:	e8 52 02 00 00       	call   800301 <cprintf>
+  8000af:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8000b2:	90                   	nop
+  8000b3:	c9                   	leave  
+  8000b4:	c3                   	ret    
+
+008000b5 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b5:	55                   	push   %ebp
+  8000b6:	89 e5                	mov    %esp,%ebp
+  8000b8:	57                   	push   %edi
+  8000b9:	56                   	push   %esi
+  8000ba:	53                   	push   %ebx
+  8000bb:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000be:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cb:	eb 16                	jmp    8000e3 <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8000cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d0:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d3:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d6:	8b 10                	mov    (%eax),%edx
+  8000d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000db:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000df:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8000e3:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e7:	7e e4                	jle    8000cd <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000e9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ec:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000ef:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f2:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f5:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8000f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fb:	cd 80                	int    $0x80
+  8000fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  800100:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800103:	83 c4 20             	add    $0x20,%esp
+  800106:	5b                   	pop    %ebx
+  800107:	5e                   	pop    %esi
+  800108:	5f                   	pop    %edi
+  800109:	5d                   	pop    %ebp
+  80010a:	c3                   	ret    
+
+0080010b <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010b:	55                   	push   %ebp
+  80010c:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_exit, error_code);
+  80010e:	ff 75 08             	pushl  0x8(%ebp)
+  800111:	6a 01                	push   $0x1
+  800113:	e8 9d ff ff ff       	call   8000b5 <syscall>
+  800118:	83 c4 08             	add    $0x8,%esp
+}
+  80011b:	c9                   	leave  
+  80011c:	c3                   	ret    
+
+0080011d <sys_fork>:
+
+int
+sys_fork(void) {
+  80011d:	55                   	push   %ebp
+  80011e:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_fork);
+  800120:	6a 02                	push   $0x2
+  800122:	e8 8e ff ff ff       	call   8000b5 <syscall>
+  800127:	83 c4 04             	add    $0x4,%esp
+}
+  80012a:	c9                   	leave  
+  80012b:	c3                   	ret    
+
+0080012c <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80012c:	55                   	push   %ebp
+  80012d:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_wait, pid, store);
+  80012f:	ff 75 0c             	pushl  0xc(%ebp)
+  800132:	ff 75 08             	pushl  0x8(%ebp)
+  800135:	6a 03                	push   $0x3
+  800137:	e8 79 ff ff ff       	call   8000b5 <syscall>
+  80013c:	83 c4 0c             	add    $0xc,%esp
+}
+  80013f:	c9                   	leave  
+  800140:	c3                   	ret    
+
+00800141 <sys_yield>:
+
+int
+sys_yield(void) {
+  800141:	55                   	push   %ebp
+  800142:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_yield);
+  800144:	6a 0a                	push   $0xa
+  800146:	e8 6a ff ff ff       	call   8000b5 <syscall>
+  80014b:	83 c4 04             	add    $0x4,%esp
+}
+  80014e:	c9                   	leave  
+  80014f:	c3                   	ret    
+
+00800150 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800150:	55                   	push   %ebp
+  800151:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_kill, pid);
+  800153:	ff 75 08             	pushl  0x8(%ebp)
+  800156:	6a 0c                	push   $0xc
+  800158:	e8 58 ff ff ff       	call   8000b5 <syscall>
+  80015d:	83 c4 08             	add    $0x8,%esp
+}
+  800160:	c9                   	leave  
+  800161:	c3                   	ret    
+
+00800162 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800162:	55                   	push   %ebp
+  800163:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_getpid);
+  800165:	6a 12                	push   $0x12
+  800167:	e8 49 ff ff ff       	call   8000b5 <syscall>
+  80016c:	83 c4 04             	add    $0x4,%esp
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_putc, c);
+  800174:	ff 75 08             	pushl  0x8(%ebp)
+  800177:	6a 1e                	push   $0x1e
+  800179:	e8 37 ff ff ff       	call   8000b5 <syscall>
+  80017e:	83 c4 08             	add    $0x8,%esp
+}
+  800181:	c9                   	leave  
+  800182:	c3                   	ret    
+
+00800183 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800183:	55                   	push   %ebp
+  800184:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_pgdir);
+  800186:	6a 1f                	push   $0x1f
+  800188:	e8 28 ff ff ff       	call   8000b5 <syscall>
+  80018d:	83 c4 04             	add    $0x4,%esp
+}
+  800190:	c9                   	leave  
+  800191:	c3                   	ret    
+
+00800192 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  800192:	55                   	push   %ebp
+  800193:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_gettime);
+  800195:	6a 11                	push   $0x11
+  800197:	e8 19 ff ff ff       	call   8000b5 <syscall>
+  80019c:	83 c4 04             	add    $0x4,%esp
+}
+  80019f:	c9                   	leave  
+  8001a0:	c3                   	ret    
+
+008001a1 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001a1:	55                   	push   %ebp
+  8001a2:	89 e5                	mov    %esp,%ebp
+    syscall(SYS_lab6_set_priority, priority);
+  8001a4:	ff 75 08             	pushl  0x8(%ebp)
+  8001a7:	68 ff 00 00 00       	push   $0xff
+  8001ac:	e8 04 ff ff ff       	call   8000b5 <syscall>
+  8001b1:	83 c4 08             	add    $0x8,%esp
+}
+  8001b4:	90                   	nop
+  8001b5:	c9                   	leave  
+  8001b6:	c3                   	ret    
+
+008001b7 <sys_sleep>:
+
+int
+sys_sleep(unsigned int time) {
+  8001b7:	55                   	push   %ebp
+  8001b8:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_sleep, time);
+  8001ba:	ff 75 08             	pushl  0x8(%ebp)
+  8001bd:	6a 0b                	push   $0xb
+  8001bf:	e8 f1 fe ff ff       	call   8000b5 <syscall>
+  8001c4:	83 c4 08             	add    $0x8,%esp
+}
+  8001c7:	c9                   	leave  
+  8001c8:	c3                   	ret    
+
+008001c9 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001c9:	55                   	push   %ebp
+  8001ca:	89 e5                	mov    %esp,%ebp
+  8001cc:	83 ec 08             	sub    $0x8,%esp
+    sys_exit(error_code);
+  8001cf:	83 ec 0c             	sub    $0xc,%esp
+  8001d2:	ff 75 08             	pushl  0x8(%ebp)
+  8001d5:	e8 31 ff ff ff       	call   80010b <sys_exit>
+  8001da:	83 c4 10             	add    $0x10,%esp
+    cprintf("BUG: exit failed.\n");
+  8001dd:	83 ec 0c             	sub    $0xc,%esp
+  8001e0:	68 d8 10 80 00       	push   $0x8010d8
+  8001e5:	e8 17 01 00 00       	call   800301 <cprintf>
+  8001ea:	83 c4 10             	add    $0x10,%esp
+    while (1);
+  8001ed:	eb fe                	jmp    8001ed <exit+0x24>
+
+008001ef <fork>:
+}
+
+int
+fork(void) {
+  8001ef:	55                   	push   %ebp
+  8001f0:	89 e5                	mov    %esp,%ebp
+  8001f2:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8001f5:	e8 23 ff ff ff       	call   80011d <sys_fork>
+}
+  8001fa:	c9                   	leave  
+  8001fb:	c3                   	ret    
+
+008001fc <wait>:
+
+int
+wait(void) {
+  8001fc:	55                   	push   %ebp
+  8001fd:	89 e5                	mov    %esp,%ebp
+  8001ff:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(0, NULL);
+  800202:	83 ec 08             	sub    $0x8,%esp
+  800205:	6a 00                	push   $0x0
+  800207:	6a 00                	push   $0x0
+  800209:	e8 1e ff ff ff       	call   80012c <sys_wait>
+  80020e:	83 c4 10             	add    $0x10,%esp
+}
+  800211:	c9                   	leave  
+  800212:	c3                   	ret    
+
+00800213 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800213:	55                   	push   %ebp
+  800214:	89 e5                	mov    %esp,%ebp
+  800216:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(pid, store);
+  800219:	83 ec 08             	sub    $0x8,%esp
+  80021c:	ff 75 0c             	pushl  0xc(%ebp)
+  80021f:	ff 75 08             	pushl  0x8(%ebp)
+  800222:	e8 05 ff ff ff       	call   80012c <sys_wait>
+  800227:	83 c4 10             	add    $0x10,%esp
+}
+  80022a:	c9                   	leave  
+  80022b:	c3                   	ret    
+
+0080022c <yield>:
+
+void
+yield(void) {
+  80022c:	55                   	push   %ebp
+  80022d:	89 e5                	mov    %esp,%ebp
+  80022f:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800232:	e8 0a ff ff ff       	call   800141 <sys_yield>
+}
+  800237:	90                   	nop
+  800238:	c9                   	leave  
+  800239:	c3                   	ret    
+
+0080023a <kill>:
+
+int
+kill(int pid) {
+  80023a:	55                   	push   %ebp
+  80023b:	89 e5                	mov    %esp,%ebp
+  80023d:	83 ec 08             	sub    $0x8,%esp
+    return sys_kill(pid);
+  800240:	83 ec 0c             	sub    $0xc,%esp
+  800243:	ff 75 08             	pushl  0x8(%ebp)
+  800246:	e8 05 ff ff ff       	call   800150 <sys_kill>
+  80024b:	83 c4 10             	add    $0x10,%esp
+}
+  80024e:	c9                   	leave  
+  80024f:	c3                   	ret    
+
+00800250 <getpid>:
+
+int
+getpid(void) {
+  800250:	55                   	push   %ebp
+  800251:	89 e5                	mov    %esp,%ebp
+  800253:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800256:	e8 07 ff ff ff       	call   800162 <sys_getpid>
+}
+  80025b:	c9                   	leave  
+  80025c:	c3                   	ret    
+
+0080025d <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80025d:	55                   	push   %ebp
+  80025e:	89 e5                	mov    %esp,%ebp
+  800260:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800263:	e8 1b ff ff ff       	call   800183 <sys_pgdir>
+}
+  800268:	90                   	nop
+  800269:	c9                   	leave  
+  80026a:	c3                   	ret    
+
+0080026b <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80026b:	55                   	push   %ebp
+  80026c:	89 e5                	mov    %esp,%ebp
+  80026e:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800271:	e8 1c ff ff ff       	call   800192 <sys_gettime>
+}
+  800276:	c9                   	leave  
+  800277:	c3                   	ret    
+
+00800278 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800278:	55                   	push   %ebp
+  800279:	89 e5                	mov    %esp,%ebp
+  80027b:	83 ec 08             	sub    $0x8,%esp
+    sys_lab6_set_priority(priority);
+  80027e:	83 ec 0c             	sub    $0xc,%esp
+  800281:	ff 75 08             	pushl  0x8(%ebp)
+  800284:	e8 18 ff ff ff       	call   8001a1 <sys_lab6_set_priority>
+  800289:	83 c4 10             	add    $0x10,%esp
+}
+  80028c:	90                   	nop
+  80028d:	c9                   	leave  
+  80028e:	c3                   	ret    
+
+0080028f <sleep>:
+
+int
+sleep(unsigned int time) {
+  80028f:	55                   	push   %ebp
+  800290:	89 e5                	mov    %esp,%ebp
+  800292:	83 ec 08             	sub    $0x8,%esp
+    return sys_sleep(time);
+  800295:	83 ec 0c             	sub    $0xc,%esp
+  800298:	ff 75 08             	pushl  0x8(%ebp)
+  80029b:	e8 17 ff ff ff       	call   8001b7 <sys_sleep>
+  8002a0:	83 c4 10             	add    $0x10,%esp
+}
+  8002a3:	c9                   	leave  
+  8002a4:	c3                   	ret    
+
+008002a5 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  8002a5:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  8002aa:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  8002ad:	e8 c3 00 00 00       	call   800375 <umain>
+1:  jmp 1b
+  8002b2:	eb fe                	jmp    8002b2 <_start+0xd>
+
+008002b4 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8002b4:	55                   	push   %ebp
+  8002b5:	89 e5                	mov    %esp,%ebp
+  8002b7:	83 ec 08             	sub    $0x8,%esp
+    sys_putc(c);
+  8002ba:	83 ec 0c             	sub    $0xc,%esp
+  8002bd:	ff 75 08             	pushl  0x8(%ebp)
+  8002c0:	e8 ac fe ff ff       	call   800171 <sys_putc>
+  8002c5:	83 c4 10             	add    $0x10,%esp
+    (*cnt) ++;
+  8002c8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002cb:	8b 00                	mov    (%eax),%eax
+  8002cd:	8d 50 01             	lea    0x1(%eax),%edx
+  8002d0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002d3:	89 10                	mov    %edx,(%eax)
+}
+  8002d5:	90                   	nop
+  8002d6:	c9                   	leave  
+  8002d7:	c3                   	ret    
+
+008002d8 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002d8:	55                   	push   %ebp
+  8002d9:	89 e5                	mov    %esp,%ebp
+  8002db:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  8002de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002e5:	ff 75 0c             	pushl  0xc(%ebp)
+  8002e8:	ff 75 08             	pushl  0x8(%ebp)
+  8002eb:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  8002ee:	50                   	push   %eax
+  8002ef:	68 b4 02 80 00       	push   $0x8002b4
+  8002f4:	e8 fc 06 00 00       	call   8009f5 <vprintfmt>
+  8002f9:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  8002fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002ff:	c9                   	leave  
+  800300:	c3                   	ret    
+
+00800301 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800301:	55                   	push   %ebp
+  800302:	89 e5                	mov    %esp,%ebp
+  800304:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800307:	8d 45 0c             	lea    0xc(%ebp),%eax
+  80030a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  80030d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800310:	83 ec 08             	sub    $0x8,%esp
+  800313:	50                   	push   %eax
+  800314:	ff 75 08             	pushl  0x8(%ebp)
+  800317:	e8 bc ff ff ff       	call   8002d8 <vcprintf>
+  80031c:	83 c4 10             	add    $0x10,%esp
+  80031f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800322:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800325:	c9                   	leave  
+  800326:	c3                   	ret    
+
+00800327 <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  800327:	55                   	push   %ebp
+  800328:	89 e5                	mov    %esp,%ebp
+  80032a:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  80032d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  800334:	eb 14                	jmp    80034a <cputs+0x23>
+        cputch(c, &cnt);
+  800336:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  80033a:	83 ec 08             	sub    $0x8,%esp
+  80033d:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800340:	52                   	push   %edx
+  800341:	50                   	push   %eax
+  800342:	e8 6d ff ff ff       	call   8002b4 <cputch>
+  800347:	83 c4 10             	add    $0x10,%esp
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  80034a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80034d:	8d 50 01             	lea    0x1(%eax),%edx
+  800350:	89 55 08             	mov    %edx,0x8(%ebp)
+  800353:	0f b6 00             	movzbl (%eax),%eax
+  800356:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800359:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  80035d:	75 d7                	jne    800336 <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  80035f:	83 ec 08             	sub    $0x8,%esp
+  800362:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800365:	50                   	push   %eax
+  800366:	6a 0a                	push   $0xa
+  800368:	e8 47 ff ff ff       	call   8002b4 <cputch>
+  80036d:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  800370:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  800373:	c9                   	leave  
+  800374:	c3                   	ret    
+
+00800375 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800375:	55                   	push   %ebp
+  800376:	89 e5                	mov    %esp,%ebp
+  800378:	83 ec 18             	sub    $0x18,%esp
+    int ret = main();
+  80037b:	e8 d3 0b 00 00       	call   800f53 <main>
+  800380:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  800383:	83 ec 0c             	sub    $0xc,%esp
+  800386:	ff 75 f4             	pushl  -0xc(%ebp)
+  800389:	e8 3b fe ff ff       	call   8001c9 <exit>
+
+0080038e <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  80038e:	55                   	push   %ebp
+  80038f:	89 e5                	mov    %esp,%ebp
+  800391:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800394:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  80039b:	eb 04                	jmp    8003a1 <strlen+0x13>
+        cnt ++;
+  80039d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  8003a1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003a4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003a7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003aa:	0f b6 00             	movzbl (%eax),%eax
+  8003ad:	84 c0                	test   %al,%al
+  8003af:	75 ec                	jne    80039d <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003b4:	c9                   	leave  
+  8003b5:	c3                   	ret    
+
+008003b6 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  8003b6:	55                   	push   %ebp
+  8003b7:	89 e5                	mov    %esp,%ebp
+  8003b9:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003bc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003c3:	eb 04                	jmp    8003c9 <strnlen+0x13>
+        cnt ++;
+  8003c5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  8003c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003cc:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003cf:	73 10                	jae    8003e1 <strnlen+0x2b>
+  8003d1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003d4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003d7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003da:	0f b6 00             	movzbl (%eax),%eax
+  8003dd:	84 c0                	test   %al,%al
+  8003df:	75 e4                	jne    8003c5 <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003e4:	c9                   	leave  
+  8003e5:	c3                   	ret    
+
+008003e6 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  8003e6:	55                   	push   %ebp
+  8003e7:	89 e5                	mov    %esp,%ebp
+  8003e9:	57                   	push   %edi
+  8003ea:	56                   	push   %esi
+  8003eb:	83 ec 20             	sub    $0x20,%esp
+  8003ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003f4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8003f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  8003fa:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800400:	89 d1                	mov    %edx,%ecx
+  800402:	89 c2                	mov    %eax,%edx
+  800404:	89 ce                	mov    %ecx,%esi
+  800406:	89 d7                	mov    %edx,%edi
+  800408:	ac                   	lods   %ds:(%esi),%al
+  800409:	aa                   	stos   %al,%es:(%edi)
+  80040a:	84 c0                	test   %al,%al
+  80040c:	75 fa                	jne    800408 <strcpy+0x22>
+  80040e:	89 fa                	mov    %edi,%edx
+  800410:	89 f1                	mov    %esi,%ecx
+  800412:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800415:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800418:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  80041b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  80041e:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  80041f:	83 c4 20             	add    $0x20,%esp
+  800422:	5e                   	pop    %esi
+  800423:	5f                   	pop    %edi
+  800424:	5d                   	pop    %ebp
+  800425:	c3                   	ret    
+
+00800426 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800426:	55                   	push   %ebp
+  800427:	89 e5                	mov    %esp,%ebp
+  800429:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  80042c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80042f:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800432:	eb 21                	jmp    800455 <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800434:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800437:	0f b6 10             	movzbl (%eax),%edx
+  80043a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80043d:	88 10                	mov    %dl,(%eax)
+  80043f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800442:	0f b6 00             	movzbl (%eax),%eax
+  800445:	84 c0                	test   %al,%al
+  800447:	74 04                	je     80044d <strncpy+0x27>
+            src ++;
+  800449:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  80044d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800451:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800455:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800459:	75 d9                	jne    800434 <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  80045b:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  80045e:	c9                   	leave  
+  80045f:	c3                   	ret    
+
+00800460 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800460:	55                   	push   %ebp
+  800461:	89 e5                	mov    %esp,%ebp
+  800463:	57                   	push   %edi
+  800464:	56                   	push   %esi
+  800465:	83 ec 20             	sub    $0x20,%esp
+  800468:	8b 45 08             	mov    0x8(%ebp),%eax
+  80046b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80046e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800471:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800474:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800477:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80047a:	89 d1                	mov    %edx,%ecx
+  80047c:	89 c2                	mov    %eax,%edx
+  80047e:	89 ce                	mov    %ecx,%esi
+  800480:	89 d7                	mov    %edx,%edi
+  800482:	ac                   	lods   %ds:(%esi),%al
+  800483:	ae                   	scas   %es:(%edi),%al
+  800484:	75 08                	jne    80048e <strcmp+0x2e>
+  800486:	84 c0                	test   %al,%al
+  800488:	75 f8                	jne    800482 <strcmp+0x22>
+  80048a:	31 c0                	xor    %eax,%eax
+  80048c:	eb 04                	jmp    800492 <strcmp+0x32>
+  80048e:	19 c0                	sbb    %eax,%eax
+  800490:	0c 01                	or     $0x1,%al
+  800492:	89 fa                	mov    %edi,%edx
+  800494:	89 f1                	mov    %esi,%ecx
+  800496:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800499:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  80049c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  80049f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  8004a2:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  8004a3:	83 c4 20             	add    $0x20,%esp
+  8004a6:	5e                   	pop    %esi
+  8004a7:	5f                   	pop    %edi
+  8004a8:	5d                   	pop    %ebp
+  8004a9:	c3                   	ret    
+
+008004aa <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  8004aa:	55                   	push   %ebp
+  8004ab:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004ad:	eb 0c                	jmp    8004bb <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  8004af:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  8004b3:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8004b7:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004bb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004bf:	74 1a                	je     8004db <strncmp+0x31>
+  8004c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004c4:	0f b6 00             	movzbl (%eax),%eax
+  8004c7:	84 c0                	test   %al,%al
+  8004c9:	74 10                	je     8004db <strncmp+0x31>
+  8004cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004ce:	0f b6 10             	movzbl (%eax),%edx
+  8004d1:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004d4:	0f b6 00             	movzbl (%eax),%eax
+  8004d7:	38 c2                	cmp    %al,%dl
+  8004d9:	74 d4                	je     8004af <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004db:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004df:	74 18                	je     8004f9 <strncmp+0x4f>
+  8004e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e4:	0f b6 00             	movzbl (%eax),%eax
+  8004e7:	0f b6 d0             	movzbl %al,%edx
+  8004ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ed:	0f b6 00             	movzbl (%eax),%eax
+  8004f0:	0f b6 c0             	movzbl %al,%eax
+  8004f3:	29 c2                	sub    %eax,%edx
+  8004f5:	89 d0                	mov    %edx,%eax
+  8004f7:	eb 05                	jmp    8004fe <strncmp+0x54>
+  8004f9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8004fe:	5d                   	pop    %ebp
+  8004ff:	c3                   	ret    
+
+00800500 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800500:	55                   	push   %ebp
+  800501:	89 e5                	mov    %esp,%ebp
+  800503:	83 ec 04             	sub    $0x4,%esp
+  800506:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800509:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  80050c:	eb 14                	jmp    800522 <strchr+0x22>
+        if (*s == c) {
+  80050e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800511:	0f b6 00             	movzbl (%eax),%eax
+  800514:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800517:	75 05                	jne    80051e <strchr+0x1e>
+            return (char *)s;
+  800519:	8b 45 08             	mov    0x8(%ebp),%eax
+  80051c:	eb 13                	jmp    800531 <strchr+0x31>
+        }
+        s ++;
+  80051e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800522:	8b 45 08             	mov    0x8(%ebp),%eax
+  800525:	0f b6 00             	movzbl (%eax),%eax
+  800528:	84 c0                	test   %al,%al
+  80052a:	75 e2                	jne    80050e <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  80052c:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800531:	c9                   	leave  
+  800532:	c3                   	ret    
+
+00800533 <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800533:	55                   	push   %ebp
+  800534:	89 e5                	mov    %esp,%ebp
+  800536:	83 ec 04             	sub    $0x4,%esp
+  800539:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80053c:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  80053f:	eb 0f                	jmp    800550 <strfind+0x1d>
+        if (*s == c) {
+  800541:	8b 45 08             	mov    0x8(%ebp),%eax
+  800544:	0f b6 00             	movzbl (%eax),%eax
+  800547:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  80054a:	74 10                	je     80055c <strfind+0x29>
+            break;
+        }
+        s ++;
+  80054c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800550:	8b 45 08             	mov    0x8(%ebp),%eax
+  800553:	0f b6 00             	movzbl (%eax),%eax
+  800556:	84 c0                	test   %al,%al
+  800558:	75 e7                	jne    800541 <strfind+0xe>
+  80055a:	eb 01                	jmp    80055d <strfind+0x2a>
+        if (*s == c) {
+            break;
+  80055c:	90                   	nop
+        }
+        s ++;
+    }
+    return (char *)s;
+  80055d:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800560:	c9                   	leave  
+  800561:	c3                   	ret    
+
+00800562 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800562:	55                   	push   %ebp
+  800563:	89 e5                	mov    %esp,%ebp
+  800565:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800568:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  80056f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800576:	eb 04                	jmp    80057c <strtol+0x1a>
+        s ++;
+  800578:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80057c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80057f:	0f b6 00             	movzbl (%eax),%eax
+  800582:	3c 20                	cmp    $0x20,%al
+  800584:	74 f2                	je     800578 <strtol+0x16>
+  800586:	8b 45 08             	mov    0x8(%ebp),%eax
+  800589:	0f b6 00             	movzbl (%eax),%eax
+  80058c:	3c 09                	cmp    $0x9,%al
+  80058e:	74 e8                	je     800578 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800590:	8b 45 08             	mov    0x8(%ebp),%eax
+  800593:	0f b6 00             	movzbl (%eax),%eax
+  800596:	3c 2b                	cmp    $0x2b,%al
+  800598:	75 06                	jne    8005a0 <strtol+0x3e>
+        s ++;
+  80059a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  80059e:	eb 15                	jmp    8005b5 <strtol+0x53>
+    }
+    else if (*s == '-') {
+  8005a0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a3:	0f b6 00             	movzbl (%eax),%eax
+  8005a6:	3c 2d                	cmp    $0x2d,%al
+  8005a8:	75 0b                	jne    8005b5 <strtol+0x53>
+        s ++, neg = 1;
+  8005aa:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005ae:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  8005b5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005b9:	74 06                	je     8005c1 <strtol+0x5f>
+  8005bb:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  8005bf:	75 24                	jne    8005e5 <strtol+0x83>
+  8005c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005c4:	0f b6 00             	movzbl (%eax),%eax
+  8005c7:	3c 30                	cmp    $0x30,%al
+  8005c9:	75 1a                	jne    8005e5 <strtol+0x83>
+  8005cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ce:	83 c0 01             	add    $0x1,%eax
+  8005d1:	0f b6 00             	movzbl (%eax),%eax
+  8005d4:	3c 78                	cmp    $0x78,%al
+  8005d6:	75 0d                	jne    8005e5 <strtol+0x83>
+        s += 2, base = 16;
+  8005d8:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005dc:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005e3:	eb 2a                	jmp    80060f <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005e5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005e9:	75 17                	jne    800602 <strtol+0xa0>
+  8005eb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ee:	0f b6 00             	movzbl (%eax),%eax
+  8005f1:	3c 30                	cmp    $0x30,%al
+  8005f3:	75 0d                	jne    800602 <strtol+0xa0>
+        s ++, base = 8;
+  8005f5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005f9:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800600:	eb 0d                	jmp    80060f <strtol+0xad>
+    }
+    else if (base == 0) {
+  800602:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800606:	75 07                	jne    80060f <strtol+0xad>
+        base = 10;
+  800608:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  80060f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800612:	0f b6 00             	movzbl (%eax),%eax
+  800615:	3c 2f                	cmp    $0x2f,%al
+  800617:	7e 1b                	jle    800634 <strtol+0xd2>
+  800619:	8b 45 08             	mov    0x8(%ebp),%eax
+  80061c:	0f b6 00             	movzbl (%eax),%eax
+  80061f:	3c 39                	cmp    $0x39,%al
+  800621:	7f 11                	jg     800634 <strtol+0xd2>
+            dig = *s - '0';
+  800623:	8b 45 08             	mov    0x8(%ebp),%eax
+  800626:	0f b6 00             	movzbl (%eax),%eax
+  800629:	0f be c0             	movsbl %al,%eax
+  80062c:	83 e8 30             	sub    $0x30,%eax
+  80062f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800632:	eb 48                	jmp    80067c <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800634:	8b 45 08             	mov    0x8(%ebp),%eax
+  800637:	0f b6 00             	movzbl (%eax),%eax
+  80063a:	3c 60                	cmp    $0x60,%al
+  80063c:	7e 1b                	jle    800659 <strtol+0xf7>
+  80063e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800641:	0f b6 00             	movzbl (%eax),%eax
+  800644:	3c 7a                	cmp    $0x7a,%al
+  800646:	7f 11                	jg     800659 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800648:	8b 45 08             	mov    0x8(%ebp),%eax
+  80064b:	0f b6 00             	movzbl (%eax),%eax
+  80064e:	0f be c0             	movsbl %al,%eax
+  800651:	83 e8 57             	sub    $0x57,%eax
+  800654:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800657:	eb 23                	jmp    80067c <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800659:	8b 45 08             	mov    0x8(%ebp),%eax
+  80065c:	0f b6 00             	movzbl (%eax),%eax
+  80065f:	3c 40                	cmp    $0x40,%al
+  800661:	7e 3c                	jle    80069f <strtol+0x13d>
+  800663:	8b 45 08             	mov    0x8(%ebp),%eax
+  800666:	0f b6 00             	movzbl (%eax),%eax
+  800669:	3c 5a                	cmp    $0x5a,%al
+  80066b:	7f 32                	jg     80069f <strtol+0x13d>
+            dig = *s - 'A' + 10;
+  80066d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800670:	0f b6 00             	movzbl (%eax),%eax
+  800673:	0f be c0             	movsbl %al,%eax
+  800676:	83 e8 37             	sub    $0x37,%eax
+  800679:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  80067c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80067f:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800682:	7d 1a                	jge    80069e <strtol+0x13c>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  800684:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800688:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80068b:	0f af 45 10          	imul   0x10(%ebp),%eax
+  80068f:	89 c2                	mov    %eax,%edx
+  800691:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800694:	01 d0                	add    %edx,%eax
+  800696:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800699:	e9 71 ff ff ff       	jmp    80060f <strtol+0xad>
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+            break;
+  80069e:	90                   	nop
+        }
+        s ++, val = (val * base) + dig;
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  80069f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8006a3:	74 08                	je     8006ad <strtol+0x14b>
+        *endptr = (char *) s;
+  8006a5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006a8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006ab:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  8006ad:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  8006b1:	74 07                	je     8006ba <strtol+0x158>
+  8006b3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006b6:	f7 d8                	neg    %eax
+  8006b8:	eb 03                	jmp    8006bd <strtol+0x15b>
+  8006ba:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  8006bd:	c9                   	leave  
+  8006be:	c3                   	ret    
+
+008006bf <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  8006bf:	55                   	push   %ebp
+  8006c0:	89 e5                	mov    %esp,%ebp
+  8006c2:	57                   	push   %edi
+  8006c3:	83 ec 24             	sub    $0x24,%esp
+  8006c6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006c9:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006cc:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006d0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006d3:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006d6:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006d9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006df:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006e2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006e6:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006e9:	89 d7                	mov    %edx,%edi
+  8006eb:	f3 aa                	rep stos %al,%es:(%edi)
+  8006ed:	89 fa                	mov    %edi,%edx
+  8006ef:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8006f2:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  8006f5:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006f8:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  8006f9:	83 c4 24             	add    $0x24,%esp
+  8006fc:	5f                   	pop    %edi
+  8006fd:	5d                   	pop    %ebp
+  8006fe:	c3                   	ret    
+
+008006ff <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  8006ff:	55                   	push   %ebp
+  800700:	89 e5                	mov    %esp,%ebp
+  800702:	57                   	push   %edi
+  800703:	56                   	push   %esi
+  800704:	53                   	push   %ebx
+  800705:	83 ec 30             	sub    $0x30,%esp
+  800708:	8b 45 08             	mov    0x8(%ebp),%eax
+  80070b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80070e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800711:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800714:	8b 45 10             	mov    0x10(%ebp),%eax
+  800717:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  80071a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80071d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800720:	73 42                	jae    800764 <memmove+0x65>
+  800722:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800725:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800728:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80072b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80072e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800731:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800734:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800737:	c1 e8 02             	shr    $0x2,%eax
+  80073a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  80073c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  80073f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800742:	89 d7                	mov    %edx,%edi
+  800744:	89 c6                	mov    %eax,%esi
+  800746:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800748:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  80074b:	83 e1 03             	and    $0x3,%ecx
+  80074e:	74 02                	je     800752 <memmove+0x53>
+  800750:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800752:	89 f0                	mov    %esi,%eax
+  800754:	89 fa                	mov    %edi,%edx
+  800756:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800759:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  80075c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  80075f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  800762:	eb 36                	jmp    80079a <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800764:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800767:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80076a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80076d:	01 c2                	add    %eax,%edx
+  80076f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800772:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800775:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800778:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  80077b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80077e:	89 c1                	mov    %eax,%ecx
+  800780:	89 d8                	mov    %ebx,%eax
+  800782:	89 d6                	mov    %edx,%esi
+  800784:	89 c7                	mov    %eax,%edi
+  800786:	fd                   	std    
+  800787:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800789:	fc                   	cld    
+  80078a:	89 f8                	mov    %edi,%eax
+  80078c:	89 f2                	mov    %esi,%edx
+  80078e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800791:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800794:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800797:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  80079a:	83 c4 30             	add    $0x30,%esp
+  80079d:	5b                   	pop    %ebx
+  80079e:	5e                   	pop    %esi
+  80079f:	5f                   	pop    %edi
+  8007a0:	5d                   	pop    %ebp
+  8007a1:	c3                   	ret    
+
+008007a2 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  8007a2:	55                   	push   %ebp
+  8007a3:	89 e5                	mov    %esp,%ebp
+  8007a5:	57                   	push   %edi
+  8007a6:	56                   	push   %esi
+  8007a7:	83 ec 20             	sub    $0x20,%esp
+  8007aa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8007b0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007b6:	8b 45 10             	mov    0x10(%ebp),%eax
+  8007b9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  8007bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8007bf:	c1 e8 02             	shr    $0x2,%eax
+  8007c2:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  8007c4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007ca:	89 d7                	mov    %edx,%edi
+  8007cc:	89 c6                	mov    %eax,%esi
+  8007ce:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007d0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007d3:	83 e1 03             	and    $0x3,%ecx
+  8007d6:	74 02                	je     8007da <memcpy+0x38>
+  8007d8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007da:	89 f0                	mov    %esi,%eax
+  8007dc:	89 fa                	mov    %edi,%edx
+  8007de:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007e1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007e4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  8007e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007ea:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007eb:	83 c4 20             	add    $0x20,%esp
+  8007ee:	5e                   	pop    %esi
+  8007ef:	5f                   	pop    %edi
+  8007f0:	5d                   	pop    %ebp
+  8007f1:	c3                   	ret    
+
+008007f2 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  8007f2:	55                   	push   %ebp
+  8007f3:	89 e5                	mov    %esp,%ebp
+  8007f5:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  8007f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007fb:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  8007fe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800801:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800804:	eb 30                	jmp    800836 <memcmp+0x44>
+        if (*s1 != *s2) {
+  800806:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800809:	0f b6 10             	movzbl (%eax),%edx
+  80080c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80080f:	0f b6 00             	movzbl (%eax),%eax
+  800812:	38 c2                	cmp    %al,%dl
+  800814:	74 18                	je     80082e <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800816:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800819:	0f b6 00             	movzbl (%eax),%eax
+  80081c:	0f b6 d0             	movzbl %al,%edx
+  80081f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800822:	0f b6 00             	movzbl (%eax),%eax
+  800825:	0f b6 c0             	movzbl %al,%eax
+  800828:	29 c2                	sub    %eax,%edx
+  80082a:	89 d0                	mov    %edx,%eax
+  80082c:	eb 1a                	jmp    800848 <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  80082e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800832:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800836:	8b 45 10             	mov    0x10(%ebp),%eax
+  800839:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80083c:	89 55 10             	mov    %edx,0x10(%ebp)
+  80083f:	85 c0                	test   %eax,%eax
+  800841:	75 c3                	jne    800806 <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800843:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800848:	c9                   	leave  
+  800849:	c3                   	ret    
+
+0080084a <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  80084a:	55                   	push   %ebp
+  80084b:	89 e5                	mov    %esp,%ebp
+  80084d:	83 ec 38             	sub    $0x38,%esp
+  800850:	8b 45 10             	mov    0x10(%ebp),%eax
+  800853:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800856:	8b 45 14             	mov    0x14(%ebp),%eax
+  800859:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80085c:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  80085f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800862:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800865:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800868:	8b 45 18             	mov    0x18(%ebp),%eax
+  80086b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  80086e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800871:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800874:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800877:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  80087a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80087d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800880:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800884:	74 1c                	je     8008a2 <printnum+0x58>
+  800886:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800889:	ba 00 00 00 00       	mov    $0x0,%edx
+  80088e:	f7 75 e4             	divl   -0x1c(%ebp)
+  800891:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800894:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800897:	ba 00 00 00 00       	mov    $0x0,%edx
+  80089c:	f7 75 e4             	divl   -0x1c(%ebp)
+  80089f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008a2:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008a8:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008ab:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8008ae:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8008b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008b4:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8008b7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8008ba:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8008bd:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8008c0:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8008c3:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008c6:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008cb:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008ce:	77 41                	ja     800911 <printnum+0xc7>
+  8008d0:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008d3:	72 05                	jb     8008da <printnum+0x90>
+  8008d5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  8008d8:	77 37                	ja     800911 <printnum+0xc7>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008da:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008dd:	83 e8 01             	sub    $0x1,%eax
+  8008e0:	83 ec 04             	sub    $0x4,%esp
+  8008e3:	ff 75 20             	pushl  0x20(%ebp)
+  8008e6:	50                   	push   %eax
+  8008e7:	ff 75 18             	pushl  0x18(%ebp)
+  8008ea:	ff 75 ec             	pushl  -0x14(%ebp)
+  8008ed:	ff 75 e8             	pushl  -0x18(%ebp)
+  8008f0:	ff 75 0c             	pushl  0xc(%ebp)
+  8008f3:	ff 75 08             	pushl  0x8(%ebp)
+  8008f6:	e8 4f ff ff ff       	call   80084a <printnum>
+  8008fb:	83 c4 20             	add    $0x20,%esp
+  8008fe:	eb 1b                	jmp    80091b <printnum+0xd1>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800900:	83 ec 08             	sub    $0x8,%esp
+  800903:	ff 75 0c             	pushl  0xc(%ebp)
+  800906:	ff 75 20             	pushl  0x20(%ebp)
+  800909:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090c:	ff d0                	call   *%eax
+  80090e:	83 c4 10             	add    $0x10,%esp
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  800911:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  800915:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  800919:	7f e5                	jg     800900 <printnum+0xb6>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  80091b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  80091e:	05 04 12 80 00       	add    $0x801204,%eax
+  800923:	0f b6 00             	movzbl (%eax),%eax
+  800926:	0f be c0             	movsbl %al,%eax
+  800929:	83 ec 08             	sub    $0x8,%esp
+  80092c:	ff 75 0c             	pushl  0xc(%ebp)
+  80092f:	50                   	push   %eax
+  800930:	8b 45 08             	mov    0x8(%ebp),%eax
+  800933:	ff d0                	call   *%eax
+  800935:	83 c4 10             	add    $0x10,%esp
+}
+  800938:	90                   	nop
+  800939:	c9                   	leave  
+  80093a:	c3                   	ret    
+
+0080093b <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  80093b:	55                   	push   %ebp
+  80093c:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  80093e:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800942:	7e 14                	jle    800958 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  800944:	8b 45 08             	mov    0x8(%ebp),%eax
+  800947:	8b 00                	mov    (%eax),%eax
+  800949:	8d 48 08             	lea    0x8(%eax),%ecx
+  80094c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80094f:	89 0a                	mov    %ecx,(%edx)
+  800951:	8b 50 04             	mov    0x4(%eax),%edx
+  800954:	8b 00                	mov    (%eax),%eax
+  800956:	eb 30                	jmp    800988 <getuint+0x4d>
+    }
+    else if (lflag) {
+  800958:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80095c:	74 16                	je     800974 <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  80095e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800961:	8b 00                	mov    (%eax),%eax
+  800963:	8d 48 04             	lea    0x4(%eax),%ecx
+  800966:	8b 55 08             	mov    0x8(%ebp),%edx
+  800969:	89 0a                	mov    %ecx,(%edx)
+  80096b:	8b 00                	mov    (%eax),%eax
+  80096d:	ba 00 00 00 00       	mov    $0x0,%edx
+  800972:	eb 14                	jmp    800988 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  800974:	8b 45 08             	mov    0x8(%ebp),%eax
+  800977:	8b 00                	mov    (%eax),%eax
+  800979:	8d 48 04             	lea    0x4(%eax),%ecx
+  80097c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80097f:	89 0a                	mov    %ecx,(%edx)
+  800981:	8b 00                	mov    (%eax),%eax
+  800983:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800988:	5d                   	pop    %ebp
+  800989:	c3                   	ret    
+
+0080098a <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  80098a:	55                   	push   %ebp
+  80098b:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  80098d:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800991:	7e 14                	jle    8009a7 <getint+0x1d>
+        return va_arg(*ap, long long);
+  800993:	8b 45 08             	mov    0x8(%ebp),%eax
+  800996:	8b 00                	mov    (%eax),%eax
+  800998:	8d 48 08             	lea    0x8(%eax),%ecx
+  80099b:	8b 55 08             	mov    0x8(%ebp),%edx
+  80099e:	89 0a                	mov    %ecx,(%edx)
+  8009a0:	8b 50 04             	mov    0x4(%eax),%edx
+  8009a3:	8b 00                	mov    (%eax),%eax
+  8009a5:	eb 28                	jmp    8009cf <getint+0x45>
+    }
+    else if (lflag) {
+  8009a7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8009ab:	74 12                	je     8009bf <getint+0x35>
+        return va_arg(*ap, long);
+  8009ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b0:	8b 00                	mov    (%eax),%eax
+  8009b2:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009b5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009b8:	89 0a                	mov    %ecx,(%edx)
+  8009ba:	8b 00                	mov    (%eax),%eax
+  8009bc:	99                   	cltd   
+  8009bd:	eb 10                	jmp    8009cf <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  8009bf:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009c2:	8b 00                	mov    (%eax),%eax
+  8009c4:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009c7:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009ca:	89 0a                	mov    %ecx,(%edx)
+  8009cc:	8b 00                	mov    (%eax),%eax
+  8009ce:	99                   	cltd   
+    }
+}
+  8009cf:	5d                   	pop    %ebp
+  8009d0:	c3                   	ret    
+
+008009d1 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009d1:	55                   	push   %ebp
+  8009d2:	89 e5                	mov    %esp,%ebp
+  8009d4:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009d7:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009da:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8009e0:	50                   	push   %eax
+  8009e1:	ff 75 10             	pushl  0x10(%ebp)
+  8009e4:	ff 75 0c             	pushl  0xc(%ebp)
+  8009e7:	ff 75 08             	pushl  0x8(%ebp)
+  8009ea:	e8 06 00 00 00       	call   8009f5 <vprintfmt>
+  8009ef:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8009f2:	90                   	nop
+  8009f3:	c9                   	leave  
+  8009f4:	c3                   	ret    
+
+008009f5 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8009f5:	55                   	push   %ebp
+  8009f6:	89 e5                	mov    %esp,%ebp
+  8009f8:	56                   	push   %esi
+  8009f9:	53                   	push   %ebx
+  8009fa:	83 ec 20             	sub    $0x20,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009fd:	eb 17                	jmp    800a16 <vprintfmt+0x21>
+            if (ch == '\0') {
+  8009ff:	85 db                	test   %ebx,%ebx
+  800a01:	0f 84 8e 03 00 00    	je     800d95 <vprintfmt+0x3a0>
+                return;
+            }
+            putch(ch, putdat);
+  800a07:	83 ec 08             	sub    $0x8,%esp
+  800a0a:	ff 75 0c             	pushl  0xc(%ebp)
+  800a0d:	53                   	push   %ebx
+  800a0e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a11:	ff d0                	call   *%eax
+  800a13:	83 c4 10             	add    $0x10,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a16:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a19:	8d 50 01             	lea    0x1(%eax),%edx
+  800a1c:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a1f:	0f b6 00             	movzbl (%eax),%eax
+  800a22:	0f b6 d8             	movzbl %al,%ebx
+  800a25:	83 fb 25             	cmp    $0x25,%ebx
+  800a28:	75 d5                	jne    8009ff <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a2a:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a2e:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a38:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a3b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a42:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a45:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a48:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a4b:	8d 50 01             	lea    0x1(%eax),%edx
+  800a4e:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a51:	0f b6 00             	movzbl (%eax),%eax
+  800a54:	0f b6 d8             	movzbl %al,%ebx
+  800a57:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a5a:	83 f8 55             	cmp    $0x55,%eax
+  800a5d:	0f 87 05 03 00 00    	ja     800d68 <vprintfmt+0x373>
+  800a63:	8b 04 85 28 12 80 00 	mov    0x801228(,%eax,4),%eax
+  800a6a:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a6c:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a70:	eb d6                	jmp    800a48 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a72:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800a76:	eb d0                	jmp    800a48 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a78:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800a7f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a82:	89 d0                	mov    %edx,%eax
+  800a84:	c1 e0 02             	shl    $0x2,%eax
+  800a87:	01 d0                	add    %edx,%eax
+  800a89:	01 c0                	add    %eax,%eax
+  800a8b:	01 d8                	add    %ebx,%eax
+  800a8d:	83 e8 30             	sub    $0x30,%eax
+  800a90:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800a93:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a96:	0f b6 00             	movzbl (%eax),%eax
+  800a99:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800a9c:	83 fb 2f             	cmp    $0x2f,%ebx
+  800a9f:	7e 39                	jle    800ada <vprintfmt+0xe5>
+  800aa1:	83 fb 39             	cmp    $0x39,%ebx
+  800aa4:	7f 34                	jg     800ada <vprintfmt+0xe5>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800aa6:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  800aaa:	eb d3                	jmp    800a7f <vprintfmt+0x8a>
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800aac:	8b 45 14             	mov    0x14(%ebp),%eax
+  800aaf:	8d 50 04             	lea    0x4(%eax),%edx
+  800ab2:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ab5:	8b 00                	mov    (%eax),%eax
+  800ab7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800aba:	eb 1f                	jmp    800adb <vprintfmt+0xe6>
+
+        case '.':
+            if (width < 0)
+  800abc:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ac0:	79 86                	jns    800a48 <vprintfmt+0x53>
+                width = 0;
+  800ac2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800ac9:	e9 7a ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800ace:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800ad5:	e9 6e ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+            goto process_precision;
+  800ada:	90                   	nop
+        case '#':
+            altflag = 1;
+            goto reswitch;
+
+        process_precision:
+            if (width < 0)
+  800adb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800adf:	0f 89 63 ff ff ff    	jns    800a48 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800ae5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ae8:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800aeb:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800af2:	e9 51 ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800af7:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800afb:	e9 48 ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800b00:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b03:	8d 50 04             	lea    0x4(%eax),%edx
+  800b06:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b09:	8b 00                	mov    (%eax),%eax
+  800b0b:	83 ec 08             	sub    $0x8,%esp
+  800b0e:	ff 75 0c             	pushl  0xc(%ebp)
+  800b11:	50                   	push   %eax
+  800b12:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b15:	ff d0                	call   *%eax
+  800b17:	83 c4 10             	add    $0x10,%esp
+            break;
+  800b1a:	e9 71 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800b1f:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b22:	8d 50 04             	lea    0x4(%eax),%edx
+  800b25:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b28:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b2a:	85 db                	test   %ebx,%ebx
+  800b2c:	79 02                	jns    800b30 <vprintfmt+0x13b>
+                err = -err;
+  800b2e:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b30:	83 fb 18             	cmp    $0x18,%ebx
+  800b33:	7f 0b                	jg     800b40 <vprintfmt+0x14b>
+  800b35:	8b 34 9d a0 11 80 00 	mov    0x8011a0(,%ebx,4),%esi
+  800b3c:	85 f6                	test   %esi,%esi
+  800b3e:	75 19                	jne    800b59 <vprintfmt+0x164>
+                printfmt(putch, putdat, "error %d", err);
+  800b40:	53                   	push   %ebx
+  800b41:	68 15 12 80 00       	push   $0x801215
+  800b46:	ff 75 0c             	pushl  0xc(%ebp)
+  800b49:	ff 75 08             	pushl  0x8(%ebp)
+  800b4c:	e8 80 fe ff ff       	call   8009d1 <printfmt>
+  800b51:	83 c4 10             	add    $0x10,%esp
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b54:	e9 37 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  800b59:	56                   	push   %esi
+  800b5a:	68 1e 12 80 00       	push   $0x80121e
+  800b5f:	ff 75 0c             	pushl  0xc(%ebp)
+  800b62:	ff 75 08             	pushl  0x8(%ebp)
+  800b65:	e8 67 fe ff ff       	call   8009d1 <printfmt>
+  800b6a:	83 c4 10             	add    $0x10,%esp
+            }
+            break;
+  800b6d:	e9 1e 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800b72:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b75:	8d 50 04             	lea    0x4(%eax),%edx
+  800b78:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b7b:	8b 30                	mov    (%eax),%esi
+  800b7d:	85 f6                	test   %esi,%esi
+  800b7f:	75 05                	jne    800b86 <vprintfmt+0x191>
+                p = "(null)";
+  800b81:	be 21 12 80 00       	mov    $0x801221,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800b86:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b8a:	7e 76                	jle    800c02 <vprintfmt+0x20d>
+  800b8c:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800b90:	74 70                	je     800c02 <vprintfmt+0x20d>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b92:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b95:	83 ec 08             	sub    $0x8,%esp
+  800b98:	50                   	push   %eax
+  800b99:	56                   	push   %esi
+  800b9a:	e8 17 f8 ff ff       	call   8003b6 <strnlen>
+  800b9f:	83 c4 10             	add    $0x10,%esp
+  800ba2:	89 c2                	mov    %eax,%edx
+  800ba4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ba7:	29 d0                	sub    %edx,%eax
+  800ba9:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800bac:	eb 17                	jmp    800bc5 <vprintfmt+0x1d0>
+                    putch(padc, putdat);
+  800bae:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800bb2:	83 ec 08             	sub    $0x8,%esp
+  800bb5:	ff 75 0c             	pushl  0xc(%ebp)
+  800bb8:	50                   	push   %eax
+  800bb9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bbc:	ff d0                	call   *%eax
+  800bbe:	83 c4 10             	add    $0x10,%esp
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bc1:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800bc5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800bc9:	7f e3                	jg     800bae <vprintfmt+0x1b9>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bcb:	eb 35                	jmp    800c02 <vprintfmt+0x20d>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800bcd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800bd1:	74 1c                	je     800bef <vprintfmt+0x1fa>
+  800bd3:	83 fb 1f             	cmp    $0x1f,%ebx
+  800bd6:	7e 05                	jle    800bdd <vprintfmt+0x1e8>
+  800bd8:	83 fb 7e             	cmp    $0x7e,%ebx
+  800bdb:	7e 12                	jle    800bef <vprintfmt+0x1fa>
+                    putch('?', putdat);
+  800bdd:	83 ec 08             	sub    $0x8,%esp
+  800be0:	ff 75 0c             	pushl  0xc(%ebp)
+  800be3:	6a 3f                	push   $0x3f
+  800be5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800be8:	ff d0                	call   *%eax
+  800bea:	83 c4 10             	add    $0x10,%esp
+  800bed:	eb 0f                	jmp    800bfe <vprintfmt+0x209>
+                }
+                else {
+                    putch(ch, putdat);
+  800bef:	83 ec 08             	sub    $0x8,%esp
+  800bf2:	ff 75 0c             	pushl  0xc(%ebp)
+  800bf5:	53                   	push   %ebx
+  800bf6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bf9:	ff d0                	call   *%eax
+  800bfb:	83 c4 10             	add    $0x10,%esp
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bfe:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c02:	89 f0                	mov    %esi,%eax
+  800c04:	8d 70 01             	lea    0x1(%eax),%esi
+  800c07:	0f b6 00             	movzbl (%eax),%eax
+  800c0a:	0f be d8             	movsbl %al,%ebx
+  800c0d:	85 db                	test   %ebx,%ebx
+  800c0f:	74 26                	je     800c37 <vprintfmt+0x242>
+  800c11:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c15:	78 b6                	js     800bcd <vprintfmt+0x1d8>
+  800c17:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  800c1b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c1f:	79 ac                	jns    800bcd <vprintfmt+0x1d8>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c21:	eb 14                	jmp    800c37 <vprintfmt+0x242>
+                putch(' ', putdat);
+  800c23:	83 ec 08             	sub    $0x8,%esp
+  800c26:	ff 75 0c             	pushl  0xc(%ebp)
+  800c29:	6a 20                	push   $0x20
+  800c2b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2e:	ff d0                	call   *%eax
+  800c30:	83 c4 10             	add    $0x10,%esp
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c33:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c37:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c3b:	7f e6                	jg     800c23 <vprintfmt+0x22e>
+                putch(' ', putdat);
+            }
+            break;
+  800c3d:	e9 4e 01 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c42:	83 ec 08             	sub    $0x8,%esp
+  800c45:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c48:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c4b:	50                   	push   %eax
+  800c4c:	e8 39 fd ff ff       	call   80098a <getint>
+  800c51:	83 c4 10             	add    $0x10,%esp
+  800c54:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c57:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c5d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c60:	85 d2                	test   %edx,%edx
+  800c62:	79 23                	jns    800c87 <vprintfmt+0x292>
+                putch('-', putdat);
+  800c64:	83 ec 08             	sub    $0x8,%esp
+  800c67:	ff 75 0c             	pushl  0xc(%ebp)
+  800c6a:	6a 2d                	push   $0x2d
+  800c6c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c6f:	ff d0                	call   *%eax
+  800c71:	83 c4 10             	add    $0x10,%esp
+                num = -(long long)num;
+  800c74:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c77:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c7a:	f7 d8                	neg    %eax
+  800c7c:	83 d2 00             	adc    $0x0,%edx
+  800c7f:	f7 da                	neg    %edx
+  800c81:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c84:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800c87:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c8e:	e9 9f 00 00 00       	jmp    800d32 <vprintfmt+0x33d>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800c93:	83 ec 08             	sub    $0x8,%esp
+  800c96:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c99:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c9c:	50                   	push   %eax
+  800c9d:	e8 99 fc ff ff       	call   80093b <getuint>
+  800ca2:	83 c4 10             	add    $0x10,%esp
+  800ca5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ca8:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800cab:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cb2:	eb 7e                	jmp    800d32 <vprintfmt+0x33d>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800cb4:	83 ec 08             	sub    $0x8,%esp
+  800cb7:	ff 75 e0             	pushl  -0x20(%ebp)
+  800cba:	8d 45 14             	lea    0x14(%ebp),%eax
+  800cbd:	50                   	push   %eax
+  800cbe:	e8 78 fc ff ff       	call   80093b <getuint>
+  800cc3:	83 c4 10             	add    $0x10,%esp
+  800cc6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cc9:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800ccc:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800cd3:	eb 5d                	jmp    800d32 <vprintfmt+0x33d>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800cd5:	83 ec 08             	sub    $0x8,%esp
+  800cd8:	ff 75 0c             	pushl  0xc(%ebp)
+  800cdb:	6a 30                	push   $0x30
+  800cdd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ce0:	ff d0                	call   *%eax
+  800ce2:	83 c4 10             	add    $0x10,%esp
+            putch('x', putdat);
+  800ce5:	83 ec 08             	sub    $0x8,%esp
+  800ce8:	ff 75 0c             	pushl  0xc(%ebp)
+  800ceb:	6a 78                	push   $0x78
+  800ced:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cf0:	ff d0                	call   *%eax
+  800cf2:	83 c4 10             	add    $0x10,%esp
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800cf5:	8b 45 14             	mov    0x14(%ebp),%eax
+  800cf8:	8d 50 04             	lea    0x4(%eax),%edx
+  800cfb:	89 55 14             	mov    %edx,0x14(%ebp)
+  800cfe:	8b 00                	mov    (%eax),%eax
+  800d00:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d03:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800d0a:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800d11:	eb 1f                	jmp    800d32 <vprintfmt+0x33d>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800d13:	83 ec 08             	sub    $0x8,%esp
+  800d16:	ff 75 e0             	pushl  -0x20(%ebp)
+  800d19:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d1c:	50                   	push   %eax
+  800d1d:	e8 19 fc ff ff       	call   80093b <getuint>
+  800d22:	83 c4 10             	add    $0x10,%esp
+  800d25:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d28:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d2b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d32:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d36:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d39:	83 ec 04             	sub    $0x4,%esp
+  800d3c:	52                   	push   %edx
+  800d3d:	ff 75 e8             	pushl  -0x18(%ebp)
+  800d40:	50                   	push   %eax
+  800d41:	ff 75 f4             	pushl  -0xc(%ebp)
+  800d44:	ff 75 f0             	pushl  -0x10(%ebp)
+  800d47:	ff 75 0c             	pushl  0xc(%ebp)
+  800d4a:	ff 75 08             	pushl  0x8(%ebp)
+  800d4d:	e8 f8 fa ff ff       	call   80084a <printnum>
+  800d52:	83 c4 20             	add    $0x20,%esp
+            break;
+  800d55:	eb 39                	jmp    800d90 <vprintfmt+0x39b>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800d57:	83 ec 08             	sub    $0x8,%esp
+  800d5a:	ff 75 0c             	pushl  0xc(%ebp)
+  800d5d:	53                   	push   %ebx
+  800d5e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d61:	ff d0                	call   *%eax
+  800d63:	83 c4 10             	add    $0x10,%esp
+            break;
+  800d66:	eb 28                	jmp    800d90 <vprintfmt+0x39b>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800d68:	83 ec 08             	sub    $0x8,%esp
+  800d6b:	ff 75 0c             	pushl  0xc(%ebp)
+  800d6e:	6a 25                	push   $0x25
+  800d70:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d73:	ff d0                	call   *%eax
+  800d75:	83 c4 10             	add    $0x10,%esp
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800d78:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d7c:	eb 04                	jmp    800d82 <vprintfmt+0x38d>
+  800d7e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d82:	8b 45 10             	mov    0x10(%ebp),%eax
+  800d85:	83 e8 01             	sub    $0x1,%eax
+  800d88:	0f b6 00             	movzbl (%eax),%eax
+  800d8b:	3c 25                	cmp    $0x25,%al
+  800d8d:	75 ef                	jne    800d7e <vprintfmt+0x389>
+                /* do nothing */;
+            break;
+  800d8f:	90                   	nop
+        }
+    }
+  800d90:	e9 68 fc ff ff       	jmp    8009fd <vprintfmt+0x8>
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+            if (ch == '\0') {
+                return;
+  800d95:	90                   	nop
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  800d96:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  800d99:	5b                   	pop    %ebx
+  800d9a:	5e                   	pop    %esi
+  800d9b:	5d                   	pop    %ebp
+  800d9c:	c3                   	ret    
+
+00800d9d <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800d9d:	55                   	push   %ebp
+  800d9e:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800da0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800da3:	8b 40 08             	mov    0x8(%eax),%eax
+  800da6:	8d 50 01             	lea    0x1(%eax),%edx
+  800da9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dac:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800daf:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db2:	8b 10                	mov    (%eax),%edx
+  800db4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db7:	8b 40 04             	mov    0x4(%eax),%eax
+  800dba:	39 c2                	cmp    %eax,%edx
+  800dbc:	73 12                	jae    800dd0 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800dbe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dc1:	8b 00                	mov    (%eax),%eax
+  800dc3:	8d 48 01             	lea    0x1(%eax),%ecx
+  800dc6:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800dc9:	89 0a                	mov    %ecx,(%edx)
+  800dcb:	8b 55 08             	mov    0x8(%ebp),%edx
+  800dce:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800dd0:	90                   	nop
+  800dd1:	5d                   	pop    %ebp
+  800dd2:	c3                   	ret    
+
+00800dd3 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800dd3:	55                   	push   %ebp
+  800dd4:	89 e5                	mov    %esp,%ebp
+  800dd6:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800dd9:	8d 45 14             	lea    0x14(%ebp),%eax
+  800ddc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800ddf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800de2:	50                   	push   %eax
+  800de3:	ff 75 10             	pushl  0x10(%ebp)
+  800de6:	ff 75 0c             	pushl  0xc(%ebp)
+  800de9:	ff 75 08             	pushl  0x8(%ebp)
+  800dec:	e8 0b 00 00 00       	call   800dfc <vsnprintf>
+  800df1:	83 c4 10             	add    $0x10,%esp
+  800df4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800df7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800dfa:	c9                   	leave  
+  800dfb:	c3                   	ret    
+
+00800dfc <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800dfc:	55                   	push   %ebp
+  800dfd:	89 e5                	mov    %esp,%ebp
+  800dff:	83 ec 18             	sub    $0x18,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800e02:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e05:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e08:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e0b:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800e0e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e11:	01 d0                	add    %edx,%eax
+  800e13:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e16:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800e1d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800e21:	74 0a                	je     800e2d <vsnprintf+0x31>
+  800e23:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800e26:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e29:	39 c2                	cmp    %eax,%edx
+  800e2b:	76 07                	jbe    800e34 <vsnprintf+0x38>
+        return -E_INVAL;
+  800e2d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e32:	eb 20                	jmp    800e54 <vsnprintf+0x58>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e34:	ff 75 14             	pushl  0x14(%ebp)
+  800e37:	ff 75 10             	pushl  0x10(%ebp)
+  800e3a:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800e3d:	50                   	push   %eax
+  800e3e:	68 9d 0d 80 00       	push   $0x800d9d
+  800e43:	e8 ad fb ff ff       	call   8009f5 <vprintfmt>
+  800e48:	83 c4 10             	add    $0x10,%esp
+    // null terminate the buffer
+    *b.buf = '\0';
+  800e4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e4e:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800e51:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e54:	c9                   	leave  
+  800e55:	c3                   	ret    
+
+00800e56 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800e56:	55                   	push   %ebp
+  800e57:	89 e5                	mov    %esp,%ebp
+  800e59:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800e5c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e5f:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800e65:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800e68:	b8 20 00 00 00       	mov    $0x20,%eax
+  800e6d:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800e70:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800e73:	89 c1                	mov    %eax,%ecx
+  800e75:	d3 ea                	shr    %cl,%edx
+  800e77:	89 d0                	mov    %edx,%eax
+}
+  800e79:	c9                   	leave  
+  800e7a:	c3                   	ret    
+
+00800e7b <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800e7b:	55                   	push   %ebp
+  800e7c:	89 e5                	mov    %esp,%ebp
+  800e7e:	57                   	push   %edi
+  800e7f:	56                   	push   %esi
+  800e80:	53                   	push   %ebx
+  800e81:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800e84:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e89:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800e8f:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800e95:	6b f0 05             	imul   $0x5,%eax,%esi
+  800e98:	01 fe                	add    %edi,%esi
+  800e9a:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800e9f:	f7 e7                	mul    %edi
+  800ea1:	01 d6                	add    %edx,%esi
+  800ea3:	89 f2                	mov    %esi,%edx
+  800ea5:	83 c0 0b             	add    $0xb,%eax
+  800ea8:	83 d2 00             	adc    $0x0,%edx
+  800eab:	89 c7                	mov    %eax,%edi
+  800ead:	83 e7 ff             	and    $0xffffffff,%edi
+  800eb0:	89 f9                	mov    %edi,%ecx
+  800eb2:	0f b7 da             	movzwl %dx,%ebx
+  800eb5:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800ebb:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800ec1:	a1 00 20 80 00       	mov    0x802000,%eax
+  800ec6:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ecc:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ed0:	c1 ea 0c             	shr    $0xc,%edx
+  800ed3:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ed6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800ed9:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ee0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ee3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ee6:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ee9:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800eec:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eef:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ef2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ef6:	74 1c                	je     800f14 <rand+0x99>
+  800ef8:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800efb:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f00:	f7 75 dc             	divl   -0x24(%ebp)
+  800f03:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800f06:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f09:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f0e:	f7 75 dc             	divl   -0x24(%ebp)
+  800f11:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800f14:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f17:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800f1a:	f7 75 dc             	divl   -0x24(%ebp)
+  800f1d:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f20:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f23:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f26:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800f29:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f2c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f2f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800f32:	83 c4 24             	add    $0x24,%esp
+  800f35:	5b                   	pop    %ebx
+  800f36:	5e                   	pop    %esi
+  800f37:	5f                   	pop    %edi
+  800f38:	5d                   	pop    %ebp
+  800f39:	c3                   	ret    
+
+00800f3a <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800f3a:	55                   	push   %ebp
+  800f3b:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800f3d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f40:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f45:	a3 00 20 80 00       	mov    %eax,0x802000
+  800f4a:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800f50:	90                   	nop
+  800f51:	5d                   	pop    %ebp
+  800f52:	c3                   	ret    
+
+00800f53 <main>:
+#include <ulib.h>
+
+int magic = -0x10384;
+
+int
+main(void) {
+  800f53:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  800f57:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f5a:	ff 71 fc             	pushl  -0x4(%ecx)
+  800f5d:	55                   	push   %ebp
+  800f5e:	89 e5                	mov    %esp,%ebp
+  800f60:	51                   	push   %ecx
+  800f61:	83 ec 14             	sub    $0x14,%esp
+    int pid, code;
+    cprintf("I am the parent. Forking the child...\n");
+  800f64:	83 ec 0c             	sub    $0xc,%esp
+  800f67:	68 80 13 80 00       	push   $0x801380
+  800f6c:	e8 90 f3 ff ff       	call   800301 <cprintf>
+  800f71:	83 c4 10             	add    $0x10,%esp
+    if ((pid = fork()) == 0) {
+  800f74:	e8 76 f2 ff ff       	call   8001ef <fork>
+  800f79:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800f7c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+  800f80:	75 41                	jne    800fc3 <main+0x70>
+        cprintf("I am the child.\n");
+  800f82:	83 ec 0c             	sub    $0xc,%esp
+  800f85:	68 a7 13 80 00       	push   $0x8013a7
+  800f8a:	e8 72 f3 ff ff       	call   800301 <cprintf>
+  800f8f:	83 c4 10             	add    $0x10,%esp
+        yield();
+  800f92:	e8 95 f2 ff ff       	call   80022c <yield>
+        yield();
+  800f97:	e8 90 f2 ff ff       	call   80022c <yield>
+        yield();
+  800f9c:	e8 8b f2 ff ff       	call   80022c <yield>
+        yield();
+  800fa1:	e8 86 f2 ff ff       	call   80022c <yield>
+        yield();
+  800fa6:	e8 81 f2 ff ff       	call   80022c <yield>
+        yield();
+  800fab:	e8 7c f2 ff ff       	call   80022c <yield>
+        yield();
+  800fb0:	e8 77 f2 ff ff       	call   80022c <yield>
+        exit(magic);
+  800fb5:	a1 08 20 80 00       	mov    0x802008,%eax
+  800fba:	83 ec 0c             	sub    $0xc,%esp
+  800fbd:	50                   	push   %eax
+  800fbe:	e8 06 f2 ff ff       	call   8001c9 <exit>
+    }
+    else {
+        cprintf("I am parent, fork a child pid %d\n",pid);
+  800fc3:	83 ec 08             	sub    $0x8,%esp
+  800fc6:	ff 75 f4             	pushl  -0xc(%ebp)
+  800fc9:	68 b8 13 80 00       	push   $0x8013b8
+  800fce:	e8 2e f3 ff ff       	call   800301 <cprintf>
+  800fd3:	83 c4 10             	add    $0x10,%esp
+    }
+    assert(pid > 0);
+  800fd6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+  800fda:	7f 16                	jg     800ff2 <main+0x9f>
+  800fdc:	68 da 13 80 00       	push   $0x8013da
+  800fe1:	68 e2 13 80 00       	push   $0x8013e2
+  800fe6:	6a 18                	push   $0x18
+  800fe8:	68 f7 13 80 00       	push   $0x8013f7
+  800fed:	e8 2e f0 ff ff       	call   800020 <__panic>
+    cprintf("I am the parent, waiting now..\n");
+  800ff2:	83 ec 0c             	sub    $0xc,%esp
+  800ff5:	68 04 14 80 00       	push   $0x801404
+  800ffa:	e8 02 f3 ff ff       	call   800301 <cprintf>
+  800fff:	83 c4 10             	add    $0x10,%esp
+
+    assert(waitpid(pid, &code) == 0 && code == magic);
+  801002:	83 ec 08             	sub    $0x8,%esp
+  801005:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  801008:	50                   	push   %eax
+  801009:	ff 75 f4             	pushl  -0xc(%ebp)
+  80100c:	e8 02 f2 ff ff       	call   800213 <waitpid>
+  801011:	83 c4 10             	add    $0x10,%esp
+  801014:	85 c0                	test   %eax,%eax
+  801016:	75 0c                	jne    801024 <main+0xd1>
+  801018:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  80101b:	a1 08 20 80 00       	mov    0x802008,%eax
+  801020:	39 c2                	cmp    %eax,%edx
+  801022:	74 16                	je     80103a <main+0xe7>
+  801024:	68 24 14 80 00       	push   $0x801424
+  801029:	68 e2 13 80 00       	push   $0x8013e2
+  80102e:	6a 1b                	push   $0x1b
+  801030:	68 f7 13 80 00       	push   $0x8013f7
+  801035:	e8 e6 ef ff ff       	call   800020 <__panic>
+    assert(waitpid(pid, &code) != 0 && wait() != 0);
+  80103a:	83 ec 08             	sub    $0x8,%esp
+  80103d:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  801040:	50                   	push   %eax
+  801041:	ff 75 f4             	pushl  -0xc(%ebp)
+  801044:	e8 ca f1 ff ff       	call   800213 <waitpid>
+  801049:	83 c4 10             	add    $0x10,%esp
+  80104c:	85 c0                	test   %eax,%eax
+  80104e:	74 09                	je     801059 <main+0x106>
+  801050:	e8 a7 f1 ff ff       	call   8001fc <wait>
+  801055:	85 c0                	test   %eax,%eax
+  801057:	75 16                	jne    80106f <main+0x11c>
+  801059:	68 50 14 80 00       	push   $0x801450
+  80105e:	68 e2 13 80 00       	push   $0x8013e2
+  801063:	6a 1c                	push   $0x1c
+  801065:	68 f7 13 80 00       	push   $0x8013f7
+  80106a:	e8 b1 ef ff ff       	call   800020 <__panic>
+    cprintf("waitpid %d ok.\n", pid);
+  80106f:	83 ec 08             	sub    $0x8,%esp
+  801072:	ff 75 f4             	pushl  -0xc(%ebp)
+  801075:	68 78 14 80 00       	push   $0x801478
+  80107a:	e8 82 f2 ff ff       	call   800301 <cprintf>
+  80107f:	83 c4 10             	add    $0x10,%esp
+
+    cprintf("exit pass.\n");
+  801082:	83 ec 0c             	sub    $0xc,%esp
+  801085:	68 88 14 80 00       	push   $0x801488
+  80108a:	e8 72 f2 ff ff       	call   800301 <cprintf>
+  80108f:	83 c4 10             	add    $0x10,%esp
+    return 0;
+  801092:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  801097:	8b 4d fc             	mov    -0x4(%ebp),%ecx
+  80109a:	c9                   	leave  
+  80109b:	8d 61 fc             	lea    -0x4(%ecx),%esp
+  80109e:	c3                   	ret    
diff -r -u -P lab7_original/obj/user/exit.d lab7/obj/user/exit.d
--- lab7_original/obj/user/exit.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/exit.d	2016-05-06 21:59:27.574121824 +0800
@@ -0,0 +1,2 @@
+obj/user/exit.o obj/user/exit.d: user/exit.c libs/stdio.h libs/defs.h \
+ libs/stdarg.h user/libs/ulib.h
Binary files lab7_original/obj/user/exit.o and lab7/obj/user/exit.o differ
diff -r -u -P lab7_original/obj/user/exit.sym lab7/obj/user/exit.sym
--- lab7_original/obj/user/exit.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/exit.sym	2016-05-06 21:59:28.682162217 +0800
@@ -0,0 +1,79 @@
+00800020 .text
+008010a0 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202e55 .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b5 syscall
+00000000 ulib.c
+00000000 stdio.c
+008002b4 cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+008011a0 error_string
+0080084a printnum
+0080093b getuint
+0080098a getint
+00800d9d sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 exit.c
+008003e6 strcpy
+0080022c yield
+00800213 waitpid
+00800141 sys_yield
+008006ff memmove
+00800dd3 snprintf
+008009f5 vprintfmt
+0080011d sys_fork
+00800301 cprintf
+00800250 getpid
+008007a2 memcpy
+0080028f sleep
+00800278 lab6_set_priority
+00800dfc vsnprintf
+00800375 umain
+00202e54 __STAB_END__
+00800150 sys_kill
+00202e55 __STABSTR_BEGIN__
+00800020 __panic
+008001b7 sys_sleep
+00800562 strtol
+008003b6 strnlen
+0080025d print_pgdir
+0080023a kill
+00800533 strfind
+008001fc wait
+008002a5 _start
+00800e7b rand
+008004aa strncmp
+00800171 sys_putc
+00800426 strncpy
+008007f2 memcmp
+008001ef fork
+008006bf memset
+00800f53 main
+00800f3a srand
+00800e56 hash32
+008009d1 printfmt
+00203c7e __STABSTR_END__
+00800460 strcmp
+0080026b gettime_msec
+00800192 sys_gettime
+00802008 magic
+008002d8 vcprintf
+0080006e __warn
+00800327 cputs
+008001a1 sys_lab6_set_priority
+008001c9 exit
+0080012c sys_wait
+0080010b sys_exit
+00200010 __STAB_BEGIN__
+0080038e strlen
+00800183 sys_pgdir
+00800500 strchr
+00800162 sys_getpid
diff -r -u -P lab7_original/obj/user/faultread.asm lab7/obj/user/faultread.asm
--- lab7_original/obj/user/faultread.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/faultread.asm	2016-05-06 21:59:28.658161338 +0800
@@ -0,0 +1,2615 @@
+
+obj/__user_faultread.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 18             	sub    $0x18,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	83 ec 04             	sub    $0x4,%esp
+  80002f:	ff 75 0c             	pushl  0xc(%ebp)
+  800032:	ff 75 08             	pushl  0x8(%ebp)
+  800035:	68 a0 0f 80 00       	push   $0x800fa0
+  80003a:	e8 c2 02 00 00       	call   800301 <cprintf>
+  80003f:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800042:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800045:	83 ec 08             	sub    $0x8,%esp
+  800048:	50                   	push   %eax
+  800049:	ff 75 10             	pushl  0x10(%ebp)
+  80004c:	e8 87 02 00 00       	call   8002d8 <vcprintf>
+  800051:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  800054:	83 ec 0c             	sub    $0xc,%esp
+  800057:	68 ba 0f 80 00       	push   $0x800fba
+  80005c:	e8 a0 02 00 00       	call   800301 <cprintf>
+  800061:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	83 ec 0c             	sub    $0xc,%esp
+  800067:	6a f6                	push   $0xfffffff6
+  800069:	e8 5b 01 00 00       	call   8001c9 <exit>
+
+0080006e <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80006e:	55                   	push   %ebp
+  80006f:	89 e5                	mov    %esp,%ebp
+  800071:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800074:	8d 45 14             	lea    0x14(%ebp),%eax
+  800077:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007a:	83 ec 04             	sub    $0x4,%esp
+  80007d:	ff 75 0c             	pushl  0xc(%ebp)
+  800080:	ff 75 08             	pushl  0x8(%ebp)
+  800083:	68 bc 0f 80 00       	push   $0x800fbc
+  800088:	e8 74 02 00 00       	call   800301 <cprintf>
+  80008d:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800090:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800093:	83 ec 08             	sub    $0x8,%esp
+  800096:	50                   	push   %eax
+  800097:	ff 75 10             	pushl  0x10(%ebp)
+  80009a:	e8 39 02 00 00       	call   8002d8 <vcprintf>
+  80009f:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  8000a2:	83 ec 0c             	sub    $0xc,%esp
+  8000a5:	68 ba 0f 80 00       	push   $0x800fba
+  8000aa:	e8 52 02 00 00       	call   800301 <cprintf>
+  8000af:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8000b2:	90                   	nop
+  8000b3:	c9                   	leave  
+  8000b4:	c3                   	ret    
+
+008000b5 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b5:	55                   	push   %ebp
+  8000b6:	89 e5                	mov    %esp,%ebp
+  8000b8:	57                   	push   %edi
+  8000b9:	56                   	push   %esi
+  8000ba:	53                   	push   %ebx
+  8000bb:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000be:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cb:	eb 16                	jmp    8000e3 <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8000cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d0:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d3:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d6:	8b 10                	mov    (%eax),%edx
+  8000d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000db:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000df:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8000e3:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e7:	7e e4                	jle    8000cd <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000e9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ec:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000ef:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f2:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f5:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8000f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fb:	cd 80                	int    $0x80
+  8000fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  800100:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800103:	83 c4 20             	add    $0x20,%esp
+  800106:	5b                   	pop    %ebx
+  800107:	5e                   	pop    %esi
+  800108:	5f                   	pop    %edi
+  800109:	5d                   	pop    %ebp
+  80010a:	c3                   	ret    
+
+0080010b <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010b:	55                   	push   %ebp
+  80010c:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_exit, error_code);
+  80010e:	ff 75 08             	pushl  0x8(%ebp)
+  800111:	6a 01                	push   $0x1
+  800113:	e8 9d ff ff ff       	call   8000b5 <syscall>
+  800118:	83 c4 08             	add    $0x8,%esp
+}
+  80011b:	c9                   	leave  
+  80011c:	c3                   	ret    
+
+0080011d <sys_fork>:
+
+int
+sys_fork(void) {
+  80011d:	55                   	push   %ebp
+  80011e:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_fork);
+  800120:	6a 02                	push   $0x2
+  800122:	e8 8e ff ff ff       	call   8000b5 <syscall>
+  800127:	83 c4 04             	add    $0x4,%esp
+}
+  80012a:	c9                   	leave  
+  80012b:	c3                   	ret    
+
+0080012c <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80012c:	55                   	push   %ebp
+  80012d:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_wait, pid, store);
+  80012f:	ff 75 0c             	pushl  0xc(%ebp)
+  800132:	ff 75 08             	pushl  0x8(%ebp)
+  800135:	6a 03                	push   $0x3
+  800137:	e8 79 ff ff ff       	call   8000b5 <syscall>
+  80013c:	83 c4 0c             	add    $0xc,%esp
+}
+  80013f:	c9                   	leave  
+  800140:	c3                   	ret    
+
+00800141 <sys_yield>:
+
+int
+sys_yield(void) {
+  800141:	55                   	push   %ebp
+  800142:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_yield);
+  800144:	6a 0a                	push   $0xa
+  800146:	e8 6a ff ff ff       	call   8000b5 <syscall>
+  80014b:	83 c4 04             	add    $0x4,%esp
+}
+  80014e:	c9                   	leave  
+  80014f:	c3                   	ret    
+
+00800150 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800150:	55                   	push   %ebp
+  800151:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_kill, pid);
+  800153:	ff 75 08             	pushl  0x8(%ebp)
+  800156:	6a 0c                	push   $0xc
+  800158:	e8 58 ff ff ff       	call   8000b5 <syscall>
+  80015d:	83 c4 08             	add    $0x8,%esp
+}
+  800160:	c9                   	leave  
+  800161:	c3                   	ret    
+
+00800162 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800162:	55                   	push   %ebp
+  800163:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_getpid);
+  800165:	6a 12                	push   $0x12
+  800167:	e8 49 ff ff ff       	call   8000b5 <syscall>
+  80016c:	83 c4 04             	add    $0x4,%esp
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_putc, c);
+  800174:	ff 75 08             	pushl  0x8(%ebp)
+  800177:	6a 1e                	push   $0x1e
+  800179:	e8 37 ff ff ff       	call   8000b5 <syscall>
+  80017e:	83 c4 08             	add    $0x8,%esp
+}
+  800181:	c9                   	leave  
+  800182:	c3                   	ret    
+
+00800183 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800183:	55                   	push   %ebp
+  800184:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_pgdir);
+  800186:	6a 1f                	push   $0x1f
+  800188:	e8 28 ff ff ff       	call   8000b5 <syscall>
+  80018d:	83 c4 04             	add    $0x4,%esp
+}
+  800190:	c9                   	leave  
+  800191:	c3                   	ret    
+
+00800192 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  800192:	55                   	push   %ebp
+  800193:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_gettime);
+  800195:	6a 11                	push   $0x11
+  800197:	e8 19 ff ff ff       	call   8000b5 <syscall>
+  80019c:	83 c4 04             	add    $0x4,%esp
+}
+  80019f:	c9                   	leave  
+  8001a0:	c3                   	ret    
+
+008001a1 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001a1:	55                   	push   %ebp
+  8001a2:	89 e5                	mov    %esp,%ebp
+    syscall(SYS_lab6_set_priority, priority);
+  8001a4:	ff 75 08             	pushl  0x8(%ebp)
+  8001a7:	68 ff 00 00 00       	push   $0xff
+  8001ac:	e8 04 ff ff ff       	call   8000b5 <syscall>
+  8001b1:	83 c4 08             	add    $0x8,%esp
+}
+  8001b4:	90                   	nop
+  8001b5:	c9                   	leave  
+  8001b6:	c3                   	ret    
+
+008001b7 <sys_sleep>:
+
+int
+sys_sleep(unsigned int time) {
+  8001b7:	55                   	push   %ebp
+  8001b8:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_sleep, time);
+  8001ba:	ff 75 08             	pushl  0x8(%ebp)
+  8001bd:	6a 0b                	push   $0xb
+  8001bf:	e8 f1 fe ff ff       	call   8000b5 <syscall>
+  8001c4:	83 c4 08             	add    $0x8,%esp
+}
+  8001c7:	c9                   	leave  
+  8001c8:	c3                   	ret    
+
+008001c9 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001c9:	55                   	push   %ebp
+  8001ca:	89 e5                	mov    %esp,%ebp
+  8001cc:	83 ec 08             	sub    $0x8,%esp
+    sys_exit(error_code);
+  8001cf:	83 ec 0c             	sub    $0xc,%esp
+  8001d2:	ff 75 08             	pushl  0x8(%ebp)
+  8001d5:	e8 31 ff ff ff       	call   80010b <sys_exit>
+  8001da:	83 c4 10             	add    $0x10,%esp
+    cprintf("BUG: exit failed.\n");
+  8001dd:	83 ec 0c             	sub    $0xc,%esp
+  8001e0:	68 d8 0f 80 00       	push   $0x800fd8
+  8001e5:	e8 17 01 00 00       	call   800301 <cprintf>
+  8001ea:	83 c4 10             	add    $0x10,%esp
+    while (1);
+  8001ed:	eb fe                	jmp    8001ed <exit+0x24>
+
+008001ef <fork>:
+}
+
+int
+fork(void) {
+  8001ef:	55                   	push   %ebp
+  8001f0:	89 e5                	mov    %esp,%ebp
+  8001f2:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8001f5:	e8 23 ff ff ff       	call   80011d <sys_fork>
+}
+  8001fa:	c9                   	leave  
+  8001fb:	c3                   	ret    
+
+008001fc <wait>:
+
+int
+wait(void) {
+  8001fc:	55                   	push   %ebp
+  8001fd:	89 e5                	mov    %esp,%ebp
+  8001ff:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(0, NULL);
+  800202:	83 ec 08             	sub    $0x8,%esp
+  800205:	6a 00                	push   $0x0
+  800207:	6a 00                	push   $0x0
+  800209:	e8 1e ff ff ff       	call   80012c <sys_wait>
+  80020e:	83 c4 10             	add    $0x10,%esp
+}
+  800211:	c9                   	leave  
+  800212:	c3                   	ret    
+
+00800213 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800213:	55                   	push   %ebp
+  800214:	89 e5                	mov    %esp,%ebp
+  800216:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(pid, store);
+  800219:	83 ec 08             	sub    $0x8,%esp
+  80021c:	ff 75 0c             	pushl  0xc(%ebp)
+  80021f:	ff 75 08             	pushl  0x8(%ebp)
+  800222:	e8 05 ff ff ff       	call   80012c <sys_wait>
+  800227:	83 c4 10             	add    $0x10,%esp
+}
+  80022a:	c9                   	leave  
+  80022b:	c3                   	ret    
+
+0080022c <yield>:
+
+void
+yield(void) {
+  80022c:	55                   	push   %ebp
+  80022d:	89 e5                	mov    %esp,%ebp
+  80022f:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800232:	e8 0a ff ff ff       	call   800141 <sys_yield>
+}
+  800237:	90                   	nop
+  800238:	c9                   	leave  
+  800239:	c3                   	ret    
+
+0080023a <kill>:
+
+int
+kill(int pid) {
+  80023a:	55                   	push   %ebp
+  80023b:	89 e5                	mov    %esp,%ebp
+  80023d:	83 ec 08             	sub    $0x8,%esp
+    return sys_kill(pid);
+  800240:	83 ec 0c             	sub    $0xc,%esp
+  800243:	ff 75 08             	pushl  0x8(%ebp)
+  800246:	e8 05 ff ff ff       	call   800150 <sys_kill>
+  80024b:	83 c4 10             	add    $0x10,%esp
+}
+  80024e:	c9                   	leave  
+  80024f:	c3                   	ret    
+
+00800250 <getpid>:
+
+int
+getpid(void) {
+  800250:	55                   	push   %ebp
+  800251:	89 e5                	mov    %esp,%ebp
+  800253:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800256:	e8 07 ff ff ff       	call   800162 <sys_getpid>
+}
+  80025b:	c9                   	leave  
+  80025c:	c3                   	ret    
+
+0080025d <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80025d:	55                   	push   %ebp
+  80025e:	89 e5                	mov    %esp,%ebp
+  800260:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800263:	e8 1b ff ff ff       	call   800183 <sys_pgdir>
+}
+  800268:	90                   	nop
+  800269:	c9                   	leave  
+  80026a:	c3                   	ret    
+
+0080026b <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80026b:	55                   	push   %ebp
+  80026c:	89 e5                	mov    %esp,%ebp
+  80026e:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800271:	e8 1c ff ff ff       	call   800192 <sys_gettime>
+}
+  800276:	c9                   	leave  
+  800277:	c3                   	ret    
+
+00800278 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800278:	55                   	push   %ebp
+  800279:	89 e5                	mov    %esp,%ebp
+  80027b:	83 ec 08             	sub    $0x8,%esp
+    sys_lab6_set_priority(priority);
+  80027e:	83 ec 0c             	sub    $0xc,%esp
+  800281:	ff 75 08             	pushl  0x8(%ebp)
+  800284:	e8 18 ff ff ff       	call   8001a1 <sys_lab6_set_priority>
+  800289:	83 c4 10             	add    $0x10,%esp
+}
+  80028c:	90                   	nop
+  80028d:	c9                   	leave  
+  80028e:	c3                   	ret    
+
+0080028f <sleep>:
+
+int
+sleep(unsigned int time) {
+  80028f:	55                   	push   %ebp
+  800290:	89 e5                	mov    %esp,%ebp
+  800292:	83 ec 08             	sub    $0x8,%esp
+    return sys_sleep(time);
+  800295:	83 ec 0c             	sub    $0xc,%esp
+  800298:	ff 75 08             	pushl  0x8(%ebp)
+  80029b:	e8 17 ff ff ff       	call   8001b7 <sys_sleep>
+  8002a0:	83 c4 10             	add    $0x10,%esp
+}
+  8002a3:	c9                   	leave  
+  8002a4:	c3                   	ret    
+
+008002a5 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  8002a5:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  8002aa:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  8002ad:	e8 c3 00 00 00       	call   800375 <umain>
+1:  jmp 1b
+  8002b2:	eb fe                	jmp    8002b2 <_start+0xd>
+
+008002b4 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8002b4:	55                   	push   %ebp
+  8002b5:	89 e5                	mov    %esp,%ebp
+  8002b7:	83 ec 08             	sub    $0x8,%esp
+    sys_putc(c);
+  8002ba:	83 ec 0c             	sub    $0xc,%esp
+  8002bd:	ff 75 08             	pushl  0x8(%ebp)
+  8002c0:	e8 ac fe ff ff       	call   800171 <sys_putc>
+  8002c5:	83 c4 10             	add    $0x10,%esp
+    (*cnt) ++;
+  8002c8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002cb:	8b 00                	mov    (%eax),%eax
+  8002cd:	8d 50 01             	lea    0x1(%eax),%edx
+  8002d0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002d3:	89 10                	mov    %edx,(%eax)
+}
+  8002d5:	90                   	nop
+  8002d6:	c9                   	leave  
+  8002d7:	c3                   	ret    
+
+008002d8 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002d8:	55                   	push   %ebp
+  8002d9:	89 e5                	mov    %esp,%ebp
+  8002db:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  8002de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002e5:	ff 75 0c             	pushl  0xc(%ebp)
+  8002e8:	ff 75 08             	pushl  0x8(%ebp)
+  8002eb:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  8002ee:	50                   	push   %eax
+  8002ef:	68 b4 02 80 00       	push   $0x8002b4
+  8002f4:	e8 fc 06 00 00       	call   8009f5 <vprintfmt>
+  8002f9:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  8002fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002ff:	c9                   	leave  
+  800300:	c3                   	ret    
+
+00800301 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800301:	55                   	push   %ebp
+  800302:	89 e5                	mov    %esp,%ebp
+  800304:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800307:	8d 45 0c             	lea    0xc(%ebp),%eax
+  80030a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  80030d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800310:	83 ec 08             	sub    $0x8,%esp
+  800313:	50                   	push   %eax
+  800314:	ff 75 08             	pushl  0x8(%ebp)
+  800317:	e8 bc ff ff ff       	call   8002d8 <vcprintf>
+  80031c:	83 c4 10             	add    $0x10,%esp
+  80031f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800322:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800325:	c9                   	leave  
+  800326:	c3                   	ret    
+
+00800327 <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  800327:	55                   	push   %ebp
+  800328:	89 e5                	mov    %esp,%ebp
+  80032a:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  80032d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  800334:	eb 14                	jmp    80034a <cputs+0x23>
+        cputch(c, &cnt);
+  800336:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  80033a:	83 ec 08             	sub    $0x8,%esp
+  80033d:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800340:	52                   	push   %edx
+  800341:	50                   	push   %eax
+  800342:	e8 6d ff ff ff       	call   8002b4 <cputch>
+  800347:	83 c4 10             	add    $0x10,%esp
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  80034a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80034d:	8d 50 01             	lea    0x1(%eax),%edx
+  800350:	89 55 08             	mov    %edx,0x8(%ebp)
+  800353:	0f b6 00             	movzbl (%eax),%eax
+  800356:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800359:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  80035d:	75 d7                	jne    800336 <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  80035f:	83 ec 08             	sub    $0x8,%esp
+  800362:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800365:	50                   	push   %eax
+  800366:	6a 0a                	push   $0xa
+  800368:	e8 47 ff ff ff       	call   8002b4 <cputch>
+  80036d:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  800370:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  800373:	c9                   	leave  
+  800374:	c3                   	ret    
+
+00800375 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800375:	55                   	push   %ebp
+  800376:	89 e5                	mov    %esp,%ebp
+  800378:	83 ec 18             	sub    $0x18,%esp
+    int ret = main();
+  80037b:	e8 d3 0b 00 00       	call   800f53 <main>
+  800380:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  800383:	83 ec 0c             	sub    $0xc,%esp
+  800386:	ff 75 f4             	pushl  -0xc(%ebp)
+  800389:	e8 3b fe ff ff       	call   8001c9 <exit>
+
+0080038e <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  80038e:	55                   	push   %ebp
+  80038f:	89 e5                	mov    %esp,%ebp
+  800391:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800394:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  80039b:	eb 04                	jmp    8003a1 <strlen+0x13>
+        cnt ++;
+  80039d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  8003a1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003a4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003a7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003aa:	0f b6 00             	movzbl (%eax),%eax
+  8003ad:	84 c0                	test   %al,%al
+  8003af:	75 ec                	jne    80039d <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003b4:	c9                   	leave  
+  8003b5:	c3                   	ret    
+
+008003b6 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  8003b6:	55                   	push   %ebp
+  8003b7:	89 e5                	mov    %esp,%ebp
+  8003b9:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003bc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003c3:	eb 04                	jmp    8003c9 <strnlen+0x13>
+        cnt ++;
+  8003c5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  8003c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003cc:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003cf:	73 10                	jae    8003e1 <strnlen+0x2b>
+  8003d1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003d4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003d7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003da:	0f b6 00             	movzbl (%eax),%eax
+  8003dd:	84 c0                	test   %al,%al
+  8003df:	75 e4                	jne    8003c5 <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003e4:	c9                   	leave  
+  8003e5:	c3                   	ret    
+
+008003e6 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  8003e6:	55                   	push   %ebp
+  8003e7:	89 e5                	mov    %esp,%ebp
+  8003e9:	57                   	push   %edi
+  8003ea:	56                   	push   %esi
+  8003eb:	83 ec 20             	sub    $0x20,%esp
+  8003ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003f4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8003f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  8003fa:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800400:	89 d1                	mov    %edx,%ecx
+  800402:	89 c2                	mov    %eax,%edx
+  800404:	89 ce                	mov    %ecx,%esi
+  800406:	89 d7                	mov    %edx,%edi
+  800408:	ac                   	lods   %ds:(%esi),%al
+  800409:	aa                   	stos   %al,%es:(%edi)
+  80040a:	84 c0                	test   %al,%al
+  80040c:	75 fa                	jne    800408 <strcpy+0x22>
+  80040e:	89 fa                	mov    %edi,%edx
+  800410:	89 f1                	mov    %esi,%ecx
+  800412:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800415:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800418:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  80041b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  80041e:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  80041f:	83 c4 20             	add    $0x20,%esp
+  800422:	5e                   	pop    %esi
+  800423:	5f                   	pop    %edi
+  800424:	5d                   	pop    %ebp
+  800425:	c3                   	ret    
+
+00800426 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800426:	55                   	push   %ebp
+  800427:	89 e5                	mov    %esp,%ebp
+  800429:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  80042c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80042f:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800432:	eb 21                	jmp    800455 <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800434:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800437:	0f b6 10             	movzbl (%eax),%edx
+  80043a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80043d:	88 10                	mov    %dl,(%eax)
+  80043f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800442:	0f b6 00             	movzbl (%eax),%eax
+  800445:	84 c0                	test   %al,%al
+  800447:	74 04                	je     80044d <strncpy+0x27>
+            src ++;
+  800449:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  80044d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800451:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800455:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800459:	75 d9                	jne    800434 <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  80045b:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  80045e:	c9                   	leave  
+  80045f:	c3                   	ret    
+
+00800460 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800460:	55                   	push   %ebp
+  800461:	89 e5                	mov    %esp,%ebp
+  800463:	57                   	push   %edi
+  800464:	56                   	push   %esi
+  800465:	83 ec 20             	sub    $0x20,%esp
+  800468:	8b 45 08             	mov    0x8(%ebp),%eax
+  80046b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80046e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800471:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800474:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800477:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80047a:	89 d1                	mov    %edx,%ecx
+  80047c:	89 c2                	mov    %eax,%edx
+  80047e:	89 ce                	mov    %ecx,%esi
+  800480:	89 d7                	mov    %edx,%edi
+  800482:	ac                   	lods   %ds:(%esi),%al
+  800483:	ae                   	scas   %es:(%edi),%al
+  800484:	75 08                	jne    80048e <strcmp+0x2e>
+  800486:	84 c0                	test   %al,%al
+  800488:	75 f8                	jne    800482 <strcmp+0x22>
+  80048a:	31 c0                	xor    %eax,%eax
+  80048c:	eb 04                	jmp    800492 <strcmp+0x32>
+  80048e:	19 c0                	sbb    %eax,%eax
+  800490:	0c 01                	or     $0x1,%al
+  800492:	89 fa                	mov    %edi,%edx
+  800494:	89 f1                	mov    %esi,%ecx
+  800496:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800499:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  80049c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  80049f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  8004a2:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  8004a3:	83 c4 20             	add    $0x20,%esp
+  8004a6:	5e                   	pop    %esi
+  8004a7:	5f                   	pop    %edi
+  8004a8:	5d                   	pop    %ebp
+  8004a9:	c3                   	ret    
+
+008004aa <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  8004aa:	55                   	push   %ebp
+  8004ab:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004ad:	eb 0c                	jmp    8004bb <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  8004af:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  8004b3:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8004b7:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004bb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004bf:	74 1a                	je     8004db <strncmp+0x31>
+  8004c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004c4:	0f b6 00             	movzbl (%eax),%eax
+  8004c7:	84 c0                	test   %al,%al
+  8004c9:	74 10                	je     8004db <strncmp+0x31>
+  8004cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004ce:	0f b6 10             	movzbl (%eax),%edx
+  8004d1:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004d4:	0f b6 00             	movzbl (%eax),%eax
+  8004d7:	38 c2                	cmp    %al,%dl
+  8004d9:	74 d4                	je     8004af <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004db:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004df:	74 18                	je     8004f9 <strncmp+0x4f>
+  8004e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e4:	0f b6 00             	movzbl (%eax),%eax
+  8004e7:	0f b6 d0             	movzbl %al,%edx
+  8004ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ed:	0f b6 00             	movzbl (%eax),%eax
+  8004f0:	0f b6 c0             	movzbl %al,%eax
+  8004f3:	29 c2                	sub    %eax,%edx
+  8004f5:	89 d0                	mov    %edx,%eax
+  8004f7:	eb 05                	jmp    8004fe <strncmp+0x54>
+  8004f9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8004fe:	5d                   	pop    %ebp
+  8004ff:	c3                   	ret    
+
+00800500 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800500:	55                   	push   %ebp
+  800501:	89 e5                	mov    %esp,%ebp
+  800503:	83 ec 04             	sub    $0x4,%esp
+  800506:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800509:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  80050c:	eb 14                	jmp    800522 <strchr+0x22>
+        if (*s == c) {
+  80050e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800511:	0f b6 00             	movzbl (%eax),%eax
+  800514:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800517:	75 05                	jne    80051e <strchr+0x1e>
+            return (char *)s;
+  800519:	8b 45 08             	mov    0x8(%ebp),%eax
+  80051c:	eb 13                	jmp    800531 <strchr+0x31>
+        }
+        s ++;
+  80051e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800522:	8b 45 08             	mov    0x8(%ebp),%eax
+  800525:	0f b6 00             	movzbl (%eax),%eax
+  800528:	84 c0                	test   %al,%al
+  80052a:	75 e2                	jne    80050e <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  80052c:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800531:	c9                   	leave  
+  800532:	c3                   	ret    
+
+00800533 <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800533:	55                   	push   %ebp
+  800534:	89 e5                	mov    %esp,%ebp
+  800536:	83 ec 04             	sub    $0x4,%esp
+  800539:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80053c:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  80053f:	eb 0f                	jmp    800550 <strfind+0x1d>
+        if (*s == c) {
+  800541:	8b 45 08             	mov    0x8(%ebp),%eax
+  800544:	0f b6 00             	movzbl (%eax),%eax
+  800547:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  80054a:	74 10                	je     80055c <strfind+0x29>
+            break;
+        }
+        s ++;
+  80054c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800550:	8b 45 08             	mov    0x8(%ebp),%eax
+  800553:	0f b6 00             	movzbl (%eax),%eax
+  800556:	84 c0                	test   %al,%al
+  800558:	75 e7                	jne    800541 <strfind+0xe>
+  80055a:	eb 01                	jmp    80055d <strfind+0x2a>
+        if (*s == c) {
+            break;
+  80055c:	90                   	nop
+        }
+        s ++;
+    }
+    return (char *)s;
+  80055d:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800560:	c9                   	leave  
+  800561:	c3                   	ret    
+
+00800562 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800562:	55                   	push   %ebp
+  800563:	89 e5                	mov    %esp,%ebp
+  800565:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800568:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  80056f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800576:	eb 04                	jmp    80057c <strtol+0x1a>
+        s ++;
+  800578:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80057c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80057f:	0f b6 00             	movzbl (%eax),%eax
+  800582:	3c 20                	cmp    $0x20,%al
+  800584:	74 f2                	je     800578 <strtol+0x16>
+  800586:	8b 45 08             	mov    0x8(%ebp),%eax
+  800589:	0f b6 00             	movzbl (%eax),%eax
+  80058c:	3c 09                	cmp    $0x9,%al
+  80058e:	74 e8                	je     800578 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800590:	8b 45 08             	mov    0x8(%ebp),%eax
+  800593:	0f b6 00             	movzbl (%eax),%eax
+  800596:	3c 2b                	cmp    $0x2b,%al
+  800598:	75 06                	jne    8005a0 <strtol+0x3e>
+        s ++;
+  80059a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  80059e:	eb 15                	jmp    8005b5 <strtol+0x53>
+    }
+    else if (*s == '-') {
+  8005a0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a3:	0f b6 00             	movzbl (%eax),%eax
+  8005a6:	3c 2d                	cmp    $0x2d,%al
+  8005a8:	75 0b                	jne    8005b5 <strtol+0x53>
+        s ++, neg = 1;
+  8005aa:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005ae:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  8005b5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005b9:	74 06                	je     8005c1 <strtol+0x5f>
+  8005bb:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  8005bf:	75 24                	jne    8005e5 <strtol+0x83>
+  8005c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005c4:	0f b6 00             	movzbl (%eax),%eax
+  8005c7:	3c 30                	cmp    $0x30,%al
+  8005c9:	75 1a                	jne    8005e5 <strtol+0x83>
+  8005cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ce:	83 c0 01             	add    $0x1,%eax
+  8005d1:	0f b6 00             	movzbl (%eax),%eax
+  8005d4:	3c 78                	cmp    $0x78,%al
+  8005d6:	75 0d                	jne    8005e5 <strtol+0x83>
+        s += 2, base = 16;
+  8005d8:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005dc:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005e3:	eb 2a                	jmp    80060f <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005e5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005e9:	75 17                	jne    800602 <strtol+0xa0>
+  8005eb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ee:	0f b6 00             	movzbl (%eax),%eax
+  8005f1:	3c 30                	cmp    $0x30,%al
+  8005f3:	75 0d                	jne    800602 <strtol+0xa0>
+        s ++, base = 8;
+  8005f5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005f9:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800600:	eb 0d                	jmp    80060f <strtol+0xad>
+    }
+    else if (base == 0) {
+  800602:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800606:	75 07                	jne    80060f <strtol+0xad>
+        base = 10;
+  800608:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  80060f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800612:	0f b6 00             	movzbl (%eax),%eax
+  800615:	3c 2f                	cmp    $0x2f,%al
+  800617:	7e 1b                	jle    800634 <strtol+0xd2>
+  800619:	8b 45 08             	mov    0x8(%ebp),%eax
+  80061c:	0f b6 00             	movzbl (%eax),%eax
+  80061f:	3c 39                	cmp    $0x39,%al
+  800621:	7f 11                	jg     800634 <strtol+0xd2>
+            dig = *s - '0';
+  800623:	8b 45 08             	mov    0x8(%ebp),%eax
+  800626:	0f b6 00             	movzbl (%eax),%eax
+  800629:	0f be c0             	movsbl %al,%eax
+  80062c:	83 e8 30             	sub    $0x30,%eax
+  80062f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800632:	eb 48                	jmp    80067c <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800634:	8b 45 08             	mov    0x8(%ebp),%eax
+  800637:	0f b6 00             	movzbl (%eax),%eax
+  80063a:	3c 60                	cmp    $0x60,%al
+  80063c:	7e 1b                	jle    800659 <strtol+0xf7>
+  80063e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800641:	0f b6 00             	movzbl (%eax),%eax
+  800644:	3c 7a                	cmp    $0x7a,%al
+  800646:	7f 11                	jg     800659 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800648:	8b 45 08             	mov    0x8(%ebp),%eax
+  80064b:	0f b6 00             	movzbl (%eax),%eax
+  80064e:	0f be c0             	movsbl %al,%eax
+  800651:	83 e8 57             	sub    $0x57,%eax
+  800654:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800657:	eb 23                	jmp    80067c <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800659:	8b 45 08             	mov    0x8(%ebp),%eax
+  80065c:	0f b6 00             	movzbl (%eax),%eax
+  80065f:	3c 40                	cmp    $0x40,%al
+  800661:	7e 3c                	jle    80069f <strtol+0x13d>
+  800663:	8b 45 08             	mov    0x8(%ebp),%eax
+  800666:	0f b6 00             	movzbl (%eax),%eax
+  800669:	3c 5a                	cmp    $0x5a,%al
+  80066b:	7f 32                	jg     80069f <strtol+0x13d>
+            dig = *s - 'A' + 10;
+  80066d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800670:	0f b6 00             	movzbl (%eax),%eax
+  800673:	0f be c0             	movsbl %al,%eax
+  800676:	83 e8 37             	sub    $0x37,%eax
+  800679:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  80067c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80067f:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800682:	7d 1a                	jge    80069e <strtol+0x13c>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  800684:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800688:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80068b:	0f af 45 10          	imul   0x10(%ebp),%eax
+  80068f:	89 c2                	mov    %eax,%edx
+  800691:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800694:	01 d0                	add    %edx,%eax
+  800696:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800699:	e9 71 ff ff ff       	jmp    80060f <strtol+0xad>
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+            break;
+  80069e:	90                   	nop
+        }
+        s ++, val = (val * base) + dig;
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  80069f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8006a3:	74 08                	je     8006ad <strtol+0x14b>
+        *endptr = (char *) s;
+  8006a5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006a8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006ab:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  8006ad:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  8006b1:	74 07                	je     8006ba <strtol+0x158>
+  8006b3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006b6:	f7 d8                	neg    %eax
+  8006b8:	eb 03                	jmp    8006bd <strtol+0x15b>
+  8006ba:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  8006bd:	c9                   	leave  
+  8006be:	c3                   	ret    
+
+008006bf <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  8006bf:	55                   	push   %ebp
+  8006c0:	89 e5                	mov    %esp,%ebp
+  8006c2:	57                   	push   %edi
+  8006c3:	83 ec 24             	sub    $0x24,%esp
+  8006c6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006c9:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006cc:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006d0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006d3:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006d6:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006d9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006df:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006e2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006e6:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006e9:	89 d7                	mov    %edx,%edi
+  8006eb:	f3 aa                	rep stos %al,%es:(%edi)
+  8006ed:	89 fa                	mov    %edi,%edx
+  8006ef:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8006f2:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  8006f5:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006f8:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  8006f9:	83 c4 24             	add    $0x24,%esp
+  8006fc:	5f                   	pop    %edi
+  8006fd:	5d                   	pop    %ebp
+  8006fe:	c3                   	ret    
+
+008006ff <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  8006ff:	55                   	push   %ebp
+  800700:	89 e5                	mov    %esp,%ebp
+  800702:	57                   	push   %edi
+  800703:	56                   	push   %esi
+  800704:	53                   	push   %ebx
+  800705:	83 ec 30             	sub    $0x30,%esp
+  800708:	8b 45 08             	mov    0x8(%ebp),%eax
+  80070b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80070e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800711:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800714:	8b 45 10             	mov    0x10(%ebp),%eax
+  800717:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  80071a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80071d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800720:	73 42                	jae    800764 <memmove+0x65>
+  800722:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800725:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800728:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80072b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80072e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800731:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800734:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800737:	c1 e8 02             	shr    $0x2,%eax
+  80073a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  80073c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  80073f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800742:	89 d7                	mov    %edx,%edi
+  800744:	89 c6                	mov    %eax,%esi
+  800746:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800748:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  80074b:	83 e1 03             	and    $0x3,%ecx
+  80074e:	74 02                	je     800752 <memmove+0x53>
+  800750:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800752:	89 f0                	mov    %esi,%eax
+  800754:	89 fa                	mov    %edi,%edx
+  800756:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800759:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  80075c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  80075f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  800762:	eb 36                	jmp    80079a <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800764:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800767:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80076a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80076d:	01 c2                	add    %eax,%edx
+  80076f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800772:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800775:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800778:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  80077b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80077e:	89 c1                	mov    %eax,%ecx
+  800780:	89 d8                	mov    %ebx,%eax
+  800782:	89 d6                	mov    %edx,%esi
+  800784:	89 c7                	mov    %eax,%edi
+  800786:	fd                   	std    
+  800787:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800789:	fc                   	cld    
+  80078a:	89 f8                	mov    %edi,%eax
+  80078c:	89 f2                	mov    %esi,%edx
+  80078e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800791:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800794:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800797:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  80079a:	83 c4 30             	add    $0x30,%esp
+  80079d:	5b                   	pop    %ebx
+  80079e:	5e                   	pop    %esi
+  80079f:	5f                   	pop    %edi
+  8007a0:	5d                   	pop    %ebp
+  8007a1:	c3                   	ret    
+
+008007a2 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  8007a2:	55                   	push   %ebp
+  8007a3:	89 e5                	mov    %esp,%ebp
+  8007a5:	57                   	push   %edi
+  8007a6:	56                   	push   %esi
+  8007a7:	83 ec 20             	sub    $0x20,%esp
+  8007aa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8007b0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007b6:	8b 45 10             	mov    0x10(%ebp),%eax
+  8007b9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  8007bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8007bf:	c1 e8 02             	shr    $0x2,%eax
+  8007c2:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  8007c4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007ca:	89 d7                	mov    %edx,%edi
+  8007cc:	89 c6                	mov    %eax,%esi
+  8007ce:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007d0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007d3:	83 e1 03             	and    $0x3,%ecx
+  8007d6:	74 02                	je     8007da <memcpy+0x38>
+  8007d8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007da:	89 f0                	mov    %esi,%eax
+  8007dc:	89 fa                	mov    %edi,%edx
+  8007de:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007e1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007e4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  8007e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007ea:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007eb:	83 c4 20             	add    $0x20,%esp
+  8007ee:	5e                   	pop    %esi
+  8007ef:	5f                   	pop    %edi
+  8007f0:	5d                   	pop    %ebp
+  8007f1:	c3                   	ret    
+
+008007f2 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  8007f2:	55                   	push   %ebp
+  8007f3:	89 e5                	mov    %esp,%ebp
+  8007f5:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  8007f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007fb:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  8007fe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800801:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800804:	eb 30                	jmp    800836 <memcmp+0x44>
+        if (*s1 != *s2) {
+  800806:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800809:	0f b6 10             	movzbl (%eax),%edx
+  80080c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80080f:	0f b6 00             	movzbl (%eax),%eax
+  800812:	38 c2                	cmp    %al,%dl
+  800814:	74 18                	je     80082e <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800816:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800819:	0f b6 00             	movzbl (%eax),%eax
+  80081c:	0f b6 d0             	movzbl %al,%edx
+  80081f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800822:	0f b6 00             	movzbl (%eax),%eax
+  800825:	0f b6 c0             	movzbl %al,%eax
+  800828:	29 c2                	sub    %eax,%edx
+  80082a:	89 d0                	mov    %edx,%eax
+  80082c:	eb 1a                	jmp    800848 <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  80082e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800832:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800836:	8b 45 10             	mov    0x10(%ebp),%eax
+  800839:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80083c:	89 55 10             	mov    %edx,0x10(%ebp)
+  80083f:	85 c0                	test   %eax,%eax
+  800841:	75 c3                	jne    800806 <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800843:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800848:	c9                   	leave  
+  800849:	c3                   	ret    
+
+0080084a <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  80084a:	55                   	push   %ebp
+  80084b:	89 e5                	mov    %esp,%ebp
+  80084d:	83 ec 38             	sub    $0x38,%esp
+  800850:	8b 45 10             	mov    0x10(%ebp),%eax
+  800853:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800856:	8b 45 14             	mov    0x14(%ebp),%eax
+  800859:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80085c:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  80085f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800862:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800865:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800868:	8b 45 18             	mov    0x18(%ebp),%eax
+  80086b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  80086e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800871:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800874:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800877:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  80087a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80087d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800880:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800884:	74 1c                	je     8008a2 <printnum+0x58>
+  800886:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800889:	ba 00 00 00 00       	mov    $0x0,%edx
+  80088e:	f7 75 e4             	divl   -0x1c(%ebp)
+  800891:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800894:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800897:	ba 00 00 00 00       	mov    $0x0,%edx
+  80089c:	f7 75 e4             	divl   -0x1c(%ebp)
+  80089f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008a2:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008a8:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008ab:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8008ae:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8008b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008b4:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8008b7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8008ba:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8008bd:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8008c0:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8008c3:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008c6:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008cb:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008ce:	77 41                	ja     800911 <printnum+0xc7>
+  8008d0:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008d3:	72 05                	jb     8008da <printnum+0x90>
+  8008d5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  8008d8:	77 37                	ja     800911 <printnum+0xc7>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008da:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008dd:	83 e8 01             	sub    $0x1,%eax
+  8008e0:	83 ec 04             	sub    $0x4,%esp
+  8008e3:	ff 75 20             	pushl  0x20(%ebp)
+  8008e6:	50                   	push   %eax
+  8008e7:	ff 75 18             	pushl  0x18(%ebp)
+  8008ea:	ff 75 ec             	pushl  -0x14(%ebp)
+  8008ed:	ff 75 e8             	pushl  -0x18(%ebp)
+  8008f0:	ff 75 0c             	pushl  0xc(%ebp)
+  8008f3:	ff 75 08             	pushl  0x8(%ebp)
+  8008f6:	e8 4f ff ff ff       	call   80084a <printnum>
+  8008fb:	83 c4 20             	add    $0x20,%esp
+  8008fe:	eb 1b                	jmp    80091b <printnum+0xd1>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800900:	83 ec 08             	sub    $0x8,%esp
+  800903:	ff 75 0c             	pushl  0xc(%ebp)
+  800906:	ff 75 20             	pushl  0x20(%ebp)
+  800909:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090c:	ff d0                	call   *%eax
+  80090e:	83 c4 10             	add    $0x10,%esp
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  800911:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  800915:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  800919:	7f e5                	jg     800900 <printnum+0xb6>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  80091b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  80091e:	05 04 11 80 00       	add    $0x801104,%eax
+  800923:	0f b6 00             	movzbl (%eax),%eax
+  800926:	0f be c0             	movsbl %al,%eax
+  800929:	83 ec 08             	sub    $0x8,%esp
+  80092c:	ff 75 0c             	pushl  0xc(%ebp)
+  80092f:	50                   	push   %eax
+  800930:	8b 45 08             	mov    0x8(%ebp),%eax
+  800933:	ff d0                	call   *%eax
+  800935:	83 c4 10             	add    $0x10,%esp
+}
+  800938:	90                   	nop
+  800939:	c9                   	leave  
+  80093a:	c3                   	ret    
+
+0080093b <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  80093b:	55                   	push   %ebp
+  80093c:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  80093e:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800942:	7e 14                	jle    800958 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  800944:	8b 45 08             	mov    0x8(%ebp),%eax
+  800947:	8b 00                	mov    (%eax),%eax
+  800949:	8d 48 08             	lea    0x8(%eax),%ecx
+  80094c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80094f:	89 0a                	mov    %ecx,(%edx)
+  800951:	8b 50 04             	mov    0x4(%eax),%edx
+  800954:	8b 00                	mov    (%eax),%eax
+  800956:	eb 30                	jmp    800988 <getuint+0x4d>
+    }
+    else if (lflag) {
+  800958:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80095c:	74 16                	je     800974 <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  80095e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800961:	8b 00                	mov    (%eax),%eax
+  800963:	8d 48 04             	lea    0x4(%eax),%ecx
+  800966:	8b 55 08             	mov    0x8(%ebp),%edx
+  800969:	89 0a                	mov    %ecx,(%edx)
+  80096b:	8b 00                	mov    (%eax),%eax
+  80096d:	ba 00 00 00 00       	mov    $0x0,%edx
+  800972:	eb 14                	jmp    800988 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  800974:	8b 45 08             	mov    0x8(%ebp),%eax
+  800977:	8b 00                	mov    (%eax),%eax
+  800979:	8d 48 04             	lea    0x4(%eax),%ecx
+  80097c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80097f:	89 0a                	mov    %ecx,(%edx)
+  800981:	8b 00                	mov    (%eax),%eax
+  800983:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800988:	5d                   	pop    %ebp
+  800989:	c3                   	ret    
+
+0080098a <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  80098a:	55                   	push   %ebp
+  80098b:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  80098d:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800991:	7e 14                	jle    8009a7 <getint+0x1d>
+        return va_arg(*ap, long long);
+  800993:	8b 45 08             	mov    0x8(%ebp),%eax
+  800996:	8b 00                	mov    (%eax),%eax
+  800998:	8d 48 08             	lea    0x8(%eax),%ecx
+  80099b:	8b 55 08             	mov    0x8(%ebp),%edx
+  80099e:	89 0a                	mov    %ecx,(%edx)
+  8009a0:	8b 50 04             	mov    0x4(%eax),%edx
+  8009a3:	8b 00                	mov    (%eax),%eax
+  8009a5:	eb 28                	jmp    8009cf <getint+0x45>
+    }
+    else if (lflag) {
+  8009a7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8009ab:	74 12                	je     8009bf <getint+0x35>
+        return va_arg(*ap, long);
+  8009ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b0:	8b 00                	mov    (%eax),%eax
+  8009b2:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009b5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009b8:	89 0a                	mov    %ecx,(%edx)
+  8009ba:	8b 00                	mov    (%eax),%eax
+  8009bc:	99                   	cltd   
+  8009bd:	eb 10                	jmp    8009cf <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  8009bf:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009c2:	8b 00                	mov    (%eax),%eax
+  8009c4:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009c7:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009ca:	89 0a                	mov    %ecx,(%edx)
+  8009cc:	8b 00                	mov    (%eax),%eax
+  8009ce:	99                   	cltd   
+    }
+}
+  8009cf:	5d                   	pop    %ebp
+  8009d0:	c3                   	ret    
+
+008009d1 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009d1:	55                   	push   %ebp
+  8009d2:	89 e5                	mov    %esp,%ebp
+  8009d4:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009d7:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009da:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8009e0:	50                   	push   %eax
+  8009e1:	ff 75 10             	pushl  0x10(%ebp)
+  8009e4:	ff 75 0c             	pushl  0xc(%ebp)
+  8009e7:	ff 75 08             	pushl  0x8(%ebp)
+  8009ea:	e8 06 00 00 00       	call   8009f5 <vprintfmt>
+  8009ef:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8009f2:	90                   	nop
+  8009f3:	c9                   	leave  
+  8009f4:	c3                   	ret    
+
+008009f5 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8009f5:	55                   	push   %ebp
+  8009f6:	89 e5                	mov    %esp,%ebp
+  8009f8:	56                   	push   %esi
+  8009f9:	53                   	push   %ebx
+  8009fa:	83 ec 20             	sub    $0x20,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009fd:	eb 17                	jmp    800a16 <vprintfmt+0x21>
+            if (ch == '\0') {
+  8009ff:	85 db                	test   %ebx,%ebx
+  800a01:	0f 84 8e 03 00 00    	je     800d95 <vprintfmt+0x3a0>
+                return;
+            }
+            putch(ch, putdat);
+  800a07:	83 ec 08             	sub    $0x8,%esp
+  800a0a:	ff 75 0c             	pushl  0xc(%ebp)
+  800a0d:	53                   	push   %ebx
+  800a0e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a11:	ff d0                	call   *%eax
+  800a13:	83 c4 10             	add    $0x10,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a16:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a19:	8d 50 01             	lea    0x1(%eax),%edx
+  800a1c:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a1f:	0f b6 00             	movzbl (%eax),%eax
+  800a22:	0f b6 d8             	movzbl %al,%ebx
+  800a25:	83 fb 25             	cmp    $0x25,%ebx
+  800a28:	75 d5                	jne    8009ff <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a2a:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a2e:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a38:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a3b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a42:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a45:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a48:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a4b:	8d 50 01             	lea    0x1(%eax),%edx
+  800a4e:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a51:	0f b6 00             	movzbl (%eax),%eax
+  800a54:	0f b6 d8             	movzbl %al,%ebx
+  800a57:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a5a:	83 f8 55             	cmp    $0x55,%eax
+  800a5d:	0f 87 05 03 00 00    	ja     800d68 <vprintfmt+0x373>
+  800a63:	8b 04 85 28 11 80 00 	mov    0x801128(,%eax,4),%eax
+  800a6a:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a6c:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a70:	eb d6                	jmp    800a48 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a72:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800a76:	eb d0                	jmp    800a48 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a78:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800a7f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a82:	89 d0                	mov    %edx,%eax
+  800a84:	c1 e0 02             	shl    $0x2,%eax
+  800a87:	01 d0                	add    %edx,%eax
+  800a89:	01 c0                	add    %eax,%eax
+  800a8b:	01 d8                	add    %ebx,%eax
+  800a8d:	83 e8 30             	sub    $0x30,%eax
+  800a90:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800a93:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a96:	0f b6 00             	movzbl (%eax),%eax
+  800a99:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800a9c:	83 fb 2f             	cmp    $0x2f,%ebx
+  800a9f:	7e 39                	jle    800ada <vprintfmt+0xe5>
+  800aa1:	83 fb 39             	cmp    $0x39,%ebx
+  800aa4:	7f 34                	jg     800ada <vprintfmt+0xe5>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800aa6:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  800aaa:	eb d3                	jmp    800a7f <vprintfmt+0x8a>
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800aac:	8b 45 14             	mov    0x14(%ebp),%eax
+  800aaf:	8d 50 04             	lea    0x4(%eax),%edx
+  800ab2:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ab5:	8b 00                	mov    (%eax),%eax
+  800ab7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800aba:	eb 1f                	jmp    800adb <vprintfmt+0xe6>
+
+        case '.':
+            if (width < 0)
+  800abc:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ac0:	79 86                	jns    800a48 <vprintfmt+0x53>
+                width = 0;
+  800ac2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800ac9:	e9 7a ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800ace:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800ad5:	e9 6e ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+            goto process_precision;
+  800ada:	90                   	nop
+        case '#':
+            altflag = 1;
+            goto reswitch;
+
+        process_precision:
+            if (width < 0)
+  800adb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800adf:	0f 89 63 ff ff ff    	jns    800a48 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800ae5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ae8:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800aeb:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800af2:	e9 51 ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800af7:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800afb:	e9 48 ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800b00:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b03:	8d 50 04             	lea    0x4(%eax),%edx
+  800b06:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b09:	8b 00                	mov    (%eax),%eax
+  800b0b:	83 ec 08             	sub    $0x8,%esp
+  800b0e:	ff 75 0c             	pushl  0xc(%ebp)
+  800b11:	50                   	push   %eax
+  800b12:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b15:	ff d0                	call   *%eax
+  800b17:	83 c4 10             	add    $0x10,%esp
+            break;
+  800b1a:	e9 71 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800b1f:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b22:	8d 50 04             	lea    0x4(%eax),%edx
+  800b25:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b28:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b2a:	85 db                	test   %ebx,%ebx
+  800b2c:	79 02                	jns    800b30 <vprintfmt+0x13b>
+                err = -err;
+  800b2e:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b30:	83 fb 18             	cmp    $0x18,%ebx
+  800b33:	7f 0b                	jg     800b40 <vprintfmt+0x14b>
+  800b35:	8b 34 9d a0 10 80 00 	mov    0x8010a0(,%ebx,4),%esi
+  800b3c:	85 f6                	test   %esi,%esi
+  800b3e:	75 19                	jne    800b59 <vprintfmt+0x164>
+                printfmt(putch, putdat, "error %d", err);
+  800b40:	53                   	push   %ebx
+  800b41:	68 15 11 80 00       	push   $0x801115
+  800b46:	ff 75 0c             	pushl  0xc(%ebp)
+  800b49:	ff 75 08             	pushl  0x8(%ebp)
+  800b4c:	e8 80 fe ff ff       	call   8009d1 <printfmt>
+  800b51:	83 c4 10             	add    $0x10,%esp
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b54:	e9 37 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  800b59:	56                   	push   %esi
+  800b5a:	68 1e 11 80 00       	push   $0x80111e
+  800b5f:	ff 75 0c             	pushl  0xc(%ebp)
+  800b62:	ff 75 08             	pushl  0x8(%ebp)
+  800b65:	e8 67 fe ff ff       	call   8009d1 <printfmt>
+  800b6a:	83 c4 10             	add    $0x10,%esp
+            }
+            break;
+  800b6d:	e9 1e 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800b72:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b75:	8d 50 04             	lea    0x4(%eax),%edx
+  800b78:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b7b:	8b 30                	mov    (%eax),%esi
+  800b7d:	85 f6                	test   %esi,%esi
+  800b7f:	75 05                	jne    800b86 <vprintfmt+0x191>
+                p = "(null)";
+  800b81:	be 21 11 80 00       	mov    $0x801121,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800b86:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b8a:	7e 76                	jle    800c02 <vprintfmt+0x20d>
+  800b8c:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800b90:	74 70                	je     800c02 <vprintfmt+0x20d>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b92:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b95:	83 ec 08             	sub    $0x8,%esp
+  800b98:	50                   	push   %eax
+  800b99:	56                   	push   %esi
+  800b9a:	e8 17 f8 ff ff       	call   8003b6 <strnlen>
+  800b9f:	83 c4 10             	add    $0x10,%esp
+  800ba2:	89 c2                	mov    %eax,%edx
+  800ba4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ba7:	29 d0                	sub    %edx,%eax
+  800ba9:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800bac:	eb 17                	jmp    800bc5 <vprintfmt+0x1d0>
+                    putch(padc, putdat);
+  800bae:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800bb2:	83 ec 08             	sub    $0x8,%esp
+  800bb5:	ff 75 0c             	pushl  0xc(%ebp)
+  800bb8:	50                   	push   %eax
+  800bb9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bbc:	ff d0                	call   *%eax
+  800bbe:	83 c4 10             	add    $0x10,%esp
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bc1:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800bc5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800bc9:	7f e3                	jg     800bae <vprintfmt+0x1b9>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bcb:	eb 35                	jmp    800c02 <vprintfmt+0x20d>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800bcd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800bd1:	74 1c                	je     800bef <vprintfmt+0x1fa>
+  800bd3:	83 fb 1f             	cmp    $0x1f,%ebx
+  800bd6:	7e 05                	jle    800bdd <vprintfmt+0x1e8>
+  800bd8:	83 fb 7e             	cmp    $0x7e,%ebx
+  800bdb:	7e 12                	jle    800bef <vprintfmt+0x1fa>
+                    putch('?', putdat);
+  800bdd:	83 ec 08             	sub    $0x8,%esp
+  800be0:	ff 75 0c             	pushl  0xc(%ebp)
+  800be3:	6a 3f                	push   $0x3f
+  800be5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800be8:	ff d0                	call   *%eax
+  800bea:	83 c4 10             	add    $0x10,%esp
+  800bed:	eb 0f                	jmp    800bfe <vprintfmt+0x209>
+                }
+                else {
+                    putch(ch, putdat);
+  800bef:	83 ec 08             	sub    $0x8,%esp
+  800bf2:	ff 75 0c             	pushl  0xc(%ebp)
+  800bf5:	53                   	push   %ebx
+  800bf6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bf9:	ff d0                	call   *%eax
+  800bfb:	83 c4 10             	add    $0x10,%esp
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bfe:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c02:	89 f0                	mov    %esi,%eax
+  800c04:	8d 70 01             	lea    0x1(%eax),%esi
+  800c07:	0f b6 00             	movzbl (%eax),%eax
+  800c0a:	0f be d8             	movsbl %al,%ebx
+  800c0d:	85 db                	test   %ebx,%ebx
+  800c0f:	74 26                	je     800c37 <vprintfmt+0x242>
+  800c11:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c15:	78 b6                	js     800bcd <vprintfmt+0x1d8>
+  800c17:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  800c1b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c1f:	79 ac                	jns    800bcd <vprintfmt+0x1d8>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c21:	eb 14                	jmp    800c37 <vprintfmt+0x242>
+                putch(' ', putdat);
+  800c23:	83 ec 08             	sub    $0x8,%esp
+  800c26:	ff 75 0c             	pushl  0xc(%ebp)
+  800c29:	6a 20                	push   $0x20
+  800c2b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2e:	ff d0                	call   *%eax
+  800c30:	83 c4 10             	add    $0x10,%esp
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c33:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c37:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c3b:	7f e6                	jg     800c23 <vprintfmt+0x22e>
+                putch(' ', putdat);
+            }
+            break;
+  800c3d:	e9 4e 01 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c42:	83 ec 08             	sub    $0x8,%esp
+  800c45:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c48:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c4b:	50                   	push   %eax
+  800c4c:	e8 39 fd ff ff       	call   80098a <getint>
+  800c51:	83 c4 10             	add    $0x10,%esp
+  800c54:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c57:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c5d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c60:	85 d2                	test   %edx,%edx
+  800c62:	79 23                	jns    800c87 <vprintfmt+0x292>
+                putch('-', putdat);
+  800c64:	83 ec 08             	sub    $0x8,%esp
+  800c67:	ff 75 0c             	pushl  0xc(%ebp)
+  800c6a:	6a 2d                	push   $0x2d
+  800c6c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c6f:	ff d0                	call   *%eax
+  800c71:	83 c4 10             	add    $0x10,%esp
+                num = -(long long)num;
+  800c74:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c77:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c7a:	f7 d8                	neg    %eax
+  800c7c:	83 d2 00             	adc    $0x0,%edx
+  800c7f:	f7 da                	neg    %edx
+  800c81:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c84:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800c87:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c8e:	e9 9f 00 00 00       	jmp    800d32 <vprintfmt+0x33d>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800c93:	83 ec 08             	sub    $0x8,%esp
+  800c96:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c99:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c9c:	50                   	push   %eax
+  800c9d:	e8 99 fc ff ff       	call   80093b <getuint>
+  800ca2:	83 c4 10             	add    $0x10,%esp
+  800ca5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ca8:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800cab:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cb2:	eb 7e                	jmp    800d32 <vprintfmt+0x33d>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800cb4:	83 ec 08             	sub    $0x8,%esp
+  800cb7:	ff 75 e0             	pushl  -0x20(%ebp)
+  800cba:	8d 45 14             	lea    0x14(%ebp),%eax
+  800cbd:	50                   	push   %eax
+  800cbe:	e8 78 fc ff ff       	call   80093b <getuint>
+  800cc3:	83 c4 10             	add    $0x10,%esp
+  800cc6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cc9:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800ccc:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800cd3:	eb 5d                	jmp    800d32 <vprintfmt+0x33d>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800cd5:	83 ec 08             	sub    $0x8,%esp
+  800cd8:	ff 75 0c             	pushl  0xc(%ebp)
+  800cdb:	6a 30                	push   $0x30
+  800cdd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ce0:	ff d0                	call   *%eax
+  800ce2:	83 c4 10             	add    $0x10,%esp
+            putch('x', putdat);
+  800ce5:	83 ec 08             	sub    $0x8,%esp
+  800ce8:	ff 75 0c             	pushl  0xc(%ebp)
+  800ceb:	6a 78                	push   $0x78
+  800ced:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cf0:	ff d0                	call   *%eax
+  800cf2:	83 c4 10             	add    $0x10,%esp
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800cf5:	8b 45 14             	mov    0x14(%ebp),%eax
+  800cf8:	8d 50 04             	lea    0x4(%eax),%edx
+  800cfb:	89 55 14             	mov    %edx,0x14(%ebp)
+  800cfe:	8b 00                	mov    (%eax),%eax
+  800d00:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d03:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800d0a:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800d11:	eb 1f                	jmp    800d32 <vprintfmt+0x33d>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800d13:	83 ec 08             	sub    $0x8,%esp
+  800d16:	ff 75 e0             	pushl  -0x20(%ebp)
+  800d19:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d1c:	50                   	push   %eax
+  800d1d:	e8 19 fc ff ff       	call   80093b <getuint>
+  800d22:	83 c4 10             	add    $0x10,%esp
+  800d25:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d28:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d2b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d32:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d36:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d39:	83 ec 04             	sub    $0x4,%esp
+  800d3c:	52                   	push   %edx
+  800d3d:	ff 75 e8             	pushl  -0x18(%ebp)
+  800d40:	50                   	push   %eax
+  800d41:	ff 75 f4             	pushl  -0xc(%ebp)
+  800d44:	ff 75 f0             	pushl  -0x10(%ebp)
+  800d47:	ff 75 0c             	pushl  0xc(%ebp)
+  800d4a:	ff 75 08             	pushl  0x8(%ebp)
+  800d4d:	e8 f8 fa ff ff       	call   80084a <printnum>
+  800d52:	83 c4 20             	add    $0x20,%esp
+            break;
+  800d55:	eb 39                	jmp    800d90 <vprintfmt+0x39b>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800d57:	83 ec 08             	sub    $0x8,%esp
+  800d5a:	ff 75 0c             	pushl  0xc(%ebp)
+  800d5d:	53                   	push   %ebx
+  800d5e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d61:	ff d0                	call   *%eax
+  800d63:	83 c4 10             	add    $0x10,%esp
+            break;
+  800d66:	eb 28                	jmp    800d90 <vprintfmt+0x39b>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800d68:	83 ec 08             	sub    $0x8,%esp
+  800d6b:	ff 75 0c             	pushl  0xc(%ebp)
+  800d6e:	6a 25                	push   $0x25
+  800d70:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d73:	ff d0                	call   *%eax
+  800d75:	83 c4 10             	add    $0x10,%esp
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800d78:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d7c:	eb 04                	jmp    800d82 <vprintfmt+0x38d>
+  800d7e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d82:	8b 45 10             	mov    0x10(%ebp),%eax
+  800d85:	83 e8 01             	sub    $0x1,%eax
+  800d88:	0f b6 00             	movzbl (%eax),%eax
+  800d8b:	3c 25                	cmp    $0x25,%al
+  800d8d:	75 ef                	jne    800d7e <vprintfmt+0x389>
+                /* do nothing */;
+            break;
+  800d8f:	90                   	nop
+        }
+    }
+  800d90:	e9 68 fc ff ff       	jmp    8009fd <vprintfmt+0x8>
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+            if (ch == '\0') {
+                return;
+  800d95:	90                   	nop
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  800d96:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  800d99:	5b                   	pop    %ebx
+  800d9a:	5e                   	pop    %esi
+  800d9b:	5d                   	pop    %ebp
+  800d9c:	c3                   	ret    
+
+00800d9d <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800d9d:	55                   	push   %ebp
+  800d9e:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800da0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800da3:	8b 40 08             	mov    0x8(%eax),%eax
+  800da6:	8d 50 01             	lea    0x1(%eax),%edx
+  800da9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dac:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800daf:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db2:	8b 10                	mov    (%eax),%edx
+  800db4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db7:	8b 40 04             	mov    0x4(%eax),%eax
+  800dba:	39 c2                	cmp    %eax,%edx
+  800dbc:	73 12                	jae    800dd0 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800dbe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dc1:	8b 00                	mov    (%eax),%eax
+  800dc3:	8d 48 01             	lea    0x1(%eax),%ecx
+  800dc6:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800dc9:	89 0a                	mov    %ecx,(%edx)
+  800dcb:	8b 55 08             	mov    0x8(%ebp),%edx
+  800dce:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800dd0:	90                   	nop
+  800dd1:	5d                   	pop    %ebp
+  800dd2:	c3                   	ret    
+
+00800dd3 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800dd3:	55                   	push   %ebp
+  800dd4:	89 e5                	mov    %esp,%ebp
+  800dd6:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800dd9:	8d 45 14             	lea    0x14(%ebp),%eax
+  800ddc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800ddf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800de2:	50                   	push   %eax
+  800de3:	ff 75 10             	pushl  0x10(%ebp)
+  800de6:	ff 75 0c             	pushl  0xc(%ebp)
+  800de9:	ff 75 08             	pushl  0x8(%ebp)
+  800dec:	e8 0b 00 00 00       	call   800dfc <vsnprintf>
+  800df1:	83 c4 10             	add    $0x10,%esp
+  800df4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800df7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800dfa:	c9                   	leave  
+  800dfb:	c3                   	ret    
+
+00800dfc <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800dfc:	55                   	push   %ebp
+  800dfd:	89 e5                	mov    %esp,%ebp
+  800dff:	83 ec 18             	sub    $0x18,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800e02:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e05:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e08:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e0b:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800e0e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e11:	01 d0                	add    %edx,%eax
+  800e13:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e16:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800e1d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800e21:	74 0a                	je     800e2d <vsnprintf+0x31>
+  800e23:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800e26:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e29:	39 c2                	cmp    %eax,%edx
+  800e2b:	76 07                	jbe    800e34 <vsnprintf+0x38>
+        return -E_INVAL;
+  800e2d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e32:	eb 20                	jmp    800e54 <vsnprintf+0x58>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e34:	ff 75 14             	pushl  0x14(%ebp)
+  800e37:	ff 75 10             	pushl  0x10(%ebp)
+  800e3a:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800e3d:	50                   	push   %eax
+  800e3e:	68 9d 0d 80 00       	push   $0x800d9d
+  800e43:	e8 ad fb ff ff       	call   8009f5 <vprintfmt>
+  800e48:	83 c4 10             	add    $0x10,%esp
+    // null terminate the buffer
+    *b.buf = '\0';
+  800e4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e4e:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800e51:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e54:	c9                   	leave  
+  800e55:	c3                   	ret    
+
+00800e56 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800e56:	55                   	push   %ebp
+  800e57:	89 e5                	mov    %esp,%ebp
+  800e59:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800e5c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e5f:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800e65:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800e68:	b8 20 00 00 00       	mov    $0x20,%eax
+  800e6d:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800e70:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800e73:	89 c1                	mov    %eax,%ecx
+  800e75:	d3 ea                	shr    %cl,%edx
+  800e77:	89 d0                	mov    %edx,%eax
+}
+  800e79:	c9                   	leave  
+  800e7a:	c3                   	ret    
+
+00800e7b <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800e7b:	55                   	push   %ebp
+  800e7c:	89 e5                	mov    %esp,%ebp
+  800e7e:	57                   	push   %edi
+  800e7f:	56                   	push   %esi
+  800e80:	53                   	push   %ebx
+  800e81:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800e84:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e89:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800e8f:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800e95:	6b f0 05             	imul   $0x5,%eax,%esi
+  800e98:	01 fe                	add    %edi,%esi
+  800e9a:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800e9f:	f7 e7                	mul    %edi
+  800ea1:	01 d6                	add    %edx,%esi
+  800ea3:	89 f2                	mov    %esi,%edx
+  800ea5:	83 c0 0b             	add    $0xb,%eax
+  800ea8:	83 d2 00             	adc    $0x0,%edx
+  800eab:	89 c7                	mov    %eax,%edi
+  800ead:	83 e7 ff             	and    $0xffffffff,%edi
+  800eb0:	89 f9                	mov    %edi,%ecx
+  800eb2:	0f b7 da             	movzwl %dx,%ebx
+  800eb5:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800ebb:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800ec1:	a1 00 20 80 00       	mov    0x802000,%eax
+  800ec6:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ecc:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ed0:	c1 ea 0c             	shr    $0xc,%edx
+  800ed3:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ed6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800ed9:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ee0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ee3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ee6:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ee9:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800eec:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eef:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ef2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ef6:	74 1c                	je     800f14 <rand+0x99>
+  800ef8:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800efb:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f00:	f7 75 dc             	divl   -0x24(%ebp)
+  800f03:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800f06:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f09:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f0e:	f7 75 dc             	divl   -0x24(%ebp)
+  800f11:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800f14:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f17:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800f1a:	f7 75 dc             	divl   -0x24(%ebp)
+  800f1d:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f20:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f23:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f26:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800f29:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f2c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f2f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800f32:	83 c4 24             	add    $0x24,%esp
+  800f35:	5b                   	pop    %ebx
+  800f36:	5e                   	pop    %esi
+  800f37:	5f                   	pop    %edi
+  800f38:	5d                   	pop    %ebp
+  800f39:	c3                   	ret    
+
+00800f3a <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800f3a:	55                   	push   %ebp
+  800f3b:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800f3d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f40:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f45:	a3 00 20 80 00       	mov    %eax,0x802000
+  800f4a:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800f50:	90                   	nop
+  800f51:	5d                   	pop    %ebp
+  800f52:	c3                   	ret    
+
+00800f53 <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  800f53:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  800f57:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f5a:	ff 71 fc             	pushl  -0x4(%ecx)
+  800f5d:	55                   	push   %ebp
+  800f5e:	89 e5                	mov    %esp,%ebp
+  800f60:	51                   	push   %ecx
+  800f61:	83 ec 04             	sub    $0x4,%esp
+    cprintf("I read %8x from 0.\n", *(unsigned int *)0);
+  800f64:	b8 00 00 00 00       	mov    $0x0,%eax
+  800f69:	8b 00                	mov    (%eax),%eax
+  800f6b:	83 ec 08             	sub    $0x8,%esp
+  800f6e:	50                   	push   %eax
+  800f6f:	68 80 12 80 00       	push   $0x801280
+  800f74:	e8 88 f3 ff ff       	call   800301 <cprintf>
+  800f79:	83 c4 10             	add    $0x10,%esp
+    panic("FAIL: T.T\n");
+  800f7c:	83 ec 04             	sub    $0x4,%esp
+  800f7f:	68 94 12 80 00       	push   $0x801294
+  800f84:	6a 07                	push   $0x7
+  800f86:	68 9f 12 80 00       	push   $0x80129f
+  800f8b:	e8 90 f0 ff ff       	call   800020 <__panic>
diff -r -u -P lab7_original/obj/user/faultread.d lab7/obj/user/faultread.d
--- lab7_original/obj/user/faultread.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/faultread.d	2016-05-06 21:59:27.598122693 +0800
@@ -0,0 +1,2 @@
+obj/user/faultread.o obj/user/faultread.d: user/faultread.c libs/stdio.h \
+ libs/defs.h libs/stdarg.h user/libs/ulib.h
diff -r -u -P lab7_original/obj/user/faultreadkernel.asm lab7/obj/user/faultreadkernel.asm
--- lab7_original/obj/user/faultreadkernel.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/faultreadkernel.asm	2016-05-06 21:59:28.610159582 +0800
@@ -0,0 +1,2615 @@
+
+obj/__user_faultreadkernel.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 18             	sub    $0x18,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	83 ec 04             	sub    $0x4,%esp
+  80002f:	ff 75 0c             	pushl  0xc(%ebp)
+  800032:	ff 75 08             	pushl  0x8(%ebp)
+  800035:	68 a0 0f 80 00       	push   $0x800fa0
+  80003a:	e8 c2 02 00 00       	call   800301 <cprintf>
+  80003f:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800042:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800045:	83 ec 08             	sub    $0x8,%esp
+  800048:	50                   	push   %eax
+  800049:	ff 75 10             	pushl  0x10(%ebp)
+  80004c:	e8 87 02 00 00       	call   8002d8 <vcprintf>
+  800051:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  800054:	83 ec 0c             	sub    $0xc,%esp
+  800057:	68 ba 0f 80 00       	push   $0x800fba
+  80005c:	e8 a0 02 00 00       	call   800301 <cprintf>
+  800061:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	83 ec 0c             	sub    $0xc,%esp
+  800067:	6a f6                	push   $0xfffffff6
+  800069:	e8 5b 01 00 00       	call   8001c9 <exit>
+
+0080006e <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80006e:	55                   	push   %ebp
+  80006f:	89 e5                	mov    %esp,%ebp
+  800071:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800074:	8d 45 14             	lea    0x14(%ebp),%eax
+  800077:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007a:	83 ec 04             	sub    $0x4,%esp
+  80007d:	ff 75 0c             	pushl  0xc(%ebp)
+  800080:	ff 75 08             	pushl  0x8(%ebp)
+  800083:	68 bc 0f 80 00       	push   $0x800fbc
+  800088:	e8 74 02 00 00       	call   800301 <cprintf>
+  80008d:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800090:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800093:	83 ec 08             	sub    $0x8,%esp
+  800096:	50                   	push   %eax
+  800097:	ff 75 10             	pushl  0x10(%ebp)
+  80009a:	e8 39 02 00 00       	call   8002d8 <vcprintf>
+  80009f:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  8000a2:	83 ec 0c             	sub    $0xc,%esp
+  8000a5:	68 ba 0f 80 00       	push   $0x800fba
+  8000aa:	e8 52 02 00 00       	call   800301 <cprintf>
+  8000af:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8000b2:	90                   	nop
+  8000b3:	c9                   	leave  
+  8000b4:	c3                   	ret    
+
+008000b5 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b5:	55                   	push   %ebp
+  8000b6:	89 e5                	mov    %esp,%ebp
+  8000b8:	57                   	push   %edi
+  8000b9:	56                   	push   %esi
+  8000ba:	53                   	push   %ebx
+  8000bb:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000be:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cb:	eb 16                	jmp    8000e3 <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8000cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d0:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d3:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d6:	8b 10                	mov    (%eax),%edx
+  8000d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000db:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000df:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8000e3:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e7:	7e e4                	jle    8000cd <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000e9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ec:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000ef:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f2:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f5:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8000f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fb:	cd 80                	int    $0x80
+  8000fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  800100:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800103:	83 c4 20             	add    $0x20,%esp
+  800106:	5b                   	pop    %ebx
+  800107:	5e                   	pop    %esi
+  800108:	5f                   	pop    %edi
+  800109:	5d                   	pop    %ebp
+  80010a:	c3                   	ret    
+
+0080010b <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010b:	55                   	push   %ebp
+  80010c:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_exit, error_code);
+  80010e:	ff 75 08             	pushl  0x8(%ebp)
+  800111:	6a 01                	push   $0x1
+  800113:	e8 9d ff ff ff       	call   8000b5 <syscall>
+  800118:	83 c4 08             	add    $0x8,%esp
+}
+  80011b:	c9                   	leave  
+  80011c:	c3                   	ret    
+
+0080011d <sys_fork>:
+
+int
+sys_fork(void) {
+  80011d:	55                   	push   %ebp
+  80011e:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_fork);
+  800120:	6a 02                	push   $0x2
+  800122:	e8 8e ff ff ff       	call   8000b5 <syscall>
+  800127:	83 c4 04             	add    $0x4,%esp
+}
+  80012a:	c9                   	leave  
+  80012b:	c3                   	ret    
+
+0080012c <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80012c:	55                   	push   %ebp
+  80012d:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_wait, pid, store);
+  80012f:	ff 75 0c             	pushl  0xc(%ebp)
+  800132:	ff 75 08             	pushl  0x8(%ebp)
+  800135:	6a 03                	push   $0x3
+  800137:	e8 79 ff ff ff       	call   8000b5 <syscall>
+  80013c:	83 c4 0c             	add    $0xc,%esp
+}
+  80013f:	c9                   	leave  
+  800140:	c3                   	ret    
+
+00800141 <sys_yield>:
+
+int
+sys_yield(void) {
+  800141:	55                   	push   %ebp
+  800142:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_yield);
+  800144:	6a 0a                	push   $0xa
+  800146:	e8 6a ff ff ff       	call   8000b5 <syscall>
+  80014b:	83 c4 04             	add    $0x4,%esp
+}
+  80014e:	c9                   	leave  
+  80014f:	c3                   	ret    
+
+00800150 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800150:	55                   	push   %ebp
+  800151:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_kill, pid);
+  800153:	ff 75 08             	pushl  0x8(%ebp)
+  800156:	6a 0c                	push   $0xc
+  800158:	e8 58 ff ff ff       	call   8000b5 <syscall>
+  80015d:	83 c4 08             	add    $0x8,%esp
+}
+  800160:	c9                   	leave  
+  800161:	c3                   	ret    
+
+00800162 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800162:	55                   	push   %ebp
+  800163:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_getpid);
+  800165:	6a 12                	push   $0x12
+  800167:	e8 49 ff ff ff       	call   8000b5 <syscall>
+  80016c:	83 c4 04             	add    $0x4,%esp
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_putc, c);
+  800174:	ff 75 08             	pushl  0x8(%ebp)
+  800177:	6a 1e                	push   $0x1e
+  800179:	e8 37 ff ff ff       	call   8000b5 <syscall>
+  80017e:	83 c4 08             	add    $0x8,%esp
+}
+  800181:	c9                   	leave  
+  800182:	c3                   	ret    
+
+00800183 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800183:	55                   	push   %ebp
+  800184:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_pgdir);
+  800186:	6a 1f                	push   $0x1f
+  800188:	e8 28 ff ff ff       	call   8000b5 <syscall>
+  80018d:	83 c4 04             	add    $0x4,%esp
+}
+  800190:	c9                   	leave  
+  800191:	c3                   	ret    
+
+00800192 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  800192:	55                   	push   %ebp
+  800193:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_gettime);
+  800195:	6a 11                	push   $0x11
+  800197:	e8 19 ff ff ff       	call   8000b5 <syscall>
+  80019c:	83 c4 04             	add    $0x4,%esp
+}
+  80019f:	c9                   	leave  
+  8001a0:	c3                   	ret    
+
+008001a1 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001a1:	55                   	push   %ebp
+  8001a2:	89 e5                	mov    %esp,%ebp
+    syscall(SYS_lab6_set_priority, priority);
+  8001a4:	ff 75 08             	pushl  0x8(%ebp)
+  8001a7:	68 ff 00 00 00       	push   $0xff
+  8001ac:	e8 04 ff ff ff       	call   8000b5 <syscall>
+  8001b1:	83 c4 08             	add    $0x8,%esp
+}
+  8001b4:	90                   	nop
+  8001b5:	c9                   	leave  
+  8001b6:	c3                   	ret    
+
+008001b7 <sys_sleep>:
+
+int
+sys_sleep(unsigned int time) {
+  8001b7:	55                   	push   %ebp
+  8001b8:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_sleep, time);
+  8001ba:	ff 75 08             	pushl  0x8(%ebp)
+  8001bd:	6a 0b                	push   $0xb
+  8001bf:	e8 f1 fe ff ff       	call   8000b5 <syscall>
+  8001c4:	83 c4 08             	add    $0x8,%esp
+}
+  8001c7:	c9                   	leave  
+  8001c8:	c3                   	ret    
+
+008001c9 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001c9:	55                   	push   %ebp
+  8001ca:	89 e5                	mov    %esp,%ebp
+  8001cc:	83 ec 08             	sub    $0x8,%esp
+    sys_exit(error_code);
+  8001cf:	83 ec 0c             	sub    $0xc,%esp
+  8001d2:	ff 75 08             	pushl  0x8(%ebp)
+  8001d5:	e8 31 ff ff ff       	call   80010b <sys_exit>
+  8001da:	83 c4 10             	add    $0x10,%esp
+    cprintf("BUG: exit failed.\n");
+  8001dd:	83 ec 0c             	sub    $0xc,%esp
+  8001e0:	68 d8 0f 80 00       	push   $0x800fd8
+  8001e5:	e8 17 01 00 00       	call   800301 <cprintf>
+  8001ea:	83 c4 10             	add    $0x10,%esp
+    while (1);
+  8001ed:	eb fe                	jmp    8001ed <exit+0x24>
+
+008001ef <fork>:
+}
+
+int
+fork(void) {
+  8001ef:	55                   	push   %ebp
+  8001f0:	89 e5                	mov    %esp,%ebp
+  8001f2:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8001f5:	e8 23 ff ff ff       	call   80011d <sys_fork>
+}
+  8001fa:	c9                   	leave  
+  8001fb:	c3                   	ret    
+
+008001fc <wait>:
+
+int
+wait(void) {
+  8001fc:	55                   	push   %ebp
+  8001fd:	89 e5                	mov    %esp,%ebp
+  8001ff:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(0, NULL);
+  800202:	83 ec 08             	sub    $0x8,%esp
+  800205:	6a 00                	push   $0x0
+  800207:	6a 00                	push   $0x0
+  800209:	e8 1e ff ff ff       	call   80012c <sys_wait>
+  80020e:	83 c4 10             	add    $0x10,%esp
+}
+  800211:	c9                   	leave  
+  800212:	c3                   	ret    
+
+00800213 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800213:	55                   	push   %ebp
+  800214:	89 e5                	mov    %esp,%ebp
+  800216:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(pid, store);
+  800219:	83 ec 08             	sub    $0x8,%esp
+  80021c:	ff 75 0c             	pushl  0xc(%ebp)
+  80021f:	ff 75 08             	pushl  0x8(%ebp)
+  800222:	e8 05 ff ff ff       	call   80012c <sys_wait>
+  800227:	83 c4 10             	add    $0x10,%esp
+}
+  80022a:	c9                   	leave  
+  80022b:	c3                   	ret    
+
+0080022c <yield>:
+
+void
+yield(void) {
+  80022c:	55                   	push   %ebp
+  80022d:	89 e5                	mov    %esp,%ebp
+  80022f:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800232:	e8 0a ff ff ff       	call   800141 <sys_yield>
+}
+  800237:	90                   	nop
+  800238:	c9                   	leave  
+  800239:	c3                   	ret    
+
+0080023a <kill>:
+
+int
+kill(int pid) {
+  80023a:	55                   	push   %ebp
+  80023b:	89 e5                	mov    %esp,%ebp
+  80023d:	83 ec 08             	sub    $0x8,%esp
+    return sys_kill(pid);
+  800240:	83 ec 0c             	sub    $0xc,%esp
+  800243:	ff 75 08             	pushl  0x8(%ebp)
+  800246:	e8 05 ff ff ff       	call   800150 <sys_kill>
+  80024b:	83 c4 10             	add    $0x10,%esp
+}
+  80024e:	c9                   	leave  
+  80024f:	c3                   	ret    
+
+00800250 <getpid>:
+
+int
+getpid(void) {
+  800250:	55                   	push   %ebp
+  800251:	89 e5                	mov    %esp,%ebp
+  800253:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800256:	e8 07 ff ff ff       	call   800162 <sys_getpid>
+}
+  80025b:	c9                   	leave  
+  80025c:	c3                   	ret    
+
+0080025d <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80025d:	55                   	push   %ebp
+  80025e:	89 e5                	mov    %esp,%ebp
+  800260:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800263:	e8 1b ff ff ff       	call   800183 <sys_pgdir>
+}
+  800268:	90                   	nop
+  800269:	c9                   	leave  
+  80026a:	c3                   	ret    
+
+0080026b <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80026b:	55                   	push   %ebp
+  80026c:	89 e5                	mov    %esp,%ebp
+  80026e:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800271:	e8 1c ff ff ff       	call   800192 <sys_gettime>
+}
+  800276:	c9                   	leave  
+  800277:	c3                   	ret    
+
+00800278 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800278:	55                   	push   %ebp
+  800279:	89 e5                	mov    %esp,%ebp
+  80027b:	83 ec 08             	sub    $0x8,%esp
+    sys_lab6_set_priority(priority);
+  80027e:	83 ec 0c             	sub    $0xc,%esp
+  800281:	ff 75 08             	pushl  0x8(%ebp)
+  800284:	e8 18 ff ff ff       	call   8001a1 <sys_lab6_set_priority>
+  800289:	83 c4 10             	add    $0x10,%esp
+}
+  80028c:	90                   	nop
+  80028d:	c9                   	leave  
+  80028e:	c3                   	ret    
+
+0080028f <sleep>:
+
+int
+sleep(unsigned int time) {
+  80028f:	55                   	push   %ebp
+  800290:	89 e5                	mov    %esp,%ebp
+  800292:	83 ec 08             	sub    $0x8,%esp
+    return sys_sleep(time);
+  800295:	83 ec 0c             	sub    $0xc,%esp
+  800298:	ff 75 08             	pushl  0x8(%ebp)
+  80029b:	e8 17 ff ff ff       	call   8001b7 <sys_sleep>
+  8002a0:	83 c4 10             	add    $0x10,%esp
+}
+  8002a3:	c9                   	leave  
+  8002a4:	c3                   	ret    
+
+008002a5 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  8002a5:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  8002aa:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  8002ad:	e8 c3 00 00 00       	call   800375 <umain>
+1:  jmp 1b
+  8002b2:	eb fe                	jmp    8002b2 <_start+0xd>
+
+008002b4 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8002b4:	55                   	push   %ebp
+  8002b5:	89 e5                	mov    %esp,%ebp
+  8002b7:	83 ec 08             	sub    $0x8,%esp
+    sys_putc(c);
+  8002ba:	83 ec 0c             	sub    $0xc,%esp
+  8002bd:	ff 75 08             	pushl  0x8(%ebp)
+  8002c0:	e8 ac fe ff ff       	call   800171 <sys_putc>
+  8002c5:	83 c4 10             	add    $0x10,%esp
+    (*cnt) ++;
+  8002c8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002cb:	8b 00                	mov    (%eax),%eax
+  8002cd:	8d 50 01             	lea    0x1(%eax),%edx
+  8002d0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002d3:	89 10                	mov    %edx,(%eax)
+}
+  8002d5:	90                   	nop
+  8002d6:	c9                   	leave  
+  8002d7:	c3                   	ret    
+
+008002d8 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002d8:	55                   	push   %ebp
+  8002d9:	89 e5                	mov    %esp,%ebp
+  8002db:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  8002de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002e5:	ff 75 0c             	pushl  0xc(%ebp)
+  8002e8:	ff 75 08             	pushl  0x8(%ebp)
+  8002eb:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  8002ee:	50                   	push   %eax
+  8002ef:	68 b4 02 80 00       	push   $0x8002b4
+  8002f4:	e8 fc 06 00 00       	call   8009f5 <vprintfmt>
+  8002f9:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  8002fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002ff:	c9                   	leave  
+  800300:	c3                   	ret    
+
+00800301 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800301:	55                   	push   %ebp
+  800302:	89 e5                	mov    %esp,%ebp
+  800304:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800307:	8d 45 0c             	lea    0xc(%ebp),%eax
+  80030a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  80030d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800310:	83 ec 08             	sub    $0x8,%esp
+  800313:	50                   	push   %eax
+  800314:	ff 75 08             	pushl  0x8(%ebp)
+  800317:	e8 bc ff ff ff       	call   8002d8 <vcprintf>
+  80031c:	83 c4 10             	add    $0x10,%esp
+  80031f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800322:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800325:	c9                   	leave  
+  800326:	c3                   	ret    
+
+00800327 <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  800327:	55                   	push   %ebp
+  800328:	89 e5                	mov    %esp,%ebp
+  80032a:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  80032d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  800334:	eb 14                	jmp    80034a <cputs+0x23>
+        cputch(c, &cnt);
+  800336:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  80033a:	83 ec 08             	sub    $0x8,%esp
+  80033d:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800340:	52                   	push   %edx
+  800341:	50                   	push   %eax
+  800342:	e8 6d ff ff ff       	call   8002b4 <cputch>
+  800347:	83 c4 10             	add    $0x10,%esp
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  80034a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80034d:	8d 50 01             	lea    0x1(%eax),%edx
+  800350:	89 55 08             	mov    %edx,0x8(%ebp)
+  800353:	0f b6 00             	movzbl (%eax),%eax
+  800356:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800359:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  80035d:	75 d7                	jne    800336 <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  80035f:	83 ec 08             	sub    $0x8,%esp
+  800362:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800365:	50                   	push   %eax
+  800366:	6a 0a                	push   $0xa
+  800368:	e8 47 ff ff ff       	call   8002b4 <cputch>
+  80036d:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  800370:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  800373:	c9                   	leave  
+  800374:	c3                   	ret    
+
+00800375 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800375:	55                   	push   %ebp
+  800376:	89 e5                	mov    %esp,%ebp
+  800378:	83 ec 18             	sub    $0x18,%esp
+    int ret = main();
+  80037b:	e8 d3 0b 00 00       	call   800f53 <main>
+  800380:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  800383:	83 ec 0c             	sub    $0xc,%esp
+  800386:	ff 75 f4             	pushl  -0xc(%ebp)
+  800389:	e8 3b fe ff ff       	call   8001c9 <exit>
+
+0080038e <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  80038e:	55                   	push   %ebp
+  80038f:	89 e5                	mov    %esp,%ebp
+  800391:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800394:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  80039b:	eb 04                	jmp    8003a1 <strlen+0x13>
+        cnt ++;
+  80039d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  8003a1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003a4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003a7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003aa:	0f b6 00             	movzbl (%eax),%eax
+  8003ad:	84 c0                	test   %al,%al
+  8003af:	75 ec                	jne    80039d <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003b4:	c9                   	leave  
+  8003b5:	c3                   	ret    
+
+008003b6 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  8003b6:	55                   	push   %ebp
+  8003b7:	89 e5                	mov    %esp,%ebp
+  8003b9:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003bc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003c3:	eb 04                	jmp    8003c9 <strnlen+0x13>
+        cnt ++;
+  8003c5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  8003c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003cc:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003cf:	73 10                	jae    8003e1 <strnlen+0x2b>
+  8003d1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003d4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003d7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003da:	0f b6 00             	movzbl (%eax),%eax
+  8003dd:	84 c0                	test   %al,%al
+  8003df:	75 e4                	jne    8003c5 <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003e4:	c9                   	leave  
+  8003e5:	c3                   	ret    
+
+008003e6 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  8003e6:	55                   	push   %ebp
+  8003e7:	89 e5                	mov    %esp,%ebp
+  8003e9:	57                   	push   %edi
+  8003ea:	56                   	push   %esi
+  8003eb:	83 ec 20             	sub    $0x20,%esp
+  8003ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003f4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8003f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  8003fa:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800400:	89 d1                	mov    %edx,%ecx
+  800402:	89 c2                	mov    %eax,%edx
+  800404:	89 ce                	mov    %ecx,%esi
+  800406:	89 d7                	mov    %edx,%edi
+  800408:	ac                   	lods   %ds:(%esi),%al
+  800409:	aa                   	stos   %al,%es:(%edi)
+  80040a:	84 c0                	test   %al,%al
+  80040c:	75 fa                	jne    800408 <strcpy+0x22>
+  80040e:	89 fa                	mov    %edi,%edx
+  800410:	89 f1                	mov    %esi,%ecx
+  800412:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800415:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800418:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  80041b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  80041e:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  80041f:	83 c4 20             	add    $0x20,%esp
+  800422:	5e                   	pop    %esi
+  800423:	5f                   	pop    %edi
+  800424:	5d                   	pop    %ebp
+  800425:	c3                   	ret    
+
+00800426 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800426:	55                   	push   %ebp
+  800427:	89 e5                	mov    %esp,%ebp
+  800429:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  80042c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80042f:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800432:	eb 21                	jmp    800455 <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800434:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800437:	0f b6 10             	movzbl (%eax),%edx
+  80043a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80043d:	88 10                	mov    %dl,(%eax)
+  80043f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800442:	0f b6 00             	movzbl (%eax),%eax
+  800445:	84 c0                	test   %al,%al
+  800447:	74 04                	je     80044d <strncpy+0x27>
+            src ++;
+  800449:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  80044d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800451:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800455:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800459:	75 d9                	jne    800434 <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  80045b:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  80045e:	c9                   	leave  
+  80045f:	c3                   	ret    
+
+00800460 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800460:	55                   	push   %ebp
+  800461:	89 e5                	mov    %esp,%ebp
+  800463:	57                   	push   %edi
+  800464:	56                   	push   %esi
+  800465:	83 ec 20             	sub    $0x20,%esp
+  800468:	8b 45 08             	mov    0x8(%ebp),%eax
+  80046b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80046e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800471:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800474:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800477:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80047a:	89 d1                	mov    %edx,%ecx
+  80047c:	89 c2                	mov    %eax,%edx
+  80047e:	89 ce                	mov    %ecx,%esi
+  800480:	89 d7                	mov    %edx,%edi
+  800482:	ac                   	lods   %ds:(%esi),%al
+  800483:	ae                   	scas   %es:(%edi),%al
+  800484:	75 08                	jne    80048e <strcmp+0x2e>
+  800486:	84 c0                	test   %al,%al
+  800488:	75 f8                	jne    800482 <strcmp+0x22>
+  80048a:	31 c0                	xor    %eax,%eax
+  80048c:	eb 04                	jmp    800492 <strcmp+0x32>
+  80048e:	19 c0                	sbb    %eax,%eax
+  800490:	0c 01                	or     $0x1,%al
+  800492:	89 fa                	mov    %edi,%edx
+  800494:	89 f1                	mov    %esi,%ecx
+  800496:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800499:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  80049c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  80049f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  8004a2:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  8004a3:	83 c4 20             	add    $0x20,%esp
+  8004a6:	5e                   	pop    %esi
+  8004a7:	5f                   	pop    %edi
+  8004a8:	5d                   	pop    %ebp
+  8004a9:	c3                   	ret    
+
+008004aa <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  8004aa:	55                   	push   %ebp
+  8004ab:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004ad:	eb 0c                	jmp    8004bb <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  8004af:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  8004b3:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8004b7:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004bb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004bf:	74 1a                	je     8004db <strncmp+0x31>
+  8004c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004c4:	0f b6 00             	movzbl (%eax),%eax
+  8004c7:	84 c0                	test   %al,%al
+  8004c9:	74 10                	je     8004db <strncmp+0x31>
+  8004cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004ce:	0f b6 10             	movzbl (%eax),%edx
+  8004d1:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004d4:	0f b6 00             	movzbl (%eax),%eax
+  8004d7:	38 c2                	cmp    %al,%dl
+  8004d9:	74 d4                	je     8004af <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004db:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004df:	74 18                	je     8004f9 <strncmp+0x4f>
+  8004e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e4:	0f b6 00             	movzbl (%eax),%eax
+  8004e7:	0f b6 d0             	movzbl %al,%edx
+  8004ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ed:	0f b6 00             	movzbl (%eax),%eax
+  8004f0:	0f b6 c0             	movzbl %al,%eax
+  8004f3:	29 c2                	sub    %eax,%edx
+  8004f5:	89 d0                	mov    %edx,%eax
+  8004f7:	eb 05                	jmp    8004fe <strncmp+0x54>
+  8004f9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8004fe:	5d                   	pop    %ebp
+  8004ff:	c3                   	ret    
+
+00800500 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800500:	55                   	push   %ebp
+  800501:	89 e5                	mov    %esp,%ebp
+  800503:	83 ec 04             	sub    $0x4,%esp
+  800506:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800509:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  80050c:	eb 14                	jmp    800522 <strchr+0x22>
+        if (*s == c) {
+  80050e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800511:	0f b6 00             	movzbl (%eax),%eax
+  800514:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800517:	75 05                	jne    80051e <strchr+0x1e>
+            return (char *)s;
+  800519:	8b 45 08             	mov    0x8(%ebp),%eax
+  80051c:	eb 13                	jmp    800531 <strchr+0x31>
+        }
+        s ++;
+  80051e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800522:	8b 45 08             	mov    0x8(%ebp),%eax
+  800525:	0f b6 00             	movzbl (%eax),%eax
+  800528:	84 c0                	test   %al,%al
+  80052a:	75 e2                	jne    80050e <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  80052c:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800531:	c9                   	leave  
+  800532:	c3                   	ret    
+
+00800533 <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800533:	55                   	push   %ebp
+  800534:	89 e5                	mov    %esp,%ebp
+  800536:	83 ec 04             	sub    $0x4,%esp
+  800539:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80053c:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  80053f:	eb 0f                	jmp    800550 <strfind+0x1d>
+        if (*s == c) {
+  800541:	8b 45 08             	mov    0x8(%ebp),%eax
+  800544:	0f b6 00             	movzbl (%eax),%eax
+  800547:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  80054a:	74 10                	je     80055c <strfind+0x29>
+            break;
+        }
+        s ++;
+  80054c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800550:	8b 45 08             	mov    0x8(%ebp),%eax
+  800553:	0f b6 00             	movzbl (%eax),%eax
+  800556:	84 c0                	test   %al,%al
+  800558:	75 e7                	jne    800541 <strfind+0xe>
+  80055a:	eb 01                	jmp    80055d <strfind+0x2a>
+        if (*s == c) {
+            break;
+  80055c:	90                   	nop
+        }
+        s ++;
+    }
+    return (char *)s;
+  80055d:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800560:	c9                   	leave  
+  800561:	c3                   	ret    
+
+00800562 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800562:	55                   	push   %ebp
+  800563:	89 e5                	mov    %esp,%ebp
+  800565:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800568:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  80056f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800576:	eb 04                	jmp    80057c <strtol+0x1a>
+        s ++;
+  800578:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80057c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80057f:	0f b6 00             	movzbl (%eax),%eax
+  800582:	3c 20                	cmp    $0x20,%al
+  800584:	74 f2                	je     800578 <strtol+0x16>
+  800586:	8b 45 08             	mov    0x8(%ebp),%eax
+  800589:	0f b6 00             	movzbl (%eax),%eax
+  80058c:	3c 09                	cmp    $0x9,%al
+  80058e:	74 e8                	je     800578 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800590:	8b 45 08             	mov    0x8(%ebp),%eax
+  800593:	0f b6 00             	movzbl (%eax),%eax
+  800596:	3c 2b                	cmp    $0x2b,%al
+  800598:	75 06                	jne    8005a0 <strtol+0x3e>
+        s ++;
+  80059a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  80059e:	eb 15                	jmp    8005b5 <strtol+0x53>
+    }
+    else if (*s == '-') {
+  8005a0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a3:	0f b6 00             	movzbl (%eax),%eax
+  8005a6:	3c 2d                	cmp    $0x2d,%al
+  8005a8:	75 0b                	jne    8005b5 <strtol+0x53>
+        s ++, neg = 1;
+  8005aa:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005ae:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  8005b5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005b9:	74 06                	je     8005c1 <strtol+0x5f>
+  8005bb:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  8005bf:	75 24                	jne    8005e5 <strtol+0x83>
+  8005c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005c4:	0f b6 00             	movzbl (%eax),%eax
+  8005c7:	3c 30                	cmp    $0x30,%al
+  8005c9:	75 1a                	jne    8005e5 <strtol+0x83>
+  8005cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ce:	83 c0 01             	add    $0x1,%eax
+  8005d1:	0f b6 00             	movzbl (%eax),%eax
+  8005d4:	3c 78                	cmp    $0x78,%al
+  8005d6:	75 0d                	jne    8005e5 <strtol+0x83>
+        s += 2, base = 16;
+  8005d8:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005dc:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005e3:	eb 2a                	jmp    80060f <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005e5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005e9:	75 17                	jne    800602 <strtol+0xa0>
+  8005eb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ee:	0f b6 00             	movzbl (%eax),%eax
+  8005f1:	3c 30                	cmp    $0x30,%al
+  8005f3:	75 0d                	jne    800602 <strtol+0xa0>
+        s ++, base = 8;
+  8005f5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005f9:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800600:	eb 0d                	jmp    80060f <strtol+0xad>
+    }
+    else if (base == 0) {
+  800602:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800606:	75 07                	jne    80060f <strtol+0xad>
+        base = 10;
+  800608:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  80060f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800612:	0f b6 00             	movzbl (%eax),%eax
+  800615:	3c 2f                	cmp    $0x2f,%al
+  800617:	7e 1b                	jle    800634 <strtol+0xd2>
+  800619:	8b 45 08             	mov    0x8(%ebp),%eax
+  80061c:	0f b6 00             	movzbl (%eax),%eax
+  80061f:	3c 39                	cmp    $0x39,%al
+  800621:	7f 11                	jg     800634 <strtol+0xd2>
+            dig = *s - '0';
+  800623:	8b 45 08             	mov    0x8(%ebp),%eax
+  800626:	0f b6 00             	movzbl (%eax),%eax
+  800629:	0f be c0             	movsbl %al,%eax
+  80062c:	83 e8 30             	sub    $0x30,%eax
+  80062f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800632:	eb 48                	jmp    80067c <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800634:	8b 45 08             	mov    0x8(%ebp),%eax
+  800637:	0f b6 00             	movzbl (%eax),%eax
+  80063a:	3c 60                	cmp    $0x60,%al
+  80063c:	7e 1b                	jle    800659 <strtol+0xf7>
+  80063e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800641:	0f b6 00             	movzbl (%eax),%eax
+  800644:	3c 7a                	cmp    $0x7a,%al
+  800646:	7f 11                	jg     800659 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800648:	8b 45 08             	mov    0x8(%ebp),%eax
+  80064b:	0f b6 00             	movzbl (%eax),%eax
+  80064e:	0f be c0             	movsbl %al,%eax
+  800651:	83 e8 57             	sub    $0x57,%eax
+  800654:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800657:	eb 23                	jmp    80067c <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800659:	8b 45 08             	mov    0x8(%ebp),%eax
+  80065c:	0f b6 00             	movzbl (%eax),%eax
+  80065f:	3c 40                	cmp    $0x40,%al
+  800661:	7e 3c                	jle    80069f <strtol+0x13d>
+  800663:	8b 45 08             	mov    0x8(%ebp),%eax
+  800666:	0f b6 00             	movzbl (%eax),%eax
+  800669:	3c 5a                	cmp    $0x5a,%al
+  80066b:	7f 32                	jg     80069f <strtol+0x13d>
+            dig = *s - 'A' + 10;
+  80066d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800670:	0f b6 00             	movzbl (%eax),%eax
+  800673:	0f be c0             	movsbl %al,%eax
+  800676:	83 e8 37             	sub    $0x37,%eax
+  800679:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  80067c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80067f:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800682:	7d 1a                	jge    80069e <strtol+0x13c>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  800684:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800688:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80068b:	0f af 45 10          	imul   0x10(%ebp),%eax
+  80068f:	89 c2                	mov    %eax,%edx
+  800691:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800694:	01 d0                	add    %edx,%eax
+  800696:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800699:	e9 71 ff ff ff       	jmp    80060f <strtol+0xad>
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+            break;
+  80069e:	90                   	nop
+        }
+        s ++, val = (val * base) + dig;
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  80069f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8006a3:	74 08                	je     8006ad <strtol+0x14b>
+        *endptr = (char *) s;
+  8006a5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006a8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006ab:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  8006ad:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  8006b1:	74 07                	je     8006ba <strtol+0x158>
+  8006b3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006b6:	f7 d8                	neg    %eax
+  8006b8:	eb 03                	jmp    8006bd <strtol+0x15b>
+  8006ba:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  8006bd:	c9                   	leave  
+  8006be:	c3                   	ret    
+
+008006bf <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  8006bf:	55                   	push   %ebp
+  8006c0:	89 e5                	mov    %esp,%ebp
+  8006c2:	57                   	push   %edi
+  8006c3:	83 ec 24             	sub    $0x24,%esp
+  8006c6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006c9:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006cc:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006d0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006d3:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006d6:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006d9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006df:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006e2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006e6:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006e9:	89 d7                	mov    %edx,%edi
+  8006eb:	f3 aa                	rep stos %al,%es:(%edi)
+  8006ed:	89 fa                	mov    %edi,%edx
+  8006ef:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8006f2:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  8006f5:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006f8:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  8006f9:	83 c4 24             	add    $0x24,%esp
+  8006fc:	5f                   	pop    %edi
+  8006fd:	5d                   	pop    %ebp
+  8006fe:	c3                   	ret    
+
+008006ff <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  8006ff:	55                   	push   %ebp
+  800700:	89 e5                	mov    %esp,%ebp
+  800702:	57                   	push   %edi
+  800703:	56                   	push   %esi
+  800704:	53                   	push   %ebx
+  800705:	83 ec 30             	sub    $0x30,%esp
+  800708:	8b 45 08             	mov    0x8(%ebp),%eax
+  80070b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80070e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800711:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800714:	8b 45 10             	mov    0x10(%ebp),%eax
+  800717:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  80071a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80071d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800720:	73 42                	jae    800764 <memmove+0x65>
+  800722:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800725:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800728:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80072b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80072e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800731:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800734:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800737:	c1 e8 02             	shr    $0x2,%eax
+  80073a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  80073c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  80073f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800742:	89 d7                	mov    %edx,%edi
+  800744:	89 c6                	mov    %eax,%esi
+  800746:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800748:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  80074b:	83 e1 03             	and    $0x3,%ecx
+  80074e:	74 02                	je     800752 <memmove+0x53>
+  800750:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800752:	89 f0                	mov    %esi,%eax
+  800754:	89 fa                	mov    %edi,%edx
+  800756:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800759:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  80075c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  80075f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  800762:	eb 36                	jmp    80079a <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800764:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800767:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80076a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80076d:	01 c2                	add    %eax,%edx
+  80076f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800772:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800775:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800778:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  80077b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80077e:	89 c1                	mov    %eax,%ecx
+  800780:	89 d8                	mov    %ebx,%eax
+  800782:	89 d6                	mov    %edx,%esi
+  800784:	89 c7                	mov    %eax,%edi
+  800786:	fd                   	std    
+  800787:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800789:	fc                   	cld    
+  80078a:	89 f8                	mov    %edi,%eax
+  80078c:	89 f2                	mov    %esi,%edx
+  80078e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800791:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800794:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800797:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  80079a:	83 c4 30             	add    $0x30,%esp
+  80079d:	5b                   	pop    %ebx
+  80079e:	5e                   	pop    %esi
+  80079f:	5f                   	pop    %edi
+  8007a0:	5d                   	pop    %ebp
+  8007a1:	c3                   	ret    
+
+008007a2 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  8007a2:	55                   	push   %ebp
+  8007a3:	89 e5                	mov    %esp,%ebp
+  8007a5:	57                   	push   %edi
+  8007a6:	56                   	push   %esi
+  8007a7:	83 ec 20             	sub    $0x20,%esp
+  8007aa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8007b0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007b6:	8b 45 10             	mov    0x10(%ebp),%eax
+  8007b9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  8007bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8007bf:	c1 e8 02             	shr    $0x2,%eax
+  8007c2:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  8007c4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007ca:	89 d7                	mov    %edx,%edi
+  8007cc:	89 c6                	mov    %eax,%esi
+  8007ce:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007d0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007d3:	83 e1 03             	and    $0x3,%ecx
+  8007d6:	74 02                	je     8007da <memcpy+0x38>
+  8007d8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007da:	89 f0                	mov    %esi,%eax
+  8007dc:	89 fa                	mov    %edi,%edx
+  8007de:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007e1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007e4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  8007e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007ea:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007eb:	83 c4 20             	add    $0x20,%esp
+  8007ee:	5e                   	pop    %esi
+  8007ef:	5f                   	pop    %edi
+  8007f0:	5d                   	pop    %ebp
+  8007f1:	c3                   	ret    
+
+008007f2 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  8007f2:	55                   	push   %ebp
+  8007f3:	89 e5                	mov    %esp,%ebp
+  8007f5:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  8007f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007fb:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  8007fe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800801:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800804:	eb 30                	jmp    800836 <memcmp+0x44>
+        if (*s1 != *s2) {
+  800806:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800809:	0f b6 10             	movzbl (%eax),%edx
+  80080c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80080f:	0f b6 00             	movzbl (%eax),%eax
+  800812:	38 c2                	cmp    %al,%dl
+  800814:	74 18                	je     80082e <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800816:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800819:	0f b6 00             	movzbl (%eax),%eax
+  80081c:	0f b6 d0             	movzbl %al,%edx
+  80081f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800822:	0f b6 00             	movzbl (%eax),%eax
+  800825:	0f b6 c0             	movzbl %al,%eax
+  800828:	29 c2                	sub    %eax,%edx
+  80082a:	89 d0                	mov    %edx,%eax
+  80082c:	eb 1a                	jmp    800848 <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  80082e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800832:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800836:	8b 45 10             	mov    0x10(%ebp),%eax
+  800839:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80083c:	89 55 10             	mov    %edx,0x10(%ebp)
+  80083f:	85 c0                	test   %eax,%eax
+  800841:	75 c3                	jne    800806 <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800843:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800848:	c9                   	leave  
+  800849:	c3                   	ret    
+
+0080084a <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  80084a:	55                   	push   %ebp
+  80084b:	89 e5                	mov    %esp,%ebp
+  80084d:	83 ec 38             	sub    $0x38,%esp
+  800850:	8b 45 10             	mov    0x10(%ebp),%eax
+  800853:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800856:	8b 45 14             	mov    0x14(%ebp),%eax
+  800859:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80085c:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  80085f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800862:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800865:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800868:	8b 45 18             	mov    0x18(%ebp),%eax
+  80086b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  80086e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800871:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800874:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800877:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  80087a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80087d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800880:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800884:	74 1c                	je     8008a2 <printnum+0x58>
+  800886:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800889:	ba 00 00 00 00       	mov    $0x0,%edx
+  80088e:	f7 75 e4             	divl   -0x1c(%ebp)
+  800891:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800894:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800897:	ba 00 00 00 00       	mov    $0x0,%edx
+  80089c:	f7 75 e4             	divl   -0x1c(%ebp)
+  80089f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008a2:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008a8:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008ab:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8008ae:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8008b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008b4:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8008b7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8008ba:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8008bd:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8008c0:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8008c3:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008c6:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008cb:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008ce:	77 41                	ja     800911 <printnum+0xc7>
+  8008d0:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008d3:	72 05                	jb     8008da <printnum+0x90>
+  8008d5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  8008d8:	77 37                	ja     800911 <printnum+0xc7>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008da:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008dd:	83 e8 01             	sub    $0x1,%eax
+  8008e0:	83 ec 04             	sub    $0x4,%esp
+  8008e3:	ff 75 20             	pushl  0x20(%ebp)
+  8008e6:	50                   	push   %eax
+  8008e7:	ff 75 18             	pushl  0x18(%ebp)
+  8008ea:	ff 75 ec             	pushl  -0x14(%ebp)
+  8008ed:	ff 75 e8             	pushl  -0x18(%ebp)
+  8008f0:	ff 75 0c             	pushl  0xc(%ebp)
+  8008f3:	ff 75 08             	pushl  0x8(%ebp)
+  8008f6:	e8 4f ff ff ff       	call   80084a <printnum>
+  8008fb:	83 c4 20             	add    $0x20,%esp
+  8008fe:	eb 1b                	jmp    80091b <printnum+0xd1>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800900:	83 ec 08             	sub    $0x8,%esp
+  800903:	ff 75 0c             	pushl  0xc(%ebp)
+  800906:	ff 75 20             	pushl  0x20(%ebp)
+  800909:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090c:	ff d0                	call   *%eax
+  80090e:	83 c4 10             	add    $0x10,%esp
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  800911:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  800915:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  800919:	7f e5                	jg     800900 <printnum+0xb6>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  80091b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  80091e:	05 04 11 80 00       	add    $0x801104,%eax
+  800923:	0f b6 00             	movzbl (%eax),%eax
+  800926:	0f be c0             	movsbl %al,%eax
+  800929:	83 ec 08             	sub    $0x8,%esp
+  80092c:	ff 75 0c             	pushl  0xc(%ebp)
+  80092f:	50                   	push   %eax
+  800930:	8b 45 08             	mov    0x8(%ebp),%eax
+  800933:	ff d0                	call   *%eax
+  800935:	83 c4 10             	add    $0x10,%esp
+}
+  800938:	90                   	nop
+  800939:	c9                   	leave  
+  80093a:	c3                   	ret    
+
+0080093b <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  80093b:	55                   	push   %ebp
+  80093c:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  80093e:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800942:	7e 14                	jle    800958 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  800944:	8b 45 08             	mov    0x8(%ebp),%eax
+  800947:	8b 00                	mov    (%eax),%eax
+  800949:	8d 48 08             	lea    0x8(%eax),%ecx
+  80094c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80094f:	89 0a                	mov    %ecx,(%edx)
+  800951:	8b 50 04             	mov    0x4(%eax),%edx
+  800954:	8b 00                	mov    (%eax),%eax
+  800956:	eb 30                	jmp    800988 <getuint+0x4d>
+    }
+    else if (lflag) {
+  800958:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80095c:	74 16                	je     800974 <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  80095e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800961:	8b 00                	mov    (%eax),%eax
+  800963:	8d 48 04             	lea    0x4(%eax),%ecx
+  800966:	8b 55 08             	mov    0x8(%ebp),%edx
+  800969:	89 0a                	mov    %ecx,(%edx)
+  80096b:	8b 00                	mov    (%eax),%eax
+  80096d:	ba 00 00 00 00       	mov    $0x0,%edx
+  800972:	eb 14                	jmp    800988 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  800974:	8b 45 08             	mov    0x8(%ebp),%eax
+  800977:	8b 00                	mov    (%eax),%eax
+  800979:	8d 48 04             	lea    0x4(%eax),%ecx
+  80097c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80097f:	89 0a                	mov    %ecx,(%edx)
+  800981:	8b 00                	mov    (%eax),%eax
+  800983:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800988:	5d                   	pop    %ebp
+  800989:	c3                   	ret    
+
+0080098a <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  80098a:	55                   	push   %ebp
+  80098b:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  80098d:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800991:	7e 14                	jle    8009a7 <getint+0x1d>
+        return va_arg(*ap, long long);
+  800993:	8b 45 08             	mov    0x8(%ebp),%eax
+  800996:	8b 00                	mov    (%eax),%eax
+  800998:	8d 48 08             	lea    0x8(%eax),%ecx
+  80099b:	8b 55 08             	mov    0x8(%ebp),%edx
+  80099e:	89 0a                	mov    %ecx,(%edx)
+  8009a0:	8b 50 04             	mov    0x4(%eax),%edx
+  8009a3:	8b 00                	mov    (%eax),%eax
+  8009a5:	eb 28                	jmp    8009cf <getint+0x45>
+    }
+    else if (lflag) {
+  8009a7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8009ab:	74 12                	je     8009bf <getint+0x35>
+        return va_arg(*ap, long);
+  8009ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b0:	8b 00                	mov    (%eax),%eax
+  8009b2:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009b5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009b8:	89 0a                	mov    %ecx,(%edx)
+  8009ba:	8b 00                	mov    (%eax),%eax
+  8009bc:	99                   	cltd   
+  8009bd:	eb 10                	jmp    8009cf <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  8009bf:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009c2:	8b 00                	mov    (%eax),%eax
+  8009c4:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009c7:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009ca:	89 0a                	mov    %ecx,(%edx)
+  8009cc:	8b 00                	mov    (%eax),%eax
+  8009ce:	99                   	cltd   
+    }
+}
+  8009cf:	5d                   	pop    %ebp
+  8009d0:	c3                   	ret    
+
+008009d1 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009d1:	55                   	push   %ebp
+  8009d2:	89 e5                	mov    %esp,%ebp
+  8009d4:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009d7:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009da:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8009e0:	50                   	push   %eax
+  8009e1:	ff 75 10             	pushl  0x10(%ebp)
+  8009e4:	ff 75 0c             	pushl  0xc(%ebp)
+  8009e7:	ff 75 08             	pushl  0x8(%ebp)
+  8009ea:	e8 06 00 00 00       	call   8009f5 <vprintfmt>
+  8009ef:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8009f2:	90                   	nop
+  8009f3:	c9                   	leave  
+  8009f4:	c3                   	ret    
+
+008009f5 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8009f5:	55                   	push   %ebp
+  8009f6:	89 e5                	mov    %esp,%ebp
+  8009f8:	56                   	push   %esi
+  8009f9:	53                   	push   %ebx
+  8009fa:	83 ec 20             	sub    $0x20,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009fd:	eb 17                	jmp    800a16 <vprintfmt+0x21>
+            if (ch == '\0') {
+  8009ff:	85 db                	test   %ebx,%ebx
+  800a01:	0f 84 8e 03 00 00    	je     800d95 <vprintfmt+0x3a0>
+                return;
+            }
+            putch(ch, putdat);
+  800a07:	83 ec 08             	sub    $0x8,%esp
+  800a0a:	ff 75 0c             	pushl  0xc(%ebp)
+  800a0d:	53                   	push   %ebx
+  800a0e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a11:	ff d0                	call   *%eax
+  800a13:	83 c4 10             	add    $0x10,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a16:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a19:	8d 50 01             	lea    0x1(%eax),%edx
+  800a1c:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a1f:	0f b6 00             	movzbl (%eax),%eax
+  800a22:	0f b6 d8             	movzbl %al,%ebx
+  800a25:	83 fb 25             	cmp    $0x25,%ebx
+  800a28:	75 d5                	jne    8009ff <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a2a:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a2e:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a38:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a3b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a42:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a45:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a48:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a4b:	8d 50 01             	lea    0x1(%eax),%edx
+  800a4e:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a51:	0f b6 00             	movzbl (%eax),%eax
+  800a54:	0f b6 d8             	movzbl %al,%ebx
+  800a57:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a5a:	83 f8 55             	cmp    $0x55,%eax
+  800a5d:	0f 87 05 03 00 00    	ja     800d68 <vprintfmt+0x373>
+  800a63:	8b 04 85 28 11 80 00 	mov    0x801128(,%eax,4),%eax
+  800a6a:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a6c:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a70:	eb d6                	jmp    800a48 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a72:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800a76:	eb d0                	jmp    800a48 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a78:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800a7f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a82:	89 d0                	mov    %edx,%eax
+  800a84:	c1 e0 02             	shl    $0x2,%eax
+  800a87:	01 d0                	add    %edx,%eax
+  800a89:	01 c0                	add    %eax,%eax
+  800a8b:	01 d8                	add    %ebx,%eax
+  800a8d:	83 e8 30             	sub    $0x30,%eax
+  800a90:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800a93:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a96:	0f b6 00             	movzbl (%eax),%eax
+  800a99:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800a9c:	83 fb 2f             	cmp    $0x2f,%ebx
+  800a9f:	7e 39                	jle    800ada <vprintfmt+0xe5>
+  800aa1:	83 fb 39             	cmp    $0x39,%ebx
+  800aa4:	7f 34                	jg     800ada <vprintfmt+0xe5>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800aa6:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  800aaa:	eb d3                	jmp    800a7f <vprintfmt+0x8a>
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800aac:	8b 45 14             	mov    0x14(%ebp),%eax
+  800aaf:	8d 50 04             	lea    0x4(%eax),%edx
+  800ab2:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ab5:	8b 00                	mov    (%eax),%eax
+  800ab7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800aba:	eb 1f                	jmp    800adb <vprintfmt+0xe6>
+
+        case '.':
+            if (width < 0)
+  800abc:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ac0:	79 86                	jns    800a48 <vprintfmt+0x53>
+                width = 0;
+  800ac2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800ac9:	e9 7a ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800ace:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800ad5:	e9 6e ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+            goto process_precision;
+  800ada:	90                   	nop
+        case '#':
+            altflag = 1;
+            goto reswitch;
+
+        process_precision:
+            if (width < 0)
+  800adb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800adf:	0f 89 63 ff ff ff    	jns    800a48 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800ae5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ae8:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800aeb:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800af2:	e9 51 ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800af7:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800afb:	e9 48 ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800b00:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b03:	8d 50 04             	lea    0x4(%eax),%edx
+  800b06:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b09:	8b 00                	mov    (%eax),%eax
+  800b0b:	83 ec 08             	sub    $0x8,%esp
+  800b0e:	ff 75 0c             	pushl  0xc(%ebp)
+  800b11:	50                   	push   %eax
+  800b12:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b15:	ff d0                	call   *%eax
+  800b17:	83 c4 10             	add    $0x10,%esp
+            break;
+  800b1a:	e9 71 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800b1f:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b22:	8d 50 04             	lea    0x4(%eax),%edx
+  800b25:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b28:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b2a:	85 db                	test   %ebx,%ebx
+  800b2c:	79 02                	jns    800b30 <vprintfmt+0x13b>
+                err = -err;
+  800b2e:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b30:	83 fb 18             	cmp    $0x18,%ebx
+  800b33:	7f 0b                	jg     800b40 <vprintfmt+0x14b>
+  800b35:	8b 34 9d a0 10 80 00 	mov    0x8010a0(,%ebx,4),%esi
+  800b3c:	85 f6                	test   %esi,%esi
+  800b3e:	75 19                	jne    800b59 <vprintfmt+0x164>
+                printfmt(putch, putdat, "error %d", err);
+  800b40:	53                   	push   %ebx
+  800b41:	68 15 11 80 00       	push   $0x801115
+  800b46:	ff 75 0c             	pushl  0xc(%ebp)
+  800b49:	ff 75 08             	pushl  0x8(%ebp)
+  800b4c:	e8 80 fe ff ff       	call   8009d1 <printfmt>
+  800b51:	83 c4 10             	add    $0x10,%esp
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b54:	e9 37 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  800b59:	56                   	push   %esi
+  800b5a:	68 1e 11 80 00       	push   $0x80111e
+  800b5f:	ff 75 0c             	pushl  0xc(%ebp)
+  800b62:	ff 75 08             	pushl  0x8(%ebp)
+  800b65:	e8 67 fe ff ff       	call   8009d1 <printfmt>
+  800b6a:	83 c4 10             	add    $0x10,%esp
+            }
+            break;
+  800b6d:	e9 1e 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800b72:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b75:	8d 50 04             	lea    0x4(%eax),%edx
+  800b78:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b7b:	8b 30                	mov    (%eax),%esi
+  800b7d:	85 f6                	test   %esi,%esi
+  800b7f:	75 05                	jne    800b86 <vprintfmt+0x191>
+                p = "(null)";
+  800b81:	be 21 11 80 00       	mov    $0x801121,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800b86:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b8a:	7e 76                	jle    800c02 <vprintfmt+0x20d>
+  800b8c:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800b90:	74 70                	je     800c02 <vprintfmt+0x20d>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b92:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b95:	83 ec 08             	sub    $0x8,%esp
+  800b98:	50                   	push   %eax
+  800b99:	56                   	push   %esi
+  800b9a:	e8 17 f8 ff ff       	call   8003b6 <strnlen>
+  800b9f:	83 c4 10             	add    $0x10,%esp
+  800ba2:	89 c2                	mov    %eax,%edx
+  800ba4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ba7:	29 d0                	sub    %edx,%eax
+  800ba9:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800bac:	eb 17                	jmp    800bc5 <vprintfmt+0x1d0>
+                    putch(padc, putdat);
+  800bae:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800bb2:	83 ec 08             	sub    $0x8,%esp
+  800bb5:	ff 75 0c             	pushl  0xc(%ebp)
+  800bb8:	50                   	push   %eax
+  800bb9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bbc:	ff d0                	call   *%eax
+  800bbe:	83 c4 10             	add    $0x10,%esp
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bc1:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800bc5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800bc9:	7f e3                	jg     800bae <vprintfmt+0x1b9>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bcb:	eb 35                	jmp    800c02 <vprintfmt+0x20d>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800bcd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800bd1:	74 1c                	je     800bef <vprintfmt+0x1fa>
+  800bd3:	83 fb 1f             	cmp    $0x1f,%ebx
+  800bd6:	7e 05                	jle    800bdd <vprintfmt+0x1e8>
+  800bd8:	83 fb 7e             	cmp    $0x7e,%ebx
+  800bdb:	7e 12                	jle    800bef <vprintfmt+0x1fa>
+                    putch('?', putdat);
+  800bdd:	83 ec 08             	sub    $0x8,%esp
+  800be0:	ff 75 0c             	pushl  0xc(%ebp)
+  800be3:	6a 3f                	push   $0x3f
+  800be5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800be8:	ff d0                	call   *%eax
+  800bea:	83 c4 10             	add    $0x10,%esp
+  800bed:	eb 0f                	jmp    800bfe <vprintfmt+0x209>
+                }
+                else {
+                    putch(ch, putdat);
+  800bef:	83 ec 08             	sub    $0x8,%esp
+  800bf2:	ff 75 0c             	pushl  0xc(%ebp)
+  800bf5:	53                   	push   %ebx
+  800bf6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bf9:	ff d0                	call   *%eax
+  800bfb:	83 c4 10             	add    $0x10,%esp
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bfe:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c02:	89 f0                	mov    %esi,%eax
+  800c04:	8d 70 01             	lea    0x1(%eax),%esi
+  800c07:	0f b6 00             	movzbl (%eax),%eax
+  800c0a:	0f be d8             	movsbl %al,%ebx
+  800c0d:	85 db                	test   %ebx,%ebx
+  800c0f:	74 26                	je     800c37 <vprintfmt+0x242>
+  800c11:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c15:	78 b6                	js     800bcd <vprintfmt+0x1d8>
+  800c17:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  800c1b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c1f:	79 ac                	jns    800bcd <vprintfmt+0x1d8>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c21:	eb 14                	jmp    800c37 <vprintfmt+0x242>
+                putch(' ', putdat);
+  800c23:	83 ec 08             	sub    $0x8,%esp
+  800c26:	ff 75 0c             	pushl  0xc(%ebp)
+  800c29:	6a 20                	push   $0x20
+  800c2b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2e:	ff d0                	call   *%eax
+  800c30:	83 c4 10             	add    $0x10,%esp
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c33:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c37:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c3b:	7f e6                	jg     800c23 <vprintfmt+0x22e>
+                putch(' ', putdat);
+            }
+            break;
+  800c3d:	e9 4e 01 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c42:	83 ec 08             	sub    $0x8,%esp
+  800c45:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c48:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c4b:	50                   	push   %eax
+  800c4c:	e8 39 fd ff ff       	call   80098a <getint>
+  800c51:	83 c4 10             	add    $0x10,%esp
+  800c54:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c57:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c5d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c60:	85 d2                	test   %edx,%edx
+  800c62:	79 23                	jns    800c87 <vprintfmt+0x292>
+                putch('-', putdat);
+  800c64:	83 ec 08             	sub    $0x8,%esp
+  800c67:	ff 75 0c             	pushl  0xc(%ebp)
+  800c6a:	6a 2d                	push   $0x2d
+  800c6c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c6f:	ff d0                	call   *%eax
+  800c71:	83 c4 10             	add    $0x10,%esp
+                num = -(long long)num;
+  800c74:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c77:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c7a:	f7 d8                	neg    %eax
+  800c7c:	83 d2 00             	adc    $0x0,%edx
+  800c7f:	f7 da                	neg    %edx
+  800c81:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c84:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800c87:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c8e:	e9 9f 00 00 00       	jmp    800d32 <vprintfmt+0x33d>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800c93:	83 ec 08             	sub    $0x8,%esp
+  800c96:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c99:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c9c:	50                   	push   %eax
+  800c9d:	e8 99 fc ff ff       	call   80093b <getuint>
+  800ca2:	83 c4 10             	add    $0x10,%esp
+  800ca5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ca8:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800cab:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cb2:	eb 7e                	jmp    800d32 <vprintfmt+0x33d>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800cb4:	83 ec 08             	sub    $0x8,%esp
+  800cb7:	ff 75 e0             	pushl  -0x20(%ebp)
+  800cba:	8d 45 14             	lea    0x14(%ebp),%eax
+  800cbd:	50                   	push   %eax
+  800cbe:	e8 78 fc ff ff       	call   80093b <getuint>
+  800cc3:	83 c4 10             	add    $0x10,%esp
+  800cc6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cc9:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800ccc:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800cd3:	eb 5d                	jmp    800d32 <vprintfmt+0x33d>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800cd5:	83 ec 08             	sub    $0x8,%esp
+  800cd8:	ff 75 0c             	pushl  0xc(%ebp)
+  800cdb:	6a 30                	push   $0x30
+  800cdd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ce0:	ff d0                	call   *%eax
+  800ce2:	83 c4 10             	add    $0x10,%esp
+            putch('x', putdat);
+  800ce5:	83 ec 08             	sub    $0x8,%esp
+  800ce8:	ff 75 0c             	pushl  0xc(%ebp)
+  800ceb:	6a 78                	push   $0x78
+  800ced:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cf0:	ff d0                	call   *%eax
+  800cf2:	83 c4 10             	add    $0x10,%esp
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800cf5:	8b 45 14             	mov    0x14(%ebp),%eax
+  800cf8:	8d 50 04             	lea    0x4(%eax),%edx
+  800cfb:	89 55 14             	mov    %edx,0x14(%ebp)
+  800cfe:	8b 00                	mov    (%eax),%eax
+  800d00:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d03:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800d0a:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800d11:	eb 1f                	jmp    800d32 <vprintfmt+0x33d>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800d13:	83 ec 08             	sub    $0x8,%esp
+  800d16:	ff 75 e0             	pushl  -0x20(%ebp)
+  800d19:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d1c:	50                   	push   %eax
+  800d1d:	e8 19 fc ff ff       	call   80093b <getuint>
+  800d22:	83 c4 10             	add    $0x10,%esp
+  800d25:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d28:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d2b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d32:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d36:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d39:	83 ec 04             	sub    $0x4,%esp
+  800d3c:	52                   	push   %edx
+  800d3d:	ff 75 e8             	pushl  -0x18(%ebp)
+  800d40:	50                   	push   %eax
+  800d41:	ff 75 f4             	pushl  -0xc(%ebp)
+  800d44:	ff 75 f0             	pushl  -0x10(%ebp)
+  800d47:	ff 75 0c             	pushl  0xc(%ebp)
+  800d4a:	ff 75 08             	pushl  0x8(%ebp)
+  800d4d:	e8 f8 fa ff ff       	call   80084a <printnum>
+  800d52:	83 c4 20             	add    $0x20,%esp
+            break;
+  800d55:	eb 39                	jmp    800d90 <vprintfmt+0x39b>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800d57:	83 ec 08             	sub    $0x8,%esp
+  800d5a:	ff 75 0c             	pushl  0xc(%ebp)
+  800d5d:	53                   	push   %ebx
+  800d5e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d61:	ff d0                	call   *%eax
+  800d63:	83 c4 10             	add    $0x10,%esp
+            break;
+  800d66:	eb 28                	jmp    800d90 <vprintfmt+0x39b>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800d68:	83 ec 08             	sub    $0x8,%esp
+  800d6b:	ff 75 0c             	pushl  0xc(%ebp)
+  800d6e:	6a 25                	push   $0x25
+  800d70:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d73:	ff d0                	call   *%eax
+  800d75:	83 c4 10             	add    $0x10,%esp
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800d78:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d7c:	eb 04                	jmp    800d82 <vprintfmt+0x38d>
+  800d7e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d82:	8b 45 10             	mov    0x10(%ebp),%eax
+  800d85:	83 e8 01             	sub    $0x1,%eax
+  800d88:	0f b6 00             	movzbl (%eax),%eax
+  800d8b:	3c 25                	cmp    $0x25,%al
+  800d8d:	75 ef                	jne    800d7e <vprintfmt+0x389>
+                /* do nothing */;
+            break;
+  800d8f:	90                   	nop
+        }
+    }
+  800d90:	e9 68 fc ff ff       	jmp    8009fd <vprintfmt+0x8>
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+            if (ch == '\0') {
+                return;
+  800d95:	90                   	nop
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  800d96:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  800d99:	5b                   	pop    %ebx
+  800d9a:	5e                   	pop    %esi
+  800d9b:	5d                   	pop    %ebp
+  800d9c:	c3                   	ret    
+
+00800d9d <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800d9d:	55                   	push   %ebp
+  800d9e:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800da0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800da3:	8b 40 08             	mov    0x8(%eax),%eax
+  800da6:	8d 50 01             	lea    0x1(%eax),%edx
+  800da9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dac:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800daf:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db2:	8b 10                	mov    (%eax),%edx
+  800db4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db7:	8b 40 04             	mov    0x4(%eax),%eax
+  800dba:	39 c2                	cmp    %eax,%edx
+  800dbc:	73 12                	jae    800dd0 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800dbe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dc1:	8b 00                	mov    (%eax),%eax
+  800dc3:	8d 48 01             	lea    0x1(%eax),%ecx
+  800dc6:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800dc9:	89 0a                	mov    %ecx,(%edx)
+  800dcb:	8b 55 08             	mov    0x8(%ebp),%edx
+  800dce:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800dd0:	90                   	nop
+  800dd1:	5d                   	pop    %ebp
+  800dd2:	c3                   	ret    
+
+00800dd3 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800dd3:	55                   	push   %ebp
+  800dd4:	89 e5                	mov    %esp,%ebp
+  800dd6:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800dd9:	8d 45 14             	lea    0x14(%ebp),%eax
+  800ddc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800ddf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800de2:	50                   	push   %eax
+  800de3:	ff 75 10             	pushl  0x10(%ebp)
+  800de6:	ff 75 0c             	pushl  0xc(%ebp)
+  800de9:	ff 75 08             	pushl  0x8(%ebp)
+  800dec:	e8 0b 00 00 00       	call   800dfc <vsnprintf>
+  800df1:	83 c4 10             	add    $0x10,%esp
+  800df4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800df7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800dfa:	c9                   	leave  
+  800dfb:	c3                   	ret    
+
+00800dfc <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800dfc:	55                   	push   %ebp
+  800dfd:	89 e5                	mov    %esp,%ebp
+  800dff:	83 ec 18             	sub    $0x18,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800e02:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e05:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e08:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e0b:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800e0e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e11:	01 d0                	add    %edx,%eax
+  800e13:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e16:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800e1d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800e21:	74 0a                	je     800e2d <vsnprintf+0x31>
+  800e23:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800e26:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e29:	39 c2                	cmp    %eax,%edx
+  800e2b:	76 07                	jbe    800e34 <vsnprintf+0x38>
+        return -E_INVAL;
+  800e2d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e32:	eb 20                	jmp    800e54 <vsnprintf+0x58>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e34:	ff 75 14             	pushl  0x14(%ebp)
+  800e37:	ff 75 10             	pushl  0x10(%ebp)
+  800e3a:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800e3d:	50                   	push   %eax
+  800e3e:	68 9d 0d 80 00       	push   $0x800d9d
+  800e43:	e8 ad fb ff ff       	call   8009f5 <vprintfmt>
+  800e48:	83 c4 10             	add    $0x10,%esp
+    // null terminate the buffer
+    *b.buf = '\0';
+  800e4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e4e:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800e51:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e54:	c9                   	leave  
+  800e55:	c3                   	ret    
+
+00800e56 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800e56:	55                   	push   %ebp
+  800e57:	89 e5                	mov    %esp,%ebp
+  800e59:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800e5c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e5f:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800e65:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800e68:	b8 20 00 00 00       	mov    $0x20,%eax
+  800e6d:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800e70:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800e73:	89 c1                	mov    %eax,%ecx
+  800e75:	d3 ea                	shr    %cl,%edx
+  800e77:	89 d0                	mov    %edx,%eax
+}
+  800e79:	c9                   	leave  
+  800e7a:	c3                   	ret    
+
+00800e7b <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800e7b:	55                   	push   %ebp
+  800e7c:	89 e5                	mov    %esp,%ebp
+  800e7e:	57                   	push   %edi
+  800e7f:	56                   	push   %esi
+  800e80:	53                   	push   %ebx
+  800e81:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800e84:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e89:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800e8f:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800e95:	6b f0 05             	imul   $0x5,%eax,%esi
+  800e98:	01 fe                	add    %edi,%esi
+  800e9a:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800e9f:	f7 e7                	mul    %edi
+  800ea1:	01 d6                	add    %edx,%esi
+  800ea3:	89 f2                	mov    %esi,%edx
+  800ea5:	83 c0 0b             	add    $0xb,%eax
+  800ea8:	83 d2 00             	adc    $0x0,%edx
+  800eab:	89 c7                	mov    %eax,%edi
+  800ead:	83 e7 ff             	and    $0xffffffff,%edi
+  800eb0:	89 f9                	mov    %edi,%ecx
+  800eb2:	0f b7 da             	movzwl %dx,%ebx
+  800eb5:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800ebb:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800ec1:	a1 00 20 80 00       	mov    0x802000,%eax
+  800ec6:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ecc:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ed0:	c1 ea 0c             	shr    $0xc,%edx
+  800ed3:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ed6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800ed9:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ee0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ee3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ee6:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ee9:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800eec:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eef:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ef2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ef6:	74 1c                	je     800f14 <rand+0x99>
+  800ef8:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800efb:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f00:	f7 75 dc             	divl   -0x24(%ebp)
+  800f03:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800f06:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f09:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f0e:	f7 75 dc             	divl   -0x24(%ebp)
+  800f11:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800f14:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f17:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800f1a:	f7 75 dc             	divl   -0x24(%ebp)
+  800f1d:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f20:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f23:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f26:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800f29:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f2c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f2f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800f32:	83 c4 24             	add    $0x24,%esp
+  800f35:	5b                   	pop    %ebx
+  800f36:	5e                   	pop    %esi
+  800f37:	5f                   	pop    %edi
+  800f38:	5d                   	pop    %ebp
+  800f39:	c3                   	ret    
+
+00800f3a <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800f3a:	55                   	push   %ebp
+  800f3b:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800f3d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f40:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f45:	a3 00 20 80 00       	mov    %eax,0x802000
+  800f4a:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800f50:	90                   	nop
+  800f51:	5d                   	pop    %ebp
+  800f52:	c3                   	ret    
+
+00800f53 <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  800f53:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  800f57:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f5a:	ff 71 fc             	pushl  -0x4(%ecx)
+  800f5d:	55                   	push   %ebp
+  800f5e:	89 e5                	mov    %esp,%ebp
+  800f60:	51                   	push   %ecx
+  800f61:	83 ec 04             	sub    $0x4,%esp
+    cprintf("I read %08x from 0xfac00000!\n", *(unsigned *)0xfac00000);
+  800f64:	b8 00 00 c0 fa       	mov    $0xfac00000,%eax
+  800f69:	8b 00                	mov    (%eax),%eax
+  800f6b:	83 ec 08             	sub    $0x8,%esp
+  800f6e:	50                   	push   %eax
+  800f6f:	68 80 12 80 00       	push   $0x801280
+  800f74:	e8 88 f3 ff ff       	call   800301 <cprintf>
+  800f79:	83 c4 10             	add    $0x10,%esp
+    panic("FAIL: T.T\n");
+  800f7c:	83 ec 04             	sub    $0x4,%esp
+  800f7f:	68 9e 12 80 00       	push   $0x80129e
+  800f84:	6a 07                	push   $0x7
+  800f86:	68 a9 12 80 00       	push   $0x8012a9
+  800f8b:	e8 90 f0 ff ff       	call   800020 <__panic>
diff -r -u -P lab7_original/obj/user/faultreadkernel.d lab7/obj/user/faultreadkernel.d
--- lab7_original/obj/user/faultreadkernel.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/faultreadkernel.d	2016-05-06 21:59:27.574121824 +0800
@@ -0,0 +1,3 @@
+obj/user/faultreadkernel.o obj/user/faultreadkernel.d: \
+ user/faultreadkernel.c libs/stdio.h libs/defs.h libs/stdarg.h \
+ user/libs/ulib.h
Binary files lab7_original/obj/user/faultreadkernel.o and lab7/obj/user/faultreadkernel.o differ
diff -r -u -P lab7_original/obj/user/faultreadkernel.sym lab7/obj/user/faultreadkernel.sym
--- lab7_original/obj/user/faultreadkernel.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/faultreadkernel.sym	2016-05-06 21:59:28.662161485 +0800
@@ -0,0 +1,78 @@
+00800020 .text
+00800fa0 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202d05 .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b5 syscall
+00000000 ulib.c
+00000000 stdio.c
+008002b4 cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+008010a0 error_string
+0080084a printnum
+0080093b getuint
+0080098a getint
+00800d9d sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 faultreadkernel.c
+008003e6 strcpy
+0080022c yield
+00800213 waitpid
+00800141 sys_yield
+008006ff memmove
+00800dd3 snprintf
+008009f5 vprintfmt
+0080011d sys_fork
+00800301 cprintf
+00800250 getpid
+008007a2 memcpy
+0080028f sleep
+00800278 lab6_set_priority
+00800dfc vsnprintf
+00800375 umain
+00202d04 __STAB_END__
+00800150 sys_kill
+00202d05 __STABSTR_BEGIN__
+00800020 __panic
+008001b7 sys_sleep
+00800562 strtol
+008003b6 strnlen
+0080025d print_pgdir
+0080023a kill
+00800533 strfind
+008001fc wait
+008002a5 _start
+00800e7b rand
+008004aa strncmp
+00800171 sys_putc
+00800426 strncpy
+008007f2 memcmp
+008001ef fork
+008006bf memset
+00800f53 main
+00800f3a srand
+00800e56 hash32
+008009d1 printfmt
+00203b17 __STABSTR_END__
+00800460 strcmp
+0080026b gettime_msec
+00800192 sys_gettime
+008002d8 vcprintf
+0080006e __warn
+00800327 cputs
+008001a1 sys_lab6_set_priority
+008001c9 exit
+0080012c sys_wait
+0080010b sys_exit
+00200010 __STAB_BEGIN__
+0080038e strlen
+00800183 sys_pgdir
+00800500 strchr
+00800162 sys_getpid
Binary files lab7_original/obj/user/faultread.o and lab7/obj/user/faultread.o differ
diff -r -u -P lab7_original/obj/user/faultread.sym lab7/obj/user/faultread.sym
--- lab7_original/obj/user/faultread.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/faultread.sym	2016-05-06 21:59:28.694162656 +0800
@@ -0,0 +1,78 @@
+00800020 .text
+00800fa0 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202d05 .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b5 syscall
+00000000 ulib.c
+00000000 stdio.c
+008002b4 cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+008010a0 error_string
+0080084a printnum
+0080093b getuint
+0080098a getint
+00800d9d sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 faultread.c
+008003e6 strcpy
+0080022c yield
+00800213 waitpid
+00800141 sys_yield
+008006ff memmove
+00800dd3 snprintf
+008009f5 vprintfmt
+0080011d sys_fork
+00800301 cprintf
+00800250 getpid
+008007a2 memcpy
+0080028f sleep
+00800278 lab6_set_priority
+00800dfc vsnprintf
+00800375 umain
+00202d04 __STAB_END__
+00800150 sys_kill
+00202d05 __STABSTR_BEGIN__
+00800020 __panic
+008001b7 sys_sleep
+00800562 strtol
+008003b6 strnlen
+0080025d print_pgdir
+0080023a kill
+00800533 strfind
+008001fc wait
+008002a5 _start
+00800e7b rand
+008004aa strncmp
+00800171 sys_putc
+00800426 strncpy
+008007f2 memcmp
+008001ef fork
+008006bf memset
+00800f53 main
+00800f3a srand
+00800e56 hash32
+008009d1 printfmt
+00203b11 __STABSTR_END__
+00800460 strcmp
+0080026b gettime_msec
+00800192 sys_gettime
+008002d8 vcprintf
+0080006e __warn
+00800327 cputs
+008001a1 sys_lab6_set_priority
+008001c9 exit
+0080012c sys_wait
+0080010b sys_exit
+00200010 __STAB_BEGIN__
+0080038e strlen
+00800183 sys_pgdir
+00800500 strchr
+00800162 sys_getpid
diff -r -u -P lab7_original/obj/user/forktest.asm lab7/obj/user/forktest.asm
--- lab7_original/obj/user/forktest.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/forktest.asm	2016-05-06 21:59:28.582158557 +0800
@@ -0,0 +1,2706 @@
+
+obj/__user_forktest.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 18             	sub    $0x18,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	83 ec 04             	sub    $0x4,%esp
+  80002f:	ff 75 0c             	pushl  0xc(%ebp)
+  800032:	ff 75 08             	pushl  0x8(%ebp)
+  800035:	68 60 10 80 00       	push   $0x801060
+  80003a:	e8 c2 02 00 00       	call   800301 <cprintf>
+  80003f:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800042:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800045:	83 ec 08             	sub    $0x8,%esp
+  800048:	50                   	push   %eax
+  800049:	ff 75 10             	pushl  0x10(%ebp)
+  80004c:	e8 87 02 00 00       	call   8002d8 <vcprintf>
+  800051:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  800054:	83 ec 0c             	sub    $0xc,%esp
+  800057:	68 7a 10 80 00       	push   $0x80107a
+  80005c:	e8 a0 02 00 00       	call   800301 <cprintf>
+  800061:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	83 ec 0c             	sub    $0xc,%esp
+  800067:	6a f6                	push   $0xfffffff6
+  800069:	e8 5b 01 00 00       	call   8001c9 <exit>
+
+0080006e <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80006e:	55                   	push   %ebp
+  80006f:	89 e5                	mov    %esp,%ebp
+  800071:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800074:	8d 45 14             	lea    0x14(%ebp),%eax
+  800077:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007a:	83 ec 04             	sub    $0x4,%esp
+  80007d:	ff 75 0c             	pushl  0xc(%ebp)
+  800080:	ff 75 08             	pushl  0x8(%ebp)
+  800083:	68 7c 10 80 00       	push   $0x80107c
+  800088:	e8 74 02 00 00       	call   800301 <cprintf>
+  80008d:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800090:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800093:	83 ec 08             	sub    $0x8,%esp
+  800096:	50                   	push   %eax
+  800097:	ff 75 10             	pushl  0x10(%ebp)
+  80009a:	e8 39 02 00 00       	call   8002d8 <vcprintf>
+  80009f:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  8000a2:	83 ec 0c             	sub    $0xc,%esp
+  8000a5:	68 7a 10 80 00       	push   $0x80107a
+  8000aa:	e8 52 02 00 00       	call   800301 <cprintf>
+  8000af:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8000b2:	90                   	nop
+  8000b3:	c9                   	leave  
+  8000b4:	c3                   	ret    
+
+008000b5 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b5:	55                   	push   %ebp
+  8000b6:	89 e5                	mov    %esp,%ebp
+  8000b8:	57                   	push   %edi
+  8000b9:	56                   	push   %esi
+  8000ba:	53                   	push   %ebx
+  8000bb:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000be:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cb:	eb 16                	jmp    8000e3 <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8000cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d0:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d3:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d6:	8b 10                	mov    (%eax),%edx
+  8000d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000db:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000df:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8000e3:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e7:	7e e4                	jle    8000cd <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000e9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ec:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000ef:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f2:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f5:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8000f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fb:	cd 80                	int    $0x80
+  8000fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  800100:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800103:	83 c4 20             	add    $0x20,%esp
+  800106:	5b                   	pop    %ebx
+  800107:	5e                   	pop    %esi
+  800108:	5f                   	pop    %edi
+  800109:	5d                   	pop    %ebp
+  80010a:	c3                   	ret    
+
+0080010b <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010b:	55                   	push   %ebp
+  80010c:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_exit, error_code);
+  80010e:	ff 75 08             	pushl  0x8(%ebp)
+  800111:	6a 01                	push   $0x1
+  800113:	e8 9d ff ff ff       	call   8000b5 <syscall>
+  800118:	83 c4 08             	add    $0x8,%esp
+}
+  80011b:	c9                   	leave  
+  80011c:	c3                   	ret    
+
+0080011d <sys_fork>:
+
+int
+sys_fork(void) {
+  80011d:	55                   	push   %ebp
+  80011e:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_fork);
+  800120:	6a 02                	push   $0x2
+  800122:	e8 8e ff ff ff       	call   8000b5 <syscall>
+  800127:	83 c4 04             	add    $0x4,%esp
+}
+  80012a:	c9                   	leave  
+  80012b:	c3                   	ret    
+
+0080012c <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80012c:	55                   	push   %ebp
+  80012d:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_wait, pid, store);
+  80012f:	ff 75 0c             	pushl  0xc(%ebp)
+  800132:	ff 75 08             	pushl  0x8(%ebp)
+  800135:	6a 03                	push   $0x3
+  800137:	e8 79 ff ff ff       	call   8000b5 <syscall>
+  80013c:	83 c4 0c             	add    $0xc,%esp
+}
+  80013f:	c9                   	leave  
+  800140:	c3                   	ret    
+
+00800141 <sys_yield>:
+
+int
+sys_yield(void) {
+  800141:	55                   	push   %ebp
+  800142:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_yield);
+  800144:	6a 0a                	push   $0xa
+  800146:	e8 6a ff ff ff       	call   8000b5 <syscall>
+  80014b:	83 c4 04             	add    $0x4,%esp
+}
+  80014e:	c9                   	leave  
+  80014f:	c3                   	ret    
+
+00800150 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800150:	55                   	push   %ebp
+  800151:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_kill, pid);
+  800153:	ff 75 08             	pushl  0x8(%ebp)
+  800156:	6a 0c                	push   $0xc
+  800158:	e8 58 ff ff ff       	call   8000b5 <syscall>
+  80015d:	83 c4 08             	add    $0x8,%esp
+}
+  800160:	c9                   	leave  
+  800161:	c3                   	ret    
+
+00800162 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800162:	55                   	push   %ebp
+  800163:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_getpid);
+  800165:	6a 12                	push   $0x12
+  800167:	e8 49 ff ff ff       	call   8000b5 <syscall>
+  80016c:	83 c4 04             	add    $0x4,%esp
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_putc, c);
+  800174:	ff 75 08             	pushl  0x8(%ebp)
+  800177:	6a 1e                	push   $0x1e
+  800179:	e8 37 ff ff ff       	call   8000b5 <syscall>
+  80017e:	83 c4 08             	add    $0x8,%esp
+}
+  800181:	c9                   	leave  
+  800182:	c3                   	ret    
+
+00800183 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800183:	55                   	push   %ebp
+  800184:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_pgdir);
+  800186:	6a 1f                	push   $0x1f
+  800188:	e8 28 ff ff ff       	call   8000b5 <syscall>
+  80018d:	83 c4 04             	add    $0x4,%esp
+}
+  800190:	c9                   	leave  
+  800191:	c3                   	ret    
+
+00800192 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  800192:	55                   	push   %ebp
+  800193:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_gettime);
+  800195:	6a 11                	push   $0x11
+  800197:	e8 19 ff ff ff       	call   8000b5 <syscall>
+  80019c:	83 c4 04             	add    $0x4,%esp
+}
+  80019f:	c9                   	leave  
+  8001a0:	c3                   	ret    
+
+008001a1 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001a1:	55                   	push   %ebp
+  8001a2:	89 e5                	mov    %esp,%ebp
+    syscall(SYS_lab6_set_priority, priority);
+  8001a4:	ff 75 08             	pushl  0x8(%ebp)
+  8001a7:	68 ff 00 00 00       	push   $0xff
+  8001ac:	e8 04 ff ff ff       	call   8000b5 <syscall>
+  8001b1:	83 c4 08             	add    $0x8,%esp
+}
+  8001b4:	90                   	nop
+  8001b5:	c9                   	leave  
+  8001b6:	c3                   	ret    
+
+008001b7 <sys_sleep>:
+
+int
+sys_sleep(unsigned int time) {
+  8001b7:	55                   	push   %ebp
+  8001b8:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_sleep, time);
+  8001ba:	ff 75 08             	pushl  0x8(%ebp)
+  8001bd:	6a 0b                	push   $0xb
+  8001bf:	e8 f1 fe ff ff       	call   8000b5 <syscall>
+  8001c4:	83 c4 08             	add    $0x8,%esp
+}
+  8001c7:	c9                   	leave  
+  8001c8:	c3                   	ret    
+
+008001c9 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001c9:	55                   	push   %ebp
+  8001ca:	89 e5                	mov    %esp,%ebp
+  8001cc:	83 ec 08             	sub    $0x8,%esp
+    sys_exit(error_code);
+  8001cf:	83 ec 0c             	sub    $0xc,%esp
+  8001d2:	ff 75 08             	pushl  0x8(%ebp)
+  8001d5:	e8 31 ff ff ff       	call   80010b <sys_exit>
+  8001da:	83 c4 10             	add    $0x10,%esp
+    cprintf("BUG: exit failed.\n");
+  8001dd:	83 ec 0c             	sub    $0xc,%esp
+  8001e0:	68 98 10 80 00       	push   $0x801098
+  8001e5:	e8 17 01 00 00       	call   800301 <cprintf>
+  8001ea:	83 c4 10             	add    $0x10,%esp
+    while (1);
+  8001ed:	eb fe                	jmp    8001ed <exit+0x24>
+
+008001ef <fork>:
+}
+
+int
+fork(void) {
+  8001ef:	55                   	push   %ebp
+  8001f0:	89 e5                	mov    %esp,%ebp
+  8001f2:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8001f5:	e8 23 ff ff ff       	call   80011d <sys_fork>
+}
+  8001fa:	c9                   	leave  
+  8001fb:	c3                   	ret    
+
+008001fc <wait>:
+
+int
+wait(void) {
+  8001fc:	55                   	push   %ebp
+  8001fd:	89 e5                	mov    %esp,%ebp
+  8001ff:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(0, NULL);
+  800202:	83 ec 08             	sub    $0x8,%esp
+  800205:	6a 00                	push   $0x0
+  800207:	6a 00                	push   $0x0
+  800209:	e8 1e ff ff ff       	call   80012c <sys_wait>
+  80020e:	83 c4 10             	add    $0x10,%esp
+}
+  800211:	c9                   	leave  
+  800212:	c3                   	ret    
+
+00800213 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800213:	55                   	push   %ebp
+  800214:	89 e5                	mov    %esp,%ebp
+  800216:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(pid, store);
+  800219:	83 ec 08             	sub    $0x8,%esp
+  80021c:	ff 75 0c             	pushl  0xc(%ebp)
+  80021f:	ff 75 08             	pushl  0x8(%ebp)
+  800222:	e8 05 ff ff ff       	call   80012c <sys_wait>
+  800227:	83 c4 10             	add    $0x10,%esp
+}
+  80022a:	c9                   	leave  
+  80022b:	c3                   	ret    
+
+0080022c <yield>:
+
+void
+yield(void) {
+  80022c:	55                   	push   %ebp
+  80022d:	89 e5                	mov    %esp,%ebp
+  80022f:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800232:	e8 0a ff ff ff       	call   800141 <sys_yield>
+}
+  800237:	90                   	nop
+  800238:	c9                   	leave  
+  800239:	c3                   	ret    
+
+0080023a <kill>:
+
+int
+kill(int pid) {
+  80023a:	55                   	push   %ebp
+  80023b:	89 e5                	mov    %esp,%ebp
+  80023d:	83 ec 08             	sub    $0x8,%esp
+    return sys_kill(pid);
+  800240:	83 ec 0c             	sub    $0xc,%esp
+  800243:	ff 75 08             	pushl  0x8(%ebp)
+  800246:	e8 05 ff ff ff       	call   800150 <sys_kill>
+  80024b:	83 c4 10             	add    $0x10,%esp
+}
+  80024e:	c9                   	leave  
+  80024f:	c3                   	ret    
+
+00800250 <getpid>:
+
+int
+getpid(void) {
+  800250:	55                   	push   %ebp
+  800251:	89 e5                	mov    %esp,%ebp
+  800253:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800256:	e8 07 ff ff ff       	call   800162 <sys_getpid>
+}
+  80025b:	c9                   	leave  
+  80025c:	c3                   	ret    
+
+0080025d <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80025d:	55                   	push   %ebp
+  80025e:	89 e5                	mov    %esp,%ebp
+  800260:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800263:	e8 1b ff ff ff       	call   800183 <sys_pgdir>
+}
+  800268:	90                   	nop
+  800269:	c9                   	leave  
+  80026a:	c3                   	ret    
+
+0080026b <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80026b:	55                   	push   %ebp
+  80026c:	89 e5                	mov    %esp,%ebp
+  80026e:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800271:	e8 1c ff ff ff       	call   800192 <sys_gettime>
+}
+  800276:	c9                   	leave  
+  800277:	c3                   	ret    
+
+00800278 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800278:	55                   	push   %ebp
+  800279:	89 e5                	mov    %esp,%ebp
+  80027b:	83 ec 08             	sub    $0x8,%esp
+    sys_lab6_set_priority(priority);
+  80027e:	83 ec 0c             	sub    $0xc,%esp
+  800281:	ff 75 08             	pushl  0x8(%ebp)
+  800284:	e8 18 ff ff ff       	call   8001a1 <sys_lab6_set_priority>
+  800289:	83 c4 10             	add    $0x10,%esp
+}
+  80028c:	90                   	nop
+  80028d:	c9                   	leave  
+  80028e:	c3                   	ret    
+
+0080028f <sleep>:
+
+int
+sleep(unsigned int time) {
+  80028f:	55                   	push   %ebp
+  800290:	89 e5                	mov    %esp,%ebp
+  800292:	83 ec 08             	sub    $0x8,%esp
+    return sys_sleep(time);
+  800295:	83 ec 0c             	sub    $0xc,%esp
+  800298:	ff 75 08             	pushl  0x8(%ebp)
+  80029b:	e8 17 ff ff ff       	call   8001b7 <sys_sleep>
+  8002a0:	83 c4 10             	add    $0x10,%esp
+}
+  8002a3:	c9                   	leave  
+  8002a4:	c3                   	ret    
+
+008002a5 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  8002a5:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  8002aa:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  8002ad:	e8 c3 00 00 00       	call   800375 <umain>
+1:  jmp 1b
+  8002b2:	eb fe                	jmp    8002b2 <_start+0xd>
+
+008002b4 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8002b4:	55                   	push   %ebp
+  8002b5:	89 e5                	mov    %esp,%ebp
+  8002b7:	83 ec 08             	sub    $0x8,%esp
+    sys_putc(c);
+  8002ba:	83 ec 0c             	sub    $0xc,%esp
+  8002bd:	ff 75 08             	pushl  0x8(%ebp)
+  8002c0:	e8 ac fe ff ff       	call   800171 <sys_putc>
+  8002c5:	83 c4 10             	add    $0x10,%esp
+    (*cnt) ++;
+  8002c8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002cb:	8b 00                	mov    (%eax),%eax
+  8002cd:	8d 50 01             	lea    0x1(%eax),%edx
+  8002d0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002d3:	89 10                	mov    %edx,(%eax)
+}
+  8002d5:	90                   	nop
+  8002d6:	c9                   	leave  
+  8002d7:	c3                   	ret    
+
+008002d8 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002d8:	55                   	push   %ebp
+  8002d9:	89 e5                	mov    %esp,%ebp
+  8002db:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  8002de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002e5:	ff 75 0c             	pushl  0xc(%ebp)
+  8002e8:	ff 75 08             	pushl  0x8(%ebp)
+  8002eb:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  8002ee:	50                   	push   %eax
+  8002ef:	68 b4 02 80 00       	push   $0x8002b4
+  8002f4:	e8 fc 06 00 00       	call   8009f5 <vprintfmt>
+  8002f9:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  8002fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002ff:	c9                   	leave  
+  800300:	c3                   	ret    
+
+00800301 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800301:	55                   	push   %ebp
+  800302:	89 e5                	mov    %esp,%ebp
+  800304:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800307:	8d 45 0c             	lea    0xc(%ebp),%eax
+  80030a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  80030d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800310:	83 ec 08             	sub    $0x8,%esp
+  800313:	50                   	push   %eax
+  800314:	ff 75 08             	pushl  0x8(%ebp)
+  800317:	e8 bc ff ff ff       	call   8002d8 <vcprintf>
+  80031c:	83 c4 10             	add    $0x10,%esp
+  80031f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800322:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800325:	c9                   	leave  
+  800326:	c3                   	ret    
+
+00800327 <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  800327:	55                   	push   %ebp
+  800328:	89 e5                	mov    %esp,%ebp
+  80032a:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  80032d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  800334:	eb 14                	jmp    80034a <cputs+0x23>
+        cputch(c, &cnt);
+  800336:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  80033a:	83 ec 08             	sub    $0x8,%esp
+  80033d:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800340:	52                   	push   %edx
+  800341:	50                   	push   %eax
+  800342:	e8 6d ff ff ff       	call   8002b4 <cputch>
+  800347:	83 c4 10             	add    $0x10,%esp
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  80034a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80034d:	8d 50 01             	lea    0x1(%eax),%edx
+  800350:	89 55 08             	mov    %edx,0x8(%ebp)
+  800353:	0f b6 00             	movzbl (%eax),%eax
+  800356:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800359:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  80035d:	75 d7                	jne    800336 <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  80035f:	83 ec 08             	sub    $0x8,%esp
+  800362:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800365:	50                   	push   %eax
+  800366:	6a 0a                	push   $0xa
+  800368:	e8 47 ff ff ff       	call   8002b4 <cputch>
+  80036d:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  800370:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  800373:	c9                   	leave  
+  800374:	c3                   	ret    
+
+00800375 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800375:	55                   	push   %ebp
+  800376:	89 e5                	mov    %esp,%ebp
+  800378:	83 ec 18             	sub    $0x18,%esp
+    int ret = main();
+  80037b:	e8 d3 0b 00 00       	call   800f53 <main>
+  800380:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  800383:	83 ec 0c             	sub    $0xc,%esp
+  800386:	ff 75 f4             	pushl  -0xc(%ebp)
+  800389:	e8 3b fe ff ff       	call   8001c9 <exit>
+
+0080038e <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  80038e:	55                   	push   %ebp
+  80038f:	89 e5                	mov    %esp,%ebp
+  800391:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800394:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  80039b:	eb 04                	jmp    8003a1 <strlen+0x13>
+        cnt ++;
+  80039d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  8003a1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003a4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003a7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003aa:	0f b6 00             	movzbl (%eax),%eax
+  8003ad:	84 c0                	test   %al,%al
+  8003af:	75 ec                	jne    80039d <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003b4:	c9                   	leave  
+  8003b5:	c3                   	ret    
+
+008003b6 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  8003b6:	55                   	push   %ebp
+  8003b7:	89 e5                	mov    %esp,%ebp
+  8003b9:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003bc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003c3:	eb 04                	jmp    8003c9 <strnlen+0x13>
+        cnt ++;
+  8003c5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  8003c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003cc:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003cf:	73 10                	jae    8003e1 <strnlen+0x2b>
+  8003d1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003d4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003d7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003da:	0f b6 00             	movzbl (%eax),%eax
+  8003dd:	84 c0                	test   %al,%al
+  8003df:	75 e4                	jne    8003c5 <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003e4:	c9                   	leave  
+  8003e5:	c3                   	ret    
+
+008003e6 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  8003e6:	55                   	push   %ebp
+  8003e7:	89 e5                	mov    %esp,%ebp
+  8003e9:	57                   	push   %edi
+  8003ea:	56                   	push   %esi
+  8003eb:	83 ec 20             	sub    $0x20,%esp
+  8003ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003f4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8003f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  8003fa:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800400:	89 d1                	mov    %edx,%ecx
+  800402:	89 c2                	mov    %eax,%edx
+  800404:	89 ce                	mov    %ecx,%esi
+  800406:	89 d7                	mov    %edx,%edi
+  800408:	ac                   	lods   %ds:(%esi),%al
+  800409:	aa                   	stos   %al,%es:(%edi)
+  80040a:	84 c0                	test   %al,%al
+  80040c:	75 fa                	jne    800408 <strcpy+0x22>
+  80040e:	89 fa                	mov    %edi,%edx
+  800410:	89 f1                	mov    %esi,%ecx
+  800412:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800415:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800418:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  80041b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  80041e:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  80041f:	83 c4 20             	add    $0x20,%esp
+  800422:	5e                   	pop    %esi
+  800423:	5f                   	pop    %edi
+  800424:	5d                   	pop    %ebp
+  800425:	c3                   	ret    
+
+00800426 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800426:	55                   	push   %ebp
+  800427:	89 e5                	mov    %esp,%ebp
+  800429:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  80042c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80042f:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800432:	eb 21                	jmp    800455 <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800434:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800437:	0f b6 10             	movzbl (%eax),%edx
+  80043a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80043d:	88 10                	mov    %dl,(%eax)
+  80043f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800442:	0f b6 00             	movzbl (%eax),%eax
+  800445:	84 c0                	test   %al,%al
+  800447:	74 04                	je     80044d <strncpy+0x27>
+            src ++;
+  800449:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  80044d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800451:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800455:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800459:	75 d9                	jne    800434 <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  80045b:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  80045e:	c9                   	leave  
+  80045f:	c3                   	ret    
+
+00800460 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800460:	55                   	push   %ebp
+  800461:	89 e5                	mov    %esp,%ebp
+  800463:	57                   	push   %edi
+  800464:	56                   	push   %esi
+  800465:	83 ec 20             	sub    $0x20,%esp
+  800468:	8b 45 08             	mov    0x8(%ebp),%eax
+  80046b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80046e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800471:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800474:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800477:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80047a:	89 d1                	mov    %edx,%ecx
+  80047c:	89 c2                	mov    %eax,%edx
+  80047e:	89 ce                	mov    %ecx,%esi
+  800480:	89 d7                	mov    %edx,%edi
+  800482:	ac                   	lods   %ds:(%esi),%al
+  800483:	ae                   	scas   %es:(%edi),%al
+  800484:	75 08                	jne    80048e <strcmp+0x2e>
+  800486:	84 c0                	test   %al,%al
+  800488:	75 f8                	jne    800482 <strcmp+0x22>
+  80048a:	31 c0                	xor    %eax,%eax
+  80048c:	eb 04                	jmp    800492 <strcmp+0x32>
+  80048e:	19 c0                	sbb    %eax,%eax
+  800490:	0c 01                	or     $0x1,%al
+  800492:	89 fa                	mov    %edi,%edx
+  800494:	89 f1                	mov    %esi,%ecx
+  800496:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800499:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  80049c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  80049f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  8004a2:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  8004a3:	83 c4 20             	add    $0x20,%esp
+  8004a6:	5e                   	pop    %esi
+  8004a7:	5f                   	pop    %edi
+  8004a8:	5d                   	pop    %ebp
+  8004a9:	c3                   	ret    
+
+008004aa <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  8004aa:	55                   	push   %ebp
+  8004ab:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004ad:	eb 0c                	jmp    8004bb <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  8004af:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  8004b3:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8004b7:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004bb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004bf:	74 1a                	je     8004db <strncmp+0x31>
+  8004c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004c4:	0f b6 00             	movzbl (%eax),%eax
+  8004c7:	84 c0                	test   %al,%al
+  8004c9:	74 10                	je     8004db <strncmp+0x31>
+  8004cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004ce:	0f b6 10             	movzbl (%eax),%edx
+  8004d1:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004d4:	0f b6 00             	movzbl (%eax),%eax
+  8004d7:	38 c2                	cmp    %al,%dl
+  8004d9:	74 d4                	je     8004af <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004db:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004df:	74 18                	je     8004f9 <strncmp+0x4f>
+  8004e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e4:	0f b6 00             	movzbl (%eax),%eax
+  8004e7:	0f b6 d0             	movzbl %al,%edx
+  8004ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ed:	0f b6 00             	movzbl (%eax),%eax
+  8004f0:	0f b6 c0             	movzbl %al,%eax
+  8004f3:	29 c2                	sub    %eax,%edx
+  8004f5:	89 d0                	mov    %edx,%eax
+  8004f7:	eb 05                	jmp    8004fe <strncmp+0x54>
+  8004f9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8004fe:	5d                   	pop    %ebp
+  8004ff:	c3                   	ret    
+
+00800500 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800500:	55                   	push   %ebp
+  800501:	89 e5                	mov    %esp,%ebp
+  800503:	83 ec 04             	sub    $0x4,%esp
+  800506:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800509:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  80050c:	eb 14                	jmp    800522 <strchr+0x22>
+        if (*s == c) {
+  80050e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800511:	0f b6 00             	movzbl (%eax),%eax
+  800514:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800517:	75 05                	jne    80051e <strchr+0x1e>
+            return (char *)s;
+  800519:	8b 45 08             	mov    0x8(%ebp),%eax
+  80051c:	eb 13                	jmp    800531 <strchr+0x31>
+        }
+        s ++;
+  80051e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800522:	8b 45 08             	mov    0x8(%ebp),%eax
+  800525:	0f b6 00             	movzbl (%eax),%eax
+  800528:	84 c0                	test   %al,%al
+  80052a:	75 e2                	jne    80050e <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  80052c:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800531:	c9                   	leave  
+  800532:	c3                   	ret    
+
+00800533 <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800533:	55                   	push   %ebp
+  800534:	89 e5                	mov    %esp,%ebp
+  800536:	83 ec 04             	sub    $0x4,%esp
+  800539:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80053c:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  80053f:	eb 0f                	jmp    800550 <strfind+0x1d>
+        if (*s == c) {
+  800541:	8b 45 08             	mov    0x8(%ebp),%eax
+  800544:	0f b6 00             	movzbl (%eax),%eax
+  800547:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  80054a:	74 10                	je     80055c <strfind+0x29>
+            break;
+        }
+        s ++;
+  80054c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800550:	8b 45 08             	mov    0x8(%ebp),%eax
+  800553:	0f b6 00             	movzbl (%eax),%eax
+  800556:	84 c0                	test   %al,%al
+  800558:	75 e7                	jne    800541 <strfind+0xe>
+  80055a:	eb 01                	jmp    80055d <strfind+0x2a>
+        if (*s == c) {
+            break;
+  80055c:	90                   	nop
+        }
+        s ++;
+    }
+    return (char *)s;
+  80055d:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800560:	c9                   	leave  
+  800561:	c3                   	ret    
+
+00800562 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800562:	55                   	push   %ebp
+  800563:	89 e5                	mov    %esp,%ebp
+  800565:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800568:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  80056f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800576:	eb 04                	jmp    80057c <strtol+0x1a>
+        s ++;
+  800578:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80057c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80057f:	0f b6 00             	movzbl (%eax),%eax
+  800582:	3c 20                	cmp    $0x20,%al
+  800584:	74 f2                	je     800578 <strtol+0x16>
+  800586:	8b 45 08             	mov    0x8(%ebp),%eax
+  800589:	0f b6 00             	movzbl (%eax),%eax
+  80058c:	3c 09                	cmp    $0x9,%al
+  80058e:	74 e8                	je     800578 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800590:	8b 45 08             	mov    0x8(%ebp),%eax
+  800593:	0f b6 00             	movzbl (%eax),%eax
+  800596:	3c 2b                	cmp    $0x2b,%al
+  800598:	75 06                	jne    8005a0 <strtol+0x3e>
+        s ++;
+  80059a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  80059e:	eb 15                	jmp    8005b5 <strtol+0x53>
+    }
+    else if (*s == '-') {
+  8005a0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a3:	0f b6 00             	movzbl (%eax),%eax
+  8005a6:	3c 2d                	cmp    $0x2d,%al
+  8005a8:	75 0b                	jne    8005b5 <strtol+0x53>
+        s ++, neg = 1;
+  8005aa:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005ae:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  8005b5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005b9:	74 06                	je     8005c1 <strtol+0x5f>
+  8005bb:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  8005bf:	75 24                	jne    8005e5 <strtol+0x83>
+  8005c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005c4:	0f b6 00             	movzbl (%eax),%eax
+  8005c7:	3c 30                	cmp    $0x30,%al
+  8005c9:	75 1a                	jne    8005e5 <strtol+0x83>
+  8005cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ce:	83 c0 01             	add    $0x1,%eax
+  8005d1:	0f b6 00             	movzbl (%eax),%eax
+  8005d4:	3c 78                	cmp    $0x78,%al
+  8005d6:	75 0d                	jne    8005e5 <strtol+0x83>
+        s += 2, base = 16;
+  8005d8:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005dc:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005e3:	eb 2a                	jmp    80060f <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005e5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005e9:	75 17                	jne    800602 <strtol+0xa0>
+  8005eb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ee:	0f b6 00             	movzbl (%eax),%eax
+  8005f1:	3c 30                	cmp    $0x30,%al
+  8005f3:	75 0d                	jne    800602 <strtol+0xa0>
+        s ++, base = 8;
+  8005f5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005f9:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800600:	eb 0d                	jmp    80060f <strtol+0xad>
+    }
+    else if (base == 0) {
+  800602:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800606:	75 07                	jne    80060f <strtol+0xad>
+        base = 10;
+  800608:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  80060f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800612:	0f b6 00             	movzbl (%eax),%eax
+  800615:	3c 2f                	cmp    $0x2f,%al
+  800617:	7e 1b                	jle    800634 <strtol+0xd2>
+  800619:	8b 45 08             	mov    0x8(%ebp),%eax
+  80061c:	0f b6 00             	movzbl (%eax),%eax
+  80061f:	3c 39                	cmp    $0x39,%al
+  800621:	7f 11                	jg     800634 <strtol+0xd2>
+            dig = *s - '0';
+  800623:	8b 45 08             	mov    0x8(%ebp),%eax
+  800626:	0f b6 00             	movzbl (%eax),%eax
+  800629:	0f be c0             	movsbl %al,%eax
+  80062c:	83 e8 30             	sub    $0x30,%eax
+  80062f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800632:	eb 48                	jmp    80067c <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800634:	8b 45 08             	mov    0x8(%ebp),%eax
+  800637:	0f b6 00             	movzbl (%eax),%eax
+  80063a:	3c 60                	cmp    $0x60,%al
+  80063c:	7e 1b                	jle    800659 <strtol+0xf7>
+  80063e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800641:	0f b6 00             	movzbl (%eax),%eax
+  800644:	3c 7a                	cmp    $0x7a,%al
+  800646:	7f 11                	jg     800659 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800648:	8b 45 08             	mov    0x8(%ebp),%eax
+  80064b:	0f b6 00             	movzbl (%eax),%eax
+  80064e:	0f be c0             	movsbl %al,%eax
+  800651:	83 e8 57             	sub    $0x57,%eax
+  800654:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800657:	eb 23                	jmp    80067c <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800659:	8b 45 08             	mov    0x8(%ebp),%eax
+  80065c:	0f b6 00             	movzbl (%eax),%eax
+  80065f:	3c 40                	cmp    $0x40,%al
+  800661:	7e 3c                	jle    80069f <strtol+0x13d>
+  800663:	8b 45 08             	mov    0x8(%ebp),%eax
+  800666:	0f b6 00             	movzbl (%eax),%eax
+  800669:	3c 5a                	cmp    $0x5a,%al
+  80066b:	7f 32                	jg     80069f <strtol+0x13d>
+            dig = *s - 'A' + 10;
+  80066d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800670:	0f b6 00             	movzbl (%eax),%eax
+  800673:	0f be c0             	movsbl %al,%eax
+  800676:	83 e8 37             	sub    $0x37,%eax
+  800679:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  80067c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80067f:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800682:	7d 1a                	jge    80069e <strtol+0x13c>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  800684:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800688:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80068b:	0f af 45 10          	imul   0x10(%ebp),%eax
+  80068f:	89 c2                	mov    %eax,%edx
+  800691:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800694:	01 d0                	add    %edx,%eax
+  800696:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800699:	e9 71 ff ff ff       	jmp    80060f <strtol+0xad>
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+            break;
+  80069e:	90                   	nop
+        }
+        s ++, val = (val * base) + dig;
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  80069f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8006a3:	74 08                	je     8006ad <strtol+0x14b>
+        *endptr = (char *) s;
+  8006a5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006a8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006ab:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  8006ad:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  8006b1:	74 07                	je     8006ba <strtol+0x158>
+  8006b3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006b6:	f7 d8                	neg    %eax
+  8006b8:	eb 03                	jmp    8006bd <strtol+0x15b>
+  8006ba:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  8006bd:	c9                   	leave  
+  8006be:	c3                   	ret    
+
+008006bf <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  8006bf:	55                   	push   %ebp
+  8006c0:	89 e5                	mov    %esp,%ebp
+  8006c2:	57                   	push   %edi
+  8006c3:	83 ec 24             	sub    $0x24,%esp
+  8006c6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006c9:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006cc:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006d0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006d3:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006d6:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006d9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006df:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006e2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006e6:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006e9:	89 d7                	mov    %edx,%edi
+  8006eb:	f3 aa                	rep stos %al,%es:(%edi)
+  8006ed:	89 fa                	mov    %edi,%edx
+  8006ef:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8006f2:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  8006f5:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006f8:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  8006f9:	83 c4 24             	add    $0x24,%esp
+  8006fc:	5f                   	pop    %edi
+  8006fd:	5d                   	pop    %ebp
+  8006fe:	c3                   	ret    
+
+008006ff <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  8006ff:	55                   	push   %ebp
+  800700:	89 e5                	mov    %esp,%ebp
+  800702:	57                   	push   %edi
+  800703:	56                   	push   %esi
+  800704:	53                   	push   %ebx
+  800705:	83 ec 30             	sub    $0x30,%esp
+  800708:	8b 45 08             	mov    0x8(%ebp),%eax
+  80070b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80070e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800711:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800714:	8b 45 10             	mov    0x10(%ebp),%eax
+  800717:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  80071a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80071d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800720:	73 42                	jae    800764 <memmove+0x65>
+  800722:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800725:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800728:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80072b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80072e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800731:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800734:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800737:	c1 e8 02             	shr    $0x2,%eax
+  80073a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  80073c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  80073f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800742:	89 d7                	mov    %edx,%edi
+  800744:	89 c6                	mov    %eax,%esi
+  800746:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800748:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  80074b:	83 e1 03             	and    $0x3,%ecx
+  80074e:	74 02                	je     800752 <memmove+0x53>
+  800750:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800752:	89 f0                	mov    %esi,%eax
+  800754:	89 fa                	mov    %edi,%edx
+  800756:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800759:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  80075c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  80075f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  800762:	eb 36                	jmp    80079a <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800764:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800767:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80076a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80076d:	01 c2                	add    %eax,%edx
+  80076f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800772:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800775:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800778:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  80077b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80077e:	89 c1                	mov    %eax,%ecx
+  800780:	89 d8                	mov    %ebx,%eax
+  800782:	89 d6                	mov    %edx,%esi
+  800784:	89 c7                	mov    %eax,%edi
+  800786:	fd                   	std    
+  800787:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800789:	fc                   	cld    
+  80078a:	89 f8                	mov    %edi,%eax
+  80078c:	89 f2                	mov    %esi,%edx
+  80078e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800791:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800794:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800797:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  80079a:	83 c4 30             	add    $0x30,%esp
+  80079d:	5b                   	pop    %ebx
+  80079e:	5e                   	pop    %esi
+  80079f:	5f                   	pop    %edi
+  8007a0:	5d                   	pop    %ebp
+  8007a1:	c3                   	ret    
+
+008007a2 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  8007a2:	55                   	push   %ebp
+  8007a3:	89 e5                	mov    %esp,%ebp
+  8007a5:	57                   	push   %edi
+  8007a6:	56                   	push   %esi
+  8007a7:	83 ec 20             	sub    $0x20,%esp
+  8007aa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8007b0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007b6:	8b 45 10             	mov    0x10(%ebp),%eax
+  8007b9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  8007bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8007bf:	c1 e8 02             	shr    $0x2,%eax
+  8007c2:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  8007c4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007ca:	89 d7                	mov    %edx,%edi
+  8007cc:	89 c6                	mov    %eax,%esi
+  8007ce:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007d0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007d3:	83 e1 03             	and    $0x3,%ecx
+  8007d6:	74 02                	je     8007da <memcpy+0x38>
+  8007d8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007da:	89 f0                	mov    %esi,%eax
+  8007dc:	89 fa                	mov    %edi,%edx
+  8007de:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007e1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007e4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  8007e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007ea:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007eb:	83 c4 20             	add    $0x20,%esp
+  8007ee:	5e                   	pop    %esi
+  8007ef:	5f                   	pop    %edi
+  8007f0:	5d                   	pop    %ebp
+  8007f1:	c3                   	ret    
+
+008007f2 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  8007f2:	55                   	push   %ebp
+  8007f3:	89 e5                	mov    %esp,%ebp
+  8007f5:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  8007f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007fb:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  8007fe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800801:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800804:	eb 30                	jmp    800836 <memcmp+0x44>
+        if (*s1 != *s2) {
+  800806:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800809:	0f b6 10             	movzbl (%eax),%edx
+  80080c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80080f:	0f b6 00             	movzbl (%eax),%eax
+  800812:	38 c2                	cmp    %al,%dl
+  800814:	74 18                	je     80082e <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800816:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800819:	0f b6 00             	movzbl (%eax),%eax
+  80081c:	0f b6 d0             	movzbl %al,%edx
+  80081f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800822:	0f b6 00             	movzbl (%eax),%eax
+  800825:	0f b6 c0             	movzbl %al,%eax
+  800828:	29 c2                	sub    %eax,%edx
+  80082a:	89 d0                	mov    %edx,%eax
+  80082c:	eb 1a                	jmp    800848 <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  80082e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800832:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800836:	8b 45 10             	mov    0x10(%ebp),%eax
+  800839:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80083c:	89 55 10             	mov    %edx,0x10(%ebp)
+  80083f:	85 c0                	test   %eax,%eax
+  800841:	75 c3                	jne    800806 <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800843:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800848:	c9                   	leave  
+  800849:	c3                   	ret    
+
+0080084a <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  80084a:	55                   	push   %ebp
+  80084b:	89 e5                	mov    %esp,%ebp
+  80084d:	83 ec 38             	sub    $0x38,%esp
+  800850:	8b 45 10             	mov    0x10(%ebp),%eax
+  800853:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800856:	8b 45 14             	mov    0x14(%ebp),%eax
+  800859:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80085c:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  80085f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800862:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800865:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800868:	8b 45 18             	mov    0x18(%ebp),%eax
+  80086b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  80086e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800871:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800874:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800877:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  80087a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80087d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800880:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800884:	74 1c                	je     8008a2 <printnum+0x58>
+  800886:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800889:	ba 00 00 00 00       	mov    $0x0,%edx
+  80088e:	f7 75 e4             	divl   -0x1c(%ebp)
+  800891:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800894:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800897:	ba 00 00 00 00       	mov    $0x0,%edx
+  80089c:	f7 75 e4             	divl   -0x1c(%ebp)
+  80089f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008a2:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008a8:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008ab:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8008ae:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8008b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008b4:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8008b7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8008ba:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8008bd:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8008c0:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8008c3:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008c6:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008cb:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008ce:	77 41                	ja     800911 <printnum+0xc7>
+  8008d0:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008d3:	72 05                	jb     8008da <printnum+0x90>
+  8008d5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  8008d8:	77 37                	ja     800911 <printnum+0xc7>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008da:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008dd:	83 e8 01             	sub    $0x1,%eax
+  8008e0:	83 ec 04             	sub    $0x4,%esp
+  8008e3:	ff 75 20             	pushl  0x20(%ebp)
+  8008e6:	50                   	push   %eax
+  8008e7:	ff 75 18             	pushl  0x18(%ebp)
+  8008ea:	ff 75 ec             	pushl  -0x14(%ebp)
+  8008ed:	ff 75 e8             	pushl  -0x18(%ebp)
+  8008f0:	ff 75 0c             	pushl  0xc(%ebp)
+  8008f3:	ff 75 08             	pushl  0x8(%ebp)
+  8008f6:	e8 4f ff ff ff       	call   80084a <printnum>
+  8008fb:	83 c4 20             	add    $0x20,%esp
+  8008fe:	eb 1b                	jmp    80091b <printnum+0xd1>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800900:	83 ec 08             	sub    $0x8,%esp
+  800903:	ff 75 0c             	pushl  0xc(%ebp)
+  800906:	ff 75 20             	pushl  0x20(%ebp)
+  800909:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090c:	ff d0                	call   *%eax
+  80090e:	83 c4 10             	add    $0x10,%esp
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  800911:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  800915:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  800919:	7f e5                	jg     800900 <printnum+0xb6>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  80091b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  80091e:	05 c4 11 80 00       	add    $0x8011c4,%eax
+  800923:	0f b6 00             	movzbl (%eax),%eax
+  800926:	0f be c0             	movsbl %al,%eax
+  800929:	83 ec 08             	sub    $0x8,%esp
+  80092c:	ff 75 0c             	pushl  0xc(%ebp)
+  80092f:	50                   	push   %eax
+  800930:	8b 45 08             	mov    0x8(%ebp),%eax
+  800933:	ff d0                	call   *%eax
+  800935:	83 c4 10             	add    $0x10,%esp
+}
+  800938:	90                   	nop
+  800939:	c9                   	leave  
+  80093a:	c3                   	ret    
+
+0080093b <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  80093b:	55                   	push   %ebp
+  80093c:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  80093e:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800942:	7e 14                	jle    800958 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  800944:	8b 45 08             	mov    0x8(%ebp),%eax
+  800947:	8b 00                	mov    (%eax),%eax
+  800949:	8d 48 08             	lea    0x8(%eax),%ecx
+  80094c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80094f:	89 0a                	mov    %ecx,(%edx)
+  800951:	8b 50 04             	mov    0x4(%eax),%edx
+  800954:	8b 00                	mov    (%eax),%eax
+  800956:	eb 30                	jmp    800988 <getuint+0x4d>
+    }
+    else if (lflag) {
+  800958:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80095c:	74 16                	je     800974 <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  80095e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800961:	8b 00                	mov    (%eax),%eax
+  800963:	8d 48 04             	lea    0x4(%eax),%ecx
+  800966:	8b 55 08             	mov    0x8(%ebp),%edx
+  800969:	89 0a                	mov    %ecx,(%edx)
+  80096b:	8b 00                	mov    (%eax),%eax
+  80096d:	ba 00 00 00 00       	mov    $0x0,%edx
+  800972:	eb 14                	jmp    800988 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  800974:	8b 45 08             	mov    0x8(%ebp),%eax
+  800977:	8b 00                	mov    (%eax),%eax
+  800979:	8d 48 04             	lea    0x4(%eax),%ecx
+  80097c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80097f:	89 0a                	mov    %ecx,(%edx)
+  800981:	8b 00                	mov    (%eax),%eax
+  800983:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800988:	5d                   	pop    %ebp
+  800989:	c3                   	ret    
+
+0080098a <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  80098a:	55                   	push   %ebp
+  80098b:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  80098d:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800991:	7e 14                	jle    8009a7 <getint+0x1d>
+        return va_arg(*ap, long long);
+  800993:	8b 45 08             	mov    0x8(%ebp),%eax
+  800996:	8b 00                	mov    (%eax),%eax
+  800998:	8d 48 08             	lea    0x8(%eax),%ecx
+  80099b:	8b 55 08             	mov    0x8(%ebp),%edx
+  80099e:	89 0a                	mov    %ecx,(%edx)
+  8009a0:	8b 50 04             	mov    0x4(%eax),%edx
+  8009a3:	8b 00                	mov    (%eax),%eax
+  8009a5:	eb 28                	jmp    8009cf <getint+0x45>
+    }
+    else if (lflag) {
+  8009a7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8009ab:	74 12                	je     8009bf <getint+0x35>
+        return va_arg(*ap, long);
+  8009ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b0:	8b 00                	mov    (%eax),%eax
+  8009b2:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009b5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009b8:	89 0a                	mov    %ecx,(%edx)
+  8009ba:	8b 00                	mov    (%eax),%eax
+  8009bc:	99                   	cltd   
+  8009bd:	eb 10                	jmp    8009cf <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  8009bf:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009c2:	8b 00                	mov    (%eax),%eax
+  8009c4:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009c7:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009ca:	89 0a                	mov    %ecx,(%edx)
+  8009cc:	8b 00                	mov    (%eax),%eax
+  8009ce:	99                   	cltd   
+    }
+}
+  8009cf:	5d                   	pop    %ebp
+  8009d0:	c3                   	ret    
+
+008009d1 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009d1:	55                   	push   %ebp
+  8009d2:	89 e5                	mov    %esp,%ebp
+  8009d4:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009d7:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009da:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8009e0:	50                   	push   %eax
+  8009e1:	ff 75 10             	pushl  0x10(%ebp)
+  8009e4:	ff 75 0c             	pushl  0xc(%ebp)
+  8009e7:	ff 75 08             	pushl  0x8(%ebp)
+  8009ea:	e8 06 00 00 00       	call   8009f5 <vprintfmt>
+  8009ef:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8009f2:	90                   	nop
+  8009f3:	c9                   	leave  
+  8009f4:	c3                   	ret    
+
+008009f5 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8009f5:	55                   	push   %ebp
+  8009f6:	89 e5                	mov    %esp,%ebp
+  8009f8:	56                   	push   %esi
+  8009f9:	53                   	push   %ebx
+  8009fa:	83 ec 20             	sub    $0x20,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009fd:	eb 17                	jmp    800a16 <vprintfmt+0x21>
+            if (ch == '\0') {
+  8009ff:	85 db                	test   %ebx,%ebx
+  800a01:	0f 84 8e 03 00 00    	je     800d95 <vprintfmt+0x3a0>
+                return;
+            }
+            putch(ch, putdat);
+  800a07:	83 ec 08             	sub    $0x8,%esp
+  800a0a:	ff 75 0c             	pushl  0xc(%ebp)
+  800a0d:	53                   	push   %ebx
+  800a0e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a11:	ff d0                	call   *%eax
+  800a13:	83 c4 10             	add    $0x10,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a16:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a19:	8d 50 01             	lea    0x1(%eax),%edx
+  800a1c:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a1f:	0f b6 00             	movzbl (%eax),%eax
+  800a22:	0f b6 d8             	movzbl %al,%ebx
+  800a25:	83 fb 25             	cmp    $0x25,%ebx
+  800a28:	75 d5                	jne    8009ff <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a2a:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a2e:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a38:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a3b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a42:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a45:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a48:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a4b:	8d 50 01             	lea    0x1(%eax),%edx
+  800a4e:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a51:	0f b6 00             	movzbl (%eax),%eax
+  800a54:	0f b6 d8             	movzbl %al,%ebx
+  800a57:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a5a:	83 f8 55             	cmp    $0x55,%eax
+  800a5d:	0f 87 05 03 00 00    	ja     800d68 <vprintfmt+0x373>
+  800a63:	8b 04 85 e8 11 80 00 	mov    0x8011e8(,%eax,4),%eax
+  800a6a:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a6c:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a70:	eb d6                	jmp    800a48 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a72:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800a76:	eb d0                	jmp    800a48 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a78:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800a7f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a82:	89 d0                	mov    %edx,%eax
+  800a84:	c1 e0 02             	shl    $0x2,%eax
+  800a87:	01 d0                	add    %edx,%eax
+  800a89:	01 c0                	add    %eax,%eax
+  800a8b:	01 d8                	add    %ebx,%eax
+  800a8d:	83 e8 30             	sub    $0x30,%eax
+  800a90:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800a93:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a96:	0f b6 00             	movzbl (%eax),%eax
+  800a99:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800a9c:	83 fb 2f             	cmp    $0x2f,%ebx
+  800a9f:	7e 39                	jle    800ada <vprintfmt+0xe5>
+  800aa1:	83 fb 39             	cmp    $0x39,%ebx
+  800aa4:	7f 34                	jg     800ada <vprintfmt+0xe5>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800aa6:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  800aaa:	eb d3                	jmp    800a7f <vprintfmt+0x8a>
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800aac:	8b 45 14             	mov    0x14(%ebp),%eax
+  800aaf:	8d 50 04             	lea    0x4(%eax),%edx
+  800ab2:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ab5:	8b 00                	mov    (%eax),%eax
+  800ab7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800aba:	eb 1f                	jmp    800adb <vprintfmt+0xe6>
+
+        case '.':
+            if (width < 0)
+  800abc:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ac0:	79 86                	jns    800a48 <vprintfmt+0x53>
+                width = 0;
+  800ac2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800ac9:	e9 7a ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800ace:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800ad5:	e9 6e ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+            goto process_precision;
+  800ada:	90                   	nop
+        case '#':
+            altflag = 1;
+            goto reswitch;
+
+        process_precision:
+            if (width < 0)
+  800adb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800adf:	0f 89 63 ff ff ff    	jns    800a48 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800ae5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ae8:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800aeb:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800af2:	e9 51 ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800af7:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800afb:	e9 48 ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800b00:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b03:	8d 50 04             	lea    0x4(%eax),%edx
+  800b06:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b09:	8b 00                	mov    (%eax),%eax
+  800b0b:	83 ec 08             	sub    $0x8,%esp
+  800b0e:	ff 75 0c             	pushl  0xc(%ebp)
+  800b11:	50                   	push   %eax
+  800b12:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b15:	ff d0                	call   *%eax
+  800b17:	83 c4 10             	add    $0x10,%esp
+            break;
+  800b1a:	e9 71 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800b1f:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b22:	8d 50 04             	lea    0x4(%eax),%edx
+  800b25:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b28:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b2a:	85 db                	test   %ebx,%ebx
+  800b2c:	79 02                	jns    800b30 <vprintfmt+0x13b>
+                err = -err;
+  800b2e:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b30:	83 fb 18             	cmp    $0x18,%ebx
+  800b33:	7f 0b                	jg     800b40 <vprintfmt+0x14b>
+  800b35:	8b 34 9d 60 11 80 00 	mov    0x801160(,%ebx,4),%esi
+  800b3c:	85 f6                	test   %esi,%esi
+  800b3e:	75 19                	jne    800b59 <vprintfmt+0x164>
+                printfmt(putch, putdat, "error %d", err);
+  800b40:	53                   	push   %ebx
+  800b41:	68 d5 11 80 00       	push   $0x8011d5
+  800b46:	ff 75 0c             	pushl  0xc(%ebp)
+  800b49:	ff 75 08             	pushl  0x8(%ebp)
+  800b4c:	e8 80 fe ff ff       	call   8009d1 <printfmt>
+  800b51:	83 c4 10             	add    $0x10,%esp
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b54:	e9 37 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  800b59:	56                   	push   %esi
+  800b5a:	68 de 11 80 00       	push   $0x8011de
+  800b5f:	ff 75 0c             	pushl  0xc(%ebp)
+  800b62:	ff 75 08             	pushl  0x8(%ebp)
+  800b65:	e8 67 fe ff ff       	call   8009d1 <printfmt>
+  800b6a:	83 c4 10             	add    $0x10,%esp
+            }
+            break;
+  800b6d:	e9 1e 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800b72:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b75:	8d 50 04             	lea    0x4(%eax),%edx
+  800b78:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b7b:	8b 30                	mov    (%eax),%esi
+  800b7d:	85 f6                	test   %esi,%esi
+  800b7f:	75 05                	jne    800b86 <vprintfmt+0x191>
+                p = "(null)";
+  800b81:	be e1 11 80 00       	mov    $0x8011e1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800b86:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b8a:	7e 76                	jle    800c02 <vprintfmt+0x20d>
+  800b8c:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800b90:	74 70                	je     800c02 <vprintfmt+0x20d>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b92:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b95:	83 ec 08             	sub    $0x8,%esp
+  800b98:	50                   	push   %eax
+  800b99:	56                   	push   %esi
+  800b9a:	e8 17 f8 ff ff       	call   8003b6 <strnlen>
+  800b9f:	83 c4 10             	add    $0x10,%esp
+  800ba2:	89 c2                	mov    %eax,%edx
+  800ba4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ba7:	29 d0                	sub    %edx,%eax
+  800ba9:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800bac:	eb 17                	jmp    800bc5 <vprintfmt+0x1d0>
+                    putch(padc, putdat);
+  800bae:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800bb2:	83 ec 08             	sub    $0x8,%esp
+  800bb5:	ff 75 0c             	pushl  0xc(%ebp)
+  800bb8:	50                   	push   %eax
+  800bb9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bbc:	ff d0                	call   *%eax
+  800bbe:	83 c4 10             	add    $0x10,%esp
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bc1:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800bc5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800bc9:	7f e3                	jg     800bae <vprintfmt+0x1b9>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bcb:	eb 35                	jmp    800c02 <vprintfmt+0x20d>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800bcd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800bd1:	74 1c                	je     800bef <vprintfmt+0x1fa>
+  800bd3:	83 fb 1f             	cmp    $0x1f,%ebx
+  800bd6:	7e 05                	jle    800bdd <vprintfmt+0x1e8>
+  800bd8:	83 fb 7e             	cmp    $0x7e,%ebx
+  800bdb:	7e 12                	jle    800bef <vprintfmt+0x1fa>
+                    putch('?', putdat);
+  800bdd:	83 ec 08             	sub    $0x8,%esp
+  800be0:	ff 75 0c             	pushl  0xc(%ebp)
+  800be3:	6a 3f                	push   $0x3f
+  800be5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800be8:	ff d0                	call   *%eax
+  800bea:	83 c4 10             	add    $0x10,%esp
+  800bed:	eb 0f                	jmp    800bfe <vprintfmt+0x209>
+                }
+                else {
+                    putch(ch, putdat);
+  800bef:	83 ec 08             	sub    $0x8,%esp
+  800bf2:	ff 75 0c             	pushl  0xc(%ebp)
+  800bf5:	53                   	push   %ebx
+  800bf6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bf9:	ff d0                	call   *%eax
+  800bfb:	83 c4 10             	add    $0x10,%esp
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bfe:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c02:	89 f0                	mov    %esi,%eax
+  800c04:	8d 70 01             	lea    0x1(%eax),%esi
+  800c07:	0f b6 00             	movzbl (%eax),%eax
+  800c0a:	0f be d8             	movsbl %al,%ebx
+  800c0d:	85 db                	test   %ebx,%ebx
+  800c0f:	74 26                	je     800c37 <vprintfmt+0x242>
+  800c11:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c15:	78 b6                	js     800bcd <vprintfmt+0x1d8>
+  800c17:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  800c1b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c1f:	79 ac                	jns    800bcd <vprintfmt+0x1d8>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c21:	eb 14                	jmp    800c37 <vprintfmt+0x242>
+                putch(' ', putdat);
+  800c23:	83 ec 08             	sub    $0x8,%esp
+  800c26:	ff 75 0c             	pushl  0xc(%ebp)
+  800c29:	6a 20                	push   $0x20
+  800c2b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2e:	ff d0                	call   *%eax
+  800c30:	83 c4 10             	add    $0x10,%esp
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c33:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c37:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c3b:	7f e6                	jg     800c23 <vprintfmt+0x22e>
+                putch(' ', putdat);
+            }
+            break;
+  800c3d:	e9 4e 01 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c42:	83 ec 08             	sub    $0x8,%esp
+  800c45:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c48:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c4b:	50                   	push   %eax
+  800c4c:	e8 39 fd ff ff       	call   80098a <getint>
+  800c51:	83 c4 10             	add    $0x10,%esp
+  800c54:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c57:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c5d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c60:	85 d2                	test   %edx,%edx
+  800c62:	79 23                	jns    800c87 <vprintfmt+0x292>
+                putch('-', putdat);
+  800c64:	83 ec 08             	sub    $0x8,%esp
+  800c67:	ff 75 0c             	pushl  0xc(%ebp)
+  800c6a:	6a 2d                	push   $0x2d
+  800c6c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c6f:	ff d0                	call   *%eax
+  800c71:	83 c4 10             	add    $0x10,%esp
+                num = -(long long)num;
+  800c74:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c77:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c7a:	f7 d8                	neg    %eax
+  800c7c:	83 d2 00             	adc    $0x0,%edx
+  800c7f:	f7 da                	neg    %edx
+  800c81:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c84:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800c87:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c8e:	e9 9f 00 00 00       	jmp    800d32 <vprintfmt+0x33d>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800c93:	83 ec 08             	sub    $0x8,%esp
+  800c96:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c99:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c9c:	50                   	push   %eax
+  800c9d:	e8 99 fc ff ff       	call   80093b <getuint>
+  800ca2:	83 c4 10             	add    $0x10,%esp
+  800ca5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ca8:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800cab:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cb2:	eb 7e                	jmp    800d32 <vprintfmt+0x33d>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800cb4:	83 ec 08             	sub    $0x8,%esp
+  800cb7:	ff 75 e0             	pushl  -0x20(%ebp)
+  800cba:	8d 45 14             	lea    0x14(%ebp),%eax
+  800cbd:	50                   	push   %eax
+  800cbe:	e8 78 fc ff ff       	call   80093b <getuint>
+  800cc3:	83 c4 10             	add    $0x10,%esp
+  800cc6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cc9:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800ccc:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800cd3:	eb 5d                	jmp    800d32 <vprintfmt+0x33d>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800cd5:	83 ec 08             	sub    $0x8,%esp
+  800cd8:	ff 75 0c             	pushl  0xc(%ebp)
+  800cdb:	6a 30                	push   $0x30
+  800cdd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ce0:	ff d0                	call   *%eax
+  800ce2:	83 c4 10             	add    $0x10,%esp
+            putch('x', putdat);
+  800ce5:	83 ec 08             	sub    $0x8,%esp
+  800ce8:	ff 75 0c             	pushl  0xc(%ebp)
+  800ceb:	6a 78                	push   $0x78
+  800ced:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cf0:	ff d0                	call   *%eax
+  800cf2:	83 c4 10             	add    $0x10,%esp
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800cf5:	8b 45 14             	mov    0x14(%ebp),%eax
+  800cf8:	8d 50 04             	lea    0x4(%eax),%edx
+  800cfb:	89 55 14             	mov    %edx,0x14(%ebp)
+  800cfe:	8b 00                	mov    (%eax),%eax
+  800d00:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d03:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800d0a:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800d11:	eb 1f                	jmp    800d32 <vprintfmt+0x33d>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800d13:	83 ec 08             	sub    $0x8,%esp
+  800d16:	ff 75 e0             	pushl  -0x20(%ebp)
+  800d19:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d1c:	50                   	push   %eax
+  800d1d:	e8 19 fc ff ff       	call   80093b <getuint>
+  800d22:	83 c4 10             	add    $0x10,%esp
+  800d25:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d28:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d2b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d32:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d36:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d39:	83 ec 04             	sub    $0x4,%esp
+  800d3c:	52                   	push   %edx
+  800d3d:	ff 75 e8             	pushl  -0x18(%ebp)
+  800d40:	50                   	push   %eax
+  800d41:	ff 75 f4             	pushl  -0xc(%ebp)
+  800d44:	ff 75 f0             	pushl  -0x10(%ebp)
+  800d47:	ff 75 0c             	pushl  0xc(%ebp)
+  800d4a:	ff 75 08             	pushl  0x8(%ebp)
+  800d4d:	e8 f8 fa ff ff       	call   80084a <printnum>
+  800d52:	83 c4 20             	add    $0x20,%esp
+            break;
+  800d55:	eb 39                	jmp    800d90 <vprintfmt+0x39b>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800d57:	83 ec 08             	sub    $0x8,%esp
+  800d5a:	ff 75 0c             	pushl  0xc(%ebp)
+  800d5d:	53                   	push   %ebx
+  800d5e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d61:	ff d0                	call   *%eax
+  800d63:	83 c4 10             	add    $0x10,%esp
+            break;
+  800d66:	eb 28                	jmp    800d90 <vprintfmt+0x39b>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800d68:	83 ec 08             	sub    $0x8,%esp
+  800d6b:	ff 75 0c             	pushl  0xc(%ebp)
+  800d6e:	6a 25                	push   $0x25
+  800d70:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d73:	ff d0                	call   *%eax
+  800d75:	83 c4 10             	add    $0x10,%esp
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800d78:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d7c:	eb 04                	jmp    800d82 <vprintfmt+0x38d>
+  800d7e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d82:	8b 45 10             	mov    0x10(%ebp),%eax
+  800d85:	83 e8 01             	sub    $0x1,%eax
+  800d88:	0f b6 00             	movzbl (%eax),%eax
+  800d8b:	3c 25                	cmp    $0x25,%al
+  800d8d:	75 ef                	jne    800d7e <vprintfmt+0x389>
+                /* do nothing */;
+            break;
+  800d8f:	90                   	nop
+        }
+    }
+  800d90:	e9 68 fc ff ff       	jmp    8009fd <vprintfmt+0x8>
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+            if (ch == '\0') {
+                return;
+  800d95:	90                   	nop
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  800d96:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  800d99:	5b                   	pop    %ebx
+  800d9a:	5e                   	pop    %esi
+  800d9b:	5d                   	pop    %ebp
+  800d9c:	c3                   	ret    
+
+00800d9d <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800d9d:	55                   	push   %ebp
+  800d9e:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800da0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800da3:	8b 40 08             	mov    0x8(%eax),%eax
+  800da6:	8d 50 01             	lea    0x1(%eax),%edx
+  800da9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dac:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800daf:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db2:	8b 10                	mov    (%eax),%edx
+  800db4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db7:	8b 40 04             	mov    0x4(%eax),%eax
+  800dba:	39 c2                	cmp    %eax,%edx
+  800dbc:	73 12                	jae    800dd0 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800dbe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dc1:	8b 00                	mov    (%eax),%eax
+  800dc3:	8d 48 01             	lea    0x1(%eax),%ecx
+  800dc6:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800dc9:	89 0a                	mov    %ecx,(%edx)
+  800dcb:	8b 55 08             	mov    0x8(%ebp),%edx
+  800dce:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800dd0:	90                   	nop
+  800dd1:	5d                   	pop    %ebp
+  800dd2:	c3                   	ret    
+
+00800dd3 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800dd3:	55                   	push   %ebp
+  800dd4:	89 e5                	mov    %esp,%ebp
+  800dd6:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800dd9:	8d 45 14             	lea    0x14(%ebp),%eax
+  800ddc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800ddf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800de2:	50                   	push   %eax
+  800de3:	ff 75 10             	pushl  0x10(%ebp)
+  800de6:	ff 75 0c             	pushl  0xc(%ebp)
+  800de9:	ff 75 08             	pushl  0x8(%ebp)
+  800dec:	e8 0b 00 00 00       	call   800dfc <vsnprintf>
+  800df1:	83 c4 10             	add    $0x10,%esp
+  800df4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800df7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800dfa:	c9                   	leave  
+  800dfb:	c3                   	ret    
+
+00800dfc <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800dfc:	55                   	push   %ebp
+  800dfd:	89 e5                	mov    %esp,%ebp
+  800dff:	83 ec 18             	sub    $0x18,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800e02:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e05:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e08:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e0b:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800e0e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e11:	01 d0                	add    %edx,%eax
+  800e13:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e16:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800e1d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800e21:	74 0a                	je     800e2d <vsnprintf+0x31>
+  800e23:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800e26:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e29:	39 c2                	cmp    %eax,%edx
+  800e2b:	76 07                	jbe    800e34 <vsnprintf+0x38>
+        return -E_INVAL;
+  800e2d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e32:	eb 20                	jmp    800e54 <vsnprintf+0x58>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e34:	ff 75 14             	pushl  0x14(%ebp)
+  800e37:	ff 75 10             	pushl  0x10(%ebp)
+  800e3a:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800e3d:	50                   	push   %eax
+  800e3e:	68 9d 0d 80 00       	push   $0x800d9d
+  800e43:	e8 ad fb ff ff       	call   8009f5 <vprintfmt>
+  800e48:	83 c4 10             	add    $0x10,%esp
+    // null terminate the buffer
+    *b.buf = '\0';
+  800e4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e4e:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800e51:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e54:	c9                   	leave  
+  800e55:	c3                   	ret    
+
+00800e56 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800e56:	55                   	push   %ebp
+  800e57:	89 e5                	mov    %esp,%ebp
+  800e59:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800e5c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e5f:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800e65:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800e68:	b8 20 00 00 00       	mov    $0x20,%eax
+  800e6d:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800e70:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800e73:	89 c1                	mov    %eax,%ecx
+  800e75:	d3 ea                	shr    %cl,%edx
+  800e77:	89 d0                	mov    %edx,%eax
+}
+  800e79:	c9                   	leave  
+  800e7a:	c3                   	ret    
+
+00800e7b <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800e7b:	55                   	push   %ebp
+  800e7c:	89 e5                	mov    %esp,%ebp
+  800e7e:	57                   	push   %edi
+  800e7f:	56                   	push   %esi
+  800e80:	53                   	push   %ebx
+  800e81:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800e84:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e89:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800e8f:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800e95:	6b f0 05             	imul   $0x5,%eax,%esi
+  800e98:	01 fe                	add    %edi,%esi
+  800e9a:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800e9f:	f7 e7                	mul    %edi
+  800ea1:	01 d6                	add    %edx,%esi
+  800ea3:	89 f2                	mov    %esi,%edx
+  800ea5:	83 c0 0b             	add    $0xb,%eax
+  800ea8:	83 d2 00             	adc    $0x0,%edx
+  800eab:	89 c7                	mov    %eax,%edi
+  800ead:	83 e7 ff             	and    $0xffffffff,%edi
+  800eb0:	89 f9                	mov    %edi,%ecx
+  800eb2:	0f b7 da             	movzwl %dx,%ebx
+  800eb5:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800ebb:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800ec1:	a1 00 20 80 00       	mov    0x802000,%eax
+  800ec6:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ecc:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ed0:	c1 ea 0c             	shr    $0xc,%edx
+  800ed3:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ed6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800ed9:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ee0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ee3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ee6:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ee9:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800eec:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eef:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ef2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ef6:	74 1c                	je     800f14 <rand+0x99>
+  800ef8:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800efb:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f00:	f7 75 dc             	divl   -0x24(%ebp)
+  800f03:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800f06:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f09:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f0e:	f7 75 dc             	divl   -0x24(%ebp)
+  800f11:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800f14:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f17:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800f1a:	f7 75 dc             	divl   -0x24(%ebp)
+  800f1d:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f20:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f23:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f26:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800f29:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f2c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f2f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800f32:	83 c4 24             	add    $0x24,%esp
+  800f35:	5b                   	pop    %ebx
+  800f36:	5e                   	pop    %esi
+  800f37:	5f                   	pop    %edi
+  800f38:	5d                   	pop    %ebp
+  800f39:	c3                   	ret    
+
+00800f3a <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800f3a:	55                   	push   %ebp
+  800f3b:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800f3d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f40:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f45:	a3 00 20 80 00       	mov    %eax,0x802000
+  800f4a:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800f50:	90                   	nop
+  800f51:	5d                   	pop    %ebp
+  800f52:	c3                   	ret    
+
+00800f53 <main>:
+#include <stdio.h>
+
+const int max_child = 32;
+
+int
+main(void) {
+  800f53:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  800f57:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f5a:	ff 71 fc             	pushl  -0x4(%ecx)
+  800f5d:	55                   	push   %ebp
+  800f5e:	89 e5                	mov    %esp,%ebp
+  800f60:	51                   	push   %ecx
+  800f61:	83 ec 14             	sub    $0x14,%esp
+    int n, pid;
+    for (n = 0; n < max_child; n ++) {
+  800f64:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  800f6b:	eb 4b                	jmp    800fb8 <main+0x65>
+        if ((pid = fork()) == 0) {
+  800f6d:	e8 7d f2 ff ff       	call   8001ef <fork>
+  800f72:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800f75:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800f79:	75 1d                	jne    800f98 <main+0x45>
+            cprintf("I am child %d\n", n);
+  800f7b:	83 ec 08             	sub    $0x8,%esp
+  800f7e:	ff 75 f4             	pushl  -0xc(%ebp)
+  800f81:	68 44 13 80 00       	push   $0x801344
+  800f86:	e8 76 f3 ff ff       	call   800301 <cprintf>
+  800f8b:	83 c4 10             	add    $0x10,%esp
+            exit(0);
+  800f8e:	83 ec 0c             	sub    $0xc,%esp
+  800f91:	6a 00                	push   $0x0
+  800f93:	e8 31 f2 ff ff       	call   8001c9 <exit>
+        }
+        assert(pid > 0);
+  800f98:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800f9c:	7f 16                	jg     800fb4 <main+0x61>
+  800f9e:	68 53 13 80 00       	push   $0x801353
+  800fa3:	68 5b 13 80 00       	push   $0x80135b
+  800fa8:	6a 0e                	push   $0xe
+  800faa:	68 70 13 80 00       	push   $0x801370
+  800faf:	e8 6c f0 ff ff       	call   800020 <__panic>
+const int max_child = 32;
+
+int
+main(void) {
+    int n, pid;
+    for (n = 0; n < max_child; n ++) {
+  800fb4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  800fb8:	b8 20 00 00 00       	mov    $0x20,%eax
+  800fbd:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+  800fc0:	7c ab                	jl     800f6d <main+0x1a>
+            exit(0);
+        }
+        assert(pid > 0);
+    }
+
+    if (n > max_child) {
+  800fc2:	b8 20 00 00 00       	mov    $0x20,%eax
+  800fc7:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+  800fca:	7e 35                	jle    801001 <main+0xae>
+        panic("fork claimed to work %d times!\n", n);
+  800fcc:	ff 75 f4             	pushl  -0xc(%ebp)
+  800fcf:	68 80 13 80 00       	push   $0x801380
+  800fd4:	6a 12                	push   $0x12
+  800fd6:	68 70 13 80 00       	push   $0x801370
+  800fdb:	e8 40 f0 ff ff       	call   800020 <__panic>
+    }
+
+    for (; n > 0; n --) {
+        if (wait() != 0) {
+  800fe0:	e8 17 f2 ff ff       	call   8001fc <wait>
+  800fe5:	85 c0                	test   %eax,%eax
+  800fe7:	74 14                	je     800ffd <main+0xaa>
+            panic("wait stopped early\n");
+  800fe9:	83 ec 04             	sub    $0x4,%esp
+  800fec:	68 a0 13 80 00       	push   $0x8013a0
+  800ff1:	6a 17                	push   $0x17
+  800ff3:	68 70 13 80 00       	push   $0x801370
+  800ff8:	e8 23 f0 ff ff       	call   800020 <__panic>
+
+    if (n > max_child) {
+        panic("fork claimed to work %d times!\n", n);
+    }
+
+    for (; n > 0; n --) {
+  800ffd:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
+  801001:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+  801005:	7f d9                	jg     800fe0 <main+0x8d>
+        if (wait() != 0) {
+            panic("wait stopped early\n");
+        }
+    }
+
+    if (wait() == 0) {
+  801007:	e8 f0 f1 ff ff       	call   8001fc <wait>
+  80100c:	85 c0                	test   %eax,%eax
+  80100e:	75 14                	jne    801024 <main+0xd1>
+        panic("wait got too many\n");
+  801010:	83 ec 04             	sub    $0x4,%esp
+  801013:	68 b4 13 80 00       	push   $0x8013b4
+  801018:	6a 1c                	push   $0x1c
+  80101a:	68 70 13 80 00       	push   $0x801370
+  80101f:	e8 fc ef ff ff       	call   800020 <__panic>
+    }
+
+    cprintf("forktest pass.\n");
+  801024:	83 ec 0c             	sub    $0xc,%esp
+  801027:	68 c7 13 80 00       	push   $0x8013c7
+  80102c:	e8 d0 f2 ff ff       	call   800301 <cprintf>
+  801031:	83 c4 10             	add    $0x10,%esp
+    return 0;
+  801034:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  801039:	8b 4d fc             	mov    -0x4(%ebp),%ecx
+  80103c:	c9                   	leave  
+  80103d:	8d 61 fc             	lea    -0x4(%ecx),%esp
+  801040:	c3                   	ret    
diff -r -u -P lab7_original/obj/user/forktest.d lab7/obj/user/forktest.d
--- lab7_original/obj/user/forktest.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/forktest.d	2016-05-06 21:59:27.602122838 +0800
@@ -0,0 +1,2 @@
+obj/user/forktest.o obj/user/forktest.d: user/forktest.c user/libs/ulib.h \
+ libs/defs.h libs/stdio.h libs/stdarg.h
Binary files lab7_original/obj/user/forktest.o and lab7/obj/user/forktest.o differ
diff -r -u -P lab7_original/obj/user/forktest.sym lab7/obj/user/forktest.sym
--- lab7_original/obj/user/forktest.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/forktest.sym	2016-05-06 21:59:28.634160461 +0800
@@ -0,0 +1,79 @@
+00800020 .text
+00801060 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202e19 .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b5 syscall
+00000000 ulib.c
+00000000 stdio.c
+008002b4 cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+00801160 error_string
+0080084a printnum
+0080093b getuint
+0080098a getint
+00800d9d sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 forktest.c
+008003e6 strcpy
+0080022c yield
+00800213 waitpid
+00800141 sys_yield
+008006ff memmove
+00800dd3 snprintf
+008009f5 vprintfmt
+0080011d sys_fork
+00800301 cprintf
+00800250 getpid
+008007a2 memcpy
+0080028f sleep
+00800278 lab6_set_priority
+00800dfc vsnprintf
+00800375 umain
+00202e18 __STAB_END__
+00800150 sys_kill
+00202e19 __STABSTR_BEGIN__
+00800020 __panic
+00801340 max_child
+008001b7 sys_sleep
+00800562 strtol
+008003b6 strnlen
+0080025d print_pgdir
+0080023a kill
+00800533 strfind
+008001fc wait
+008002a5 _start
+00800e7b rand
+008004aa strncmp
+00800171 sys_putc
+00800426 strncpy
+008007f2 memcmp
+008001ef fork
+008006bf memset
+00800f53 main
+00800f3a srand
+00800e56 hash32
+008009d1 printfmt
+00203c47 __STABSTR_END__
+00800460 strcmp
+0080026b gettime_msec
+00800192 sys_gettime
+008002d8 vcprintf
+0080006e __warn
+00800327 cputs
+008001a1 sys_lab6_set_priority
+008001c9 exit
+0080012c sys_wait
+0080010b sys_exit
+00200010 __STAB_BEGIN__
+0080038e strlen
+00800183 sys_pgdir
+00800500 strchr
+00800162 sys_getpid
diff -r -u -P lab7_original/obj/user/forktree.asm lab7/obj/user/forktree.asm
--- lab7_original/obj/user/forktree.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/forktree.asm	2016-05-06 21:59:28.626160168 +0800
@@ -0,0 +1,2710 @@
+
+obj/__user_forktree.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 18             	sub    $0x18,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	83 ec 04             	sub    $0x4,%esp
+  80002f:	ff 75 0c             	pushl  0xc(%ebp)
+  800032:	ff 75 08             	pushl  0x8(%ebp)
+  800035:	68 40 10 80 00       	push   $0x801040
+  80003a:	e8 c2 02 00 00       	call   800301 <cprintf>
+  80003f:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800042:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800045:	83 ec 08             	sub    $0x8,%esp
+  800048:	50                   	push   %eax
+  800049:	ff 75 10             	pushl  0x10(%ebp)
+  80004c:	e8 87 02 00 00       	call   8002d8 <vcprintf>
+  800051:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  800054:	83 ec 0c             	sub    $0xc,%esp
+  800057:	68 5a 10 80 00       	push   $0x80105a
+  80005c:	e8 a0 02 00 00       	call   800301 <cprintf>
+  800061:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	83 ec 0c             	sub    $0xc,%esp
+  800067:	6a f6                	push   $0xfffffff6
+  800069:	e8 5b 01 00 00       	call   8001c9 <exit>
+
+0080006e <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80006e:	55                   	push   %ebp
+  80006f:	89 e5                	mov    %esp,%ebp
+  800071:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800074:	8d 45 14             	lea    0x14(%ebp),%eax
+  800077:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007a:	83 ec 04             	sub    $0x4,%esp
+  80007d:	ff 75 0c             	pushl  0xc(%ebp)
+  800080:	ff 75 08             	pushl  0x8(%ebp)
+  800083:	68 5c 10 80 00       	push   $0x80105c
+  800088:	e8 74 02 00 00       	call   800301 <cprintf>
+  80008d:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800090:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800093:	83 ec 08             	sub    $0x8,%esp
+  800096:	50                   	push   %eax
+  800097:	ff 75 10             	pushl  0x10(%ebp)
+  80009a:	e8 39 02 00 00       	call   8002d8 <vcprintf>
+  80009f:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  8000a2:	83 ec 0c             	sub    $0xc,%esp
+  8000a5:	68 5a 10 80 00       	push   $0x80105a
+  8000aa:	e8 52 02 00 00       	call   800301 <cprintf>
+  8000af:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8000b2:	90                   	nop
+  8000b3:	c9                   	leave  
+  8000b4:	c3                   	ret    
+
+008000b5 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b5:	55                   	push   %ebp
+  8000b6:	89 e5                	mov    %esp,%ebp
+  8000b8:	57                   	push   %edi
+  8000b9:	56                   	push   %esi
+  8000ba:	53                   	push   %ebx
+  8000bb:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000be:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cb:	eb 16                	jmp    8000e3 <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8000cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d0:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d3:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d6:	8b 10                	mov    (%eax),%edx
+  8000d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000db:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000df:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8000e3:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e7:	7e e4                	jle    8000cd <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000e9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ec:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000ef:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f2:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f5:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8000f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fb:	cd 80                	int    $0x80
+  8000fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  800100:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800103:	83 c4 20             	add    $0x20,%esp
+  800106:	5b                   	pop    %ebx
+  800107:	5e                   	pop    %esi
+  800108:	5f                   	pop    %edi
+  800109:	5d                   	pop    %ebp
+  80010a:	c3                   	ret    
+
+0080010b <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010b:	55                   	push   %ebp
+  80010c:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_exit, error_code);
+  80010e:	ff 75 08             	pushl  0x8(%ebp)
+  800111:	6a 01                	push   $0x1
+  800113:	e8 9d ff ff ff       	call   8000b5 <syscall>
+  800118:	83 c4 08             	add    $0x8,%esp
+}
+  80011b:	c9                   	leave  
+  80011c:	c3                   	ret    
+
+0080011d <sys_fork>:
+
+int
+sys_fork(void) {
+  80011d:	55                   	push   %ebp
+  80011e:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_fork);
+  800120:	6a 02                	push   $0x2
+  800122:	e8 8e ff ff ff       	call   8000b5 <syscall>
+  800127:	83 c4 04             	add    $0x4,%esp
+}
+  80012a:	c9                   	leave  
+  80012b:	c3                   	ret    
+
+0080012c <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80012c:	55                   	push   %ebp
+  80012d:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_wait, pid, store);
+  80012f:	ff 75 0c             	pushl  0xc(%ebp)
+  800132:	ff 75 08             	pushl  0x8(%ebp)
+  800135:	6a 03                	push   $0x3
+  800137:	e8 79 ff ff ff       	call   8000b5 <syscall>
+  80013c:	83 c4 0c             	add    $0xc,%esp
+}
+  80013f:	c9                   	leave  
+  800140:	c3                   	ret    
+
+00800141 <sys_yield>:
+
+int
+sys_yield(void) {
+  800141:	55                   	push   %ebp
+  800142:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_yield);
+  800144:	6a 0a                	push   $0xa
+  800146:	e8 6a ff ff ff       	call   8000b5 <syscall>
+  80014b:	83 c4 04             	add    $0x4,%esp
+}
+  80014e:	c9                   	leave  
+  80014f:	c3                   	ret    
+
+00800150 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800150:	55                   	push   %ebp
+  800151:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_kill, pid);
+  800153:	ff 75 08             	pushl  0x8(%ebp)
+  800156:	6a 0c                	push   $0xc
+  800158:	e8 58 ff ff ff       	call   8000b5 <syscall>
+  80015d:	83 c4 08             	add    $0x8,%esp
+}
+  800160:	c9                   	leave  
+  800161:	c3                   	ret    
+
+00800162 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800162:	55                   	push   %ebp
+  800163:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_getpid);
+  800165:	6a 12                	push   $0x12
+  800167:	e8 49 ff ff ff       	call   8000b5 <syscall>
+  80016c:	83 c4 04             	add    $0x4,%esp
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_putc, c);
+  800174:	ff 75 08             	pushl  0x8(%ebp)
+  800177:	6a 1e                	push   $0x1e
+  800179:	e8 37 ff ff ff       	call   8000b5 <syscall>
+  80017e:	83 c4 08             	add    $0x8,%esp
+}
+  800181:	c9                   	leave  
+  800182:	c3                   	ret    
+
+00800183 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800183:	55                   	push   %ebp
+  800184:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_pgdir);
+  800186:	6a 1f                	push   $0x1f
+  800188:	e8 28 ff ff ff       	call   8000b5 <syscall>
+  80018d:	83 c4 04             	add    $0x4,%esp
+}
+  800190:	c9                   	leave  
+  800191:	c3                   	ret    
+
+00800192 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  800192:	55                   	push   %ebp
+  800193:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_gettime);
+  800195:	6a 11                	push   $0x11
+  800197:	e8 19 ff ff ff       	call   8000b5 <syscall>
+  80019c:	83 c4 04             	add    $0x4,%esp
+}
+  80019f:	c9                   	leave  
+  8001a0:	c3                   	ret    
+
+008001a1 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001a1:	55                   	push   %ebp
+  8001a2:	89 e5                	mov    %esp,%ebp
+    syscall(SYS_lab6_set_priority, priority);
+  8001a4:	ff 75 08             	pushl  0x8(%ebp)
+  8001a7:	68 ff 00 00 00       	push   $0xff
+  8001ac:	e8 04 ff ff ff       	call   8000b5 <syscall>
+  8001b1:	83 c4 08             	add    $0x8,%esp
+}
+  8001b4:	90                   	nop
+  8001b5:	c9                   	leave  
+  8001b6:	c3                   	ret    
+
+008001b7 <sys_sleep>:
+
+int
+sys_sleep(unsigned int time) {
+  8001b7:	55                   	push   %ebp
+  8001b8:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_sleep, time);
+  8001ba:	ff 75 08             	pushl  0x8(%ebp)
+  8001bd:	6a 0b                	push   $0xb
+  8001bf:	e8 f1 fe ff ff       	call   8000b5 <syscall>
+  8001c4:	83 c4 08             	add    $0x8,%esp
+}
+  8001c7:	c9                   	leave  
+  8001c8:	c3                   	ret    
+
+008001c9 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001c9:	55                   	push   %ebp
+  8001ca:	89 e5                	mov    %esp,%ebp
+  8001cc:	83 ec 08             	sub    $0x8,%esp
+    sys_exit(error_code);
+  8001cf:	83 ec 0c             	sub    $0xc,%esp
+  8001d2:	ff 75 08             	pushl  0x8(%ebp)
+  8001d5:	e8 31 ff ff ff       	call   80010b <sys_exit>
+  8001da:	83 c4 10             	add    $0x10,%esp
+    cprintf("BUG: exit failed.\n");
+  8001dd:	83 ec 0c             	sub    $0xc,%esp
+  8001e0:	68 78 10 80 00       	push   $0x801078
+  8001e5:	e8 17 01 00 00       	call   800301 <cprintf>
+  8001ea:	83 c4 10             	add    $0x10,%esp
+    while (1);
+  8001ed:	eb fe                	jmp    8001ed <exit+0x24>
+
+008001ef <fork>:
+}
+
+int
+fork(void) {
+  8001ef:	55                   	push   %ebp
+  8001f0:	89 e5                	mov    %esp,%ebp
+  8001f2:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8001f5:	e8 23 ff ff ff       	call   80011d <sys_fork>
+}
+  8001fa:	c9                   	leave  
+  8001fb:	c3                   	ret    
+
+008001fc <wait>:
+
+int
+wait(void) {
+  8001fc:	55                   	push   %ebp
+  8001fd:	89 e5                	mov    %esp,%ebp
+  8001ff:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(0, NULL);
+  800202:	83 ec 08             	sub    $0x8,%esp
+  800205:	6a 00                	push   $0x0
+  800207:	6a 00                	push   $0x0
+  800209:	e8 1e ff ff ff       	call   80012c <sys_wait>
+  80020e:	83 c4 10             	add    $0x10,%esp
+}
+  800211:	c9                   	leave  
+  800212:	c3                   	ret    
+
+00800213 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800213:	55                   	push   %ebp
+  800214:	89 e5                	mov    %esp,%ebp
+  800216:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(pid, store);
+  800219:	83 ec 08             	sub    $0x8,%esp
+  80021c:	ff 75 0c             	pushl  0xc(%ebp)
+  80021f:	ff 75 08             	pushl  0x8(%ebp)
+  800222:	e8 05 ff ff ff       	call   80012c <sys_wait>
+  800227:	83 c4 10             	add    $0x10,%esp
+}
+  80022a:	c9                   	leave  
+  80022b:	c3                   	ret    
+
+0080022c <yield>:
+
+void
+yield(void) {
+  80022c:	55                   	push   %ebp
+  80022d:	89 e5                	mov    %esp,%ebp
+  80022f:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800232:	e8 0a ff ff ff       	call   800141 <sys_yield>
+}
+  800237:	90                   	nop
+  800238:	c9                   	leave  
+  800239:	c3                   	ret    
+
+0080023a <kill>:
+
+int
+kill(int pid) {
+  80023a:	55                   	push   %ebp
+  80023b:	89 e5                	mov    %esp,%ebp
+  80023d:	83 ec 08             	sub    $0x8,%esp
+    return sys_kill(pid);
+  800240:	83 ec 0c             	sub    $0xc,%esp
+  800243:	ff 75 08             	pushl  0x8(%ebp)
+  800246:	e8 05 ff ff ff       	call   800150 <sys_kill>
+  80024b:	83 c4 10             	add    $0x10,%esp
+}
+  80024e:	c9                   	leave  
+  80024f:	c3                   	ret    
+
+00800250 <getpid>:
+
+int
+getpid(void) {
+  800250:	55                   	push   %ebp
+  800251:	89 e5                	mov    %esp,%ebp
+  800253:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800256:	e8 07 ff ff ff       	call   800162 <sys_getpid>
+}
+  80025b:	c9                   	leave  
+  80025c:	c3                   	ret    
+
+0080025d <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80025d:	55                   	push   %ebp
+  80025e:	89 e5                	mov    %esp,%ebp
+  800260:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800263:	e8 1b ff ff ff       	call   800183 <sys_pgdir>
+}
+  800268:	90                   	nop
+  800269:	c9                   	leave  
+  80026a:	c3                   	ret    
+
+0080026b <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80026b:	55                   	push   %ebp
+  80026c:	89 e5                	mov    %esp,%ebp
+  80026e:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800271:	e8 1c ff ff ff       	call   800192 <sys_gettime>
+}
+  800276:	c9                   	leave  
+  800277:	c3                   	ret    
+
+00800278 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800278:	55                   	push   %ebp
+  800279:	89 e5                	mov    %esp,%ebp
+  80027b:	83 ec 08             	sub    $0x8,%esp
+    sys_lab6_set_priority(priority);
+  80027e:	83 ec 0c             	sub    $0xc,%esp
+  800281:	ff 75 08             	pushl  0x8(%ebp)
+  800284:	e8 18 ff ff ff       	call   8001a1 <sys_lab6_set_priority>
+  800289:	83 c4 10             	add    $0x10,%esp
+}
+  80028c:	90                   	nop
+  80028d:	c9                   	leave  
+  80028e:	c3                   	ret    
+
+0080028f <sleep>:
+
+int
+sleep(unsigned int time) {
+  80028f:	55                   	push   %ebp
+  800290:	89 e5                	mov    %esp,%ebp
+  800292:	83 ec 08             	sub    $0x8,%esp
+    return sys_sleep(time);
+  800295:	83 ec 0c             	sub    $0xc,%esp
+  800298:	ff 75 08             	pushl  0x8(%ebp)
+  80029b:	e8 17 ff ff ff       	call   8001b7 <sys_sleep>
+  8002a0:	83 c4 10             	add    $0x10,%esp
+}
+  8002a3:	c9                   	leave  
+  8002a4:	c3                   	ret    
+
+008002a5 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  8002a5:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  8002aa:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  8002ad:	e8 c3 00 00 00       	call   800375 <umain>
+1:  jmp 1b
+  8002b2:	eb fe                	jmp    8002b2 <_start+0xd>
+
+008002b4 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8002b4:	55                   	push   %ebp
+  8002b5:	89 e5                	mov    %esp,%ebp
+  8002b7:	83 ec 08             	sub    $0x8,%esp
+    sys_putc(c);
+  8002ba:	83 ec 0c             	sub    $0xc,%esp
+  8002bd:	ff 75 08             	pushl  0x8(%ebp)
+  8002c0:	e8 ac fe ff ff       	call   800171 <sys_putc>
+  8002c5:	83 c4 10             	add    $0x10,%esp
+    (*cnt) ++;
+  8002c8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002cb:	8b 00                	mov    (%eax),%eax
+  8002cd:	8d 50 01             	lea    0x1(%eax),%edx
+  8002d0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002d3:	89 10                	mov    %edx,(%eax)
+}
+  8002d5:	90                   	nop
+  8002d6:	c9                   	leave  
+  8002d7:	c3                   	ret    
+
+008002d8 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002d8:	55                   	push   %ebp
+  8002d9:	89 e5                	mov    %esp,%ebp
+  8002db:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  8002de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002e5:	ff 75 0c             	pushl  0xc(%ebp)
+  8002e8:	ff 75 08             	pushl  0x8(%ebp)
+  8002eb:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  8002ee:	50                   	push   %eax
+  8002ef:	68 b4 02 80 00       	push   $0x8002b4
+  8002f4:	e8 fc 06 00 00       	call   8009f5 <vprintfmt>
+  8002f9:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  8002fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002ff:	c9                   	leave  
+  800300:	c3                   	ret    
+
+00800301 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800301:	55                   	push   %ebp
+  800302:	89 e5                	mov    %esp,%ebp
+  800304:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800307:	8d 45 0c             	lea    0xc(%ebp),%eax
+  80030a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  80030d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800310:	83 ec 08             	sub    $0x8,%esp
+  800313:	50                   	push   %eax
+  800314:	ff 75 08             	pushl  0x8(%ebp)
+  800317:	e8 bc ff ff ff       	call   8002d8 <vcprintf>
+  80031c:	83 c4 10             	add    $0x10,%esp
+  80031f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800322:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800325:	c9                   	leave  
+  800326:	c3                   	ret    
+
+00800327 <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  800327:	55                   	push   %ebp
+  800328:	89 e5                	mov    %esp,%ebp
+  80032a:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  80032d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  800334:	eb 14                	jmp    80034a <cputs+0x23>
+        cputch(c, &cnt);
+  800336:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  80033a:	83 ec 08             	sub    $0x8,%esp
+  80033d:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800340:	52                   	push   %edx
+  800341:	50                   	push   %eax
+  800342:	e8 6d ff ff ff       	call   8002b4 <cputch>
+  800347:	83 c4 10             	add    $0x10,%esp
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  80034a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80034d:	8d 50 01             	lea    0x1(%eax),%edx
+  800350:	89 55 08             	mov    %edx,0x8(%ebp)
+  800353:	0f b6 00             	movzbl (%eax),%eax
+  800356:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800359:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  80035d:	75 d7                	jne    800336 <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  80035f:	83 ec 08             	sub    $0x8,%esp
+  800362:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800365:	50                   	push   %eax
+  800366:	6a 0a                	push   $0xa
+  800368:	e8 47 ff ff ff       	call   8002b4 <cputch>
+  80036d:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  800370:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  800373:	c9                   	leave  
+  800374:	c3                   	ret    
+
+00800375 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800375:	55                   	push   %ebp
+  800376:	89 e5                	mov    %esp,%ebp
+  800378:	83 ec 18             	sub    $0x18,%esp
+    int ret = main();
+  80037b:	e8 7c 0c 00 00       	call   800ffc <main>
+  800380:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  800383:	83 ec 0c             	sub    $0xc,%esp
+  800386:	ff 75 f4             	pushl  -0xc(%ebp)
+  800389:	e8 3b fe ff ff       	call   8001c9 <exit>
+
+0080038e <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  80038e:	55                   	push   %ebp
+  80038f:	89 e5                	mov    %esp,%ebp
+  800391:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800394:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  80039b:	eb 04                	jmp    8003a1 <strlen+0x13>
+        cnt ++;
+  80039d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  8003a1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003a4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003a7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003aa:	0f b6 00             	movzbl (%eax),%eax
+  8003ad:	84 c0                	test   %al,%al
+  8003af:	75 ec                	jne    80039d <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003b4:	c9                   	leave  
+  8003b5:	c3                   	ret    
+
+008003b6 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  8003b6:	55                   	push   %ebp
+  8003b7:	89 e5                	mov    %esp,%ebp
+  8003b9:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003bc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003c3:	eb 04                	jmp    8003c9 <strnlen+0x13>
+        cnt ++;
+  8003c5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  8003c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003cc:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003cf:	73 10                	jae    8003e1 <strnlen+0x2b>
+  8003d1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003d4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003d7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003da:	0f b6 00             	movzbl (%eax),%eax
+  8003dd:	84 c0                	test   %al,%al
+  8003df:	75 e4                	jne    8003c5 <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003e4:	c9                   	leave  
+  8003e5:	c3                   	ret    
+
+008003e6 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  8003e6:	55                   	push   %ebp
+  8003e7:	89 e5                	mov    %esp,%ebp
+  8003e9:	57                   	push   %edi
+  8003ea:	56                   	push   %esi
+  8003eb:	83 ec 20             	sub    $0x20,%esp
+  8003ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003f4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8003f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  8003fa:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800400:	89 d1                	mov    %edx,%ecx
+  800402:	89 c2                	mov    %eax,%edx
+  800404:	89 ce                	mov    %ecx,%esi
+  800406:	89 d7                	mov    %edx,%edi
+  800408:	ac                   	lods   %ds:(%esi),%al
+  800409:	aa                   	stos   %al,%es:(%edi)
+  80040a:	84 c0                	test   %al,%al
+  80040c:	75 fa                	jne    800408 <strcpy+0x22>
+  80040e:	89 fa                	mov    %edi,%edx
+  800410:	89 f1                	mov    %esi,%ecx
+  800412:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800415:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800418:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  80041b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  80041e:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  80041f:	83 c4 20             	add    $0x20,%esp
+  800422:	5e                   	pop    %esi
+  800423:	5f                   	pop    %edi
+  800424:	5d                   	pop    %ebp
+  800425:	c3                   	ret    
+
+00800426 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800426:	55                   	push   %ebp
+  800427:	89 e5                	mov    %esp,%ebp
+  800429:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  80042c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80042f:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800432:	eb 21                	jmp    800455 <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800434:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800437:	0f b6 10             	movzbl (%eax),%edx
+  80043a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80043d:	88 10                	mov    %dl,(%eax)
+  80043f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800442:	0f b6 00             	movzbl (%eax),%eax
+  800445:	84 c0                	test   %al,%al
+  800447:	74 04                	je     80044d <strncpy+0x27>
+            src ++;
+  800449:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  80044d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800451:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800455:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800459:	75 d9                	jne    800434 <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  80045b:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  80045e:	c9                   	leave  
+  80045f:	c3                   	ret    
+
+00800460 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800460:	55                   	push   %ebp
+  800461:	89 e5                	mov    %esp,%ebp
+  800463:	57                   	push   %edi
+  800464:	56                   	push   %esi
+  800465:	83 ec 20             	sub    $0x20,%esp
+  800468:	8b 45 08             	mov    0x8(%ebp),%eax
+  80046b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80046e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800471:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800474:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800477:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80047a:	89 d1                	mov    %edx,%ecx
+  80047c:	89 c2                	mov    %eax,%edx
+  80047e:	89 ce                	mov    %ecx,%esi
+  800480:	89 d7                	mov    %edx,%edi
+  800482:	ac                   	lods   %ds:(%esi),%al
+  800483:	ae                   	scas   %es:(%edi),%al
+  800484:	75 08                	jne    80048e <strcmp+0x2e>
+  800486:	84 c0                	test   %al,%al
+  800488:	75 f8                	jne    800482 <strcmp+0x22>
+  80048a:	31 c0                	xor    %eax,%eax
+  80048c:	eb 04                	jmp    800492 <strcmp+0x32>
+  80048e:	19 c0                	sbb    %eax,%eax
+  800490:	0c 01                	or     $0x1,%al
+  800492:	89 fa                	mov    %edi,%edx
+  800494:	89 f1                	mov    %esi,%ecx
+  800496:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800499:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  80049c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  80049f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  8004a2:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  8004a3:	83 c4 20             	add    $0x20,%esp
+  8004a6:	5e                   	pop    %esi
+  8004a7:	5f                   	pop    %edi
+  8004a8:	5d                   	pop    %ebp
+  8004a9:	c3                   	ret    
+
+008004aa <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  8004aa:	55                   	push   %ebp
+  8004ab:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004ad:	eb 0c                	jmp    8004bb <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  8004af:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  8004b3:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8004b7:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004bb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004bf:	74 1a                	je     8004db <strncmp+0x31>
+  8004c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004c4:	0f b6 00             	movzbl (%eax),%eax
+  8004c7:	84 c0                	test   %al,%al
+  8004c9:	74 10                	je     8004db <strncmp+0x31>
+  8004cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004ce:	0f b6 10             	movzbl (%eax),%edx
+  8004d1:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004d4:	0f b6 00             	movzbl (%eax),%eax
+  8004d7:	38 c2                	cmp    %al,%dl
+  8004d9:	74 d4                	je     8004af <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004db:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004df:	74 18                	je     8004f9 <strncmp+0x4f>
+  8004e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e4:	0f b6 00             	movzbl (%eax),%eax
+  8004e7:	0f b6 d0             	movzbl %al,%edx
+  8004ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ed:	0f b6 00             	movzbl (%eax),%eax
+  8004f0:	0f b6 c0             	movzbl %al,%eax
+  8004f3:	29 c2                	sub    %eax,%edx
+  8004f5:	89 d0                	mov    %edx,%eax
+  8004f7:	eb 05                	jmp    8004fe <strncmp+0x54>
+  8004f9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8004fe:	5d                   	pop    %ebp
+  8004ff:	c3                   	ret    
+
+00800500 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800500:	55                   	push   %ebp
+  800501:	89 e5                	mov    %esp,%ebp
+  800503:	83 ec 04             	sub    $0x4,%esp
+  800506:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800509:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  80050c:	eb 14                	jmp    800522 <strchr+0x22>
+        if (*s == c) {
+  80050e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800511:	0f b6 00             	movzbl (%eax),%eax
+  800514:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800517:	75 05                	jne    80051e <strchr+0x1e>
+            return (char *)s;
+  800519:	8b 45 08             	mov    0x8(%ebp),%eax
+  80051c:	eb 13                	jmp    800531 <strchr+0x31>
+        }
+        s ++;
+  80051e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800522:	8b 45 08             	mov    0x8(%ebp),%eax
+  800525:	0f b6 00             	movzbl (%eax),%eax
+  800528:	84 c0                	test   %al,%al
+  80052a:	75 e2                	jne    80050e <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  80052c:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800531:	c9                   	leave  
+  800532:	c3                   	ret    
+
+00800533 <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800533:	55                   	push   %ebp
+  800534:	89 e5                	mov    %esp,%ebp
+  800536:	83 ec 04             	sub    $0x4,%esp
+  800539:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80053c:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  80053f:	eb 0f                	jmp    800550 <strfind+0x1d>
+        if (*s == c) {
+  800541:	8b 45 08             	mov    0x8(%ebp),%eax
+  800544:	0f b6 00             	movzbl (%eax),%eax
+  800547:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  80054a:	74 10                	je     80055c <strfind+0x29>
+            break;
+        }
+        s ++;
+  80054c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800550:	8b 45 08             	mov    0x8(%ebp),%eax
+  800553:	0f b6 00             	movzbl (%eax),%eax
+  800556:	84 c0                	test   %al,%al
+  800558:	75 e7                	jne    800541 <strfind+0xe>
+  80055a:	eb 01                	jmp    80055d <strfind+0x2a>
+        if (*s == c) {
+            break;
+  80055c:	90                   	nop
+        }
+        s ++;
+    }
+    return (char *)s;
+  80055d:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800560:	c9                   	leave  
+  800561:	c3                   	ret    
+
+00800562 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800562:	55                   	push   %ebp
+  800563:	89 e5                	mov    %esp,%ebp
+  800565:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800568:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  80056f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800576:	eb 04                	jmp    80057c <strtol+0x1a>
+        s ++;
+  800578:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80057c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80057f:	0f b6 00             	movzbl (%eax),%eax
+  800582:	3c 20                	cmp    $0x20,%al
+  800584:	74 f2                	je     800578 <strtol+0x16>
+  800586:	8b 45 08             	mov    0x8(%ebp),%eax
+  800589:	0f b6 00             	movzbl (%eax),%eax
+  80058c:	3c 09                	cmp    $0x9,%al
+  80058e:	74 e8                	je     800578 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800590:	8b 45 08             	mov    0x8(%ebp),%eax
+  800593:	0f b6 00             	movzbl (%eax),%eax
+  800596:	3c 2b                	cmp    $0x2b,%al
+  800598:	75 06                	jne    8005a0 <strtol+0x3e>
+        s ++;
+  80059a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  80059e:	eb 15                	jmp    8005b5 <strtol+0x53>
+    }
+    else if (*s == '-') {
+  8005a0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a3:	0f b6 00             	movzbl (%eax),%eax
+  8005a6:	3c 2d                	cmp    $0x2d,%al
+  8005a8:	75 0b                	jne    8005b5 <strtol+0x53>
+        s ++, neg = 1;
+  8005aa:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005ae:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  8005b5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005b9:	74 06                	je     8005c1 <strtol+0x5f>
+  8005bb:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  8005bf:	75 24                	jne    8005e5 <strtol+0x83>
+  8005c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005c4:	0f b6 00             	movzbl (%eax),%eax
+  8005c7:	3c 30                	cmp    $0x30,%al
+  8005c9:	75 1a                	jne    8005e5 <strtol+0x83>
+  8005cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ce:	83 c0 01             	add    $0x1,%eax
+  8005d1:	0f b6 00             	movzbl (%eax),%eax
+  8005d4:	3c 78                	cmp    $0x78,%al
+  8005d6:	75 0d                	jne    8005e5 <strtol+0x83>
+        s += 2, base = 16;
+  8005d8:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005dc:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005e3:	eb 2a                	jmp    80060f <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005e5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005e9:	75 17                	jne    800602 <strtol+0xa0>
+  8005eb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ee:	0f b6 00             	movzbl (%eax),%eax
+  8005f1:	3c 30                	cmp    $0x30,%al
+  8005f3:	75 0d                	jne    800602 <strtol+0xa0>
+        s ++, base = 8;
+  8005f5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005f9:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800600:	eb 0d                	jmp    80060f <strtol+0xad>
+    }
+    else if (base == 0) {
+  800602:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800606:	75 07                	jne    80060f <strtol+0xad>
+        base = 10;
+  800608:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  80060f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800612:	0f b6 00             	movzbl (%eax),%eax
+  800615:	3c 2f                	cmp    $0x2f,%al
+  800617:	7e 1b                	jle    800634 <strtol+0xd2>
+  800619:	8b 45 08             	mov    0x8(%ebp),%eax
+  80061c:	0f b6 00             	movzbl (%eax),%eax
+  80061f:	3c 39                	cmp    $0x39,%al
+  800621:	7f 11                	jg     800634 <strtol+0xd2>
+            dig = *s - '0';
+  800623:	8b 45 08             	mov    0x8(%ebp),%eax
+  800626:	0f b6 00             	movzbl (%eax),%eax
+  800629:	0f be c0             	movsbl %al,%eax
+  80062c:	83 e8 30             	sub    $0x30,%eax
+  80062f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800632:	eb 48                	jmp    80067c <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800634:	8b 45 08             	mov    0x8(%ebp),%eax
+  800637:	0f b6 00             	movzbl (%eax),%eax
+  80063a:	3c 60                	cmp    $0x60,%al
+  80063c:	7e 1b                	jle    800659 <strtol+0xf7>
+  80063e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800641:	0f b6 00             	movzbl (%eax),%eax
+  800644:	3c 7a                	cmp    $0x7a,%al
+  800646:	7f 11                	jg     800659 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800648:	8b 45 08             	mov    0x8(%ebp),%eax
+  80064b:	0f b6 00             	movzbl (%eax),%eax
+  80064e:	0f be c0             	movsbl %al,%eax
+  800651:	83 e8 57             	sub    $0x57,%eax
+  800654:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800657:	eb 23                	jmp    80067c <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800659:	8b 45 08             	mov    0x8(%ebp),%eax
+  80065c:	0f b6 00             	movzbl (%eax),%eax
+  80065f:	3c 40                	cmp    $0x40,%al
+  800661:	7e 3c                	jle    80069f <strtol+0x13d>
+  800663:	8b 45 08             	mov    0x8(%ebp),%eax
+  800666:	0f b6 00             	movzbl (%eax),%eax
+  800669:	3c 5a                	cmp    $0x5a,%al
+  80066b:	7f 32                	jg     80069f <strtol+0x13d>
+            dig = *s - 'A' + 10;
+  80066d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800670:	0f b6 00             	movzbl (%eax),%eax
+  800673:	0f be c0             	movsbl %al,%eax
+  800676:	83 e8 37             	sub    $0x37,%eax
+  800679:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  80067c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80067f:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800682:	7d 1a                	jge    80069e <strtol+0x13c>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  800684:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800688:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80068b:	0f af 45 10          	imul   0x10(%ebp),%eax
+  80068f:	89 c2                	mov    %eax,%edx
+  800691:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800694:	01 d0                	add    %edx,%eax
+  800696:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800699:	e9 71 ff ff ff       	jmp    80060f <strtol+0xad>
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+            break;
+  80069e:	90                   	nop
+        }
+        s ++, val = (val * base) + dig;
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  80069f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8006a3:	74 08                	je     8006ad <strtol+0x14b>
+        *endptr = (char *) s;
+  8006a5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006a8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006ab:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  8006ad:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  8006b1:	74 07                	je     8006ba <strtol+0x158>
+  8006b3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006b6:	f7 d8                	neg    %eax
+  8006b8:	eb 03                	jmp    8006bd <strtol+0x15b>
+  8006ba:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  8006bd:	c9                   	leave  
+  8006be:	c3                   	ret    
+
+008006bf <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  8006bf:	55                   	push   %ebp
+  8006c0:	89 e5                	mov    %esp,%ebp
+  8006c2:	57                   	push   %edi
+  8006c3:	83 ec 24             	sub    $0x24,%esp
+  8006c6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006c9:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006cc:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006d0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006d3:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006d6:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006d9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006df:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006e2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006e6:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006e9:	89 d7                	mov    %edx,%edi
+  8006eb:	f3 aa                	rep stos %al,%es:(%edi)
+  8006ed:	89 fa                	mov    %edi,%edx
+  8006ef:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8006f2:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  8006f5:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006f8:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  8006f9:	83 c4 24             	add    $0x24,%esp
+  8006fc:	5f                   	pop    %edi
+  8006fd:	5d                   	pop    %ebp
+  8006fe:	c3                   	ret    
+
+008006ff <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  8006ff:	55                   	push   %ebp
+  800700:	89 e5                	mov    %esp,%ebp
+  800702:	57                   	push   %edi
+  800703:	56                   	push   %esi
+  800704:	53                   	push   %ebx
+  800705:	83 ec 30             	sub    $0x30,%esp
+  800708:	8b 45 08             	mov    0x8(%ebp),%eax
+  80070b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80070e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800711:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800714:	8b 45 10             	mov    0x10(%ebp),%eax
+  800717:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  80071a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80071d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800720:	73 42                	jae    800764 <memmove+0x65>
+  800722:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800725:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800728:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80072b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80072e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800731:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800734:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800737:	c1 e8 02             	shr    $0x2,%eax
+  80073a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  80073c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  80073f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800742:	89 d7                	mov    %edx,%edi
+  800744:	89 c6                	mov    %eax,%esi
+  800746:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800748:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  80074b:	83 e1 03             	and    $0x3,%ecx
+  80074e:	74 02                	je     800752 <memmove+0x53>
+  800750:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800752:	89 f0                	mov    %esi,%eax
+  800754:	89 fa                	mov    %edi,%edx
+  800756:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800759:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  80075c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  80075f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  800762:	eb 36                	jmp    80079a <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800764:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800767:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80076a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80076d:	01 c2                	add    %eax,%edx
+  80076f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800772:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800775:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800778:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  80077b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80077e:	89 c1                	mov    %eax,%ecx
+  800780:	89 d8                	mov    %ebx,%eax
+  800782:	89 d6                	mov    %edx,%esi
+  800784:	89 c7                	mov    %eax,%edi
+  800786:	fd                   	std    
+  800787:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800789:	fc                   	cld    
+  80078a:	89 f8                	mov    %edi,%eax
+  80078c:	89 f2                	mov    %esi,%edx
+  80078e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800791:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800794:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800797:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  80079a:	83 c4 30             	add    $0x30,%esp
+  80079d:	5b                   	pop    %ebx
+  80079e:	5e                   	pop    %esi
+  80079f:	5f                   	pop    %edi
+  8007a0:	5d                   	pop    %ebp
+  8007a1:	c3                   	ret    
+
+008007a2 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  8007a2:	55                   	push   %ebp
+  8007a3:	89 e5                	mov    %esp,%ebp
+  8007a5:	57                   	push   %edi
+  8007a6:	56                   	push   %esi
+  8007a7:	83 ec 20             	sub    $0x20,%esp
+  8007aa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8007b0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007b6:	8b 45 10             	mov    0x10(%ebp),%eax
+  8007b9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  8007bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8007bf:	c1 e8 02             	shr    $0x2,%eax
+  8007c2:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  8007c4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007ca:	89 d7                	mov    %edx,%edi
+  8007cc:	89 c6                	mov    %eax,%esi
+  8007ce:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007d0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007d3:	83 e1 03             	and    $0x3,%ecx
+  8007d6:	74 02                	je     8007da <memcpy+0x38>
+  8007d8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007da:	89 f0                	mov    %esi,%eax
+  8007dc:	89 fa                	mov    %edi,%edx
+  8007de:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007e1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007e4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  8007e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007ea:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007eb:	83 c4 20             	add    $0x20,%esp
+  8007ee:	5e                   	pop    %esi
+  8007ef:	5f                   	pop    %edi
+  8007f0:	5d                   	pop    %ebp
+  8007f1:	c3                   	ret    
+
+008007f2 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  8007f2:	55                   	push   %ebp
+  8007f3:	89 e5                	mov    %esp,%ebp
+  8007f5:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  8007f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007fb:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  8007fe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800801:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800804:	eb 30                	jmp    800836 <memcmp+0x44>
+        if (*s1 != *s2) {
+  800806:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800809:	0f b6 10             	movzbl (%eax),%edx
+  80080c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80080f:	0f b6 00             	movzbl (%eax),%eax
+  800812:	38 c2                	cmp    %al,%dl
+  800814:	74 18                	je     80082e <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800816:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800819:	0f b6 00             	movzbl (%eax),%eax
+  80081c:	0f b6 d0             	movzbl %al,%edx
+  80081f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800822:	0f b6 00             	movzbl (%eax),%eax
+  800825:	0f b6 c0             	movzbl %al,%eax
+  800828:	29 c2                	sub    %eax,%edx
+  80082a:	89 d0                	mov    %edx,%eax
+  80082c:	eb 1a                	jmp    800848 <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  80082e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800832:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800836:	8b 45 10             	mov    0x10(%ebp),%eax
+  800839:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80083c:	89 55 10             	mov    %edx,0x10(%ebp)
+  80083f:	85 c0                	test   %eax,%eax
+  800841:	75 c3                	jne    800806 <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800843:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800848:	c9                   	leave  
+  800849:	c3                   	ret    
+
+0080084a <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  80084a:	55                   	push   %ebp
+  80084b:	89 e5                	mov    %esp,%ebp
+  80084d:	83 ec 38             	sub    $0x38,%esp
+  800850:	8b 45 10             	mov    0x10(%ebp),%eax
+  800853:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800856:	8b 45 14             	mov    0x14(%ebp),%eax
+  800859:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80085c:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  80085f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800862:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800865:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800868:	8b 45 18             	mov    0x18(%ebp),%eax
+  80086b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  80086e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800871:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800874:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800877:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  80087a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80087d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800880:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800884:	74 1c                	je     8008a2 <printnum+0x58>
+  800886:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800889:	ba 00 00 00 00       	mov    $0x0,%edx
+  80088e:	f7 75 e4             	divl   -0x1c(%ebp)
+  800891:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800894:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800897:	ba 00 00 00 00       	mov    $0x0,%edx
+  80089c:	f7 75 e4             	divl   -0x1c(%ebp)
+  80089f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008a2:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008a8:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008ab:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8008ae:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8008b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008b4:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8008b7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8008ba:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8008bd:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8008c0:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8008c3:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008c6:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008cb:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008ce:	77 41                	ja     800911 <printnum+0xc7>
+  8008d0:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008d3:	72 05                	jb     8008da <printnum+0x90>
+  8008d5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  8008d8:	77 37                	ja     800911 <printnum+0xc7>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008da:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008dd:	83 e8 01             	sub    $0x1,%eax
+  8008e0:	83 ec 04             	sub    $0x4,%esp
+  8008e3:	ff 75 20             	pushl  0x20(%ebp)
+  8008e6:	50                   	push   %eax
+  8008e7:	ff 75 18             	pushl  0x18(%ebp)
+  8008ea:	ff 75 ec             	pushl  -0x14(%ebp)
+  8008ed:	ff 75 e8             	pushl  -0x18(%ebp)
+  8008f0:	ff 75 0c             	pushl  0xc(%ebp)
+  8008f3:	ff 75 08             	pushl  0x8(%ebp)
+  8008f6:	e8 4f ff ff ff       	call   80084a <printnum>
+  8008fb:	83 c4 20             	add    $0x20,%esp
+  8008fe:	eb 1b                	jmp    80091b <printnum+0xd1>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800900:	83 ec 08             	sub    $0x8,%esp
+  800903:	ff 75 0c             	pushl  0xc(%ebp)
+  800906:	ff 75 20             	pushl  0x20(%ebp)
+  800909:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090c:	ff d0                	call   *%eax
+  80090e:	83 c4 10             	add    $0x10,%esp
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  800911:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  800915:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  800919:	7f e5                	jg     800900 <printnum+0xb6>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  80091b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  80091e:	05 a4 11 80 00       	add    $0x8011a4,%eax
+  800923:	0f b6 00             	movzbl (%eax),%eax
+  800926:	0f be c0             	movsbl %al,%eax
+  800929:	83 ec 08             	sub    $0x8,%esp
+  80092c:	ff 75 0c             	pushl  0xc(%ebp)
+  80092f:	50                   	push   %eax
+  800930:	8b 45 08             	mov    0x8(%ebp),%eax
+  800933:	ff d0                	call   *%eax
+  800935:	83 c4 10             	add    $0x10,%esp
+}
+  800938:	90                   	nop
+  800939:	c9                   	leave  
+  80093a:	c3                   	ret    
+
+0080093b <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  80093b:	55                   	push   %ebp
+  80093c:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  80093e:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800942:	7e 14                	jle    800958 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  800944:	8b 45 08             	mov    0x8(%ebp),%eax
+  800947:	8b 00                	mov    (%eax),%eax
+  800949:	8d 48 08             	lea    0x8(%eax),%ecx
+  80094c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80094f:	89 0a                	mov    %ecx,(%edx)
+  800951:	8b 50 04             	mov    0x4(%eax),%edx
+  800954:	8b 00                	mov    (%eax),%eax
+  800956:	eb 30                	jmp    800988 <getuint+0x4d>
+    }
+    else if (lflag) {
+  800958:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80095c:	74 16                	je     800974 <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  80095e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800961:	8b 00                	mov    (%eax),%eax
+  800963:	8d 48 04             	lea    0x4(%eax),%ecx
+  800966:	8b 55 08             	mov    0x8(%ebp),%edx
+  800969:	89 0a                	mov    %ecx,(%edx)
+  80096b:	8b 00                	mov    (%eax),%eax
+  80096d:	ba 00 00 00 00       	mov    $0x0,%edx
+  800972:	eb 14                	jmp    800988 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  800974:	8b 45 08             	mov    0x8(%ebp),%eax
+  800977:	8b 00                	mov    (%eax),%eax
+  800979:	8d 48 04             	lea    0x4(%eax),%ecx
+  80097c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80097f:	89 0a                	mov    %ecx,(%edx)
+  800981:	8b 00                	mov    (%eax),%eax
+  800983:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800988:	5d                   	pop    %ebp
+  800989:	c3                   	ret    
+
+0080098a <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  80098a:	55                   	push   %ebp
+  80098b:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  80098d:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800991:	7e 14                	jle    8009a7 <getint+0x1d>
+        return va_arg(*ap, long long);
+  800993:	8b 45 08             	mov    0x8(%ebp),%eax
+  800996:	8b 00                	mov    (%eax),%eax
+  800998:	8d 48 08             	lea    0x8(%eax),%ecx
+  80099b:	8b 55 08             	mov    0x8(%ebp),%edx
+  80099e:	89 0a                	mov    %ecx,(%edx)
+  8009a0:	8b 50 04             	mov    0x4(%eax),%edx
+  8009a3:	8b 00                	mov    (%eax),%eax
+  8009a5:	eb 28                	jmp    8009cf <getint+0x45>
+    }
+    else if (lflag) {
+  8009a7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8009ab:	74 12                	je     8009bf <getint+0x35>
+        return va_arg(*ap, long);
+  8009ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b0:	8b 00                	mov    (%eax),%eax
+  8009b2:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009b5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009b8:	89 0a                	mov    %ecx,(%edx)
+  8009ba:	8b 00                	mov    (%eax),%eax
+  8009bc:	99                   	cltd   
+  8009bd:	eb 10                	jmp    8009cf <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  8009bf:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009c2:	8b 00                	mov    (%eax),%eax
+  8009c4:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009c7:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009ca:	89 0a                	mov    %ecx,(%edx)
+  8009cc:	8b 00                	mov    (%eax),%eax
+  8009ce:	99                   	cltd   
+    }
+}
+  8009cf:	5d                   	pop    %ebp
+  8009d0:	c3                   	ret    
+
+008009d1 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009d1:	55                   	push   %ebp
+  8009d2:	89 e5                	mov    %esp,%ebp
+  8009d4:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009d7:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009da:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8009e0:	50                   	push   %eax
+  8009e1:	ff 75 10             	pushl  0x10(%ebp)
+  8009e4:	ff 75 0c             	pushl  0xc(%ebp)
+  8009e7:	ff 75 08             	pushl  0x8(%ebp)
+  8009ea:	e8 06 00 00 00       	call   8009f5 <vprintfmt>
+  8009ef:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8009f2:	90                   	nop
+  8009f3:	c9                   	leave  
+  8009f4:	c3                   	ret    
+
+008009f5 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8009f5:	55                   	push   %ebp
+  8009f6:	89 e5                	mov    %esp,%ebp
+  8009f8:	56                   	push   %esi
+  8009f9:	53                   	push   %ebx
+  8009fa:	83 ec 20             	sub    $0x20,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009fd:	eb 17                	jmp    800a16 <vprintfmt+0x21>
+            if (ch == '\0') {
+  8009ff:	85 db                	test   %ebx,%ebx
+  800a01:	0f 84 8e 03 00 00    	je     800d95 <vprintfmt+0x3a0>
+                return;
+            }
+            putch(ch, putdat);
+  800a07:	83 ec 08             	sub    $0x8,%esp
+  800a0a:	ff 75 0c             	pushl  0xc(%ebp)
+  800a0d:	53                   	push   %ebx
+  800a0e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a11:	ff d0                	call   *%eax
+  800a13:	83 c4 10             	add    $0x10,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a16:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a19:	8d 50 01             	lea    0x1(%eax),%edx
+  800a1c:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a1f:	0f b6 00             	movzbl (%eax),%eax
+  800a22:	0f b6 d8             	movzbl %al,%ebx
+  800a25:	83 fb 25             	cmp    $0x25,%ebx
+  800a28:	75 d5                	jne    8009ff <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a2a:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a2e:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a38:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a3b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a42:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a45:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a48:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a4b:	8d 50 01             	lea    0x1(%eax),%edx
+  800a4e:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a51:	0f b6 00             	movzbl (%eax),%eax
+  800a54:	0f b6 d8             	movzbl %al,%ebx
+  800a57:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a5a:	83 f8 55             	cmp    $0x55,%eax
+  800a5d:	0f 87 05 03 00 00    	ja     800d68 <vprintfmt+0x373>
+  800a63:	8b 04 85 c8 11 80 00 	mov    0x8011c8(,%eax,4),%eax
+  800a6a:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a6c:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a70:	eb d6                	jmp    800a48 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a72:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800a76:	eb d0                	jmp    800a48 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a78:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800a7f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a82:	89 d0                	mov    %edx,%eax
+  800a84:	c1 e0 02             	shl    $0x2,%eax
+  800a87:	01 d0                	add    %edx,%eax
+  800a89:	01 c0                	add    %eax,%eax
+  800a8b:	01 d8                	add    %ebx,%eax
+  800a8d:	83 e8 30             	sub    $0x30,%eax
+  800a90:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800a93:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a96:	0f b6 00             	movzbl (%eax),%eax
+  800a99:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800a9c:	83 fb 2f             	cmp    $0x2f,%ebx
+  800a9f:	7e 39                	jle    800ada <vprintfmt+0xe5>
+  800aa1:	83 fb 39             	cmp    $0x39,%ebx
+  800aa4:	7f 34                	jg     800ada <vprintfmt+0xe5>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800aa6:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  800aaa:	eb d3                	jmp    800a7f <vprintfmt+0x8a>
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800aac:	8b 45 14             	mov    0x14(%ebp),%eax
+  800aaf:	8d 50 04             	lea    0x4(%eax),%edx
+  800ab2:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ab5:	8b 00                	mov    (%eax),%eax
+  800ab7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800aba:	eb 1f                	jmp    800adb <vprintfmt+0xe6>
+
+        case '.':
+            if (width < 0)
+  800abc:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ac0:	79 86                	jns    800a48 <vprintfmt+0x53>
+                width = 0;
+  800ac2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800ac9:	e9 7a ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800ace:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800ad5:	e9 6e ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+            goto process_precision;
+  800ada:	90                   	nop
+        case '#':
+            altflag = 1;
+            goto reswitch;
+
+        process_precision:
+            if (width < 0)
+  800adb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800adf:	0f 89 63 ff ff ff    	jns    800a48 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800ae5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ae8:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800aeb:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800af2:	e9 51 ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800af7:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800afb:	e9 48 ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800b00:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b03:	8d 50 04             	lea    0x4(%eax),%edx
+  800b06:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b09:	8b 00                	mov    (%eax),%eax
+  800b0b:	83 ec 08             	sub    $0x8,%esp
+  800b0e:	ff 75 0c             	pushl  0xc(%ebp)
+  800b11:	50                   	push   %eax
+  800b12:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b15:	ff d0                	call   *%eax
+  800b17:	83 c4 10             	add    $0x10,%esp
+            break;
+  800b1a:	e9 71 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800b1f:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b22:	8d 50 04             	lea    0x4(%eax),%edx
+  800b25:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b28:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b2a:	85 db                	test   %ebx,%ebx
+  800b2c:	79 02                	jns    800b30 <vprintfmt+0x13b>
+                err = -err;
+  800b2e:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b30:	83 fb 18             	cmp    $0x18,%ebx
+  800b33:	7f 0b                	jg     800b40 <vprintfmt+0x14b>
+  800b35:	8b 34 9d 40 11 80 00 	mov    0x801140(,%ebx,4),%esi
+  800b3c:	85 f6                	test   %esi,%esi
+  800b3e:	75 19                	jne    800b59 <vprintfmt+0x164>
+                printfmt(putch, putdat, "error %d", err);
+  800b40:	53                   	push   %ebx
+  800b41:	68 b5 11 80 00       	push   $0x8011b5
+  800b46:	ff 75 0c             	pushl  0xc(%ebp)
+  800b49:	ff 75 08             	pushl  0x8(%ebp)
+  800b4c:	e8 80 fe ff ff       	call   8009d1 <printfmt>
+  800b51:	83 c4 10             	add    $0x10,%esp
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b54:	e9 37 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  800b59:	56                   	push   %esi
+  800b5a:	68 be 11 80 00       	push   $0x8011be
+  800b5f:	ff 75 0c             	pushl  0xc(%ebp)
+  800b62:	ff 75 08             	pushl  0x8(%ebp)
+  800b65:	e8 67 fe ff ff       	call   8009d1 <printfmt>
+  800b6a:	83 c4 10             	add    $0x10,%esp
+            }
+            break;
+  800b6d:	e9 1e 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800b72:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b75:	8d 50 04             	lea    0x4(%eax),%edx
+  800b78:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b7b:	8b 30                	mov    (%eax),%esi
+  800b7d:	85 f6                	test   %esi,%esi
+  800b7f:	75 05                	jne    800b86 <vprintfmt+0x191>
+                p = "(null)";
+  800b81:	be c1 11 80 00       	mov    $0x8011c1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800b86:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b8a:	7e 76                	jle    800c02 <vprintfmt+0x20d>
+  800b8c:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800b90:	74 70                	je     800c02 <vprintfmt+0x20d>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b92:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b95:	83 ec 08             	sub    $0x8,%esp
+  800b98:	50                   	push   %eax
+  800b99:	56                   	push   %esi
+  800b9a:	e8 17 f8 ff ff       	call   8003b6 <strnlen>
+  800b9f:	83 c4 10             	add    $0x10,%esp
+  800ba2:	89 c2                	mov    %eax,%edx
+  800ba4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ba7:	29 d0                	sub    %edx,%eax
+  800ba9:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800bac:	eb 17                	jmp    800bc5 <vprintfmt+0x1d0>
+                    putch(padc, putdat);
+  800bae:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800bb2:	83 ec 08             	sub    $0x8,%esp
+  800bb5:	ff 75 0c             	pushl  0xc(%ebp)
+  800bb8:	50                   	push   %eax
+  800bb9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bbc:	ff d0                	call   *%eax
+  800bbe:	83 c4 10             	add    $0x10,%esp
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bc1:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800bc5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800bc9:	7f e3                	jg     800bae <vprintfmt+0x1b9>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bcb:	eb 35                	jmp    800c02 <vprintfmt+0x20d>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800bcd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800bd1:	74 1c                	je     800bef <vprintfmt+0x1fa>
+  800bd3:	83 fb 1f             	cmp    $0x1f,%ebx
+  800bd6:	7e 05                	jle    800bdd <vprintfmt+0x1e8>
+  800bd8:	83 fb 7e             	cmp    $0x7e,%ebx
+  800bdb:	7e 12                	jle    800bef <vprintfmt+0x1fa>
+                    putch('?', putdat);
+  800bdd:	83 ec 08             	sub    $0x8,%esp
+  800be0:	ff 75 0c             	pushl  0xc(%ebp)
+  800be3:	6a 3f                	push   $0x3f
+  800be5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800be8:	ff d0                	call   *%eax
+  800bea:	83 c4 10             	add    $0x10,%esp
+  800bed:	eb 0f                	jmp    800bfe <vprintfmt+0x209>
+                }
+                else {
+                    putch(ch, putdat);
+  800bef:	83 ec 08             	sub    $0x8,%esp
+  800bf2:	ff 75 0c             	pushl  0xc(%ebp)
+  800bf5:	53                   	push   %ebx
+  800bf6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bf9:	ff d0                	call   *%eax
+  800bfb:	83 c4 10             	add    $0x10,%esp
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bfe:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c02:	89 f0                	mov    %esi,%eax
+  800c04:	8d 70 01             	lea    0x1(%eax),%esi
+  800c07:	0f b6 00             	movzbl (%eax),%eax
+  800c0a:	0f be d8             	movsbl %al,%ebx
+  800c0d:	85 db                	test   %ebx,%ebx
+  800c0f:	74 26                	je     800c37 <vprintfmt+0x242>
+  800c11:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c15:	78 b6                	js     800bcd <vprintfmt+0x1d8>
+  800c17:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  800c1b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c1f:	79 ac                	jns    800bcd <vprintfmt+0x1d8>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c21:	eb 14                	jmp    800c37 <vprintfmt+0x242>
+                putch(' ', putdat);
+  800c23:	83 ec 08             	sub    $0x8,%esp
+  800c26:	ff 75 0c             	pushl  0xc(%ebp)
+  800c29:	6a 20                	push   $0x20
+  800c2b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2e:	ff d0                	call   *%eax
+  800c30:	83 c4 10             	add    $0x10,%esp
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c33:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c37:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c3b:	7f e6                	jg     800c23 <vprintfmt+0x22e>
+                putch(' ', putdat);
+            }
+            break;
+  800c3d:	e9 4e 01 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c42:	83 ec 08             	sub    $0x8,%esp
+  800c45:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c48:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c4b:	50                   	push   %eax
+  800c4c:	e8 39 fd ff ff       	call   80098a <getint>
+  800c51:	83 c4 10             	add    $0x10,%esp
+  800c54:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c57:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c5d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c60:	85 d2                	test   %edx,%edx
+  800c62:	79 23                	jns    800c87 <vprintfmt+0x292>
+                putch('-', putdat);
+  800c64:	83 ec 08             	sub    $0x8,%esp
+  800c67:	ff 75 0c             	pushl  0xc(%ebp)
+  800c6a:	6a 2d                	push   $0x2d
+  800c6c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c6f:	ff d0                	call   *%eax
+  800c71:	83 c4 10             	add    $0x10,%esp
+                num = -(long long)num;
+  800c74:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c77:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c7a:	f7 d8                	neg    %eax
+  800c7c:	83 d2 00             	adc    $0x0,%edx
+  800c7f:	f7 da                	neg    %edx
+  800c81:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c84:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800c87:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c8e:	e9 9f 00 00 00       	jmp    800d32 <vprintfmt+0x33d>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800c93:	83 ec 08             	sub    $0x8,%esp
+  800c96:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c99:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c9c:	50                   	push   %eax
+  800c9d:	e8 99 fc ff ff       	call   80093b <getuint>
+  800ca2:	83 c4 10             	add    $0x10,%esp
+  800ca5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ca8:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800cab:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cb2:	eb 7e                	jmp    800d32 <vprintfmt+0x33d>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800cb4:	83 ec 08             	sub    $0x8,%esp
+  800cb7:	ff 75 e0             	pushl  -0x20(%ebp)
+  800cba:	8d 45 14             	lea    0x14(%ebp),%eax
+  800cbd:	50                   	push   %eax
+  800cbe:	e8 78 fc ff ff       	call   80093b <getuint>
+  800cc3:	83 c4 10             	add    $0x10,%esp
+  800cc6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cc9:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800ccc:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800cd3:	eb 5d                	jmp    800d32 <vprintfmt+0x33d>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800cd5:	83 ec 08             	sub    $0x8,%esp
+  800cd8:	ff 75 0c             	pushl  0xc(%ebp)
+  800cdb:	6a 30                	push   $0x30
+  800cdd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ce0:	ff d0                	call   *%eax
+  800ce2:	83 c4 10             	add    $0x10,%esp
+            putch('x', putdat);
+  800ce5:	83 ec 08             	sub    $0x8,%esp
+  800ce8:	ff 75 0c             	pushl  0xc(%ebp)
+  800ceb:	6a 78                	push   $0x78
+  800ced:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cf0:	ff d0                	call   *%eax
+  800cf2:	83 c4 10             	add    $0x10,%esp
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800cf5:	8b 45 14             	mov    0x14(%ebp),%eax
+  800cf8:	8d 50 04             	lea    0x4(%eax),%edx
+  800cfb:	89 55 14             	mov    %edx,0x14(%ebp)
+  800cfe:	8b 00                	mov    (%eax),%eax
+  800d00:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d03:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800d0a:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800d11:	eb 1f                	jmp    800d32 <vprintfmt+0x33d>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800d13:	83 ec 08             	sub    $0x8,%esp
+  800d16:	ff 75 e0             	pushl  -0x20(%ebp)
+  800d19:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d1c:	50                   	push   %eax
+  800d1d:	e8 19 fc ff ff       	call   80093b <getuint>
+  800d22:	83 c4 10             	add    $0x10,%esp
+  800d25:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d28:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d2b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d32:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d36:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d39:	83 ec 04             	sub    $0x4,%esp
+  800d3c:	52                   	push   %edx
+  800d3d:	ff 75 e8             	pushl  -0x18(%ebp)
+  800d40:	50                   	push   %eax
+  800d41:	ff 75 f4             	pushl  -0xc(%ebp)
+  800d44:	ff 75 f0             	pushl  -0x10(%ebp)
+  800d47:	ff 75 0c             	pushl  0xc(%ebp)
+  800d4a:	ff 75 08             	pushl  0x8(%ebp)
+  800d4d:	e8 f8 fa ff ff       	call   80084a <printnum>
+  800d52:	83 c4 20             	add    $0x20,%esp
+            break;
+  800d55:	eb 39                	jmp    800d90 <vprintfmt+0x39b>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800d57:	83 ec 08             	sub    $0x8,%esp
+  800d5a:	ff 75 0c             	pushl  0xc(%ebp)
+  800d5d:	53                   	push   %ebx
+  800d5e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d61:	ff d0                	call   *%eax
+  800d63:	83 c4 10             	add    $0x10,%esp
+            break;
+  800d66:	eb 28                	jmp    800d90 <vprintfmt+0x39b>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800d68:	83 ec 08             	sub    $0x8,%esp
+  800d6b:	ff 75 0c             	pushl  0xc(%ebp)
+  800d6e:	6a 25                	push   $0x25
+  800d70:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d73:	ff d0                	call   *%eax
+  800d75:	83 c4 10             	add    $0x10,%esp
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800d78:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d7c:	eb 04                	jmp    800d82 <vprintfmt+0x38d>
+  800d7e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d82:	8b 45 10             	mov    0x10(%ebp),%eax
+  800d85:	83 e8 01             	sub    $0x1,%eax
+  800d88:	0f b6 00             	movzbl (%eax),%eax
+  800d8b:	3c 25                	cmp    $0x25,%al
+  800d8d:	75 ef                	jne    800d7e <vprintfmt+0x389>
+                /* do nothing */;
+            break;
+  800d8f:	90                   	nop
+        }
+    }
+  800d90:	e9 68 fc ff ff       	jmp    8009fd <vprintfmt+0x8>
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+            if (ch == '\0') {
+                return;
+  800d95:	90                   	nop
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  800d96:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  800d99:	5b                   	pop    %ebx
+  800d9a:	5e                   	pop    %esi
+  800d9b:	5d                   	pop    %ebp
+  800d9c:	c3                   	ret    
+
+00800d9d <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800d9d:	55                   	push   %ebp
+  800d9e:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800da0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800da3:	8b 40 08             	mov    0x8(%eax),%eax
+  800da6:	8d 50 01             	lea    0x1(%eax),%edx
+  800da9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dac:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800daf:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db2:	8b 10                	mov    (%eax),%edx
+  800db4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db7:	8b 40 04             	mov    0x4(%eax),%eax
+  800dba:	39 c2                	cmp    %eax,%edx
+  800dbc:	73 12                	jae    800dd0 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800dbe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dc1:	8b 00                	mov    (%eax),%eax
+  800dc3:	8d 48 01             	lea    0x1(%eax),%ecx
+  800dc6:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800dc9:	89 0a                	mov    %ecx,(%edx)
+  800dcb:	8b 55 08             	mov    0x8(%ebp),%edx
+  800dce:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800dd0:	90                   	nop
+  800dd1:	5d                   	pop    %ebp
+  800dd2:	c3                   	ret    
+
+00800dd3 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800dd3:	55                   	push   %ebp
+  800dd4:	89 e5                	mov    %esp,%ebp
+  800dd6:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800dd9:	8d 45 14             	lea    0x14(%ebp),%eax
+  800ddc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800ddf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800de2:	50                   	push   %eax
+  800de3:	ff 75 10             	pushl  0x10(%ebp)
+  800de6:	ff 75 0c             	pushl  0xc(%ebp)
+  800de9:	ff 75 08             	pushl  0x8(%ebp)
+  800dec:	e8 0b 00 00 00       	call   800dfc <vsnprintf>
+  800df1:	83 c4 10             	add    $0x10,%esp
+  800df4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800df7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800dfa:	c9                   	leave  
+  800dfb:	c3                   	ret    
+
+00800dfc <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800dfc:	55                   	push   %ebp
+  800dfd:	89 e5                	mov    %esp,%ebp
+  800dff:	83 ec 18             	sub    $0x18,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800e02:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e05:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e08:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e0b:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800e0e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e11:	01 d0                	add    %edx,%eax
+  800e13:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e16:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800e1d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800e21:	74 0a                	je     800e2d <vsnprintf+0x31>
+  800e23:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800e26:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e29:	39 c2                	cmp    %eax,%edx
+  800e2b:	76 07                	jbe    800e34 <vsnprintf+0x38>
+        return -E_INVAL;
+  800e2d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e32:	eb 20                	jmp    800e54 <vsnprintf+0x58>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e34:	ff 75 14             	pushl  0x14(%ebp)
+  800e37:	ff 75 10             	pushl  0x10(%ebp)
+  800e3a:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800e3d:	50                   	push   %eax
+  800e3e:	68 9d 0d 80 00       	push   $0x800d9d
+  800e43:	e8 ad fb ff ff       	call   8009f5 <vprintfmt>
+  800e48:	83 c4 10             	add    $0x10,%esp
+    // null terminate the buffer
+    *b.buf = '\0';
+  800e4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e4e:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800e51:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e54:	c9                   	leave  
+  800e55:	c3                   	ret    
+
+00800e56 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800e56:	55                   	push   %ebp
+  800e57:	89 e5                	mov    %esp,%ebp
+  800e59:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800e5c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e5f:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800e65:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800e68:	b8 20 00 00 00       	mov    $0x20,%eax
+  800e6d:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800e70:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800e73:	89 c1                	mov    %eax,%ecx
+  800e75:	d3 ea                	shr    %cl,%edx
+  800e77:	89 d0                	mov    %edx,%eax
+}
+  800e79:	c9                   	leave  
+  800e7a:	c3                   	ret    
+
+00800e7b <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800e7b:	55                   	push   %ebp
+  800e7c:	89 e5                	mov    %esp,%ebp
+  800e7e:	57                   	push   %edi
+  800e7f:	56                   	push   %esi
+  800e80:	53                   	push   %ebx
+  800e81:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800e84:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e89:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800e8f:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800e95:	6b f0 05             	imul   $0x5,%eax,%esi
+  800e98:	01 fe                	add    %edi,%esi
+  800e9a:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800e9f:	f7 e7                	mul    %edi
+  800ea1:	01 d6                	add    %edx,%esi
+  800ea3:	89 f2                	mov    %esi,%edx
+  800ea5:	83 c0 0b             	add    $0xb,%eax
+  800ea8:	83 d2 00             	adc    $0x0,%edx
+  800eab:	89 c7                	mov    %eax,%edi
+  800ead:	83 e7 ff             	and    $0xffffffff,%edi
+  800eb0:	89 f9                	mov    %edi,%ecx
+  800eb2:	0f b7 da             	movzwl %dx,%ebx
+  800eb5:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800ebb:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800ec1:	a1 00 20 80 00       	mov    0x802000,%eax
+  800ec6:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ecc:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ed0:	c1 ea 0c             	shr    $0xc,%edx
+  800ed3:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ed6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800ed9:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ee0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ee3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ee6:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ee9:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800eec:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eef:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ef2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ef6:	74 1c                	je     800f14 <rand+0x99>
+  800ef8:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800efb:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f00:	f7 75 dc             	divl   -0x24(%ebp)
+  800f03:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800f06:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f09:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f0e:	f7 75 dc             	divl   -0x24(%ebp)
+  800f11:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800f14:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f17:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800f1a:	f7 75 dc             	divl   -0x24(%ebp)
+  800f1d:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f20:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f23:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f26:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800f29:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f2c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f2f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800f32:	83 c4 24             	add    $0x24,%esp
+  800f35:	5b                   	pop    %ebx
+  800f36:	5e                   	pop    %esi
+  800f37:	5f                   	pop    %edi
+  800f38:	5d                   	pop    %ebp
+  800f39:	c3                   	ret    
+
+00800f3a <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800f3a:	55                   	push   %ebp
+  800f3b:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800f3d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f40:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f45:	a3 00 20 80 00       	mov    %eax,0x802000
+  800f4a:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800f50:	90                   	nop
+  800f51:	5d                   	pop    %ebp
+  800f52:	c3                   	ret    
+
+00800f53 <forkchild>:
+#define DEPTH 4
+
+void forktree(const char *cur);
+
+void
+forkchild(const char *cur, char branch) {
+  800f53:	55                   	push   %ebp
+  800f54:	89 e5                	mov    %esp,%ebp
+  800f56:	83 ec 28             	sub    $0x28,%esp
+  800f59:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800f5c:	88 45 e4             	mov    %al,-0x1c(%ebp)
+    char nxt[DEPTH + 1];
+
+    if (strlen(cur) >= DEPTH)
+  800f5f:	83 ec 0c             	sub    $0xc,%esp
+  800f62:	ff 75 08             	pushl  0x8(%ebp)
+  800f65:	e8 24 f4 ff ff       	call   80038e <strlen>
+  800f6a:	83 c4 10             	add    $0x10,%esp
+  800f6d:	83 f8 03             	cmp    $0x3,%eax
+  800f70:	77 45                	ja     800fb7 <forkchild+0x64>
+        return;
+
+    snprintf(nxt, DEPTH + 1, "%s%c", cur, branch);
+  800f72:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
+  800f76:	83 ec 0c             	sub    $0xc,%esp
+  800f79:	50                   	push   %eax
+  800f7a:	ff 75 08             	pushl  0x8(%ebp)
+  800f7d:	68 20 13 80 00       	push   $0x801320
+  800f82:	6a 05                	push   $0x5
+  800f84:	8d 45 f3             	lea    -0xd(%ebp),%eax
+  800f87:	50                   	push   %eax
+  800f88:	e8 46 fe ff ff       	call   800dd3 <snprintf>
+  800f8d:	83 c4 20             	add    $0x20,%esp
+    if (fork() == 0) {
+  800f90:	e8 5a f2 ff ff       	call   8001ef <fork>
+  800f95:	85 c0                	test   %eax,%eax
+  800f97:	75 1f                	jne    800fb8 <forkchild+0x65>
+        forktree(nxt);
+  800f99:	83 ec 0c             	sub    $0xc,%esp
+  800f9c:	8d 45 f3             	lea    -0xd(%ebp),%eax
+  800f9f:	50                   	push   %eax
+  800fa0:	e8 15 00 00 00       	call   800fba <forktree>
+  800fa5:	83 c4 10             	add    $0x10,%esp
+        yield();
+  800fa8:	e8 7f f2 ff ff       	call   80022c <yield>
+        exit(0);
+  800fad:	83 ec 0c             	sub    $0xc,%esp
+  800fb0:	6a 00                	push   $0x0
+  800fb2:	e8 12 f2 ff ff       	call   8001c9 <exit>
+void
+forkchild(const char *cur, char branch) {
+    char nxt[DEPTH + 1];
+
+    if (strlen(cur) >= DEPTH)
+        return;
+  800fb7:	90                   	nop
+    if (fork() == 0) {
+        forktree(nxt);
+        yield();
+        exit(0);
+    }
+}
+  800fb8:	c9                   	leave  
+  800fb9:	c3                   	ret    
+
+00800fba <forktree>:
+
+void
+forktree(const char *cur) {
+  800fba:	55                   	push   %ebp
+  800fbb:	89 e5                	mov    %esp,%ebp
+  800fbd:	83 ec 08             	sub    $0x8,%esp
+    cprintf("%04x: I am '%s'\n", getpid(), cur);
+  800fc0:	e8 8b f2 ff ff       	call   800250 <getpid>
+  800fc5:	83 ec 04             	sub    $0x4,%esp
+  800fc8:	ff 75 08             	pushl  0x8(%ebp)
+  800fcb:	50                   	push   %eax
+  800fcc:	68 25 13 80 00       	push   $0x801325
+  800fd1:	e8 2b f3 ff ff       	call   800301 <cprintf>
+  800fd6:	83 c4 10             	add    $0x10,%esp
+
+    forkchild(cur, '0');
+  800fd9:	83 ec 08             	sub    $0x8,%esp
+  800fdc:	6a 30                	push   $0x30
+  800fde:	ff 75 08             	pushl  0x8(%ebp)
+  800fe1:	e8 6d ff ff ff       	call   800f53 <forkchild>
+  800fe6:	83 c4 10             	add    $0x10,%esp
+    forkchild(cur, '1');
+  800fe9:	83 ec 08             	sub    $0x8,%esp
+  800fec:	6a 31                	push   $0x31
+  800fee:	ff 75 08             	pushl  0x8(%ebp)
+  800ff1:	e8 5d ff ff ff       	call   800f53 <forkchild>
+  800ff6:	83 c4 10             	add    $0x10,%esp
+}
+  800ff9:	90                   	nop
+  800ffa:	c9                   	leave  
+  800ffb:	c3                   	ret    
+
+00800ffc <main>:
+
+int
+main(void) {
+  800ffc:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  801000:	83 e4 f0             	and    $0xfffffff0,%esp
+  801003:	ff 71 fc             	pushl  -0x4(%ecx)
+  801006:	55                   	push   %ebp
+  801007:	89 e5                	mov    %esp,%ebp
+  801009:	51                   	push   %ecx
+  80100a:	83 ec 04             	sub    $0x4,%esp
+    forktree("");
+  80100d:	83 ec 0c             	sub    $0xc,%esp
+  801010:	68 36 13 80 00       	push   $0x801336
+  801015:	e8 a0 ff ff ff       	call   800fba <forktree>
+  80101a:	83 c4 10             	add    $0x10,%esp
+    return 0;
+  80101d:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  801022:	8b 4d fc             	mov    -0x4(%ebp),%ecx
+  801025:	c9                   	leave  
+  801026:	8d 61 fc             	lea    -0x4(%ecx),%esp
+  801029:	c3                   	ret    
diff -r -u -P lab7_original/obj/user/forktree.d lab7/obj/user/forktree.d
--- lab7_original/obj/user/forktree.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/forktree.d	2016-05-06 21:59:27.602122838 +0800
@@ -0,0 +1,2 @@
+obj/user/forktree.o obj/user/forktree.d: user/forktree.c user/libs/ulib.h \
+ libs/defs.h libs/stdio.h libs/stdarg.h libs/string.h
Binary files lab7_original/obj/user/forktree.o and lab7/obj/user/forktree.o differ
diff -r -u -P lab7_original/obj/user/forktree.sym lab7/obj/user/forktree.sym
--- lab7_original/obj/user/forktree.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/forktree.sym	2016-05-06 21:59:28.666161631 +0800
@@ -0,0 +1,80 @@
+00800020 .text
+00801040 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202e31 .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b5 syscall
+00000000 ulib.c
+00000000 stdio.c
+008002b4 cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+00801140 error_string
+0080084a printnum
+0080093b getuint
+0080098a getint
+00800d9d sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 forktree.c
+008003e6 strcpy
+0080022c yield
+00800213 waitpid
+00800141 sys_yield
+008006ff memmove
+00800dd3 snprintf
+008009f5 vprintfmt
+0080011d sys_fork
+00800301 cprintf
+00800250 getpid
+008007a2 memcpy
+0080028f sleep
+00800278 lab6_set_priority
+00800dfc vsnprintf
+00800375 umain
+00202e30 __STAB_END__
+00800150 sys_kill
+00202e31 __STABSTR_BEGIN__
+00800020 __panic
+008001b7 sys_sleep
+00800562 strtol
+008003b6 strnlen
+00800fba forktree
+0080025d print_pgdir
+0080023a kill
+00800533 strfind
+008001fc wait
+008002a5 _start
+00800e7b rand
+008004aa strncmp
+00800171 sys_putc
+00800426 strncpy
+008007f2 memcmp
+008001ef fork
+008006bf memset
+00800ffc main
+00800f3a srand
+00800e56 hash32
+008009d1 printfmt
+00203ccd __STABSTR_END__
+00800460 strcmp
+0080026b gettime_msec
+00800192 sys_gettime
+008002d8 vcprintf
+0080006e __warn
+00800327 cputs
+008001a1 sys_lab6_set_priority
+008001c9 exit
+0080012c sys_wait
+0080010b sys_exit
+00200010 __STAB_BEGIN__
+0080038e strlen
+00800183 sys_pgdir
+00800500 strchr
+00800162 sys_getpid
+00800f53 forkchild
diff -r -u -P lab7_original/obj/user/hello.asm lab7/obj/user/hello.asm
--- lab7_original/obj/user/hello.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/hello.asm	2016-05-06 21:59:28.578158411 +0800
@@ -0,0 +1,2625 @@
+
+obj/__user_hello.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 18             	sub    $0x18,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	83 ec 04             	sub    $0x4,%esp
+  80002f:	ff 75 0c             	pushl  0xc(%ebp)
+  800032:	ff 75 08             	pushl  0x8(%ebp)
+  800035:	68 c0 0f 80 00       	push   $0x800fc0
+  80003a:	e8 c2 02 00 00       	call   800301 <cprintf>
+  80003f:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800042:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800045:	83 ec 08             	sub    $0x8,%esp
+  800048:	50                   	push   %eax
+  800049:	ff 75 10             	pushl  0x10(%ebp)
+  80004c:	e8 87 02 00 00       	call   8002d8 <vcprintf>
+  800051:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  800054:	83 ec 0c             	sub    $0xc,%esp
+  800057:	68 da 0f 80 00       	push   $0x800fda
+  80005c:	e8 a0 02 00 00       	call   800301 <cprintf>
+  800061:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	83 ec 0c             	sub    $0xc,%esp
+  800067:	6a f6                	push   $0xfffffff6
+  800069:	e8 5b 01 00 00       	call   8001c9 <exit>
+
+0080006e <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80006e:	55                   	push   %ebp
+  80006f:	89 e5                	mov    %esp,%ebp
+  800071:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800074:	8d 45 14             	lea    0x14(%ebp),%eax
+  800077:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007a:	83 ec 04             	sub    $0x4,%esp
+  80007d:	ff 75 0c             	pushl  0xc(%ebp)
+  800080:	ff 75 08             	pushl  0x8(%ebp)
+  800083:	68 dc 0f 80 00       	push   $0x800fdc
+  800088:	e8 74 02 00 00       	call   800301 <cprintf>
+  80008d:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800090:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800093:	83 ec 08             	sub    $0x8,%esp
+  800096:	50                   	push   %eax
+  800097:	ff 75 10             	pushl  0x10(%ebp)
+  80009a:	e8 39 02 00 00       	call   8002d8 <vcprintf>
+  80009f:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  8000a2:	83 ec 0c             	sub    $0xc,%esp
+  8000a5:	68 da 0f 80 00       	push   $0x800fda
+  8000aa:	e8 52 02 00 00       	call   800301 <cprintf>
+  8000af:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8000b2:	90                   	nop
+  8000b3:	c9                   	leave  
+  8000b4:	c3                   	ret    
+
+008000b5 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b5:	55                   	push   %ebp
+  8000b6:	89 e5                	mov    %esp,%ebp
+  8000b8:	57                   	push   %edi
+  8000b9:	56                   	push   %esi
+  8000ba:	53                   	push   %ebx
+  8000bb:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000be:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cb:	eb 16                	jmp    8000e3 <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8000cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d0:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d3:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d6:	8b 10                	mov    (%eax),%edx
+  8000d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000db:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000df:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8000e3:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e7:	7e e4                	jle    8000cd <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000e9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ec:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000ef:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f2:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f5:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8000f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fb:	cd 80                	int    $0x80
+  8000fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  800100:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800103:	83 c4 20             	add    $0x20,%esp
+  800106:	5b                   	pop    %ebx
+  800107:	5e                   	pop    %esi
+  800108:	5f                   	pop    %edi
+  800109:	5d                   	pop    %ebp
+  80010a:	c3                   	ret    
+
+0080010b <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010b:	55                   	push   %ebp
+  80010c:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_exit, error_code);
+  80010e:	ff 75 08             	pushl  0x8(%ebp)
+  800111:	6a 01                	push   $0x1
+  800113:	e8 9d ff ff ff       	call   8000b5 <syscall>
+  800118:	83 c4 08             	add    $0x8,%esp
+}
+  80011b:	c9                   	leave  
+  80011c:	c3                   	ret    
+
+0080011d <sys_fork>:
+
+int
+sys_fork(void) {
+  80011d:	55                   	push   %ebp
+  80011e:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_fork);
+  800120:	6a 02                	push   $0x2
+  800122:	e8 8e ff ff ff       	call   8000b5 <syscall>
+  800127:	83 c4 04             	add    $0x4,%esp
+}
+  80012a:	c9                   	leave  
+  80012b:	c3                   	ret    
+
+0080012c <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80012c:	55                   	push   %ebp
+  80012d:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_wait, pid, store);
+  80012f:	ff 75 0c             	pushl  0xc(%ebp)
+  800132:	ff 75 08             	pushl  0x8(%ebp)
+  800135:	6a 03                	push   $0x3
+  800137:	e8 79 ff ff ff       	call   8000b5 <syscall>
+  80013c:	83 c4 0c             	add    $0xc,%esp
+}
+  80013f:	c9                   	leave  
+  800140:	c3                   	ret    
+
+00800141 <sys_yield>:
+
+int
+sys_yield(void) {
+  800141:	55                   	push   %ebp
+  800142:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_yield);
+  800144:	6a 0a                	push   $0xa
+  800146:	e8 6a ff ff ff       	call   8000b5 <syscall>
+  80014b:	83 c4 04             	add    $0x4,%esp
+}
+  80014e:	c9                   	leave  
+  80014f:	c3                   	ret    
+
+00800150 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800150:	55                   	push   %ebp
+  800151:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_kill, pid);
+  800153:	ff 75 08             	pushl  0x8(%ebp)
+  800156:	6a 0c                	push   $0xc
+  800158:	e8 58 ff ff ff       	call   8000b5 <syscall>
+  80015d:	83 c4 08             	add    $0x8,%esp
+}
+  800160:	c9                   	leave  
+  800161:	c3                   	ret    
+
+00800162 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800162:	55                   	push   %ebp
+  800163:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_getpid);
+  800165:	6a 12                	push   $0x12
+  800167:	e8 49 ff ff ff       	call   8000b5 <syscall>
+  80016c:	83 c4 04             	add    $0x4,%esp
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_putc, c);
+  800174:	ff 75 08             	pushl  0x8(%ebp)
+  800177:	6a 1e                	push   $0x1e
+  800179:	e8 37 ff ff ff       	call   8000b5 <syscall>
+  80017e:	83 c4 08             	add    $0x8,%esp
+}
+  800181:	c9                   	leave  
+  800182:	c3                   	ret    
+
+00800183 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800183:	55                   	push   %ebp
+  800184:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_pgdir);
+  800186:	6a 1f                	push   $0x1f
+  800188:	e8 28 ff ff ff       	call   8000b5 <syscall>
+  80018d:	83 c4 04             	add    $0x4,%esp
+}
+  800190:	c9                   	leave  
+  800191:	c3                   	ret    
+
+00800192 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  800192:	55                   	push   %ebp
+  800193:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_gettime);
+  800195:	6a 11                	push   $0x11
+  800197:	e8 19 ff ff ff       	call   8000b5 <syscall>
+  80019c:	83 c4 04             	add    $0x4,%esp
+}
+  80019f:	c9                   	leave  
+  8001a0:	c3                   	ret    
+
+008001a1 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001a1:	55                   	push   %ebp
+  8001a2:	89 e5                	mov    %esp,%ebp
+    syscall(SYS_lab6_set_priority, priority);
+  8001a4:	ff 75 08             	pushl  0x8(%ebp)
+  8001a7:	68 ff 00 00 00       	push   $0xff
+  8001ac:	e8 04 ff ff ff       	call   8000b5 <syscall>
+  8001b1:	83 c4 08             	add    $0x8,%esp
+}
+  8001b4:	90                   	nop
+  8001b5:	c9                   	leave  
+  8001b6:	c3                   	ret    
+
+008001b7 <sys_sleep>:
+
+int
+sys_sleep(unsigned int time) {
+  8001b7:	55                   	push   %ebp
+  8001b8:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_sleep, time);
+  8001ba:	ff 75 08             	pushl  0x8(%ebp)
+  8001bd:	6a 0b                	push   $0xb
+  8001bf:	e8 f1 fe ff ff       	call   8000b5 <syscall>
+  8001c4:	83 c4 08             	add    $0x8,%esp
+}
+  8001c7:	c9                   	leave  
+  8001c8:	c3                   	ret    
+
+008001c9 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001c9:	55                   	push   %ebp
+  8001ca:	89 e5                	mov    %esp,%ebp
+  8001cc:	83 ec 08             	sub    $0x8,%esp
+    sys_exit(error_code);
+  8001cf:	83 ec 0c             	sub    $0xc,%esp
+  8001d2:	ff 75 08             	pushl  0x8(%ebp)
+  8001d5:	e8 31 ff ff ff       	call   80010b <sys_exit>
+  8001da:	83 c4 10             	add    $0x10,%esp
+    cprintf("BUG: exit failed.\n");
+  8001dd:	83 ec 0c             	sub    $0xc,%esp
+  8001e0:	68 f8 0f 80 00       	push   $0x800ff8
+  8001e5:	e8 17 01 00 00       	call   800301 <cprintf>
+  8001ea:	83 c4 10             	add    $0x10,%esp
+    while (1);
+  8001ed:	eb fe                	jmp    8001ed <exit+0x24>
+
+008001ef <fork>:
+}
+
+int
+fork(void) {
+  8001ef:	55                   	push   %ebp
+  8001f0:	89 e5                	mov    %esp,%ebp
+  8001f2:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8001f5:	e8 23 ff ff ff       	call   80011d <sys_fork>
+}
+  8001fa:	c9                   	leave  
+  8001fb:	c3                   	ret    
+
+008001fc <wait>:
+
+int
+wait(void) {
+  8001fc:	55                   	push   %ebp
+  8001fd:	89 e5                	mov    %esp,%ebp
+  8001ff:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(0, NULL);
+  800202:	83 ec 08             	sub    $0x8,%esp
+  800205:	6a 00                	push   $0x0
+  800207:	6a 00                	push   $0x0
+  800209:	e8 1e ff ff ff       	call   80012c <sys_wait>
+  80020e:	83 c4 10             	add    $0x10,%esp
+}
+  800211:	c9                   	leave  
+  800212:	c3                   	ret    
+
+00800213 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800213:	55                   	push   %ebp
+  800214:	89 e5                	mov    %esp,%ebp
+  800216:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(pid, store);
+  800219:	83 ec 08             	sub    $0x8,%esp
+  80021c:	ff 75 0c             	pushl  0xc(%ebp)
+  80021f:	ff 75 08             	pushl  0x8(%ebp)
+  800222:	e8 05 ff ff ff       	call   80012c <sys_wait>
+  800227:	83 c4 10             	add    $0x10,%esp
+}
+  80022a:	c9                   	leave  
+  80022b:	c3                   	ret    
+
+0080022c <yield>:
+
+void
+yield(void) {
+  80022c:	55                   	push   %ebp
+  80022d:	89 e5                	mov    %esp,%ebp
+  80022f:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800232:	e8 0a ff ff ff       	call   800141 <sys_yield>
+}
+  800237:	90                   	nop
+  800238:	c9                   	leave  
+  800239:	c3                   	ret    
+
+0080023a <kill>:
+
+int
+kill(int pid) {
+  80023a:	55                   	push   %ebp
+  80023b:	89 e5                	mov    %esp,%ebp
+  80023d:	83 ec 08             	sub    $0x8,%esp
+    return sys_kill(pid);
+  800240:	83 ec 0c             	sub    $0xc,%esp
+  800243:	ff 75 08             	pushl  0x8(%ebp)
+  800246:	e8 05 ff ff ff       	call   800150 <sys_kill>
+  80024b:	83 c4 10             	add    $0x10,%esp
+}
+  80024e:	c9                   	leave  
+  80024f:	c3                   	ret    
+
+00800250 <getpid>:
+
+int
+getpid(void) {
+  800250:	55                   	push   %ebp
+  800251:	89 e5                	mov    %esp,%ebp
+  800253:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800256:	e8 07 ff ff ff       	call   800162 <sys_getpid>
+}
+  80025b:	c9                   	leave  
+  80025c:	c3                   	ret    
+
+0080025d <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80025d:	55                   	push   %ebp
+  80025e:	89 e5                	mov    %esp,%ebp
+  800260:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800263:	e8 1b ff ff ff       	call   800183 <sys_pgdir>
+}
+  800268:	90                   	nop
+  800269:	c9                   	leave  
+  80026a:	c3                   	ret    
+
+0080026b <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80026b:	55                   	push   %ebp
+  80026c:	89 e5                	mov    %esp,%ebp
+  80026e:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800271:	e8 1c ff ff ff       	call   800192 <sys_gettime>
+}
+  800276:	c9                   	leave  
+  800277:	c3                   	ret    
+
+00800278 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800278:	55                   	push   %ebp
+  800279:	89 e5                	mov    %esp,%ebp
+  80027b:	83 ec 08             	sub    $0x8,%esp
+    sys_lab6_set_priority(priority);
+  80027e:	83 ec 0c             	sub    $0xc,%esp
+  800281:	ff 75 08             	pushl  0x8(%ebp)
+  800284:	e8 18 ff ff ff       	call   8001a1 <sys_lab6_set_priority>
+  800289:	83 c4 10             	add    $0x10,%esp
+}
+  80028c:	90                   	nop
+  80028d:	c9                   	leave  
+  80028e:	c3                   	ret    
+
+0080028f <sleep>:
+
+int
+sleep(unsigned int time) {
+  80028f:	55                   	push   %ebp
+  800290:	89 e5                	mov    %esp,%ebp
+  800292:	83 ec 08             	sub    $0x8,%esp
+    return sys_sleep(time);
+  800295:	83 ec 0c             	sub    $0xc,%esp
+  800298:	ff 75 08             	pushl  0x8(%ebp)
+  80029b:	e8 17 ff ff ff       	call   8001b7 <sys_sleep>
+  8002a0:	83 c4 10             	add    $0x10,%esp
+}
+  8002a3:	c9                   	leave  
+  8002a4:	c3                   	ret    
+
+008002a5 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  8002a5:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  8002aa:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  8002ad:	e8 c3 00 00 00       	call   800375 <umain>
+1:  jmp 1b
+  8002b2:	eb fe                	jmp    8002b2 <_start+0xd>
+
+008002b4 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8002b4:	55                   	push   %ebp
+  8002b5:	89 e5                	mov    %esp,%ebp
+  8002b7:	83 ec 08             	sub    $0x8,%esp
+    sys_putc(c);
+  8002ba:	83 ec 0c             	sub    $0xc,%esp
+  8002bd:	ff 75 08             	pushl  0x8(%ebp)
+  8002c0:	e8 ac fe ff ff       	call   800171 <sys_putc>
+  8002c5:	83 c4 10             	add    $0x10,%esp
+    (*cnt) ++;
+  8002c8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002cb:	8b 00                	mov    (%eax),%eax
+  8002cd:	8d 50 01             	lea    0x1(%eax),%edx
+  8002d0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002d3:	89 10                	mov    %edx,(%eax)
+}
+  8002d5:	90                   	nop
+  8002d6:	c9                   	leave  
+  8002d7:	c3                   	ret    
+
+008002d8 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002d8:	55                   	push   %ebp
+  8002d9:	89 e5                	mov    %esp,%ebp
+  8002db:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  8002de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002e5:	ff 75 0c             	pushl  0xc(%ebp)
+  8002e8:	ff 75 08             	pushl  0x8(%ebp)
+  8002eb:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  8002ee:	50                   	push   %eax
+  8002ef:	68 b4 02 80 00       	push   $0x8002b4
+  8002f4:	e8 fc 06 00 00       	call   8009f5 <vprintfmt>
+  8002f9:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  8002fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002ff:	c9                   	leave  
+  800300:	c3                   	ret    
+
+00800301 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800301:	55                   	push   %ebp
+  800302:	89 e5                	mov    %esp,%ebp
+  800304:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800307:	8d 45 0c             	lea    0xc(%ebp),%eax
+  80030a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  80030d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800310:	83 ec 08             	sub    $0x8,%esp
+  800313:	50                   	push   %eax
+  800314:	ff 75 08             	pushl  0x8(%ebp)
+  800317:	e8 bc ff ff ff       	call   8002d8 <vcprintf>
+  80031c:	83 c4 10             	add    $0x10,%esp
+  80031f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800322:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800325:	c9                   	leave  
+  800326:	c3                   	ret    
+
+00800327 <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  800327:	55                   	push   %ebp
+  800328:	89 e5                	mov    %esp,%ebp
+  80032a:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  80032d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  800334:	eb 14                	jmp    80034a <cputs+0x23>
+        cputch(c, &cnt);
+  800336:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  80033a:	83 ec 08             	sub    $0x8,%esp
+  80033d:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800340:	52                   	push   %edx
+  800341:	50                   	push   %eax
+  800342:	e8 6d ff ff ff       	call   8002b4 <cputch>
+  800347:	83 c4 10             	add    $0x10,%esp
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  80034a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80034d:	8d 50 01             	lea    0x1(%eax),%edx
+  800350:	89 55 08             	mov    %edx,0x8(%ebp)
+  800353:	0f b6 00             	movzbl (%eax),%eax
+  800356:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800359:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  80035d:	75 d7                	jne    800336 <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  80035f:	83 ec 08             	sub    $0x8,%esp
+  800362:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800365:	50                   	push   %eax
+  800366:	6a 0a                	push   $0xa
+  800368:	e8 47 ff ff ff       	call   8002b4 <cputch>
+  80036d:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  800370:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  800373:	c9                   	leave  
+  800374:	c3                   	ret    
+
+00800375 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800375:	55                   	push   %ebp
+  800376:	89 e5                	mov    %esp,%ebp
+  800378:	83 ec 18             	sub    $0x18,%esp
+    int ret = main();
+  80037b:	e8 d3 0b 00 00       	call   800f53 <main>
+  800380:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  800383:	83 ec 0c             	sub    $0xc,%esp
+  800386:	ff 75 f4             	pushl  -0xc(%ebp)
+  800389:	e8 3b fe ff ff       	call   8001c9 <exit>
+
+0080038e <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  80038e:	55                   	push   %ebp
+  80038f:	89 e5                	mov    %esp,%ebp
+  800391:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800394:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  80039b:	eb 04                	jmp    8003a1 <strlen+0x13>
+        cnt ++;
+  80039d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  8003a1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003a4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003a7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003aa:	0f b6 00             	movzbl (%eax),%eax
+  8003ad:	84 c0                	test   %al,%al
+  8003af:	75 ec                	jne    80039d <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003b4:	c9                   	leave  
+  8003b5:	c3                   	ret    
+
+008003b6 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  8003b6:	55                   	push   %ebp
+  8003b7:	89 e5                	mov    %esp,%ebp
+  8003b9:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003bc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003c3:	eb 04                	jmp    8003c9 <strnlen+0x13>
+        cnt ++;
+  8003c5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  8003c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003cc:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003cf:	73 10                	jae    8003e1 <strnlen+0x2b>
+  8003d1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003d4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003d7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003da:	0f b6 00             	movzbl (%eax),%eax
+  8003dd:	84 c0                	test   %al,%al
+  8003df:	75 e4                	jne    8003c5 <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003e4:	c9                   	leave  
+  8003e5:	c3                   	ret    
+
+008003e6 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  8003e6:	55                   	push   %ebp
+  8003e7:	89 e5                	mov    %esp,%ebp
+  8003e9:	57                   	push   %edi
+  8003ea:	56                   	push   %esi
+  8003eb:	83 ec 20             	sub    $0x20,%esp
+  8003ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003f4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8003f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  8003fa:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800400:	89 d1                	mov    %edx,%ecx
+  800402:	89 c2                	mov    %eax,%edx
+  800404:	89 ce                	mov    %ecx,%esi
+  800406:	89 d7                	mov    %edx,%edi
+  800408:	ac                   	lods   %ds:(%esi),%al
+  800409:	aa                   	stos   %al,%es:(%edi)
+  80040a:	84 c0                	test   %al,%al
+  80040c:	75 fa                	jne    800408 <strcpy+0x22>
+  80040e:	89 fa                	mov    %edi,%edx
+  800410:	89 f1                	mov    %esi,%ecx
+  800412:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800415:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800418:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  80041b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  80041e:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  80041f:	83 c4 20             	add    $0x20,%esp
+  800422:	5e                   	pop    %esi
+  800423:	5f                   	pop    %edi
+  800424:	5d                   	pop    %ebp
+  800425:	c3                   	ret    
+
+00800426 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800426:	55                   	push   %ebp
+  800427:	89 e5                	mov    %esp,%ebp
+  800429:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  80042c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80042f:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800432:	eb 21                	jmp    800455 <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800434:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800437:	0f b6 10             	movzbl (%eax),%edx
+  80043a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80043d:	88 10                	mov    %dl,(%eax)
+  80043f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800442:	0f b6 00             	movzbl (%eax),%eax
+  800445:	84 c0                	test   %al,%al
+  800447:	74 04                	je     80044d <strncpy+0x27>
+            src ++;
+  800449:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  80044d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800451:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800455:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800459:	75 d9                	jne    800434 <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  80045b:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  80045e:	c9                   	leave  
+  80045f:	c3                   	ret    
+
+00800460 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800460:	55                   	push   %ebp
+  800461:	89 e5                	mov    %esp,%ebp
+  800463:	57                   	push   %edi
+  800464:	56                   	push   %esi
+  800465:	83 ec 20             	sub    $0x20,%esp
+  800468:	8b 45 08             	mov    0x8(%ebp),%eax
+  80046b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80046e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800471:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800474:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800477:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80047a:	89 d1                	mov    %edx,%ecx
+  80047c:	89 c2                	mov    %eax,%edx
+  80047e:	89 ce                	mov    %ecx,%esi
+  800480:	89 d7                	mov    %edx,%edi
+  800482:	ac                   	lods   %ds:(%esi),%al
+  800483:	ae                   	scas   %es:(%edi),%al
+  800484:	75 08                	jne    80048e <strcmp+0x2e>
+  800486:	84 c0                	test   %al,%al
+  800488:	75 f8                	jne    800482 <strcmp+0x22>
+  80048a:	31 c0                	xor    %eax,%eax
+  80048c:	eb 04                	jmp    800492 <strcmp+0x32>
+  80048e:	19 c0                	sbb    %eax,%eax
+  800490:	0c 01                	or     $0x1,%al
+  800492:	89 fa                	mov    %edi,%edx
+  800494:	89 f1                	mov    %esi,%ecx
+  800496:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800499:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  80049c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  80049f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  8004a2:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  8004a3:	83 c4 20             	add    $0x20,%esp
+  8004a6:	5e                   	pop    %esi
+  8004a7:	5f                   	pop    %edi
+  8004a8:	5d                   	pop    %ebp
+  8004a9:	c3                   	ret    
+
+008004aa <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  8004aa:	55                   	push   %ebp
+  8004ab:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004ad:	eb 0c                	jmp    8004bb <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  8004af:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  8004b3:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8004b7:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004bb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004bf:	74 1a                	je     8004db <strncmp+0x31>
+  8004c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004c4:	0f b6 00             	movzbl (%eax),%eax
+  8004c7:	84 c0                	test   %al,%al
+  8004c9:	74 10                	je     8004db <strncmp+0x31>
+  8004cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004ce:	0f b6 10             	movzbl (%eax),%edx
+  8004d1:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004d4:	0f b6 00             	movzbl (%eax),%eax
+  8004d7:	38 c2                	cmp    %al,%dl
+  8004d9:	74 d4                	je     8004af <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004db:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004df:	74 18                	je     8004f9 <strncmp+0x4f>
+  8004e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e4:	0f b6 00             	movzbl (%eax),%eax
+  8004e7:	0f b6 d0             	movzbl %al,%edx
+  8004ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ed:	0f b6 00             	movzbl (%eax),%eax
+  8004f0:	0f b6 c0             	movzbl %al,%eax
+  8004f3:	29 c2                	sub    %eax,%edx
+  8004f5:	89 d0                	mov    %edx,%eax
+  8004f7:	eb 05                	jmp    8004fe <strncmp+0x54>
+  8004f9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8004fe:	5d                   	pop    %ebp
+  8004ff:	c3                   	ret    
+
+00800500 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800500:	55                   	push   %ebp
+  800501:	89 e5                	mov    %esp,%ebp
+  800503:	83 ec 04             	sub    $0x4,%esp
+  800506:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800509:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  80050c:	eb 14                	jmp    800522 <strchr+0x22>
+        if (*s == c) {
+  80050e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800511:	0f b6 00             	movzbl (%eax),%eax
+  800514:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800517:	75 05                	jne    80051e <strchr+0x1e>
+            return (char *)s;
+  800519:	8b 45 08             	mov    0x8(%ebp),%eax
+  80051c:	eb 13                	jmp    800531 <strchr+0x31>
+        }
+        s ++;
+  80051e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800522:	8b 45 08             	mov    0x8(%ebp),%eax
+  800525:	0f b6 00             	movzbl (%eax),%eax
+  800528:	84 c0                	test   %al,%al
+  80052a:	75 e2                	jne    80050e <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  80052c:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800531:	c9                   	leave  
+  800532:	c3                   	ret    
+
+00800533 <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800533:	55                   	push   %ebp
+  800534:	89 e5                	mov    %esp,%ebp
+  800536:	83 ec 04             	sub    $0x4,%esp
+  800539:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80053c:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  80053f:	eb 0f                	jmp    800550 <strfind+0x1d>
+        if (*s == c) {
+  800541:	8b 45 08             	mov    0x8(%ebp),%eax
+  800544:	0f b6 00             	movzbl (%eax),%eax
+  800547:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  80054a:	74 10                	je     80055c <strfind+0x29>
+            break;
+        }
+        s ++;
+  80054c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800550:	8b 45 08             	mov    0x8(%ebp),%eax
+  800553:	0f b6 00             	movzbl (%eax),%eax
+  800556:	84 c0                	test   %al,%al
+  800558:	75 e7                	jne    800541 <strfind+0xe>
+  80055a:	eb 01                	jmp    80055d <strfind+0x2a>
+        if (*s == c) {
+            break;
+  80055c:	90                   	nop
+        }
+        s ++;
+    }
+    return (char *)s;
+  80055d:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800560:	c9                   	leave  
+  800561:	c3                   	ret    
+
+00800562 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800562:	55                   	push   %ebp
+  800563:	89 e5                	mov    %esp,%ebp
+  800565:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800568:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  80056f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800576:	eb 04                	jmp    80057c <strtol+0x1a>
+        s ++;
+  800578:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80057c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80057f:	0f b6 00             	movzbl (%eax),%eax
+  800582:	3c 20                	cmp    $0x20,%al
+  800584:	74 f2                	je     800578 <strtol+0x16>
+  800586:	8b 45 08             	mov    0x8(%ebp),%eax
+  800589:	0f b6 00             	movzbl (%eax),%eax
+  80058c:	3c 09                	cmp    $0x9,%al
+  80058e:	74 e8                	je     800578 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800590:	8b 45 08             	mov    0x8(%ebp),%eax
+  800593:	0f b6 00             	movzbl (%eax),%eax
+  800596:	3c 2b                	cmp    $0x2b,%al
+  800598:	75 06                	jne    8005a0 <strtol+0x3e>
+        s ++;
+  80059a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  80059e:	eb 15                	jmp    8005b5 <strtol+0x53>
+    }
+    else if (*s == '-') {
+  8005a0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a3:	0f b6 00             	movzbl (%eax),%eax
+  8005a6:	3c 2d                	cmp    $0x2d,%al
+  8005a8:	75 0b                	jne    8005b5 <strtol+0x53>
+        s ++, neg = 1;
+  8005aa:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005ae:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  8005b5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005b9:	74 06                	je     8005c1 <strtol+0x5f>
+  8005bb:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  8005bf:	75 24                	jne    8005e5 <strtol+0x83>
+  8005c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005c4:	0f b6 00             	movzbl (%eax),%eax
+  8005c7:	3c 30                	cmp    $0x30,%al
+  8005c9:	75 1a                	jne    8005e5 <strtol+0x83>
+  8005cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ce:	83 c0 01             	add    $0x1,%eax
+  8005d1:	0f b6 00             	movzbl (%eax),%eax
+  8005d4:	3c 78                	cmp    $0x78,%al
+  8005d6:	75 0d                	jne    8005e5 <strtol+0x83>
+        s += 2, base = 16;
+  8005d8:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005dc:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005e3:	eb 2a                	jmp    80060f <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005e5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005e9:	75 17                	jne    800602 <strtol+0xa0>
+  8005eb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ee:	0f b6 00             	movzbl (%eax),%eax
+  8005f1:	3c 30                	cmp    $0x30,%al
+  8005f3:	75 0d                	jne    800602 <strtol+0xa0>
+        s ++, base = 8;
+  8005f5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005f9:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800600:	eb 0d                	jmp    80060f <strtol+0xad>
+    }
+    else if (base == 0) {
+  800602:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800606:	75 07                	jne    80060f <strtol+0xad>
+        base = 10;
+  800608:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  80060f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800612:	0f b6 00             	movzbl (%eax),%eax
+  800615:	3c 2f                	cmp    $0x2f,%al
+  800617:	7e 1b                	jle    800634 <strtol+0xd2>
+  800619:	8b 45 08             	mov    0x8(%ebp),%eax
+  80061c:	0f b6 00             	movzbl (%eax),%eax
+  80061f:	3c 39                	cmp    $0x39,%al
+  800621:	7f 11                	jg     800634 <strtol+0xd2>
+            dig = *s - '0';
+  800623:	8b 45 08             	mov    0x8(%ebp),%eax
+  800626:	0f b6 00             	movzbl (%eax),%eax
+  800629:	0f be c0             	movsbl %al,%eax
+  80062c:	83 e8 30             	sub    $0x30,%eax
+  80062f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800632:	eb 48                	jmp    80067c <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800634:	8b 45 08             	mov    0x8(%ebp),%eax
+  800637:	0f b6 00             	movzbl (%eax),%eax
+  80063a:	3c 60                	cmp    $0x60,%al
+  80063c:	7e 1b                	jle    800659 <strtol+0xf7>
+  80063e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800641:	0f b6 00             	movzbl (%eax),%eax
+  800644:	3c 7a                	cmp    $0x7a,%al
+  800646:	7f 11                	jg     800659 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800648:	8b 45 08             	mov    0x8(%ebp),%eax
+  80064b:	0f b6 00             	movzbl (%eax),%eax
+  80064e:	0f be c0             	movsbl %al,%eax
+  800651:	83 e8 57             	sub    $0x57,%eax
+  800654:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800657:	eb 23                	jmp    80067c <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800659:	8b 45 08             	mov    0x8(%ebp),%eax
+  80065c:	0f b6 00             	movzbl (%eax),%eax
+  80065f:	3c 40                	cmp    $0x40,%al
+  800661:	7e 3c                	jle    80069f <strtol+0x13d>
+  800663:	8b 45 08             	mov    0x8(%ebp),%eax
+  800666:	0f b6 00             	movzbl (%eax),%eax
+  800669:	3c 5a                	cmp    $0x5a,%al
+  80066b:	7f 32                	jg     80069f <strtol+0x13d>
+            dig = *s - 'A' + 10;
+  80066d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800670:	0f b6 00             	movzbl (%eax),%eax
+  800673:	0f be c0             	movsbl %al,%eax
+  800676:	83 e8 37             	sub    $0x37,%eax
+  800679:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  80067c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80067f:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800682:	7d 1a                	jge    80069e <strtol+0x13c>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  800684:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800688:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80068b:	0f af 45 10          	imul   0x10(%ebp),%eax
+  80068f:	89 c2                	mov    %eax,%edx
+  800691:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800694:	01 d0                	add    %edx,%eax
+  800696:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800699:	e9 71 ff ff ff       	jmp    80060f <strtol+0xad>
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+            break;
+  80069e:	90                   	nop
+        }
+        s ++, val = (val * base) + dig;
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  80069f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8006a3:	74 08                	je     8006ad <strtol+0x14b>
+        *endptr = (char *) s;
+  8006a5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006a8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006ab:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  8006ad:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  8006b1:	74 07                	je     8006ba <strtol+0x158>
+  8006b3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006b6:	f7 d8                	neg    %eax
+  8006b8:	eb 03                	jmp    8006bd <strtol+0x15b>
+  8006ba:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  8006bd:	c9                   	leave  
+  8006be:	c3                   	ret    
+
+008006bf <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  8006bf:	55                   	push   %ebp
+  8006c0:	89 e5                	mov    %esp,%ebp
+  8006c2:	57                   	push   %edi
+  8006c3:	83 ec 24             	sub    $0x24,%esp
+  8006c6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006c9:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006cc:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006d0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006d3:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006d6:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006d9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006df:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006e2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006e6:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006e9:	89 d7                	mov    %edx,%edi
+  8006eb:	f3 aa                	rep stos %al,%es:(%edi)
+  8006ed:	89 fa                	mov    %edi,%edx
+  8006ef:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8006f2:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  8006f5:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006f8:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  8006f9:	83 c4 24             	add    $0x24,%esp
+  8006fc:	5f                   	pop    %edi
+  8006fd:	5d                   	pop    %ebp
+  8006fe:	c3                   	ret    
+
+008006ff <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  8006ff:	55                   	push   %ebp
+  800700:	89 e5                	mov    %esp,%ebp
+  800702:	57                   	push   %edi
+  800703:	56                   	push   %esi
+  800704:	53                   	push   %ebx
+  800705:	83 ec 30             	sub    $0x30,%esp
+  800708:	8b 45 08             	mov    0x8(%ebp),%eax
+  80070b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80070e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800711:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800714:	8b 45 10             	mov    0x10(%ebp),%eax
+  800717:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  80071a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80071d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800720:	73 42                	jae    800764 <memmove+0x65>
+  800722:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800725:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800728:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80072b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80072e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800731:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800734:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800737:	c1 e8 02             	shr    $0x2,%eax
+  80073a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  80073c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  80073f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800742:	89 d7                	mov    %edx,%edi
+  800744:	89 c6                	mov    %eax,%esi
+  800746:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800748:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  80074b:	83 e1 03             	and    $0x3,%ecx
+  80074e:	74 02                	je     800752 <memmove+0x53>
+  800750:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800752:	89 f0                	mov    %esi,%eax
+  800754:	89 fa                	mov    %edi,%edx
+  800756:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800759:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  80075c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  80075f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  800762:	eb 36                	jmp    80079a <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800764:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800767:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80076a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80076d:	01 c2                	add    %eax,%edx
+  80076f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800772:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800775:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800778:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  80077b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80077e:	89 c1                	mov    %eax,%ecx
+  800780:	89 d8                	mov    %ebx,%eax
+  800782:	89 d6                	mov    %edx,%esi
+  800784:	89 c7                	mov    %eax,%edi
+  800786:	fd                   	std    
+  800787:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800789:	fc                   	cld    
+  80078a:	89 f8                	mov    %edi,%eax
+  80078c:	89 f2                	mov    %esi,%edx
+  80078e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800791:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800794:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800797:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  80079a:	83 c4 30             	add    $0x30,%esp
+  80079d:	5b                   	pop    %ebx
+  80079e:	5e                   	pop    %esi
+  80079f:	5f                   	pop    %edi
+  8007a0:	5d                   	pop    %ebp
+  8007a1:	c3                   	ret    
+
+008007a2 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  8007a2:	55                   	push   %ebp
+  8007a3:	89 e5                	mov    %esp,%ebp
+  8007a5:	57                   	push   %edi
+  8007a6:	56                   	push   %esi
+  8007a7:	83 ec 20             	sub    $0x20,%esp
+  8007aa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8007b0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007b6:	8b 45 10             	mov    0x10(%ebp),%eax
+  8007b9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  8007bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8007bf:	c1 e8 02             	shr    $0x2,%eax
+  8007c2:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  8007c4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007ca:	89 d7                	mov    %edx,%edi
+  8007cc:	89 c6                	mov    %eax,%esi
+  8007ce:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007d0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007d3:	83 e1 03             	and    $0x3,%ecx
+  8007d6:	74 02                	je     8007da <memcpy+0x38>
+  8007d8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007da:	89 f0                	mov    %esi,%eax
+  8007dc:	89 fa                	mov    %edi,%edx
+  8007de:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007e1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007e4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  8007e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007ea:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007eb:	83 c4 20             	add    $0x20,%esp
+  8007ee:	5e                   	pop    %esi
+  8007ef:	5f                   	pop    %edi
+  8007f0:	5d                   	pop    %ebp
+  8007f1:	c3                   	ret    
+
+008007f2 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  8007f2:	55                   	push   %ebp
+  8007f3:	89 e5                	mov    %esp,%ebp
+  8007f5:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  8007f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007fb:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  8007fe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800801:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800804:	eb 30                	jmp    800836 <memcmp+0x44>
+        if (*s1 != *s2) {
+  800806:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800809:	0f b6 10             	movzbl (%eax),%edx
+  80080c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80080f:	0f b6 00             	movzbl (%eax),%eax
+  800812:	38 c2                	cmp    %al,%dl
+  800814:	74 18                	je     80082e <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800816:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800819:	0f b6 00             	movzbl (%eax),%eax
+  80081c:	0f b6 d0             	movzbl %al,%edx
+  80081f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800822:	0f b6 00             	movzbl (%eax),%eax
+  800825:	0f b6 c0             	movzbl %al,%eax
+  800828:	29 c2                	sub    %eax,%edx
+  80082a:	89 d0                	mov    %edx,%eax
+  80082c:	eb 1a                	jmp    800848 <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  80082e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800832:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800836:	8b 45 10             	mov    0x10(%ebp),%eax
+  800839:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80083c:	89 55 10             	mov    %edx,0x10(%ebp)
+  80083f:	85 c0                	test   %eax,%eax
+  800841:	75 c3                	jne    800806 <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800843:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800848:	c9                   	leave  
+  800849:	c3                   	ret    
+
+0080084a <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  80084a:	55                   	push   %ebp
+  80084b:	89 e5                	mov    %esp,%ebp
+  80084d:	83 ec 38             	sub    $0x38,%esp
+  800850:	8b 45 10             	mov    0x10(%ebp),%eax
+  800853:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800856:	8b 45 14             	mov    0x14(%ebp),%eax
+  800859:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80085c:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  80085f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800862:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800865:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800868:	8b 45 18             	mov    0x18(%ebp),%eax
+  80086b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  80086e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800871:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800874:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800877:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  80087a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80087d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800880:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800884:	74 1c                	je     8008a2 <printnum+0x58>
+  800886:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800889:	ba 00 00 00 00       	mov    $0x0,%edx
+  80088e:	f7 75 e4             	divl   -0x1c(%ebp)
+  800891:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800894:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800897:	ba 00 00 00 00       	mov    $0x0,%edx
+  80089c:	f7 75 e4             	divl   -0x1c(%ebp)
+  80089f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008a2:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008a8:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008ab:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8008ae:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8008b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008b4:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8008b7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8008ba:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8008bd:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8008c0:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8008c3:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008c6:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008cb:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008ce:	77 41                	ja     800911 <printnum+0xc7>
+  8008d0:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008d3:	72 05                	jb     8008da <printnum+0x90>
+  8008d5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  8008d8:	77 37                	ja     800911 <printnum+0xc7>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008da:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008dd:	83 e8 01             	sub    $0x1,%eax
+  8008e0:	83 ec 04             	sub    $0x4,%esp
+  8008e3:	ff 75 20             	pushl  0x20(%ebp)
+  8008e6:	50                   	push   %eax
+  8008e7:	ff 75 18             	pushl  0x18(%ebp)
+  8008ea:	ff 75 ec             	pushl  -0x14(%ebp)
+  8008ed:	ff 75 e8             	pushl  -0x18(%ebp)
+  8008f0:	ff 75 0c             	pushl  0xc(%ebp)
+  8008f3:	ff 75 08             	pushl  0x8(%ebp)
+  8008f6:	e8 4f ff ff ff       	call   80084a <printnum>
+  8008fb:	83 c4 20             	add    $0x20,%esp
+  8008fe:	eb 1b                	jmp    80091b <printnum+0xd1>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800900:	83 ec 08             	sub    $0x8,%esp
+  800903:	ff 75 0c             	pushl  0xc(%ebp)
+  800906:	ff 75 20             	pushl  0x20(%ebp)
+  800909:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090c:	ff d0                	call   *%eax
+  80090e:	83 c4 10             	add    $0x10,%esp
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  800911:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  800915:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  800919:	7f e5                	jg     800900 <printnum+0xb6>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  80091b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  80091e:	05 24 11 80 00       	add    $0x801124,%eax
+  800923:	0f b6 00             	movzbl (%eax),%eax
+  800926:	0f be c0             	movsbl %al,%eax
+  800929:	83 ec 08             	sub    $0x8,%esp
+  80092c:	ff 75 0c             	pushl  0xc(%ebp)
+  80092f:	50                   	push   %eax
+  800930:	8b 45 08             	mov    0x8(%ebp),%eax
+  800933:	ff d0                	call   *%eax
+  800935:	83 c4 10             	add    $0x10,%esp
+}
+  800938:	90                   	nop
+  800939:	c9                   	leave  
+  80093a:	c3                   	ret    
+
+0080093b <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  80093b:	55                   	push   %ebp
+  80093c:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  80093e:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800942:	7e 14                	jle    800958 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  800944:	8b 45 08             	mov    0x8(%ebp),%eax
+  800947:	8b 00                	mov    (%eax),%eax
+  800949:	8d 48 08             	lea    0x8(%eax),%ecx
+  80094c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80094f:	89 0a                	mov    %ecx,(%edx)
+  800951:	8b 50 04             	mov    0x4(%eax),%edx
+  800954:	8b 00                	mov    (%eax),%eax
+  800956:	eb 30                	jmp    800988 <getuint+0x4d>
+    }
+    else if (lflag) {
+  800958:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80095c:	74 16                	je     800974 <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  80095e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800961:	8b 00                	mov    (%eax),%eax
+  800963:	8d 48 04             	lea    0x4(%eax),%ecx
+  800966:	8b 55 08             	mov    0x8(%ebp),%edx
+  800969:	89 0a                	mov    %ecx,(%edx)
+  80096b:	8b 00                	mov    (%eax),%eax
+  80096d:	ba 00 00 00 00       	mov    $0x0,%edx
+  800972:	eb 14                	jmp    800988 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  800974:	8b 45 08             	mov    0x8(%ebp),%eax
+  800977:	8b 00                	mov    (%eax),%eax
+  800979:	8d 48 04             	lea    0x4(%eax),%ecx
+  80097c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80097f:	89 0a                	mov    %ecx,(%edx)
+  800981:	8b 00                	mov    (%eax),%eax
+  800983:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800988:	5d                   	pop    %ebp
+  800989:	c3                   	ret    
+
+0080098a <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  80098a:	55                   	push   %ebp
+  80098b:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  80098d:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800991:	7e 14                	jle    8009a7 <getint+0x1d>
+        return va_arg(*ap, long long);
+  800993:	8b 45 08             	mov    0x8(%ebp),%eax
+  800996:	8b 00                	mov    (%eax),%eax
+  800998:	8d 48 08             	lea    0x8(%eax),%ecx
+  80099b:	8b 55 08             	mov    0x8(%ebp),%edx
+  80099e:	89 0a                	mov    %ecx,(%edx)
+  8009a0:	8b 50 04             	mov    0x4(%eax),%edx
+  8009a3:	8b 00                	mov    (%eax),%eax
+  8009a5:	eb 28                	jmp    8009cf <getint+0x45>
+    }
+    else if (lflag) {
+  8009a7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8009ab:	74 12                	je     8009bf <getint+0x35>
+        return va_arg(*ap, long);
+  8009ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b0:	8b 00                	mov    (%eax),%eax
+  8009b2:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009b5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009b8:	89 0a                	mov    %ecx,(%edx)
+  8009ba:	8b 00                	mov    (%eax),%eax
+  8009bc:	99                   	cltd   
+  8009bd:	eb 10                	jmp    8009cf <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  8009bf:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009c2:	8b 00                	mov    (%eax),%eax
+  8009c4:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009c7:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009ca:	89 0a                	mov    %ecx,(%edx)
+  8009cc:	8b 00                	mov    (%eax),%eax
+  8009ce:	99                   	cltd   
+    }
+}
+  8009cf:	5d                   	pop    %ebp
+  8009d0:	c3                   	ret    
+
+008009d1 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009d1:	55                   	push   %ebp
+  8009d2:	89 e5                	mov    %esp,%ebp
+  8009d4:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009d7:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009da:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8009e0:	50                   	push   %eax
+  8009e1:	ff 75 10             	pushl  0x10(%ebp)
+  8009e4:	ff 75 0c             	pushl  0xc(%ebp)
+  8009e7:	ff 75 08             	pushl  0x8(%ebp)
+  8009ea:	e8 06 00 00 00       	call   8009f5 <vprintfmt>
+  8009ef:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8009f2:	90                   	nop
+  8009f3:	c9                   	leave  
+  8009f4:	c3                   	ret    
+
+008009f5 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8009f5:	55                   	push   %ebp
+  8009f6:	89 e5                	mov    %esp,%ebp
+  8009f8:	56                   	push   %esi
+  8009f9:	53                   	push   %ebx
+  8009fa:	83 ec 20             	sub    $0x20,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009fd:	eb 17                	jmp    800a16 <vprintfmt+0x21>
+            if (ch == '\0') {
+  8009ff:	85 db                	test   %ebx,%ebx
+  800a01:	0f 84 8e 03 00 00    	je     800d95 <vprintfmt+0x3a0>
+                return;
+            }
+            putch(ch, putdat);
+  800a07:	83 ec 08             	sub    $0x8,%esp
+  800a0a:	ff 75 0c             	pushl  0xc(%ebp)
+  800a0d:	53                   	push   %ebx
+  800a0e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a11:	ff d0                	call   *%eax
+  800a13:	83 c4 10             	add    $0x10,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a16:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a19:	8d 50 01             	lea    0x1(%eax),%edx
+  800a1c:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a1f:	0f b6 00             	movzbl (%eax),%eax
+  800a22:	0f b6 d8             	movzbl %al,%ebx
+  800a25:	83 fb 25             	cmp    $0x25,%ebx
+  800a28:	75 d5                	jne    8009ff <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a2a:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a2e:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a38:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a3b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a42:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a45:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a48:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a4b:	8d 50 01             	lea    0x1(%eax),%edx
+  800a4e:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a51:	0f b6 00             	movzbl (%eax),%eax
+  800a54:	0f b6 d8             	movzbl %al,%ebx
+  800a57:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a5a:	83 f8 55             	cmp    $0x55,%eax
+  800a5d:	0f 87 05 03 00 00    	ja     800d68 <vprintfmt+0x373>
+  800a63:	8b 04 85 48 11 80 00 	mov    0x801148(,%eax,4),%eax
+  800a6a:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a6c:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a70:	eb d6                	jmp    800a48 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a72:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800a76:	eb d0                	jmp    800a48 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a78:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800a7f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a82:	89 d0                	mov    %edx,%eax
+  800a84:	c1 e0 02             	shl    $0x2,%eax
+  800a87:	01 d0                	add    %edx,%eax
+  800a89:	01 c0                	add    %eax,%eax
+  800a8b:	01 d8                	add    %ebx,%eax
+  800a8d:	83 e8 30             	sub    $0x30,%eax
+  800a90:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800a93:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a96:	0f b6 00             	movzbl (%eax),%eax
+  800a99:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800a9c:	83 fb 2f             	cmp    $0x2f,%ebx
+  800a9f:	7e 39                	jle    800ada <vprintfmt+0xe5>
+  800aa1:	83 fb 39             	cmp    $0x39,%ebx
+  800aa4:	7f 34                	jg     800ada <vprintfmt+0xe5>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800aa6:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  800aaa:	eb d3                	jmp    800a7f <vprintfmt+0x8a>
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800aac:	8b 45 14             	mov    0x14(%ebp),%eax
+  800aaf:	8d 50 04             	lea    0x4(%eax),%edx
+  800ab2:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ab5:	8b 00                	mov    (%eax),%eax
+  800ab7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800aba:	eb 1f                	jmp    800adb <vprintfmt+0xe6>
+
+        case '.':
+            if (width < 0)
+  800abc:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ac0:	79 86                	jns    800a48 <vprintfmt+0x53>
+                width = 0;
+  800ac2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800ac9:	e9 7a ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800ace:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800ad5:	e9 6e ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+            goto process_precision;
+  800ada:	90                   	nop
+        case '#':
+            altflag = 1;
+            goto reswitch;
+
+        process_precision:
+            if (width < 0)
+  800adb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800adf:	0f 89 63 ff ff ff    	jns    800a48 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800ae5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ae8:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800aeb:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800af2:	e9 51 ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800af7:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800afb:	e9 48 ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800b00:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b03:	8d 50 04             	lea    0x4(%eax),%edx
+  800b06:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b09:	8b 00                	mov    (%eax),%eax
+  800b0b:	83 ec 08             	sub    $0x8,%esp
+  800b0e:	ff 75 0c             	pushl  0xc(%ebp)
+  800b11:	50                   	push   %eax
+  800b12:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b15:	ff d0                	call   *%eax
+  800b17:	83 c4 10             	add    $0x10,%esp
+            break;
+  800b1a:	e9 71 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800b1f:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b22:	8d 50 04             	lea    0x4(%eax),%edx
+  800b25:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b28:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b2a:	85 db                	test   %ebx,%ebx
+  800b2c:	79 02                	jns    800b30 <vprintfmt+0x13b>
+                err = -err;
+  800b2e:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b30:	83 fb 18             	cmp    $0x18,%ebx
+  800b33:	7f 0b                	jg     800b40 <vprintfmt+0x14b>
+  800b35:	8b 34 9d c0 10 80 00 	mov    0x8010c0(,%ebx,4),%esi
+  800b3c:	85 f6                	test   %esi,%esi
+  800b3e:	75 19                	jne    800b59 <vprintfmt+0x164>
+                printfmt(putch, putdat, "error %d", err);
+  800b40:	53                   	push   %ebx
+  800b41:	68 35 11 80 00       	push   $0x801135
+  800b46:	ff 75 0c             	pushl  0xc(%ebp)
+  800b49:	ff 75 08             	pushl  0x8(%ebp)
+  800b4c:	e8 80 fe ff ff       	call   8009d1 <printfmt>
+  800b51:	83 c4 10             	add    $0x10,%esp
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b54:	e9 37 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  800b59:	56                   	push   %esi
+  800b5a:	68 3e 11 80 00       	push   $0x80113e
+  800b5f:	ff 75 0c             	pushl  0xc(%ebp)
+  800b62:	ff 75 08             	pushl  0x8(%ebp)
+  800b65:	e8 67 fe ff ff       	call   8009d1 <printfmt>
+  800b6a:	83 c4 10             	add    $0x10,%esp
+            }
+            break;
+  800b6d:	e9 1e 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800b72:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b75:	8d 50 04             	lea    0x4(%eax),%edx
+  800b78:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b7b:	8b 30                	mov    (%eax),%esi
+  800b7d:	85 f6                	test   %esi,%esi
+  800b7f:	75 05                	jne    800b86 <vprintfmt+0x191>
+                p = "(null)";
+  800b81:	be 41 11 80 00       	mov    $0x801141,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800b86:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b8a:	7e 76                	jle    800c02 <vprintfmt+0x20d>
+  800b8c:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800b90:	74 70                	je     800c02 <vprintfmt+0x20d>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b92:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b95:	83 ec 08             	sub    $0x8,%esp
+  800b98:	50                   	push   %eax
+  800b99:	56                   	push   %esi
+  800b9a:	e8 17 f8 ff ff       	call   8003b6 <strnlen>
+  800b9f:	83 c4 10             	add    $0x10,%esp
+  800ba2:	89 c2                	mov    %eax,%edx
+  800ba4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ba7:	29 d0                	sub    %edx,%eax
+  800ba9:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800bac:	eb 17                	jmp    800bc5 <vprintfmt+0x1d0>
+                    putch(padc, putdat);
+  800bae:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800bb2:	83 ec 08             	sub    $0x8,%esp
+  800bb5:	ff 75 0c             	pushl  0xc(%ebp)
+  800bb8:	50                   	push   %eax
+  800bb9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bbc:	ff d0                	call   *%eax
+  800bbe:	83 c4 10             	add    $0x10,%esp
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bc1:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800bc5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800bc9:	7f e3                	jg     800bae <vprintfmt+0x1b9>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bcb:	eb 35                	jmp    800c02 <vprintfmt+0x20d>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800bcd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800bd1:	74 1c                	je     800bef <vprintfmt+0x1fa>
+  800bd3:	83 fb 1f             	cmp    $0x1f,%ebx
+  800bd6:	7e 05                	jle    800bdd <vprintfmt+0x1e8>
+  800bd8:	83 fb 7e             	cmp    $0x7e,%ebx
+  800bdb:	7e 12                	jle    800bef <vprintfmt+0x1fa>
+                    putch('?', putdat);
+  800bdd:	83 ec 08             	sub    $0x8,%esp
+  800be0:	ff 75 0c             	pushl  0xc(%ebp)
+  800be3:	6a 3f                	push   $0x3f
+  800be5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800be8:	ff d0                	call   *%eax
+  800bea:	83 c4 10             	add    $0x10,%esp
+  800bed:	eb 0f                	jmp    800bfe <vprintfmt+0x209>
+                }
+                else {
+                    putch(ch, putdat);
+  800bef:	83 ec 08             	sub    $0x8,%esp
+  800bf2:	ff 75 0c             	pushl  0xc(%ebp)
+  800bf5:	53                   	push   %ebx
+  800bf6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bf9:	ff d0                	call   *%eax
+  800bfb:	83 c4 10             	add    $0x10,%esp
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bfe:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c02:	89 f0                	mov    %esi,%eax
+  800c04:	8d 70 01             	lea    0x1(%eax),%esi
+  800c07:	0f b6 00             	movzbl (%eax),%eax
+  800c0a:	0f be d8             	movsbl %al,%ebx
+  800c0d:	85 db                	test   %ebx,%ebx
+  800c0f:	74 26                	je     800c37 <vprintfmt+0x242>
+  800c11:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c15:	78 b6                	js     800bcd <vprintfmt+0x1d8>
+  800c17:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  800c1b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c1f:	79 ac                	jns    800bcd <vprintfmt+0x1d8>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c21:	eb 14                	jmp    800c37 <vprintfmt+0x242>
+                putch(' ', putdat);
+  800c23:	83 ec 08             	sub    $0x8,%esp
+  800c26:	ff 75 0c             	pushl  0xc(%ebp)
+  800c29:	6a 20                	push   $0x20
+  800c2b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2e:	ff d0                	call   *%eax
+  800c30:	83 c4 10             	add    $0x10,%esp
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c33:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c37:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c3b:	7f e6                	jg     800c23 <vprintfmt+0x22e>
+                putch(' ', putdat);
+            }
+            break;
+  800c3d:	e9 4e 01 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c42:	83 ec 08             	sub    $0x8,%esp
+  800c45:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c48:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c4b:	50                   	push   %eax
+  800c4c:	e8 39 fd ff ff       	call   80098a <getint>
+  800c51:	83 c4 10             	add    $0x10,%esp
+  800c54:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c57:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c5d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c60:	85 d2                	test   %edx,%edx
+  800c62:	79 23                	jns    800c87 <vprintfmt+0x292>
+                putch('-', putdat);
+  800c64:	83 ec 08             	sub    $0x8,%esp
+  800c67:	ff 75 0c             	pushl  0xc(%ebp)
+  800c6a:	6a 2d                	push   $0x2d
+  800c6c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c6f:	ff d0                	call   *%eax
+  800c71:	83 c4 10             	add    $0x10,%esp
+                num = -(long long)num;
+  800c74:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c77:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c7a:	f7 d8                	neg    %eax
+  800c7c:	83 d2 00             	adc    $0x0,%edx
+  800c7f:	f7 da                	neg    %edx
+  800c81:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c84:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800c87:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c8e:	e9 9f 00 00 00       	jmp    800d32 <vprintfmt+0x33d>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800c93:	83 ec 08             	sub    $0x8,%esp
+  800c96:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c99:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c9c:	50                   	push   %eax
+  800c9d:	e8 99 fc ff ff       	call   80093b <getuint>
+  800ca2:	83 c4 10             	add    $0x10,%esp
+  800ca5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ca8:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800cab:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cb2:	eb 7e                	jmp    800d32 <vprintfmt+0x33d>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800cb4:	83 ec 08             	sub    $0x8,%esp
+  800cb7:	ff 75 e0             	pushl  -0x20(%ebp)
+  800cba:	8d 45 14             	lea    0x14(%ebp),%eax
+  800cbd:	50                   	push   %eax
+  800cbe:	e8 78 fc ff ff       	call   80093b <getuint>
+  800cc3:	83 c4 10             	add    $0x10,%esp
+  800cc6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cc9:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800ccc:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800cd3:	eb 5d                	jmp    800d32 <vprintfmt+0x33d>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800cd5:	83 ec 08             	sub    $0x8,%esp
+  800cd8:	ff 75 0c             	pushl  0xc(%ebp)
+  800cdb:	6a 30                	push   $0x30
+  800cdd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ce0:	ff d0                	call   *%eax
+  800ce2:	83 c4 10             	add    $0x10,%esp
+            putch('x', putdat);
+  800ce5:	83 ec 08             	sub    $0x8,%esp
+  800ce8:	ff 75 0c             	pushl  0xc(%ebp)
+  800ceb:	6a 78                	push   $0x78
+  800ced:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cf0:	ff d0                	call   *%eax
+  800cf2:	83 c4 10             	add    $0x10,%esp
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800cf5:	8b 45 14             	mov    0x14(%ebp),%eax
+  800cf8:	8d 50 04             	lea    0x4(%eax),%edx
+  800cfb:	89 55 14             	mov    %edx,0x14(%ebp)
+  800cfe:	8b 00                	mov    (%eax),%eax
+  800d00:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d03:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800d0a:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800d11:	eb 1f                	jmp    800d32 <vprintfmt+0x33d>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800d13:	83 ec 08             	sub    $0x8,%esp
+  800d16:	ff 75 e0             	pushl  -0x20(%ebp)
+  800d19:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d1c:	50                   	push   %eax
+  800d1d:	e8 19 fc ff ff       	call   80093b <getuint>
+  800d22:	83 c4 10             	add    $0x10,%esp
+  800d25:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d28:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d2b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d32:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d36:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d39:	83 ec 04             	sub    $0x4,%esp
+  800d3c:	52                   	push   %edx
+  800d3d:	ff 75 e8             	pushl  -0x18(%ebp)
+  800d40:	50                   	push   %eax
+  800d41:	ff 75 f4             	pushl  -0xc(%ebp)
+  800d44:	ff 75 f0             	pushl  -0x10(%ebp)
+  800d47:	ff 75 0c             	pushl  0xc(%ebp)
+  800d4a:	ff 75 08             	pushl  0x8(%ebp)
+  800d4d:	e8 f8 fa ff ff       	call   80084a <printnum>
+  800d52:	83 c4 20             	add    $0x20,%esp
+            break;
+  800d55:	eb 39                	jmp    800d90 <vprintfmt+0x39b>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800d57:	83 ec 08             	sub    $0x8,%esp
+  800d5a:	ff 75 0c             	pushl  0xc(%ebp)
+  800d5d:	53                   	push   %ebx
+  800d5e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d61:	ff d0                	call   *%eax
+  800d63:	83 c4 10             	add    $0x10,%esp
+            break;
+  800d66:	eb 28                	jmp    800d90 <vprintfmt+0x39b>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800d68:	83 ec 08             	sub    $0x8,%esp
+  800d6b:	ff 75 0c             	pushl  0xc(%ebp)
+  800d6e:	6a 25                	push   $0x25
+  800d70:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d73:	ff d0                	call   *%eax
+  800d75:	83 c4 10             	add    $0x10,%esp
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800d78:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d7c:	eb 04                	jmp    800d82 <vprintfmt+0x38d>
+  800d7e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d82:	8b 45 10             	mov    0x10(%ebp),%eax
+  800d85:	83 e8 01             	sub    $0x1,%eax
+  800d88:	0f b6 00             	movzbl (%eax),%eax
+  800d8b:	3c 25                	cmp    $0x25,%al
+  800d8d:	75 ef                	jne    800d7e <vprintfmt+0x389>
+                /* do nothing */;
+            break;
+  800d8f:	90                   	nop
+        }
+    }
+  800d90:	e9 68 fc ff ff       	jmp    8009fd <vprintfmt+0x8>
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+            if (ch == '\0') {
+                return;
+  800d95:	90                   	nop
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  800d96:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  800d99:	5b                   	pop    %ebx
+  800d9a:	5e                   	pop    %esi
+  800d9b:	5d                   	pop    %ebp
+  800d9c:	c3                   	ret    
+
+00800d9d <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800d9d:	55                   	push   %ebp
+  800d9e:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800da0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800da3:	8b 40 08             	mov    0x8(%eax),%eax
+  800da6:	8d 50 01             	lea    0x1(%eax),%edx
+  800da9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dac:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800daf:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db2:	8b 10                	mov    (%eax),%edx
+  800db4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db7:	8b 40 04             	mov    0x4(%eax),%eax
+  800dba:	39 c2                	cmp    %eax,%edx
+  800dbc:	73 12                	jae    800dd0 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800dbe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dc1:	8b 00                	mov    (%eax),%eax
+  800dc3:	8d 48 01             	lea    0x1(%eax),%ecx
+  800dc6:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800dc9:	89 0a                	mov    %ecx,(%edx)
+  800dcb:	8b 55 08             	mov    0x8(%ebp),%edx
+  800dce:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800dd0:	90                   	nop
+  800dd1:	5d                   	pop    %ebp
+  800dd2:	c3                   	ret    
+
+00800dd3 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800dd3:	55                   	push   %ebp
+  800dd4:	89 e5                	mov    %esp,%ebp
+  800dd6:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800dd9:	8d 45 14             	lea    0x14(%ebp),%eax
+  800ddc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800ddf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800de2:	50                   	push   %eax
+  800de3:	ff 75 10             	pushl  0x10(%ebp)
+  800de6:	ff 75 0c             	pushl  0xc(%ebp)
+  800de9:	ff 75 08             	pushl  0x8(%ebp)
+  800dec:	e8 0b 00 00 00       	call   800dfc <vsnprintf>
+  800df1:	83 c4 10             	add    $0x10,%esp
+  800df4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800df7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800dfa:	c9                   	leave  
+  800dfb:	c3                   	ret    
+
+00800dfc <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800dfc:	55                   	push   %ebp
+  800dfd:	89 e5                	mov    %esp,%ebp
+  800dff:	83 ec 18             	sub    $0x18,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800e02:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e05:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e08:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e0b:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800e0e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e11:	01 d0                	add    %edx,%eax
+  800e13:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e16:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800e1d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800e21:	74 0a                	je     800e2d <vsnprintf+0x31>
+  800e23:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800e26:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e29:	39 c2                	cmp    %eax,%edx
+  800e2b:	76 07                	jbe    800e34 <vsnprintf+0x38>
+        return -E_INVAL;
+  800e2d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e32:	eb 20                	jmp    800e54 <vsnprintf+0x58>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e34:	ff 75 14             	pushl  0x14(%ebp)
+  800e37:	ff 75 10             	pushl  0x10(%ebp)
+  800e3a:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800e3d:	50                   	push   %eax
+  800e3e:	68 9d 0d 80 00       	push   $0x800d9d
+  800e43:	e8 ad fb ff ff       	call   8009f5 <vprintfmt>
+  800e48:	83 c4 10             	add    $0x10,%esp
+    // null terminate the buffer
+    *b.buf = '\0';
+  800e4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e4e:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800e51:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e54:	c9                   	leave  
+  800e55:	c3                   	ret    
+
+00800e56 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800e56:	55                   	push   %ebp
+  800e57:	89 e5                	mov    %esp,%ebp
+  800e59:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800e5c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e5f:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800e65:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800e68:	b8 20 00 00 00       	mov    $0x20,%eax
+  800e6d:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800e70:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800e73:	89 c1                	mov    %eax,%ecx
+  800e75:	d3 ea                	shr    %cl,%edx
+  800e77:	89 d0                	mov    %edx,%eax
+}
+  800e79:	c9                   	leave  
+  800e7a:	c3                   	ret    
+
+00800e7b <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800e7b:	55                   	push   %ebp
+  800e7c:	89 e5                	mov    %esp,%ebp
+  800e7e:	57                   	push   %edi
+  800e7f:	56                   	push   %esi
+  800e80:	53                   	push   %ebx
+  800e81:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800e84:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e89:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800e8f:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800e95:	6b f0 05             	imul   $0x5,%eax,%esi
+  800e98:	01 fe                	add    %edi,%esi
+  800e9a:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800e9f:	f7 e7                	mul    %edi
+  800ea1:	01 d6                	add    %edx,%esi
+  800ea3:	89 f2                	mov    %esi,%edx
+  800ea5:	83 c0 0b             	add    $0xb,%eax
+  800ea8:	83 d2 00             	adc    $0x0,%edx
+  800eab:	89 c7                	mov    %eax,%edi
+  800ead:	83 e7 ff             	and    $0xffffffff,%edi
+  800eb0:	89 f9                	mov    %edi,%ecx
+  800eb2:	0f b7 da             	movzwl %dx,%ebx
+  800eb5:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800ebb:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800ec1:	a1 00 20 80 00       	mov    0x802000,%eax
+  800ec6:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ecc:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ed0:	c1 ea 0c             	shr    $0xc,%edx
+  800ed3:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ed6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800ed9:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ee0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ee3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ee6:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ee9:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800eec:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eef:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ef2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ef6:	74 1c                	je     800f14 <rand+0x99>
+  800ef8:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800efb:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f00:	f7 75 dc             	divl   -0x24(%ebp)
+  800f03:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800f06:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f09:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f0e:	f7 75 dc             	divl   -0x24(%ebp)
+  800f11:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800f14:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f17:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800f1a:	f7 75 dc             	divl   -0x24(%ebp)
+  800f1d:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f20:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f23:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f26:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800f29:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f2c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f2f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800f32:	83 c4 24             	add    $0x24,%esp
+  800f35:	5b                   	pop    %ebx
+  800f36:	5e                   	pop    %esi
+  800f37:	5f                   	pop    %edi
+  800f38:	5d                   	pop    %ebp
+  800f39:	c3                   	ret    
+
+00800f3a <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800f3a:	55                   	push   %ebp
+  800f3b:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800f3d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f40:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f45:	a3 00 20 80 00       	mov    %eax,0x802000
+  800f4a:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800f50:	90                   	nop
+  800f51:	5d                   	pop    %ebp
+  800f52:	c3                   	ret    
+
+00800f53 <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  800f53:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  800f57:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f5a:	ff 71 fc             	pushl  -0x4(%ecx)
+  800f5d:	55                   	push   %ebp
+  800f5e:	89 e5                	mov    %esp,%ebp
+  800f60:	51                   	push   %ecx
+  800f61:	83 ec 04             	sub    $0x4,%esp
+    cprintf("Hello world!!.\n");
+  800f64:	83 ec 0c             	sub    $0xc,%esp
+  800f67:	68 a0 12 80 00       	push   $0x8012a0
+  800f6c:	e8 90 f3 ff ff       	call   800301 <cprintf>
+  800f71:	83 c4 10             	add    $0x10,%esp
+    cprintf("I am process %d.\n", getpid());
+  800f74:	e8 d7 f2 ff ff       	call   800250 <getpid>
+  800f79:	83 ec 08             	sub    $0x8,%esp
+  800f7c:	50                   	push   %eax
+  800f7d:	68 b0 12 80 00       	push   $0x8012b0
+  800f82:	e8 7a f3 ff ff       	call   800301 <cprintf>
+  800f87:	83 c4 10             	add    $0x10,%esp
+    cprintf("hello pass.\n");
+  800f8a:	83 ec 0c             	sub    $0xc,%esp
+  800f8d:	68 c2 12 80 00       	push   $0x8012c2
+  800f92:	e8 6a f3 ff ff       	call   800301 <cprintf>
+  800f97:	83 c4 10             	add    $0x10,%esp
+    return 0;
+  800f9a:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800f9f:	8b 4d fc             	mov    -0x4(%ebp),%ecx
+  800fa2:	c9                   	leave  
+  800fa3:	8d 61 fc             	lea    -0x4(%ecx),%esp
+  800fa6:	c3                   	ret    
diff -r -u -P lab7_original/obj/user/hello.d lab7/obj/user/hello.d
--- lab7_original/obj/user/hello.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/hello.d	2016-05-06 21:59:27.626123707 +0800
@@ -0,0 +1,2 @@
+obj/user/hello.o obj/user/hello.d: user/hello.c libs/stdio.h libs/defs.h \
+ libs/stdarg.h user/libs/ulib.h
Binary files lab7_original/obj/user/hello.o and lab7/obj/user/hello.o differ
diff -r -u -P lab7_original/obj/user/hello.sym lab7/obj/user/hello.sym
--- lab7_original/obj/user/hello.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/hello.sym	2016-05-06 21:59:28.634160461 +0800
@@ -0,0 +1,78 @@
+00800020 .text
+00800fc0 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202d29 .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b5 syscall
+00000000 ulib.c
+00000000 stdio.c
+008002b4 cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+008010c0 error_string
+0080084a printnum
+0080093b getuint
+0080098a getint
+00800d9d sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 hello.c
+008003e6 strcpy
+0080022c yield
+00800213 waitpid
+00800141 sys_yield
+008006ff memmove
+00800dd3 snprintf
+008009f5 vprintfmt
+0080011d sys_fork
+00800301 cprintf
+00800250 getpid
+008007a2 memcpy
+0080028f sleep
+00800278 lab6_set_priority
+00800dfc vsnprintf
+00800375 umain
+00202d28 __STAB_END__
+00800150 sys_kill
+00202d29 __STABSTR_BEGIN__
+00800020 __panic
+008001b7 sys_sleep
+00800562 strtol
+008003b6 strnlen
+0080025d print_pgdir
+0080023a kill
+00800533 strfind
+008001fc wait
+008002a5 _start
+00800e7b rand
+008004aa strncmp
+00800171 sys_putc
+00800426 strncpy
+008007f2 memcmp
+008001ef fork
+008006bf memset
+00800f53 main
+00800f3a srand
+00800e56 hash32
+008009d1 printfmt
+00203b31 __STABSTR_END__
+00800460 strcmp
+0080026b gettime_msec
+00800192 sys_gettime
+008002d8 vcprintf
+0080006e __warn
+00800327 cputs
+008001a1 sys_lab6_set_priority
+008001c9 exit
+0080012c sys_wait
+0080010b sys_exit
+00200010 __STAB_BEGIN__
+0080038e strlen
+00800183 sys_pgdir
+00800500 strchr
+00800162 sys_getpid
diff -r -u -P lab7_original/obj/user/libs/initcode.d lab7/obj/user/libs/initcode.d
--- lab7_original/obj/user/libs/initcode.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/libs/initcode.d	2016-05-06 21:59:27.622123562 +0800
@@ -0,0 +1 @@
+obj/user/libs/initcode.o obj/user/libs/initcode.d: user/libs/initcode.S
Binary files lab7_original/obj/user/libs/initcode.o and lab7/obj/user/libs/initcode.o differ
diff -r -u -P lab7_original/obj/user/libs/panic.d lab7/obj/user/libs/panic.d
--- lab7_original/obj/user/libs/panic.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/libs/panic.d	2016-05-06 21:59:27.582122113 +0800
@@ -0,0 +1,2 @@
+obj/user/libs/panic.o obj/user/libs/panic.d: user/libs/panic.c \
+ libs/defs.h libs/stdarg.h libs/stdio.h user/libs/ulib.h libs/error.h
Binary files lab7_original/obj/user/libs/panic.o and lab7/obj/user/libs/panic.o differ
diff -r -u -P lab7_original/obj/user/libs/stdio.d lab7/obj/user/libs/stdio.d
--- lab7_original/obj/user/libs/stdio.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/libs/stdio.d	2016-05-06 21:59:27.614123272 +0800
@@ -0,0 +1,2 @@
+obj/user/libs/stdio.o obj/user/libs/stdio.d: user/libs/stdio.c \
+ libs/defs.h libs/stdio.h libs/stdarg.h user/libs/syscall.h
Binary files lab7_original/obj/user/libs/stdio.o and lab7/obj/user/libs/stdio.o differ
diff -r -u -P lab7_original/obj/user/libs/syscall.d lab7/obj/user/libs/syscall.d
--- lab7_original/obj/user/libs/syscall.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/libs/syscall.d	2016-05-06 21:59:27.622123562 +0800
@@ -0,0 +1,2 @@
+obj/user/libs/syscall.o obj/user/libs/syscall.d: user/libs/syscall.c \
+ libs/defs.h libs/unistd.h libs/stdarg.h user/libs/syscall.h
Binary files lab7_original/obj/user/libs/syscall.o and lab7/obj/user/libs/syscall.o differ
diff -r -u -P lab7_original/obj/user/libs/ulib.d lab7/obj/user/libs/ulib.d
--- lab7_original/obj/user/libs/ulib.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/libs/ulib.d	2016-05-06 21:59:27.606122983 +0800
@@ -0,0 +1,2 @@
+obj/user/libs/ulib.o obj/user/libs/ulib.d: user/libs/ulib.c libs/defs.h \
+ user/libs/syscall.h libs/stdio.h libs/stdarg.h user/libs/ulib.h
Binary files lab7_original/obj/user/libs/ulib.o and lab7/obj/user/libs/ulib.o differ
diff -r -u -P lab7_original/obj/user/libs/umain.d lab7/obj/user/libs/umain.d
--- lab7_original/obj/user/libs/umain.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/libs/umain.d	2016-05-06 21:59:27.626123707 +0800
@@ -0,0 +1,2 @@
+obj/user/libs/umain.o obj/user/libs/umain.d: user/libs/umain.c \
+ user/libs/ulib.h libs/defs.h
Binary files lab7_original/obj/user/libs/umain.o and lab7/obj/user/libs/umain.o differ
diff -r -u -P lab7_original/obj/user/matrix.asm lab7/obj/user/matrix.asm
--- lab7_original/obj/user/matrix.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/matrix.asm	2016-05-06 21:59:28.582158557 +0800
@@ -0,0 +1,3060 @@
+
+obj/__user_matrix.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 18             	sub    $0x18,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	83 ec 04             	sub    $0x4,%esp
+  80002f:	ff 75 0c             	pushl  0xc(%ebp)
+  800032:	ff 75 08             	pushl  0x8(%ebp)
+  800035:	68 40 13 80 00       	push   $0x801340
+  80003a:	e8 c2 02 00 00       	call   800301 <cprintf>
+  80003f:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800042:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800045:	83 ec 08             	sub    $0x8,%esp
+  800048:	50                   	push   %eax
+  800049:	ff 75 10             	pushl  0x10(%ebp)
+  80004c:	e8 87 02 00 00       	call   8002d8 <vcprintf>
+  800051:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  800054:	83 ec 0c             	sub    $0xc,%esp
+  800057:	68 5a 13 80 00       	push   $0x80135a
+  80005c:	e8 a0 02 00 00       	call   800301 <cprintf>
+  800061:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	83 ec 0c             	sub    $0xc,%esp
+  800067:	6a f6                	push   $0xfffffff6
+  800069:	e8 5b 01 00 00       	call   8001c9 <exit>
+
+0080006e <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80006e:	55                   	push   %ebp
+  80006f:	89 e5                	mov    %esp,%ebp
+  800071:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800074:	8d 45 14             	lea    0x14(%ebp),%eax
+  800077:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007a:	83 ec 04             	sub    $0x4,%esp
+  80007d:	ff 75 0c             	pushl  0xc(%ebp)
+  800080:	ff 75 08             	pushl  0x8(%ebp)
+  800083:	68 5c 13 80 00       	push   $0x80135c
+  800088:	e8 74 02 00 00       	call   800301 <cprintf>
+  80008d:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800090:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800093:	83 ec 08             	sub    $0x8,%esp
+  800096:	50                   	push   %eax
+  800097:	ff 75 10             	pushl  0x10(%ebp)
+  80009a:	e8 39 02 00 00       	call   8002d8 <vcprintf>
+  80009f:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  8000a2:	83 ec 0c             	sub    $0xc,%esp
+  8000a5:	68 5a 13 80 00       	push   $0x80135a
+  8000aa:	e8 52 02 00 00       	call   800301 <cprintf>
+  8000af:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8000b2:	90                   	nop
+  8000b3:	c9                   	leave  
+  8000b4:	c3                   	ret    
+
+008000b5 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b5:	55                   	push   %ebp
+  8000b6:	89 e5                	mov    %esp,%ebp
+  8000b8:	57                   	push   %edi
+  8000b9:	56                   	push   %esi
+  8000ba:	53                   	push   %ebx
+  8000bb:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000be:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cb:	eb 16                	jmp    8000e3 <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8000cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d0:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d3:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d6:	8b 10                	mov    (%eax),%edx
+  8000d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000db:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000df:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8000e3:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e7:	7e e4                	jle    8000cd <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000e9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ec:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000ef:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f2:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f5:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8000f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fb:	cd 80                	int    $0x80
+  8000fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  800100:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800103:	83 c4 20             	add    $0x20,%esp
+  800106:	5b                   	pop    %ebx
+  800107:	5e                   	pop    %esi
+  800108:	5f                   	pop    %edi
+  800109:	5d                   	pop    %ebp
+  80010a:	c3                   	ret    
+
+0080010b <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010b:	55                   	push   %ebp
+  80010c:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_exit, error_code);
+  80010e:	ff 75 08             	pushl  0x8(%ebp)
+  800111:	6a 01                	push   $0x1
+  800113:	e8 9d ff ff ff       	call   8000b5 <syscall>
+  800118:	83 c4 08             	add    $0x8,%esp
+}
+  80011b:	c9                   	leave  
+  80011c:	c3                   	ret    
+
+0080011d <sys_fork>:
+
+int
+sys_fork(void) {
+  80011d:	55                   	push   %ebp
+  80011e:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_fork);
+  800120:	6a 02                	push   $0x2
+  800122:	e8 8e ff ff ff       	call   8000b5 <syscall>
+  800127:	83 c4 04             	add    $0x4,%esp
+}
+  80012a:	c9                   	leave  
+  80012b:	c3                   	ret    
+
+0080012c <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80012c:	55                   	push   %ebp
+  80012d:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_wait, pid, store);
+  80012f:	ff 75 0c             	pushl  0xc(%ebp)
+  800132:	ff 75 08             	pushl  0x8(%ebp)
+  800135:	6a 03                	push   $0x3
+  800137:	e8 79 ff ff ff       	call   8000b5 <syscall>
+  80013c:	83 c4 0c             	add    $0xc,%esp
+}
+  80013f:	c9                   	leave  
+  800140:	c3                   	ret    
+
+00800141 <sys_yield>:
+
+int
+sys_yield(void) {
+  800141:	55                   	push   %ebp
+  800142:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_yield);
+  800144:	6a 0a                	push   $0xa
+  800146:	e8 6a ff ff ff       	call   8000b5 <syscall>
+  80014b:	83 c4 04             	add    $0x4,%esp
+}
+  80014e:	c9                   	leave  
+  80014f:	c3                   	ret    
+
+00800150 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800150:	55                   	push   %ebp
+  800151:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_kill, pid);
+  800153:	ff 75 08             	pushl  0x8(%ebp)
+  800156:	6a 0c                	push   $0xc
+  800158:	e8 58 ff ff ff       	call   8000b5 <syscall>
+  80015d:	83 c4 08             	add    $0x8,%esp
+}
+  800160:	c9                   	leave  
+  800161:	c3                   	ret    
+
+00800162 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800162:	55                   	push   %ebp
+  800163:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_getpid);
+  800165:	6a 12                	push   $0x12
+  800167:	e8 49 ff ff ff       	call   8000b5 <syscall>
+  80016c:	83 c4 04             	add    $0x4,%esp
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_putc, c);
+  800174:	ff 75 08             	pushl  0x8(%ebp)
+  800177:	6a 1e                	push   $0x1e
+  800179:	e8 37 ff ff ff       	call   8000b5 <syscall>
+  80017e:	83 c4 08             	add    $0x8,%esp
+}
+  800181:	c9                   	leave  
+  800182:	c3                   	ret    
+
+00800183 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800183:	55                   	push   %ebp
+  800184:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_pgdir);
+  800186:	6a 1f                	push   $0x1f
+  800188:	e8 28 ff ff ff       	call   8000b5 <syscall>
+  80018d:	83 c4 04             	add    $0x4,%esp
+}
+  800190:	c9                   	leave  
+  800191:	c3                   	ret    
+
+00800192 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  800192:	55                   	push   %ebp
+  800193:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_gettime);
+  800195:	6a 11                	push   $0x11
+  800197:	e8 19 ff ff ff       	call   8000b5 <syscall>
+  80019c:	83 c4 04             	add    $0x4,%esp
+}
+  80019f:	c9                   	leave  
+  8001a0:	c3                   	ret    
+
+008001a1 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001a1:	55                   	push   %ebp
+  8001a2:	89 e5                	mov    %esp,%ebp
+    syscall(SYS_lab6_set_priority, priority);
+  8001a4:	ff 75 08             	pushl  0x8(%ebp)
+  8001a7:	68 ff 00 00 00       	push   $0xff
+  8001ac:	e8 04 ff ff ff       	call   8000b5 <syscall>
+  8001b1:	83 c4 08             	add    $0x8,%esp
+}
+  8001b4:	90                   	nop
+  8001b5:	c9                   	leave  
+  8001b6:	c3                   	ret    
+
+008001b7 <sys_sleep>:
+
+int
+sys_sleep(unsigned int time) {
+  8001b7:	55                   	push   %ebp
+  8001b8:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_sleep, time);
+  8001ba:	ff 75 08             	pushl  0x8(%ebp)
+  8001bd:	6a 0b                	push   $0xb
+  8001bf:	e8 f1 fe ff ff       	call   8000b5 <syscall>
+  8001c4:	83 c4 08             	add    $0x8,%esp
+}
+  8001c7:	c9                   	leave  
+  8001c8:	c3                   	ret    
+
+008001c9 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001c9:	55                   	push   %ebp
+  8001ca:	89 e5                	mov    %esp,%ebp
+  8001cc:	83 ec 08             	sub    $0x8,%esp
+    sys_exit(error_code);
+  8001cf:	83 ec 0c             	sub    $0xc,%esp
+  8001d2:	ff 75 08             	pushl  0x8(%ebp)
+  8001d5:	e8 31 ff ff ff       	call   80010b <sys_exit>
+  8001da:	83 c4 10             	add    $0x10,%esp
+    cprintf("BUG: exit failed.\n");
+  8001dd:	83 ec 0c             	sub    $0xc,%esp
+  8001e0:	68 78 13 80 00       	push   $0x801378
+  8001e5:	e8 17 01 00 00       	call   800301 <cprintf>
+  8001ea:	83 c4 10             	add    $0x10,%esp
+    while (1);
+  8001ed:	eb fe                	jmp    8001ed <exit+0x24>
+
+008001ef <fork>:
+}
+
+int
+fork(void) {
+  8001ef:	55                   	push   %ebp
+  8001f0:	89 e5                	mov    %esp,%ebp
+  8001f2:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8001f5:	e8 23 ff ff ff       	call   80011d <sys_fork>
+}
+  8001fa:	c9                   	leave  
+  8001fb:	c3                   	ret    
+
+008001fc <wait>:
+
+int
+wait(void) {
+  8001fc:	55                   	push   %ebp
+  8001fd:	89 e5                	mov    %esp,%ebp
+  8001ff:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(0, NULL);
+  800202:	83 ec 08             	sub    $0x8,%esp
+  800205:	6a 00                	push   $0x0
+  800207:	6a 00                	push   $0x0
+  800209:	e8 1e ff ff ff       	call   80012c <sys_wait>
+  80020e:	83 c4 10             	add    $0x10,%esp
+}
+  800211:	c9                   	leave  
+  800212:	c3                   	ret    
+
+00800213 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800213:	55                   	push   %ebp
+  800214:	89 e5                	mov    %esp,%ebp
+  800216:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(pid, store);
+  800219:	83 ec 08             	sub    $0x8,%esp
+  80021c:	ff 75 0c             	pushl  0xc(%ebp)
+  80021f:	ff 75 08             	pushl  0x8(%ebp)
+  800222:	e8 05 ff ff ff       	call   80012c <sys_wait>
+  800227:	83 c4 10             	add    $0x10,%esp
+}
+  80022a:	c9                   	leave  
+  80022b:	c3                   	ret    
+
+0080022c <yield>:
+
+void
+yield(void) {
+  80022c:	55                   	push   %ebp
+  80022d:	89 e5                	mov    %esp,%ebp
+  80022f:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800232:	e8 0a ff ff ff       	call   800141 <sys_yield>
+}
+  800237:	90                   	nop
+  800238:	c9                   	leave  
+  800239:	c3                   	ret    
+
+0080023a <kill>:
+
+int
+kill(int pid) {
+  80023a:	55                   	push   %ebp
+  80023b:	89 e5                	mov    %esp,%ebp
+  80023d:	83 ec 08             	sub    $0x8,%esp
+    return sys_kill(pid);
+  800240:	83 ec 0c             	sub    $0xc,%esp
+  800243:	ff 75 08             	pushl  0x8(%ebp)
+  800246:	e8 05 ff ff ff       	call   800150 <sys_kill>
+  80024b:	83 c4 10             	add    $0x10,%esp
+}
+  80024e:	c9                   	leave  
+  80024f:	c3                   	ret    
+
+00800250 <getpid>:
+
+int
+getpid(void) {
+  800250:	55                   	push   %ebp
+  800251:	89 e5                	mov    %esp,%ebp
+  800253:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800256:	e8 07 ff ff ff       	call   800162 <sys_getpid>
+}
+  80025b:	c9                   	leave  
+  80025c:	c3                   	ret    
+
+0080025d <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80025d:	55                   	push   %ebp
+  80025e:	89 e5                	mov    %esp,%ebp
+  800260:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800263:	e8 1b ff ff ff       	call   800183 <sys_pgdir>
+}
+  800268:	90                   	nop
+  800269:	c9                   	leave  
+  80026a:	c3                   	ret    
+
+0080026b <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80026b:	55                   	push   %ebp
+  80026c:	89 e5                	mov    %esp,%ebp
+  80026e:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800271:	e8 1c ff ff ff       	call   800192 <sys_gettime>
+}
+  800276:	c9                   	leave  
+  800277:	c3                   	ret    
+
+00800278 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800278:	55                   	push   %ebp
+  800279:	89 e5                	mov    %esp,%ebp
+  80027b:	83 ec 08             	sub    $0x8,%esp
+    sys_lab6_set_priority(priority);
+  80027e:	83 ec 0c             	sub    $0xc,%esp
+  800281:	ff 75 08             	pushl  0x8(%ebp)
+  800284:	e8 18 ff ff ff       	call   8001a1 <sys_lab6_set_priority>
+  800289:	83 c4 10             	add    $0x10,%esp
+}
+  80028c:	90                   	nop
+  80028d:	c9                   	leave  
+  80028e:	c3                   	ret    
+
+0080028f <sleep>:
+
+int
+sleep(unsigned int time) {
+  80028f:	55                   	push   %ebp
+  800290:	89 e5                	mov    %esp,%ebp
+  800292:	83 ec 08             	sub    $0x8,%esp
+    return sys_sleep(time);
+  800295:	83 ec 0c             	sub    $0xc,%esp
+  800298:	ff 75 08             	pushl  0x8(%ebp)
+  80029b:	e8 17 ff ff ff       	call   8001b7 <sys_sleep>
+  8002a0:	83 c4 10             	add    $0x10,%esp
+}
+  8002a3:	c9                   	leave  
+  8002a4:	c3                   	ret    
+
+008002a5 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  8002a5:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  8002aa:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  8002ad:	e8 c3 00 00 00       	call   800375 <umain>
+1:  jmp 1b
+  8002b2:	eb fe                	jmp    8002b2 <_start+0xd>
+
+008002b4 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8002b4:	55                   	push   %ebp
+  8002b5:	89 e5                	mov    %esp,%ebp
+  8002b7:	83 ec 08             	sub    $0x8,%esp
+    sys_putc(c);
+  8002ba:	83 ec 0c             	sub    $0xc,%esp
+  8002bd:	ff 75 08             	pushl  0x8(%ebp)
+  8002c0:	e8 ac fe ff ff       	call   800171 <sys_putc>
+  8002c5:	83 c4 10             	add    $0x10,%esp
+    (*cnt) ++;
+  8002c8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002cb:	8b 00                	mov    (%eax),%eax
+  8002cd:	8d 50 01             	lea    0x1(%eax),%edx
+  8002d0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002d3:	89 10                	mov    %edx,(%eax)
+}
+  8002d5:	90                   	nop
+  8002d6:	c9                   	leave  
+  8002d7:	c3                   	ret    
+
+008002d8 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002d8:	55                   	push   %ebp
+  8002d9:	89 e5                	mov    %esp,%ebp
+  8002db:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  8002de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002e5:	ff 75 0c             	pushl  0xc(%ebp)
+  8002e8:	ff 75 08             	pushl  0x8(%ebp)
+  8002eb:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  8002ee:	50                   	push   %eax
+  8002ef:	68 b4 02 80 00       	push   $0x8002b4
+  8002f4:	e8 fc 06 00 00       	call   8009f5 <vprintfmt>
+  8002f9:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  8002fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002ff:	c9                   	leave  
+  800300:	c3                   	ret    
+
+00800301 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800301:	55                   	push   %ebp
+  800302:	89 e5                	mov    %esp,%ebp
+  800304:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800307:	8d 45 0c             	lea    0xc(%ebp),%eax
+  80030a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  80030d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800310:	83 ec 08             	sub    $0x8,%esp
+  800313:	50                   	push   %eax
+  800314:	ff 75 08             	pushl  0x8(%ebp)
+  800317:	e8 bc ff ff ff       	call   8002d8 <vcprintf>
+  80031c:	83 c4 10             	add    $0x10,%esp
+  80031f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800322:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800325:	c9                   	leave  
+  800326:	c3                   	ret    
+
+00800327 <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  800327:	55                   	push   %ebp
+  800328:	89 e5                	mov    %esp,%ebp
+  80032a:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  80032d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  800334:	eb 14                	jmp    80034a <cputs+0x23>
+        cputch(c, &cnt);
+  800336:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  80033a:	83 ec 08             	sub    $0x8,%esp
+  80033d:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800340:	52                   	push   %edx
+  800341:	50                   	push   %eax
+  800342:	e8 6d ff ff ff       	call   8002b4 <cputch>
+  800347:	83 c4 10             	add    $0x10,%esp
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  80034a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80034d:	8d 50 01             	lea    0x1(%eax),%edx
+  800350:	89 55 08             	mov    %edx,0x8(%ebp)
+  800353:	0f b6 00             	movzbl (%eax),%eax
+  800356:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800359:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  80035d:	75 d7                	jne    800336 <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  80035f:	83 ec 08             	sub    $0x8,%esp
+  800362:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800365:	50                   	push   %eax
+  800366:	6a 0a                	push   $0xa
+  800368:	e8 47 ff ff ff       	call   8002b4 <cputch>
+  80036d:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  800370:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  800373:	c9                   	leave  
+  800374:	c3                   	ret    
+
+00800375 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800375:	55                   	push   %ebp
+  800376:	89 e5                	mov    %esp,%ebp
+  800378:	83 ec 18             	sub    $0x18,%esp
+    int ret = main();
+  80037b:	e8 07 0e 00 00       	call   801187 <main>
+  800380:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  800383:	83 ec 0c             	sub    $0xc,%esp
+  800386:	ff 75 f4             	pushl  -0xc(%ebp)
+  800389:	e8 3b fe ff ff       	call   8001c9 <exit>
+
+0080038e <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  80038e:	55                   	push   %ebp
+  80038f:	89 e5                	mov    %esp,%ebp
+  800391:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800394:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  80039b:	eb 04                	jmp    8003a1 <strlen+0x13>
+        cnt ++;
+  80039d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  8003a1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003a4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003a7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003aa:	0f b6 00             	movzbl (%eax),%eax
+  8003ad:	84 c0                	test   %al,%al
+  8003af:	75 ec                	jne    80039d <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003b4:	c9                   	leave  
+  8003b5:	c3                   	ret    
+
+008003b6 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  8003b6:	55                   	push   %ebp
+  8003b7:	89 e5                	mov    %esp,%ebp
+  8003b9:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003bc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003c3:	eb 04                	jmp    8003c9 <strnlen+0x13>
+        cnt ++;
+  8003c5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  8003c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003cc:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003cf:	73 10                	jae    8003e1 <strnlen+0x2b>
+  8003d1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003d4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003d7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003da:	0f b6 00             	movzbl (%eax),%eax
+  8003dd:	84 c0                	test   %al,%al
+  8003df:	75 e4                	jne    8003c5 <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003e4:	c9                   	leave  
+  8003e5:	c3                   	ret    
+
+008003e6 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  8003e6:	55                   	push   %ebp
+  8003e7:	89 e5                	mov    %esp,%ebp
+  8003e9:	57                   	push   %edi
+  8003ea:	56                   	push   %esi
+  8003eb:	83 ec 20             	sub    $0x20,%esp
+  8003ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003f4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8003f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  8003fa:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800400:	89 d1                	mov    %edx,%ecx
+  800402:	89 c2                	mov    %eax,%edx
+  800404:	89 ce                	mov    %ecx,%esi
+  800406:	89 d7                	mov    %edx,%edi
+  800408:	ac                   	lods   %ds:(%esi),%al
+  800409:	aa                   	stos   %al,%es:(%edi)
+  80040a:	84 c0                	test   %al,%al
+  80040c:	75 fa                	jne    800408 <strcpy+0x22>
+  80040e:	89 fa                	mov    %edi,%edx
+  800410:	89 f1                	mov    %esi,%ecx
+  800412:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800415:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800418:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  80041b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  80041e:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  80041f:	83 c4 20             	add    $0x20,%esp
+  800422:	5e                   	pop    %esi
+  800423:	5f                   	pop    %edi
+  800424:	5d                   	pop    %ebp
+  800425:	c3                   	ret    
+
+00800426 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800426:	55                   	push   %ebp
+  800427:	89 e5                	mov    %esp,%ebp
+  800429:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  80042c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80042f:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800432:	eb 21                	jmp    800455 <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800434:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800437:	0f b6 10             	movzbl (%eax),%edx
+  80043a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80043d:	88 10                	mov    %dl,(%eax)
+  80043f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800442:	0f b6 00             	movzbl (%eax),%eax
+  800445:	84 c0                	test   %al,%al
+  800447:	74 04                	je     80044d <strncpy+0x27>
+            src ++;
+  800449:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  80044d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800451:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800455:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800459:	75 d9                	jne    800434 <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  80045b:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  80045e:	c9                   	leave  
+  80045f:	c3                   	ret    
+
+00800460 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800460:	55                   	push   %ebp
+  800461:	89 e5                	mov    %esp,%ebp
+  800463:	57                   	push   %edi
+  800464:	56                   	push   %esi
+  800465:	83 ec 20             	sub    $0x20,%esp
+  800468:	8b 45 08             	mov    0x8(%ebp),%eax
+  80046b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80046e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800471:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800474:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800477:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80047a:	89 d1                	mov    %edx,%ecx
+  80047c:	89 c2                	mov    %eax,%edx
+  80047e:	89 ce                	mov    %ecx,%esi
+  800480:	89 d7                	mov    %edx,%edi
+  800482:	ac                   	lods   %ds:(%esi),%al
+  800483:	ae                   	scas   %es:(%edi),%al
+  800484:	75 08                	jne    80048e <strcmp+0x2e>
+  800486:	84 c0                	test   %al,%al
+  800488:	75 f8                	jne    800482 <strcmp+0x22>
+  80048a:	31 c0                	xor    %eax,%eax
+  80048c:	eb 04                	jmp    800492 <strcmp+0x32>
+  80048e:	19 c0                	sbb    %eax,%eax
+  800490:	0c 01                	or     $0x1,%al
+  800492:	89 fa                	mov    %edi,%edx
+  800494:	89 f1                	mov    %esi,%ecx
+  800496:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800499:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  80049c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  80049f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  8004a2:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  8004a3:	83 c4 20             	add    $0x20,%esp
+  8004a6:	5e                   	pop    %esi
+  8004a7:	5f                   	pop    %edi
+  8004a8:	5d                   	pop    %ebp
+  8004a9:	c3                   	ret    
+
+008004aa <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  8004aa:	55                   	push   %ebp
+  8004ab:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004ad:	eb 0c                	jmp    8004bb <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  8004af:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  8004b3:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8004b7:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004bb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004bf:	74 1a                	je     8004db <strncmp+0x31>
+  8004c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004c4:	0f b6 00             	movzbl (%eax),%eax
+  8004c7:	84 c0                	test   %al,%al
+  8004c9:	74 10                	je     8004db <strncmp+0x31>
+  8004cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004ce:	0f b6 10             	movzbl (%eax),%edx
+  8004d1:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004d4:	0f b6 00             	movzbl (%eax),%eax
+  8004d7:	38 c2                	cmp    %al,%dl
+  8004d9:	74 d4                	je     8004af <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004db:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004df:	74 18                	je     8004f9 <strncmp+0x4f>
+  8004e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e4:	0f b6 00             	movzbl (%eax),%eax
+  8004e7:	0f b6 d0             	movzbl %al,%edx
+  8004ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ed:	0f b6 00             	movzbl (%eax),%eax
+  8004f0:	0f b6 c0             	movzbl %al,%eax
+  8004f3:	29 c2                	sub    %eax,%edx
+  8004f5:	89 d0                	mov    %edx,%eax
+  8004f7:	eb 05                	jmp    8004fe <strncmp+0x54>
+  8004f9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8004fe:	5d                   	pop    %ebp
+  8004ff:	c3                   	ret    
+
+00800500 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800500:	55                   	push   %ebp
+  800501:	89 e5                	mov    %esp,%ebp
+  800503:	83 ec 04             	sub    $0x4,%esp
+  800506:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800509:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  80050c:	eb 14                	jmp    800522 <strchr+0x22>
+        if (*s == c) {
+  80050e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800511:	0f b6 00             	movzbl (%eax),%eax
+  800514:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800517:	75 05                	jne    80051e <strchr+0x1e>
+            return (char *)s;
+  800519:	8b 45 08             	mov    0x8(%ebp),%eax
+  80051c:	eb 13                	jmp    800531 <strchr+0x31>
+        }
+        s ++;
+  80051e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800522:	8b 45 08             	mov    0x8(%ebp),%eax
+  800525:	0f b6 00             	movzbl (%eax),%eax
+  800528:	84 c0                	test   %al,%al
+  80052a:	75 e2                	jne    80050e <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  80052c:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800531:	c9                   	leave  
+  800532:	c3                   	ret    
+
+00800533 <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800533:	55                   	push   %ebp
+  800534:	89 e5                	mov    %esp,%ebp
+  800536:	83 ec 04             	sub    $0x4,%esp
+  800539:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80053c:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  80053f:	eb 0f                	jmp    800550 <strfind+0x1d>
+        if (*s == c) {
+  800541:	8b 45 08             	mov    0x8(%ebp),%eax
+  800544:	0f b6 00             	movzbl (%eax),%eax
+  800547:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  80054a:	74 10                	je     80055c <strfind+0x29>
+            break;
+        }
+        s ++;
+  80054c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800550:	8b 45 08             	mov    0x8(%ebp),%eax
+  800553:	0f b6 00             	movzbl (%eax),%eax
+  800556:	84 c0                	test   %al,%al
+  800558:	75 e7                	jne    800541 <strfind+0xe>
+  80055a:	eb 01                	jmp    80055d <strfind+0x2a>
+        if (*s == c) {
+            break;
+  80055c:	90                   	nop
+        }
+        s ++;
+    }
+    return (char *)s;
+  80055d:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800560:	c9                   	leave  
+  800561:	c3                   	ret    
+
+00800562 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800562:	55                   	push   %ebp
+  800563:	89 e5                	mov    %esp,%ebp
+  800565:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800568:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  80056f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800576:	eb 04                	jmp    80057c <strtol+0x1a>
+        s ++;
+  800578:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80057c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80057f:	0f b6 00             	movzbl (%eax),%eax
+  800582:	3c 20                	cmp    $0x20,%al
+  800584:	74 f2                	je     800578 <strtol+0x16>
+  800586:	8b 45 08             	mov    0x8(%ebp),%eax
+  800589:	0f b6 00             	movzbl (%eax),%eax
+  80058c:	3c 09                	cmp    $0x9,%al
+  80058e:	74 e8                	je     800578 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800590:	8b 45 08             	mov    0x8(%ebp),%eax
+  800593:	0f b6 00             	movzbl (%eax),%eax
+  800596:	3c 2b                	cmp    $0x2b,%al
+  800598:	75 06                	jne    8005a0 <strtol+0x3e>
+        s ++;
+  80059a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  80059e:	eb 15                	jmp    8005b5 <strtol+0x53>
+    }
+    else if (*s == '-') {
+  8005a0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a3:	0f b6 00             	movzbl (%eax),%eax
+  8005a6:	3c 2d                	cmp    $0x2d,%al
+  8005a8:	75 0b                	jne    8005b5 <strtol+0x53>
+        s ++, neg = 1;
+  8005aa:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005ae:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  8005b5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005b9:	74 06                	je     8005c1 <strtol+0x5f>
+  8005bb:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  8005bf:	75 24                	jne    8005e5 <strtol+0x83>
+  8005c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005c4:	0f b6 00             	movzbl (%eax),%eax
+  8005c7:	3c 30                	cmp    $0x30,%al
+  8005c9:	75 1a                	jne    8005e5 <strtol+0x83>
+  8005cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ce:	83 c0 01             	add    $0x1,%eax
+  8005d1:	0f b6 00             	movzbl (%eax),%eax
+  8005d4:	3c 78                	cmp    $0x78,%al
+  8005d6:	75 0d                	jne    8005e5 <strtol+0x83>
+        s += 2, base = 16;
+  8005d8:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005dc:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005e3:	eb 2a                	jmp    80060f <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005e5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005e9:	75 17                	jne    800602 <strtol+0xa0>
+  8005eb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ee:	0f b6 00             	movzbl (%eax),%eax
+  8005f1:	3c 30                	cmp    $0x30,%al
+  8005f3:	75 0d                	jne    800602 <strtol+0xa0>
+        s ++, base = 8;
+  8005f5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005f9:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800600:	eb 0d                	jmp    80060f <strtol+0xad>
+    }
+    else if (base == 0) {
+  800602:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800606:	75 07                	jne    80060f <strtol+0xad>
+        base = 10;
+  800608:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  80060f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800612:	0f b6 00             	movzbl (%eax),%eax
+  800615:	3c 2f                	cmp    $0x2f,%al
+  800617:	7e 1b                	jle    800634 <strtol+0xd2>
+  800619:	8b 45 08             	mov    0x8(%ebp),%eax
+  80061c:	0f b6 00             	movzbl (%eax),%eax
+  80061f:	3c 39                	cmp    $0x39,%al
+  800621:	7f 11                	jg     800634 <strtol+0xd2>
+            dig = *s - '0';
+  800623:	8b 45 08             	mov    0x8(%ebp),%eax
+  800626:	0f b6 00             	movzbl (%eax),%eax
+  800629:	0f be c0             	movsbl %al,%eax
+  80062c:	83 e8 30             	sub    $0x30,%eax
+  80062f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800632:	eb 48                	jmp    80067c <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800634:	8b 45 08             	mov    0x8(%ebp),%eax
+  800637:	0f b6 00             	movzbl (%eax),%eax
+  80063a:	3c 60                	cmp    $0x60,%al
+  80063c:	7e 1b                	jle    800659 <strtol+0xf7>
+  80063e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800641:	0f b6 00             	movzbl (%eax),%eax
+  800644:	3c 7a                	cmp    $0x7a,%al
+  800646:	7f 11                	jg     800659 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800648:	8b 45 08             	mov    0x8(%ebp),%eax
+  80064b:	0f b6 00             	movzbl (%eax),%eax
+  80064e:	0f be c0             	movsbl %al,%eax
+  800651:	83 e8 57             	sub    $0x57,%eax
+  800654:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800657:	eb 23                	jmp    80067c <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800659:	8b 45 08             	mov    0x8(%ebp),%eax
+  80065c:	0f b6 00             	movzbl (%eax),%eax
+  80065f:	3c 40                	cmp    $0x40,%al
+  800661:	7e 3c                	jle    80069f <strtol+0x13d>
+  800663:	8b 45 08             	mov    0x8(%ebp),%eax
+  800666:	0f b6 00             	movzbl (%eax),%eax
+  800669:	3c 5a                	cmp    $0x5a,%al
+  80066b:	7f 32                	jg     80069f <strtol+0x13d>
+            dig = *s - 'A' + 10;
+  80066d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800670:	0f b6 00             	movzbl (%eax),%eax
+  800673:	0f be c0             	movsbl %al,%eax
+  800676:	83 e8 37             	sub    $0x37,%eax
+  800679:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  80067c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80067f:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800682:	7d 1a                	jge    80069e <strtol+0x13c>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  800684:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800688:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80068b:	0f af 45 10          	imul   0x10(%ebp),%eax
+  80068f:	89 c2                	mov    %eax,%edx
+  800691:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800694:	01 d0                	add    %edx,%eax
+  800696:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800699:	e9 71 ff ff ff       	jmp    80060f <strtol+0xad>
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+            break;
+  80069e:	90                   	nop
+        }
+        s ++, val = (val * base) + dig;
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  80069f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8006a3:	74 08                	je     8006ad <strtol+0x14b>
+        *endptr = (char *) s;
+  8006a5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006a8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006ab:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  8006ad:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  8006b1:	74 07                	je     8006ba <strtol+0x158>
+  8006b3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006b6:	f7 d8                	neg    %eax
+  8006b8:	eb 03                	jmp    8006bd <strtol+0x15b>
+  8006ba:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  8006bd:	c9                   	leave  
+  8006be:	c3                   	ret    
+
+008006bf <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  8006bf:	55                   	push   %ebp
+  8006c0:	89 e5                	mov    %esp,%ebp
+  8006c2:	57                   	push   %edi
+  8006c3:	83 ec 24             	sub    $0x24,%esp
+  8006c6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006c9:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006cc:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006d0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006d3:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006d6:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006d9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006df:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006e2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006e6:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006e9:	89 d7                	mov    %edx,%edi
+  8006eb:	f3 aa                	rep stos %al,%es:(%edi)
+  8006ed:	89 fa                	mov    %edi,%edx
+  8006ef:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8006f2:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  8006f5:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006f8:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  8006f9:	83 c4 24             	add    $0x24,%esp
+  8006fc:	5f                   	pop    %edi
+  8006fd:	5d                   	pop    %ebp
+  8006fe:	c3                   	ret    
+
+008006ff <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  8006ff:	55                   	push   %ebp
+  800700:	89 e5                	mov    %esp,%ebp
+  800702:	57                   	push   %edi
+  800703:	56                   	push   %esi
+  800704:	53                   	push   %ebx
+  800705:	83 ec 30             	sub    $0x30,%esp
+  800708:	8b 45 08             	mov    0x8(%ebp),%eax
+  80070b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80070e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800711:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800714:	8b 45 10             	mov    0x10(%ebp),%eax
+  800717:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  80071a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80071d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800720:	73 42                	jae    800764 <memmove+0x65>
+  800722:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800725:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800728:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80072b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80072e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800731:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800734:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800737:	c1 e8 02             	shr    $0x2,%eax
+  80073a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  80073c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  80073f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800742:	89 d7                	mov    %edx,%edi
+  800744:	89 c6                	mov    %eax,%esi
+  800746:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800748:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  80074b:	83 e1 03             	and    $0x3,%ecx
+  80074e:	74 02                	je     800752 <memmove+0x53>
+  800750:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800752:	89 f0                	mov    %esi,%eax
+  800754:	89 fa                	mov    %edi,%edx
+  800756:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800759:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  80075c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  80075f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  800762:	eb 36                	jmp    80079a <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800764:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800767:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80076a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80076d:	01 c2                	add    %eax,%edx
+  80076f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800772:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800775:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800778:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  80077b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80077e:	89 c1                	mov    %eax,%ecx
+  800780:	89 d8                	mov    %ebx,%eax
+  800782:	89 d6                	mov    %edx,%esi
+  800784:	89 c7                	mov    %eax,%edi
+  800786:	fd                   	std    
+  800787:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800789:	fc                   	cld    
+  80078a:	89 f8                	mov    %edi,%eax
+  80078c:	89 f2                	mov    %esi,%edx
+  80078e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800791:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800794:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800797:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  80079a:	83 c4 30             	add    $0x30,%esp
+  80079d:	5b                   	pop    %ebx
+  80079e:	5e                   	pop    %esi
+  80079f:	5f                   	pop    %edi
+  8007a0:	5d                   	pop    %ebp
+  8007a1:	c3                   	ret    
+
+008007a2 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  8007a2:	55                   	push   %ebp
+  8007a3:	89 e5                	mov    %esp,%ebp
+  8007a5:	57                   	push   %edi
+  8007a6:	56                   	push   %esi
+  8007a7:	83 ec 20             	sub    $0x20,%esp
+  8007aa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8007b0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007b6:	8b 45 10             	mov    0x10(%ebp),%eax
+  8007b9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  8007bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8007bf:	c1 e8 02             	shr    $0x2,%eax
+  8007c2:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  8007c4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007ca:	89 d7                	mov    %edx,%edi
+  8007cc:	89 c6                	mov    %eax,%esi
+  8007ce:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007d0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007d3:	83 e1 03             	and    $0x3,%ecx
+  8007d6:	74 02                	je     8007da <memcpy+0x38>
+  8007d8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007da:	89 f0                	mov    %esi,%eax
+  8007dc:	89 fa                	mov    %edi,%edx
+  8007de:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007e1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007e4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  8007e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007ea:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007eb:	83 c4 20             	add    $0x20,%esp
+  8007ee:	5e                   	pop    %esi
+  8007ef:	5f                   	pop    %edi
+  8007f0:	5d                   	pop    %ebp
+  8007f1:	c3                   	ret    
+
+008007f2 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  8007f2:	55                   	push   %ebp
+  8007f3:	89 e5                	mov    %esp,%ebp
+  8007f5:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  8007f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007fb:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  8007fe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800801:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800804:	eb 30                	jmp    800836 <memcmp+0x44>
+        if (*s1 != *s2) {
+  800806:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800809:	0f b6 10             	movzbl (%eax),%edx
+  80080c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80080f:	0f b6 00             	movzbl (%eax),%eax
+  800812:	38 c2                	cmp    %al,%dl
+  800814:	74 18                	je     80082e <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800816:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800819:	0f b6 00             	movzbl (%eax),%eax
+  80081c:	0f b6 d0             	movzbl %al,%edx
+  80081f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800822:	0f b6 00             	movzbl (%eax),%eax
+  800825:	0f b6 c0             	movzbl %al,%eax
+  800828:	29 c2                	sub    %eax,%edx
+  80082a:	89 d0                	mov    %edx,%eax
+  80082c:	eb 1a                	jmp    800848 <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  80082e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800832:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800836:	8b 45 10             	mov    0x10(%ebp),%eax
+  800839:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80083c:	89 55 10             	mov    %edx,0x10(%ebp)
+  80083f:	85 c0                	test   %eax,%eax
+  800841:	75 c3                	jne    800806 <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800843:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800848:	c9                   	leave  
+  800849:	c3                   	ret    
+
+0080084a <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  80084a:	55                   	push   %ebp
+  80084b:	89 e5                	mov    %esp,%ebp
+  80084d:	83 ec 38             	sub    $0x38,%esp
+  800850:	8b 45 10             	mov    0x10(%ebp),%eax
+  800853:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800856:	8b 45 14             	mov    0x14(%ebp),%eax
+  800859:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80085c:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  80085f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800862:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800865:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800868:	8b 45 18             	mov    0x18(%ebp),%eax
+  80086b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  80086e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800871:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800874:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800877:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  80087a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80087d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800880:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800884:	74 1c                	je     8008a2 <printnum+0x58>
+  800886:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800889:	ba 00 00 00 00       	mov    $0x0,%edx
+  80088e:	f7 75 e4             	divl   -0x1c(%ebp)
+  800891:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800894:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800897:	ba 00 00 00 00       	mov    $0x0,%edx
+  80089c:	f7 75 e4             	divl   -0x1c(%ebp)
+  80089f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008a2:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008a8:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008ab:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8008ae:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8008b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008b4:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8008b7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8008ba:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8008bd:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8008c0:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8008c3:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008c6:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008cb:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008ce:	77 41                	ja     800911 <printnum+0xc7>
+  8008d0:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008d3:	72 05                	jb     8008da <printnum+0x90>
+  8008d5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  8008d8:	77 37                	ja     800911 <printnum+0xc7>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008da:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008dd:	83 e8 01             	sub    $0x1,%eax
+  8008e0:	83 ec 04             	sub    $0x4,%esp
+  8008e3:	ff 75 20             	pushl  0x20(%ebp)
+  8008e6:	50                   	push   %eax
+  8008e7:	ff 75 18             	pushl  0x18(%ebp)
+  8008ea:	ff 75 ec             	pushl  -0x14(%ebp)
+  8008ed:	ff 75 e8             	pushl  -0x18(%ebp)
+  8008f0:	ff 75 0c             	pushl  0xc(%ebp)
+  8008f3:	ff 75 08             	pushl  0x8(%ebp)
+  8008f6:	e8 4f ff ff ff       	call   80084a <printnum>
+  8008fb:	83 c4 20             	add    $0x20,%esp
+  8008fe:	eb 1b                	jmp    80091b <printnum+0xd1>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800900:	83 ec 08             	sub    $0x8,%esp
+  800903:	ff 75 0c             	pushl  0xc(%ebp)
+  800906:	ff 75 20             	pushl  0x20(%ebp)
+  800909:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090c:	ff d0                	call   *%eax
+  80090e:	83 c4 10             	add    $0x10,%esp
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  800911:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  800915:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  800919:	7f e5                	jg     800900 <printnum+0xb6>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  80091b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  80091e:	05 a4 14 80 00       	add    $0x8014a4,%eax
+  800923:	0f b6 00             	movzbl (%eax),%eax
+  800926:	0f be c0             	movsbl %al,%eax
+  800929:	83 ec 08             	sub    $0x8,%esp
+  80092c:	ff 75 0c             	pushl  0xc(%ebp)
+  80092f:	50                   	push   %eax
+  800930:	8b 45 08             	mov    0x8(%ebp),%eax
+  800933:	ff d0                	call   *%eax
+  800935:	83 c4 10             	add    $0x10,%esp
+}
+  800938:	90                   	nop
+  800939:	c9                   	leave  
+  80093a:	c3                   	ret    
+
+0080093b <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  80093b:	55                   	push   %ebp
+  80093c:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  80093e:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800942:	7e 14                	jle    800958 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  800944:	8b 45 08             	mov    0x8(%ebp),%eax
+  800947:	8b 00                	mov    (%eax),%eax
+  800949:	8d 48 08             	lea    0x8(%eax),%ecx
+  80094c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80094f:	89 0a                	mov    %ecx,(%edx)
+  800951:	8b 50 04             	mov    0x4(%eax),%edx
+  800954:	8b 00                	mov    (%eax),%eax
+  800956:	eb 30                	jmp    800988 <getuint+0x4d>
+    }
+    else if (lflag) {
+  800958:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80095c:	74 16                	je     800974 <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  80095e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800961:	8b 00                	mov    (%eax),%eax
+  800963:	8d 48 04             	lea    0x4(%eax),%ecx
+  800966:	8b 55 08             	mov    0x8(%ebp),%edx
+  800969:	89 0a                	mov    %ecx,(%edx)
+  80096b:	8b 00                	mov    (%eax),%eax
+  80096d:	ba 00 00 00 00       	mov    $0x0,%edx
+  800972:	eb 14                	jmp    800988 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  800974:	8b 45 08             	mov    0x8(%ebp),%eax
+  800977:	8b 00                	mov    (%eax),%eax
+  800979:	8d 48 04             	lea    0x4(%eax),%ecx
+  80097c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80097f:	89 0a                	mov    %ecx,(%edx)
+  800981:	8b 00                	mov    (%eax),%eax
+  800983:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800988:	5d                   	pop    %ebp
+  800989:	c3                   	ret    
+
+0080098a <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  80098a:	55                   	push   %ebp
+  80098b:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  80098d:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800991:	7e 14                	jle    8009a7 <getint+0x1d>
+        return va_arg(*ap, long long);
+  800993:	8b 45 08             	mov    0x8(%ebp),%eax
+  800996:	8b 00                	mov    (%eax),%eax
+  800998:	8d 48 08             	lea    0x8(%eax),%ecx
+  80099b:	8b 55 08             	mov    0x8(%ebp),%edx
+  80099e:	89 0a                	mov    %ecx,(%edx)
+  8009a0:	8b 50 04             	mov    0x4(%eax),%edx
+  8009a3:	8b 00                	mov    (%eax),%eax
+  8009a5:	eb 28                	jmp    8009cf <getint+0x45>
+    }
+    else if (lflag) {
+  8009a7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8009ab:	74 12                	je     8009bf <getint+0x35>
+        return va_arg(*ap, long);
+  8009ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b0:	8b 00                	mov    (%eax),%eax
+  8009b2:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009b5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009b8:	89 0a                	mov    %ecx,(%edx)
+  8009ba:	8b 00                	mov    (%eax),%eax
+  8009bc:	99                   	cltd   
+  8009bd:	eb 10                	jmp    8009cf <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  8009bf:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009c2:	8b 00                	mov    (%eax),%eax
+  8009c4:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009c7:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009ca:	89 0a                	mov    %ecx,(%edx)
+  8009cc:	8b 00                	mov    (%eax),%eax
+  8009ce:	99                   	cltd   
+    }
+}
+  8009cf:	5d                   	pop    %ebp
+  8009d0:	c3                   	ret    
+
+008009d1 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009d1:	55                   	push   %ebp
+  8009d2:	89 e5                	mov    %esp,%ebp
+  8009d4:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009d7:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009da:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8009e0:	50                   	push   %eax
+  8009e1:	ff 75 10             	pushl  0x10(%ebp)
+  8009e4:	ff 75 0c             	pushl  0xc(%ebp)
+  8009e7:	ff 75 08             	pushl  0x8(%ebp)
+  8009ea:	e8 06 00 00 00       	call   8009f5 <vprintfmt>
+  8009ef:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8009f2:	90                   	nop
+  8009f3:	c9                   	leave  
+  8009f4:	c3                   	ret    
+
+008009f5 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8009f5:	55                   	push   %ebp
+  8009f6:	89 e5                	mov    %esp,%ebp
+  8009f8:	56                   	push   %esi
+  8009f9:	53                   	push   %ebx
+  8009fa:	83 ec 20             	sub    $0x20,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009fd:	eb 17                	jmp    800a16 <vprintfmt+0x21>
+            if (ch == '\0') {
+  8009ff:	85 db                	test   %ebx,%ebx
+  800a01:	0f 84 8e 03 00 00    	je     800d95 <vprintfmt+0x3a0>
+                return;
+            }
+            putch(ch, putdat);
+  800a07:	83 ec 08             	sub    $0x8,%esp
+  800a0a:	ff 75 0c             	pushl  0xc(%ebp)
+  800a0d:	53                   	push   %ebx
+  800a0e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a11:	ff d0                	call   *%eax
+  800a13:	83 c4 10             	add    $0x10,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a16:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a19:	8d 50 01             	lea    0x1(%eax),%edx
+  800a1c:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a1f:	0f b6 00             	movzbl (%eax),%eax
+  800a22:	0f b6 d8             	movzbl %al,%ebx
+  800a25:	83 fb 25             	cmp    $0x25,%ebx
+  800a28:	75 d5                	jne    8009ff <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a2a:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a2e:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a38:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a3b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a42:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a45:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a48:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a4b:	8d 50 01             	lea    0x1(%eax),%edx
+  800a4e:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a51:	0f b6 00             	movzbl (%eax),%eax
+  800a54:	0f b6 d8             	movzbl %al,%ebx
+  800a57:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a5a:	83 f8 55             	cmp    $0x55,%eax
+  800a5d:	0f 87 05 03 00 00    	ja     800d68 <vprintfmt+0x373>
+  800a63:	8b 04 85 c8 14 80 00 	mov    0x8014c8(,%eax,4),%eax
+  800a6a:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a6c:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a70:	eb d6                	jmp    800a48 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a72:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800a76:	eb d0                	jmp    800a48 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a78:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800a7f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a82:	89 d0                	mov    %edx,%eax
+  800a84:	c1 e0 02             	shl    $0x2,%eax
+  800a87:	01 d0                	add    %edx,%eax
+  800a89:	01 c0                	add    %eax,%eax
+  800a8b:	01 d8                	add    %ebx,%eax
+  800a8d:	83 e8 30             	sub    $0x30,%eax
+  800a90:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800a93:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a96:	0f b6 00             	movzbl (%eax),%eax
+  800a99:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800a9c:	83 fb 2f             	cmp    $0x2f,%ebx
+  800a9f:	7e 39                	jle    800ada <vprintfmt+0xe5>
+  800aa1:	83 fb 39             	cmp    $0x39,%ebx
+  800aa4:	7f 34                	jg     800ada <vprintfmt+0xe5>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800aa6:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  800aaa:	eb d3                	jmp    800a7f <vprintfmt+0x8a>
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800aac:	8b 45 14             	mov    0x14(%ebp),%eax
+  800aaf:	8d 50 04             	lea    0x4(%eax),%edx
+  800ab2:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ab5:	8b 00                	mov    (%eax),%eax
+  800ab7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800aba:	eb 1f                	jmp    800adb <vprintfmt+0xe6>
+
+        case '.':
+            if (width < 0)
+  800abc:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ac0:	79 86                	jns    800a48 <vprintfmt+0x53>
+                width = 0;
+  800ac2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800ac9:	e9 7a ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800ace:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800ad5:	e9 6e ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+            goto process_precision;
+  800ada:	90                   	nop
+        case '#':
+            altflag = 1;
+            goto reswitch;
+
+        process_precision:
+            if (width < 0)
+  800adb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800adf:	0f 89 63 ff ff ff    	jns    800a48 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800ae5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ae8:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800aeb:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800af2:	e9 51 ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800af7:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800afb:	e9 48 ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800b00:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b03:	8d 50 04             	lea    0x4(%eax),%edx
+  800b06:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b09:	8b 00                	mov    (%eax),%eax
+  800b0b:	83 ec 08             	sub    $0x8,%esp
+  800b0e:	ff 75 0c             	pushl  0xc(%ebp)
+  800b11:	50                   	push   %eax
+  800b12:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b15:	ff d0                	call   *%eax
+  800b17:	83 c4 10             	add    $0x10,%esp
+            break;
+  800b1a:	e9 71 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800b1f:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b22:	8d 50 04             	lea    0x4(%eax),%edx
+  800b25:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b28:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b2a:	85 db                	test   %ebx,%ebx
+  800b2c:	79 02                	jns    800b30 <vprintfmt+0x13b>
+                err = -err;
+  800b2e:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b30:	83 fb 18             	cmp    $0x18,%ebx
+  800b33:	7f 0b                	jg     800b40 <vprintfmt+0x14b>
+  800b35:	8b 34 9d 40 14 80 00 	mov    0x801440(,%ebx,4),%esi
+  800b3c:	85 f6                	test   %esi,%esi
+  800b3e:	75 19                	jne    800b59 <vprintfmt+0x164>
+                printfmt(putch, putdat, "error %d", err);
+  800b40:	53                   	push   %ebx
+  800b41:	68 b5 14 80 00       	push   $0x8014b5
+  800b46:	ff 75 0c             	pushl  0xc(%ebp)
+  800b49:	ff 75 08             	pushl  0x8(%ebp)
+  800b4c:	e8 80 fe ff ff       	call   8009d1 <printfmt>
+  800b51:	83 c4 10             	add    $0x10,%esp
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b54:	e9 37 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  800b59:	56                   	push   %esi
+  800b5a:	68 be 14 80 00       	push   $0x8014be
+  800b5f:	ff 75 0c             	pushl  0xc(%ebp)
+  800b62:	ff 75 08             	pushl  0x8(%ebp)
+  800b65:	e8 67 fe ff ff       	call   8009d1 <printfmt>
+  800b6a:	83 c4 10             	add    $0x10,%esp
+            }
+            break;
+  800b6d:	e9 1e 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800b72:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b75:	8d 50 04             	lea    0x4(%eax),%edx
+  800b78:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b7b:	8b 30                	mov    (%eax),%esi
+  800b7d:	85 f6                	test   %esi,%esi
+  800b7f:	75 05                	jne    800b86 <vprintfmt+0x191>
+                p = "(null)";
+  800b81:	be c1 14 80 00       	mov    $0x8014c1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800b86:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b8a:	7e 76                	jle    800c02 <vprintfmt+0x20d>
+  800b8c:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800b90:	74 70                	je     800c02 <vprintfmt+0x20d>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b92:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b95:	83 ec 08             	sub    $0x8,%esp
+  800b98:	50                   	push   %eax
+  800b99:	56                   	push   %esi
+  800b9a:	e8 17 f8 ff ff       	call   8003b6 <strnlen>
+  800b9f:	83 c4 10             	add    $0x10,%esp
+  800ba2:	89 c2                	mov    %eax,%edx
+  800ba4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ba7:	29 d0                	sub    %edx,%eax
+  800ba9:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800bac:	eb 17                	jmp    800bc5 <vprintfmt+0x1d0>
+                    putch(padc, putdat);
+  800bae:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800bb2:	83 ec 08             	sub    $0x8,%esp
+  800bb5:	ff 75 0c             	pushl  0xc(%ebp)
+  800bb8:	50                   	push   %eax
+  800bb9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bbc:	ff d0                	call   *%eax
+  800bbe:	83 c4 10             	add    $0x10,%esp
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bc1:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800bc5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800bc9:	7f e3                	jg     800bae <vprintfmt+0x1b9>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bcb:	eb 35                	jmp    800c02 <vprintfmt+0x20d>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800bcd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800bd1:	74 1c                	je     800bef <vprintfmt+0x1fa>
+  800bd3:	83 fb 1f             	cmp    $0x1f,%ebx
+  800bd6:	7e 05                	jle    800bdd <vprintfmt+0x1e8>
+  800bd8:	83 fb 7e             	cmp    $0x7e,%ebx
+  800bdb:	7e 12                	jle    800bef <vprintfmt+0x1fa>
+                    putch('?', putdat);
+  800bdd:	83 ec 08             	sub    $0x8,%esp
+  800be0:	ff 75 0c             	pushl  0xc(%ebp)
+  800be3:	6a 3f                	push   $0x3f
+  800be5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800be8:	ff d0                	call   *%eax
+  800bea:	83 c4 10             	add    $0x10,%esp
+  800bed:	eb 0f                	jmp    800bfe <vprintfmt+0x209>
+                }
+                else {
+                    putch(ch, putdat);
+  800bef:	83 ec 08             	sub    $0x8,%esp
+  800bf2:	ff 75 0c             	pushl  0xc(%ebp)
+  800bf5:	53                   	push   %ebx
+  800bf6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bf9:	ff d0                	call   *%eax
+  800bfb:	83 c4 10             	add    $0x10,%esp
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bfe:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c02:	89 f0                	mov    %esi,%eax
+  800c04:	8d 70 01             	lea    0x1(%eax),%esi
+  800c07:	0f b6 00             	movzbl (%eax),%eax
+  800c0a:	0f be d8             	movsbl %al,%ebx
+  800c0d:	85 db                	test   %ebx,%ebx
+  800c0f:	74 26                	je     800c37 <vprintfmt+0x242>
+  800c11:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c15:	78 b6                	js     800bcd <vprintfmt+0x1d8>
+  800c17:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  800c1b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c1f:	79 ac                	jns    800bcd <vprintfmt+0x1d8>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c21:	eb 14                	jmp    800c37 <vprintfmt+0x242>
+                putch(' ', putdat);
+  800c23:	83 ec 08             	sub    $0x8,%esp
+  800c26:	ff 75 0c             	pushl  0xc(%ebp)
+  800c29:	6a 20                	push   $0x20
+  800c2b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2e:	ff d0                	call   *%eax
+  800c30:	83 c4 10             	add    $0x10,%esp
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c33:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c37:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c3b:	7f e6                	jg     800c23 <vprintfmt+0x22e>
+                putch(' ', putdat);
+            }
+            break;
+  800c3d:	e9 4e 01 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c42:	83 ec 08             	sub    $0x8,%esp
+  800c45:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c48:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c4b:	50                   	push   %eax
+  800c4c:	e8 39 fd ff ff       	call   80098a <getint>
+  800c51:	83 c4 10             	add    $0x10,%esp
+  800c54:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c57:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c5d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c60:	85 d2                	test   %edx,%edx
+  800c62:	79 23                	jns    800c87 <vprintfmt+0x292>
+                putch('-', putdat);
+  800c64:	83 ec 08             	sub    $0x8,%esp
+  800c67:	ff 75 0c             	pushl  0xc(%ebp)
+  800c6a:	6a 2d                	push   $0x2d
+  800c6c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c6f:	ff d0                	call   *%eax
+  800c71:	83 c4 10             	add    $0x10,%esp
+                num = -(long long)num;
+  800c74:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c77:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c7a:	f7 d8                	neg    %eax
+  800c7c:	83 d2 00             	adc    $0x0,%edx
+  800c7f:	f7 da                	neg    %edx
+  800c81:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c84:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800c87:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c8e:	e9 9f 00 00 00       	jmp    800d32 <vprintfmt+0x33d>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800c93:	83 ec 08             	sub    $0x8,%esp
+  800c96:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c99:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c9c:	50                   	push   %eax
+  800c9d:	e8 99 fc ff ff       	call   80093b <getuint>
+  800ca2:	83 c4 10             	add    $0x10,%esp
+  800ca5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ca8:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800cab:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cb2:	eb 7e                	jmp    800d32 <vprintfmt+0x33d>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800cb4:	83 ec 08             	sub    $0x8,%esp
+  800cb7:	ff 75 e0             	pushl  -0x20(%ebp)
+  800cba:	8d 45 14             	lea    0x14(%ebp),%eax
+  800cbd:	50                   	push   %eax
+  800cbe:	e8 78 fc ff ff       	call   80093b <getuint>
+  800cc3:	83 c4 10             	add    $0x10,%esp
+  800cc6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cc9:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800ccc:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800cd3:	eb 5d                	jmp    800d32 <vprintfmt+0x33d>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800cd5:	83 ec 08             	sub    $0x8,%esp
+  800cd8:	ff 75 0c             	pushl  0xc(%ebp)
+  800cdb:	6a 30                	push   $0x30
+  800cdd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ce0:	ff d0                	call   *%eax
+  800ce2:	83 c4 10             	add    $0x10,%esp
+            putch('x', putdat);
+  800ce5:	83 ec 08             	sub    $0x8,%esp
+  800ce8:	ff 75 0c             	pushl  0xc(%ebp)
+  800ceb:	6a 78                	push   $0x78
+  800ced:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cf0:	ff d0                	call   *%eax
+  800cf2:	83 c4 10             	add    $0x10,%esp
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800cf5:	8b 45 14             	mov    0x14(%ebp),%eax
+  800cf8:	8d 50 04             	lea    0x4(%eax),%edx
+  800cfb:	89 55 14             	mov    %edx,0x14(%ebp)
+  800cfe:	8b 00                	mov    (%eax),%eax
+  800d00:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d03:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800d0a:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800d11:	eb 1f                	jmp    800d32 <vprintfmt+0x33d>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800d13:	83 ec 08             	sub    $0x8,%esp
+  800d16:	ff 75 e0             	pushl  -0x20(%ebp)
+  800d19:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d1c:	50                   	push   %eax
+  800d1d:	e8 19 fc ff ff       	call   80093b <getuint>
+  800d22:	83 c4 10             	add    $0x10,%esp
+  800d25:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d28:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d2b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d32:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d36:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d39:	83 ec 04             	sub    $0x4,%esp
+  800d3c:	52                   	push   %edx
+  800d3d:	ff 75 e8             	pushl  -0x18(%ebp)
+  800d40:	50                   	push   %eax
+  800d41:	ff 75 f4             	pushl  -0xc(%ebp)
+  800d44:	ff 75 f0             	pushl  -0x10(%ebp)
+  800d47:	ff 75 0c             	pushl  0xc(%ebp)
+  800d4a:	ff 75 08             	pushl  0x8(%ebp)
+  800d4d:	e8 f8 fa ff ff       	call   80084a <printnum>
+  800d52:	83 c4 20             	add    $0x20,%esp
+            break;
+  800d55:	eb 39                	jmp    800d90 <vprintfmt+0x39b>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800d57:	83 ec 08             	sub    $0x8,%esp
+  800d5a:	ff 75 0c             	pushl  0xc(%ebp)
+  800d5d:	53                   	push   %ebx
+  800d5e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d61:	ff d0                	call   *%eax
+  800d63:	83 c4 10             	add    $0x10,%esp
+            break;
+  800d66:	eb 28                	jmp    800d90 <vprintfmt+0x39b>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800d68:	83 ec 08             	sub    $0x8,%esp
+  800d6b:	ff 75 0c             	pushl  0xc(%ebp)
+  800d6e:	6a 25                	push   $0x25
+  800d70:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d73:	ff d0                	call   *%eax
+  800d75:	83 c4 10             	add    $0x10,%esp
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800d78:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d7c:	eb 04                	jmp    800d82 <vprintfmt+0x38d>
+  800d7e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d82:	8b 45 10             	mov    0x10(%ebp),%eax
+  800d85:	83 e8 01             	sub    $0x1,%eax
+  800d88:	0f b6 00             	movzbl (%eax),%eax
+  800d8b:	3c 25                	cmp    $0x25,%al
+  800d8d:	75 ef                	jne    800d7e <vprintfmt+0x389>
+                /* do nothing */;
+            break;
+  800d8f:	90                   	nop
+        }
+    }
+  800d90:	e9 68 fc ff ff       	jmp    8009fd <vprintfmt+0x8>
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+            if (ch == '\0') {
+                return;
+  800d95:	90                   	nop
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  800d96:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  800d99:	5b                   	pop    %ebx
+  800d9a:	5e                   	pop    %esi
+  800d9b:	5d                   	pop    %ebp
+  800d9c:	c3                   	ret    
+
+00800d9d <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800d9d:	55                   	push   %ebp
+  800d9e:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800da0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800da3:	8b 40 08             	mov    0x8(%eax),%eax
+  800da6:	8d 50 01             	lea    0x1(%eax),%edx
+  800da9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dac:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800daf:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db2:	8b 10                	mov    (%eax),%edx
+  800db4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db7:	8b 40 04             	mov    0x4(%eax),%eax
+  800dba:	39 c2                	cmp    %eax,%edx
+  800dbc:	73 12                	jae    800dd0 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800dbe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dc1:	8b 00                	mov    (%eax),%eax
+  800dc3:	8d 48 01             	lea    0x1(%eax),%ecx
+  800dc6:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800dc9:	89 0a                	mov    %ecx,(%edx)
+  800dcb:	8b 55 08             	mov    0x8(%ebp),%edx
+  800dce:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800dd0:	90                   	nop
+  800dd1:	5d                   	pop    %ebp
+  800dd2:	c3                   	ret    
+
+00800dd3 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800dd3:	55                   	push   %ebp
+  800dd4:	89 e5                	mov    %esp,%ebp
+  800dd6:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800dd9:	8d 45 14             	lea    0x14(%ebp),%eax
+  800ddc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800ddf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800de2:	50                   	push   %eax
+  800de3:	ff 75 10             	pushl  0x10(%ebp)
+  800de6:	ff 75 0c             	pushl  0xc(%ebp)
+  800de9:	ff 75 08             	pushl  0x8(%ebp)
+  800dec:	e8 0b 00 00 00       	call   800dfc <vsnprintf>
+  800df1:	83 c4 10             	add    $0x10,%esp
+  800df4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800df7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800dfa:	c9                   	leave  
+  800dfb:	c3                   	ret    
+
+00800dfc <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800dfc:	55                   	push   %ebp
+  800dfd:	89 e5                	mov    %esp,%ebp
+  800dff:	83 ec 18             	sub    $0x18,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800e02:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e05:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e08:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e0b:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800e0e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e11:	01 d0                	add    %edx,%eax
+  800e13:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e16:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800e1d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800e21:	74 0a                	je     800e2d <vsnprintf+0x31>
+  800e23:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800e26:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e29:	39 c2                	cmp    %eax,%edx
+  800e2b:	76 07                	jbe    800e34 <vsnprintf+0x38>
+        return -E_INVAL;
+  800e2d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e32:	eb 20                	jmp    800e54 <vsnprintf+0x58>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e34:	ff 75 14             	pushl  0x14(%ebp)
+  800e37:	ff 75 10             	pushl  0x10(%ebp)
+  800e3a:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800e3d:	50                   	push   %eax
+  800e3e:	68 9d 0d 80 00       	push   $0x800d9d
+  800e43:	e8 ad fb ff ff       	call   8009f5 <vprintfmt>
+  800e48:	83 c4 10             	add    $0x10,%esp
+    // null terminate the buffer
+    *b.buf = '\0';
+  800e4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e4e:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800e51:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e54:	c9                   	leave  
+  800e55:	c3                   	ret    
+
+00800e56 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800e56:	55                   	push   %ebp
+  800e57:	89 e5                	mov    %esp,%ebp
+  800e59:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800e5c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e5f:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800e65:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800e68:	b8 20 00 00 00       	mov    $0x20,%eax
+  800e6d:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800e70:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800e73:	89 c1                	mov    %eax,%ecx
+  800e75:	d3 ea                	shr    %cl,%edx
+  800e77:	89 d0                	mov    %edx,%eax
+}
+  800e79:	c9                   	leave  
+  800e7a:	c3                   	ret    
+
+00800e7b <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800e7b:	55                   	push   %ebp
+  800e7c:	89 e5                	mov    %esp,%ebp
+  800e7e:	57                   	push   %edi
+  800e7f:	56                   	push   %esi
+  800e80:	53                   	push   %ebx
+  800e81:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800e84:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e89:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800e8f:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800e95:	6b f0 05             	imul   $0x5,%eax,%esi
+  800e98:	01 fe                	add    %edi,%esi
+  800e9a:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800e9f:	f7 e7                	mul    %edi
+  800ea1:	01 d6                	add    %edx,%esi
+  800ea3:	89 f2                	mov    %esi,%edx
+  800ea5:	83 c0 0b             	add    $0xb,%eax
+  800ea8:	83 d2 00             	adc    $0x0,%edx
+  800eab:	89 c7                	mov    %eax,%edi
+  800ead:	83 e7 ff             	and    $0xffffffff,%edi
+  800eb0:	89 f9                	mov    %edi,%ecx
+  800eb2:	0f b7 da             	movzwl %dx,%ebx
+  800eb5:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800ebb:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800ec1:	a1 00 20 80 00       	mov    0x802000,%eax
+  800ec6:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ecc:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ed0:	c1 ea 0c             	shr    $0xc,%edx
+  800ed3:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ed6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800ed9:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ee0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ee3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ee6:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ee9:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800eec:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eef:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ef2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ef6:	74 1c                	je     800f14 <rand+0x99>
+  800ef8:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800efb:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f00:	f7 75 dc             	divl   -0x24(%ebp)
+  800f03:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800f06:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f09:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f0e:	f7 75 dc             	divl   -0x24(%ebp)
+  800f11:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800f14:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f17:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800f1a:	f7 75 dc             	divl   -0x24(%ebp)
+  800f1d:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f20:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f23:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f26:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800f29:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f2c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f2f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800f32:	83 c4 24             	add    $0x24,%esp
+  800f35:	5b                   	pop    %ebx
+  800f36:	5e                   	pop    %esi
+  800f37:	5f                   	pop    %edi
+  800f38:	5d                   	pop    %ebp
+  800f39:	c3                   	ret    
+
+00800f3a <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800f3a:	55                   	push   %ebp
+  800f3b:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800f3d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f40:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f45:	a3 00 20 80 00       	mov    %eax,0x802000
+  800f4a:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800f50:	90                   	nop
+  800f51:	5d                   	pop    %ebp
+  800f52:	c3                   	ret    
+
+00800f53 <work>:
+static int mata[MATSIZE][MATSIZE];
+static int matb[MATSIZE][MATSIZE];
+static int matc[MATSIZE][MATSIZE];
+
+void
+work(unsigned int times) {
+  800f53:	55                   	push   %ebp
+  800f54:	89 e5                	mov    %esp,%ebp
+  800f56:	53                   	push   %ebx
+  800f57:	83 ec 14             	sub    $0x14,%esp
+    int i, j, k, size = MATSIZE;
+  800f5a:	c7 45 e8 0a 00 00 00 	movl   $0xa,-0x18(%ebp)
+    for (i = 0; i < size; i ++) {
+  800f61:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  800f68:	eb 65                	jmp    800fcf <work+0x7c>
+        for (j = 0; j < size; j ++) {
+  800f6a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  800f71:	eb 50                	jmp    800fc3 <work+0x70>
+            mata[i][j] = matb[i][j] = 1;
+  800f73:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f76:	89 d0                	mov    %edx,%eax
+  800f78:	c1 e0 02             	shl    $0x2,%eax
+  800f7b:	01 d0                	add    %edx,%eax
+  800f7d:	01 c0                	add    %eax,%eax
+  800f7f:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800f82:	01 d0                	add    %edx,%eax
+  800f84:	c7 04 85 c0 21 80 00 	movl   $0x1,0x8021c0(,%eax,4)
+  800f8b:	01 00 00 00 
+  800f8f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800f92:	89 d0                	mov    %edx,%eax
+  800f94:	c1 e0 02             	shl    $0x2,%eax
+  800f97:	01 d0                	add    %edx,%eax
+  800f99:	01 c0                	add    %eax,%eax
+  800f9b:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800f9e:	01 d0                	add    %edx,%eax
+  800fa0:	8b 0c 85 c0 21 80 00 	mov    0x8021c0(,%eax,4),%ecx
+  800fa7:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800faa:	89 d0                	mov    %edx,%eax
+  800fac:	c1 e0 02             	shl    $0x2,%eax
+  800faf:	01 d0                	add    %edx,%eax
+  800fb1:	01 c0                	add    %eax,%eax
+  800fb3:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  800fb6:	01 d0                	add    %edx,%eax
+  800fb8:	89 0c 85 20 20 80 00 	mov    %ecx,0x802020(,%eax,4)
+
+void
+work(unsigned int times) {
+    int i, j, k, size = MATSIZE;
+    for (i = 0; i < size; i ++) {
+        for (j = 0; j < size; j ++) {
+  800fbf:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  800fc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800fc6:	3b 45 e8             	cmp    -0x18(%ebp),%eax
+  800fc9:	7c a8                	jl     800f73 <work+0x20>
+static int matc[MATSIZE][MATSIZE];
+
+void
+work(unsigned int times) {
+    int i, j, k, size = MATSIZE;
+    for (i = 0; i < size; i ++) {
+  800fcb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  800fcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800fd2:	3b 45 e8             	cmp    -0x18(%ebp),%eax
+  800fd5:	7c 93                	jl     800f6a <work+0x17>
+        for (j = 0; j < size; j ++) {
+            mata[i][j] = matb[i][j] = 1;
+        }
+    }
+
+    yield();
+  800fd7:	e8 50 f2 ff ff       	call   80022c <yield>
+
+    cprintf("pid %d is running (%d times)!.\n", getpid(), times);
+  800fdc:	e8 6f f2 ff ff       	call   800250 <getpid>
+  800fe1:	83 ec 04             	sub    $0x4,%esp
+  800fe4:	ff 75 08             	pushl  0x8(%ebp)
+  800fe7:	50                   	push   %eax
+  800fe8:	68 20 16 80 00       	push   $0x801620
+  800fed:	e8 0f f3 ff ff       	call   800301 <cprintf>
+  800ff2:	83 c4 10             	add    $0x10,%esp
+
+    while (times -- > 0) {
+  800ff5:	e9 5c 01 00 00       	jmp    801156 <work+0x203>
+        for (i = 0; i < size; i ++) {
+  800ffa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  801001:	e9 b6 00 00 00       	jmp    8010bc <work+0x169>
+            for (j = 0; j < size; j ++) {
+  801006:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  80100d:	e9 9a 00 00 00       	jmp    8010ac <work+0x159>
+                matc[i][j] = 0;
+  801012:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  801015:	89 d0                	mov    %edx,%eax
+  801017:	c1 e0 02             	shl    $0x2,%eax
+  80101a:	01 d0                	add    %edx,%eax
+  80101c:	01 c0                	add    %eax,%eax
+  80101e:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  801021:	01 d0                	add    %edx,%eax
+  801023:	c7 04 85 60 23 80 00 	movl   $0x0,0x802360(,%eax,4)
+  80102a:	00 00 00 00 
+                for (k = 0; k < size; k ++) {
+  80102e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
+  801035:	eb 69                	jmp    8010a0 <work+0x14d>
+                    matc[i][j] += mata[i][k] * matb[k][j];
+  801037:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80103a:	89 d0                	mov    %edx,%eax
+  80103c:	c1 e0 02             	shl    $0x2,%eax
+  80103f:	01 d0                	add    %edx,%eax
+  801041:	01 c0                	add    %eax,%eax
+  801043:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  801046:	01 d0                	add    %edx,%eax
+  801048:	8b 0c 85 60 23 80 00 	mov    0x802360(,%eax,4),%ecx
+  80104f:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  801052:	89 d0                	mov    %edx,%eax
+  801054:	c1 e0 02             	shl    $0x2,%eax
+  801057:	01 d0                	add    %edx,%eax
+  801059:	01 c0                	add    %eax,%eax
+  80105b:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80105e:	01 d0                	add    %edx,%eax
+  801060:	8b 1c 85 20 20 80 00 	mov    0x802020(,%eax,4),%ebx
+  801067:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  80106a:	89 d0                	mov    %edx,%eax
+  80106c:	c1 e0 02             	shl    $0x2,%eax
+  80106f:	01 d0                	add    %edx,%eax
+  801071:	01 c0                	add    %eax,%eax
+  801073:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  801076:	01 d0                	add    %edx,%eax
+  801078:	8b 04 85 c0 21 80 00 	mov    0x8021c0(,%eax,4),%eax
+  80107f:	0f af c3             	imul   %ebx,%eax
+  801082:	01 c1                	add    %eax,%ecx
+  801084:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  801087:	89 d0                	mov    %edx,%eax
+  801089:	c1 e0 02             	shl    $0x2,%eax
+  80108c:	01 d0                	add    %edx,%eax
+  80108e:	01 c0                	add    %eax,%eax
+  801090:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  801093:	01 d0                	add    %edx,%eax
+  801095:	89 0c 85 60 23 80 00 	mov    %ecx,0x802360(,%eax,4)
+
+    while (times -- > 0) {
+        for (i = 0; i < size; i ++) {
+            for (j = 0; j < size; j ++) {
+                matc[i][j] = 0;
+                for (k = 0; k < size; k ++) {
+  80109c:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
+  8010a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8010a3:	3b 45 e8             	cmp    -0x18(%ebp),%eax
+  8010a6:	7c 8f                	jl     801037 <work+0xe4>
+
+    cprintf("pid %d is running (%d times)!.\n", getpid(), times);
+
+    while (times -- > 0) {
+        for (i = 0; i < size; i ++) {
+            for (j = 0; j < size; j ++) {
+  8010a8:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8010ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8010af:	3b 45 e8             	cmp    -0x18(%ebp),%eax
+  8010b2:	0f 8c 5a ff ff ff    	jl     801012 <work+0xbf>
+    yield();
+
+    cprintf("pid %d is running (%d times)!.\n", getpid(), times);
+
+    while (times -- > 0) {
+        for (i = 0; i < size; i ++) {
+  8010b8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  8010bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8010bf:	3b 45 e8             	cmp    -0x18(%ebp),%eax
+  8010c2:	0f 8c 3e ff ff ff    	jl     801006 <work+0xb3>
+                for (k = 0; k < size; k ++) {
+                    matc[i][j] += mata[i][k] * matb[k][j];
+                }
+            }
+        }
+        for (i = 0; i < size; i ++) {
+  8010c8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  8010cf:	eb 79                	jmp    80114a <work+0x1f7>
+            for (j = 0; j < size; j ++) {
+  8010d1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8010d8:	eb 64                	jmp    80113e <work+0x1eb>
+                mata[i][j] = matb[i][j] = matc[i][j];
+  8010da:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8010dd:	89 d0                	mov    %edx,%eax
+  8010df:	c1 e0 02             	shl    $0x2,%eax
+  8010e2:	01 d0                	add    %edx,%eax
+  8010e4:	01 c0                	add    %eax,%eax
+  8010e6:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8010e9:	01 d0                	add    %edx,%eax
+  8010eb:	8b 0c 85 60 23 80 00 	mov    0x802360(,%eax,4),%ecx
+  8010f2:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8010f5:	89 d0                	mov    %edx,%eax
+  8010f7:	c1 e0 02             	shl    $0x2,%eax
+  8010fa:	01 d0                	add    %edx,%eax
+  8010fc:	01 c0                	add    %eax,%eax
+  8010fe:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  801101:	01 d0                	add    %edx,%eax
+  801103:	89 0c 85 c0 21 80 00 	mov    %ecx,0x8021c0(,%eax,4)
+  80110a:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  80110d:	89 d0                	mov    %edx,%eax
+  80110f:	c1 e0 02             	shl    $0x2,%eax
+  801112:	01 d0                	add    %edx,%eax
+  801114:	01 c0                	add    %eax,%eax
+  801116:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  801119:	01 d0                	add    %edx,%eax
+  80111b:	8b 0c 85 c0 21 80 00 	mov    0x8021c0(,%eax,4),%ecx
+  801122:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  801125:	89 d0                	mov    %edx,%eax
+  801127:	c1 e0 02             	shl    $0x2,%eax
+  80112a:	01 d0                	add    %edx,%eax
+  80112c:	01 c0                	add    %eax,%eax
+  80112e:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  801131:	01 d0                	add    %edx,%eax
+  801133:	89 0c 85 20 20 80 00 	mov    %ecx,0x802020(,%eax,4)
+                    matc[i][j] += mata[i][k] * matb[k][j];
+                }
+            }
+        }
+        for (i = 0; i < size; i ++) {
+            for (j = 0; j < size; j ++) {
+  80113a:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  80113e:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  801141:	3b 45 e8             	cmp    -0x18(%ebp),%eax
+  801144:	7c 94                	jl     8010da <work+0x187>
+                for (k = 0; k < size; k ++) {
+                    matc[i][j] += mata[i][k] * matb[k][j];
+                }
+            }
+        }
+        for (i = 0; i < size; i ++) {
+  801146:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  80114a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80114d:	3b 45 e8             	cmp    -0x18(%ebp),%eax
+  801150:	0f 8c 7b ff ff ff    	jl     8010d1 <work+0x17e>
+
+    yield();
+
+    cprintf("pid %d is running (%d times)!.\n", getpid(), times);
+
+    while (times -- > 0) {
+  801156:	8b 45 08             	mov    0x8(%ebp),%eax
+  801159:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80115c:	89 55 08             	mov    %edx,0x8(%ebp)
+  80115f:	85 c0                	test   %eax,%eax
+  801161:	0f 85 93 fe ff ff    	jne    800ffa <work+0xa7>
+            for (j = 0; j < size; j ++) {
+                mata[i][j] = matb[i][j] = matc[i][j];
+            }
+        }
+    }
+    cprintf("pid %d done!.\n", getpid());
+  801167:	e8 e4 f0 ff ff       	call   800250 <getpid>
+  80116c:	83 ec 08             	sub    $0x8,%esp
+  80116f:	50                   	push   %eax
+  801170:	68 40 16 80 00       	push   $0x801640
+  801175:	e8 87 f1 ff ff       	call   800301 <cprintf>
+  80117a:	83 c4 10             	add    $0x10,%esp
+    exit(0);
+  80117d:	83 ec 0c             	sub    $0xc,%esp
+  801180:	6a 00                	push   $0x0
+  801182:	e8 42 f0 ff ff       	call   8001c9 <exit>
+
+00801187 <main>:
+}
+
+const int total = 21;
+
+int
+main(void) {
+  801187:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  80118b:	83 e4 f0             	and    $0xfffffff0,%esp
+  80118e:	ff 71 fc             	pushl  -0x4(%ecx)
+  801191:	55                   	push   %ebp
+  801192:	89 e5                	mov    %esp,%ebp
+  801194:	53                   	push   %ebx
+  801195:	51                   	push   %ecx
+  801196:	83 ec 10             	sub    $0x10,%esp
+  801199:	89 e0                	mov    %esp,%eax
+  80119b:	89 c3                	mov    %eax,%ebx
+    int pids[total];
+  80119d:	b8 15 00 00 00       	mov    $0x15,%eax
+  8011a2:	83 e8 01             	sub    $0x1,%eax
+  8011a5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8011a8:	b8 15 00 00 00       	mov    $0x15,%eax
+  8011ad:	c1 e0 02             	shl    $0x2,%eax
+  8011b0:	8d 50 03             	lea    0x3(%eax),%edx
+  8011b3:	b8 10 00 00 00       	mov    $0x10,%eax
+  8011b8:	83 e8 01             	sub    $0x1,%eax
+  8011bb:	01 d0                	add    %edx,%eax
+  8011bd:	b9 10 00 00 00       	mov    $0x10,%ecx
+  8011c2:	ba 00 00 00 00       	mov    $0x0,%edx
+  8011c7:	f7 f1                	div    %ecx
+  8011c9:	6b c0 10             	imul   $0x10,%eax,%eax
+  8011cc:	29 c4                	sub    %eax,%esp
+  8011ce:	89 e0                	mov    %esp,%eax
+  8011d0:	83 c0 03             	add    $0x3,%eax
+  8011d3:	c1 e8 02             	shr    $0x2,%eax
+  8011d6:	c1 e0 02             	shl    $0x2,%eax
+  8011d9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+    memset(pids, 0, sizeof(pids));
+  8011dc:	b8 15 00 00 00       	mov    $0x15,%eax
+  8011e1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
+  8011e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8011eb:	83 ec 04             	sub    $0x4,%esp
+  8011ee:	52                   	push   %edx
+  8011ef:	6a 00                	push   $0x0
+  8011f1:	50                   	push   %eax
+  8011f2:	e8 c8 f4 ff ff       	call   8006bf <memset>
+  8011f7:	83 c4 10             	add    $0x10,%esp
+
+    int i;
+    for (i = 0; i < total; i ++) {
+  8011fa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  801201:	eb 78                	jmp    80127b <main+0xf4>
+        if ((pids[i] = fork()) == 0) {
+  801203:	e8 e7 ef ff ff       	call   8001ef <fork>
+  801208:	89 c1                	mov    %eax,%ecx
+  80120a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80120d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  801210:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
+  801213:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  801216:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  801219:	8b 04 90             	mov    (%eax,%edx,4),%eax
+  80121c:	85 c0                	test   %eax,%eax
+  80121e:	75 4a                	jne    80126a <main+0xe3>
+            srand(i * i);
+  801220:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  801223:	0f af 45 f4          	imul   -0xc(%ebp),%eax
+  801227:	83 ec 0c             	sub    $0xc,%esp
+  80122a:	50                   	push   %eax
+  80122b:	e8 0a fd ff ff       	call   800f3a <srand>
+  801230:	83 c4 10             	add    $0x10,%esp
+            int times = (((unsigned int)rand()) % total);
+  801233:	e8 43 fc ff ff       	call   800e7b <rand>
+  801238:	ba 15 00 00 00       	mov    $0x15,%edx
+  80123d:	89 d1                	mov    %edx,%ecx
+  80123f:	ba 00 00 00 00       	mov    $0x0,%edx
+  801244:	f7 f1                	div    %ecx
+  801246:	89 d0                	mov    %edx,%eax
+  801248:	89 45 e8             	mov    %eax,-0x18(%ebp)
+            times = (times * times + 10) * 100;
+  80124b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80124e:	0f af 45 e8          	imul   -0x18(%ebp),%eax
+  801252:	83 c0 0a             	add    $0xa,%eax
+  801255:	6b c0 64             	imul   $0x64,%eax,%eax
+  801258:	89 45 e8             	mov    %eax,-0x18(%ebp)
+            work(times);
+  80125b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80125e:	83 ec 0c             	sub    $0xc,%esp
+  801261:	50                   	push   %eax
+  801262:	e8 ec fc ff ff       	call   800f53 <work>
+  801267:	83 c4 10             	add    $0x10,%esp
+        }
+        if (pids[i] < 0) {
+  80126a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80126d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  801270:	8b 04 90             	mov    (%eax,%edx,4),%eax
+  801273:	85 c0                	test   %eax,%eax
+  801275:	78 6d                	js     8012e4 <main+0x15d>
+main(void) {
+    int pids[total];
+    memset(pids, 0, sizeof(pids));
+
+    int i;
+    for (i = 0; i < total; i ++) {
+  801277:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  80127b:	b8 15 00 00 00       	mov    $0x15,%eax
+  801280:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+  801283:	0f 8c 7a ff ff ff    	jl     801203 <main+0x7c>
+        if (pids[i] < 0) {
+            goto failed;
+        }
+    }
+
+    cprintf("fork ok.\n");
+  801289:	83 ec 0c             	sub    $0xc,%esp
+  80128c:	68 54 16 80 00       	push   $0x801654
+  801291:	e8 6b f0 ff ff       	call   800301 <cprintf>
+  801296:	83 c4 10             	add    $0x10,%esp
+
+    for (i = 0; i < total; i ++) {
+  801299:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  8012a0:	eb 1f                	jmp    8012c1 <main+0x13a>
+        if (wait() != 0) {
+  8012a2:	e8 55 ef ff ff       	call   8001fc <wait>
+  8012a7:	85 c0                	test   %eax,%eax
+  8012a9:	74 12                	je     8012bd <main+0x136>
+            cprintf("wait failed.\n");
+  8012ab:	83 ec 0c             	sub    $0xc,%esp
+  8012ae:	68 5e 16 80 00       	push   $0x80165e
+  8012b3:	e8 49 f0 ff ff       	call   800301 <cprintf>
+  8012b8:	83 c4 10             	add    $0x10,%esp
+            goto failed;
+  8012bb:	eb 28                	jmp    8012e5 <main+0x15e>
+        }
+    }
+
+    cprintf("fork ok.\n");
+
+    for (i = 0; i < total; i ++) {
+  8012bd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  8012c1:	b8 15 00 00 00       	mov    $0x15,%eax
+  8012c6:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+  8012c9:	7c d7                	jl     8012a2 <main+0x11b>
+            cprintf("wait failed.\n");
+            goto failed;
+        }
+    }
+
+    cprintf("matrix pass.\n");
+  8012cb:	83 ec 0c             	sub    $0xc,%esp
+  8012ce:	68 6c 16 80 00       	push   $0x80166c
+  8012d3:	e8 29 f0 ff ff       	call   800301 <cprintf>
+  8012d8:	83 c4 10             	add    $0x10,%esp
+    return 0;
+  8012db:	b8 00 00 00 00       	mov    $0x0,%eax
+  8012e0:	89 dc                	mov    %ebx,%esp
+  8012e2:	eb 4e                	jmp    801332 <main+0x1ab>
+            int times = (((unsigned int)rand()) % total);
+            times = (times * times + 10) * 100;
+            work(times);
+        }
+        if (pids[i] < 0) {
+            goto failed;
+  8012e4:	90                   	nop
+
+    cprintf("matrix pass.\n");
+    return 0;
+
+failed:
+    for (i = 0; i < total; i ++) {
+  8012e5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  8012ec:	eb 26                	jmp    801314 <main+0x18d>
+        if (pids[i] > 0) {
+  8012ee:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8012f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8012f4:	8b 04 90             	mov    (%eax,%edx,4),%eax
+  8012f7:	85 c0                	test   %eax,%eax
+  8012f9:	7e 15                	jle    801310 <main+0x189>
+            kill(pids[i]);
+  8012fb:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8012fe:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  801301:	8b 04 90             	mov    (%eax,%edx,4),%eax
+  801304:	83 ec 0c             	sub    $0xc,%esp
+  801307:	50                   	push   %eax
+  801308:	e8 2d ef ff ff       	call   80023a <kill>
+  80130d:	83 c4 10             	add    $0x10,%esp
+
+    cprintf("matrix pass.\n");
+    return 0;
+
+failed:
+    for (i = 0; i < total; i ++) {
+  801310:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  801314:	b8 15 00 00 00       	mov    $0x15,%eax
+  801319:	39 45 f4             	cmp    %eax,-0xc(%ebp)
+  80131c:	7c d0                	jl     8012ee <main+0x167>
+        if (pids[i] > 0) {
+            kill(pids[i]);
+        }
+    }
+    panic("FAIL: T.T\n");
+  80131e:	83 ec 04             	sub    $0x4,%esp
+  801321:	68 7a 16 80 00       	push   $0x80167a
+  801326:	6a 52                	push   $0x52
+  801328:	68 85 16 80 00       	push   $0x801685
+  80132d:	e8 ee ec ff ff       	call   800020 <__panic>
+}
+  801332:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  801335:	59                   	pop    %ecx
+  801336:	5b                   	pop    %ebx
+  801337:	5d                   	pop    %ebp
+  801338:	8d 61 fc             	lea    -0x4(%ecx),%esp
+  80133b:	c3                   	ret    
diff -r -u -P lab7_original/obj/user/matrix.d lab7/obj/user/matrix.d
--- lab7_original/obj/user/matrix.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/matrix.d	2016-05-06 21:59:27.594122548 +0800
@@ -0,0 +1,2 @@
+obj/user/matrix.o obj/user/matrix.d: user/matrix.c user/libs/ulib.h \
+ libs/defs.h libs/stdio.h libs/stdarg.h libs/string.h libs/stdlib.h
Binary files lab7_original/obj/user/matrix.o and lab7/obj/user/matrix.o differ
diff -r -u -P lab7_original/obj/user/matrix.sym lab7/obj/user/matrix.sym
--- lab7_original/obj/user/matrix.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/matrix.sym	2016-05-06 21:59:28.622160021 +0800
@@ -0,0 +1,84 @@
+00800020 .text
+00801340 .rodata
+00802000 .data
+00802020 .bss
+00200000 .stab_info
+00200010 .stab
+002030b9 .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b5 syscall
+00000000 ulib.c
+00000000 stdio.c
+008002b4 cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+00801440 error_string
+0080084a printnum
+0080093b getuint
+0080098a getint
+00800d9d sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 matrix.c
+00802020 mata
+008021c0 matb
+00802360 matc
+008003e6 strcpy
+0080022c yield
+00800213 waitpid
+00800141 sys_yield
+008006ff memmove
+00800dd3 snprintf
+008009f5 vprintfmt
+0080011d sys_fork
+00800301 cprintf
+00800250 getpid
+008007a2 memcpy
+0080028f sleep
+00800278 lab6_set_priority
+00800dfc vsnprintf
+00800375 umain
+002030b8 __STAB_END__
+00800150 sys_kill
+002030b9 __STABSTR_BEGIN__
+00800020 __panic
+008001b7 sys_sleep
+00800562 strtol
+008003b6 strnlen
+0080025d print_pgdir
+0080023a kill
+00800533 strfind
+008001fc wait
+008002a5 _start
+00800e7b rand
+008004aa strncmp
+00800171 sys_putc
+00800426 strncpy
+008007f2 memcmp
+008001ef fork
+008006bf memset
+00801187 main
+00800f3a srand
+00800e56 hash32
+008009d1 printfmt
+00203f74 __STABSTR_END__
+00800460 strcmp
+0080026b gettime_msec
+00800192 sys_gettime
+008002d8 vcprintf
+0080006e __warn
+00800327 cputs
+008001a1 sys_lab6_set_priority
+00801650 total
+008001c9 exit
+0080012c sys_wait
+0080010b sys_exit
+00200010 __STAB_BEGIN__
+0080038e strlen
+00800183 sys_pgdir
+00800500 strchr
+00800162 sys_getpid
+00800f53 work
diff -r -u -P lab7_original/obj/user/pgdir.asm lab7/obj/user/pgdir.asm
--- lab7_original/obj/user/pgdir.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/pgdir.asm	2016-05-06 21:59:28.626160168 +0800
@@ -0,0 +1,2622 @@
+
+obj/__user_pgdir.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 18             	sub    $0x18,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	83 ec 04             	sub    $0x4,%esp
+  80002f:	ff 75 0c             	pushl  0xc(%ebp)
+  800032:	ff 75 08             	pushl  0x8(%ebp)
+  800035:	68 a0 0f 80 00       	push   $0x800fa0
+  80003a:	e8 c2 02 00 00       	call   800301 <cprintf>
+  80003f:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800042:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800045:	83 ec 08             	sub    $0x8,%esp
+  800048:	50                   	push   %eax
+  800049:	ff 75 10             	pushl  0x10(%ebp)
+  80004c:	e8 87 02 00 00       	call   8002d8 <vcprintf>
+  800051:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  800054:	83 ec 0c             	sub    $0xc,%esp
+  800057:	68 ba 0f 80 00       	push   $0x800fba
+  80005c:	e8 a0 02 00 00       	call   800301 <cprintf>
+  800061:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	83 ec 0c             	sub    $0xc,%esp
+  800067:	6a f6                	push   $0xfffffff6
+  800069:	e8 5b 01 00 00       	call   8001c9 <exit>
+
+0080006e <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80006e:	55                   	push   %ebp
+  80006f:	89 e5                	mov    %esp,%ebp
+  800071:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800074:	8d 45 14             	lea    0x14(%ebp),%eax
+  800077:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007a:	83 ec 04             	sub    $0x4,%esp
+  80007d:	ff 75 0c             	pushl  0xc(%ebp)
+  800080:	ff 75 08             	pushl  0x8(%ebp)
+  800083:	68 bc 0f 80 00       	push   $0x800fbc
+  800088:	e8 74 02 00 00       	call   800301 <cprintf>
+  80008d:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800090:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800093:	83 ec 08             	sub    $0x8,%esp
+  800096:	50                   	push   %eax
+  800097:	ff 75 10             	pushl  0x10(%ebp)
+  80009a:	e8 39 02 00 00       	call   8002d8 <vcprintf>
+  80009f:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  8000a2:	83 ec 0c             	sub    $0xc,%esp
+  8000a5:	68 ba 0f 80 00       	push   $0x800fba
+  8000aa:	e8 52 02 00 00       	call   800301 <cprintf>
+  8000af:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8000b2:	90                   	nop
+  8000b3:	c9                   	leave  
+  8000b4:	c3                   	ret    
+
+008000b5 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b5:	55                   	push   %ebp
+  8000b6:	89 e5                	mov    %esp,%ebp
+  8000b8:	57                   	push   %edi
+  8000b9:	56                   	push   %esi
+  8000ba:	53                   	push   %ebx
+  8000bb:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000be:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cb:	eb 16                	jmp    8000e3 <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8000cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d0:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d3:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d6:	8b 10                	mov    (%eax),%edx
+  8000d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000db:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000df:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8000e3:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e7:	7e e4                	jle    8000cd <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000e9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ec:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000ef:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f2:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f5:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8000f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fb:	cd 80                	int    $0x80
+  8000fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  800100:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800103:	83 c4 20             	add    $0x20,%esp
+  800106:	5b                   	pop    %ebx
+  800107:	5e                   	pop    %esi
+  800108:	5f                   	pop    %edi
+  800109:	5d                   	pop    %ebp
+  80010a:	c3                   	ret    
+
+0080010b <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010b:	55                   	push   %ebp
+  80010c:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_exit, error_code);
+  80010e:	ff 75 08             	pushl  0x8(%ebp)
+  800111:	6a 01                	push   $0x1
+  800113:	e8 9d ff ff ff       	call   8000b5 <syscall>
+  800118:	83 c4 08             	add    $0x8,%esp
+}
+  80011b:	c9                   	leave  
+  80011c:	c3                   	ret    
+
+0080011d <sys_fork>:
+
+int
+sys_fork(void) {
+  80011d:	55                   	push   %ebp
+  80011e:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_fork);
+  800120:	6a 02                	push   $0x2
+  800122:	e8 8e ff ff ff       	call   8000b5 <syscall>
+  800127:	83 c4 04             	add    $0x4,%esp
+}
+  80012a:	c9                   	leave  
+  80012b:	c3                   	ret    
+
+0080012c <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80012c:	55                   	push   %ebp
+  80012d:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_wait, pid, store);
+  80012f:	ff 75 0c             	pushl  0xc(%ebp)
+  800132:	ff 75 08             	pushl  0x8(%ebp)
+  800135:	6a 03                	push   $0x3
+  800137:	e8 79 ff ff ff       	call   8000b5 <syscall>
+  80013c:	83 c4 0c             	add    $0xc,%esp
+}
+  80013f:	c9                   	leave  
+  800140:	c3                   	ret    
+
+00800141 <sys_yield>:
+
+int
+sys_yield(void) {
+  800141:	55                   	push   %ebp
+  800142:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_yield);
+  800144:	6a 0a                	push   $0xa
+  800146:	e8 6a ff ff ff       	call   8000b5 <syscall>
+  80014b:	83 c4 04             	add    $0x4,%esp
+}
+  80014e:	c9                   	leave  
+  80014f:	c3                   	ret    
+
+00800150 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800150:	55                   	push   %ebp
+  800151:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_kill, pid);
+  800153:	ff 75 08             	pushl  0x8(%ebp)
+  800156:	6a 0c                	push   $0xc
+  800158:	e8 58 ff ff ff       	call   8000b5 <syscall>
+  80015d:	83 c4 08             	add    $0x8,%esp
+}
+  800160:	c9                   	leave  
+  800161:	c3                   	ret    
+
+00800162 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800162:	55                   	push   %ebp
+  800163:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_getpid);
+  800165:	6a 12                	push   $0x12
+  800167:	e8 49 ff ff ff       	call   8000b5 <syscall>
+  80016c:	83 c4 04             	add    $0x4,%esp
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_putc, c);
+  800174:	ff 75 08             	pushl  0x8(%ebp)
+  800177:	6a 1e                	push   $0x1e
+  800179:	e8 37 ff ff ff       	call   8000b5 <syscall>
+  80017e:	83 c4 08             	add    $0x8,%esp
+}
+  800181:	c9                   	leave  
+  800182:	c3                   	ret    
+
+00800183 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800183:	55                   	push   %ebp
+  800184:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_pgdir);
+  800186:	6a 1f                	push   $0x1f
+  800188:	e8 28 ff ff ff       	call   8000b5 <syscall>
+  80018d:	83 c4 04             	add    $0x4,%esp
+}
+  800190:	c9                   	leave  
+  800191:	c3                   	ret    
+
+00800192 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  800192:	55                   	push   %ebp
+  800193:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_gettime);
+  800195:	6a 11                	push   $0x11
+  800197:	e8 19 ff ff ff       	call   8000b5 <syscall>
+  80019c:	83 c4 04             	add    $0x4,%esp
+}
+  80019f:	c9                   	leave  
+  8001a0:	c3                   	ret    
+
+008001a1 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001a1:	55                   	push   %ebp
+  8001a2:	89 e5                	mov    %esp,%ebp
+    syscall(SYS_lab6_set_priority, priority);
+  8001a4:	ff 75 08             	pushl  0x8(%ebp)
+  8001a7:	68 ff 00 00 00       	push   $0xff
+  8001ac:	e8 04 ff ff ff       	call   8000b5 <syscall>
+  8001b1:	83 c4 08             	add    $0x8,%esp
+}
+  8001b4:	90                   	nop
+  8001b5:	c9                   	leave  
+  8001b6:	c3                   	ret    
+
+008001b7 <sys_sleep>:
+
+int
+sys_sleep(unsigned int time) {
+  8001b7:	55                   	push   %ebp
+  8001b8:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_sleep, time);
+  8001ba:	ff 75 08             	pushl  0x8(%ebp)
+  8001bd:	6a 0b                	push   $0xb
+  8001bf:	e8 f1 fe ff ff       	call   8000b5 <syscall>
+  8001c4:	83 c4 08             	add    $0x8,%esp
+}
+  8001c7:	c9                   	leave  
+  8001c8:	c3                   	ret    
+
+008001c9 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001c9:	55                   	push   %ebp
+  8001ca:	89 e5                	mov    %esp,%ebp
+  8001cc:	83 ec 08             	sub    $0x8,%esp
+    sys_exit(error_code);
+  8001cf:	83 ec 0c             	sub    $0xc,%esp
+  8001d2:	ff 75 08             	pushl  0x8(%ebp)
+  8001d5:	e8 31 ff ff ff       	call   80010b <sys_exit>
+  8001da:	83 c4 10             	add    $0x10,%esp
+    cprintf("BUG: exit failed.\n");
+  8001dd:	83 ec 0c             	sub    $0xc,%esp
+  8001e0:	68 d8 0f 80 00       	push   $0x800fd8
+  8001e5:	e8 17 01 00 00       	call   800301 <cprintf>
+  8001ea:	83 c4 10             	add    $0x10,%esp
+    while (1);
+  8001ed:	eb fe                	jmp    8001ed <exit+0x24>
+
+008001ef <fork>:
+}
+
+int
+fork(void) {
+  8001ef:	55                   	push   %ebp
+  8001f0:	89 e5                	mov    %esp,%ebp
+  8001f2:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8001f5:	e8 23 ff ff ff       	call   80011d <sys_fork>
+}
+  8001fa:	c9                   	leave  
+  8001fb:	c3                   	ret    
+
+008001fc <wait>:
+
+int
+wait(void) {
+  8001fc:	55                   	push   %ebp
+  8001fd:	89 e5                	mov    %esp,%ebp
+  8001ff:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(0, NULL);
+  800202:	83 ec 08             	sub    $0x8,%esp
+  800205:	6a 00                	push   $0x0
+  800207:	6a 00                	push   $0x0
+  800209:	e8 1e ff ff ff       	call   80012c <sys_wait>
+  80020e:	83 c4 10             	add    $0x10,%esp
+}
+  800211:	c9                   	leave  
+  800212:	c3                   	ret    
+
+00800213 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800213:	55                   	push   %ebp
+  800214:	89 e5                	mov    %esp,%ebp
+  800216:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(pid, store);
+  800219:	83 ec 08             	sub    $0x8,%esp
+  80021c:	ff 75 0c             	pushl  0xc(%ebp)
+  80021f:	ff 75 08             	pushl  0x8(%ebp)
+  800222:	e8 05 ff ff ff       	call   80012c <sys_wait>
+  800227:	83 c4 10             	add    $0x10,%esp
+}
+  80022a:	c9                   	leave  
+  80022b:	c3                   	ret    
+
+0080022c <yield>:
+
+void
+yield(void) {
+  80022c:	55                   	push   %ebp
+  80022d:	89 e5                	mov    %esp,%ebp
+  80022f:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800232:	e8 0a ff ff ff       	call   800141 <sys_yield>
+}
+  800237:	90                   	nop
+  800238:	c9                   	leave  
+  800239:	c3                   	ret    
+
+0080023a <kill>:
+
+int
+kill(int pid) {
+  80023a:	55                   	push   %ebp
+  80023b:	89 e5                	mov    %esp,%ebp
+  80023d:	83 ec 08             	sub    $0x8,%esp
+    return sys_kill(pid);
+  800240:	83 ec 0c             	sub    $0xc,%esp
+  800243:	ff 75 08             	pushl  0x8(%ebp)
+  800246:	e8 05 ff ff ff       	call   800150 <sys_kill>
+  80024b:	83 c4 10             	add    $0x10,%esp
+}
+  80024e:	c9                   	leave  
+  80024f:	c3                   	ret    
+
+00800250 <getpid>:
+
+int
+getpid(void) {
+  800250:	55                   	push   %ebp
+  800251:	89 e5                	mov    %esp,%ebp
+  800253:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800256:	e8 07 ff ff ff       	call   800162 <sys_getpid>
+}
+  80025b:	c9                   	leave  
+  80025c:	c3                   	ret    
+
+0080025d <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80025d:	55                   	push   %ebp
+  80025e:	89 e5                	mov    %esp,%ebp
+  800260:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800263:	e8 1b ff ff ff       	call   800183 <sys_pgdir>
+}
+  800268:	90                   	nop
+  800269:	c9                   	leave  
+  80026a:	c3                   	ret    
+
+0080026b <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80026b:	55                   	push   %ebp
+  80026c:	89 e5                	mov    %esp,%ebp
+  80026e:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800271:	e8 1c ff ff ff       	call   800192 <sys_gettime>
+}
+  800276:	c9                   	leave  
+  800277:	c3                   	ret    
+
+00800278 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800278:	55                   	push   %ebp
+  800279:	89 e5                	mov    %esp,%ebp
+  80027b:	83 ec 08             	sub    $0x8,%esp
+    sys_lab6_set_priority(priority);
+  80027e:	83 ec 0c             	sub    $0xc,%esp
+  800281:	ff 75 08             	pushl  0x8(%ebp)
+  800284:	e8 18 ff ff ff       	call   8001a1 <sys_lab6_set_priority>
+  800289:	83 c4 10             	add    $0x10,%esp
+}
+  80028c:	90                   	nop
+  80028d:	c9                   	leave  
+  80028e:	c3                   	ret    
+
+0080028f <sleep>:
+
+int
+sleep(unsigned int time) {
+  80028f:	55                   	push   %ebp
+  800290:	89 e5                	mov    %esp,%ebp
+  800292:	83 ec 08             	sub    $0x8,%esp
+    return sys_sleep(time);
+  800295:	83 ec 0c             	sub    $0xc,%esp
+  800298:	ff 75 08             	pushl  0x8(%ebp)
+  80029b:	e8 17 ff ff ff       	call   8001b7 <sys_sleep>
+  8002a0:	83 c4 10             	add    $0x10,%esp
+}
+  8002a3:	c9                   	leave  
+  8002a4:	c3                   	ret    
+
+008002a5 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  8002a5:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  8002aa:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  8002ad:	e8 c3 00 00 00       	call   800375 <umain>
+1:  jmp 1b
+  8002b2:	eb fe                	jmp    8002b2 <_start+0xd>
+
+008002b4 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8002b4:	55                   	push   %ebp
+  8002b5:	89 e5                	mov    %esp,%ebp
+  8002b7:	83 ec 08             	sub    $0x8,%esp
+    sys_putc(c);
+  8002ba:	83 ec 0c             	sub    $0xc,%esp
+  8002bd:	ff 75 08             	pushl  0x8(%ebp)
+  8002c0:	e8 ac fe ff ff       	call   800171 <sys_putc>
+  8002c5:	83 c4 10             	add    $0x10,%esp
+    (*cnt) ++;
+  8002c8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002cb:	8b 00                	mov    (%eax),%eax
+  8002cd:	8d 50 01             	lea    0x1(%eax),%edx
+  8002d0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002d3:	89 10                	mov    %edx,(%eax)
+}
+  8002d5:	90                   	nop
+  8002d6:	c9                   	leave  
+  8002d7:	c3                   	ret    
+
+008002d8 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002d8:	55                   	push   %ebp
+  8002d9:	89 e5                	mov    %esp,%ebp
+  8002db:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  8002de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002e5:	ff 75 0c             	pushl  0xc(%ebp)
+  8002e8:	ff 75 08             	pushl  0x8(%ebp)
+  8002eb:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  8002ee:	50                   	push   %eax
+  8002ef:	68 b4 02 80 00       	push   $0x8002b4
+  8002f4:	e8 fc 06 00 00       	call   8009f5 <vprintfmt>
+  8002f9:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  8002fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002ff:	c9                   	leave  
+  800300:	c3                   	ret    
+
+00800301 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800301:	55                   	push   %ebp
+  800302:	89 e5                	mov    %esp,%ebp
+  800304:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800307:	8d 45 0c             	lea    0xc(%ebp),%eax
+  80030a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  80030d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800310:	83 ec 08             	sub    $0x8,%esp
+  800313:	50                   	push   %eax
+  800314:	ff 75 08             	pushl  0x8(%ebp)
+  800317:	e8 bc ff ff ff       	call   8002d8 <vcprintf>
+  80031c:	83 c4 10             	add    $0x10,%esp
+  80031f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800322:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800325:	c9                   	leave  
+  800326:	c3                   	ret    
+
+00800327 <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  800327:	55                   	push   %ebp
+  800328:	89 e5                	mov    %esp,%ebp
+  80032a:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  80032d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  800334:	eb 14                	jmp    80034a <cputs+0x23>
+        cputch(c, &cnt);
+  800336:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  80033a:	83 ec 08             	sub    $0x8,%esp
+  80033d:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800340:	52                   	push   %edx
+  800341:	50                   	push   %eax
+  800342:	e8 6d ff ff ff       	call   8002b4 <cputch>
+  800347:	83 c4 10             	add    $0x10,%esp
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  80034a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80034d:	8d 50 01             	lea    0x1(%eax),%edx
+  800350:	89 55 08             	mov    %edx,0x8(%ebp)
+  800353:	0f b6 00             	movzbl (%eax),%eax
+  800356:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800359:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  80035d:	75 d7                	jne    800336 <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  80035f:	83 ec 08             	sub    $0x8,%esp
+  800362:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800365:	50                   	push   %eax
+  800366:	6a 0a                	push   $0xa
+  800368:	e8 47 ff ff ff       	call   8002b4 <cputch>
+  80036d:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  800370:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  800373:	c9                   	leave  
+  800374:	c3                   	ret    
+
+00800375 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800375:	55                   	push   %ebp
+  800376:	89 e5                	mov    %esp,%ebp
+  800378:	83 ec 18             	sub    $0x18,%esp
+    int ret = main();
+  80037b:	e8 d3 0b 00 00       	call   800f53 <main>
+  800380:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  800383:	83 ec 0c             	sub    $0xc,%esp
+  800386:	ff 75 f4             	pushl  -0xc(%ebp)
+  800389:	e8 3b fe ff ff       	call   8001c9 <exit>
+
+0080038e <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  80038e:	55                   	push   %ebp
+  80038f:	89 e5                	mov    %esp,%ebp
+  800391:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800394:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  80039b:	eb 04                	jmp    8003a1 <strlen+0x13>
+        cnt ++;
+  80039d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  8003a1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003a4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003a7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003aa:	0f b6 00             	movzbl (%eax),%eax
+  8003ad:	84 c0                	test   %al,%al
+  8003af:	75 ec                	jne    80039d <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003b4:	c9                   	leave  
+  8003b5:	c3                   	ret    
+
+008003b6 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  8003b6:	55                   	push   %ebp
+  8003b7:	89 e5                	mov    %esp,%ebp
+  8003b9:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003bc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003c3:	eb 04                	jmp    8003c9 <strnlen+0x13>
+        cnt ++;
+  8003c5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  8003c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003cc:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003cf:	73 10                	jae    8003e1 <strnlen+0x2b>
+  8003d1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003d4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003d7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003da:	0f b6 00             	movzbl (%eax),%eax
+  8003dd:	84 c0                	test   %al,%al
+  8003df:	75 e4                	jne    8003c5 <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003e4:	c9                   	leave  
+  8003e5:	c3                   	ret    
+
+008003e6 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  8003e6:	55                   	push   %ebp
+  8003e7:	89 e5                	mov    %esp,%ebp
+  8003e9:	57                   	push   %edi
+  8003ea:	56                   	push   %esi
+  8003eb:	83 ec 20             	sub    $0x20,%esp
+  8003ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003f4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8003f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  8003fa:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800400:	89 d1                	mov    %edx,%ecx
+  800402:	89 c2                	mov    %eax,%edx
+  800404:	89 ce                	mov    %ecx,%esi
+  800406:	89 d7                	mov    %edx,%edi
+  800408:	ac                   	lods   %ds:(%esi),%al
+  800409:	aa                   	stos   %al,%es:(%edi)
+  80040a:	84 c0                	test   %al,%al
+  80040c:	75 fa                	jne    800408 <strcpy+0x22>
+  80040e:	89 fa                	mov    %edi,%edx
+  800410:	89 f1                	mov    %esi,%ecx
+  800412:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800415:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800418:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  80041b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  80041e:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  80041f:	83 c4 20             	add    $0x20,%esp
+  800422:	5e                   	pop    %esi
+  800423:	5f                   	pop    %edi
+  800424:	5d                   	pop    %ebp
+  800425:	c3                   	ret    
+
+00800426 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800426:	55                   	push   %ebp
+  800427:	89 e5                	mov    %esp,%ebp
+  800429:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  80042c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80042f:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800432:	eb 21                	jmp    800455 <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800434:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800437:	0f b6 10             	movzbl (%eax),%edx
+  80043a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80043d:	88 10                	mov    %dl,(%eax)
+  80043f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800442:	0f b6 00             	movzbl (%eax),%eax
+  800445:	84 c0                	test   %al,%al
+  800447:	74 04                	je     80044d <strncpy+0x27>
+            src ++;
+  800449:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  80044d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800451:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800455:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800459:	75 d9                	jne    800434 <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  80045b:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  80045e:	c9                   	leave  
+  80045f:	c3                   	ret    
+
+00800460 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800460:	55                   	push   %ebp
+  800461:	89 e5                	mov    %esp,%ebp
+  800463:	57                   	push   %edi
+  800464:	56                   	push   %esi
+  800465:	83 ec 20             	sub    $0x20,%esp
+  800468:	8b 45 08             	mov    0x8(%ebp),%eax
+  80046b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80046e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800471:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800474:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800477:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80047a:	89 d1                	mov    %edx,%ecx
+  80047c:	89 c2                	mov    %eax,%edx
+  80047e:	89 ce                	mov    %ecx,%esi
+  800480:	89 d7                	mov    %edx,%edi
+  800482:	ac                   	lods   %ds:(%esi),%al
+  800483:	ae                   	scas   %es:(%edi),%al
+  800484:	75 08                	jne    80048e <strcmp+0x2e>
+  800486:	84 c0                	test   %al,%al
+  800488:	75 f8                	jne    800482 <strcmp+0x22>
+  80048a:	31 c0                	xor    %eax,%eax
+  80048c:	eb 04                	jmp    800492 <strcmp+0x32>
+  80048e:	19 c0                	sbb    %eax,%eax
+  800490:	0c 01                	or     $0x1,%al
+  800492:	89 fa                	mov    %edi,%edx
+  800494:	89 f1                	mov    %esi,%ecx
+  800496:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800499:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  80049c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  80049f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  8004a2:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  8004a3:	83 c4 20             	add    $0x20,%esp
+  8004a6:	5e                   	pop    %esi
+  8004a7:	5f                   	pop    %edi
+  8004a8:	5d                   	pop    %ebp
+  8004a9:	c3                   	ret    
+
+008004aa <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  8004aa:	55                   	push   %ebp
+  8004ab:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004ad:	eb 0c                	jmp    8004bb <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  8004af:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  8004b3:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8004b7:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004bb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004bf:	74 1a                	je     8004db <strncmp+0x31>
+  8004c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004c4:	0f b6 00             	movzbl (%eax),%eax
+  8004c7:	84 c0                	test   %al,%al
+  8004c9:	74 10                	je     8004db <strncmp+0x31>
+  8004cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004ce:	0f b6 10             	movzbl (%eax),%edx
+  8004d1:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004d4:	0f b6 00             	movzbl (%eax),%eax
+  8004d7:	38 c2                	cmp    %al,%dl
+  8004d9:	74 d4                	je     8004af <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004db:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004df:	74 18                	je     8004f9 <strncmp+0x4f>
+  8004e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e4:	0f b6 00             	movzbl (%eax),%eax
+  8004e7:	0f b6 d0             	movzbl %al,%edx
+  8004ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ed:	0f b6 00             	movzbl (%eax),%eax
+  8004f0:	0f b6 c0             	movzbl %al,%eax
+  8004f3:	29 c2                	sub    %eax,%edx
+  8004f5:	89 d0                	mov    %edx,%eax
+  8004f7:	eb 05                	jmp    8004fe <strncmp+0x54>
+  8004f9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8004fe:	5d                   	pop    %ebp
+  8004ff:	c3                   	ret    
+
+00800500 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800500:	55                   	push   %ebp
+  800501:	89 e5                	mov    %esp,%ebp
+  800503:	83 ec 04             	sub    $0x4,%esp
+  800506:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800509:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  80050c:	eb 14                	jmp    800522 <strchr+0x22>
+        if (*s == c) {
+  80050e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800511:	0f b6 00             	movzbl (%eax),%eax
+  800514:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800517:	75 05                	jne    80051e <strchr+0x1e>
+            return (char *)s;
+  800519:	8b 45 08             	mov    0x8(%ebp),%eax
+  80051c:	eb 13                	jmp    800531 <strchr+0x31>
+        }
+        s ++;
+  80051e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800522:	8b 45 08             	mov    0x8(%ebp),%eax
+  800525:	0f b6 00             	movzbl (%eax),%eax
+  800528:	84 c0                	test   %al,%al
+  80052a:	75 e2                	jne    80050e <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  80052c:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800531:	c9                   	leave  
+  800532:	c3                   	ret    
+
+00800533 <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800533:	55                   	push   %ebp
+  800534:	89 e5                	mov    %esp,%ebp
+  800536:	83 ec 04             	sub    $0x4,%esp
+  800539:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80053c:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  80053f:	eb 0f                	jmp    800550 <strfind+0x1d>
+        if (*s == c) {
+  800541:	8b 45 08             	mov    0x8(%ebp),%eax
+  800544:	0f b6 00             	movzbl (%eax),%eax
+  800547:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  80054a:	74 10                	je     80055c <strfind+0x29>
+            break;
+        }
+        s ++;
+  80054c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800550:	8b 45 08             	mov    0x8(%ebp),%eax
+  800553:	0f b6 00             	movzbl (%eax),%eax
+  800556:	84 c0                	test   %al,%al
+  800558:	75 e7                	jne    800541 <strfind+0xe>
+  80055a:	eb 01                	jmp    80055d <strfind+0x2a>
+        if (*s == c) {
+            break;
+  80055c:	90                   	nop
+        }
+        s ++;
+    }
+    return (char *)s;
+  80055d:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800560:	c9                   	leave  
+  800561:	c3                   	ret    
+
+00800562 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800562:	55                   	push   %ebp
+  800563:	89 e5                	mov    %esp,%ebp
+  800565:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800568:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  80056f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800576:	eb 04                	jmp    80057c <strtol+0x1a>
+        s ++;
+  800578:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80057c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80057f:	0f b6 00             	movzbl (%eax),%eax
+  800582:	3c 20                	cmp    $0x20,%al
+  800584:	74 f2                	je     800578 <strtol+0x16>
+  800586:	8b 45 08             	mov    0x8(%ebp),%eax
+  800589:	0f b6 00             	movzbl (%eax),%eax
+  80058c:	3c 09                	cmp    $0x9,%al
+  80058e:	74 e8                	je     800578 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800590:	8b 45 08             	mov    0x8(%ebp),%eax
+  800593:	0f b6 00             	movzbl (%eax),%eax
+  800596:	3c 2b                	cmp    $0x2b,%al
+  800598:	75 06                	jne    8005a0 <strtol+0x3e>
+        s ++;
+  80059a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  80059e:	eb 15                	jmp    8005b5 <strtol+0x53>
+    }
+    else if (*s == '-') {
+  8005a0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a3:	0f b6 00             	movzbl (%eax),%eax
+  8005a6:	3c 2d                	cmp    $0x2d,%al
+  8005a8:	75 0b                	jne    8005b5 <strtol+0x53>
+        s ++, neg = 1;
+  8005aa:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005ae:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  8005b5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005b9:	74 06                	je     8005c1 <strtol+0x5f>
+  8005bb:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  8005bf:	75 24                	jne    8005e5 <strtol+0x83>
+  8005c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005c4:	0f b6 00             	movzbl (%eax),%eax
+  8005c7:	3c 30                	cmp    $0x30,%al
+  8005c9:	75 1a                	jne    8005e5 <strtol+0x83>
+  8005cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ce:	83 c0 01             	add    $0x1,%eax
+  8005d1:	0f b6 00             	movzbl (%eax),%eax
+  8005d4:	3c 78                	cmp    $0x78,%al
+  8005d6:	75 0d                	jne    8005e5 <strtol+0x83>
+        s += 2, base = 16;
+  8005d8:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005dc:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005e3:	eb 2a                	jmp    80060f <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005e5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005e9:	75 17                	jne    800602 <strtol+0xa0>
+  8005eb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ee:	0f b6 00             	movzbl (%eax),%eax
+  8005f1:	3c 30                	cmp    $0x30,%al
+  8005f3:	75 0d                	jne    800602 <strtol+0xa0>
+        s ++, base = 8;
+  8005f5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005f9:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800600:	eb 0d                	jmp    80060f <strtol+0xad>
+    }
+    else if (base == 0) {
+  800602:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800606:	75 07                	jne    80060f <strtol+0xad>
+        base = 10;
+  800608:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  80060f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800612:	0f b6 00             	movzbl (%eax),%eax
+  800615:	3c 2f                	cmp    $0x2f,%al
+  800617:	7e 1b                	jle    800634 <strtol+0xd2>
+  800619:	8b 45 08             	mov    0x8(%ebp),%eax
+  80061c:	0f b6 00             	movzbl (%eax),%eax
+  80061f:	3c 39                	cmp    $0x39,%al
+  800621:	7f 11                	jg     800634 <strtol+0xd2>
+            dig = *s - '0';
+  800623:	8b 45 08             	mov    0x8(%ebp),%eax
+  800626:	0f b6 00             	movzbl (%eax),%eax
+  800629:	0f be c0             	movsbl %al,%eax
+  80062c:	83 e8 30             	sub    $0x30,%eax
+  80062f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800632:	eb 48                	jmp    80067c <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800634:	8b 45 08             	mov    0x8(%ebp),%eax
+  800637:	0f b6 00             	movzbl (%eax),%eax
+  80063a:	3c 60                	cmp    $0x60,%al
+  80063c:	7e 1b                	jle    800659 <strtol+0xf7>
+  80063e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800641:	0f b6 00             	movzbl (%eax),%eax
+  800644:	3c 7a                	cmp    $0x7a,%al
+  800646:	7f 11                	jg     800659 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800648:	8b 45 08             	mov    0x8(%ebp),%eax
+  80064b:	0f b6 00             	movzbl (%eax),%eax
+  80064e:	0f be c0             	movsbl %al,%eax
+  800651:	83 e8 57             	sub    $0x57,%eax
+  800654:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800657:	eb 23                	jmp    80067c <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800659:	8b 45 08             	mov    0x8(%ebp),%eax
+  80065c:	0f b6 00             	movzbl (%eax),%eax
+  80065f:	3c 40                	cmp    $0x40,%al
+  800661:	7e 3c                	jle    80069f <strtol+0x13d>
+  800663:	8b 45 08             	mov    0x8(%ebp),%eax
+  800666:	0f b6 00             	movzbl (%eax),%eax
+  800669:	3c 5a                	cmp    $0x5a,%al
+  80066b:	7f 32                	jg     80069f <strtol+0x13d>
+            dig = *s - 'A' + 10;
+  80066d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800670:	0f b6 00             	movzbl (%eax),%eax
+  800673:	0f be c0             	movsbl %al,%eax
+  800676:	83 e8 37             	sub    $0x37,%eax
+  800679:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  80067c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80067f:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800682:	7d 1a                	jge    80069e <strtol+0x13c>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  800684:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800688:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80068b:	0f af 45 10          	imul   0x10(%ebp),%eax
+  80068f:	89 c2                	mov    %eax,%edx
+  800691:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800694:	01 d0                	add    %edx,%eax
+  800696:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800699:	e9 71 ff ff ff       	jmp    80060f <strtol+0xad>
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+            break;
+  80069e:	90                   	nop
+        }
+        s ++, val = (val * base) + dig;
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  80069f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8006a3:	74 08                	je     8006ad <strtol+0x14b>
+        *endptr = (char *) s;
+  8006a5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006a8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006ab:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  8006ad:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  8006b1:	74 07                	je     8006ba <strtol+0x158>
+  8006b3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006b6:	f7 d8                	neg    %eax
+  8006b8:	eb 03                	jmp    8006bd <strtol+0x15b>
+  8006ba:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  8006bd:	c9                   	leave  
+  8006be:	c3                   	ret    
+
+008006bf <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  8006bf:	55                   	push   %ebp
+  8006c0:	89 e5                	mov    %esp,%ebp
+  8006c2:	57                   	push   %edi
+  8006c3:	83 ec 24             	sub    $0x24,%esp
+  8006c6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006c9:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006cc:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006d0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006d3:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006d6:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006d9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006df:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006e2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006e6:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006e9:	89 d7                	mov    %edx,%edi
+  8006eb:	f3 aa                	rep stos %al,%es:(%edi)
+  8006ed:	89 fa                	mov    %edi,%edx
+  8006ef:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8006f2:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  8006f5:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006f8:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  8006f9:	83 c4 24             	add    $0x24,%esp
+  8006fc:	5f                   	pop    %edi
+  8006fd:	5d                   	pop    %ebp
+  8006fe:	c3                   	ret    
+
+008006ff <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  8006ff:	55                   	push   %ebp
+  800700:	89 e5                	mov    %esp,%ebp
+  800702:	57                   	push   %edi
+  800703:	56                   	push   %esi
+  800704:	53                   	push   %ebx
+  800705:	83 ec 30             	sub    $0x30,%esp
+  800708:	8b 45 08             	mov    0x8(%ebp),%eax
+  80070b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80070e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800711:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800714:	8b 45 10             	mov    0x10(%ebp),%eax
+  800717:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  80071a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80071d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800720:	73 42                	jae    800764 <memmove+0x65>
+  800722:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800725:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800728:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80072b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80072e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800731:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800734:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800737:	c1 e8 02             	shr    $0x2,%eax
+  80073a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  80073c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  80073f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800742:	89 d7                	mov    %edx,%edi
+  800744:	89 c6                	mov    %eax,%esi
+  800746:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800748:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  80074b:	83 e1 03             	and    $0x3,%ecx
+  80074e:	74 02                	je     800752 <memmove+0x53>
+  800750:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800752:	89 f0                	mov    %esi,%eax
+  800754:	89 fa                	mov    %edi,%edx
+  800756:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800759:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  80075c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  80075f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  800762:	eb 36                	jmp    80079a <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800764:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800767:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80076a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80076d:	01 c2                	add    %eax,%edx
+  80076f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800772:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800775:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800778:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  80077b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80077e:	89 c1                	mov    %eax,%ecx
+  800780:	89 d8                	mov    %ebx,%eax
+  800782:	89 d6                	mov    %edx,%esi
+  800784:	89 c7                	mov    %eax,%edi
+  800786:	fd                   	std    
+  800787:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800789:	fc                   	cld    
+  80078a:	89 f8                	mov    %edi,%eax
+  80078c:	89 f2                	mov    %esi,%edx
+  80078e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800791:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800794:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800797:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  80079a:	83 c4 30             	add    $0x30,%esp
+  80079d:	5b                   	pop    %ebx
+  80079e:	5e                   	pop    %esi
+  80079f:	5f                   	pop    %edi
+  8007a0:	5d                   	pop    %ebp
+  8007a1:	c3                   	ret    
+
+008007a2 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  8007a2:	55                   	push   %ebp
+  8007a3:	89 e5                	mov    %esp,%ebp
+  8007a5:	57                   	push   %edi
+  8007a6:	56                   	push   %esi
+  8007a7:	83 ec 20             	sub    $0x20,%esp
+  8007aa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8007b0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007b6:	8b 45 10             	mov    0x10(%ebp),%eax
+  8007b9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  8007bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8007bf:	c1 e8 02             	shr    $0x2,%eax
+  8007c2:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  8007c4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007ca:	89 d7                	mov    %edx,%edi
+  8007cc:	89 c6                	mov    %eax,%esi
+  8007ce:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007d0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007d3:	83 e1 03             	and    $0x3,%ecx
+  8007d6:	74 02                	je     8007da <memcpy+0x38>
+  8007d8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007da:	89 f0                	mov    %esi,%eax
+  8007dc:	89 fa                	mov    %edi,%edx
+  8007de:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007e1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007e4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  8007e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007ea:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007eb:	83 c4 20             	add    $0x20,%esp
+  8007ee:	5e                   	pop    %esi
+  8007ef:	5f                   	pop    %edi
+  8007f0:	5d                   	pop    %ebp
+  8007f1:	c3                   	ret    
+
+008007f2 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  8007f2:	55                   	push   %ebp
+  8007f3:	89 e5                	mov    %esp,%ebp
+  8007f5:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  8007f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007fb:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  8007fe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800801:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800804:	eb 30                	jmp    800836 <memcmp+0x44>
+        if (*s1 != *s2) {
+  800806:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800809:	0f b6 10             	movzbl (%eax),%edx
+  80080c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80080f:	0f b6 00             	movzbl (%eax),%eax
+  800812:	38 c2                	cmp    %al,%dl
+  800814:	74 18                	je     80082e <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800816:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800819:	0f b6 00             	movzbl (%eax),%eax
+  80081c:	0f b6 d0             	movzbl %al,%edx
+  80081f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800822:	0f b6 00             	movzbl (%eax),%eax
+  800825:	0f b6 c0             	movzbl %al,%eax
+  800828:	29 c2                	sub    %eax,%edx
+  80082a:	89 d0                	mov    %edx,%eax
+  80082c:	eb 1a                	jmp    800848 <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  80082e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800832:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800836:	8b 45 10             	mov    0x10(%ebp),%eax
+  800839:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80083c:	89 55 10             	mov    %edx,0x10(%ebp)
+  80083f:	85 c0                	test   %eax,%eax
+  800841:	75 c3                	jne    800806 <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800843:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800848:	c9                   	leave  
+  800849:	c3                   	ret    
+
+0080084a <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  80084a:	55                   	push   %ebp
+  80084b:	89 e5                	mov    %esp,%ebp
+  80084d:	83 ec 38             	sub    $0x38,%esp
+  800850:	8b 45 10             	mov    0x10(%ebp),%eax
+  800853:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800856:	8b 45 14             	mov    0x14(%ebp),%eax
+  800859:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80085c:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  80085f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800862:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800865:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800868:	8b 45 18             	mov    0x18(%ebp),%eax
+  80086b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  80086e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800871:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800874:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800877:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  80087a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80087d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800880:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800884:	74 1c                	je     8008a2 <printnum+0x58>
+  800886:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800889:	ba 00 00 00 00       	mov    $0x0,%edx
+  80088e:	f7 75 e4             	divl   -0x1c(%ebp)
+  800891:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800894:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800897:	ba 00 00 00 00       	mov    $0x0,%edx
+  80089c:	f7 75 e4             	divl   -0x1c(%ebp)
+  80089f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008a2:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008a8:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008ab:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8008ae:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8008b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008b4:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8008b7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8008ba:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8008bd:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8008c0:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8008c3:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008c6:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008cb:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008ce:	77 41                	ja     800911 <printnum+0xc7>
+  8008d0:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008d3:	72 05                	jb     8008da <printnum+0x90>
+  8008d5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  8008d8:	77 37                	ja     800911 <printnum+0xc7>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008da:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008dd:	83 e8 01             	sub    $0x1,%eax
+  8008e0:	83 ec 04             	sub    $0x4,%esp
+  8008e3:	ff 75 20             	pushl  0x20(%ebp)
+  8008e6:	50                   	push   %eax
+  8008e7:	ff 75 18             	pushl  0x18(%ebp)
+  8008ea:	ff 75 ec             	pushl  -0x14(%ebp)
+  8008ed:	ff 75 e8             	pushl  -0x18(%ebp)
+  8008f0:	ff 75 0c             	pushl  0xc(%ebp)
+  8008f3:	ff 75 08             	pushl  0x8(%ebp)
+  8008f6:	e8 4f ff ff ff       	call   80084a <printnum>
+  8008fb:	83 c4 20             	add    $0x20,%esp
+  8008fe:	eb 1b                	jmp    80091b <printnum+0xd1>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800900:	83 ec 08             	sub    $0x8,%esp
+  800903:	ff 75 0c             	pushl  0xc(%ebp)
+  800906:	ff 75 20             	pushl  0x20(%ebp)
+  800909:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090c:	ff d0                	call   *%eax
+  80090e:	83 c4 10             	add    $0x10,%esp
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  800911:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  800915:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  800919:	7f e5                	jg     800900 <printnum+0xb6>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  80091b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  80091e:	05 04 11 80 00       	add    $0x801104,%eax
+  800923:	0f b6 00             	movzbl (%eax),%eax
+  800926:	0f be c0             	movsbl %al,%eax
+  800929:	83 ec 08             	sub    $0x8,%esp
+  80092c:	ff 75 0c             	pushl  0xc(%ebp)
+  80092f:	50                   	push   %eax
+  800930:	8b 45 08             	mov    0x8(%ebp),%eax
+  800933:	ff d0                	call   *%eax
+  800935:	83 c4 10             	add    $0x10,%esp
+}
+  800938:	90                   	nop
+  800939:	c9                   	leave  
+  80093a:	c3                   	ret    
+
+0080093b <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  80093b:	55                   	push   %ebp
+  80093c:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  80093e:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800942:	7e 14                	jle    800958 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  800944:	8b 45 08             	mov    0x8(%ebp),%eax
+  800947:	8b 00                	mov    (%eax),%eax
+  800949:	8d 48 08             	lea    0x8(%eax),%ecx
+  80094c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80094f:	89 0a                	mov    %ecx,(%edx)
+  800951:	8b 50 04             	mov    0x4(%eax),%edx
+  800954:	8b 00                	mov    (%eax),%eax
+  800956:	eb 30                	jmp    800988 <getuint+0x4d>
+    }
+    else if (lflag) {
+  800958:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80095c:	74 16                	je     800974 <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  80095e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800961:	8b 00                	mov    (%eax),%eax
+  800963:	8d 48 04             	lea    0x4(%eax),%ecx
+  800966:	8b 55 08             	mov    0x8(%ebp),%edx
+  800969:	89 0a                	mov    %ecx,(%edx)
+  80096b:	8b 00                	mov    (%eax),%eax
+  80096d:	ba 00 00 00 00       	mov    $0x0,%edx
+  800972:	eb 14                	jmp    800988 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  800974:	8b 45 08             	mov    0x8(%ebp),%eax
+  800977:	8b 00                	mov    (%eax),%eax
+  800979:	8d 48 04             	lea    0x4(%eax),%ecx
+  80097c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80097f:	89 0a                	mov    %ecx,(%edx)
+  800981:	8b 00                	mov    (%eax),%eax
+  800983:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800988:	5d                   	pop    %ebp
+  800989:	c3                   	ret    
+
+0080098a <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  80098a:	55                   	push   %ebp
+  80098b:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  80098d:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800991:	7e 14                	jle    8009a7 <getint+0x1d>
+        return va_arg(*ap, long long);
+  800993:	8b 45 08             	mov    0x8(%ebp),%eax
+  800996:	8b 00                	mov    (%eax),%eax
+  800998:	8d 48 08             	lea    0x8(%eax),%ecx
+  80099b:	8b 55 08             	mov    0x8(%ebp),%edx
+  80099e:	89 0a                	mov    %ecx,(%edx)
+  8009a0:	8b 50 04             	mov    0x4(%eax),%edx
+  8009a3:	8b 00                	mov    (%eax),%eax
+  8009a5:	eb 28                	jmp    8009cf <getint+0x45>
+    }
+    else if (lflag) {
+  8009a7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8009ab:	74 12                	je     8009bf <getint+0x35>
+        return va_arg(*ap, long);
+  8009ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b0:	8b 00                	mov    (%eax),%eax
+  8009b2:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009b5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009b8:	89 0a                	mov    %ecx,(%edx)
+  8009ba:	8b 00                	mov    (%eax),%eax
+  8009bc:	99                   	cltd   
+  8009bd:	eb 10                	jmp    8009cf <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  8009bf:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009c2:	8b 00                	mov    (%eax),%eax
+  8009c4:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009c7:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009ca:	89 0a                	mov    %ecx,(%edx)
+  8009cc:	8b 00                	mov    (%eax),%eax
+  8009ce:	99                   	cltd   
+    }
+}
+  8009cf:	5d                   	pop    %ebp
+  8009d0:	c3                   	ret    
+
+008009d1 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009d1:	55                   	push   %ebp
+  8009d2:	89 e5                	mov    %esp,%ebp
+  8009d4:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009d7:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009da:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8009e0:	50                   	push   %eax
+  8009e1:	ff 75 10             	pushl  0x10(%ebp)
+  8009e4:	ff 75 0c             	pushl  0xc(%ebp)
+  8009e7:	ff 75 08             	pushl  0x8(%ebp)
+  8009ea:	e8 06 00 00 00       	call   8009f5 <vprintfmt>
+  8009ef:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8009f2:	90                   	nop
+  8009f3:	c9                   	leave  
+  8009f4:	c3                   	ret    
+
+008009f5 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8009f5:	55                   	push   %ebp
+  8009f6:	89 e5                	mov    %esp,%ebp
+  8009f8:	56                   	push   %esi
+  8009f9:	53                   	push   %ebx
+  8009fa:	83 ec 20             	sub    $0x20,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009fd:	eb 17                	jmp    800a16 <vprintfmt+0x21>
+            if (ch == '\0') {
+  8009ff:	85 db                	test   %ebx,%ebx
+  800a01:	0f 84 8e 03 00 00    	je     800d95 <vprintfmt+0x3a0>
+                return;
+            }
+            putch(ch, putdat);
+  800a07:	83 ec 08             	sub    $0x8,%esp
+  800a0a:	ff 75 0c             	pushl  0xc(%ebp)
+  800a0d:	53                   	push   %ebx
+  800a0e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a11:	ff d0                	call   *%eax
+  800a13:	83 c4 10             	add    $0x10,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a16:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a19:	8d 50 01             	lea    0x1(%eax),%edx
+  800a1c:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a1f:	0f b6 00             	movzbl (%eax),%eax
+  800a22:	0f b6 d8             	movzbl %al,%ebx
+  800a25:	83 fb 25             	cmp    $0x25,%ebx
+  800a28:	75 d5                	jne    8009ff <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a2a:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a2e:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a38:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a3b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a42:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a45:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a48:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a4b:	8d 50 01             	lea    0x1(%eax),%edx
+  800a4e:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a51:	0f b6 00             	movzbl (%eax),%eax
+  800a54:	0f b6 d8             	movzbl %al,%ebx
+  800a57:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a5a:	83 f8 55             	cmp    $0x55,%eax
+  800a5d:	0f 87 05 03 00 00    	ja     800d68 <vprintfmt+0x373>
+  800a63:	8b 04 85 28 11 80 00 	mov    0x801128(,%eax,4),%eax
+  800a6a:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a6c:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a70:	eb d6                	jmp    800a48 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a72:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800a76:	eb d0                	jmp    800a48 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a78:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800a7f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a82:	89 d0                	mov    %edx,%eax
+  800a84:	c1 e0 02             	shl    $0x2,%eax
+  800a87:	01 d0                	add    %edx,%eax
+  800a89:	01 c0                	add    %eax,%eax
+  800a8b:	01 d8                	add    %ebx,%eax
+  800a8d:	83 e8 30             	sub    $0x30,%eax
+  800a90:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800a93:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a96:	0f b6 00             	movzbl (%eax),%eax
+  800a99:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800a9c:	83 fb 2f             	cmp    $0x2f,%ebx
+  800a9f:	7e 39                	jle    800ada <vprintfmt+0xe5>
+  800aa1:	83 fb 39             	cmp    $0x39,%ebx
+  800aa4:	7f 34                	jg     800ada <vprintfmt+0xe5>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800aa6:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  800aaa:	eb d3                	jmp    800a7f <vprintfmt+0x8a>
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800aac:	8b 45 14             	mov    0x14(%ebp),%eax
+  800aaf:	8d 50 04             	lea    0x4(%eax),%edx
+  800ab2:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ab5:	8b 00                	mov    (%eax),%eax
+  800ab7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800aba:	eb 1f                	jmp    800adb <vprintfmt+0xe6>
+
+        case '.':
+            if (width < 0)
+  800abc:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ac0:	79 86                	jns    800a48 <vprintfmt+0x53>
+                width = 0;
+  800ac2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800ac9:	e9 7a ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800ace:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800ad5:	e9 6e ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+            goto process_precision;
+  800ada:	90                   	nop
+        case '#':
+            altflag = 1;
+            goto reswitch;
+
+        process_precision:
+            if (width < 0)
+  800adb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800adf:	0f 89 63 ff ff ff    	jns    800a48 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800ae5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ae8:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800aeb:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800af2:	e9 51 ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800af7:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800afb:	e9 48 ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800b00:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b03:	8d 50 04             	lea    0x4(%eax),%edx
+  800b06:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b09:	8b 00                	mov    (%eax),%eax
+  800b0b:	83 ec 08             	sub    $0x8,%esp
+  800b0e:	ff 75 0c             	pushl  0xc(%ebp)
+  800b11:	50                   	push   %eax
+  800b12:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b15:	ff d0                	call   *%eax
+  800b17:	83 c4 10             	add    $0x10,%esp
+            break;
+  800b1a:	e9 71 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800b1f:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b22:	8d 50 04             	lea    0x4(%eax),%edx
+  800b25:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b28:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b2a:	85 db                	test   %ebx,%ebx
+  800b2c:	79 02                	jns    800b30 <vprintfmt+0x13b>
+                err = -err;
+  800b2e:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b30:	83 fb 18             	cmp    $0x18,%ebx
+  800b33:	7f 0b                	jg     800b40 <vprintfmt+0x14b>
+  800b35:	8b 34 9d a0 10 80 00 	mov    0x8010a0(,%ebx,4),%esi
+  800b3c:	85 f6                	test   %esi,%esi
+  800b3e:	75 19                	jne    800b59 <vprintfmt+0x164>
+                printfmt(putch, putdat, "error %d", err);
+  800b40:	53                   	push   %ebx
+  800b41:	68 15 11 80 00       	push   $0x801115
+  800b46:	ff 75 0c             	pushl  0xc(%ebp)
+  800b49:	ff 75 08             	pushl  0x8(%ebp)
+  800b4c:	e8 80 fe ff ff       	call   8009d1 <printfmt>
+  800b51:	83 c4 10             	add    $0x10,%esp
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b54:	e9 37 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  800b59:	56                   	push   %esi
+  800b5a:	68 1e 11 80 00       	push   $0x80111e
+  800b5f:	ff 75 0c             	pushl  0xc(%ebp)
+  800b62:	ff 75 08             	pushl  0x8(%ebp)
+  800b65:	e8 67 fe ff ff       	call   8009d1 <printfmt>
+  800b6a:	83 c4 10             	add    $0x10,%esp
+            }
+            break;
+  800b6d:	e9 1e 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800b72:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b75:	8d 50 04             	lea    0x4(%eax),%edx
+  800b78:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b7b:	8b 30                	mov    (%eax),%esi
+  800b7d:	85 f6                	test   %esi,%esi
+  800b7f:	75 05                	jne    800b86 <vprintfmt+0x191>
+                p = "(null)";
+  800b81:	be 21 11 80 00       	mov    $0x801121,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800b86:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b8a:	7e 76                	jle    800c02 <vprintfmt+0x20d>
+  800b8c:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800b90:	74 70                	je     800c02 <vprintfmt+0x20d>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b92:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b95:	83 ec 08             	sub    $0x8,%esp
+  800b98:	50                   	push   %eax
+  800b99:	56                   	push   %esi
+  800b9a:	e8 17 f8 ff ff       	call   8003b6 <strnlen>
+  800b9f:	83 c4 10             	add    $0x10,%esp
+  800ba2:	89 c2                	mov    %eax,%edx
+  800ba4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ba7:	29 d0                	sub    %edx,%eax
+  800ba9:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800bac:	eb 17                	jmp    800bc5 <vprintfmt+0x1d0>
+                    putch(padc, putdat);
+  800bae:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800bb2:	83 ec 08             	sub    $0x8,%esp
+  800bb5:	ff 75 0c             	pushl  0xc(%ebp)
+  800bb8:	50                   	push   %eax
+  800bb9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bbc:	ff d0                	call   *%eax
+  800bbe:	83 c4 10             	add    $0x10,%esp
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bc1:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800bc5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800bc9:	7f e3                	jg     800bae <vprintfmt+0x1b9>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bcb:	eb 35                	jmp    800c02 <vprintfmt+0x20d>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800bcd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800bd1:	74 1c                	je     800bef <vprintfmt+0x1fa>
+  800bd3:	83 fb 1f             	cmp    $0x1f,%ebx
+  800bd6:	7e 05                	jle    800bdd <vprintfmt+0x1e8>
+  800bd8:	83 fb 7e             	cmp    $0x7e,%ebx
+  800bdb:	7e 12                	jle    800bef <vprintfmt+0x1fa>
+                    putch('?', putdat);
+  800bdd:	83 ec 08             	sub    $0x8,%esp
+  800be0:	ff 75 0c             	pushl  0xc(%ebp)
+  800be3:	6a 3f                	push   $0x3f
+  800be5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800be8:	ff d0                	call   *%eax
+  800bea:	83 c4 10             	add    $0x10,%esp
+  800bed:	eb 0f                	jmp    800bfe <vprintfmt+0x209>
+                }
+                else {
+                    putch(ch, putdat);
+  800bef:	83 ec 08             	sub    $0x8,%esp
+  800bf2:	ff 75 0c             	pushl  0xc(%ebp)
+  800bf5:	53                   	push   %ebx
+  800bf6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bf9:	ff d0                	call   *%eax
+  800bfb:	83 c4 10             	add    $0x10,%esp
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bfe:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c02:	89 f0                	mov    %esi,%eax
+  800c04:	8d 70 01             	lea    0x1(%eax),%esi
+  800c07:	0f b6 00             	movzbl (%eax),%eax
+  800c0a:	0f be d8             	movsbl %al,%ebx
+  800c0d:	85 db                	test   %ebx,%ebx
+  800c0f:	74 26                	je     800c37 <vprintfmt+0x242>
+  800c11:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c15:	78 b6                	js     800bcd <vprintfmt+0x1d8>
+  800c17:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  800c1b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c1f:	79 ac                	jns    800bcd <vprintfmt+0x1d8>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c21:	eb 14                	jmp    800c37 <vprintfmt+0x242>
+                putch(' ', putdat);
+  800c23:	83 ec 08             	sub    $0x8,%esp
+  800c26:	ff 75 0c             	pushl  0xc(%ebp)
+  800c29:	6a 20                	push   $0x20
+  800c2b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2e:	ff d0                	call   *%eax
+  800c30:	83 c4 10             	add    $0x10,%esp
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c33:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c37:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c3b:	7f e6                	jg     800c23 <vprintfmt+0x22e>
+                putch(' ', putdat);
+            }
+            break;
+  800c3d:	e9 4e 01 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c42:	83 ec 08             	sub    $0x8,%esp
+  800c45:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c48:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c4b:	50                   	push   %eax
+  800c4c:	e8 39 fd ff ff       	call   80098a <getint>
+  800c51:	83 c4 10             	add    $0x10,%esp
+  800c54:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c57:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c5d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c60:	85 d2                	test   %edx,%edx
+  800c62:	79 23                	jns    800c87 <vprintfmt+0x292>
+                putch('-', putdat);
+  800c64:	83 ec 08             	sub    $0x8,%esp
+  800c67:	ff 75 0c             	pushl  0xc(%ebp)
+  800c6a:	6a 2d                	push   $0x2d
+  800c6c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c6f:	ff d0                	call   *%eax
+  800c71:	83 c4 10             	add    $0x10,%esp
+                num = -(long long)num;
+  800c74:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c77:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c7a:	f7 d8                	neg    %eax
+  800c7c:	83 d2 00             	adc    $0x0,%edx
+  800c7f:	f7 da                	neg    %edx
+  800c81:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c84:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800c87:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c8e:	e9 9f 00 00 00       	jmp    800d32 <vprintfmt+0x33d>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800c93:	83 ec 08             	sub    $0x8,%esp
+  800c96:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c99:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c9c:	50                   	push   %eax
+  800c9d:	e8 99 fc ff ff       	call   80093b <getuint>
+  800ca2:	83 c4 10             	add    $0x10,%esp
+  800ca5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ca8:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800cab:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cb2:	eb 7e                	jmp    800d32 <vprintfmt+0x33d>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800cb4:	83 ec 08             	sub    $0x8,%esp
+  800cb7:	ff 75 e0             	pushl  -0x20(%ebp)
+  800cba:	8d 45 14             	lea    0x14(%ebp),%eax
+  800cbd:	50                   	push   %eax
+  800cbe:	e8 78 fc ff ff       	call   80093b <getuint>
+  800cc3:	83 c4 10             	add    $0x10,%esp
+  800cc6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cc9:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800ccc:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800cd3:	eb 5d                	jmp    800d32 <vprintfmt+0x33d>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800cd5:	83 ec 08             	sub    $0x8,%esp
+  800cd8:	ff 75 0c             	pushl  0xc(%ebp)
+  800cdb:	6a 30                	push   $0x30
+  800cdd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ce0:	ff d0                	call   *%eax
+  800ce2:	83 c4 10             	add    $0x10,%esp
+            putch('x', putdat);
+  800ce5:	83 ec 08             	sub    $0x8,%esp
+  800ce8:	ff 75 0c             	pushl  0xc(%ebp)
+  800ceb:	6a 78                	push   $0x78
+  800ced:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cf0:	ff d0                	call   *%eax
+  800cf2:	83 c4 10             	add    $0x10,%esp
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800cf5:	8b 45 14             	mov    0x14(%ebp),%eax
+  800cf8:	8d 50 04             	lea    0x4(%eax),%edx
+  800cfb:	89 55 14             	mov    %edx,0x14(%ebp)
+  800cfe:	8b 00                	mov    (%eax),%eax
+  800d00:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d03:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800d0a:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800d11:	eb 1f                	jmp    800d32 <vprintfmt+0x33d>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800d13:	83 ec 08             	sub    $0x8,%esp
+  800d16:	ff 75 e0             	pushl  -0x20(%ebp)
+  800d19:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d1c:	50                   	push   %eax
+  800d1d:	e8 19 fc ff ff       	call   80093b <getuint>
+  800d22:	83 c4 10             	add    $0x10,%esp
+  800d25:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d28:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d2b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d32:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d36:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d39:	83 ec 04             	sub    $0x4,%esp
+  800d3c:	52                   	push   %edx
+  800d3d:	ff 75 e8             	pushl  -0x18(%ebp)
+  800d40:	50                   	push   %eax
+  800d41:	ff 75 f4             	pushl  -0xc(%ebp)
+  800d44:	ff 75 f0             	pushl  -0x10(%ebp)
+  800d47:	ff 75 0c             	pushl  0xc(%ebp)
+  800d4a:	ff 75 08             	pushl  0x8(%ebp)
+  800d4d:	e8 f8 fa ff ff       	call   80084a <printnum>
+  800d52:	83 c4 20             	add    $0x20,%esp
+            break;
+  800d55:	eb 39                	jmp    800d90 <vprintfmt+0x39b>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800d57:	83 ec 08             	sub    $0x8,%esp
+  800d5a:	ff 75 0c             	pushl  0xc(%ebp)
+  800d5d:	53                   	push   %ebx
+  800d5e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d61:	ff d0                	call   *%eax
+  800d63:	83 c4 10             	add    $0x10,%esp
+            break;
+  800d66:	eb 28                	jmp    800d90 <vprintfmt+0x39b>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800d68:	83 ec 08             	sub    $0x8,%esp
+  800d6b:	ff 75 0c             	pushl  0xc(%ebp)
+  800d6e:	6a 25                	push   $0x25
+  800d70:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d73:	ff d0                	call   *%eax
+  800d75:	83 c4 10             	add    $0x10,%esp
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800d78:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d7c:	eb 04                	jmp    800d82 <vprintfmt+0x38d>
+  800d7e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d82:	8b 45 10             	mov    0x10(%ebp),%eax
+  800d85:	83 e8 01             	sub    $0x1,%eax
+  800d88:	0f b6 00             	movzbl (%eax),%eax
+  800d8b:	3c 25                	cmp    $0x25,%al
+  800d8d:	75 ef                	jne    800d7e <vprintfmt+0x389>
+                /* do nothing */;
+            break;
+  800d8f:	90                   	nop
+        }
+    }
+  800d90:	e9 68 fc ff ff       	jmp    8009fd <vprintfmt+0x8>
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+            if (ch == '\0') {
+                return;
+  800d95:	90                   	nop
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  800d96:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  800d99:	5b                   	pop    %ebx
+  800d9a:	5e                   	pop    %esi
+  800d9b:	5d                   	pop    %ebp
+  800d9c:	c3                   	ret    
+
+00800d9d <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800d9d:	55                   	push   %ebp
+  800d9e:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800da0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800da3:	8b 40 08             	mov    0x8(%eax),%eax
+  800da6:	8d 50 01             	lea    0x1(%eax),%edx
+  800da9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dac:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800daf:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db2:	8b 10                	mov    (%eax),%edx
+  800db4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db7:	8b 40 04             	mov    0x4(%eax),%eax
+  800dba:	39 c2                	cmp    %eax,%edx
+  800dbc:	73 12                	jae    800dd0 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800dbe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dc1:	8b 00                	mov    (%eax),%eax
+  800dc3:	8d 48 01             	lea    0x1(%eax),%ecx
+  800dc6:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800dc9:	89 0a                	mov    %ecx,(%edx)
+  800dcb:	8b 55 08             	mov    0x8(%ebp),%edx
+  800dce:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800dd0:	90                   	nop
+  800dd1:	5d                   	pop    %ebp
+  800dd2:	c3                   	ret    
+
+00800dd3 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800dd3:	55                   	push   %ebp
+  800dd4:	89 e5                	mov    %esp,%ebp
+  800dd6:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800dd9:	8d 45 14             	lea    0x14(%ebp),%eax
+  800ddc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800ddf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800de2:	50                   	push   %eax
+  800de3:	ff 75 10             	pushl  0x10(%ebp)
+  800de6:	ff 75 0c             	pushl  0xc(%ebp)
+  800de9:	ff 75 08             	pushl  0x8(%ebp)
+  800dec:	e8 0b 00 00 00       	call   800dfc <vsnprintf>
+  800df1:	83 c4 10             	add    $0x10,%esp
+  800df4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800df7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800dfa:	c9                   	leave  
+  800dfb:	c3                   	ret    
+
+00800dfc <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800dfc:	55                   	push   %ebp
+  800dfd:	89 e5                	mov    %esp,%ebp
+  800dff:	83 ec 18             	sub    $0x18,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800e02:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e05:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e08:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e0b:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800e0e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e11:	01 d0                	add    %edx,%eax
+  800e13:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e16:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800e1d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800e21:	74 0a                	je     800e2d <vsnprintf+0x31>
+  800e23:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800e26:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e29:	39 c2                	cmp    %eax,%edx
+  800e2b:	76 07                	jbe    800e34 <vsnprintf+0x38>
+        return -E_INVAL;
+  800e2d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e32:	eb 20                	jmp    800e54 <vsnprintf+0x58>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e34:	ff 75 14             	pushl  0x14(%ebp)
+  800e37:	ff 75 10             	pushl  0x10(%ebp)
+  800e3a:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800e3d:	50                   	push   %eax
+  800e3e:	68 9d 0d 80 00       	push   $0x800d9d
+  800e43:	e8 ad fb ff ff       	call   8009f5 <vprintfmt>
+  800e48:	83 c4 10             	add    $0x10,%esp
+    // null terminate the buffer
+    *b.buf = '\0';
+  800e4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e4e:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800e51:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e54:	c9                   	leave  
+  800e55:	c3                   	ret    
+
+00800e56 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800e56:	55                   	push   %ebp
+  800e57:	89 e5                	mov    %esp,%ebp
+  800e59:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800e5c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e5f:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800e65:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800e68:	b8 20 00 00 00       	mov    $0x20,%eax
+  800e6d:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800e70:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800e73:	89 c1                	mov    %eax,%ecx
+  800e75:	d3 ea                	shr    %cl,%edx
+  800e77:	89 d0                	mov    %edx,%eax
+}
+  800e79:	c9                   	leave  
+  800e7a:	c3                   	ret    
+
+00800e7b <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800e7b:	55                   	push   %ebp
+  800e7c:	89 e5                	mov    %esp,%ebp
+  800e7e:	57                   	push   %edi
+  800e7f:	56                   	push   %esi
+  800e80:	53                   	push   %ebx
+  800e81:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800e84:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e89:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800e8f:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800e95:	6b f0 05             	imul   $0x5,%eax,%esi
+  800e98:	01 fe                	add    %edi,%esi
+  800e9a:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800e9f:	f7 e7                	mul    %edi
+  800ea1:	01 d6                	add    %edx,%esi
+  800ea3:	89 f2                	mov    %esi,%edx
+  800ea5:	83 c0 0b             	add    $0xb,%eax
+  800ea8:	83 d2 00             	adc    $0x0,%edx
+  800eab:	89 c7                	mov    %eax,%edi
+  800ead:	83 e7 ff             	and    $0xffffffff,%edi
+  800eb0:	89 f9                	mov    %edi,%ecx
+  800eb2:	0f b7 da             	movzwl %dx,%ebx
+  800eb5:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800ebb:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800ec1:	a1 00 20 80 00       	mov    0x802000,%eax
+  800ec6:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ecc:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ed0:	c1 ea 0c             	shr    $0xc,%edx
+  800ed3:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ed6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800ed9:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ee0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ee3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ee6:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ee9:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800eec:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eef:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ef2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ef6:	74 1c                	je     800f14 <rand+0x99>
+  800ef8:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800efb:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f00:	f7 75 dc             	divl   -0x24(%ebp)
+  800f03:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800f06:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f09:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f0e:	f7 75 dc             	divl   -0x24(%ebp)
+  800f11:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800f14:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f17:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800f1a:	f7 75 dc             	divl   -0x24(%ebp)
+  800f1d:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f20:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f23:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f26:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800f29:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f2c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f2f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800f32:	83 c4 24             	add    $0x24,%esp
+  800f35:	5b                   	pop    %ebx
+  800f36:	5e                   	pop    %esi
+  800f37:	5f                   	pop    %edi
+  800f38:	5d                   	pop    %ebp
+  800f39:	c3                   	ret    
+
+00800f3a <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800f3a:	55                   	push   %ebp
+  800f3b:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800f3d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f40:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f45:	a3 00 20 80 00       	mov    %eax,0x802000
+  800f4a:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800f50:	90                   	nop
+  800f51:	5d                   	pop    %ebp
+  800f52:	c3                   	ret    
+
+00800f53 <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  800f53:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  800f57:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f5a:	ff 71 fc             	pushl  -0x4(%ecx)
+  800f5d:	55                   	push   %ebp
+  800f5e:	89 e5                	mov    %esp,%ebp
+  800f60:	51                   	push   %ecx
+  800f61:	83 ec 04             	sub    $0x4,%esp
+    cprintf("I am %d, print pgdir.\n", getpid());
+  800f64:	e8 e7 f2 ff ff       	call   800250 <getpid>
+  800f69:	83 ec 08             	sub    $0x8,%esp
+  800f6c:	50                   	push   %eax
+  800f6d:	68 80 12 80 00       	push   $0x801280
+  800f72:	e8 8a f3 ff ff       	call   800301 <cprintf>
+  800f77:	83 c4 10             	add    $0x10,%esp
+    print_pgdir();
+  800f7a:	e8 de f2 ff ff       	call   80025d <print_pgdir>
+    cprintf("pgdir pass.\n");
+  800f7f:	83 ec 0c             	sub    $0xc,%esp
+  800f82:	68 97 12 80 00       	push   $0x801297
+  800f87:	e8 75 f3 ff ff       	call   800301 <cprintf>
+  800f8c:	83 c4 10             	add    $0x10,%esp
+    return 0;
+  800f8f:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800f94:	8b 4d fc             	mov    -0x4(%ebp),%ecx
+  800f97:	c9                   	leave  
+  800f98:	8d 61 fc             	lea    -0x4(%ecx),%esp
+  800f9b:	c3                   	ret    
diff -r -u -P lab7_original/obj/user/pgdir.d lab7/obj/user/pgdir.d
--- lab7_original/obj/user/pgdir.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/pgdir.d	2016-05-06 21:59:27.498119071 +0800
@@ -0,0 +1,2 @@
+obj/user/pgdir.o obj/user/pgdir.d: user/pgdir.c libs/stdio.h libs/defs.h \
+ libs/stdarg.h user/libs/ulib.h
Binary files lab7_original/obj/user/pgdir.o and lab7/obj/user/pgdir.o differ
diff -r -u -P lab7_original/obj/user/pgdir.sym lab7/obj/user/pgdir.sym
--- lab7_original/obj/user/pgdir.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/pgdir.sym	2016-05-06 21:59:28.666161631 +0800
@@ -0,0 +1,78 @@
+00800020 .text
+00800fa0 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202d29 .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b5 syscall
+00000000 ulib.c
+00000000 stdio.c
+008002b4 cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+008010a0 error_string
+0080084a printnum
+0080093b getuint
+0080098a getint
+00800d9d sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 pgdir.c
+008003e6 strcpy
+0080022c yield
+00800213 waitpid
+00800141 sys_yield
+008006ff memmove
+00800dd3 snprintf
+008009f5 vprintfmt
+0080011d sys_fork
+00800301 cprintf
+00800250 getpid
+008007a2 memcpy
+0080028f sleep
+00800278 lab6_set_priority
+00800dfc vsnprintf
+00800375 umain
+00202d28 __STAB_END__
+00800150 sys_kill
+00202d29 __STABSTR_BEGIN__
+00800020 __panic
+008001b7 sys_sleep
+00800562 strtol
+008003b6 strnlen
+0080025d print_pgdir
+0080023a kill
+00800533 strfind
+008001fc wait
+008002a5 _start
+00800e7b rand
+008004aa strncmp
+00800171 sys_putc
+00800426 strncpy
+008007f2 memcmp
+008001ef fork
+008006bf memset
+00800f53 main
+00800f3a srand
+00800e56 hash32
+008009d1 printfmt
+00203b31 __STABSTR_END__
+00800460 strcmp
+0080026b gettime_msec
+00800192 sys_gettime
+008002d8 vcprintf
+0080006e __warn
+00800327 cputs
+008001a1 sys_lab6_set_priority
+008001c9 exit
+0080012c sys_wait
+0080010b sys_exit
+00200010 __STAB_BEGIN__
+0080038e strlen
+00800183 sys_pgdir
+00800500 strchr
+00800162 sys_getpid
diff -r -u -P lab7_original/obj/user/priority.asm lab7/obj/user/priority.asm
--- lab7_original/obj/user/priority.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/priority.asm	2016-05-06 21:59:28.594158996 +0800
@@ -0,0 +1,2913 @@
+
+obj/__user_priority.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 18             	sub    $0x18,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	83 ec 04             	sub    $0x4,%esp
+  80002f:	ff 75 0c             	pushl  0xc(%ebp)
+  800032:	ff 75 08             	pushl  0x8(%ebp)
+  800035:	68 40 12 80 00       	push   $0x801240
+  80003a:	e8 c2 02 00 00       	call   800301 <cprintf>
+  80003f:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800042:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800045:	83 ec 08             	sub    $0x8,%esp
+  800048:	50                   	push   %eax
+  800049:	ff 75 10             	pushl  0x10(%ebp)
+  80004c:	e8 87 02 00 00       	call   8002d8 <vcprintf>
+  800051:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  800054:	83 ec 0c             	sub    $0xc,%esp
+  800057:	68 5a 12 80 00       	push   $0x80125a
+  80005c:	e8 a0 02 00 00       	call   800301 <cprintf>
+  800061:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	83 ec 0c             	sub    $0xc,%esp
+  800067:	6a f6                	push   $0xfffffff6
+  800069:	e8 5b 01 00 00       	call   8001c9 <exit>
+
+0080006e <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80006e:	55                   	push   %ebp
+  80006f:	89 e5                	mov    %esp,%ebp
+  800071:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800074:	8d 45 14             	lea    0x14(%ebp),%eax
+  800077:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007a:	83 ec 04             	sub    $0x4,%esp
+  80007d:	ff 75 0c             	pushl  0xc(%ebp)
+  800080:	ff 75 08             	pushl  0x8(%ebp)
+  800083:	68 5c 12 80 00       	push   $0x80125c
+  800088:	e8 74 02 00 00       	call   800301 <cprintf>
+  80008d:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800090:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800093:	83 ec 08             	sub    $0x8,%esp
+  800096:	50                   	push   %eax
+  800097:	ff 75 10             	pushl  0x10(%ebp)
+  80009a:	e8 39 02 00 00       	call   8002d8 <vcprintf>
+  80009f:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  8000a2:	83 ec 0c             	sub    $0xc,%esp
+  8000a5:	68 5a 12 80 00       	push   $0x80125a
+  8000aa:	e8 52 02 00 00       	call   800301 <cprintf>
+  8000af:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8000b2:	90                   	nop
+  8000b3:	c9                   	leave  
+  8000b4:	c3                   	ret    
+
+008000b5 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b5:	55                   	push   %ebp
+  8000b6:	89 e5                	mov    %esp,%ebp
+  8000b8:	57                   	push   %edi
+  8000b9:	56                   	push   %esi
+  8000ba:	53                   	push   %ebx
+  8000bb:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000be:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cb:	eb 16                	jmp    8000e3 <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8000cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d0:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d3:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d6:	8b 10                	mov    (%eax),%edx
+  8000d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000db:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000df:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8000e3:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e7:	7e e4                	jle    8000cd <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000e9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ec:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000ef:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f2:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f5:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8000f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fb:	cd 80                	int    $0x80
+  8000fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  800100:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800103:	83 c4 20             	add    $0x20,%esp
+  800106:	5b                   	pop    %ebx
+  800107:	5e                   	pop    %esi
+  800108:	5f                   	pop    %edi
+  800109:	5d                   	pop    %ebp
+  80010a:	c3                   	ret    
+
+0080010b <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010b:	55                   	push   %ebp
+  80010c:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_exit, error_code);
+  80010e:	ff 75 08             	pushl  0x8(%ebp)
+  800111:	6a 01                	push   $0x1
+  800113:	e8 9d ff ff ff       	call   8000b5 <syscall>
+  800118:	83 c4 08             	add    $0x8,%esp
+}
+  80011b:	c9                   	leave  
+  80011c:	c3                   	ret    
+
+0080011d <sys_fork>:
+
+int
+sys_fork(void) {
+  80011d:	55                   	push   %ebp
+  80011e:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_fork);
+  800120:	6a 02                	push   $0x2
+  800122:	e8 8e ff ff ff       	call   8000b5 <syscall>
+  800127:	83 c4 04             	add    $0x4,%esp
+}
+  80012a:	c9                   	leave  
+  80012b:	c3                   	ret    
+
+0080012c <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80012c:	55                   	push   %ebp
+  80012d:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_wait, pid, store);
+  80012f:	ff 75 0c             	pushl  0xc(%ebp)
+  800132:	ff 75 08             	pushl  0x8(%ebp)
+  800135:	6a 03                	push   $0x3
+  800137:	e8 79 ff ff ff       	call   8000b5 <syscall>
+  80013c:	83 c4 0c             	add    $0xc,%esp
+}
+  80013f:	c9                   	leave  
+  800140:	c3                   	ret    
+
+00800141 <sys_yield>:
+
+int
+sys_yield(void) {
+  800141:	55                   	push   %ebp
+  800142:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_yield);
+  800144:	6a 0a                	push   $0xa
+  800146:	e8 6a ff ff ff       	call   8000b5 <syscall>
+  80014b:	83 c4 04             	add    $0x4,%esp
+}
+  80014e:	c9                   	leave  
+  80014f:	c3                   	ret    
+
+00800150 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800150:	55                   	push   %ebp
+  800151:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_kill, pid);
+  800153:	ff 75 08             	pushl  0x8(%ebp)
+  800156:	6a 0c                	push   $0xc
+  800158:	e8 58 ff ff ff       	call   8000b5 <syscall>
+  80015d:	83 c4 08             	add    $0x8,%esp
+}
+  800160:	c9                   	leave  
+  800161:	c3                   	ret    
+
+00800162 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800162:	55                   	push   %ebp
+  800163:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_getpid);
+  800165:	6a 12                	push   $0x12
+  800167:	e8 49 ff ff ff       	call   8000b5 <syscall>
+  80016c:	83 c4 04             	add    $0x4,%esp
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_putc, c);
+  800174:	ff 75 08             	pushl  0x8(%ebp)
+  800177:	6a 1e                	push   $0x1e
+  800179:	e8 37 ff ff ff       	call   8000b5 <syscall>
+  80017e:	83 c4 08             	add    $0x8,%esp
+}
+  800181:	c9                   	leave  
+  800182:	c3                   	ret    
+
+00800183 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800183:	55                   	push   %ebp
+  800184:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_pgdir);
+  800186:	6a 1f                	push   $0x1f
+  800188:	e8 28 ff ff ff       	call   8000b5 <syscall>
+  80018d:	83 c4 04             	add    $0x4,%esp
+}
+  800190:	c9                   	leave  
+  800191:	c3                   	ret    
+
+00800192 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  800192:	55                   	push   %ebp
+  800193:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_gettime);
+  800195:	6a 11                	push   $0x11
+  800197:	e8 19 ff ff ff       	call   8000b5 <syscall>
+  80019c:	83 c4 04             	add    $0x4,%esp
+}
+  80019f:	c9                   	leave  
+  8001a0:	c3                   	ret    
+
+008001a1 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001a1:	55                   	push   %ebp
+  8001a2:	89 e5                	mov    %esp,%ebp
+    syscall(SYS_lab6_set_priority, priority);
+  8001a4:	ff 75 08             	pushl  0x8(%ebp)
+  8001a7:	68 ff 00 00 00       	push   $0xff
+  8001ac:	e8 04 ff ff ff       	call   8000b5 <syscall>
+  8001b1:	83 c4 08             	add    $0x8,%esp
+}
+  8001b4:	90                   	nop
+  8001b5:	c9                   	leave  
+  8001b6:	c3                   	ret    
+
+008001b7 <sys_sleep>:
+
+int
+sys_sleep(unsigned int time) {
+  8001b7:	55                   	push   %ebp
+  8001b8:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_sleep, time);
+  8001ba:	ff 75 08             	pushl  0x8(%ebp)
+  8001bd:	6a 0b                	push   $0xb
+  8001bf:	e8 f1 fe ff ff       	call   8000b5 <syscall>
+  8001c4:	83 c4 08             	add    $0x8,%esp
+}
+  8001c7:	c9                   	leave  
+  8001c8:	c3                   	ret    
+
+008001c9 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001c9:	55                   	push   %ebp
+  8001ca:	89 e5                	mov    %esp,%ebp
+  8001cc:	83 ec 08             	sub    $0x8,%esp
+    sys_exit(error_code);
+  8001cf:	83 ec 0c             	sub    $0xc,%esp
+  8001d2:	ff 75 08             	pushl  0x8(%ebp)
+  8001d5:	e8 31 ff ff ff       	call   80010b <sys_exit>
+  8001da:	83 c4 10             	add    $0x10,%esp
+    cprintf("BUG: exit failed.\n");
+  8001dd:	83 ec 0c             	sub    $0xc,%esp
+  8001e0:	68 78 12 80 00       	push   $0x801278
+  8001e5:	e8 17 01 00 00       	call   800301 <cprintf>
+  8001ea:	83 c4 10             	add    $0x10,%esp
+    while (1);
+  8001ed:	eb fe                	jmp    8001ed <exit+0x24>
+
+008001ef <fork>:
+}
+
+int
+fork(void) {
+  8001ef:	55                   	push   %ebp
+  8001f0:	89 e5                	mov    %esp,%ebp
+  8001f2:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8001f5:	e8 23 ff ff ff       	call   80011d <sys_fork>
+}
+  8001fa:	c9                   	leave  
+  8001fb:	c3                   	ret    
+
+008001fc <wait>:
+
+int
+wait(void) {
+  8001fc:	55                   	push   %ebp
+  8001fd:	89 e5                	mov    %esp,%ebp
+  8001ff:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(0, NULL);
+  800202:	83 ec 08             	sub    $0x8,%esp
+  800205:	6a 00                	push   $0x0
+  800207:	6a 00                	push   $0x0
+  800209:	e8 1e ff ff ff       	call   80012c <sys_wait>
+  80020e:	83 c4 10             	add    $0x10,%esp
+}
+  800211:	c9                   	leave  
+  800212:	c3                   	ret    
+
+00800213 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800213:	55                   	push   %ebp
+  800214:	89 e5                	mov    %esp,%ebp
+  800216:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(pid, store);
+  800219:	83 ec 08             	sub    $0x8,%esp
+  80021c:	ff 75 0c             	pushl  0xc(%ebp)
+  80021f:	ff 75 08             	pushl  0x8(%ebp)
+  800222:	e8 05 ff ff ff       	call   80012c <sys_wait>
+  800227:	83 c4 10             	add    $0x10,%esp
+}
+  80022a:	c9                   	leave  
+  80022b:	c3                   	ret    
+
+0080022c <yield>:
+
+void
+yield(void) {
+  80022c:	55                   	push   %ebp
+  80022d:	89 e5                	mov    %esp,%ebp
+  80022f:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800232:	e8 0a ff ff ff       	call   800141 <sys_yield>
+}
+  800237:	90                   	nop
+  800238:	c9                   	leave  
+  800239:	c3                   	ret    
+
+0080023a <kill>:
+
+int
+kill(int pid) {
+  80023a:	55                   	push   %ebp
+  80023b:	89 e5                	mov    %esp,%ebp
+  80023d:	83 ec 08             	sub    $0x8,%esp
+    return sys_kill(pid);
+  800240:	83 ec 0c             	sub    $0xc,%esp
+  800243:	ff 75 08             	pushl  0x8(%ebp)
+  800246:	e8 05 ff ff ff       	call   800150 <sys_kill>
+  80024b:	83 c4 10             	add    $0x10,%esp
+}
+  80024e:	c9                   	leave  
+  80024f:	c3                   	ret    
+
+00800250 <getpid>:
+
+int
+getpid(void) {
+  800250:	55                   	push   %ebp
+  800251:	89 e5                	mov    %esp,%ebp
+  800253:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800256:	e8 07 ff ff ff       	call   800162 <sys_getpid>
+}
+  80025b:	c9                   	leave  
+  80025c:	c3                   	ret    
+
+0080025d <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80025d:	55                   	push   %ebp
+  80025e:	89 e5                	mov    %esp,%ebp
+  800260:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800263:	e8 1b ff ff ff       	call   800183 <sys_pgdir>
+}
+  800268:	90                   	nop
+  800269:	c9                   	leave  
+  80026a:	c3                   	ret    
+
+0080026b <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80026b:	55                   	push   %ebp
+  80026c:	89 e5                	mov    %esp,%ebp
+  80026e:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800271:	e8 1c ff ff ff       	call   800192 <sys_gettime>
+}
+  800276:	c9                   	leave  
+  800277:	c3                   	ret    
+
+00800278 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800278:	55                   	push   %ebp
+  800279:	89 e5                	mov    %esp,%ebp
+  80027b:	83 ec 08             	sub    $0x8,%esp
+    sys_lab6_set_priority(priority);
+  80027e:	83 ec 0c             	sub    $0xc,%esp
+  800281:	ff 75 08             	pushl  0x8(%ebp)
+  800284:	e8 18 ff ff ff       	call   8001a1 <sys_lab6_set_priority>
+  800289:	83 c4 10             	add    $0x10,%esp
+}
+  80028c:	90                   	nop
+  80028d:	c9                   	leave  
+  80028e:	c3                   	ret    
+
+0080028f <sleep>:
+
+int
+sleep(unsigned int time) {
+  80028f:	55                   	push   %ebp
+  800290:	89 e5                	mov    %esp,%ebp
+  800292:	83 ec 08             	sub    $0x8,%esp
+    return sys_sleep(time);
+  800295:	83 ec 0c             	sub    $0xc,%esp
+  800298:	ff 75 08             	pushl  0x8(%ebp)
+  80029b:	e8 17 ff ff ff       	call   8001b7 <sys_sleep>
+  8002a0:	83 c4 10             	add    $0x10,%esp
+}
+  8002a3:	c9                   	leave  
+  8002a4:	c3                   	ret    
+
+008002a5 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  8002a5:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  8002aa:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  8002ad:	e8 c3 00 00 00       	call   800375 <umain>
+1:  jmp 1b
+  8002b2:	eb fe                	jmp    8002b2 <_start+0xd>
+
+008002b4 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8002b4:	55                   	push   %ebp
+  8002b5:	89 e5                	mov    %esp,%ebp
+  8002b7:	83 ec 08             	sub    $0x8,%esp
+    sys_putc(c);
+  8002ba:	83 ec 0c             	sub    $0xc,%esp
+  8002bd:	ff 75 08             	pushl  0x8(%ebp)
+  8002c0:	e8 ac fe ff ff       	call   800171 <sys_putc>
+  8002c5:	83 c4 10             	add    $0x10,%esp
+    (*cnt) ++;
+  8002c8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002cb:	8b 00                	mov    (%eax),%eax
+  8002cd:	8d 50 01             	lea    0x1(%eax),%edx
+  8002d0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002d3:	89 10                	mov    %edx,(%eax)
+}
+  8002d5:	90                   	nop
+  8002d6:	c9                   	leave  
+  8002d7:	c3                   	ret    
+
+008002d8 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002d8:	55                   	push   %ebp
+  8002d9:	89 e5                	mov    %esp,%ebp
+  8002db:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  8002de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002e5:	ff 75 0c             	pushl  0xc(%ebp)
+  8002e8:	ff 75 08             	pushl  0x8(%ebp)
+  8002eb:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  8002ee:	50                   	push   %eax
+  8002ef:	68 b4 02 80 00       	push   $0x8002b4
+  8002f4:	e8 fc 06 00 00       	call   8009f5 <vprintfmt>
+  8002f9:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  8002fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002ff:	c9                   	leave  
+  800300:	c3                   	ret    
+
+00800301 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800301:	55                   	push   %ebp
+  800302:	89 e5                	mov    %esp,%ebp
+  800304:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800307:	8d 45 0c             	lea    0xc(%ebp),%eax
+  80030a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  80030d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800310:	83 ec 08             	sub    $0x8,%esp
+  800313:	50                   	push   %eax
+  800314:	ff 75 08             	pushl  0x8(%ebp)
+  800317:	e8 bc ff ff ff       	call   8002d8 <vcprintf>
+  80031c:	83 c4 10             	add    $0x10,%esp
+  80031f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800322:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800325:	c9                   	leave  
+  800326:	c3                   	ret    
+
+00800327 <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  800327:	55                   	push   %ebp
+  800328:	89 e5                	mov    %esp,%ebp
+  80032a:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  80032d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  800334:	eb 14                	jmp    80034a <cputs+0x23>
+        cputch(c, &cnt);
+  800336:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  80033a:	83 ec 08             	sub    $0x8,%esp
+  80033d:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800340:	52                   	push   %edx
+  800341:	50                   	push   %eax
+  800342:	e8 6d ff ff ff       	call   8002b4 <cputch>
+  800347:	83 c4 10             	add    $0x10,%esp
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  80034a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80034d:	8d 50 01             	lea    0x1(%eax),%edx
+  800350:	89 55 08             	mov    %edx,0x8(%ebp)
+  800353:	0f b6 00             	movzbl (%eax),%eax
+  800356:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800359:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  80035d:	75 d7                	jne    800336 <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  80035f:	83 ec 08             	sub    $0x8,%esp
+  800362:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800365:	50                   	push   %eax
+  800366:	6a 0a                	push   $0xa
+  800368:	e8 47 ff ff ff       	call   8002b4 <cputch>
+  80036d:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  800370:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  800373:	c9                   	leave  
+  800374:	c3                   	ret    
+
+00800375 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800375:	55                   	push   %ebp
+  800376:	89 e5                	mov    %esp,%ebp
+  800378:	83 ec 18             	sub    $0x18,%esp
+    int ret = main();
+  80037b:	e8 00 0c 00 00       	call   800f80 <main>
+  800380:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  800383:	83 ec 0c             	sub    $0xc,%esp
+  800386:	ff 75 f4             	pushl  -0xc(%ebp)
+  800389:	e8 3b fe ff ff       	call   8001c9 <exit>
+
+0080038e <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  80038e:	55                   	push   %ebp
+  80038f:	89 e5                	mov    %esp,%ebp
+  800391:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800394:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  80039b:	eb 04                	jmp    8003a1 <strlen+0x13>
+        cnt ++;
+  80039d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  8003a1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003a4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003a7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003aa:	0f b6 00             	movzbl (%eax),%eax
+  8003ad:	84 c0                	test   %al,%al
+  8003af:	75 ec                	jne    80039d <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003b4:	c9                   	leave  
+  8003b5:	c3                   	ret    
+
+008003b6 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  8003b6:	55                   	push   %ebp
+  8003b7:	89 e5                	mov    %esp,%ebp
+  8003b9:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003bc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003c3:	eb 04                	jmp    8003c9 <strnlen+0x13>
+        cnt ++;
+  8003c5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  8003c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003cc:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003cf:	73 10                	jae    8003e1 <strnlen+0x2b>
+  8003d1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003d4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003d7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003da:	0f b6 00             	movzbl (%eax),%eax
+  8003dd:	84 c0                	test   %al,%al
+  8003df:	75 e4                	jne    8003c5 <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003e4:	c9                   	leave  
+  8003e5:	c3                   	ret    
+
+008003e6 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  8003e6:	55                   	push   %ebp
+  8003e7:	89 e5                	mov    %esp,%ebp
+  8003e9:	57                   	push   %edi
+  8003ea:	56                   	push   %esi
+  8003eb:	83 ec 20             	sub    $0x20,%esp
+  8003ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003f4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8003f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  8003fa:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800400:	89 d1                	mov    %edx,%ecx
+  800402:	89 c2                	mov    %eax,%edx
+  800404:	89 ce                	mov    %ecx,%esi
+  800406:	89 d7                	mov    %edx,%edi
+  800408:	ac                   	lods   %ds:(%esi),%al
+  800409:	aa                   	stos   %al,%es:(%edi)
+  80040a:	84 c0                	test   %al,%al
+  80040c:	75 fa                	jne    800408 <strcpy+0x22>
+  80040e:	89 fa                	mov    %edi,%edx
+  800410:	89 f1                	mov    %esi,%ecx
+  800412:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800415:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800418:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  80041b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  80041e:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  80041f:	83 c4 20             	add    $0x20,%esp
+  800422:	5e                   	pop    %esi
+  800423:	5f                   	pop    %edi
+  800424:	5d                   	pop    %ebp
+  800425:	c3                   	ret    
+
+00800426 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800426:	55                   	push   %ebp
+  800427:	89 e5                	mov    %esp,%ebp
+  800429:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  80042c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80042f:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800432:	eb 21                	jmp    800455 <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800434:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800437:	0f b6 10             	movzbl (%eax),%edx
+  80043a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80043d:	88 10                	mov    %dl,(%eax)
+  80043f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800442:	0f b6 00             	movzbl (%eax),%eax
+  800445:	84 c0                	test   %al,%al
+  800447:	74 04                	je     80044d <strncpy+0x27>
+            src ++;
+  800449:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  80044d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800451:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800455:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800459:	75 d9                	jne    800434 <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  80045b:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  80045e:	c9                   	leave  
+  80045f:	c3                   	ret    
+
+00800460 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800460:	55                   	push   %ebp
+  800461:	89 e5                	mov    %esp,%ebp
+  800463:	57                   	push   %edi
+  800464:	56                   	push   %esi
+  800465:	83 ec 20             	sub    $0x20,%esp
+  800468:	8b 45 08             	mov    0x8(%ebp),%eax
+  80046b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80046e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800471:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800474:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800477:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80047a:	89 d1                	mov    %edx,%ecx
+  80047c:	89 c2                	mov    %eax,%edx
+  80047e:	89 ce                	mov    %ecx,%esi
+  800480:	89 d7                	mov    %edx,%edi
+  800482:	ac                   	lods   %ds:(%esi),%al
+  800483:	ae                   	scas   %es:(%edi),%al
+  800484:	75 08                	jne    80048e <strcmp+0x2e>
+  800486:	84 c0                	test   %al,%al
+  800488:	75 f8                	jne    800482 <strcmp+0x22>
+  80048a:	31 c0                	xor    %eax,%eax
+  80048c:	eb 04                	jmp    800492 <strcmp+0x32>
+  80048e:	19 c0                	sbb    %eax,%eax
+  800490:	0c 01                	or     $0x1,%al
+  800492:	89 fa                	mov    %edi,%edx
+  800494:	89 f1                	mov    %esi,%ecx
+  800496:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800499:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  80049c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  80049f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  8004a2:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  8004a3:	83 c4 20             	add    $0x20,%esp
+  8004a6:	5e                   	pop    %esi
+  8004a7:	5f                   	pop    %edi
+  8004a8:	5d                   	pop    %ebp
+  8004a9:	c3                   	ret    
+
+008004aa <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  8004aa:	55                   	push   %ebp
+  8004ab:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004ad:	eb 0c                	jmp    8004bb <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  8004af:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  8004b3:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8004b7:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004bb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004bf:	74 1a                	je     8004db <strncmp+0x31>
+  8004c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004c4:	0f b6 00             	movzbl (%eax),%eax
+  8004c7:	84 c0                	test   %al,%al
+  8004c9:	74 10                	je     8004db <strncmp+0x31>
+  8004cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004ce:	0f b6 10             	movzbl (%eax),%edx
+  8004d1:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004d4:	0f b6 00             	movzbl (%eax),%eax
+  8004d7:	38 c2                	cmp    %al,%dl
+  8004d9:	74 d4                	je     8004af <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004db:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004df:	74 18                	je     8004f9 <strncmp+0x4f>
+  8004e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e4:	0f b6 00             	movzbl (%eax),%eax
+  8004e7:	0f b6 d0             	movzbl %al,%edx
+  8004ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ed:	0f b6 00             	movzbl (%eax),%eax
+  8004f0:	0f b6 c0             	movzbl %al,%eax
+  8004f3:	29 c2                	sub    %eax,%edx
+  8004f5:	89 d0                	mov    %edx,%eax
+  8004f7:	eb 05                	jmp    8004fe <strncmp+0x54>
+  8004f9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8004fe:	5d                   	pop    %ebp
+  8004ff:	c3                   	ret    
+
+00800500 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800500:	55                   	push   %ebp
+  800501:	89 e5                	mov    %esp,%ebp
+  800503:	83 ec 04             	sub    $0x4,%esp
+  800506:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800509:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  80050c:	eb 14                	jmp    800522 <strchr+0x22>
+        if (*s == c) {
+  80050e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800511:	0f b6 00             	movzbl (%eax),%eax
+  800514:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800517:	75 05                	jne    80051e <strchr+0x1e>
+            return (char *)s;
+  800519:	8b 45 08             	mov    0x8(%ebp),%eax
+  80051c:	eb 13                	jmp    800531 <strchr+0x31>
+        }
+        s ++;
+  80051e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800522:	8b 45 08             	mov    0x8(%ebp),%eax
+  800525:	0f b6 00             	movzbl (%eax),%eax
+  800528:	84 c0                	test   %al,%al
+  80052a:	75 e2                	jne    80050e <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  80052c:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800531:	c9                   	leave  
+  800532:	c3                   	ret    
+
+00800533 <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800533:	55                   	push   %ebp
+  800534:	89 e5                	mov    %esp,%ebp
+  800536:	83 ec 04             	sub    $0x4,%esp
+  800539:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80053c:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  80053f:	eb 0f                	jmp    800550 <strfind+0x1d>
+        if (*s == c) {
+  800541:	8b 45 08             	mov    0x8(%ebp),%eax
+  800544:	0f b6 00             	movzbl (%eax),%eax
+  800547:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  80054a:	74 10                	je     80055c <strfind+0x29>
+            break;
+        }
+        s ++;
+  80054c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800550:	8b 45 08             	mov    0x8(%ebp),%eax
+  800553:	0f b6 00             	movzbl (%eax),%eax
+  800556:	84 c0                	test   %al,%al
+  800558:	75 e7                	jne    800541 <strfind+0xe>
+  80055a:	eb 01                	jmp    80055d <strfind+0x2a>
+        if (*s == c) {
+            break;
+  80055c:	90                   	nop
+        }
+        s ++;
+    }
+    return (char *)s;
+  80055d:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800560:	c9                   	leave  
+  800561:	c3                   	ret    
+
+00800562 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800562:	55                   	push   %ebp
+  800563:	89 e5                	mov    %esp,%ebp
+  800565:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800568:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  80056f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800576:	eb 04                	jmp    80057c <strtol+0x1a>
+        s ++;
+  800578:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80057c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80057f:	0f b6 00             	movzbl (%eax),%eax
+  800582:	3c 20                	cmp    $0x20,%al
+  800584:	74 f2                	je     800578 <strtol+0x16>
+  800586:	8b 45 08             	mov    0x8(%ebp),%eax
+  800589:	0f b6 00             	movzbl (%eax),%eax
+  80058c:	3c 09                	cmp    $0x9,%al
+  80058e:	74 e8                	je     800578 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800590:	8b 45 08             	mov    0x8(%ebp),%eax
+  800593:	0f b6 00             	movzbl (%eax),%eax
+  800596:	3c 2b                	cmp    $0x2b,%al
+  800598:	75 06                	jne    8005a0 <strtol+0x3e>
+        s ++;
+  80059a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  80059e:	eb 15                	jmp    8005b5 <strtol+0x53>
+    }
+    else if (*s == '-') {
+  8005a0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a3:	0f b6 00             	movzbl (%eax),%eax
+  8005a6:	3c 2d                	cmp    $0x2d,%al
+  8005a8:	75 0b                	jne    8005b5 <strtol+0x53>
+        s ++, neg = 1;
+  8005aa:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005ae:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  8005b5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005b9:	74 06                	je     8005c1 <strtol+0x5f>
+  8005bb:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  8005bf:	75 24                	jne    8005e5 <strtol+0x83>
+  8005c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005c4:	0f b6 00             	movzbl (%eax),%eax
+  8005c7:	3c 30                	cmp    $0x30,%al
+  8005c9:	75 1a                	jne    8005e5 <strtol+0x83>
+  8005cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ce:	83 c0 01             	add    $0x1,%eax
+  8005d1:	0f b6 00             	movzbl (%eax),%eax
+  8005d4:	3c 78                	cmp    $0x78,%al
+  8005d6:	75 0d                	jne    8005e5 <strtol+0x83>
+        s += 2, base = 16;
+  8005d8:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005dc:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005e3:	eb 2a                	jmp    80060f <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005e5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005e9:	75 17                	jne    800602 <strtol+0xa0>
+  8005eb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ee:	0f b6 00             	movzbl (%eax),%eax
+  8005f1:	3c 30                	cmp    $0x30,%al
+  8005f3:	75 0d                	jne    800602 <strtol+0xa0>
+        s ++, base = 8;
+  8005f5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005f9:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800600:	eb 0d                	jmp    80060f <strtol+0xad>
+    }
+    else if (base == 0) {
+  800602:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800606:	75 07                	jne    80060f <strtol+0xad>
+        base = 10;
+  800608:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  80060f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800612:	0f b6 00             	movzbl (%eax),%eax
+  800615:	3c 2f                	cmp    $0x2f,%al
+  800617:	7e 1b                	jle    800634 <strtol+0xd2>
+  800619:	8b 45 08             	mov    0x8(%ebp),%eax
+  80061c:	0f b6 00             	movzbl (%eax),%eax
+  80061f:	3c 39                	cmp    $0x39,%al
+  800621:	7f 11                	jg     800634 <strtol+0xd2>
+            dig = *s - '0';
+  800623:	8b 45 08             	mov    0x8(%ebp),%eax
+  800626:	0f b6 00             	movzbl (%eax),%eax
+  800629:	0f be c0             	movsbl %al,%eax
+  80062c:	83 e8 30             	sub    $0x30,%eax
+  80062f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800632:	eb 48                	jmp    80067c <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800634:	8b 45 08             	mov    0x8(%ebp),%eax
+  800637:	0f b6 00             	movzbl (%eax),%eax
+  80063a:	3c 60                	cmp    $0x60,%al
+  80063c:	7e 1b                	jle    800659 <strtol+0xf7>
+  80063e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800641:	0f b6 00             	movzbl (%eax),%eax
+  800644:	3c 7a                	cmp    $0x7a,%al
+  800646:	7f 11                	jg     800659 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800648:	8b 45 08             	mov    0x8(%ebp),%eax
+  80064b:	0f b6 00             	movzbl (%eax),%eax
+  80064e:	0f be c0             	movsbl %al,%eax
+  800651:	83 e8 57             	sub    $0x57,%eax
+  800654:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800657:	eb 23                	jmp    80067c <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800659:	8b 45 08             	mov    0x8(%ebp),%eax
+  80065c:	0f b6 00             	movzbl (%eax),%eax
+  80065f:	3c 40                	cmp    $0x40,%al
+  800661:	7e 3c                	jle    80069f <strtol+0x13d>
+  800663:	8b 45 08             	mov    0x8(%ebp),%eax
+  800666:	0f b6 00             	movzbl (%eax),%eax
+  800669:	3c 5a                	cmp    $0x5a,%al
+  80066b:	7f 32                	jg     80069f <strtol+0x13d>
+            dig = *s - 'A' + 10;
+  80066d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800670:	0f b6 00             	movzbl (%eax),%eax
+  800673:	0f be c0             	movsbl %al,%eax
+  800676:	83 e8 37             	sub    $0x37,%eax
+  800679:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  80067c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80067f:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800682:	7d 1a                	jge    80069e <strtol+0x13c>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  800684:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800688:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80068b:	0f af 45 10          	imul   0x10(%ebp),%eax
+  80068f:	89 c2                	mov    %eax,%edx
+  800691:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800694:	01 d0                	add    %edx,%eax
+  800696:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800699:	e9 71 ff ff ff       	jmp    80060f <strtol+0xad>
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+            break;
+  80069e:	90                   	nop
+        }
+        s ++, val = (val * base) + dig;
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  80069f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8006a3:	74 08                	je     8006ad <strtol+0x14b>
+        *endptr = (char *) s;
+  8006a5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006a8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006ab:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  8006ad:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  8006b1:	74 07                	je     8006ba <strtol+0x158>
+  8006b3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006b6:	f7 d8                	neg    %eax
+  8006b8:	eb 03                	jmp    8006bd <strtol+0x15b>
+  8006ba:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  8006bd:	c9                   	leave  
+  8006be:	c3                   	ret    
+
+008006bf <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  8006bf:	55                   	push   %ebp
+  8006c0:	89 e5                	mov    %esp,%ebp
+  8006c2:	57                   	push   %edi
+  8006c3:	83 ec 24             	sub    $0x24,%esp
+  8006c6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006c9:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006cc:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006d0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006d3:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006d6:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006d9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006df:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006e2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006e6:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006e9:	89 d7                	mov    %edx,%edi
+  8006eb:	f3 aa                	rep stos %al,%es:(%edi)
+  8006ed:	89 fa                	mov    %edi,%edx
+  8006ef:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8006f2:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  8006f5:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006f8:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  8006f9:	83 c4 24             	add    $0x24,%esp
+  8006fc:	5f                   	pop    %edi
+  8006fd:	5d                   	pop    %ebp
+  8006fe:	c3                   	ret    
+
+008006ff <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  8006ff:	55                   	push   %ebp
+  800700:	89 e5                	mov    %esp,%ebp
+  800702:	57                   	push   %edi
+  800703:	56                   	push   %esi
+  800704:	53                   	push   %ebx
+  800705:	83 ec 30             	sub    $0x30,%esp
+  800708:	8b 45 08             	mov    0x8(%ebp),%eax
+  80070b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80070e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800711:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800714:	8b 45 10             	mov    0x10(%ebp),%eax
+  800717:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  80071a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80071d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800720:	73 42                	jae    800764 <memmove+0x65>
+  800722:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800725:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800728:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80072b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80072e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800731:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800734:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800737:	c1 e8 02             	shr    $0x2,%eax
+  80073a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  80073c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  80073f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800742:	89 d7                	mov    %edx,%edi
+  800744:	89 c6                	mov    %eax,%esi
+  800746:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800748:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  80074b:	83 e1 03             	and    $0x3,%ecx
+  80074e:	74 02                	je     800752 <memmove+0x53>
+  800750:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800752:	89 f0                	mov    %esi,%eax
+  800754:	89 fa                	mov    %edi,%edx
+  800756:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800759:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  80075c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  80075f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  800762:	eb 36                	jmp    80079a <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800764:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800767:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80076a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80076d:	01 c2                	add    %eax,%edx
+  80076f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800772:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800775:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800778:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  80077b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80077e:	89 c1                	mov    %eax,%ecx
+  800780:	89 d8                	mov    %ebx,%eax
+  800782:	89 d6                	mov    %edx,%esi
+  800784:	89 c7                	mov    %eax,%edi
+  800786:	fd                   	std    
+  800787:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800789:	fc                   	cld    
+  80078a:	89 f8                	mov    %edi,%eax
+  80078c:	89 f2                	mov    %esi,%edx
+  80078e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800791:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800794:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800797:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  80079a:	83 c4 30             	add    $0x30,%esp
+  80079d:	5b                   	pop    %ebx
+  80079e:	5e                   	pop    %esi
+  80079f:	5f                   	pop    %edi
+  8007a0:	5d                   	pop    %ebp
+  8007a1:	c3                   	ret    
+
+008007a2 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  8007a2:	55                   	push   %ebp
+  8007a3:	89 e5                	mov    %esp,%ebp
+  8007a5:	57                   	push   %edi
+  8007a6:	56                   	push   %esi
+  8007a7:	83 ec 20             	sub    $0x20,%esp
+  8007aa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8007b0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007b6:	8b 45 10             	mov    0x10(%ebp),%eax
+  8007b9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  8007bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8007bf:	c1 e8 02             	shr    $0x2,%eax
+  8007c2:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  8007c4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007ca:	89 d7                	mov    %edx,%edi
+  8007cc:	89 c6                	mov    %eax,%esi
+  8007ce:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007d0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007d3:	83 e1 03             	and    $0x3,%ecx
+  8007d6:	74 02                	je     8007da <memcpy+0x38>
+  8007d8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007da:	89 f0                	mov    %esi,%eax
+  8007dc:	89 fa                	mov    %edi,%edx
+  8007de:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007e1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007e4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  8007e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007ea:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007eb:	83 c4 20             	add    $0x20,%esp
+  8007ee:	5e                   	pop    %esi
+  8007ef:	5f                   	pop    %edi
+  8007f0:	5d                   	pop    %ebp
+  8007f1:	c3                   	ret    
+
+008007f2 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  8007f2:	55                   	push   %ebp
+  8007f3:	89 e5                	mov    %esp,%ebp
+  8007f5:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  8007f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007fb:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  8007fe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800801:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800804:	eb 30                	jmp    800836 <memcmp+0x44>
+        if (*s1 != *s2) {
+  800806:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800809:	0f b6 10             	movzbl (%eax),%edx
+  80080c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80080f:	0f b6 00             	movzbl (%eax),%eax
+  800812:	38 c2                	cmp    %al,%dl
+  800814:	74 18                	je     80082e <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800816:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800819:	0f b6 00             	movzbl (%eax),%eax
+  80081c:	0f b6 d0             	movzbl %al,%edx
+  80081f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800822:	0f b6 00             	movzbl (%eax),%eax
+  800825:	0f b6 c0             	movzbl %al,%eax
+  800828:	29 c2                	sub    %eax,%edx
+  80082a:	89 d0                	mov    %edx,%eax
+  80082c:	eb 1a                	jmp    800848 <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  80082e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800832:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800836:	8b 45 10             	mov    0x10(%ebp),%eax
+  800839:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80083c:	89 55 10             	mov    %edx,0x10(%ebp)
+  80083f:	85 c0                	test   %eax,%eax
+  800841:	75 c3                	jne    800806 <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800843:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800848:	c9                   	leave  
+  800849:	c3                   	ret    
+
+0080084a <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  80084a:	55                   	push   %ebp
+  80084b:	89 e5                	mov    %esp,%ebp
+  80084d:	83 ec 38             	sub    $0x38,%esp
+  800850:	8b 45 10             	mov    0x10(%ebp),%eax
+  800853:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800856:	8b 45 14             	mov    0x14(%ebp),%eax
+  800859:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80085c:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  80085f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800862:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800865:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800868:	8b 45 18             	mov    0x18(%ebp),%eax
+  80086b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  80086e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800871:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800874:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800877:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  80087a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80087d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800880:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800884:	74 1c                	je     8008a2 <printnum+0x58>
+  800886:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800889:	ba 00 00 00 00       	mov    $0x0,%edx
+  80088e:	f7 75 e4             	divl   -0x1c(%ebp)
+  800891:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800894:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800897:	ba 00 00 00 00       	mov    $0x0,%edx
+  80089c:	f7 75 e4             	divl   -0x1c(%ebp)
+  80089f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008a2:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008a8:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008ab:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8008ae:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8008b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008b4:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8008b7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8008ba:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8008bd:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8008c0:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8008c3:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008c6:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008cb:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008ce:	77 41                	ja     800911 <printnum+0xc7>
+  8008d0:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008d3:	72 05                	jb     8008da <printnum+0x90>
+  8008d5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  8008d8:	77 37                	ja     800911 <printnum+0xc7>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008da:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008dd:	83 e8 01             	sub    $0x1,%eax
+  8008e0:	83 ec 04             	sub    $0x4,%esp
+  8008e3:	ff 75 20             	pushl  0x20(%ebp)
+  8008e6:	50                   	push   %eax
+  8008e7:	ff 75 18             	pushl  0x18(%ebp)
+  8008ea:	ff 75 ec             	pushl  -0x14(%ebp)
+  8008ed:	ff 75 e8             	pushl  -0x18(%ebp)
+  8008f0:	ff 75 0c             	pushl  0xc(%ebp)
+  8008f3:	ff 75 08             	pushl  0x8(%ebp)
+  8008f6:	e8 4f ff ff ff       	call   80084a <printnum>
+  8008fb:	83 c4 20             	add    $0x20,%esp
+  8008fe:	eb 1b                	jmp    80091b <printnum+0xd1>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800900:	83 ec 08             	sub    $0x8,%esp
+  800903:	ff 75 0c             	pushl  0xc(%ebp)
+  800906:	ff 75 20             	pushl  0x20(%ebp)
+  800909:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090c:	ff d0                	call   *%eax
+  80090e:	83 c4 10             	add    $0x10,%esp
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  800911:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  800915:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  800919:	7f e5                	jg     800900 <printnum+0xb6>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  80091b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  80091e:	05 a4 13 80 00       	add    $0x8013a4,%eax
+  800923:	0f b6 00             	movzbl (%eax),%eax
+  800926:	0f be c0             	movsbl %al,%eax
+  800929:	83 ec 08             	sub    $0x8,%esp
+  80092c:	ff 75 0c             	pushl  0xc(%ebp)
+  80092f:	50                   	push   %eax
+  800930:	8b 45 08             	mov    0x8(%ebp),%eax
+  800933:	ff d0                	call   *%eax
+  800935:	83 c4 10             	add    $0x10,%esp
+}
+  800938:	90                   	nop
+  800939:	c9                   	leave  
+  80093a:	c3                   	ret    
+
+0080093b <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  80093b:	55                   	push   %ebp
+  80093c:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  80093e:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800942:	7e 14                	jle    800958 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  800944:	8b 45 08             	mov    0x8(%ebp),%eax
+  800947:	8b 00                	mov    (%eax),%eax
+  800949:	8d 48 08             	lea    0x8(%eax),%ecx
+  80094c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80094f:	89 0a                	mov    %ecx,(%edx)
+  800951:	8b 50 04             	mov    0x4(%eax),%edx
+  800954:	8b 00                	mov    (%eax),%eax
+  800956:	eb 30                	jmp    800988 <getuint+0x4d>
+    }
+    else if (lflag) {
+  800958:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80095c:	74 16                	je     800974 <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  80095e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800961:	8b 00                	mov    (%eax),%eax
+  800963:	8d 48 04             	lea    0x4(%eax),%ecx
+  800966:	8b 55 08             	mov    0x8(%ebp),%edx
+  800969:	89 0a                	mov    %ecx,(%edx)
+  80096b:	8b 00                	mov    (%eax),%eax
+  80096d:	ba 00 00 00 00       	mov    $0x0,%edx
+  800972:	eb 14                	jmp    800988 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  800974:	8b 45 08             	mov    0x8(%ebp),%eax
+  800977:	8b 00                	mov    (%eax),%eax
+  800979:	8d 48 04             	lea    0x4(%eax),%ecx
+  80097c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80097f:	89 0a                	mov    %ecx,(%edx)
+  800981:	8b 00                	mov    (%eax),%eax
+  800983:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800988:	5d                   	pop    %ebp
+  800989:	c3                   	ret    
+
+0080098a <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  80098a:	55                   	push   %ebp
+  80098b:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  80098d:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800991:	7e 14                	jle    8009a7 <getint+0x1d>
+        return va_arg(*ap, long long);
+  800993:	8b 45 08             	mov    0x8(%ebp),%eax
+  800996:	8b 00                	mov    (%eax),%eax
+  800998:	8d 48 08             	lea    0x8(%eax),%ecx
+  80099b:	8b 55 08             	mov    0x8(%ebp),%edx
+  80099e:	89 0a                	mov    %ecx,(%edx)
+  8009a0:	8b 50 04             	mov    0x4(%eax),%edx
+  8009a3:	8b 00                	mov    (%eax),%eax
+  8009a5:	eb 28                	jmp    8009cf <getint+0x45>
+    }
+    else if (lflag) {
+  8009a7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8009ab:	74 12                	je     8009bf <getint+0x35>
+        return va_arg(*ap, long);
+  8009ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b0:	8b 00                	mov    (%eax),%eax
+  8009b2:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009b5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009b8:	89 0a                	mov    %ecx,(%edx)
+  8009ba:	8b 00                	mov    (%eax),%eax
+  8009bc:	99                   	cltd   
+  8009bd:	eb 10                	jmp    8009cf <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  8009bf:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009c2:	8b 00                	mov    (%eax),%eax
+  8009c4:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009c7:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009ca:	89 0a                	mov    %ecx,(%edx)
+  8009cc:	8b 00                	mov    (%eax),%eax
+  8009ce:	99                   	cltd   
+    }
+}
+  8009cf:	5d                   	pop    %ebp
+  8009d0:	c3                   	ret    
+
+008009d1 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009d1:	55                   	push   %ebp
+  8009d2:	89 e5                	mov    %esp,%ebp
+  8009d4:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009d7:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009da:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8009e0:	50                   	push   %eax
+  8009e1:	ff 75 10             	pushl  0x10(%ebp)
+  8009e4:	ff 75 0c             	pushl  0xc(%ebp)
+  8009e7:	ff 75 08             	pushl  0x8(%ebp)
+  8009ea:	e8 06 00 00 00       	call   8009f5 <vprintfmt>
+  8009ef:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8009f2:	90                   	nop
+  8009f3:	c9                   	leave  
+  8009f4:	c3                   	ret    
+
+008009f5 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8009f5:	55                   	push   %ebp
+  8009f6:	89 e5                	mov    %esp,%ebp
+  8009f8:	56                   	push   %esi
+  8009f9:	53                   	push   %ebx
+  8009fa:	83 ec 20             	sub    $0x20,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009fd:	eb 17                	jmp    800a16 <vprintfmt+0x21>
+            if (ch == '\0') {
+  8009ff:	85 db                	test   %ebx,%ebx
+  800a01:	0f 84 8e 03 00 00    	je     800d95 <vprintfmt+0x3a0>
+                return;
+            }
+            putch(ch, putdat);
+  800a07:	83 ec 08             	sub    $0x8,%esp
+  800a0a:	ff 75 0c             	pushl  0xc(%ebp)
+  800a0d:	53                   	push   %ebx
+  800a0e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a11:	ff d0                	call   *%eax
+  800a13:	83 c4 10             	add    $0x10,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a16:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a19:	8d 50 01             	lea    0x1(%eax),%edx
+  800a1c:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a1f:	0f b6 00             	movzbl (%eax),%eax
+  800a22:	0f b6 d8             	movzbl %al,%ebx
+  800a25:	83 fb 25             	cmp    $0x25,%ebx
+  800a28:	75 d5                	jne    8009ff <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a2a:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a2e:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a38:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a3b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a42:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a45:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a48:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a4b:	8d 50 01             	lea    0x1(%eax),%edx
+  800a4e:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a51:	0f b6 00             	movzbl (%eax),%eax
+  800a54:	0f b6 d8             	movzbl %al,%ebx
+  800a57:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a5a:	83 f8 55             	cmp    $0x55,%eax
+  800a5d:	0f 87 05 03 00 00    	ja     800d68 <vprintfmt+0x373>
+  800a63:	8b 04 85 c8 13 80 00 	mov    0x8013c8(,%eax,4),%eax
+  800a6a:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a6c:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a70:	eb d6                	jmp    800a48 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a72:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800a76:	eb d0                	jmp    800a48 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a78:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800a7f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a82:	89 d0                	mov    %edx,%eax
+  800a84:	c1 e0 02             	shl    $0x2,%eax
+  800a87:	01 d0                	add    %edx,%eax
+  800a89:	01 c0                	add    %eax,%eax
+  800a8b:	01 d8                	add    %ebx,%eax
+  800a8d:	83 e8 30             	sub    $0x30,%eax
+  800a90:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800a93:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a96:	0f b6 00             	movzbl (%eax),%eax
+  800a99:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800a9c:	83 fb 2f             	cmp    $0x2f,%ebx
+  800a9f:	7e 39                	jle    800ada <vprintfmt+0xe5>
+  800aa1:	83 fb 39             	cmp    $0x39,%ebx
+  800aa4:	7f 34                	jg     800ada <vprintfmt+0xe5>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800aa6:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  800aaa:	eb d3                	jmp    800a7f <vprintfmt+0x8a>
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800aac:	8b 45 14             	mov    0x14(%ebp),%eax
+  800aaf:	8d 50 04             	lea    0x4(%eax),%edx
+  800ab2:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ab5:	8b 00                	mov    (%eax),%eax
+  800ab7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800aba:	eb 1f                	jmp    800adb <vprintfmt+0xe6>
+
+        case '.':
+            if (width < 0)
+  800abc:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ac0:	79 86                	jns    800a48 <vprintfmt+0x53>
+                width = 0;
+  800ac2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800ac9:	e9 7a ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800ace:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800ad5:	e9 6e ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+            goto process_precision;
+  800ada:	90                   	nop
+        case '#':
+            altflag = 1;
+            goto reswitch;
+
+        process_precision:
+            if (width < 0)
+  800adb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800adf:	0f 89 63 ff ff ff    	jns    800a48 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800ae5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ae8:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800aeb:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800af2:	e9 51 ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800af7:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800afb:	e9 48 ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800b00:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b03:	8d 50 04             	lea    0x4(%eax),%edx
+  800b06:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b09:	8b 00                	mov    (%eax),%eax
+  800b0b:	83 ec 08             	sub    $0x8,%esp
+  800b0e:	ff 75 0c             	pushl  0xc(%ebp)
+  800b11:	50                   	push   %eax
+  800b12:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b15:	ff d0                	call   *%eax
+  800b17:	83 c4 10             	add    $0x10,%esp
+            break;
+  800b1a:	e9 71 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800b1f:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b22:	8d 50 04             	lea    0x4(%eax),%edx
+  800b25:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b28:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b2a:	85 db                	test   %ebx,%ebx
+  800b2c:	79 02                	jns    800b30 <vprintfmt+0x13b>
+                err = -err;
+  800b2e:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b30:	83 fb 18             	cmp    $0x18,%ebx
+  800b33:	7f 0b                	jg     800b40 <vprintfmt+0x14b>
+  800b35:	8b 34 9d 40 13 80 00 	mov    0x801340(,%ebx,4),%esi
+  800b3c:	85 f6                	test   %esi,%esi
+  800b3e:	75 19                	jne    800b59 <vprintfmt+0x164>
+                printfmt(putch, putdat, "error %d", err);
+  800b40:	53                   	push   %ebx
+  800b41:	68 b5 13 80 00       	push   $0x8013b5
+  800b46:	ff 75 0c             	pushl  0xc(%ebp)
+  800b49:	ff 75 08             	pushl  0x8(%ebp)
+  800b4c:	e8 80 fe ff ff       	call   8009d1 <printfmt>
+  800b51:	83 c4 10             	add    $0x10,%esp
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b54:	e9 37 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  800b59:	56                   	push   %esi
+  800b5a:	68 be 13 80 00       	push   $0x8013be
+  800b5f:	ff 75 0c             	pushl  0xc(%ebp)
+  800b62:	ff 75 08             	pushl  0x8(%ebp)
+  800b65:	e8 67 fe ff ff       	call   8009d1 <printfmt>
+  800b6a:	83 c4 10             	add    $0x10,%esp
+            }
+            break;
+  800b6d:	e9 1e 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800b72:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b75:	8d 50 04             	lea    0x4(%eax),%edx
+  800b78:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b7b:	8b 30                	mov    (%eax),%esi
+  800b7d:	85 f6                	test   %esi,%esi
+  800b7f:	75 05                	jne    800b86 <vprintfmt+0x191>
+                p = "(null)";
+  800b81:	be c1 13 80 00       	mov    $0x8013c1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800b86:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b8a:	7e 76                	jle    800c02 <vprintfmt+0x20d>
+  800b8c:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800b90:	74 70                	je     800c02 <vprintfmt+0x20d>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b92:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b95:	83 ec 08             	sub    $0x8,%esp
+  800b98:	50                   	push   %eax
+  800b99:	56                   	push   %esi
+  800b9a:	e8 17 f8 ff ff       	call   8003b6 <strnlen>
+  800b9f:	83 c4 10             	add    $0x10,%esp
+  800ba2:	89 c2                	mov    %eax,%edx
+  800ba4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ba7:	29 d0                	sub    %edx,%eax
+  800ba9:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800bac:	eb 17                	jmp    800bc5 <vprintfmt+0x1d0>
+                    putch(padc, putdat);
+  800bae:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800bb2:	83 ec 08             	sub    $0x8,%esp
+  800bb5:	ff 75 0c             	pushl  0xc(%ebp)
+  800bb8:	50                   	push   %eax
+  800bb9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bbc:	ff d0                	call   *%eax
+  800bbe:	83 c4 10             	add    $0x10,%esp
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bc1:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800bc5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800bc9:	7f e3                	jg     800bae <vprintfmt+0x1b9>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bcb:	eb 35                	jmp    800c02 <vprintfmt+0x20d>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800bcd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800bd1:	74 1c                	je     800bef <vprintfmt+0x1fa>
+  800bd3:	83 fb 1f             	cmp    $0x1f,%ebx
+  800bd6:	7e 05                	jle    800bdd <vprintfmt+0x1e8>
+  800bd8:	83 fb 7e             	cmp    $0x7e,%ebx
+  800bdb:	7e 12                	jle    800bef <vprintfmt+0x1fa>
+                    putch('?', putdat);
+  800bdd:	83 ec 08             	sub    $0x8,%esp
+  800be0:	ff 75 0c             	pushl  0xc(%ebp)
+  800be3:	6a 3f                	push   $0x3f
+  800be5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800be8:	ff d0                	call   *%eax
+  800bea:	83 c4 10             	add    $0x10,%esp
+  800bed:	eb 0f                	jmp    800bfe <vprintfmt+0x209>
+                }
+                else {
+                    putch(ch, putdat);
+  800bef:	83 ec 08             	sub    $0x8,%esp
+  800bf2:	ff 75 0c             	pushl  0xc(%ebp)
+  800bf5:	53                   	push   %ebx
+  800bf6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bf9:	ff d0                	call   *%eax
+  800bfb:	83 c4 10             	add    $0x10,%esp
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bfe:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c02:	89 f0                	mov    %esi,%eax
+  800c04:	8d 70 01             	lea    0x1(%eax),%esi
+  800c07:	0f b6 00             	movzbl (%eax),%eax
+  800c0a:	0f be d8             	movsbl %al,%ebx
+  800c0d:	85 db                	test   %ebx,%ebx
+  800c0f:	74 26                	je     800c37 <vprintfmt+0x242>
+  800c11:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c15:	78 b6                	js     800bcd <vprintfmt+0x1d8>
+  800c17:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  800c1b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c1f:	79 ac                	jns    800bcd <vprintfmt+0x1d8>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c21:	eb 14                	jmp    800c37 <vprintfmt+0x242>
+                putch(' ', putdat);
+  800c23:	83 ec 08             	sub    $0x8,%esp
+  800c26:	ff 75 0c             	pushl  0xc(%ebp)
+  800c29:	6a 20                	push   $0x20
+  800c2b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2e:	ff d0                	call   *%eax
+  800c30:	83 c4 10             	add    $0x10,%esp
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c33:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c37:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c3b:	7f e6                	jg     800c23 <vprintfmt+0x22e>
+                putch(' ', putdat);
+            }
+            break;
+  800c3d:	e9 4e 01 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c42:	83 ec 08             	sub    $0x8,%esp
+  800c45:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c48:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c4b:	50                   	push   %eax
+  800c4c:	e8 39 fd ff ff       	call   80098a <getint>
+  800c51:	83 c4 10             	add    $0x10,%esp
+  800c54:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c57:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c5d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c60:	85 d2                	test   %edx,%edx
+  800c62:	79 23                	jns    800c87 <vprintfmt+0x292>
+                putch('-', putdat);
+  800c64:	83 ec 08             	sub    $0x8,%esp
+  800c67:	ff 75 0c             	pushl  0xc(%ebp)
+  800c6a:	6a 2d                	push   $0x2d
+  800c6c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c6f:	ff d0                	call   *%eax
+  800c71:	83 c4 10             	add    $0x10,%esp
+                num = -(long long)num;
+  800c74:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c77:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c7a:	f7 d8                	neg    %eax
+  800c7c:	83 d2 00             	adc    $0x0,%edx
+  800c7f:	f7 da                	neg    %edx
+  800c81:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c84:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800c87:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c8e:	e9 9f 00 00 00       	jmp    800d32 <vprintfmt+0x33d>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800c93:	83 ec 08             	sub    $0x8,%esp
+  800c96:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c99:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c9c:	50                   	push   %eax
+  800c9d:	e8 99 fc ff ff       	call   80093b <getuint>
+  800ca2:	83 c4 10             	add    $0x10,%esp
+  800ca5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ca8:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800cab:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cb2:	eb 7e                	jmp    800d32 <vprintfmt+0x33d>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800cb4:	83 ec 08             	sub    $0x8,%esp
+  800cb7:	ff 75 e0             	pushl  -0x20(%ebp)
+  800cba:	8d 45 14             	lea    0x14(%ebp),%eax
+  800cbd:	50                   	push   %eax
+  800cbe:	e8 78 fc ff ff       	call   80093b <getuint>
+  800cc3:	83 c4 10             	add    $0x10,%esp
+  800cc6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cc9:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800ccc:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800cd3:	eb 5d                	jmp    800d32 <vprintfmt+0x33d>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800cd5:	83 ec 08             	sub    $0x8,%esp
+  800cd8:	ff 75 0c             	pushl  0xc(%ebp)
+  800cdb:	6a 30                	push   $0x30
+  800cdd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ce0:	ff d0                	call   *%eax
+  800ce2:	83 c4 10             	add    $0x10,%esp
+            putch('x', putdat);
+  800ce5:	83 ec 08             	sub    $0x8,%esp
+  800ce8:	ff 75 0c             	pushl  0xc(%ebp)
+  800ceb:	6a 78                	push   $0x78
+  800ced:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cf0:	ff d0                	call   *%eax
+  800cf2:	83 c4 10             	add    $0x10,%esp
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800cf5:	8b 45 14             	mov    0x14(%ebp),%eax
+  800cf8:	8d 50 04             	lea    0x4(%eax),%edx
+  800cfb:	89 55 14             	mov    %edx,0x14(%ebp)
+  800cfe:	8b 00                	mov    (%eax),%eax
+  800d00:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d03:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800d0a:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800d11:	eb 1f                	jmp    800d32 <vprintfmt+0x33d>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800d13:	83 ec 08             	sub    $0x8,%esp
+  800d16:	ff 75 e0             	pushl  -0x20(%ebp)
+  800d19:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d1c:	50                   	push   %eax
+  800d1d:	e8 19 fc ff ff       	call   80093b <getuint>
+  800d22:	83 c4 10             	add    $0x10,%esp
+  800d25:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d28:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d2b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d32:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d36:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d39:	83 ec 04             	sub    $0x4,%esp
+  800d3c:	52                   	push   %edx
+  800d3d:	ff 75 e8             	pushl  -0x18(%ebp)
+  800d40:	50                   	push   %eax
+  800d41:	ff 75 f4             	pushl  -0xc(%ebp)
+  800d44:	ff 75 f0             	pushl  -0x10(%ebp)
+  800d47:	ff 75 0c             	pushl  0xc(%ebp)
+  800d4a:	ff 75 08             	pushl  0x8(%ebp)
+  800d4d:	e8 f8 fa ff ff       	call   80084a <printnum>
+  800d52:	83 c4 20             	add    $0x20,%esp
+            break;
+  800d55:	eb 39                	jmp    800d90 <vprintfmt+0x39b>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800d57:	83 ec 08             	sub    $0x8,%esp
+  800d5a:	ff 75 0c             	pushl  0xc(%ebp)
+  800d5d:	53                   	push   %ebx
+  800d5e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d61:	ff d0                	call   *%eax
+  800d63:	83 c4 10             	add    $0x10,%esp
+            break;
+  800d66:	eb 28                	jmp    800d90 <vprintfmt+0x39b>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800d68:	83 ec 08             	sub    $0x8,%esp
+  800d6b:	ff 75 0c             	pushl  0xc(%ebp)
+  800d6e:	6a 25                	push   $0x25
+  800d70:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d73:	ff d0                	call   *%eax
+  800d75:	83 c4 10             	add    $0x10,%esp
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800d78:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d7c:	eb 04                	jmp    800d82 <vprintfmt+0x38d>
+  800d7e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d82:	8b 45 10             	mov    0x10(%ebp),%eax
+  800d85:	83 e8 01             	sub    $0x1,%eax
+  800d88:	0f b6 00             	movzbl (%eax),%eax
+  800d8b:	3c 25                	cmp    $0x25,%al
+  800d8d:	75 ef                	jne    800d7e <vprintfmt+0x389>
+                /* do nothing */;
+            break;
+  800d8f:	90                   	nop
+        }
+    }
+  800d90:	e9 68 fc ff ff       	jmp    8009fd <vprintfmt+0x8>
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+            if (ch == '\0') {
+                return;
+  800d95:	90                   	nop
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  800d96:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  800d99:	5b                   	pop    %ebx
+  800d9a:	5e                   	pop    %esi
+  800d9b:	5d                   	pop    %ebp
+  800d9c:	c3                   	ret    
+
+00800d9d <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800d9d:	55                   	push   %ebp
+  800d9e:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800da0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800da3:	8b 40 08             	mov    0x8(%eax),%eax
+  800da6:	8d 50 01             	lea    0x1(%eax),%edx
+  800da9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dac:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800daf:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db2:	8b 10                	mov    (%eax),%edx
+  800db4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db7:	8b 40 04             	mov    0x4(%eax),%eax
+  800dba:	39 c2                	cmp    %eax,%edx
+  800dbc:	73 12                	jae    800dd0 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800dbe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dc1:	8b 00                	mov    (%eax),%eax
+  800dc3:	8d 48 01             	lea    0x1(%eax),%ecx
+  800dc6:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800dc9:	89 0a                	mov    %ecx,(%edx)
+  800dcb:	8b 55 08             	mov    0x8(%ebp),%edx
+  800dce:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800dd0:	90                   	nop
+  800dd1:	5d                   	pop    %ebp
+  800dd2:	c3                   	ret    
+
+00800dd3 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800dd3:	55                   	push   %ebp
+  800dd4:	89 e5                	mov    %esp,%ebp
+  800dd6:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800dd9:	8d 45 14             	lea    0x14(%ebp),%eax
+  800ddc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800ddf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800de2:	50                   	push   %eax
+  800de3:	ff 75 10             	pushl  0x10(%ebp)
+  800de6:	ff 75 0c             	pushl  0xc(%ebp)
+  800de9:	ff 75 08             	pushl  0x8(%ebp)
+  800dec:	e8 0b 00 00 00       	call   800dfc <vsnprintf>
+  800df1:	83 c4 10             	add    $0x10,%esp
+  800df4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800df7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800dfa:	c9                   	leave  
+  800dfb:	c3                   	ret    
+
+00800dfc <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800dfc:	55                   	push   %ebp
+  800dfd:	89 e5                	mov    %esp,%ebp
+  800dff:	83 ec 18             	sub    $0x18,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800e02:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e05:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e08:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e0b:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800e0e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e11:	01 d0                	add    %edx,%eax
+  800e13:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e16:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800e1d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800e21:	74 0a                	je     800e2d <vsnprintf+0x31>
+  800e23:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800e26:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e29:	39 c2                	cmp    %eax,%edx
+  800e2b:	76 07                	jbe    800e34 <vsnprintf+0x38>
+        return -E_INVAL;
+  800e2d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e32:	eb 20                	jmp    800e54 <vsnprintf+0x58>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e34:	ff 75 14             	pushl  0x14(%ebp)
+  800e37:	ff 75 10             	pushl  0x10(%ebp)
+  800e3a:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800e3d:	50                   	push   %eax
+  800e3e:	68 9d 0d 80 00       	push   $0x800d9d
+  800e43:	e8 ad fb ff ff       	call   8009f5 <vprintfmt>
+  800e48:	83 c4 10             	add    $0x10,%esp
+    // null terminate the buffer
+    *b.buf = '\0';
+  800e4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e4e:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800e51:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e54:	c9                   	leave  
+  800e55:	c3                   	ret    
+
+00800e56 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800e56:	55                   	push   %ebp
+  800e57:	89 e5                	mov    %esp,%ebp
+  800e59:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800e5c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e5f:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800e65:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800e68:	b8 20 00 00 00       	mov    $0x20,%eax
+  800e6d:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800e70:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800e73:	89 c1                	mov    %eax,%ecx
+  800e75:	d3 ea                	shr    %cl,%edx
+  800e77:	89 d0                	mov    %edx,%eax
+}
+  800e79:	c9                   	leave  
+  800e7a:	c3                   	ret    
+
+00800e7b <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800e7b:	55                   	push   %ebp
+  800e7c:	89 e5                	mov    %esp,%ebp
+  800e7e:	57                   	push   %edi
+  800e7f:	56                   	push   %esi
+  800e80:	53                   	push   %ebx
+  800e81:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800e84:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e89:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800e8f:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800e95:	6b f0 05             	imul   $0x5,%eax,%esi
+  800e98:	01 fe                	add    %edi,%esi
+  800e9a:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800e9f:	f7 e7                	mul    %edi
+  800ea1:	01 d6                	add    %edx,%esi
+  800ea3:	89 f2                	mov    %esi,%edx
+  800ea5:	83 c0 0b             	add    $0xb,%eax
+  800ea8:	83 d2 00             	adc    $0x0,%edx
+  800eab:	89 c7                	mov    %eax,%edi
+  800ead:	83 e7 ff             	and    $0xffffffff,%edi
+  800eb0:	89 f9                	mov    %edi,%ecx
+  800eb2:	0f b7 da             	movzwl %dx,%ebx
+  800eb5:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800ebb:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800ec1:	a1 00 20 80 00       	mov    0x802000,%eax
+  800ec6:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ecc:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ed0:	c1 ea 0c             	shr    $0xc,%edx
+  800ed3:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ed6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800ed9:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ee0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ee3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ee6:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ee9:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800eec:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eef:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ef2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ef6:	74 1c                	je     800f14 <rand+0x99>
+  800ef8:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800efb:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f00:	f7 75 dc             	divl   -0x24(%ebp)
+  800f03:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800f06:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f09:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f0e:	f7 75 dc             	divl   -0x24(%ebp)
+  800f11:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800f14:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f17:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800f1a:	f7 75 dc             	divl   -0x24(%ebp)
+  800f1d:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f20:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f23:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f26:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800f29:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f2c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f2f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800f32:	83 c4 24             	add    $0x24,%esp
+  800f35:	5b                   	pop    %ebx
+  800f36:	5e                   	pop    %esi
+  800f37:	5f                   	pop    %edi
+  800f38:	5d                   	pop    %ebp
+  800f39:	c3                   	ret    
+
+00800f3a <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800f3a:	55                   	push   %ebp
+  800f3b:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800f3d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f40:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f45:	a3 00 20 80 00       	mov    %eax,0x802000
+  800f4a:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800f50:	90                   	nop
+  800f51:	5d                   	pop    %ebp
+  800f52:	c3                   	ret    
+
+00800f53 <spin_delay>:
+int status[TOTAL];
+int pids[TOTAL];
+
+static void
+spin_delay(void)
+{
+  800f53:	55                   	push   %ebp
+  800f54:	89 e5                	mov    %esp,%ebp
+  800f56:	83 ec 10             	sub    $0x10,%esp
+     int i;
+     volatile int j;
+     for (i = 0; i != 200; ++ i)
+  800f59:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+  800f60:	eb 12                	jmp    800f74 <spin_delay+0x21>
+     {
+          j = !j;
+  800f62:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800f65:	85 c0                	test   %eax,%eax
+  800f67:	0f 94 c0             	sete   %al
+  800f6a:	0f b6 c0             	movzbl %al,%eax
+  800f6d:	89 45 f8             	mov    %eax,-0x8(%ebp)
+static void
+spin_delay(void)
+{
+     int i;
+     volatile int j;
+     for (i = 0; i != 200; ++ i)
+  800f70:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800f74:	81 7d fc c8 00 00 00 	cmpl   $0xc8,-0x4(%ebp)
+  800f7b:	75 e5                	jne    800f62 <spin_delay+0xf>
+     {
+          j = !j;
+     }
+}
+  800f7d:	90                   	nop
+  800f7e:	c9                   	leave  
+  800f7f:	c3                   	ret    
+
+00800f80 <main>:
+
+int
+main(void) {
+  800f80:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  800f84:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f87:	ff 71 fc             	pushl  -0x4(%ecx)
+  800f8a:	55                   	push   %ebp
+  800f8b:	89 e5                	mov    %esp,%ebp
+  800f8d:	53                   	push   %ebx
+  800f8e:	51                   	push   %ecx
+  800f8f:	83 ec 10             	sub    $0x10,%esp
+     int i,time;
+     cprintf("priority process will sleep %d ticks\n",SLEEP_TIME);
+  800f92:	83 ec 08             	sub    $0x8,%esp
+  800f95:	68 90 01 00 00       	push   $0x190
+  800f9a:	68 20 15 80 00       	push   $0x801520
+  800f9f:	e8 5d f3 ff ff       	call   800301 <cprintf>
+  800fa4:	83 c4 10             	add    $0x10,%esp
+     sleep(SLEEP_TIME);
+  800fa7:	83 ec 0c             	sub    $0xc,%esp
+  800faa:	68 90 01 00 00       	push   $0x190
+  800faf:	e8 db f2 ff ff       	call   80028f <sleep>
+  800fb4:	83 c4 10             	add    $0x10,%esp
+     memset(pids, 0, sizeof(pids));
+  800fb7:	83 ec 04             	sub    $0x4,%esp
+  800fba:	6a 14                	push   $0x14
+  800fbc:	6a 00                	push   $0x0
+  800fbe:	68 30 20 80 00       	push   $0x802030
+  800fc3:	e8 f7 f6 ff ff       	call   8006bf <memset>
+  800fc8:	83 c4 10             	add    $0x10,%esp
+     lab6_set_priority(TOTAL + 1);
+  800fcb:	83 ec 0c             	sub    $0xc,%esp
+  800fce:	6a 06                	push   $0x6
+  800fd0:	e8 a3 f2 ff ff       	call   800278 <lab6_set_priority>
+  800fd5:	83 c4 10             	add    $0x10,%esp
+
+     for (i = 0; i < TOTAL; i ++) {
+  800fd8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  800fdf:	e9 ee 00 00 00       	jmp    8010d2 <main+0x152>
+          acc[i]=0;
+  800fe4:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800fe7:	c7 04 85 08 20 80 00 	movl   $0x0,0x802008(,%eax,4)
+  800fee:	00 00 00 00 
+          if ((pids[i] = fork()) == 0) {
+  800ff2:	e8 f8 f1 ff ff       	call   8001ef <fork>
+  800ff7:	89 c2                	mov    %eax,%edx
+  800ff9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800ffc:	89 14 85 30 20 80 00 	mov    %edx,0x802030(,%eax,4)
+  801003:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  801006:	8b 04 85 30 20 80 00 	mov    0x802030(,%eax,4),%eax
+  80100d:	85 c0                	test   %eax,%eax
+  80100f:	0f 85 a7 00 00 00    	jne    8010bc <main+0x13c>
+               lab6_set_priority(i + 1);
+  801015:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  801018:	83 c0 01             	add    $0x1,%eax
+  80101b:	83 ec 0c             	sub    $0xc,%esp
+  80101e:	50                   	push   %eax
+  80101f:	e8 54 f2 ff ff       	call   800278 <lab6_set_priority>
+  801024:	83 c4 10             	add    $0x10,%esp
+               acc[i] = 0;
+  801027:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80102a:	c7 04 85 08 20 80 00 	movl   $0x0,0x802008(,%eax,4)
+  801031:	00 00 00 00 
+               while (1) {
+                    spin_delay();
+  801035:	e8 19 ff ff ff       	call   800f53 <spin_delay>
+                    ++ acc[i];
+  80103a:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80103d:	8b 04 85 08 20 80 00 	mov    0x802008(,%eax,4),%eax
+  801044:	8d 50 01             	lea    0x1(%eax),%edx
+  801047:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80104a:	89 14 85 08 20 80 00 	mov    %edx,0x802008(,%eax,4)
+                    if(acc[i]%4000==0) {
+  801051:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  801054:	8b 0c 85 08 20 80 00 	mov    0x802008(,%eax,4),%ecx
+  80105b:	ba d3 4d 62 10       	mov    $0x10624dd3,%edx
+  801060:	89 c8                	mov    %ecx,%eax
+  801062:	f7 e2                	mul    %edx
+  801064:	89 d0                	mov    %edx,%eax
+  801066:	c1 e8 08             	shr    $0x8,%eax
+  801069:	69 c0 a0 0f 00 00    	imul   $0xfa0,%eax,%eax
+  80106f:	29 c1                	sub    %eax,%ecx
+  801071:	89 c8                	mov    %ecx,%eax
+  801073:	85 c0                	test   %eax,%eax
+  801075:	75 be                	jne    801035 <main+0xb5>
+                        if((time=gettime_msec())>MAX_TIME+SLEEP_TIME) {
+  801077:	e8 ef f1 ff ff       	call   80026b <gettime_msec>
+  80107c:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80107f:	81 7d f0 78 05 00 00 	cmpl   $0x578,-0x10(%ebp)
+  801086:	7e ad                	jle    801035 <main+0xb5>
+                            cprintf("child pid %d, acc %d, time %d\n",getpid(),acc[i],time);
+  801088:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80108b:	8b 1c 85 08 20 80 00 	mov    0x802008(,%eax,4),%ebx
+  801092:	e8 b9 f1 ff ff       	call   800250 <getpid>
+  801097:	ff 75 f0             	pushl  -0x10(%ebp)
+  80109a:	53                   	push   %ebx
+  80109b:	50                   	push   %eax
+  80109c:	68 48 15 80 00       	push   $0x801548
+  8010a1:	e8 5b f2 ff ff       	call   800301 <cprintf>
+  8010a6:	83 c4 10             	add    $0x10,%esp
+                            exit(acc[i]);
+  8010a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8010ac:	8b 04 85 08 20 80 00 	mov    0x802008(,%eax,4),%eax
+  8010b3:	83 ec 0c             	sub    $0xc,%esp
+  8010b6:	50                   	push   %eax
+  8010b7:	e8 0d f1 ff ff       	call   8001c9 <exit>
+                        }
+                    }
+               }
+               
+          }
+          if (pids[i] < 0) {
+  8010bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8010bf:	8b 04 85 30 20 80 00 	mov    0x802030(,%eax,4),%eax
+  8010c6:	85 c0                	test   %eax,%eax
+  8010c8:	0f 88 09 01 00 00    	js     8011d7 <main+0x257>
+     cprintf("priority process will sleep %d ticks\n",SLEEP_TIME);
+     sleep(SLEEP_TIME);
+     memset(pids, 0, sizeof(pids));
+     lab6_set_priority(TOTAL + 1);
+
+     for (i = 0; i < TOTAL; i ++) {
+  8010ce:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  8010d2:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
+  8010d6:	0f 8e 08 ff ff ff    	jle    800fe4 <main+0x64>
+          if (pids[i] < 0) {
+               goto failed;
+          }
+     }
+
+     cprintf("main: fork ok,now need to wait pids.\n");
+  8010dc:	83 ec 0c             	sub    $0xc,%esp
+  8010df:	68 68 15 80 00       	push   $0x801568
+  8010e4:	e8 18 f2 ff ff       	call   800301 <cprintf>
+  8010e9:	83 c4 10             	add    $0x10,%esp
+
+     for (i = 0; i < TOTAL; i ++) {
+  8010ec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  8010f3:	eb 60                	jmp    801155 <main+0x1d5>
+         status[i]=0;
+  8010f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8010f8:	c7 04 85 1c 20 80 00 	movl   $0x0,0x80201c(,%eax,4)
+  8010ff:	00 00 00 00 
+         waitpid(pids[i],&status[i]);
+  801103:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  801106:	c1 e0 02             	shl    $0x2,%eax
+  801109:	8d 90 1c 20 80 00    	lea    0x80201c(%eax),%edx
+  80110f:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  801112:	8b 04 85 30 20 80 00 	mov    0x802030(,%eax,4),%eax
+  801119:	83 ec 08             	sub    $0x8,%esp
+  80111c:	52                   	push   %edx
+  80111d:	50                   	push   %eax
+  80111e:	e8 f0 f0 ff ff       	call   800213 <waitpid>
+  801123:	83 c4 10             	add    $0x10,%esp
+         cprintf("main: pid %d, acc %d, time %d\n",pids[i],status[i],gettime_msec()); 
+  801126:	e8 40 f1 ff ff       	call   80026b <gettime_msec>
+  80112b:	89 c1                	mov    %eax,%ecx
+  80112d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  801130:	8b 14 85 1c 20 80 00 	mov    0x80201c(,%eax,4),%edx
+  801137:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80113a:	8b 04 85 30 20 80 00 	mov    0x802030(,%eax,4),%eax
+  801141:	51                   	push   %ecx
+  801142:	52                   	push   %edx
+  801143:	50                   	push   %eax
+  801144:	68 90 15 80 00       	push   $0x801590
+  801149:	e8 b3 f1 ff ff       	call   800301 <cprintf>
+  80114e:	83 c4 10             	add    $0x10,%esp
+          }
+     }
+
+     cprintf("main: fork ok,now need to wait pids.\n");
+
+     for (i = 0; i < TOTAL; i ++) {
+  801151:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  801155:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
+  801159:	7e 9a                	jle    8010f5 <main+0x175>
+         status[i]=0;
+         waitpid(pids[i],&status[i]);
+         cprintf("main: pid %d, acc %d, time %d\n",pids[i],status[i],gettime_msec()); 
+     }
+     cprintf("main: wait pids over\n");
+  80115b:	83 ec 0c             	sub    $0xc,%esp
+  80115e:	68 af 15 80 00       	push   $0x8015af
+  801163:	e8 99 f1 ff ff       	call   800301 <cprintf>
+  801168:	83 c4 10             	add    $0x10,%esp
+     cprintf("stride sched correct result:");
+  80116b:	83 ec 0c             	sub    $0xc,%esp
+  80116e:	68 c5 15 80 00       	push   $0x8015c5
+  801173:	e8 89 f1 ff ff       	call   800301 <cprintf>
+  801178:	83 c4 10             	add    $0x10,%esp
+     for (i = 0; i < TOTAL; i ++)
+  80117b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  801182:	eb 36                	jmp    8011ba <main+0x23a>
+     {
+         cprintf(" %d", (status[i] * 2 / status[0] + 1) / 2);
+  801184:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  801187:	8b 04 85 1c 20 80 00 	mov    0x80201c(,%eax,4),%eax
+  80118e:	01 c0                	add    %eax,%eax
+  801190:	8b 1d 1c 20 80 00    	mov    0x80201c,%ebx
+  801196:	99                   	cltd   
+  801197:	f7 fb                	idiv   %ebx
+  801199:	83 c0 01             	add    $0x1,%eax
+  80119c:	89 c2                	mov    %eax,%edx
+  80119e:	c1 ea 1f             	shr    $0x1f,%edx
+  8011a1:	01 d0                	add    %edx,%eax
+  8011a3:	d1 f8                	sar    %eax
+  8011a5:	83 ec 08             	sub    $0x8,%esp
+  8011a8:	50                   	push   %eax
+  8011a9:	68 e2 15 80 00       	push   $0x8015e2
+  8011ae:	e8 4e f1 ff ff       	call   800301 <cprintf>
+  8011b3:	83 c4 10             	add    $0x10,%esp
+         waitpid(pids[i],&status[i]);
+         cprintf("main: pid %d, acc %d, time %d\n",pids[i],status[i],gettime_msec()); 
+     }
+     cprintf("main: wait pids over\n");
+     cprintf("stride sched correct result:");
+     for (i = 0; i < TOTAL; i ++)
+  8011b6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  8011ba:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
+  8011be:	7e c4                	jle    801184 <main+0x204>
+     {
+         cprintf(" %d", (status[i] * 2 / status[0] + 1) / 2);
+     }
+     cprintf("\n");
+  8011c0:	83 ec 0c             	sub    $0xc,%esp
+  8011c3:	68 e6 15 80 00       	push   $0x8015e6
+  8011c8:	e8 34 f1 ff ff       	call   800301 <cprintf>
+  8011cd:	83 c4 10             	add    $0x10,%esp
+
+     return 0;
+  8011d0:	b8 00 00 00 00       	mov    $0x0,%eax
+  8011d5:	eb 4c                	jmp    801223 <main+0x2a3>
+                    }
+               }
+               
+          }
+          if (pids[i] < 0) {
+               goto failed;
+  8011d7:	90                   	nop
+     cprintf("\n");
+
+     return 0;
+
+failed:
+     for (i = 0; i < TOTAL; i ++) {
+  8011d8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  8011df:	eb 28                	jmp    801209 <main+0x289>
+          if (pids[i] > 0) {
+  8011e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8011e4:	8b 04 85 30 20 80 00 	mov    0x802030(,%eax,4),%eax
+  8011eb:	85 c0                	test   %eax,%eax
+  8011ed:	7e 16                	jle    801205 <main+0x285>
+               kill(pids[i]);
+  8011ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8011f2:	8b 04 85 30 20 80 00 	mov    0x802030(,%eax,4),%eax
+  8011f9:	83 ec 0c             	sub    $0xc,%esp
+  8011fc:	50                   	push   %eax
+  8011fd:	e8 38 f0 ff ff       	call   80023a <kill>
+  801202:	83 c4 10             	add    $0x10,%esp
+     cprintf("\n");
+
+     return 0;
+
+failed:
+     for (i = 0; i < TOTAL; i ++) {
+  801205:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  801209:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
+  80120d:	7e d2                	jle    8011e1 <main+0x261>
+          if (pids[i] > 0) {
+               kill(pids[i]);
+          }
+     }
+     panic("FAIL: T.T\n");
+  80120f:	83 ec 04             	sub    $0x4,%esp
+  801212:	68 e8 15 80 00       	push   $0x8015e8
+  801217:	6a 4e                	push   $0x4e
+  801219:	68 f3 15 80 00       	push   $0x8015f3
+  80121e:	e8 fd ed ff ff       	call   800020 <__panic>
+}
+  801223:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  801226:	59                   	pop    %ecx
+  801227:	5b                   	pop    %ebx
+  801228:	5d                   	pop    %ebp
+  801229:	8d 61 fc             	lea    -0x4(%ecx),%esp
+  80122c:	c3                   	ret    
diff -r -u -P lab7_original/obj/user/priority.d lab7/obj/user/priority.d
--- lab7_original/obj/user/priority.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/priority.d	2016-05-06 21:59:27.574121824 +0800
@@ -0,0 +1,2 @@
+obj/user/priority.o obj/user/priority.d: user/priority.c user/libs/ulib.h \
+ libs/defs.h libs/stdio.h libs/stdarg.h libs/string.h libs/stdlib.h
Binary files lab7_original/obj/user/priority.o and lab7/obj/user/priority.o differ
diff -r -u -P lab7_original/obj/user/priority.sym lab7/obj/user/priority.sym
--- lab7_original/obj/user/priority.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/priority.sym	2016-05-06 21:59:28.654161193 +0800
@@ -0,0 +1,83 @@
+00800020 .text
+00801240 .rodata
+00802000 .data
+00802008 .bss
+00200000 .stab_info
+00200010 .stab
+00202fbd .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b5 syscall
+00000000 ulib.c
+00000000 stdio.c
+008002b4 cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+00801340 error_string
+0080084a printnum
+0080093b getuint
+0080098a getint
+00800d9d sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 priority.c
+00800f53 spin_delay
+008003e6 strcpy
+0080022c yield
+00802008 acc
+00800213 waitpid
+00800141 sys_yield
+008006ff memmove
+00800dd3 snprintf
+008009f5 vprintfmt
+0080011d sys_fork
+00800301 cprintf
+00800250 getpid
+008007a2 memcpy
+0080028f sleep
+00800278 lab6_set_priority
+00800dfc vsnprintf
+00800375 umain
+00202fbc __STAB_END__
+00800150 sys_kill
+00202fbd __STABSTR_BEGIN__
+00800020 __panic
+008001b7 sys_sleep
+00800562 strtol
+008003b6 strnlen
+0080025d print_pgdir
+0080023a kill
+00800533 strfind
+008001fc wait
+008002a5 _start
+00800e7b rand
+008004aa strncmp
+00800171 sys_putc
+00800426 strncpy
+008007f2 memcmp
+008001ef fork
+008006bf memset
+00800f80 main
+00800f3a srand
+00800e56 hash32
+008009d1 printfmt
+00203e52 __STABSTR_END__
+00800460 strcmp
+0080026b gettime_msec
+00800192 sys_gettime
+008002d8 vcprintf
+0080006e __warn
+00800327 cputs
+008001a1 sys_lab6_set_priority
+008001c9 exit
+0080012c sys_wait
+0080010b sys_exit
+00200010 __STAB_BEGIN__
+0080038e strlen
+00800183 sys_pgdir
+00800500 strchr
+00800162 sys_getpid
+0080201c status
+00802030 pids
diff -r -u -P lab7_original/obj/user/sleep.asm lab7/obj/user/sleep.asm
--- lab7_original/obj/user/sleep.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/sleep.asm	2016-05-06 21:59:28.602159289 +0800
@@ -0,0 +1,2700 @@
+
+obj/__user_sleep.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 18             	sub    $0x18,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	83 ec 04             	sub    $0x4,%esp
+  80002f:	ff 75 0c             	pushl  0xc(%ebp)
+  800032:	ff 75 08             	pushl  0x8(%ebp)
+  800035:	68 60 10 80 00       	push   $0x801060
+  80003a:	e8 c2 02 00 00       	call   800301 <cprintf>
+  80003f:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800042:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800045:	83 ec 08             	sub    $0x8,%esp
+  800048:	50                   	push   %eax
+  800049:	ff 75 10             	pushl  0x10(%ebp)
+  80004c:	e8 87 02 00 00       	call   8002d8 <vcprintf>
+  800051:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  800054:	83 ec 0c             	sub    $0xc,%esp
+  800057:	68 7a 10 80 00       	push   $0x80107a
+  80005c:	e8 a0 02 00 00       	call   800301 <cprintf>
+  800061:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	83 ec 0c             	sub    $0xc,%esp
+  800067:	6a f6                	push   $0xfffffff6
+  800069:	e8 5b 01 00 00       	call   8001c9 <exit>
+
+0080006e <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80006e:	55                   	push   %ebp
+  80006f:	89 e5                	mov    %esp,%ebp
+  800071:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800074:	8d 45 14             	lea    0x14(%ebp),%eax
+  800077:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007a:	83 ec 04             	sub    $0x4,%esp
+  80007d:	ff 75 0c             	pushl  0xc(%ebp)
+  800080:	ff 75 08             	pushl  0x8(%ebp)
+  800083:	68 7c 10 80 00       	push   $0x80107c
+  800088:	e8 74 02 00 00       	call   800301 <cprintf>
+  80008d:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800090:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800093:	83 ec 08             	sub    $0x8,%esp
+  800096:	50                   	push   %eax
+  800097:	ff 75 10             	pushl  0x10(%ebp)
+  80009a:	e8 39 02 00 00       	call   8002d8 <vcprintf>
+  80009f:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  8000a2:	83 ec 0c             	sub    $0xc,%esp
+  8000a5:	68 7a 10 80 00       	push   $0x80107a
+  8000aa:	e8 52 02 00 00       	call   800301 <cprintf>
+  8000af:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8000b2:	90                   	nop
+  8000b3:	c9                   	leave  
+  8000b4:	c3                   	ret    
+
+008000b5 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b5:	55                   	push   %ebp
+  8000b6:	89 e5                	mov    %esp,%ebp
+  8000b8:	57                   	push   %edi
+  8000b9:	56                   	push   %esi
+  8000ba:	53                   	push   %ebx
+  8000bb:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000be:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cb:	eb 16                	jmp    8000e3 <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8000cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d0:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d3:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d6:	8b 10                	mov    (%eax),%edx
+  8000d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000db:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000df:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8000e3:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e7:	7e e4                	jle    8000cd <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000e9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ec:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000ef:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f2:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f5:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8000f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fb:	cd 80                	int    $0x80
+  8000fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  800100:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800103:	83 c4 20             	add    $0x20,%esp
+  800106:	5b                   	pop    %ebx
+  800107:	5e                   	pop    %esi
+  800108:	5f                   	pop    %edi
+  800109:	5d                   	pop    %ebp
+  80010a:	c3                   	ret    
+
+0080010b <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010b:	55                   	push   %ebp
+  80010c:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_exit, error_code);
+  80010e:	ff 75 08             	pushl  0x8(%ebp)
+  800111:	6a 01                	push   $0x1
+  800113:	e8 9d ff ff ff       	call   8000b5 <syscall>
+  800118:	83 c4 08             	add    $0x8,%esp
+}
+  80011b:	c9                   	leave  
+  80011c:	c3                   	ret    
+
+0080011d <sys_fork>:
+
+int
+sys_fork(void) {
+  80011d:	55                   	push   %ebp
+  80011e:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_fork);
+  800120:	6a 02                	push   $0x2
+  800122:	e8 8e ff ff ff       	call   8000b5 <syscall>
+  800127:	83 c4 04             	add    $0x4,%esp
+}
+  80012a:	c9                   	leave  
+  80012b:	c3                   	ret    
+
+0080012c <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80012c:	55                   	push   %ebp
+  80012d:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_wait, pid, store);
+  80012f:	ff 75 0c             	pushl  0xc(%ebp)
+  800132:	ff 75 08             	pushl  0x8(%ebp)
+  800135:	6a 03                	push   $0x3
+  800137:	e8 79 ff ff ff       	call   8000b5 <syscall>
+  80013c:	83 c4 0c             	add    $0xc,%esp
+}
+  80013f:	c9                   	leave  
+  800140:	c3                   	ret    
+
+00800141 <sys_yield>:
+
+int
+sys_yield(void) {
+  800141:	55                   	push   %ebp
+  800142:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_yield);
+  800144:	6a 0a                	push   $0xa
+  800146:	e8 6a ff ff ff       	call   8000b5 <syscall>
+  80014b:	83 c4 04             	add    $0x4,%esp
+}
+  80014e:	c9                   	leave  
+  80014f:	c3                   	ret    
+
+00800150 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800150:	55                   	push   %ebp
+  800151:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_kill, pid);
+  800153:	ff 75 08             	pushl  0x8(%ebp)
+  800156:	6a 0c                	push   $0xc
+  800158:	e8 58 ff ff ff       	call   8000b5 <syscall>
+  80015d:	83 c4 08             	add    $0x8,%esp
+}
+  800160:	c9                   	leave  
+  800161:	c3                   	ret    
+
+00800162 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800162:	55                   	push   %ebp
+  800163:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_getpid);
+  800165:	6a 12                	push   $0x12
+  800167:	e8 49 ff ff ff       	call   8000b5 <syscall>
+  80016c:	83 c4 04             	add    $0x4,%esp
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_putc, c);
+  800174:	ff 75 08             	pushl  0x8(%ebp)
+  800177:	6a 1e                	push   $0x1e
+  800179:	e8 37 ff ff ff       	call   8000b5 <syscall>
+  80017e:	83 c4 08             	add    $0x8,%esp
+}
+  800181:	c9                   	leave  
+  800182:	c3                   	ret    
+
+00800183 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800183:	55                   	push   %ebp
+  800184:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_pgdir);
+  800186:	6a 1f                	push   $0x1f
+  800188:	e8 28 ff ff ff       	call   8000b5 <syscall>
+  80018d:	83 c4 04             	add    $0x4,%esp
+}
+  800190:	c9                   	leave  
+  800191:	c3                   	ret    
+
+00800192 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  800192:	55                   	push   %ebp
+  800193:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_gettime);
+  800195:	6a 11                	push   $0x11
+  800197:	e8 19 ff ff ff       	call   8000b5 <syscall>
+  80019c:	83 c4 04             	add    $0x4,%esp
+}
+  80019f:	c9                   	leave  
+  8001a0:	c3                   	ret    
+
+008001a1 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001a1:	55                   	push   %ebp
+  8001a2:	89 e5                	mov    %esp,%ebp
+    syscall(SYS_lab6_set_priority, priority);
+  8001a4:	ff 75 08             	pushl  0x8(%ebp)
+  8001a7:	68 ff 00 00 00       	push   $0xff
+  8001ac:	e8 04 ff ff ff       	call   8000b5 <syscall>
+  8001b1:	83 c4 08             	add    $0x8,%esp
+}
+  8001b4:	90                   	nop
+  8001b5:	c9                   	leave  
+  8001b6:	c3                   	ret    
+
+008001b7 <sys_sleep>:
+
+int
+sys_sleep(unsigned int time) {
+  8001b7:	55                   	push   %ebp
+  8001b8:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_sleep, time);
+  8001ba:	ff 75 08             	pushl  0x8(%ebp)
+  8001bd:	6a 0b                	push   $0xb
+  8001bf:	e8 f1 fe ff ff       	call   8000b5 <syscall>
+  8001c4:	83 c4 08             	add    $0x8,%esp
+}
+  8001c7:	c9                   	leave  
+  8001c8:	c3                   	ret    
+
+008001c9 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001c9:	55                   	push   %ebp
+  8001ca:	89 e5                	mov    %esp,%ebp
+  8001cc:	83 ec 08             	sub    $0x8,%esp
+    sys_exit(error_code);
+  8001cf:	83 ec 0c             	sub    $0xc,%esp
+  8001d2:	ff 75 08             	pushl  0x8(%ebp)
+  8001d5:	e8 31 ff ff ff       	call   80010b <sys_exit>
+  8001da:	83 c4 10             	add    $0x10,%esp
+    cprintf("BUG: exit failed.\n");
+  8001dd:	83 ec 0c             	sub    $0xc,%esp
+  8001e0:	68 98 10 80 00       	push   $0x801098
+  8001e5:	e8 17 01 00 00       	call   800301 <cprintf>
+  8001ea:	83 c4 10             	add    $0x10,%esp
+    while (1);
+  8001ed:	eb fe                	jmp    8001ed <exit+0x24>
+
+008001ef <fork>:
+}
+
+int
+fork(void) {
+  8001ef:	55                   	push   %ebp
+  8001f0:	89 e5                	mov    %esp,%ebp
+  8001f2:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8001f5:	e8 23 ff ff ff       	call   80011d <sys_fork>
+}
+  8001fa:	c9                   	leave  
+  8001fb:	c3                   	ret    
+
+008001fc <wait>:
+
+int
+wait(void) {
+  8001fc:	55                   	push   %ebp
+  8001fd:	89 e5                	mov    %esp,%ebp
+  8001ff:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(0, NULL);
+  800202:	83 ec 08             	sub    $0x8,%esp
+  800205:	6a 00                	push   $0x0
+  800207:	6a 00                	push   $0x0
+  800209:	e8 1e ff ff ff       	call   80012c <sys_wait>
+  80020e:	83 c4 10             	add    $0x10,%esp
+}
+  800211:	c9                   	leave  
+  800212:	c3                   	ret    
+
+00800213 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800213:	55                   	push   %ebp
+  800214:	89 e5                	mov    %esp,%ebp
+  800216:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(pid, store);
+  800219:	83 ec 08             	sub    $0x8,%esp
+  80021c:	ff 75 0c             	pushl  0xc(%ebp)
+  80021f:	ff 75 08             	pushl  0x8(%ebp)
+  800222:	e8 05 ff ff ff       	call   80012c <sys_wait>
+  800227:	83 c4 10             	add    $0x10,%esp
+}
+  80022a:	c9                   	leave  
+  80022b:	c3                   	ret    
+
+0080022c <yield>:
+
+void
+yield(void) {
+  80022c:	55                   	push   %ebp
+  80022d:	89 e5                	mov    %esp,%ebp
+  80022f:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800232:	e8 0a ff ff ff       	call   800141 <sys_yield>
+}
+  800237:	90                   	nop
+  800238:	c9                   	leave  
+  800239:	c3                   	ret    
+
+0080023a <kill>:
+
+int
+kill(int pid) {
+  80023a:	55                   	push   %ebp
+  80023b:	89 e5                	mov    %esp,%ebp
+  80023d:	83 ec 08             	sub    $0x8,%esp
+    return sys_kill(pid);
+  800240:	83 ec 0c             	sub    $0xc,%esp
+  800243:	ff 75 08             	pushl  0x8(%ebp)
+  800246:	e8 05 ff ff ff       	call   800150 <sys_kill>
+  80024b:	83 c4 10             	add    $0x10,%esp
+}
+  80024e:	c9                   	leave  
+  80024f:	c3                   	ret    
+
+00800250 <getpid>:
+
+int
+getpid(void) {
+  800250:	55                   	push   %ebp
+  800251:	89 e5                	mov    %esp,%ebp
+  800253:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800256:	e8 07 ff ff ff       	call   800162 <sys_getpid>
+}
+  80025b:	c9                   	leave  
+  80025c:	c3                   	ret    
+
+0080025d <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80025d:	55                   	push   %ebp
+  80025e:	89 e5                	mov    %esp,%ebp
+  800260:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800263:	e8 1b ff ff ff       	call   800183 <sys_pgdir>
+}
+  800268:	90                   	nop
+  800269:	c9                   	leave  
+  80026a:	c3                   	ret    
+
+0080026b <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80026b:	55                   	push   %ebp
+  80026c:	89 e5                	mov    %esp,%ebp
+  80026e:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800271:	e8 1c ff ff ff       	call   800192 <sys_gettime>
+}
+  800276:	c9                   	leave  
+  800277:	c3                   	ret    
+
+00800278 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800278:	55                   	push   %ebp
+  800279:	89 e5                	mov    %esp,%ebp
+  80027b:	83 ec 08             	sub    $0x8,%esp
+    sys_lab6_set_priority(priority);
+  80027e:	83 ec 0c             	sub    $0xc,%esp
+  800281:	ff 75 08             	pushl  0x8(%ebp)
+  800284:	e8 18 ff ff ff       	call   8001a1 <sys_lab6_set_priority>
+  800289:	83 c4 10             	add    $0x10,%esp
+}
+  80028c:	90                   	nop
+  80028d:	c9                   	leave  
+  80028e:	c3                   	ret    
+
+0080028f <sleep>:
+
+int
+sleep(unsigned int time) {
+  80028f:	55                   	push   %ebp
+  800290:	89 e5                	mov    %esp,%ebp
+  800292:	83 ec 08             	sub    $0x8,%esp
+    return sys_sleep(time);
+  800295:	83 ec 0c             	sub    $0xc,%esp
+  800298:	ff 75 08             	pushl  0x8(%ebp)
+  80029b:	e8 17 ff ff ff       	call   8001b7 <sys_sleep>
+  8002a0:	83 c4 10             	add    $0x10,%esp
+}
+  8002a3:	c9                   	leave  
+  8002a4:	c3                   	ret    
+
+008002a5 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  8002a5:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  8002aa:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  8002ad:	e8 c3 00 00 00       	call   800375 <umain>
+1:  jmp 1b
+  8002b2:	eb fe                	jmp    8002b2 <_start+0xd>
+
+008002b4 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8002b4:	55                   	push   %ebp
+  8002b5:	89 e5                	mov    %esp,%ebp
+  8002b7:	83 ec 08             	sub    $0x8,%esp
+    sys_putc(c);
+  8002ba:	83 ec 0c             	sub    $0xc,%esp
+  8002bd:	ff 75 08             	pushl  0x8(%ebp)
+  8002c0:	e8 ac fe ff ff       	call   800171 <sys_putc>
+  8002c5:	83 c4 10             	add    $0x10,%esp
+    (*cnt) ++;
+  8002c8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002cb:	8b 00                	mov    (%eax),%eax
+  8002cd:	8d 50 01             	lea    0x1(%eax),%edx
+  8002d0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002d3:	89 10                	mov    %edx,(%eax)
+}
+  8002d5:	90                   	nop
+  8002d6:	c9                   	leave  
+  8002d7:	c3                   	ret    
+
+008002d8 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002d8:	55                   	push   %ebp
+  8002d9:	89 e5                	mov    %esp,%ebp
+  8002db:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  8002de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002e5:	ff 75 0c             	pushl  0xc(%ebp)
+  8002e8:	ff 75 08             	pushl  0x8(%ebp)
+  8002eb:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  8002ee:	50                   	push   %eax
+  8002ef:	68 b4 02 80 00       	push   $0x8002b4
+  8002f4:	e8 fc 06 00 00       	call   8009f5 <vprintfmt>
+  8002f9:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  8002fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002ff:	c9                   	leave  
+  800300:	c3                   	ret    
+
+00800301 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800301:	55                   	push   %ebp
+  800302:	89 e5                	mov    %esp,%ebp
+  800304:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800307:	8d 45 0c             	lea    0xc(%ebp),%eax
+  80030a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  80030d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800310:	83 ec 08             	sub    $0x8,%esp
+  800313:	50                   	push   %eax
+  800314:	ff 75 08             	pushl  0x8(%ebp)
+  800317:	e8 bc ff ff ff       	call   8002d8 <vcprintf>
+  80031c:	83 c4 10             	add    $0x10,%esp
+  80031f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800322:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800325:	c9                   	leave  
+  800326:	c3                   	ret    
+
+00800327 <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  800327:	55                   	push   %ebp
+  800328:	89 e5                	mov    %esp,%ebp
+  80032a:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  80032d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  800334:	eb 14                	jmp    80034a <cputs+0x23>
+        cputch(c, &cnt);
+  800336:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  80033a:	83 ec 08             	sub    $0x8,%esp
+  80033d:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800340:	52                   	push   %edx
+  800341:	50                   	push   %eax
+  800342:	e8 6d ff ff ff       	call   8002b4 <cputch>
+  800347:	83 c4 10             	add    $0x10,%esp
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  80034a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80034d:	8d 50 01             	lea    0x1(%eax),%edx
+  800350:	89 55 08             	mov    %edx,0x8(%ebp)
+  800353:	0f b6 00             	movzbl (%eax),%eax
+  800356:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800359:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  80035d:	75 d7                	jne    800336 <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  80035f:	83 ec 08             	sub    $0x8,%esp
+  800362:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800365:	50                   	push   %eax
+  800366:	6a 0a                	push   $0xa
+  800368:	e8 47 ff ff ff       	call   8002b4 <cputch>
+  80036d:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  800370:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  800373:	c9                   	leave  
+  800374:	c3                   	ret    
+
+00800375 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800375:	55                   	push   %ebp
+  800376:	89 e5                	mov    %esp,%ebp
+  800378:	83 ec 18             	sub    $0x18,%esp
+    int ret = main();
+  80037b:	e8 26 0c 00 00       	call   800fa6 <main>
+  800380:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  800383:	83 ec 0c             	sub    $0xc,%esp
+  800386:	ff 75 f4             	pushl  -0xc(%ebp)
+  800389:	e8 3b fe ff ff       	call   8001c9 <exit>
+
+0080038e <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  80038e:	55                   	push   %ebp
+  80038f:	89 e5                	mov    %esp,%ebp
+  800391:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800394:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  80039b:	eb 04                	jmp    8003a1 <strlen+0x13>
+        cnt ++;
+  80039d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  8003a1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003a4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003a7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003aa:	0f b6 00             	movzbl (%eax),%eax
+  8003ad:	84 c0                	test   %al,%al
+  8003af:	75 ec                	jne    80039d <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003b4:	c9                   	leave  
+  8003b5:	c3                   	ret    
+
+008003b6 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  8003b6:	55                   	push   %ebp
+  8003b7:	89 e5                	mov    %esp,%ebp
+  8003b9:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003bc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003c3:	eb 04                	jmp    8003c9 <strnlen+0x13>
+        cnt ++;
+  8003c5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  8003c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003cc:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003cf:	73 10                	jae    8003e1 <strnlen+0x2b>
+  8003d1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003d4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003d7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003da:	0f b6 00             	movzbl (%eax),%eax
+  8003dd:	84 c0                	test   %al,%al
+  8003df:	75 e4                	jne    8003c5 <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003e4:	c9                   	leave  
+  8003e5:	c3                   	ret    
+
+008003e6 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  8003e6:	55                   	push   %ebp
+  8003e7:	89 e5                	mov    %esp,%ebp
+  8003e9:	57                   	push   %edi
+  8003ea:	56                   	push   %esi
+  8003eb:	83 ec 20             	sub    $0x20,%esp
+  8003ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003f4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8003f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  8003fa:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800400:	89 d1                	mov    %edx,%ecx
+  800402:	89 c2                	mov    %eax,%edx
+  800404:	89 ce                	mov    %ecx,%esi
+  800406:	89 d7                	mov    %edx,%edi
+  800408:	ac                   	lods   %ds:(%esi),%al
+  800409:	aa                   	stos   %al,%es:(%edi)
+  80040a:	84 c0                	test   %al,%al
+  80040c:	75 fa                	jne    800408 <strcpy+0x22>
+  80040e:	89 fa                	mov    %edi,%edx
+  800410:	89 f1                	mov    %esi,%ecx
+  800412:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800415:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800418:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  80041b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  80041e:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  80041f:	83 c4 20             	add    $0x20,%esp
+  800422:	5e                   	pop    %esi
+  800423:	5f                   	pop    %edi
+  800424:	5d                   	pop    %ebp
+  800425:	c3                   	ret    
+
+00800426 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800426:	55                   	push   %ebp
+  800427:	89 e5                	mov    %esp,%ebp
+  800429:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  80042c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80042f:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800432:	eb 21                	jmp    800455 <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800434:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800437:	0f b6 10             	movzbl (%eax),%edx
+  80043a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80043d:	88 10                	mov    %dl,(%eax)
+  80043f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800442:	0f b6 00             	movzbl (%eax),%eax
+  800445:	84 c0                	test   %al,%al
+  800447:	74 04                	je     80044d <strncpy+0x27>
+            src ++;
+  800449:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  80044d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800451:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800455:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800459:	75 d9                	jne    800434 <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  80045b:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  80045e:	c9                   	leave  
+  80045f:	c3                   	ret    
+
+00800460 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800460:	55                   	push   %ebp
+  800461:	89 e5                	mov    %esp,%ebp
+  800463:	57                   	push   %edi
+  800464:	56                   	push   %esi
+  800465:	83 ec 20             	sub    $0x20,%esp
+  800468:	8b 45 08             	mov    0x8(%ebp),%eax
+  80046b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80046e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800471:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800474:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800477:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80047a:	89 d1                	mov    %edx,%ecx
+  80047c:	89 c2                	mov    %eax,%edx
+  80047e:	89 ce                	mov    %ecx,%esi
+  800480:	89 d7                	mov    %edx,%edi
+  800482:	ac                   	lods   %ds:(%esi),%al
+  800483:	ae                   	scas   %es:(%edi),%al
+  800484:	75 08                	jne    80048e <strcmp+0x2e>
+  800486:	84 c0                	test   %al,%al
+  800488:	75 f8                	jne    800482 <strcmp+0x22>
+  80048a:	31 c0                	xor    %eax,%eax
+  80048c:	eb 04                	jmp    800492 <strcmp+0x32>
+  80048e:	19 c0                	sbb    %eax,%eax
+  800490:	0c 01                	or     $0x1,%al
+  800492:	89 fa                	mov    %edi,%edx
+  800494:	89 f1                	mov    %esi,%ecx
+  800496:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800499:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  80049c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  80049f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  8004a2:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  8004a3:	83 c4 20             	add    $0x20,%esp
+  8004a6:	5e                   	pop    %esi
+  8004a7:	5f                   	pop    %edi
+  8004a8:	5d                   	pop    %ebp
+  8004a9:	c3                   	ret    
+
+008004aa <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  8004aa:	55                   	push   %ebp
+  8004ab:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004ad:	eb 0c                	jmp    8004bb <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  8004af:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  8004b3:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8004b7:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004bb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004bf:	74 1a                	je     8004db <strncmp+0x31>
+  8004c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004c4:	0f b6 00             	movzbl (%eax),%eax
+  8004c7:	84 c0                	test   %al,%al
+  8004c9:	74 10                	je     8004db <strncmp+0x31>
+  8004cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004ce:	0f b6 10             	movzbl (%eax),%edx
+  8004d1:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004d4:	0f b6 00             	movzbl (%eax),%eax
+  8004d7:	38 c2                	cmp    %al,%dl
+  8004d9:	74 d4                	je     8004af <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004db:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004df:	74 18                	je     8004f9 <strncmp+0x4f>
+  8004e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e4:	0f b6 00             	movzbl (%eax),%eax
+  8004e7:	0f b6 d0             	movzbl %al,%edx
+  8004ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ed:	0f b6 00             	movzbl (%eax),%eax
+  8004f0:	0f b6 c0             	movzbl %al,%eax
+  8004f3:	29 c2                	sub    %eax,%edx
+  8004f5:	89 d0                	mov    %edx,%eax
+  8004f7:	eb 05                	jmp    8004fe <strncmp+0x54>
+  8004f9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8004fe:	5d                   	pop    %ebp
+  8004ff:	c3                   	ret    
+
+00800500 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800500:	55                   	push   %ebp
+  800501:	89 e5                	mov    %esp,%ebp
+  800503:	83 ec 04             	sub    $0x4,%esp
+  800506:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800509:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  80050c:	eb 14                	jmp    800522 <strchr+0x22>
+        if (*s == c) {
+  80050e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800511:	0f b6 00             	movzbl (%eax),%eax
+  800514:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800517:	75 05                	jne    80051e <strchr+0x1e>
+            return (char *)s;
+  800519:	8b 45 08             	mov    0x8(%ebp),%eax
+  80051c:	eb 13                	jmp    800531 <strchr+0x31>
+        }
+        s ++;
+  80051e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800522:	8b 45 08             	mov    0x8(%ebp),%eax
+  800525:	0f b6 00             	movzbl (%eax),%eax
+  800528:	84 c0                	test   %al,%al
+  80052a:	75 e2                	jne    80050e <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  80052c:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800531:	c9                   	leave  
+  800532:	c3                   	ret    
+
+00800533 <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800533:	55                   	push   %ebp
+  800534:	89 e5                	mov    %esp,%ebp
+  800536:	83 ec 04             	sub    $0x4,%esp
+  800539:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80053c:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  80053f:	eb 0f                	jmp    800550 <strfind+0x1d>
+        if (*s == c) {
+  800541:	8b 45 08             	mov    0x8(%ebp),%eax
+  800544:	0f b6 00             	movzbl (%eax),%eax
+  800547:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  80054a:	74 10                	je     80055c <strfind+0x29>
+            break;
+        }
+        s ++;
+  80054c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800550:	8b 45 08             	mov    0x8(%ebp),%eax
+  800553:	0f b6 00             	movzbl (%eax),%eax
+  800556:	84 c0                	test   %al,%al
+  800558:	75 e7                	jne    800541 <strfind+0xe>
+  80055a:	eb 01                	jmp    80055d <strfind+0x2a>
+        if (*s == c) {
+            break;
+  80055c:	90                   	nop
+        }
+        s ++;
+    }
+    return (char *)s;
+  80055d:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800560:	c9                   	leave  
+  800561:	c3                   	ret    
+
+00800562 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800562:	55                   	push   %ebp
+  800563:	89 e5                	mov    %esp,%ebp
+  800565:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800568:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  80056f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800576:	eb 04                	jmp    80057c <strtol+0x1a>
+        s ++;
+  800578:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80057c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80057f:	0f b6 00             	movzbl (%eax),%eax
+  800582:	3c 20                	cmp    $0x20,%al
+  800584:	74 f2                	je     800578 <strtol+0x16>
+  800586:	8b 45 08             	mov    0x8(%ebp),%eax
+  800589:	0f b6 00             	movzbl (%eax),%eax
+  80058c:	3c 09                	cmp    $0x9,%al
+  80058e:	74 e8                	je     800578 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800590:	8b 45 08             	mov    0x8(%ebp),%eax
+  800593:	0f b6 00             	movzbl (%eax),%eax
+  800596:	3c 2b                	cmp    $0x2b,%al
+  800598:	75 06                	jne    8005a0 <strtol+0x3e>
+        s ++;
+  80059a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  80059e:	eb 15                	jmp    8005b5 <strtol+0x53>
+    }
+    else if (*s == '-') {
+  8005a0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a3:	0f b6 00             	movzbl (%eax),%eax
+  8005a6:	3c 2d                	cmp    $0x2d,%al
+  8005a8:	75 0b                	jne    8005b5 <strtol+0x53>
+        s ++, neg = 1;
+  8005aa:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005ae:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  8005b5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005b9:	74 06                	je     8005c1 <strtol+0x5f>
+  8005bb:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  8005bf:	75 24                	jne    8005e5 <strtol+0x83>
+  8005c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005c4:	0f b6 00             	movzbl (%eax),%eax
+  8005c7:	3c 30                	cmp    $0x30,%al
+  8005c9:	75 1a                	jne    8005e5 <strtol+0x83>
+  8005cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ce:	83 c0 01             	add    $0x1,%eax
+  8005d1:	0f b6 00             	movzbl (%eax),%eax
+  8005d4:	3c 78                	cmp    $0x78,%al
+  8005d6:	75 0d                	jne    8005e5 <strtol+0x83>
+        s += 2, base = 16;
+  8005d8:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005dc:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005e3:	eb 2a                	jmp    80060f <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005e5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005e9:	75 17                	jne    800602 <strtol+0xa0>
+  8005eb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ee:	0f b6 00             	movzbl (%eax),%eax
+  8005f1:	3c 30                	cmp    $0x30,%al
+  8005f3:	75 0d                	jne    800602 <strtol+0xa0>
+        s ++, base = 8;
+  8005f5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005f9:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800600:	eb 0d                	jmp    80060f <strtol+0xad>
+    }
+    else if (base == 0) {
+  800602:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800606:	75 07                	jne    80060f <strtol+0xad>
+        base = 10;
+  800608:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  80060f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800612:	0f b6 00             	movzbl (%eax),%eax
+  800615:	3c 2f                	cmp    $0x2f,%al
+  800617:	7e 1b                	jle    800634 <strtol+0xd2>
+  800619:	8b 45 08             	mov    0x8(%ebp),%eax
+  80061c:	0f b6 00             	movzbl (%eax),%eax
+  80061f:	3c 39                	cmp    $0x39,%al
+  800621:	7f 11                	jg     800634 <strtol+0xd2>
+            dig = *s - '0';
+  800623:	8b 45 08             	mov    0x8(%ebp),%eax
+  800626:	0f b6 00             	movzbl (%eax),%eax
+  800629:	0f be c0             	movsbl %al,%eax
+  80062c:	83 e8 30             	sub    $0x30,%eax
+  80062f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800632:	eb 48                	jmp    80067c <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800634:	8b 45 08             	mov    0x8(%ebp),%eax
+  800637:	0f b6 00             	movzbl (%eax),%eax
+  80063a:	3c 60                	cmp    $0x60,%al
+  80063c:	7e 1b                	jle    800659 <strtol+0xf7>
+  80063e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800641:	0f b6 00             	movzbl (%eax),%eax
+  800644:	3c 7a                	cmp    $0x7a,%al
+  800646:	7f 11                	jg     800659 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800648:	8b 45 08             	mov    0x8(%ebp),%eax
+  80064b:	0f b6 00             	movzbl (%eax),%eax
+  80064e:	0f be c0             	movsbl %al,%eax
+  800651:	83 e8 57             	sub    $0x57,%eax
+  800654:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800657:	eb 23                	jmp    80067c <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800659:	8b 45 08             	mov    0x8(%ebp),%eax
+  80065c:	0f b6 00             	movzbl (%eax),%eax
+  80065f:	3c 40                	cmp    $0x40,%al
+  800661:	7e 3c                	jle    80069f <strtol+0x13d>
+  800663:	8b 45 08             	mov    0x8(%ebp),%eax
+  800666:	0f b6 00             	movzbl (%eax),%eax
+  800669:	3c 5a                	cmp    $0x5a,%al
+  80066b:	7f 32                	jg     80069f <strtol+0x13d>
+            dig = *s - 'A' + 10;
+  80066d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800670:	0f b6 00             	movzbl (%eax),%eax
+  800673:	0f be c0             	movsbl %al,%eax
+  800676:	83 e8 37             	sub    $0x37,%eax
+  800679:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  80067c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80067f:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800682:	7d 1a                	jge    80069e <strtol+0x13c>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  800684:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800688:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80068b:	0f af 45 10          	imul   0x10(%ebp),%eax
+  80068f:	89 c2                	mov    %eax,%edx
+  800691:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800694:	01 d0                	add    %edx,%eax
+  800696:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800699:	e9 71 ff ff ff       	jmp    80060f <strtol+0xad>
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+            break;
+  80069e:	90                   	nop
+        }
+        s ++, val = (val * base) + dig;
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  80069f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8006a3:	74 08                	je     8006ad <strtol+0x14b>
+        *endptr = (char *) s;
+  8006a5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006a8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006ab:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  8006ad:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  8006b1:	74 07                	je     8006ba <strtol+0x158>
+  8006b3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006b6:	f7 d8                	neg    %eax
+  8006b8:	eb 03                	jmp    8006bd <strtol+0x15b>
+  8006ba:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  8006bd:	c9                   	leave  
+  8006be:	c3                   	ret    
+
+008006bf <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  8006bf:	55                   	push   %ebp
+  8006c0:	89 e5                	mov    %esp,%ebp
+  8006c2:	57                   	push   %edi
+  8006c3:	83 ec 24             	sub    $0x24,%esp
+  8006c6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006c9:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006cc:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006d0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006d3:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006d6:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006d9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006df:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006e2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006e6:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006e9:	89 d7                	mov    %edx,%edi
+  8006eb:	f3 aa                	rep stos %al,%es:(%edi)
+  8006ed:	89 fa                	mov    %edi,%edx
+  8006ef:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8006f2:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  8006f5:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006f8:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  8006f9:	83 c4 24             	add    $0x24,%esp
+  8006fc:	5f                   	pop    %edi
+  8006fd:	5d                   	pop    %ebp
+  8006fe:	c3                   	ret    
+
+008006ff <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  8006ff:	55                   	push   %ebp
+  800700:	89 e5                	mov    %esp,%ebp
+  800702:	57                   	push   %edi
+  800703:	56                   	push   %esi
+  800704:	53                   	push   %ebx
+  800705:	83 ec 30             	sub    $0x30,%esp
+  800708:	8b 45 08             	mov    0x8(%ebp),%eax
+  80070b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80070e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800711:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800714:	8b 45 10             	mov    0x10(%ebp),%eax
+  800717:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  80071a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80071d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800720:	73 42                	jae    800764 <memmove+0x65>
+  800722:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800725:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800728:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80072b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80072e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800731:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800734:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800737:	c1 e8 02             	shr    $0x2,%eax
+  80073a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  80073c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  80073f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800742:	89 d7                	mov    %edx,%edi
+  800744:	89 c6                	mov    %eax,%esi
+  800746:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800748:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  80074b:	83 e1 03             	and    $0x3,%ecx
+  80074e:	74 02                	je     800752 <memmove+0x53>
+  800750:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800752:	89 f0                	mov    %esi,%eax
+  800754:	89 fa                	mov    %edi,%edx
+  800756:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800759:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  80075c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  80075f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  800762:	eb 36                	jmp    80079a <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800764:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800767:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80076a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80076d:	01 c2                	add    %eax,%edx
+  80076f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800772:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800775:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800778:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  80077b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80077e:	89 c1                	mov    %eax,%ecx
+  800780:	89 d8                	mov    %ebx,%eax
+  800782:	89 d6                	mov    %edx,%esi
+  800784:	89 c7                	mov    %eax,%edi
+  800786:	fd                   	std    
+  800787:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800789:	fc                   	cld    
+  80078a:	89 f8                	mov    %edi,%eax
+  80078c:	89 f2                	mov    %esi,%edx
+  80078e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800791:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800794:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800797:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  80079a:	83 c4 30             	add    $0x30,%esp
+  80079d:	5b                   	pop    %ebx
+  80079e:	5e                   	pop    %esi
+  80079f:	5f                   	pop    %edi
+  8007a0:	5d                   	pop    %ebp
+  8007a1:	c3                   	ret    
+
+008007a2 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  8007a2:	55                   	push   %ebp
+  8007a3:	89 e5                	mov    %esp,%ebp
+  8007a5:	57                   	push   %edi
+  8007a6:	56                   	push   %esi
+  8007a7:	83 ec 20             	sub    $0x20,%esp
+  8007aa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8007b0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007b6:	8b 45 10             	mov    0x10(%ebp),%eax
+  8007b9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  8007bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8007bf:	c1 e8 02             	shr    $0x2,%eax
+  8007c2:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  8007c4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007ca:	89 d7                	mov    %edx,%edi
+  8007cc:	89 c6                	mov    %eax,%esi
+  8007ce:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007d0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007d3:	83 e1 03             	and    $0x3,%ecx
+  8007d6:	74 02                	je     8007da <memcpy+0x38>
+  8007d8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007da:	89 f0                	mov    %esi,%eax
+  8007dc:	89 fa                	mov    %edi,%edx
+  8007de:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007e1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007e4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  8007e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007ea:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007eb:	83 c4 20             	add    $0x20,%esp
+  8007ee:	5e                   	pop    %esi
+  8007ef:	5f                   	pop    %edi
+  8007f0:	5d                   	pop    %ebp
+  8007f1:	c3                   	ret    
+
+008007f2 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  8007f2:	55                   	push   %ebp
+  8007f3:	89 e5                	mov    %esp,%ebp
+  8007f5:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  8007f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007fb:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  8007fe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800801:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800804:	eb 30                	jmp    800836 <memcmp+0x44>
+        if (*s1 != *s2) {
+  800806:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800809:	0f b6 10             	movzbl (%eax),%edx
+  80080c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80080f:	0f b6 00             	movzbl (%eax),%eax
+  800812:	38 c2                	cmp    %al,%dl
+  800814:	74 18                	je     80082e <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800816:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800819:	0f b6 00             	movzbl (%eax),%eax
+  80081c:	0f b6 d0             	movzbl %al,%edx
+  80081f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800822:	0f b6 00             	movzbl (%eax),%eax
+  800825:	0f b6 c0             	movzbl %al,%eax
+  800828:	29 c2                	sub    %eax,%edx
+  80082a:	89 d0                	mov    %edx,%eax
+  80082c:	eb 1a                	jmp    800848 <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  80082e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800832:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800836:	8b 45 10             	mov    0x10(%ebp),%eax
+  800839:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80083c:	89 55 10             	mov    %edx,0x10(%ebp)
+  80083f:	85 c0                	test   %eax,%eax
+  800841:	75 c3                	jne    800806 <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800843:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800848:	c9                   	leave  
+  800849:	c3                   	ret    
+
+0080084a <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  80084a:	55                   	push   %ebp
+  80084b:	89 e5                	mov    %esp,%ebp
+  80084d:	83 ec 38             	sub    $0x38,%esp
+  800850:	8b 45 10             	mov    0x10(%ebp),%eax
+  800853:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800856:	8b 45 14             	mov    0x14(%ebp),%eax
+  800859:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80085c:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  80085f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800862:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800865:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800868:	8b 45 18             	mov    0x18(%ebp),%eax
+  80086b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  80086e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800871:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800874:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800877:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  80087a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80087d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800880:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800884:	74 1c                	je     8008a2 <printnum+0x58>
+  800886:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800889:	ba 00 00 00 00       	mov    $0x0,%edx
+  80088e:	f7 75 e4             	divl   -0x1c(%ebp)
+  800891:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800894:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800897:	ba 00 00 00 00       	mov    $0x0,%edx
+  80089c:	f7 75 e4             	divl   -0x1c(%ebp)
+  80089f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008a2:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008a8:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008ab:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8008ae:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8008b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008b4:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8008b7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8008ba:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8008bd:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8008c0:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8008c3:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008c6:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008cb:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008ce:	77 41                	ja     800911 <printnum+0xc7>
+  8008d0:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008d3:	72 05                	jb     8008da <printnum+0x90>
+  8008d5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  8008d8:	77 37                	ja     800911 <printnum+0xc7>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008da:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008dd:	83 e8 01             	sub    $0x1,%eax
+  8008e0:	83 ec 04             	sub    $0x4,%esp
+  8008e3:	ff 75 20             	pushl  0x20(%ebp)
+  8008e6:	50                   	push   %eax
+  8008e7:	ff 75 18             	pushl  0x18(%ebp)
+  8008ea:	ff 75 ec             	pushl  -0x14(%ebp)
+  8008ed:	ff 75 e8             	pushl  -0x18(%ebp)
+  8008f0:	ff 75 0c             	pushl  0xc(%ebp)
+  8008f3:	ff 75 08             	pushl  0x8(%ebp)
+  8008f6:	e8 4f ff ff ff       	call   80084a <printnum>
+  8008fb:	83 c4 20             	add    $0x20,%esp
+  8008fe:	eb 1b                	jmp    80091b <printnum+0xd1>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800900:	83 ec 08             	sub    $0x8,%esp
+  800903:	ff 75 0c             	pushl  0xc(%ebp)
+  800906:	ff 75 20             	pushl  0x20(%ebp)
+  800909:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090c:	ff d0                	call   *%eax
+  80090e:	83 c4 10             	add    $0x10,%esp
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  800911:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  800915:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  800919:	7f e5                	jg     800900 <printnum+0xb6>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  80091b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  80091e:	05 c4 11 80 00       	add    $0x8011c4,%eax
+  800923:	0f b6 00             	movzbl (%eax),%eax
+  800926:	0f be c0             	movsbl %al,%eax
+  800929:	83 ec 08             	sub    $0x8,%esp
+  80092c:	ff 75 0c             	pushl  0xc(%ebp)
+  80092f:	50                   	push   %eax
+  800930:	8b 45 08             	mov    0x8(%ebp),%eax
+  800933:	ff d0                	call   *%eax
+  800935:	83 c4 10             	add    $0x10,%esp
+}
+  800938:	90                   	nop
+  800939:	c9                   	leave  
+  80093a:	c3                   	ret    
+
+0080093b <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  80093b:	55                   	push   %ebp
+  80093c:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  80093e:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800942:	7e 14                	jle    800958 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  800944:	8b 45 08             	mov    0x8(%ebp),%eax
+  800947:	8b 00                	mov    (%eax),%eax
+  800949:	8d 48 08             	lea    0x8(%eax),%ecx
+  80094c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80094f:	89 0a                	mov    %ecx,(%edx)
+  800951:	8b 50 04             	mov    0x4(%eax),%edx
+  800954:	8b 00                	mov    (%eax),%eax
+  800956:	eb 30                	jmp    800988 <getuint+0x4d>
+    }
+    else if (lflag) {
+  800958:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80095c:	74 16                	je     800974 <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  80095e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800961:	8b 00                	mov    (%eax),%eax
+  800963:	8d 48 04             	lea    0x4(%eax),%ecx
+  800966:	8b 55 08             	mov    0x8(%ebp),%edx
+  800969:	89 0a                	mov    %ecx,(%edx)
+  80096b:	8b 00                	mov    (%eax),%eax
+  80096d:	ba 00 00 00 00       	mov    $0x0,%edx
+  800972:	eb 14                	jmp    800988 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  800974:	8b 45 08             	mov    0x8(%ebp),%eax
+  800977:	8b 00                	mov    (%eax),%eax
+  800979:	8d 48 04             	lea    0x4(%eax),%ecx
+  80097c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80097f:	89 0a                	mov    %ecx,(%edx)
+  800981:	8b 00                	mov    (%eax),%eax
+  800983:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800988:	5d                   	pop    %ebp
+  800989:	c3                   	ret    
+
+0080098a <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  80098a:	55                   	push   %ebp
+  80098b:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  80098d:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800991:	7e 14                	jle    8009a7 <getint+0x1d>
+        return va_arg(*ap, long long);
+  800993:	8b 45 08             	mov    0x8(%ebp),%eax
+  800996:	8b 00                	mov    (%eax),%eax
+  800998:	8d 48 08             	lea    0x8(%eax),%ecx
+  80099b:	8b 55 08             	mov    0x8(%ebp),%edx
+  80099e:	89 0a                	mov    %ecx,(%edx)
+  8009a0:	8b 50 04             	mov    0x4(%eax),%edx
+  8009a3:	8b 00                	mov    (%eax),%eax
+  8009a5:	eb 28                	jmp    8009cf <getint+0x45>
+    }
+    else if (lflag) {
+  8009a7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8009ab:	74 12                	je     8009bf <getint+0x35>
+        return va_arg(*ap, long);
+  8009ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b0:	8b 00                	mov    (%eax),%eax
+  8009b2:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009b5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009b8:	89 0a                	mov    %ecx,(%edx)
+  8009ba:	8b 00                	mov    (%eax),%eax
+  8009bc:	99                   	cltd   
+  8009bd:	eb 10                	jmp    8009cf <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  8009bf:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009c2:	8b 00                	mov    (%eax),%eax
+  8009c4:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009c7:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009ca:	89 0a                	mov    %ecx,(%edx)
+  8009cc:	8b 00                	mov    (%eax),%eax
+  8009ce:	99                   	cltd   
+    }
+}
+  8009cf:	5d                   	pop    %ebp
+  8009d0:	c3                   	ret    
+
+008009d1 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009d1:	55                   	push   %ebp
+  8009d2:	89 e5                	mov    %esp,%ebp
+  8009d4:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009d7:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009da:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8009e0:	50                   	push   %eax
+  8009e1:	ff 75 10             	pushl  0x10(%ebp)
+  8009e4:	ff 75 0c             	pushl  0xc(%ebp)
+  8009e7:	ff 75 08             	pushl  0x8(%ebp)
+  8009ea:	e8 06 00 00 00       	call   8009f5 <vprintfmt>
+  8009ef:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8009f2:	90                   	nop
+  8009f3:	c9                   	leave  
+  8009f4:	c3                   	ret    
+
+008009f5 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8009f5:	55                   	push   %ebp
+  8009f6:	89 e5                	mov    %esp,%ebp
+  8009f8:	56                   	push   %esi
+  8009f9:	53                   	push   %ebx
+  8009fa:	83 ec 20             	sub    $0x20,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009fd:	eb 17                	jmp    800a16 <vprintfmt+0x21>
+            if (ch == '\0') {
+  8009ff:	85 db                	test   %ebx,%ebx
+  800a01:	0f 84 8e 03 00 00    	je     800d95 <vprintfmt+0x3a0>
+                return;
+            }
+            putch(ch, putdat);
+  800a07:	83 ec 08             	sub    $0x8,%esp
+  800a0a:	ff 75 0c             	pushl  0xc(%ebp)
+  800a0d:	53                   	push   %ebx
+  800a0e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a11:	ff d0                	call   *%eax
+  800a13:	83 c4 10             	add    $0x10,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a16:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a19:	8d 50 01             	lea    0x1(%eax),%edx
+  800a1c:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a1f:	0f b6 00             	movzbl (%eax),%eax
+  800a22:	0f b6 d8             	movzbl %al,%ebx
+  800a25:	83 fb 25             	cmp    $0x25,%ebx
+  800a28:	75 d5                	jne    8009ff <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a2a:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a2e:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a38:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a3b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a42:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a45:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a48:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a4b:	8d 50 01             	lea    0x1(%eax),%edx
+  800a4e:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a51:	0f b6 00             	movzbl (%eax),%eax
+  800a54:	0f b6 d8             	movzbl %al,%ebx
+  800a57:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a5a:	83 f8 55             	cmp    $0x55,%eax
+  800a5d:	0f 87 05 03 00 00    	ja     800d68 <vprintfmt+0x373>
+  800a63:	8b 04 85 e8 11 80 00 	mov    0x8011e8(,%eax,4),%eax
+  800a6a:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a6c:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a70:	eb d6                	jmp    800a48 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a72:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800a76:	eb d0                	jmp    800a48 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a78:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800a7f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a82:	89 d0                	mov    %edx,%eax
+  800a84:	c1 e0 02             	shl    $0x2,%eax
+  800a87:	01 d0                	add    %edx,%eax
+  800a89:	01 c0                	add    %eax,%eax
+  800a8b:	01 d8                	add    %ebx,%eax
+  800a8d:	83 e8 30             	sub    $0x30,%eax
+  800a90:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800a93:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a96:	0f b6 00             	movzbl (%eax),%eax
+  800a99:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800a9c:	83 fb 2f             	cmp    $0x2f,%ebx
+  800a9f:	7e 39                	jle    800ada <vprintfmt+0xe5>
+  800aa1:	83 fb 39             	cmp    $0x39,%ebx
+  800aa4:	7f 34                	jg     800ada <vprintfmt+0xe5>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800aa6:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  800aaa:	eb d3                	jmp    800a7f <vprintfmt+0x8a>
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800aac:	8b 45 14             	mov    0x14(%ebp),%eax
+  800aaf:	8d 50 04             	lea    0x4(%eax),%edx
+  800ab2:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ab5:	8b 00                	mov    (%eax),%eax
+  800ab7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800aba:	eb 1f                	jmp    800adb <vprintfmt+0xe6>
+
+        case '.':
+            if (width < 0)
+  800abc:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ac0:	79 86                	jns    800a48 <vprintfmt+0x53>
+                width = 0;
+  800ac2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800ac9:	e9 7a ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800ace:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800ad5:	e9 6e ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+            goto process_precision;
+  800ada:	90                   	nop
+        case '#':
+            altflag = 1;
+            goto reswitch;
+
+        process_precision:
+            if (width < 0)
+  800adb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800adf:	0f 89 63 ff ff ff    	jns    800a48 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800ae5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ae8:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800aeb:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800af2:	e9 51 ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800af7:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800afb:	e9 48 ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800b00:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b03:	8d 50 04             	lea    0x4(%eax),%edx
+  800b06:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b09:	8b 00                	mov    (%eax),%eax
+  800b0b:	83 ec 08             	sub    $0x8,%esp
+  800b0e:	ff 75 0c             	pushl  0xc(%ebp)
+  800b11:	50                   	push   %eax
+  800b12:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b15:	ff d0                	call   *%eax
+  800b17:	83 c4 10             	add    $0x10,%esp
+            break;
+  800b1a:	e9 71 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800b1f:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b22:	8d 50 04             	lea    0x4(%eax),%edx
+  800b25:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b28:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b2a:	85 db                	test   %ebx,%ebx
+  800b2c:	79 02                	jns    800b30 <vprintfmt+0x13b>
+                err = -err;
+  800b2e:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b30:	83 fb 18             	cmp    $0x18,%ebx
+  800b33:	7f 0b                	jg     800b40 <vprintfmt+0x14b>
+  800b35:	8b 34 9d 60 11 80 00 	mov    0x801160(,%ebx,4),%esi
+  800b3c:	85 f6                	test   %esi,%esi
+  800b3e:	75 19                	jne    800b59 <vprintfmt+0x164>
+                printfmt(putch, putdat, "error %d", err);
+  800b40:	53                   	push   %ebx
+  800b41:	68 d5 11 80 00       	push   $0x8011d5
+  800b46:	ff 75 0c             	pushl  0xc(%ebp)
+  800b49:	ff 75 08             	pushl  0x8(%ebp)
+  800b4c:	e8 80 fe ff ff       	call   8009d1 <printfmt>
+  800b51:	83 c4 10             	add    $0x10,%esp
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b54:	e9 37 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  800b59:	56                   	push   %esi
+  800b5a:	68 de 11 80 00       	push   $0x8011de
+  800b5f:	ff 75 0c             	pushl  0xc(%ebp)
+  800b62:	ff 75 08             	pushl  0x8(%ebp)
+  800b65:	e8 67 fe ff ff       	call   8009d1 <printfmt>
+  800b6a:	83 c4 10             	add    $0x10,%esp
+            }
+            break;
+  800b6d:	e9 1e 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800b72:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b75:	8d 50 04             	lea    0x4(%eax),%edx
+  800b78:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b7b:	8b 30                	mov    (%eax),%esi
+  800b7d:	85 f6                	test   %esi,%esi
+  800b7f:	75 05                	jne    800b86 <vprintfmt+0x191>
+                p = "(null)";
+  800b81:	be e1 11 80 00       	mov    $0x8011e1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800b86:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b8a:	7e 76                	jle    800c02 <vprintfmt+0x20d>
+  800b8c:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800b90:	74 70                	je     800c02 <vprintfmt+0x20d>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b92:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b95:	83 ec 08             	sub    $0x8,%esp
+  800b98:	50                   	push   %eax
+  800b99:	56                   	push   %esi
+  800b9a:	e8 17 f8 ff ff       	call   8003b6 <strnlen>
+  800b9f:	83 c4 10             	add    $0x10,%esp
+  800ba2:	89 c2                	mov    %eax,%edx
+  800ba4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ba7:	29 d0                	sub    %edx,%eax
+  800ba9:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800bac:	eb 17                	jmp    800bc5 <vprintfmt+0x1d0>
+                    putch(padc, putdat);
+  800bae:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800bb2:	83 ec 08             	sub    $0x8,%esp
+  800bb5:	ff 75 0c             	pushl  0xc(%ebp)
+  800bb8:	50                   	push   %eax
+  800bb9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bbc:	ff d0                	call   *%eax
+  800bbe:	83 c4 10             	add    $0x10,%esp
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bc1:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800bc5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800bc9:	7f e3                	jg     800bae <vprintfmt+0x1b9>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bcb:	eb 35                	jmp    800c02 <vprintfmt+0x20d>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800bcd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800bd1:	74 1c                	je     800bef <vprintfmt+0x1fa>
+  800bd3:	83 fb 1f             	cmp    $0x1f,%ebx
+  800bd6:	7e 05                	jle    800bdd <vprintfmt+0x1e8>
+  800bd8:	83 fb 7e             	cmp    $0x7e,%ebx
+  800bdb:	7e 12                	jle    800bef <vprintfmt+0x1fa>
+                    putch('?', putdat);
+  800bdd:	83 ec 08             	sub    $0x8,%esp
+  800be0:	ff 75 0c             	pushl  0xc(%ebp)
+  800be3:	6a 3f                	push   $0x3f
+  800be5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800be8:	ff d0                	call   *%eax
+  800bea:	83 c4 10             	add    $0x10,%esp
+  800bed:	eb 0f                	jmp    800bfe <vprintfmt+0x209>
+                }
+                else {
+                    putch(ch, putdat);
+  800bef:	83 ec 08             	sub    $0x8,%esp
+  800bf2:	ff 75 0c             	pushl  0xc(%ebp)
+  800bf5:	53                   	push   %ebx
+  800bf6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bf9:	ff d0                	call   *%eax
+  800bfb:	83 c4 10             	add    $0x10,%esp
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bfe:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c02:	89 f0                	mov    %esi,%eax
+  800c04:	8d 70 01             	lea    0x1(%eax),%esi
+  800c07:	0f b6 00             	movzbl (%eax),%eax
+  800c0a:	0f be d8             	movsbl %al,%ebx
+  800c0d:	85 db                	test   %ebx,%ebx
+  800c0f:	74 26                	je     800c37 <vprintfmt+0x242>
+  800c11:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c15:	78 b6                	js     800bcd <vprintfmt+0x1d8>
+  800c17:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  800c1b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c1f:	79 ac                	jns    800bcd <vprintfmt+0x1d8>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c21:	eb 14                	jmp    800c37 <vprintfmt+0x242>
+                putch(' ', putdat);
+  800c23:	83 ec 08             	sub    $0x8,%esp
+  800c26:	ff 75 0c             	pushl  0xc(%ebp)
+  800c29:	6a 20                	push   $0x20
+  800c2b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2e:	ff d0                	call   *%eax
+  800c30:	83 c4 10             	add    $0x10,%esp
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c33:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c37:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c3b:	7f e6                	jg     800c23 <vprintfmt+0x22e>
+                putch(' ', putdat);
+            }
+            break;
+  800c3d:	e9 4e 01 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c42:	83 ec 08             	sub    $0x8,%esp
+  800c45:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c48:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c4b:	50                   	push   %eax
+  800c4c:	e8 39 fd ff ff       	call   80098a <getint>
+  800c51:	83 c4 10             	add    $0x10,%esp
+  800c54:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c57:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c5d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c60:	85 d2                	test   %edx,%edx
+  800c62:	79 23                	jns    800c87 <vprintfmt+0x292>
+                putch('-', putdat);
+  800c64:	83 ec 08             	sub    $0x8,%esp
+  800c67:	ff 75 0c             	pushl  0xc(%ebp)
+  800c6a:	6a 2d                	push   $0x2d
+  800c6c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c6f:	ff d0                	call   *%eax
+  800c71:	83 c4 10             	add    $0x10,%esp
+                num = -(long long)num;
+  800c74:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c77:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c7a:	f7 d8                	neg    %eax
+  800c7c:	83 d2 00             	adc    $0x0,%edx
+  800c7f:	f7 da                	neg    %edx
+  800c81:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c84:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800c87:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c8e:	e9 9f 00 00 00       	jmp    800d32 <vprintfmt+0x33d>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800c93:	83 ec 08             	sub    $0x8,%esp
+  800c96:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c99:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c9c:	50                   	push   %eax
+  800c9d:	e8 99 fc ff ff       	call   80093b <getuint>
+  800ca2:	83 c4 10             	add    $0x10,%esp
+  800ca5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ca8:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800cab:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cb2:	eb 7e                	jmp    800d32 <vprintfmt+0x33d>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800cb4:	83 ec 08             	sub    $0x8,%esp
+  800cb7:	ff 75 e0             	pushl  -0x20(%ebp)
+  800cba:	8d 45 14             	lea    0x14(%ebp),%eax
+  800cbd:	50                   	push   %eax
+  800cbe:	e8 78 fc ff ff       	call   80093b <getuint>
+  800cc3:	83 c4 10             	add    $0x10,%esp
+  800cc6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cc9:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800ccc:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800cd3:	eb 5d                	jmp    800d32 <vprintfmt+0x33d>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800cd5:	83 ec 08             	sub    $0x8,%esp
+  800cd8:	ff 75 0c             	pushl  0xc(%ebp)
+  800cdb:	6a 30                	push   $0x30
+  800cdd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ce0:	ff d0                	call   *%eax
+  800ce2:	83 c4 10             	add    $0x10,%esp
+            putch('x', putdat);
+  800ce5:	83 ec 08             	sub    $0x8,%esp
+  800ce8:	ff 75 0c             	pushl  0xc(%ebp)
+  800ceb:	6a 78                	push   $0x78
+  800ced:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cf0:	ff d0                	call   *%eax
+  800cf2:	83 c4 10             	add    $0x10,%esp
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800cf5:	8b 45 14             	mov    0x14(%ebp),%eax
+  800cf8:	8d 50 04             	lea    0x4(%eax),%edx
+  800cfb:	89 55 14             	mov    %edx,0x14(%ebp)
+  800cfe:	8b 00                	mov    (%eax),%eax
+  800d00:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d03:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800d0a:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800d11:	eb 1f                	jmp    800d32 <vprintfmt+0x33d>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800d13:	83 ec 08             	sub    $0x8,%esp
+  800d16:	ff 75 e0             	pushl  -0x20(%ebp)
+  800d19:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d1c:	50                   	push   %eax
+  800d1d:	e8 19 fc ff ff       	call   80093b <getuint>
+  800d22:	83 c4 10             	add    $0x10,%esp
+  800d25:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d28:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d2b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d32:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d36:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d39:	83 ec 04             	sub    $0x4,%esp
+  800d3c:	52                   	push   %edx
+  800d3d:	ff 75 e8             	pushl  -0x18(%ebp)
+  800d40:	50                   	push   %eax
+  800d41:	ff 75 f4             	pushl  -0xc(%ebp)
+  800d44:	ff 75 f0             	pushl  -0x10(%ebp)
+  800d47:	ff 75 0c             	pushl  0xc(%ebp)
+  800d4a:	ff 75 08             	pushl  0x8(%ebp)
+  800d4d:	e8 f8 fa ff ff       	call   80084a <printnum>
+  800d52:	83 c4 20             	add    $0x20,%esp
+            break;
+  800d55:	eb 39                	jmp    800d90 <vprintfmt+0x39b>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800d57:	83 ec 08             	sub    $0x8,%esp
+  800d5a:	ff 75 0c             	pushl  0xc(%ebp)
+  800d5d:	53                   	push   %ebx
+  800d5e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d61:	ff d0                	call   *%eax
+  800d63:	83 c4 10             	add    $0x10,%esp
+            break;
+  800d66:	eb 28                	jmp    800d90 <vprintfmt+0x39b>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800d68:	83 ec 08             	sub    $0x8,%esp
+  800d6b:	ff 75 0c             	pushl  0xc(%ebp)
+  800d6e:	6a 25                	push   $0x25
+  800d70:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d73:	ff d0                	call   *%eax
+  800d75:	83 c4 10             	add    $0x10,%esp
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800d78:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d7c:	eb 04                	jmp    800d82 <vprintfmt+0x38d>
+  800d7e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d82:	8b 45 10             	mov    0x10(%ebp),%eax
+  800d85:	83 e8 01             	sub    $0x1,%eax
+  800d88:	0f b6 00             	movzbl (%eax),%eax
+  800d8b:	3c 25                	cmp    $0x25,%al
+  800d8d:	75 ef                	jne    800d7e <vprintfmt+0x389>
+                /* do nothing */;
+            break;
+  800d8f:	90                   	nop
+        }
+    }
+  800d90:	e9 68 fc ff ff       	jmp    8009fd <vprintfmt+0x8>
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+            if (ch == '\0') {
+                return;
+  800d95:	90                   	nop
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  800d96:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  800d99:	5b                   	pop    %ebx
+  800d9a:	5e                   	pop    %esi
+  800d9b:	5d                   	pop    %ebp
+  800d9c:	c3                   	ret    
+
+00800d9d <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800d9d:	55                   	push   %ebp
+  800d9e:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800da0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800da3:	8b 40 08             	mov    0x8(%eax),%eax
+  800da6:	8d 50 01             	lea    0x1(%eax),%edx
+  800da9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dac:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800daf:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db2:	8b 10                	mov    (%eax),%edx
+  800db4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db7:	8b 40 04             	mov    0x4(%eax),%eax
+  800dba:	39 c2                	cmp    %eax,%edx
+  800dbc:	73 12                	jae    800dd0 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800dbe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dc1:	8b 00                	mov    (%eax),%eax
+  800dc3:	8d 48 01             	lea    0x1(%eax),%ecx
+  800dc6:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800dc9:	89 0a                	mov    %ecx,(%edx)
+  800dcb:	8b 55 08             	mov    0x8(%ebp),%edx
+  800dce:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800dd0:	90                   	nop
+  800dd1:	5d                   	pop    %ebp
+  800dd2:	c3                   	ret    
+
+00800dd3 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800dd3:	55                   	push   %ebp
+  800dd4:	89 e5                	mov    %esp,%ebp
+  800dd6:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800dd9:	8d 45 14             	lea    0x14(%ebp),%eax
+  800ddc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800ddf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800de2:	50                   	push   %eax
+  800de3:	ff 75 10             	pushl  0x10(%ebp)
+  800de6:	ff 75 0c             	pushl  0xc(%ebp)
+  800de9:	ff 75 08             	pushl  0x8(%ebp)
+  800dec:	e8 0b 00 00 00       	call   800dfc <vsnprintf>
+  800df1:	83 c4 10             	add    $0x10,%esp
+  800df4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800df7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800dfa:	c9                   	leave  
+  800dfb:	c3                   	ret    
+
+00800dfc <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800dfc:	55                   	push   %ebp
+  800dfd:	89 e5                	mov    %esp,%ebp
+  800dff:	83 ec 18             	sub    $0x18,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800e02:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e05:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e08:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e0b:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800e0e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e11:	01 d0                	add    %edx,%eax
+  800e13:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e16:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800e1d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800e21:	74 0a                	je     800e2d <vsnprintf+0x31>
+  800e23:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800e26:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e29:	39 c2                	cmp    %eax,%edx
+  800e2b:	76 07                	jbe    800e34 <vsnprintf+0x38>
+        return -E_INVAL;
+  800e2d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e32:	eb 20                	jmp    800e54 <vsnprintf+0x58>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e34:	ff 75 14             	pushl  0x14(%ebp)
+  800e37:	ff 75 10             	pushl  0x10(%ebp)
+  800e3a:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800e3d:	50                   	push   %eax
+  800e3e:	68 9d 0d 80 00       	push   $0x800d9d
+  800e43:	e8 ad fb ff ff       	call   8009f5 <vprintfmt>
+  800e48:	83 c4 10             	add    $0x10,%esp
+    // null terminate the buffer
+    *b.buf = '\0';
+  800e4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e4e:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800e51:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e54:	c9                   	leave  
+  800e55:	c3                   	ret    
+
+00800e56 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800e56:	55                   	push   %ebp
+  800e57:	89 e5                	mov    %esp,%ebp
+  800e59:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800e5c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e5f:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800e65:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800e68:	b8 20 00 00 00       	mov    $0x20,%eax
+  800e6d:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800e70:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800e73:	89 c1                	mov    %eax,%ecx
+  800e75:	d3 ea                	shr    %cl,%edx
+  800e77:	89 d0                	mov    %edx,%eax
+}
+  800e79:	c9                   	leave  
+  800e7a:	c3                   	ret    
+
+00800e7b <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800e7b:	55                   	push   %ebp
+  800e7c:	89 e5                	mov    %esp,%ebp
+  800e7e:	57                   	push   %edi
+  800e7f:	56                   	push   %esi
+  800e80:	53                   	push   %ebx
+  800e81:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800e84:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e89:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800e8f:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800e95:	6b f0 05             	imul   $0x5,%eax,%esi
+  800e98:	01 fe                	add    %edi,%esi
+  800e9a:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800e9f:	f7 e7                	mul    %edi
+  800ea1:	01 d6                	add    %edx,%esi
+  800ea3:	89 f2                	mov    %esi,%edx
+  800ea5:	83 c0 0b             	add    $0xb,%eax
+  800ea8:	83 d2 00             	adc    $0x0,%edx
+  800eab:	89 c7                	mov    %eax,%edi
+  800ead:	83 e7 ff             	and    $0xffffffff,%edi
+  800eb0:	89 f9                	mov    %edi,%ecx
+  800eb2:	0f b7 da             	movzwl %dx,%ebx
+  800eb5:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800ebb:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800ec1:	a1 00 20 80 00       	mov    0x802000,%eax
+  800ec6:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ecc:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ed0:	c1 ea 0c             	shr    $0xc,%edx
+  800ed3:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ed6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800ed9:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ee0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ee3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ee6:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ee9:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800eec:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eef:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ef2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ef6:	74 1c                	je     800f14 <rand+0x99>
+  800ef8:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800efb:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f00:	f7 75 dc             	divl   -0x24(%ebp)
+  800f03:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800f06:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f09:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f0e:	f7 75 dc             	divl   -0x24(%ebp)
+  800f11:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800f14:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f17:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800f1a:	f7 75 dc             	divl   -0x24(%ebp)
+  800f1d:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f20:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f23:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f26:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800f29:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f2c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f2f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800f32:	83 c4 24             	add    $0x24,%esp
+  800f35:	5b                   	pop    %ebx
+  800f36:	5e                   	pop    %esi
+  800f37:	5f                   	pop    %edi
+  800f38:	5d                   	pop    %ebp
+  800f39:	c3                   	ret    
+
+00800f3a <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800f3a:	55                   	push   %ebp
+  800f3b:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800f3d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f40:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f45:	a3 00 20 80 00       	mov    %eax,0x802000
+  800f4a:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800f50:	90                   	nop
+  800f51:	5d                   	pop    %ebp
+  800f52:	c3                   	ret    
+
+00800f53 <sleepy>:
+#include <stdio.h>
+#include <ulib.h>
+
+void
+sleepy(int pid) {
+  800f53:	55                   	push   %ebp
+  800f54:	89 e5                	mov    %esp,%ebp
+  800f56:	83 ec 18             	sub    $0x18,%esp
+    int i, time = 100;
+  800f59:	c7 45 f0 64 00 00 00 	movl   $0x64,-0x10(%ebp)
+    for (i = 0; i < 10; i ++) {
+  800f60:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  800f67:	eb 2d                	jmp    800f96 <sleepy+0x43>
+        sleep(time);
+  800f69:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800f6c:	83 ec 0c             	sub    $0xc,%esp
+  800f6f:	50                   	push   %eax
+  800f70:	e8 1a f3 ff ff       	call   80028f <sleep>
+  800f75:	83 c4 10             	add    $0x10,%esp
+        cprintf("sleep %d x %d slices.\n", i + 1, time);
+  800f78:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800f7b:	83 c0 01             	add    $0x1,%eax
+  800f7e:	83 ec 04             	sub    $0x4,%esp
+  800f81:	ff 75 f0             	pushl  -0x10(%ebp)
+  800f84:	50                   	push   %eax
+  800f85:	68 40 13 80 00       	push   $0x801340
+  800f8a:	e8 72 f3 ff ff       	call   800301 <cprintf>
+  800f8f:	83 c4 10             	add    $0x10,%esp
+#include <ulib.h>
+
+void
+sleepy(int pid) {
+    int i, time = 100;
+    for (i = 0; i < 10; i ++) {
+  800f92:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  800f96:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
+  800f9a:	7e cd                	jle    800f69 <sleepy+0x16>
+        sleep(time);
+        cprintf("sleep %d x %d slices.\n", i + 1, time);
+    }
+    exit(0);
+  800f9c:	83 ec 0c             	sub    $0xc,%esp
+  800f9f:	6a 00                	push   $0x0
+  800fa1:	e8 23 f2 ff ff       	call   8001c9 <exit>
+
+00800fa6 <main>:
+}
+
+int
+main(void) {
+  800fa6:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  800faa:	83 e4 f0             	and    $0xfffffff0,%esp
+  800fad:	ff 71 fc             	pushl  -0x4(%ecx)
+  800fb0:	55                   	push   %ebp
+  800fb1:	89 e5                	mov    %esp,%ebp
+  800fb3:	51                   	push   %ecx
+  800fb4:	83 ec 14             	sub    $0x14,%esp
+    unsigned int time = gettime_msec();
+  800fb7:	e8 af f2 ff ff       	call   80026b <gettime_msec>
+  800fbc:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    int pid1, exit_code;
+
+    if ((pid1 = fork()) == 0) {
+  800fbf:	e8 2b f2 ff ff       	call   8001ef <fork>
+  800fc4:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800fc7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800fcb:	75 0e                	jne    800fdb <main+0x35>
+        sleepy(pid1);
+  800fcd:	83 ec 0c             	sub    $0xc,%esp
+  800fd0:	ff 75 f0             	pushl  -0x10(%ebp)
+  800fd3:	e8 7b ff ff ff       	call   800f53 <sleepy>
+  800fd8:	83 c4 10             	add    $0x10,%esp
+    }
+    
+    assert(waitpid(pid1, &exit_code) == 0 && exit_code == 0);
+  800fdb:	83 ec 08             	sub    $0x8,%esp
+  800fde:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800fe1:	50                   	push   %eax
+  800fe2:	ff 75 f0             	pushl  -0x10(%ebp)
+  800fe5:	e8 29 f2 ff ff       	call   800213 <waitpid>
+  800fea:	83 c4 10             	add    $0x10,%esp
+  800fed:	85 c0                	test   %eax,%eax
+  800fef:	75 07                	jne    800ff8 <main+0x52>
+  800ff1:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800ff4:	85 c0                	test   %eax,%eax
+  800ff6:	74 16                	je     80100e <main+0x68>
+  800ff8:	68 58 13 80 00       	push   $0x801358
+  800ffd:	68 89 13 80 00       	push   $0x801389
+  801002:	6a 17                	push   $0x17
+  801004:	68 9e 13 80 00       	push   $0x80139e
+  801009:	e8 12 f0 ff ff       	call   800020 <__panic>
+    cprintf("use %04d msecs.\n", gettime_msec() - time);
+  80100e:	e8 58 f2 ff ff       	call   80026b <gettime_msec>
+  801013:	2b 45 f4             	sub    -0xc(%ebp),%eax
+  801016:	83 ec 08             	sub    $0x8,%esp
+  801019:	50                   	push   %eax
+  80101a:	68 ab 13 80 00       	push   $0x8013ab
+  80101f:	e8 dd f2 ff ff       	call   800301 <cprintf>
+  801024:	83 c4 10             	add    $0x10,%esp
+    cprintf("sleep pass.\n");
+  801027:	83 ec 0c             	sub    $0xc,%esp
+  80102a:	68 bc 13 80 00       	push   $0x8013bc
+  80102f:	e8 cd f2 ff ff       	call   800301 <cprintf>
+  801034:	83 c4 10             	add    $0x10,%esp
+    return 0;
+  801037:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  80103c:	8b 4d fc             	mov    -0x4(%ebp),%ecx
+  80103f:	c9                   	leave  
+  801040:	8d 61 fc             	lea    -0x4(%ecx),%esp
+  801043:	c3                   	ret    
diff -r -u -P lab7_original/obj/user/sleep.d lab7/obj/user/sleep.d
--- lab7_original/obj/user/sleep.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/sleep.d	2016-05-06 21:59:27.574121824 +0800
@@ -0,0 +1,2 @@
+obj/user/sleep.o obj/user/sleep.d: user/sleep.c libs/stdio.h libs/defs.h \
+ libs/stdarg.h user/libs/ulib.h
diff -r -u -P lab7_original/obj/user/sleepkill.asm lab7/obj/user/sleepkill.asm
--- lab7_original/obj/user/sleepkill.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/sleepkill.asm	2016-05-06 21:59:28.590158850 +0800
@@ -0,0 +1,2655 @@
+
+obj/__user_sleepkill.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 18             	sub    $0x18,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	83 ec 04             	sub    $0x4,%esp
+  80002f:	ff 75 0c             	pushl  0xc(%ebp)
+  800032:	ff 75 08             	pushl  0x8(%ebp)
+  800035:	68 00 10 80 00       	push   $0x801000
+  80003a:	e8 c2 02 00 00       	call   800301 <cprintf>
+  80003f:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800042:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800045:	83 ec 08             	sub    $0x8,%esp
+  800048:	50                   	push   %eax
+  800049:	ff 75 10             	pushl  0x10(%ebp)
+  80004c:	e8 87 02 00 00       	call   8002d8 <vcprintf>
+  800051:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  800054:	83 ec 0c             	sub    $0xc,%esp
+  800057:	68 1a 10 80 00       	push   $0x80101a
+  80005c:	e8 a0 02 00 00       	call   800301 <cprintf>
+  800061:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	83 ec 0c             	sub    $0xc,%esp
+  800067:	6a f6                	push   $0xfffffff6
+  800069:	e8 5b 01 00 00       	call   8001c9 <exit>
+
+0080006e <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80006e:	55                   	push   %ebp
+  80006f:	89 e5                	mov    %esp,%ebp
+  800071:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800074:	8d 45 14             	lea    0x14(%ebp),%eax
+  800077:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007a:	83 ec 04             	sub    $0x4,%esp
+  80007d:	ff 75 0c             	pushl  0xc(%ebp)
+  800080:	ff 75 08             	pushl  0x8(%ebp)
+  800083:	68 1c 10 80 00       	push   $0x80101c
+  800088:	e8 74 02 00 00       	call   800301 <cprintf>
+  80008d:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800090:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800093:	83 ec 08             	sub    $0x8,%esp
+  800096:	50                   	push   %eax
+  800097:	ff 75 10             	pushl  0x10(%ebp)
+  80009a:	e8 39 02 00 00       	call   8002d8 <vcprintf>
+  80009f:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  8000a2:	83 ec 0c             	sub    $0xc,%esp
+  8000a5:	68 1a 10 80 00       	push   $0x80101a
+  8000aa:	e8 52 02 00 00       	call   800301 <cprintf>
+  8000af:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8000b2:	90                   	nop
+  8000b3:	c9                   	leave  
+  8000b4:	c3                   	ret    
+
+008000b5 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b5:	55                   	push   %ebp
+  8000b6:	89 e5                	mov    %esp,%ebp
+  8000b8:	57                   	push   %edi
+  8000b9:	56                   	push   %esi
+  8000ba:	53                   	push   %ebx
+  8000bb:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000be:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cb:	eb 16                	jmp    8000e3 <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8000cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d0:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d3:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d6:	8b 10                	mov    (%eax),%edx
+  8000d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000db:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000df:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8000e3:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e7:	7e e4                	jle    8000cd <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000e9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ec:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000ef:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f2:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f5:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8000f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fb:	cd 80                	int    $0x80
+  8000fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  800100:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800103:	83 c4 20             	add    $0x20,%esp
+  800106:	5b                   	pop    %ebx
+  800107:	5e                   	pop    %esi
+  800108:	5f                   	pop    %edi
+  800109:	5d                   	pop    %ebp
+  80010a:	c3                   	ret    
+
+0080010b <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010b:	55                   	push   %ebp
+  80010c:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_exit, error_code);
+  80010e:	ff 75 08             	pushl  0x8(%ebp)
+  800111:	6a 01                	push   $0x1
+  800113:	e8 9d ff ff ff       	call   8000b5 <syscall>
+  800118:	83 c4 08             	add    $0x8,%esp
+}
+  80011b:	c9                   	leave  
+  80011c:	c3                   	ret    
+
+0080011d <sys_fork>:
+
+int
+sys_fork(void) {
+  80011d:	55                   	push   %ebp
+  80011e:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_fork);
+  800120:	6a 02                	push   $0x2
+  800122:	e8 8e ff ff ff       	call   8000b5 <syscall>
+  800127:	83 c4 04             	add    $0x4,%esp
+}
+  80012a:	c9                   	leave  
+  80012b:	c3                   	ret    
+
+0080012c <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80012c:	55                   	push   %ebp
+  80012d:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_wait, pid, store);
+  80012f:	ff 75 0c             	pushl  0xc(%ebp)
+  800132:	ff 75 08             	pushl  0x8(%ebp)
+  800135:	6a 03                	push   $0x3
+  800137:	e8 79 ff ff ff       	call   8000b5 <syscall>
+  80013c:	83 c4 0c             	add    $0xc,%esp
+}
+  80013f:	c9                   	leave  
+  800140:	c3                   	ret    
+
+00800141 <sys_yield>:
+
+int
+sys_yield(void) {
+  800141:	55                   	push   %ebp
+  800142:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_yield);
+  800144:	6a 0a                	push   $0xa
+  800146:	e8 6a ff ff ff       	call   8000b5 <syscall>
+  80014b:	83 c4 04             	add    $0x4,%esp
+}
+  80014e:	c9                   	leave  
+  80014f:	c3                   	ret    
+
+00800150 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800150:	55                   	push   %ebp
+  800151:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_kill, pid);
+  800153:	ff 75 08             	pushl  0x8(%ebp)
+  800156:	6a 0c                	push   $0xc
+  800158:	e8 58 ff ff ff       	call   8000b5 <syscall>
+  80015d:	83 c4 08             	add    $0x8,%esp
+}
+  800160:	c9                   	leave  
+  800161:	c3                   	ret    
+
+00800162 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800162:	55                   	push   %ebp
+  800163:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_getpid);
+  800165:	6a 12                	push   $0x12
+  800167:	e8 49 ff ff ff       	call   8000b5 <syscall>
+  80016c:	83 c4 04             	add    $0x4,%esp
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_putc, c);
+  800174:	ff 75 08             	pushl  0x8(%ebp)
+  800177:	6a 1e                	push   $0x1e
+  800179:	e8 37 ff ff ff       	call   8000b5 <syscall>
+  80017e:	83 c4 08             	add    $0x8,%esp
+}
+  800181:	c9                   	leave  
+  800182:	c3                   	ret    
+
+00800183 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800183:	55                   	push   %ebp
+  800184:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_pgdir);
+  800186:	6a 1f                	push   $0x1f
+  800188:	e8 28 ff ff ff       	call   8000b5 <syscall>
+  80018d:	83 c4 04             	add    $0x4,%esp
+}
+  800190:	c9                   	leave  
+  800191:	c3                   	ret    
+
+00800192 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  800192:	55                   	push   %ebp
+  800193:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_gettime);
+  800195:	6a 11                	push   $0x11
+  800197:	e8 19 ff ff ff       	call   8000b5 <syscall>
+  80019c:	83 c4 04             	add    $0x4,%esp
+}
+  80019f:	c9                   	leave  
+  8001a0:	c3                   	ret    
+
+008001a1 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001a1:	55                   	push   %ebp
+  8001a2:	89 e5                	mov    %esp,%ebp
+    syscall(SYS_lab6_set_priority, priority);
+  8001a4:	ff 75 08             	pushl  0x8(%ebp)
+  8001a7:	68 ff 00 00 00       	push   $0xff
+  8001ac:	e8 04 ff ff ff       	call   8000b5 <syscall>
+  8001b1:	83 c4 08             	add    $0x8,%esp
+}
+  8001b4:	90                   	nop
+  8001b5:	c9                   	leave  
+  8001b6:	c3                   	ret    
+
+008001b7 <sys_sleep>:
+
+int
+sys_sleep(unsigned int time) {
+  8001b7:	55                   	push   %ebp
+  8001b8:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_sleep, time);
+  8001ba:	ff 75 08             	pushl  0x8(%ebp)
+  8001bd:	6a 0b                	push   $0xb
+  8001bf:	e8 f1 fe ff ff       	call   8000b5 <syscall>
+  8001c4:	83 c4 08             	add    $0x8,%esp
+}
+  8001c7:	c9                   	leave  
+  8001c8:	c3                   	ret    
+
+008001c9 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001c9:	55                   	push   %ebp
+  8001ca:	89 e5                	mov    %esp,%ebp
+  8001cc:	83 ec 08             	sub    $0x8,%esp
+    sys_exit(error_code);
+  8001cf:	83 ec 0c             	sub    $0xc,%esp
+  8001d2:	ff 75 08             	pushl  0x8(%ebp)
+  8001d5:	e8 31 ff ff ff       	call   80010b <sys_exit>
+  8001da:	83 c4 10             	add    $0x10,%esp
+    cprintf("BUG: exit failed.\n");
+  8001dd:	83 ec 0c             	sub    $0xc,%esp
+  8001e0:	68 38 10 80 00       	push   $0x801038
+  8001e5:	e8 17 01 00 00       	call   800301 <cprintf>
+  8001ea:	83 c4 10             	add    $0x10,%esp
+    while (1);
+  8001ed:	eb fe                	jmp    8001ed <exit+0x24>
+
+008001ef <fork>:
+}
+
+int
+fork(void) {
+  8001ef:	55                   	push   %ebp
+  8001f0:	89 e5                	mov    %esp,%ebp
+  8001f2:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8001f5:	e8 23 ff ff ff       	call   80011d <sys_fork>
+}
+  8001fa:	c9                   	leave  
+  8001fb:	c3                   	ret    
+
+008001fc <wait>:
+
+int
+wait(void) {
+  8001fc:	55                   	push   %ebp
+  8001fd:	89 e5                	mov    %esp,%ebp
+  8001ff:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(0, NULL);
+  800202:	83 ec 08             	sub    $0x8,%esp
+  800205:	6a 00                	push   $0x0
+  800207:	6a 00                	push   $0x0
+  800209:	e8 1e ff ff ff       	call   80012c <sys_wait>
+  80020e:	83 c4 10             	add    $0x10,%esp
+}
+  800211:	c9                   	leave  
+  800212:	c3                   	ret    
+
+00800213 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800213:	55                   	push   %ebp
+  800214:	89 e5                	mov    %esp,%ebp
+  800216:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(pid, store);
+  800219:	83 ec 08             	sub    $0x8,%esp
+  80021c:	ff 75 0c             	pushl  0xc(%ebp)
+  80021f:	ff 75 08             	pushl  0x8(%ebp)
+  800222:	e8 05 ff ff ff       	call   80012c <sys_wait>
+  800227:	83 c4 10             	add    $0x10,%esp
+}
+  80022a:	c9                   	leave  
+  80022b:	c3                   	ret    
+
+0080022c <yield>:
+
+void
+yield(void) {
+  80022c:	55                   	push   %ebp
+  80022d:	89 e5                	mov    %esp,%ebp
+  80022f:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800232:	e8 0a ff ff ff       	call   800141 <sys_yield>
+}
+  800237:	90                   	nop
+  800238:	c9                   	leave  
+  800239:	c3                   	ret    
+
+0080023a <kill>:
+
+int
+kill(int pid) {
+  80023a:	55                   	push   %ebp
+  80023b:	89 e5                	mov    %esp,%ebp
+  80023d:	83 ec 08             	sub    $0x8,%esp
+    return sys_kill(pid);
+  800240:	83 ec 0c             	sub    $0xc,%esp
+  800243:	ff 75 08             	pushl  0x8(%ebp)
+  800246:	e8 05 ff ff ff       	call   800150 <sys_kill>
+  80024b:	83 c4 10             	add    $0x10,%esp
+}
+  80024e:	c9                   	leave  
+  80024f:	c3                   	ret    
+
+00800250 <getpid>:
+
+int
+getpid(void) {
+  800250:	55                   	push   %ebp
+  800251:	89 e5                	mov    %esp,%ebp
+  800253:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800256:	e8 07 ff ff ff       	call   800162 <sys_getpid>
+}
+  80025b:	c9                   	leave  
+  80025c:	c3                   	ret    
+
+0080025d <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80025d:	55                   	push   %ebp
+  80025e:	89 e5                	mov    %esp,%ebp
+  800260:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800263:	e8 1b ff ff ff       	call   800183 <sys_pgdir>
+}
+  800268:	90                   	nop
+  800269:	c9                   	leave  
+  80026a:	c3                   	ret    
+
+0080026b <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80026b:	55                   	push   %ebp
+  80026c:	89 e5                	mov    %esp,%ebp
+  80026e:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800271:	e8 1c ff ff ff       	call   800192 <sys_gettime>
+}
+  800276:	c9                   	leave  
+  800277:	c3                   	ret    
+
+00800278 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800278:	55                   	push   %ebp
+  800279:	89 e5                	mov    %esp,%ebp
+  80027b:	83 ec 08             	sub    $0x8,%esp
+    sys_lab6_set_priority(priority);
+  80027e:	83 ec 0c             	sub    $0xc,%esp
+  800281:	ff 75 08             	pushl  0x8(%ebp)
+  800284:	e8 18 ff ff ff       	call   8001a1 <sys_lab6_set_priority>
+  800289:	83 c4 10             	add    $0x10,%esp
+}
+  80028c:	90                   	nop
+  80028d:	c9                   	leave  
+  80028e:	c3                   	ret    
+
+0080028f <sleep>:
+
+int
+sleep(unsigned int time) {
+  80028f:	55                   	push   %ebp
+  800290:	89 e5                	mov    %esp,%ebp
+  800292:	83 ec 08             	sub    $0x8,%esp
+    return sys_sleep(time);
+  800295:	83 ec 0c             	sub    $0xc,%esp
+  800298:	ff 75 08             	pushl  0x8(%ebp)
+  80029b:	e8 17 ff ff ff       	call   8001b7 <sys_sleep>
+  8002a0:	83 c4 10             	add    $0x10,%esp
+}
+  8002a3:	c9                   	leave  
+  8002a4:	c3                   	ret    
+
+008002a5 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  8002a5:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  8002aa:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  8002ad:	e8 c3 00 00 00       	call   800375 <umain>
+1:  jmp 1b
+  8002b2:	eb fe                	jmp    8002b2 <_start+0xd>
+
+008002b4 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8002b4:	55                   	push   %ebp
+  8002b5:	89 e5                	mov    %esp,%ebp
+  8002b7:	83 ec 08             	sub    $0x8,%esp
+    sys_putc(c);
+  8002ba:	83 ec 0c             	sub    $0xc,%esp
+  8002bd:	ff 75 08             	pushl  0x8(%ebp)
+  8002c0:	e8 ac fe ff ff       	call   800171 <sys_putc>
+  8002c5:	83 c4 10             	add    $0x10,%esp
+    (*cnt) ++;
+  8002c8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002cb:	8b 00                	mov    (%eax),%eax
+  8002cd:	8d 50 01             	lea    0x1(%eax),%edx
+  8002d0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002d3:	89 10                	mov    %edx,(%eax)
+}
+  8002d5:	90                   	nop
+  8002d6:	c9                   	leave  
+  8002d7:	c3                   	ret    
+
+008002d8 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002d8:	55                   	push   %ebp
+  8002d9:	89 e5                	mov    %esp,%ebp
+  8002db:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  8002de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002e5:	ff 75 0c             	pushl  0xc(%ebp)
+  8002e8:	ff 75 08             	pushl  0x8(%ebp)
+  8002eb:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  8002ee:	50                   	push   %eax
+  8002ef:	68 b4 02 80 00       	push   $0x8002b4
+  8002f4:	e8 fc 06 00 00       	call   8009f5 <vprintfmt>
+  8002f9:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  8002fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002ff:	c9                   	leave  
+  800300:	c3                   	ret    
+
+00800301 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800301:	55                   	push   %ebp
+  800302:	89 e5                	mov    %esp,%ebp
+  800304:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800307:	8d 45 0c             	lea    0xc(%ebp),%eax
+  80030a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  80030d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800310:	83 ec 08             	sub    $0x8,%esp
+  800313:	50                   	push   %eax
+  800314:	ff 75 08             	pushl  0x8(%ebp)
+  800317:	e8 bc ff ff ff       	call   8002d8 <vcprintf>
+  80031c:	83 c4 10             	add    $0x10,%esp
+  80031f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800322:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800325:	c9                   	leave  
+  800326:	c3                   	ret    
+
+00800327 <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  800327:	55                   	push   %ebp
+  800328:	89 e5                	mov    %esp,%ebp
+  80032a:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  80032d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  800334:	eb 14                	jmp    80034a <cputs+0x23>
+        cputch(c, &cnt);
+  800336:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  80033a:	83 ec 08             	sub    $0x8,%esp
+  80033d:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800340:	52                   	push   %edx
+  800341:	50                   	push   %eax
+  800342:	e8 6d ff ff ff       	call   8002b4 <cputch>
+  800347:	83 c4 10             	add    $0x10,%esp
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  80034a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80034d:	8d 50 01             	lea    0x1(%eax),%edx
+  800350:	89 55 08             	mov    %edx,0x8(%ebp)
+  800353:	0f b6 00             	movzbl (%eax),%eax
+  800356:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800359:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  80035d:	75 d7                	jne    800336 <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  80035f:	83 ec 08             	sub    $0x8,%esp
+  800362:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800365:	50                   	push   %eax
+  800366:	6a 0a                	push   $0xa
+  800368:	e8 47 ff ff ff       	call   8002b4 <cputch>
+  80036d:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  800370:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  800373:	c9                   	leave  
+  800374:	c3                   	ret    
+
+00800375 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800375:	55                   	push   %ebp
+  800376:	89 e5                	mov    %esp,%ebp
+  800378:	83 ec 18             	sub    $0x18,%esp
+    int ret = main();
+  80037b:	e8 d3 0b 00 00       	call   800f53 <main>
+  800380:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  800383:	83 ec 0c             	sub    $0xc,%esp
+  800386:	ff 75 f4             	pushl  -0xc(%ebp)
+  800389:	e8 3b fe ff ff       	call   8001c9 <exit>
+
+0080038e <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  80038e:	55                   	push   %ebp
+  80038f:	89 e5                	mov    %esp,%ebp
+  800391:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800394:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  80039b:	eb 04                	jmp    8003a1 <strlen+0x13>
+        cnt ++;
+  80039d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  8003a1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003a4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003a7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003aa:	0f b6 00             	movzbl (%eax),%eax
+  8003ad:	84 c0                	test   %al,%al
+  8003af:	75 ec                	jne    80039d <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003b4:	c9                   	leave  
+  8003b5:	c3                   	ret    
+
+008003b6 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  8003b6:	55                   	push   %ebp
+  8003b7:	89 e5                	mov    %esp,%ebp
+  8003b9:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003bc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003c3:	eb 04                	jmp    8003c9 <strnlen+0x13>
+        cnt ++;
+  8003c5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  8003c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003cc:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003cf:	73 10                	jae    8003e1 <strnlen+0x2b>
+  8003d1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003d4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003d7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003da:	0f b6 00             	movzbl (%eax),%eax
+  8003dd:	84 c0                	test   %al,%al
+  8003df:	75 e4                	jne    8003c5 <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003e4:	c9                   	leave  
+  8003e5:	c3                   	ret    
+
+008003e6 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  8003e6:	55                   	push   %ebp
+  8003e7:	89 e5                	mov    %esp,%ebp
+  8003e9:	57                   	push   %edi
+  8003ea:	56                   	push   %esi
+  8003eb:	83 ec 20             	sub    $0x20,%esp
+  8003ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003f4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8003f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  8003fa:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800400:	89 d1                	mov    %edx,%ecx
+  800402:	89 c2                	mov    %eax,%edx
+  800404:	89 ce                	mov    %ecx,%esi
+  800406:	89 d7                	mov    %edx,%edi
+  800408:	ac                   	lods   %ds:(%esi),%al
+  800409:	aa                   	stos   %al,%es:(%edi)
+  80040a:	84 c0                	test   %al,%al
+  80040c:	75 fa                	jne    800408 <strcpy+0x22>
+  80040e:	89 fa                	mov    %edi,%edx
+  800410:	89 f1                	mov    %esi,%ecx
+  800412:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800415:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800418:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  80041b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  80041e:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  80041f:	83 c4 20             	add    $0x20,%esp
+  800422:	5e                   	pop    %esi
+  800423:	5f                   	pop    %edi
+  800424:	5d                   	pop    %ebp
+  800425:	c3                   	ret    
+
+00800426 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800426:	55                   	push   %ebp
+  800427:	89 e5                	mov    %esp,%ebp
+  800429:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  80042c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80042f:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800432:	eb 21                	jmp    800455 <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800434:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800437:	0f b6 10             	movzbl (%eax),%edx
+  80043a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80043d:	88 10                	mov    %dl,(%eax)
+  80043f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800442:	0f b6 00             	movzbl (%eax),%eax
+  800445:	84 c0                	test   %al,%al
+  800447:	74 04                	je     80044d <strncpy+0x27>
+            src ++;
+  800449:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  80044d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800451:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800455:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800459:	75 d9                	jne    800434 <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  80045b:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  80045e:	c9                   	leave  
+  80045f:	c3                   	ret    
+
+00800460 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800460:	55                   	push   %ebp
+  800461:	89 e5                	mov    %esp,%ebp
+  800463:	57                   	push   %edi
+  800464:	56                   	push   %esi
+  800465:	83 ec 20             	sub    $0x20,%esp
+  800468:	8b 45 08             	mov    0x8(%ebp),%eax
+  80046b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80046e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800471:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800474:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800477:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80047a:	89 d1                	mov    %edx,%ecx
+  80047c:	89 c2                	mov    %eax,%edx
+  80047e:	89 ce                	mov    %ecx,%esi
+  800480:	89 d7                	mov    %edx,%edi
+  800482:	ac                   	lods   %ds:(%esi),%al
+  800483:	ae                   	scas   %es:(%edi),%al
+  800484:	75 08                	jne    80048e <strcmp+0x2e>
+  800486:	84 c0                	test   %al,%al
+  800488:	75 f8                	jne    800482 <strcmp+0x22>
+  80048a:	31 c0                	xor    %eax,%eax
+  80048c:	eb 04                	jmp    800492 <strcmp+0x32>
+  80048e:	19 c0                	sbb    %eax,%eax
+  800490:	0c 01                	or     $0x1,%al
+  800492:	89 fa                	mov    %edi,%edx
+  800494:	89 f1                	mov    %esi,%ecx
+  800496:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800499:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  80049c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  80049f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  8004a2:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  8004a3:	83 c4 20             	add    $0x20,%esp
+  8004a6:	5e                   	pop    %esi
+  8004a7:	5f                   	pop    %edi
+  8004a8:	5d                   	pop    %ebp
+  8004a9:	c3                   	ret    
+
+008004aa <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  8004aa:	55                   	push   %ebp
+  8004ab:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004ad:	eb 0c                	jmp    8004bb <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  8004af:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  8004b3:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8004b7:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004bb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004bf:	74 1a                	je     8004db <strncmp+0x31>
+  8004c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004c4:	0f b6 00             	movzbl (%eax),%eax
+  8004c7:	84 c0                	test   %al,%al
+  8004c9:	74 10                	je     8004db <strncmp+0x31>
+  8004cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004ce:	0f b6 10             	movzbl (%eax),%edx
+  8004d1:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004d4:	0f b6 00             	movzbl (%eax),%eax
+  8004d7:	38 c2                	cmp    %al,%dl
+  8004d9:	74 d4                	je     8004af <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004db:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004df:	74 18                	je     8004f9 <strncmp+0x4f>
+  8004e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e4:	0f b6 00             	movzbl (%eax),%eax
+  8004e7:	0f b6 d0             	movzbl %al,%edx
+  8004ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ed:	0f b6 00             	movzbl (%eax),%eax
+  8004f0:	0f b6 c0             	movzbl %al,%eax
+  8004f3:	29 c2                	sub    %eax,%edx
+  8004f5:	89 d0                	mov    %edx,%eax
+  8004f7:	eb 05                	jmp    8004fe <strncmp+0x54>
+  8004f9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8004fe:	5d                   	pop    %ebp
+  8004ff:	c3                   	ret    
+
+00800500 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800500:	55                   	push   %ebp
+  800501:	89 e5                	mov    %esp,%ebp
+  800503:	83 ec 04             	sub    $0x4,%esp
+  800506:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800509:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  80050c:	eb 14                	jmp    800522 <strchr+0x22>
+        if (*s == c) {
+  80050e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800511:	0f b6 00             	movzbl (%eax),%eax
+  800514:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800517:	75 05                	jne    80051e <strchr+0x1e>
+            return (char *)s;
+  800519:	8b 45 08             	mov    0x8(%ebp),%eax
+  80051c:	eb 13                	jmp    800531 <strchr+0x31>
+        }
+        s ++;
+  80051e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800522:	8b 45 08             	mov    0x8(%ebp),%eax
+  800525:	0f b6 00             	movzbl (%eax),%eax
+  800528:	84 c0                	test   %al,%al
+  80052a:	75 e2                	jne    80050e <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  80052c:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800531:	c9                   	leave  
+  800532:	c3                   	ret    
+
+00800533 <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800533:	55                   	push   %ebp
+  800534:	89 e5                	mov    %esp,%ebp
+  800536:	83 ec 04             	sub    $0x4,%esp
+  800539:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80053c:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  80053f:	eb 0f                	jmp    800550 <strfind+0x1d>
+        if (*s == c) {
+  800541:	8b 45 08             	mov    0x8(%ebp),%eax
+  800544:	0f b6 00             	movzbl (%eax),%eax
+  800547:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  80054a:	74 10                	je     80055c <strfind+0x29>
+            break;
+        }
+        s ++;
+  80054c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800550:	8b 45 08             	mov    0x8(%ebp),%eax
+  800553:	0f b6 00             	movzbl (%eax),%eax
+  800556:	84 c0                	test   %al,%al
+  800558:	75 e7                	jne    800541 <strfind+0xe>
+  80055a:	eb 01                	jmp    80055d <strfind+0x2a>
+        if (*s == c) {
+            break;
+  80055c:	90                   	nop
+        }
+        s ++;
+    }
+    return (char *)s;
+  80055d:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800560:	c9                   	leave  
+  800561:	c3                   	ret    
+
+00800562 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800562:	55                   	push   %ebp
+  800563:	89 e5                	mov    %esp,%ebp
+  800565:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800568:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  80056f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800576:	eb 04                	jmp    80057c <strtol+0x1a>
+        s ++;
+  800578:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80057c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80057f:	0f b6 00             	movzbl (%eax),%eax
+  800582:	3c 20                	cmp    $0x20,%al
+  800584:	74 f2                	je     800578 <strtol+0x16>
+  800586:	8b 45 08             	mov    0x8(%ebp),%eax
+  800589:	0f b6 00             	movzbl (%eax),%eax
+  80058c:	3c 09                	cmp    $0x9,%al
+  80058e:	74 e8                	je     800578 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800590:	8b 45 08             	mov    0x8(%ebp),%eax
+  800593:	0f b6 00             	movzbl (%eax),%eax
+  800596:	3c 2b                	cmp    $0x2b,%al
+  800598:	75 06                	jne    8005a0 <strtol+0x3e>
+        s ++;
+  80059a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  80059e:	eb 15                	jmp    8005b5 <strtol+0x53>
+    }
+    else if (*s == '-') {
+  8005a0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a3:	0f b6 00             	movzbl (%eax),%eax
+  8005a6:	3c 2d                	cmp    $0x2d,%al
+  8005a8:	75 0b                	jne    8005b5 <strtol+0x53>
+        s ++, neg = 1;
+  8005aa:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005ae:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  8005b5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005b9:	74 06                	je     8005c1 <strtol+0x5f>
+  8005bb:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  8005bf:	75 24                	jne    8005e5 <strtol+0x83>
+  8005c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005c4:	0f b6 00             	movzbl (%eax),%eax
+  8005c7:	3c 30                	cmp    $0x30,%al
+  8005c9:	75 1a                	jne    8005e5 <strtol+0x83>
+  8005cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ce:	83 c0 01             	add    $0x1,%eax
+  8005d1:	0f b6 00             	movzbl (%eax),%eax
+  8005d4:	3c 78                	cmp    $0x78,%al
+  8005d6:	75 0d                	jne    8005e5 <strtol+0x83>
+        s += 2, base = 16;
+  8005d8:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005dc:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005e3:	eb 2a                	jmp    80060f <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005e5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005e9:	75 17                	jne    800602 <strtol+0xa0>
+  8005eb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ee:	0f b6 00             	movzbl (%eax),%eax
+  8005f1:	3c 30                	cmp    $0x30,%al
+  8005f3:	75 0d                	jne    800602 <strtol+0xa0>
+        s ++, base = 8;
+  8005f5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005f9:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800600:	eb 0d                	jmp    80060f <strtol+0xad>
+    }
+    else if (base == 0) {
+  800602:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800606:	75 07                	jne    80060f <strtol+0xad>
+        base = 10;
+  800608:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  80060f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800612:	0f b6 00             	movzbl (%eax),%eax
+  800615:	3c 2f                	cmp    $0x2f,%al
+  800617:	7e 1b                	jle    800634 <strtol+0xd2>
+  800619:	8b 45 08             	mov    0x8(%ebp),%eax
+  80061c:	0f b6 00             	movzbl (%eax),%eax
+  80061f:	3c 39                	cmp    $0x39,%al
+  800621:	7f 11                	jg     800634 <strtol+0xd2>
+            dig = *s - '0';
+  800623:	8b 45 08             	mov    0x8(%ebp),%eax
+  800626:	0f b6 00             	movzbl (%eax),%eax
+  800629:	0f be c0             	movsbl %al,%eax
+  80062c:	83 e8 30             	sub    $0x30,%eax
+  80062f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800632:	eb 48                	jmp    80067c <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800634:	8b 45 08             	mov    0x8(%ebp),%eax
+  800637:	0f b6 00             	movzbl (%eax),%eax
+  80063a:	3c 60                	cmp    $0x60,%al
+  80063c:	7e 1b                	jle    800659 <strtol+0xf7>
+  80063e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800641:	0f b6 00             	movzbl (%eax),%eax
+  800644:	3c 7a                	cmp    $0x7a,%al
+  800646:	7f 11                	jg     800659 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800648:	8b 45 08             	mov    0x8(%ebp),%eax
+  80064b:	0f b6 00             	movzbl (%eax),%eax
+  80064e:	0f be c0             	movsbl %al,%eax
+  800651:	83 e8 57             	sub    $0x57,%eax
+  800654:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800657:	eb 23                	jmp    80067c <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800659:	8b 45 08             	mov    0x8(%ebp),%eax
+  80065c:	0f b6 00             	movzbl (%eax),%eax
+  80065f:	3c 40                	cmp    $0x40,%al
+  800661:	7e 3c                	jle    80069f <strtol+0x13d>
+  800663:	8b 45 08             	mov    0x8(%ebp),%eax
+  800666:	0f b6 00             	movzbl (%eax),%eax
+  800669:	3c 5a                	cmp    $0x5a,%al
+  80066b:	7f 32                	jg     80069f <strtol+0x13d>
+            dig = *s - 'A' + 10;
+  80066d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800670:	0f b6 00             	movzbl (%eax),%eax
+  800673:	0f be c0             	movsbl %al,%eax
+  800676:	83 e8 37             	sub    $0x37,%eax
+  800679:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  80067c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80067f:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800682:	7d 1a                	jge    80069e <strtol+0x13c>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  800684:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800688:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80068b:	0f af 45 10          	imul   0x10(%ebp),%eax
+  80068f:	89 c2                	mov    %eax,%edx
+  800691:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800694:	01 d0                	add    %edx,%eax
+  800696:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800699:	e9 71 ff ff ff       	jmp    80060f <strtol+0xad>
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+            break;
+  80069e:	90                   	nop
+        }
+        s ++, val = (val * base) + dig;
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  80069f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8006a3:	74 08                	je     8006ad <strtol+0x14b>
+        *endptr = (char *) s;
+  8006a5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006a8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006ab:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  8006ad:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  8006b1:	74 07                	je     8006ba <strtol+0x158>
+  8006b3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006b6:	f7 d8                	neg    %eax
+  8006b8:	eb 03                	jmp    8006bd <strtol+0x15b>
+  8006ba:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  8006bd:	c9                   	leave  
+  8006be:	c3                   	ret    
+
+008006bf <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  8006bf:	55                   	push   %ebp
+  8006c0:	89 e5                	mov    %esp,%ebp
+  8006c2:	57                   	push   %edi
+  8006c3:	83 ec 24             	sub    $0x24,%esp
+  8006c6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006c9:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006cc:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006d0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006d3:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006d6:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006d9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006df:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006e2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006e6:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006e9:	89 d7                	mov    %edx,%edi
+  8006eb:	f3 aa                	rep stos %al,%es:(%edi)
+  8006ed:	89 fa                	mov    %edi,%edx
+  8006ef:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8006f2:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  8006f5:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006f8:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  8006f9:	83 c4 24             	add    $0x24,%esp
+  8006fc:	5f                   	pop    %edi
+  8006fd:	5d                   	pop    %ebp
+  8006fe:	c3                   	ret    
+
+008006ff <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  8006ff:	55                   	push   %ebp
+  800700:	89 e5                	mov    %esp,%ebp
+  800702:	57                   	push   %edi
+  800703:	56                   	push   %esi
+  800704:	53                   	push   %ebx
+  800705:	83 ec 30             	sub    $0x30,%esp
+  800708:	8b 45 08             	mov    0x8(%ebp),%eax
+  80070b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80070e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800711:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800714:	8b 45 10             	mov    0x10(%ebp),%eax
+  800717:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  80071a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80071d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800720:	73 42                	jae    800764 <memmove+0x65>
+  800722:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800725:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800728:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80072b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80072e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800731:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800734:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800737:	c1 e8 02             	shr    $0x2,%eax
+  80073a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  80073c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  80073f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800742:	89 d7                	mov    %edx,%edi
+  800744:	89 c6                	mov    %eax,%esi
+  800746:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800748:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  80074b:	83 e1 03             	and    $0x3,%ecx
+  80074e:	74 02                	je     800752 <memmove+0x53>
+  800750:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800752:	89 f0                	mov    %esi,%eax
+  800754:	89 fa                	mov    %edi,%edx
+  800756:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800759:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  80075c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  80075f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  800762:	eb 36                	jmp    80079a <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800764:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800767:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80076a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80076d:	01 c2                	add    %eax,%edx
+  80076f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800772:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800775:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800778:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  80077b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80077e:	89 c1                	mov    %eax,%ecx
+  800780:	89 d8                	mov    %ebx,%eax
+  800782:	89 d6                	mov    %edx,%esi
+  800784:	89 c7                	mov    %eax,%edi
+  800786:	fd                   	std    
+  800787:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800789:	fc                   	cld    
+  80078a:	89 f8                	mov    %edi,%eax
+  80078c:	89 f2                	mov    %esi,%edx
+  80078e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800791:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800794:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800797:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  80079a:	83 c4 30             	add    $0x30,%esp
+  80079d:	5b                   	pop    %ebx
+  80079e:	5e                   	pop    %esi
+  80079f:	5f                   	pop    %edi
+  8007a0:	5d                   	pop    %ebp
+  8007a1:	c3                   	ret    
+
+008007a2 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  8007a2:	55                   	push   %ebp
+  8007a3:	89 e5                	mov    %esp,%ebp
+  8007a5:	57                   	push   %edi
+  8007a6:	56                   	push   %esi
+  8007a7:	83 ec 20             	sub    $0x20,%esp
+  8007aa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8007b0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007b6:	8b 45 10             	mov    0x10(%ebp),%eax
+  8007b9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  8007bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8007bf:	c1 e8 02             	shr    $0x2,%eax
+  8007c2:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  8007c4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007ca:	89 d7                	mov    %edx,%edi
+  8007cc:	89 c6                	mov    %eax,%esi
+  8007ce:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007d0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007d3:	83 e1 03             	and    $0x3,%ecx
+  8007d6:	74 02                	je     8007da <memcpy+0x38>
+  8007d8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007da:	89 f0                	mov    %esi,%eax
+  8007dc:	89 fa                	mov    %edi,%edx
+  8007de:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007e1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007e4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  8007e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007ea:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007eb:	83 c4 20             	add    $0x20,%esp
+  8007ee:	5e                   	pop    %esi
+  8007ef:	5f                   	pop    %edi
+  8007f0:	5d                   	pop    %ebp
+  8007f1:	c3                   	ret    
+
+008007f2 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  8007f2:	55                   	push   %ebp
+  8007f3:	89 e5                	mov    %esp,%ebp
+  8007f5:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  8007f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007fb:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  8007fe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800801:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800804:	eb 30                	jmp    800836 <memcmp+0x44>
+        if (*s1 != *s2) {
+  800806:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800809:	0f b6 10             	movzbl (%eax),%edx
+  80080c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80080f:	0f b6 00             	movzbl (%eax),%eax
+  800812:	38 c2                	cmp    %al,%dl
+  800814:	74 18                	je     80082e <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800816:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800819:	0f b6 00             	movzbl (%eax),%eax
+  80081c:	0f b6 d0             	movzbl %al,%edx
+  80081f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800822:	0f b6 00             	movzbl (%eax),%eax
+  800825:	0f b6 c0             	movzbl %al,%eax
+  800828:	29 c2                	sub    %eax,%edx
+  80082a:	89 d0                	mov    %edx,%eax
+  80082c:	eb 1a                	jmp    800848 <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  80082e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800832:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800836:	8b 45 10             	mov    0x10(%ebp),%eax
+  800839:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80083c:	89 55 10             	mov    %edx,0x10(%ebp)
+  80083f:	85 c0                	test   %eax,%eax
+  800841:	75 c3                	jne    800806 <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800843:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800848:	c9                   	leave  
+  800849:	c3                   	ret    
+
+0080084a <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  80084a:	55                   	push   %ebp
+  80084b:	89 e5                	mov    %esp,%ebp
+  80084d:	83 ec 38             	sub    $0x38,%esp
+  800850:	8b 45 10             	mov    0x10(%ebp),%eax
+  800853:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800856:	8b 45 14             	mov    0x14(%ebp),%eax
+  800859:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80085c:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  80085f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800862:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800865:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800868:	8b 45 18             	mov    0x18(%ebp),%eax
+  80086b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  80086e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800871:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800874:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800877:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  80087a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80087d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800880:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800884:	74 1c                	je     8008a2 <printnum+0x58>
+  800886:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800889:	ba 00 00 00 00       	mov    $0x0,%edx
+  80088e:	f7 75 e4             	divl   -0x1c(%ebp)
+  800891:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800894:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800897:	ba 00 00 00 00       	mov    $0x0,%edx
+  80089c:	f7 75 e4             	divl   -0x1c(%ebp)
+  80089f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008a2:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008a8:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008ab:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8008ae:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8008b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008b4:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8008b7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8008ba:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8008bd:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8008c0:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8008c3:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008c6:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008cb:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008ce:	77 41                	ja     800911 <printnum+0xc7>
+  8008d0:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008d3:	72 05                	jb     8008da <printnum+0x90>
+  8008d5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  8008d8:	77 37                	ja     800911 <printnum+0xc7>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008da:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008dd:	83 e8 01             	sub    $0x1,%eax
+  8008e0:	83 ec 04             	sub    $0x4,%esp
+  8008e3:	ff 75 20             	pushl  0x20(%ebp)
+  8008e6:	50                   	push   %eax
+  8008e7:	ff 75 18             	pushl  0x18(%ebp)
+  8008ea:	ff 75 ec             	pushl  -0x14(%ebp)
+  8008ed:	ff 75 e8             	pushl  -0x18(%ebp)
+  8008f0:	ff 75 0c             	pushl  0xc(%ebp)
+  8008f3:	ff 75 08             	pushl  0x8(%ebp)
+  8008f6:	e8 4f ff ff ff       	call   80084a <printnum>
+  8008fb:	83 c4 20             	add    $0x20,%esp
+  8008fe:	eb 1b                	jmp    80091b <printnum+0xd1>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800900:	83 ec 08             	sub    $0x8,%esp
+  800903:	ff 75 0c             	pushl  0xc(%ebp)
+  800906:	ff 75 20             	pushl  0x20(%ebp)
+  800909:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090c:	ff d0                	call   *%eax
+  80090e:	83 c4 10             	add    $0x10,%esp
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  800911:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  800915:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  800919:	7f e5                	jg     800900 <printnum+0xb6>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  80091b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  80091e:	05 64 11 80 00       	add    $0x801164,%eax
+  800923:	0f b6 00             	movzbl (%eax),%eax
+  800926:	0f be c0             	movsbl %al,%eax
+  800929:	83 ec 08             	sub    $0x8,%esp
+  80092c:	ff 75 0c             	pushl  0xc(%ebp)
+  80092f:	50                   	push   %eax
+  800930:	8b 45 08             	mov    0x8(%ebp),%eax
+  800933:	ff d0                	call   *%eax
+  800935:	83 c4 10             	add    $0x10,%esp
+}
+  800938:	90                   	nop
+  800939:	c9                   	leave  
+  80093a:	c3                   	ret    
+
+0080093b <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  80093b:	55                   	push   %ebp
+  80093c:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  80093e:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800942:	7e 14                	jle    800958 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  800944:	8b 45 08             	mov    0x8(%ebp),%eax
+  800947:	8b 00                	mov    (%eax),%eax
+  800949:	8d 48 08             	lea    0x8(%eax),%ecx
+  80094c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80094f:	89 0a                	mov    %ecx,(%edx)
+  800951:	8b 50 04             	mov    0x4(%eax),%edx
+  800954:	8b 00                	mov    (%eax),%eax
+  800956:	eb 30                	jmp    800988 <getuint+0x4d>
+    }
+    else if (lflag) {
+  800958:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80095c:	74 16                	je     800974 <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  80095e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800961:	8b 00                	mov    (%eax),%eax
+  800963:	8d 48 04             	lea    0x4(%eax),%ecx
+  800966:	8b 55 08             	mov    0x8(%ebp),%edx
+  800969:	89 0a                	mov    %ecx,(%edx)
+  80096b:	8b 00                	mov    (%eax),%eax
+  80096d:	ba 00 00 00 00       	mov    $0x0,%edx
+  800972:	eb 14                	jmp    800988 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  800974:	8b 45 08             	mov    0x8(%ebp),%eax
+  800977:	8b 00                	mov    (%eax),%eax
+  800979:	8d 48 04             	lea    0x4(%eax),%ecx
+  80097c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80097f:	89 0a                	mov    %ecx,(%edx)
+  800981:	8b 00                	mov    (%eax),%eax
+  800983:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800988:	5d                   	pop    %ebp
+  800989:	c3                   	ret    
+
+0080098a <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  80098a:	55                   	push   %ebp
+  80098b:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  80098d:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800991:	7e 14                	jle    8009a7 <getint+0x1d>
+        return va_arg(*ap, long long);
+  800993:	8b 45 08             	mov    0x8(%ebp),%eax
+  800996:	8b 00                	mov    (%eax),%eax
+  800998:	8d 48 08             	lea    0x8(%eax),%ecx
+  80099b:	8b 55 08             	mov    0x8(%ebp),%edx
+  80099e:	89 0a                	mov    %ecx,(%edx)
+  8009a0:	8b 50 04             	mov    0x4(%eax),%edx
+  8009a3:	8b 00                	mov    (%eax),%eax
+  8009a5:	eb 28                	jmp    8009cf <getint+0x45>
+    }
+    else if (lflag) {
+  8009a7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8009ab:	74 12                	je     8009bf <getint+0x35>
+        return va_arg(*ap, long);
+  8009ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b0:	8b 00                	mov    (%eax),%eax
+  8009b2:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009b5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009b8:	89 0a                	mov    %ecx,(%edx)
+  8009ba:	8b 00                	mov    (%eax),%eax
+  8009bc:	99                   	cltd   
+  8009bd:	eb 10                	jmp    8009cf <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  8009bf:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009c2:	8b 00                	mov    (%eax),%eax
+  8009c4:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009c7:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009ca:	89 0a                	mov    %ecx,(%edx)
+  8009cc:	8b 00                	mov    (%eax),%eax
+  8009ce:	99                   	cltd   
+    }
+}
+  8009cf:	5d                   	pop    %ebp
+  8009d0:	c3                   	ret    
+
+008009d1 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009d1:	55                   	push   %ebp
+  8009d2:	89 e5                	mov    %esp,%ebp
+  8009d4:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009d7:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009da:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8009e0:	50                   	push   %eax
+  8009e1:	ff 75 10             	pushl  0x10(%ebp)
+  8009e4:	ff 75 0c             	pushl  0xc(%ebp)
+  8009e7:	ff 75 08             	pushl  0x8(%ebp)
+  8009ea:	e8 06 00 00 00       	call   8009f5 <vprintfmt>
+  8009ef:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8009f2:	90                   	nop
+  8009f3:	c9                   	leave  
+  8009f4:	c3                   	ret    
+
+008009f5 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8009f5:	55                   	push   %ebp
+  8009f6:	89 e5                	mov    %esp,%ebp
+  8009f8:	56                   	push   %esi
+  8009f9:	53                   	push   %ebx
+  8009fa:	83 ec 20             	sub    $0x20,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009fd:	eb 17                	jmp    800a16 <vprintfmt+0x21>
+            if (ch == '\0') {
+  8009ff:	85 db                	test   %ebx,%ebx
+  800a01:	0f 84 8e 03 00 00    	je     800d95 <vprintfmt+0x3a0>
+                return;
+            }
+            putch(ch, putdat);
+  800a07:	83 ec 08             	sub    $0x8,%esp
+  800a0a:	ff 75 0c             	pushl  0xc(%ebp)
+  800a0d:	53                   	push   %ebx
+  800a0e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a11:	ff d0                	call   *%eax
+  800a13:	83 c4 10             	add    $0x10,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a16:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a19:	8d 50 01             	lea    0x1(%eax),%edx
+  800a1c:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a1f:	0f b6 00             	movzbl (%eax),%eax
+  800a22:	0f b6 d8             	movzbl %al,%ebx
+  800a25:	83 fb 25             	cmp    $0x25,%ebx
+  800a28:	75 d5                	jne    8009ff <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a2a:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a2e:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a38:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a3b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a42:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a45:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a48:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a4b:	8d 50 01             	lea    0x1(%eax),%edx
+  800a4e:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a51:	0f b6 00             	movzbl (%eax),%eax
+  800a54:	0f b6 d8             	movzbl %al,%ebx
+  800a57:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a5a:	83 f8 55             	cmp    $0x55,%eax
+  800a5d:	0f 87 05 03 00 00    	ja     800d68 <vprintfmt+0x373>
+  800a63:	8b 04 85 88 11 80 00 	mov    0x801188(,%eax,4),%eax
+  800a6a:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a6c:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a70:	eb d6                	jmp    800a48 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a72:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800a76:	eb d0                	jmp    800a48 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a78:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800a7f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a82:	89 d0                	mov    %edx,%eax
+  800a84:	c1 e0 02             	shl    $0x2,%eax
+  800a87:	01 d0                	add    %edx,%eax
+  800a89:	01 c0                	add    %eax,%eax
+  800a8b:	01 d8                	add    %ebx,%eax
+  800a8d:	83 e8 30             	sub    $0x30,%eax
+  800a90:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800a93:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a96:	0f b6 00             	movzbl (%eax),%eax
+  800a99:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800a9c:	83 fb 2f             	cmp    $0x2f,%ebx
+  800a9f:	7e 39                	jle    800ada <vprintfmt+0xe5>
+  800aa1:	83 fb 39             	cmp    $0x39,%ebx
+  800aa4:	7f 34                	jg     800ada <vprintfmt+0xe5>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800aa6:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  800aaa:	eb d3                	jmp    800a7f <vprintfmt+0x8a>
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800aac:	8b 45 14             	mov    0x14(%ebp),%eax
+  800aaf:	8d 50 04             	lea    0x4(%eax),%edx
+  800ab2:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ab5:	8b 00                	mov    (%eax),%eax
+  800ab7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800aba:	eb 1f                	jmp    800adb <vprintfmt+0xe6>
+
+        case '.':
+            if (width < 0)
+  800abc:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ac0:	79 86                	jns    800a48 <vprintfmt+0x53>
+                width = 0;
+  800ac2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800ac9:	e9 7a ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800ace:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800ad5:	e9 6e ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+            goto process_precision;
+  800ada:	90                   	nop
+        case '#':
+            altflag = 1;
+            goto reswitch;
+
+        process_precision:
+            if (width < 0)
+  800adb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800adf:	0f 89 63 ff ff ff    	jns    800a48 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800ae5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ae8:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800aeb:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800af2:	e9 51 ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800af7:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800afb:	e9 48 ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800b00:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b03:	8d 50 04             	lea    0x4(%eax),%edx
+  800b06:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b09:	8b 00                	mov    (%eax),%eax
+  800b0b:	83 ec 08             	sub    $0x8,%esp
+  800b0e:	ff 75 0c             	pushl  0xc(%ebp)
+  800b11:	50                   	push   %eax
+  800b12:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b15:	ff d0                	call   *%eax
+  800b17:	83 c4 10             	add    $0x10,%esp
+            break;
+  800b1a:	e9 71 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800b1f:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b22:	8d 50 04             	lea    0x4(%eax),%edx
+  800b25:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b28:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b2a:	85 db                	test   %ebx,%ebx
+  800b2c:	79 02                	jns    800b30 <vprintfmt+0x13b>
+                err = -err;
+  800b2e:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b30:	83 fb 18             	cmp    $0x18,%ebx
+  800b33:	7f 0b                	jg     800b40 <vprintfmt+0x14b>
+  800b35:	8b 34 9d 00 11 80 00 	mov    0x801100(,%ebx,4),%esi
+  800b3c:	85 f6                	test   %esi,%esi
+  800b3e:	75 19                	jne    800b59 <vprintfmt+0x164>
+                printfmt(putch, putdat, "error %d", err);
+  800b40:	53                   	push   %ebx
+  800b41:	68 75 11 80 00       	push   $0x801175
+  800b46:	ff 75 0c             	pushl  0xc(%ebp)
+  800b49:	ff 75 08             	pushl  0x8(%ebp)
+  800b4c:	e8 80 fe ff ff       	call   8009d1 <printfmt>
+  800b51:	83 c4 10             	add    $0x10,%esp
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b54:	e9 37 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  800b59:	56                   	push   %esi
+  800b5a:	68 7e 11 80 00       	push   $0x80117e
+  800b5f:	ff 75 0c             	pushl  0xc(%ebp)
+  800b62:	ff 75 08             	pushl  0x8(%ebp)
+  800b65:	e8 67 fe ff ff       	call   8009d1 <printfmt>
+  800b6a:	83 c4 10             	add    $0x10,%esp
+            }
+            break;
+  800b6d:	e9 1e 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800b72:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b75:	8d 50 04             	lea    0x4(%eax),%edx
+  800b78:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b7b:	8b 30                	mov    (%eax),%esi
+  800b7d:	85 f6                	test   %esi,%esi
+  800b7f:	75 05                	jne    800b86 <vprintfmt+0x191>
+                p = "(null)";
+  800b81:	be 81 11 80 00       	mov    $0x801181,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800b86:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b8a:	7e 76                	jle    800c02 <vprintfmt+0x20d>
+  800b8c:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800b90:	74 70                	je     800c02 <vprintfmt+0x20d>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b92:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b95:	83 ec 08             	sub    $0x8,%esp
+  800b98:	50                   	push   %eax
+  800b99:	56                   	push   %esi
+  800b9a:	e8 17 f8 ff ff       	call   8003b6 <strnlen>
+  800b9f:	83 c4 10             	add    $0x10,%esp
+  800ba2:	89 c2                	mov    %eax,%edx
+  800ba4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ba7:	29 d0                	sub    %edx,%eax
+  800ba9:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800bac:	eb 17                	jmp    800bc5 <vprintfmt+0x1d0>
+                    putch(padc, putdat);
+  800bae:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800bb2:	83 ec 08             	sub    $0x8,%esp
+  800bb5:	ff 75 0c             	pushl  0xc(%ebp)
+  800bb8:	50                   	push   %eax
+  800bb9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bbc:	ff d0                	call   *%eax
+  800bbe:	83 c4 10             	add    $0x10,%esp
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bc1:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800bc5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800bc9:	7f e3                	jg     800bae <vprintfmt+0x1b9>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bcb:	eb 35                	jmp    800c02 <vprintfmt+0x20d>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800bcd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800bd1:	74 1c                	je     800bef <vprintfmt+0x1fa>
+  800bd3:	83 fb 1f             	cmp    $0x1f,%ebx
+  800bd6:	7e 05                	jle    800bdd <vprintfmt+0x1e8>
+  800bd8:	83 fb 7e             	cmp    $0x7e,%ebx
+  800bdb:	7e 12                	jle    800bef <vprintfmt+0x1fa>
+                    putch('?', putdat);
+  800bdd:	83 ec 08             	sub    $0x8,%esp
+  800be0:	ff 75 0c             	pushl  0xc(%ebp)
+  800be3:	6a 3f                	push   $0x3f
+  800be5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800be8:	ff d0                	call   *%eax
+  800bea:	83 c4 10             	add    $0x10,%esp
+  800bed:	eb 0f                	jmp    800bfe <vprintfmt+0x209>
+                }
+                else {
+                    putch(ch, putdat);
+  800bef:	83 ec 08             	sub    $0x8,%esp
+  800bf2:	ff 75 0c             	pushl  0xc(%ebp)
+  800bf5:	53                   	push   %ebx
+  800bf6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bf9:	ff d0                	call   *%eax
+  800bfb:	83 c4 10             	add    $0x10,%esp
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bfe:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c02:	89 f0                	mov    %esi,%eax
+  800c04:	8d 70 01             	lea    0x1(%eax),%esi
+  800c07:	0f b6 00             	movzbl (%eax),%eax
+  800c0a:	0f be d8             	movsbl %al,%ebx
+  800c0d:	85 db                	test   %ebx,%ebx
+  800c0f:	74 26                	je     800c37 <vprintfmt+0x242>
+  800c11:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c15:	78 b6                	js     800bcd <vprintfmt+0x1d8>
+  800c17:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  800c1b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c1f:	79 ac                	jns    800bcd <vprintfmt+0x1d8>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c21:	eb 14                	jmp    800c37 <vprintfmt+0x242>
+                putch(' ', putdat);
+  800c23:	83 ec 08             	sub    $0x8,%esp
+  800c26:	ff 75 0c             	pushl  0xc(%ebp)
+  800c29:	6a 20                	push   $0x20
+  800c2b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2e:	ff d0                	call   *%eax
+  800c30:	83 c4 10             	add    $0x10,%esp
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c33:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c37:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c3b:	7f e6                	jg     800c23 <vprintfmt+0x22e>
+                putch(' ', putdat);
+            }
+            break;
+  800c3d:	e9 4e 01 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c42:	83 ec 08             	sub    $0x8,%esp
+  800c45:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c48:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c4b:	50                   	push   %eax
+  800c4c:	e8 39 fd ff ff       	call   80098a <getint>
+  800c51:	83 c4 10             	add    $0x10,%esp
+  800c54:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c57:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c5d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c60:	85 d2                	test   %edx,%edx
+  800c62:	79 23                	jns    800c87 <vprintfmt+0x292>
+                putch('-', putdat);
+  800c64:	83 ec 08             	sub    $0x8,%esp
+  800c67:	ff 75 0c             	pushl  0xc(%ebp)
+  800c6a:	6a 2d                	push   $0x2d
+  800c6c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c6f:	ff d0                	call   *%eax
+  800c71:	83 c4 10             	add    $0x10,%esp
+                num = -(long long)num;
+  800c74:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c77:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c7a:	f7 d8                	neg    %eax
+  800c7c:	83 d2 00             	adc    $0x0,%edx
+  800c7f:	f7 da                	neg    %edx
+  800c81:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c84:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800c87:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c8e:	e9 9f 00 00 00       	jmp    800d32 <vprintfmt+0x33d>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800c93:	83 ec 08             	sub    $0x8,%esp
+  800c96:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c99:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c9c:	50                   	push   %eax
+  800c9d:	e8 99 fc ff ff       	call   80093b <getuint>
+  800ca2:	83 c4 10             	add    $0x10,%esp
+  800ca5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ca8:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800cab:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cb2:	eb 7e                	jmp    800d32 <vprintfmt+0x33d>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800cb4:	83 ec 08             	sub    $0x8,%esp
+  800cb7:	ff 75 e0             	pushl  -0x20(%ebp)
+  800cba:	8d 45 14             	lea    0x14(%ebp),%eax
+  800cbd:	50                   	push   %eax
+  800cbe:	e8 78 fc ff ff       	call   80093b <getuint>
+  800cc3:	83 c4 10             	add    $0x10,%esp
+  800cc6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cc9:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800ccc:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800cd3:	eb 5d                	jmp    800d32 <vprintfmt+0x33d>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800cd5:	83 ec 08             	sub    $0x8,%esp
+  800cd8:	ff 75 0c             	pushl  0xc(%ebp)
+  800cdb:	6a 30                	push   $0x30
+  800cdd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ce0:	ff d0                	call   *%eax
+  800ce2:	83 c4 10             	add    $0x10,%esp
+            putch('x', putdat);
+  800ce5:	83 ec 08             	sub    $0x8,%esp
+  800ce8:	ff 75 0c             	pushl  0xc(%ebp)
+  800ceb:	6a 78                	push   $0x78
+  800ced:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cf0:	ff d0                	call   *%eax
+  800cf2:	83 c4 10             	add    $0x10,%esp
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800cf5:	8b 45 14             	mov    0x14(%ebp),%eax
+  800cf8:	8d 50 04             	lea    0x4(%eax),%edx
+  800cfb:	89 55 14             	mov    %edx,0x14(%ebp)
+  800cfe:	8b 00                	mov    (%eax),%eax
+  800d00:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d03:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800d0a:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800d11:	eb 1f                	jmp    800d32 <vprintfmt+0x33d>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800d13:	83 ec 08             	sub    $0x8,%esp
+  800d16:	ff 75 e0             	pushl  -0x20(%ebp)
+  800d19:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d1c:	50                   	push   %eax
+  800d1d:	e8 19 fc ff ff       	call   80093b <getuint>
+  800d22:	83 c4 10             	add    $0x10,%esp
+  800d25:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d28:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d2b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d32:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d36:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d39:	83 ec 04             	sub    $0x4,%esp
+  800d3c:	52                   	push   %edx
+  800d3d:	ff 75 e8             	pushl  -0x18(%ebp)
+  800d40:	50                   	push   %eax
+  800d41:	ff 75 f4             	pushl  -0xc(%ebp)
+  800d44:	ff 75 f0             	pushl  -0x10(%ebp)
+  800d47:	ff 75 0c             	pushl  0xc(%ebp)
+  800d4a:	ff 75 08             	pushl  0x8(%ebp)
+  800d4d:	e8 f8 fa ff ff       	call   80084a <printnum>
+  800d52:	83 c4 20             	add    $0x20,%esp
+            break;
+  800d55:	eb 39                	jmp    800d90 <vprintfmt+0x39b>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800d57:	83 ec 08             	sub    $0x8,%esp
+  800d5a:	ff 75 0c             	pushl  0xc(%ebp)
+  800d5d:	53                   	push   %ebx
+  800d5e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d61:	ff d0                	call   *%eax
+  800d63:	83 c4 10             	add    $0x10,%esp
+            break;
+  800d66:	eb 28                	jmp    800d90 <vprintfmt+0x39b>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800d68:	83 ec 08             	sub    $0x8,%esp
+  800d6b:	ff 75 0c             	pushl  0xc(%ebp)
+  800d6e:	6a 25                	push   $0x25
+  800d70:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d73:	ff d0                	call   *%eax
+  800d75:	83 c4 10             	add    $0x10,%esp
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800d78:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d7c:	eb 04                	jmp    800d82 <vprintfmt+0x38d>
+  800d7e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d82:	8b 45 10             	mov    0x10(%ebp),%eax
+  800d85:	83 e8 01             	sub    $0x1,%eax
+  800d88:	0f b6 00             	movzbl (%eax),%eax
+  800d8b:	3c 25                	cmp    $0x25,%al
+  800d8d:	75 ef                	jne    800d7e <vprintfmt+0x389>
+                /* do nothing */;
+            break;
+  800d8f:	90                   	nop
+        }
+    }
+  800d90:	e9 68 fc ff ff       	jmp    8009fd <vprintfmt+0x8>
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+            if (ch == '\0') {
+                return;
+  800d95:	90                   	nop
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  800d96:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  800d99:	5b                   	pop    %ebx
+  800d9a:	5e                   	pop    %esi
+  800d9b:	5d                   	pop    %ebp
+  800d9c:	c3                   	ret    
+
+00800d9d <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800d9d:	55                   	push   %ebp
+  800d9e:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800da0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800da3:	8b 40 08             	mov    0x8(%eax),%eax
+  800da6:	8d 50 01             	lea    0x1(%eax),%edx
+  800da9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dac:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800daf:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db2:	8b 10                	mov    (%eax),%edx
+  800db4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db7:	8b 40 04             	mov    0x4(%eax),%eax
+  800dba:	39 c2                	cmp    %eax,%edx
+  800dbc:	73 12                	jae    800dd0 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800dbe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dc1:	8b 00                	mov    (%eax),%eax
+  800dc3:	8d 48 01             	lea    0x1(%eax),%ecx
+  800dc6:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800dc9:	89 0a                	mov    %ecx,(%edx)
+  800dcb:	8b 55 08             	mov    0x8(%ebp),%edx
+  800dce:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800dd0:	90                   	nop
+  800dd1:	5d                   	pop    %ebp
+  800dd2:	c3                   	ret    
+
+00800dd3 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800dd3:	55                   	push   %ebp
+  800dd4:	89 e5                	mov    %esp,%ebp
+  800dd6:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800dd9:	8d 45 14             	lea    0x14(%ebp),%eax
+  800ddc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800ddf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800de2:	50                   	push   %eax
+  800de3:	ff 75 10             	pushl  0x10(%ebp)
+  800de6:	ff 75 0c             	pushl  0xc(%ebp)
+  800de9:	ff 75 08             	pushl  0x8(%ebp)
+  800dec:	e8 0b 00 00 00       	call   800dfc <vsnprintf>
+  800df1:	83 c4 10             	add    $0x10,%esp
+  800df4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800df7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800dfa:	c9                   	leave  
+  800dfb:	c3                   	ret    
+
+00800dfc <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800dfc:	55                   	push   %ebp
+  800dfd:	89 e5                	mov    %esp,%ebp
+  800dff:	83 ec 18             	sub    $0x18,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800e02:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e05:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e08:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e0b:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800e0e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e11:	01 d0                	add    %edx,%eax
+  800e13:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e16:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800e1d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800e21:	74 0a                	je     800e2d <vsnprintf+0x31>
+  800e23:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800e26:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e29:	39 c2                	cmp    %eax,%edx
+  800e2b:	76 07                	jbe    800e34 <vsnprintf+0x38>
+        return -E_INVAL;
+  800e2d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e32:	eb 20                	jmp    800e54 <vsnprintf+0x58>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e34:	ff 75 14             	pushl  0x14(%ebp)
+  800e37:	ff 75 10             	pushl  0x10(%ebp)
+  800e3a:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800e3d:	50                   	push   %eax
+  800e3e:	68 9d 0d 80 00       	push   $0x800d9d
+  800e43:	e8 ad fb ff ff       	call   8009f5 <vprintfmt>
+  800e48:	83 c4 10             	add    $0x10,%esp
+    // null terminate the buffer
+    *b.buf = '\0';
+  800e4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e4e:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800e51:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e54:	c9                   	leave  
+  800e55:	c3                   	ret    
+
+00800e56 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800e56:	55                   	push   %ebp
+  800e57:	89 e5                	mov    %esp,%ebp
+  800e59:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800e5c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e5f:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800e65:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800e68:	b8 20 00 00 00       	mov    $0x20,%eax
+  800e6d:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800e70:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800e73:	89 c1                	mov    %eax,%ecx
+  800e75:	d3 ea                	shr    %cl,%edx
+  800e77:	89 d0                	mov    %edx,%eax
+}
+  800e79:	c9                   	leave  
+  800e7a:	c3                   	ret    
+
+00800e7b <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800e7b:	55                   	push   %ebp
+  800e7c:	89 e5                	mov    %esp,%ebp
+  800e7e:	57                   	push   %edi
+  800e7f:	56                   	push   %esi
+  800e80:	53                   	push   %ebx
+  800e81:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800e84:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e89:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800e8f:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800e95:	6b f0 05             	imul   $0x5,%eax,%esi
+  800e98:	01 fe                	add    %edi,%esi
+  800e9a:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800e9f:	f7 e7                	mul    %edi
+  800ea1:	01 d6                	add    %edx,%esi
+  800ea3:	89 f2                	mov    %esi,%edx
+  800ea5:	83 c0 0b             	add    $0xb,%eax
+  800ea8:	83 d2 00             	adc    $0x0,%edx
+  800eab:	89 c7                	mov    %eax,%edi
+  800ead:	83 e7 ff             	and    $0xffffffff,%edi
+  800eb0:	89 f9                	mov    %edi,%ecx
+  800eb2:	0f b7 da             	movzwl %dx,%ebx
+  800eb5:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800ebb:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800ec1:	a1 00 20 80 00       	mov    0x802000,%eax
+  800ec6:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ecc:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ed0:	c1 ea 0c             	shr    $0xc,%edx
+  800ed3:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ed6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800ed9:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ee0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ee3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ee6:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ee9:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800eec:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eef:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ef2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ef6:	74 1c                	je     800f14 <rand+0x99>
+  800ef8:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800efb:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f00:	f7 75 dc             	divl   -0x24(%ebp)
+  800f03:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800f06:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f09:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f0e:	f7 75 dc             	divl   -0x24(%ebp)
+  800f11:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800f14:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f17:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800f1a:	f7 75 dc             	divl   -0x24(%ebp)
+  800f1d:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f20:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f23:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f26:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800f29:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f2c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f2f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800f32:	83 c4 24             	add    $0x24,%esp
+  800f35:	5b                   	pop    %ebx
+  800f36:	5e                   	pop    %esi
+  800f37:	5f                   	pop    %edi
+  800f38:	5d                   	pop    %ebp
+  800f39:	c3                   	ret    
+
+00800f3a <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800f3a:	55                   	push   %ebp
+  800f3b:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800f3d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f40:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f45:	a3 00 20 80 00       	mov    %eax,0x802000
+  800f4a:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800f50:	90                   	nop
+  800f51:	5d                   	pop    %ebp
+  800f52:	c3                   	ret    
+
+00800f53 <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  800f53:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  800f57:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f5a:	ff 71 fc             	pushl  -0x4(%ecx)
+  800f5d:	55                   	push   %ebp
+  800f5e:	89 e5                	mov    %esp,%ebp
+  800f60:	51                   	push   %ecx
+  800f61:	83 ec 14             	sub    $0x14,%esp
+    int pid;
+    if ((pid = fork()) == 0) {
+  800f64:	e8 86 f2 ff ff       	call   8001ef <fork>
+  800f69:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800f6c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+  800f70:	75 1a                	jne    800f8c <main+0x39>
+        sleep(~0);
+  800f72:	83 ec 0c             	sub    $0xc,%esp
+  800f75:	6a ff                	push   $0xffffffff
+  800f77:	e8 13 f3 ff ff       	call   80028f <sleep>
+  800f7c:	83 c4 10             	add    $0x10,%esp
+        exit(0xdead);
+  800f7f:	83 ec 0c             	sub    $0xc,%esp
+  800f82:	68 ad de 00 00       	push   $0xdead
+  800f87:	e8 3d f2 ff ff       	call   8001c9 <exit>
+    }
+    assert(pid > 0);
+  800f8c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+  800f90:	7f 16                	jg     800fa8 <main+0x55>
+  800f92:	68 e0 12 80 00       	push   $0x8012e0
+  800f97:	68 e8 12 80 00       	push   $0x8012e8
+  800f9c:	6a 0b                	push   $0xb
+  800f9e:	68 fd 12 80 00       	push   $0x8012fd
+  800fa3:	e8 78 f0 ff ff       	call   800020 <__panic>
+
+    sleep(100);
+  800fa8:	83 ec 0c             	sub    $0xc,%esp
+  800fab:	6a 64                	push   $0x64
+  800fad:	e8 dd f2 ff ff       	call   80028f <sleep>
+  800fb2:	83 c4 10             	add    $0x10,%esp
+    assert(kill(pid) == 0);
+  800fb5:	83 ec 0c             	sub    $0xc,%esp
+  800fb8:	ff 75 f4             	pushl  -0xc(%ebp)
+  800fbb:	e8 7a f2 ff ff       	call   80023a <kill>
+  800fc0:	83 c4 10             	add    $0x10,%esp
+  800fc3:	85 c0                	test   %eax,%eax
+  800fc5:	74 16                	je     800fdd <main+0x8a>
+  800fc7:	68 0e 13 80 00       	push   $0x80130e
+  800fcc:	68 e8 12 80 00       	push   $0x8012e8
+  800fd1:	6a 0e                	push   $0xe
+  800fd3:	68 fd 12 80 00       	push   $0x8012fd
+  800fd8:	e8 43 f0 ff ff       	call   800020 <__panic>
+    cprintf("sleepkill pass.\n");
+  800fdd:	83 ec 0c             	sub    $0xc,%esp
+  800fe0:	68 1d 13 80 00       	push   $0x80131d
+  800fe5:	e8 17 f3 ff ff       	call   800301 <cprintf>
+  800fea:	83 c4 10             	add    $0x10,%esp
+    return 0;
+  800fed:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800ff2:	8b 4d fc             	mov    -0x4(%ebp),%ecx
+  800ff5:	c9                   	leave  
+  800ff6:	8d 61 fc             	lea    -0x4(%ecx),%esp
+  800ff9:	c3                   	ret    
diff -r -u -P lab7_original/obj/user/sleepkill.d lab7/obj/user/sleepkill.d
--- lab7_original/obj/user/sleepkill.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/sleepkill.d	2016-05-06 21:59:27.630123852 +0800
@@ -0,0 +1,2 @@
+obj/user/sleepkill.o obj/user/sleepkill.d: user/sleepkill.c libs/stdio.h \
+ libs/defs.h libs/stdarg.h user/libs/ulib.h
Binary files lab7_original/obj/user/sleepkill.o and lab7/obj/user/sleepkill.o differ
diff -r -u -P lab7_original/obj/user/sleepkill.sym lab7/obj/user/sleepkill.sym
--- lab7_original/obj/user/sleepkill.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/sleepkill.sym	2016-05-06 21:59:28.662161485 +0800
@@ -0,0 +1,78 @@
+00800020 .text
+00801000 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202d95 .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b5 syscall
+00000000 ulib.c
+00000000 stdio.c
+008002b4 cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+00801100 error_string
+0080084a printnum
+0080093b getuint
+0080098a getint
+00800d9d sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 sleepkill.c
+008003e6 strcpy
+0080022c yield
+00800213 waitpid
+00800141 sys_yield
+008006ff memmove
+00800dd3 snprintf
+008009f5 vprintfmt
+0080011d sys_fork
+00800301 cprintf
+00800250 getpid
+008007a2 memcpy
+0080028f sleep
+00800278 lab6_set_priority
+00800dfc vsnprintf
+00800375 umain
+00202d94 __STAB_END__
+00800150 sys_kill
+00202d95 __STABSTR_BEGIN__
+00800020 __panic
+008001b7 sys_sleep
+00800562 strtol
+008003b6 strnlen
+0080025d print_pgdir
+0080023a kill
+00800533 strfind
+008001fc wait
+008002a5 _start
+00800e7b rand
+008004aa strncmp
+00800171 sys_putc
+00800426 strncpy
+008007f2 memcmp
+008001ef fork
+008006bf memset
+00800f53 main
+00800f3a srand
+00800e56 hash32
+008009d1 printfmt
+00203bab __STABSTR_END__
+00800460 strcmp
+0080026b gettime_msec
+00800192 sys_gettime
+008002d8 vcprintf
+0080006e __warn
+00800327 cputs
+008001a1 sys_lab6_set_priority
+008001c9 exit
+0080012c sys_wait
+0080010b sys_exit
+00200010 __STAB_BEGIN__
+0080038e strlen
+00800183 sys_pgdir
+00800500 strchr
+00800162 sys_getpid
Binary files lab7_original/obj/user/sleep.o and lab7/obj/user/sleep.o differ
diff -r -u -P lab7_original/obj/user/sleep.sym lab7/obj/user/sleep.sym
--- lab7_original/obj/user/sleep.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/sleep.sym	2016-05-06 21:59:28.650161046 +0800
@@ -0,0 +1,79 @@
+00800020 .text
+00801060 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202e49 .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b5 syscall
+00000000 ulib.c
+00000000 stdio.c
+008002b4 cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+00801160 error_string
+0080084a printnum
+0080093b getuint
+0080098a getint
+00800d9d sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 sleep.c
+008003e6 strcpy
+0080022c yield
+00800213 waitpid
+00800141 sys_yield
+008006ff memmove
+00800dd3 snprintf
+008009f5 vprintfmt
+0080011d sys_fork
+00800301 cprintf
+00800250 getpid
+008007a2 memcpy
+00800f53 sleepy
+0080028f sleep
+00800278 lab6_set_priority
+00800dfc vsnprintf
+00800375 umain
+00202e48 __STAB_END__
+00800150 sys_kill
+00202e49 __STABSTR_BEGIN__
+00800020 __panic
+008001b7 sys_sleep
+00800562 strtol
+008003b6 strnlen
+0080025d print_pgdir
+0080023a kill
+00800533 strfind
+008001fc wait
+008002a5 _start
+00800e7b rand
+008004aa strncmp
+00800171 sys_putc
+00800426 strncpy
+008007f2 memcmp
+008001ef fork
+008006bf memset
+00800fa6 main
+00800f3a srand
+00800e56 hash32
+008009d1 printfmt
+00203c91 __STABSTR_END__
+00800460 strcmp
+0080026b gettime_msec
+00800192 sys_gettime
+008002d8 vcprintf
+0080006e __warn
+00800327 cputs
+008001a1 sys_lab6_set_priority
+008001c9 exit
+0080012c sys_wait
+0080010b sys_exit
+00200010 __STAB_BEGIN__
+0080038e strlen
+00800183 sys_pgdir
+00800500 strchr
+00800162 sys_getpid
diff -r -u -P lab7_original/obj/user/softint.asm lab7/obj/user/softint.asm
--- lab7_original/obj/user/softint.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/softint.asm	2016-05-06 21:59:28.614159729 +0800
@@ -0,0 +1,2609 @@
+
+obj/__user_softint.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 18             	sub    $0x18,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	83 ec 04             	sub    $0x4,%esp
+  80002f:	ff 75 0c             	pushl  0xc(%ebp)
+  800032:	ff 75 08             	pushl  0x8(%ebp)
+  800035:	68 80 0f 80 00       	push   $0x800f80
+  80003a:	e8 c2 02 00 00       	call   800301 <cprintf>
+  80003f:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800042:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800045:	83 ec 08             	sub    $0x8,%esp
+  800048:	50                   	push   %eax
+  800049:	ff 75 10             	pushl  0x10(%ebp)
+  80004c:	e8 87 02 00 00       	call   8002d8 <vcprintf>
+  800051:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  800054:	83 ec 0c             	sub    $0xc,%esp
+  800057:	68 9a 0f 80 00       	push   $0x800f9a
+  80005c:	e8 a0 02 00 00       	call   800301 <cprintf>
+  800061:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	83 ec 0c             	sub    $0xc,%esp
+  800067:	6a f6                	push   $0xfffffff6
+  800069:	e8 5b 01 00 00       	call   8001c9 <exit>
+
+0080006e <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80006e:	55                   	push   %ebp
+  80006f:	89 e5                	mov    %esp,%ebp
+  800071:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800074:	8d 45 14             	lea    0x14(%ebp),%eax
+  800077:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007a:	83 ec 04             	sub    $0x4,%esp
+  80007d:	ff 75 0c             	pushl  0xc(%ebp)
+  800080:	ff 75 08             	pushl  0x8(%ebp)
+  800083:	68 9c 0f 80 00       	push   $0x800f9c
+  800088:	e8 74 02 00 00       	call   800301 <cprintf>
+  80008d:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800090:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800093:	83 ec 08             	sub    $0x8,%esp
+  800096:	50                   	push   %eax
+  800097:	ff 75 10             	pushl  0x10(%ebp)
+  80009a:	e8 39 02 00 00       	call   8002d8 <vcprintf>
+  80009f:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  8000a2:	83 ec 0c             	sub    $0xc,%esp
+  8000a5:	68 9a 0f 80 00       	push   $0x800f9a
+  8000aa:	e8 52 02 00 00       	call   800301 <cprintf>
+  8000af:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8000b2:	90                   	nop
+  8000b3:	c9                   	leave  
+  8000b4:	c3                   	ret    
+
+008000b5 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b5:	55                   	push   %ebp
+  8000b6:	89 e5                	mov    %esp,%ebp
+  8000b8:	57                   	push   %edi
+  8000b9:	56                   	push   %esi
+  8000ba:	53                   	push   %ebx
+  8000bb:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000be:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cb:	eb 16                	jmp    8000e3 <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8000cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d0:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d3:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d6:	8b 10                	mov    (%eax),%edx
+  8000d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000db:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000df:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8000e3:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e7:	7e e4                	jle    8000cd <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000e9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ec:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000ef:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f2:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f5:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8000f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fb:	cd 80                	int    $0x80
+  8000fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  800100:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800103:	83 c4 20             	add    $0x20,%esp
+  800106:	5b                   	pop    %ebx
+  800107:	5e                   	pop    %esi
+  800108:	5f                   	pop    %edi
+  800109:	5d                   	pop    %ebp
+  80010a:	c3                   	ret    
+
+0080010b <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010b:	55                   	push   %ebp
+  80010c:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_exit, error_code);
+  80010e:	ff 75 08             	pushl  0x8(%ebp)
+  800111:	6a 01                	push   $0x1
+  800113:	e8 9d ff ff ff       	call   8000b5 <syscall>
+  800118:	83 c4 08             	add    $0x8,%esp
+}
+  80011b:	c9                   	leave  
+  80011c:	c3                   	ret    
+
+0080011d <sys_fork>:
+
+int
+sys_fork(void) {
+  80011d:	55                   	push   %ebp
+  80011e:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_fork);
+  800120:	6a 02                	push   $0x2
+  800122:	e8 8e ff ff ff       	call   8000b5 <syscall>
+  800127:	83 c4 04             	add    $0x4,%esp
+}
+  80012a:	c9                   	leave  
+  80012b:	c3                   	ret    
+
+0080012c <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80012c:	55                   	push   %ebp
+  80012d:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_wait, pid, store);
+  80012f:	ff 75 0c             	pushl  0xc(%ebp)
+  800132:	ff 75 08             	pushl  0x8(%ebp)
+  800135:	6a 03                	push   $0x3
+  800137:	e8 79 ff ff ff       	call   8000b5 <syscall>
+  80013c:	83 c4 0c             	add    $0xc,%esp
+}
+  80013f:	c9                   	leave  
+  800140:	c3                   	ret    
+
+00800141 <sys_yield>:
+
+int
+sys_yield(void) {
+  800141:	55                   	push   %ebp
+  800142:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_yield);
+  800144:	6a 0a                	push   $0xa
+  800146:	e8 6a ff ff ff       	call   8000b5 <syscall>
+  80014b:	83 c4 04             	add    $0x4,%esp
+}
+  80014e:	c9                   	leave  
+  80014f:	c3                   	ret    
+
+00800150 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800150:	55                   	push   %ebp
+  800151:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_kill, pid);
+  800153:	ff 75 08             	pushl  0x8(%ebp)
+  800156:	6a 0c                	push   $0xc
+  800158:	e8 58 ff ff ff       	call   8000b5 <syscall>
+  80015d:	83 c4 08             	add    $0x8,%esp
+}
+  800160:	c9                   	leave  
+  800161:	c3                   	ret    
+
+00800162 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800162:	55                   	push   %ebp
+  800163:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_getpid);
+  800165:	6a 12                	push   $0x12
+  800167:	e8 49 ff ff ff       	call   8000b5 <syscall>
+  80016c:	83 c4 04             	add    $0x4,%esp
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_putc, c);
+  800174:	ff 75 08             	pushl  0x8(%ebp)
+  800177:	6a 1e                	push   $0x1e
+  800179:	e8 37 ff ff ff       	call   8000b5 <syscall>
+  80017e:	83 c4 08             	add    $0x8,%esp
+}
+  800181:	c9                   	leave  
+  800182:	c3                   	ret    
+
+00800183 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800183:	55                   	push   %ebp
+  800184:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_pgdir);
+  800186:	6a 1f                	push   $0x1f
+  800188:	e8 28 ff ff ff       	call   8000b5 <syscall>
+  80018d:	83 c4 04             	add    $0x4,%esp
+}
+  800190:	c9                   	leave  
+  800191:	c3                   	ret    
+
+00800192 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  800192:	55                   	push   %ebp
+  800193:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_gettime);
+  800195:	6a 11                	push   $0x11
+  800197:	e8 19 ff ff ff       	call   8000b5 <syscall>
+  80019c:	83 c4 04             	add    $0x4,%esp
+}
+  80019f:	c9                   	leave  
+  8001a0:	c3                   	ret    
+
+008001a1 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001a1:	55                   	push   %ebp
+  8001a2:	89 e5                	mov    %esp,%ebp
+    syscall(SYS_lab6_set_priority, priority);
+  8001a4:	ff 75 08             	pushl  0x8(%ebp)
+  8001a7:	68 ff 00 00 00       	push   $0xff
+  8001ac:	e8 04 ff ff ff       	call   8000b5 <syscall>
+  8001b1:	83 c4 08             	add    $0x8,%esp
+}
+  8001b4:	90                   	nop
+  8001b5:	c9                   	leave  
+  8001b6:	c3                   	ret    
+
+008001b7 <sys_sleep>:
+
+int
+sys_sleep(unsigned int time) {
+  8001b7:	55                   	push   %ebp
+  8001b8:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_sleep, time);
+  8001ba:	ff 75 08             	pushl  0x8(%ebp)
+  8001bd:	6a 0b                	push   $0xb
+  8001bf:	e8 f1 fe ff ff       	call   8000b5 <syscall>
+  8001c4:	83 c4 08             	add    $0x8,%esp
+}
+  8001c7:	c9                   	leave  
+  8001c8:	c3                   	ret    
+
+008001c9 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001c9:	55                   	push   %ebp
+  8001ca:	89 e5                	mov    %esp,%ebp
+  8001cc:	83 ec 08             	sub    $0x8,%esp
+    sys_exit(error_code);
+  8001cf:	83 ec 0c             	sub    $0xc,%esp
+  8001d2:	ff 75 08             	pushl  0x8(%ebp)
+  8001d5:	e8 31 ff ff ff       	call   80010b <sys_exit>
+  8001da:	83 c4 10             	add    $0x10,%esp
+    cprintf("BUG: exit failed.\n");
+  8001dd:	83 ec 0c             	sub    $0xc,%esp
+  8001e0:	68 b8 0f 80 00       	push   $0x800fb8
+  8001e5:	e8 17 01 00 00       	call   800301 <cprintf>
+  8001ea:	83 c4 10             	add    $0x10,%esp
+    while (1);
+  8001ed:	eb fe                	jmp    8001ed <exit+0x24>
+
+008001ef <fork>:
+}
+
+int
+fork(void) {
+  8001ef:	55                   	push   %ebp
+  8001f0:	89 e5                	mov    %esp,%ebp
+  8001f2:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8001f5:	e8 23 ff ff ff       	call   80011d <sys_fork>
+}
+  8001fa:	c9                   	leave  
+  8001fb:	c3                   	ret    
+
+008001fc <wait>:
+
+int
+wait(void) {
+  8001fc:	55                   	push   %ebp
+  8001fd:	89 e5                	mov    %esp,%ebp
+  8001ff:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(0, NULL);
+  800202:	83 ec 08             	sub    $0x8,%esp
+  800205:	6a 00                	push   $0x0
+  800207:	6a 00                	push   $0x0
+  800209:	e8 1e ff ff ff       	call   80012c <sys_wait>
+  80020e:	83 c4 10             	add    $0x10,%esp
+}
+  800211:	c9                   	leave  
+  800212:	c3                   	ret    
+
+00800213 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800213:	55                   	push   %ebp
+  800214:	89 e5                	mov    %esp,%ebp
+  800216:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(pid, store);
+  800219:	83 ec 08             	sub    $0x8,%esp
+  80021c:	ff 75 0c             	pushl  0xc(%ebp)
+  80021f:	ff 75 08             	pushl  0x8(%ebp)
+  800222:	e8 05 ff ff ff       	call   80012c <sys_wait>
+  800227:	83 c4 10             	add    $0x10,%esp
+}
+  80022a:	c9                   	leave  
+  80022b:	c3                   	ret    
+
+0080022c <yield>:
+
+void
+yield(void) {
+  80022c:	55                   	push   %ebp
+  80022d:	89 e5                	mov    %esp,%ebp
+  80022f:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800232:	e8 0a ff ff ff       	call   800141 <sys_yield>
+}
+  800237:	90                   	nop
+  800238:	c9                   	leave  
+  800239:	c3                   	ret    
+
+0080023a <kill>:
+
+int
+kill(int pid) {
+  80023a:	55                   	push   %ebp
+  80023b:	89 e5                	mov    %esp,%ebp
+  80023d:	83 ec 08             	sub    $0x8,%esp
+    return sys_kill(pid);
+  800240:	83 ec 0c             	sub    $0xc,%esp
+  800243:	ff 75 08             	pushl  0x8(%ebp)
+  800246:	e8 05 ff ff ff       	call   800150 <sys_kill>
+  80024b:	83 c4 10             	add    $0x10,%esp
+}
+  80024e:	c9                   	leave  
+  80024f:	c3                   	ret    
+
+00800250 <getpid>:
+
+int
+getpid(void) {
+  800250:	55                   	push   %ebp
+  800251:	89 e5                	mov    %esp,%ebp
+  800253:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800256:	e8 07 ff ff ff       	call   800162 <sys_getpid>
+}
+  80025b:	c9                   	leave  
+  80025c:	c3                   	ret    
+
+0080025d <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80025d:	55                   	push   %ebp
+  80025e:	89 e5                	mov    %esp,%ebp
+  800260:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800263:	e8 1b ff ff ff       	call   800183 <sys_pgdir>
+}
+  800268:	90                   	nop
+  800269:	c9                   	leave  
+  80026a:	c3                   	ret    
+
+0080026b <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80026b:	55                   	push   %ebp
+  80026c:	89 e5                	mov    %esp,%ebp
+  80026e:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800271:	e8 1c ff ff ff       	call   800192 <sys_gettime>
+}
+  800276:	c9                   	leave  
+  800277:	c3                   	ret    
+
+00800278 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800278:	55                   	push   %ebp
+  800279:	89 e5                	mov    %esp,%ebp
+  80027b:	83 ec 08             	sub    $0x8,%esp
+    sys_lab6_set_priority(priority);
+  80027e:	83 ec 0c             	sub    $0xc,%esp
+  800281:	ff 75 08             	pushl  0x8(%ebp)
+  800284:	e8 18 ff ff ff       	call   8001a1 <sys_lab6_set_priority>
+  800289:	83 c4 10             	add    $0x10,%esp
+}
+  80028c:	90                   	nop
+  80028d:	c9                   	leave  
+  80028e:	c3                   	ret    
+
+0080028f <sleep>:
+
+int
+sleep(unsigned int time) {
+  80028f:	55                   	push   %ebp
+  800290:	89 e5                	mov    %esp,%ebp
+  800292:	83 ec 08             	sub    $0x8,%esp
+    return sys_sleep(time);
+  800295:	83 ec 0c             	sub    $0xc,%esp
+  800298:	ff 75 08             	pushl  0x8(%ebp)
+  80029b:	e8 17 ff ff ff       	call   8001b7 <sys_sleep>
+  8002a0:	83 c4 10             	add    $0x10,%esp
+}
+  8002a3:	c9                   	leave  
+  8002a4:	c3                   	ret    
+
+008002a5 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  8002a5:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  8002aa:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  8002ad:	e8 c3 00 00 00       	call   800375 <umain>
+1:  jmp 1b
+  8002b2:	eb fe                	jmp    8002b2 <_start+0xd>
+
+008002b4 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8002b4:	55                   	push   %ebp
+  8002b5:	89 e5                	mov    %esp,%ebp
+  8002b7:	83 ec 08             	sub    $0x8,%esp
+    sys_putc(c);
+  8002ba:	83 ec 0c             	sub    $0xc,%esp
+  8002bd:	ff 75 08             	pushl  0x8(%ebp)
+  8002c0:	e8 ac fe ff ff       	call   800171 <sys_putc>
+  8002c5:	83 c4 10             	add    $0x10,%esp
+    (*cnt) ++;
+  8002c8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002cb:	8b 00                	mov    (%eax),%eax
+  8002cd:	8d 50 01             	lea    0x1(%eax),%edx
+  8002d0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002d3:	89 10                	mov    %edx,(%eax)
+}
+  8002d5:	90                   	nop
+  8002d6:	c9                   	leave  
+  8002d7:	c3                   	ret    
+
+008002d8 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002d8:	55                   	push   %ebp
+  8002d9:	89 e5                	mov    %esp,%ebp
+  8002db:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  8002de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002e5:	ff 75 0c             	pushl  0xc(%ebp)
+  8002e8:	ff 75 08             	pushl  0x8(%ebp)
+  8002eb:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  8002ee:	50                   	push   %eax
+  8002ef:	68 b4 02 80 00       	push   $0x8002b4
+  8002f4:	e8 fc 06 00 00       	call   8009f5 <vprintfmt>
+  8002f9:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  8002fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002ff:	c9                   	leave  
+  800300:	c3                   	ret    
+
+00800301 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800301:	55                   	push   %ebp
+  800302:	89 e5                	mov    %esp,%ebp
+  800304:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800307:	8d 45 0c             	lea    0xc(%ebp),%eax
+  80030a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  80030d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800310:	83 ec 08             	sub    $0x8,%esp
+  800313:	50                   	push   %eax
+  800314:	ff 75 08             	pushl  0x8(%ebp)
+  800317:	e8 bc ff ff ff       	call   8002d8 <vcprintf>
+  80031c:	83 c4 10             	add    $0x10,%esp
+  80031f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800322:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800325:	c9                   	leave  
+  800326:	c3                   	ret    
+
+00800327 <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  800327:	55                   	push   %ebp
+  800328:	89 e5                	mov    %esp,%ebp
+  80032a:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  80032d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  800334:	eb 14                	jmp    80034a <cputs+0x23>
+        cputch(c, &cnt);
+  800336:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  80033a:	83 ec 08             	sub    $0x8,%esp
+  80033d:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800340:	52                   	push   %edx
+  800341:	50                   	push   %eax
+  800342:	e8 6d ff ff ff       	call   8002b4 <cputch>
+  800347:	83 c4 10             	add    $0x10,%esp
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  80034a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80034d:	8d 50 01             	lea    0x1(%eax),%edx
+  800350:	89 55 08             	mov    %edx,0x8(%ebp)
+  800353:	0f b6 00             	movzbl (%eax),%eax
+  800356:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800359:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  80035d:	75 d7                	jne    800336 <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  80035f:	83 ec 08             	sub    $0x8,%esp
+  800362:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800365:	50                   	push   %eax
+  800366:	6a 0a                	push   $0xa
+  800368:	e8 47 ff ff ff       	call   8002b4 <cputch>
+  80036d:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  800370:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  800373:	c9                   	leave  
+  800374:	c3                   	ret    
+
+00800375 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800375:	55                   	push   %ebp
+  800376:	89 e5                	mov    %esp,%ebp
+  800378:	83 ec 18             	sub    $0x18,%esp
+    int ret = main();
+  80037b:	e8 d3 0b 00 00       	call   800f53 <main>
+  800380:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  800383:	83 ec 0c             	sub    $0xc,%esp
+  800386:	ff 75 f4             	pushl  -0xc(%ebp)
+  800389:	e8 3b fe ff ff       	call   8001c9 <exit>
+
+0080038e <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  80038e:	55                   	push   %ebp
+  80038f:	89 e5                	mov    %esp,%ebp
+  800391:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800394:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  80039b:	eb 04                	jmp    8003a1 <strlen+0x13>
+        cnt ++;
+  80039d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  8003a1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003a4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003a7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003aa:	0f b6 00             	movzbl (%eax),%eax
+  8003ad:	84 c0                	test   %al,%al
+  8003af:	75 ec                	jne    80039d <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003b4:	c9                   	leave  
+  8003b5:	c3                   	ret    
+
+008003b6 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  8003b6:	55                   	push   %ebp
+  8003b7:	89 e5                	mov    %esp,%ebp
+  8003b9:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003bc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003c3:	eb 04                	jmp    8003c9 <strnlen+0x13>
+        cnt ++;
+  8003c5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  8003c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003cc:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003cf:	73 10                	jae    8003e1 <strnlen+0x2b>
+  8003d1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003d4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003d7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003da:	0f b6 00             	movzbl (%eax),%eax
+  8003dd:	84 c0                	test   %al,%al
+  8003df:	75 e4                	jne    8003c5 <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003e4:	c9                   	leave  
+  8003e5:	c3                   	ret    
+
+008003e6 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  8003e6:	55                   	push   %ebp
+  8003e7:	89 e5                	mov    %esp,%ebp
+  8003e9:	57                   	push   %edi
+  8003ea:	56                   	push   %esi
+  8003eb:	83 ec 20             	sub    $0x20,%esp
+  8003ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003f4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8003f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  8003fa:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800400:	89 d1                	mov    %edx,%ecx
+  800402:	89 c2                	mov    %eax,%edx
+  800404:	89 ce                	mov    %ecx,%esi
+  800406:	89 d7                	mov    %edx,%edi
+  800408:	ac                   	lods   %ds:(%esi),%al
+  800409:	aa                   	stos   %al,%es:(%edi)
+  80040a:	84 c0                	test   %al,%al
+  80040c:	75 fa                	jne    800408 <strcpy+0x22>
+  80040e:	89 fa                	mov    %edi,%edx
+  800410:	89 f1                	mov    %esi,%ecx
+  800412:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800415:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800418:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  80041b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  80041e:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  80041f:	83 c4 20             	add    $0x20,%esp
+  800422:	5e                   	pop    %esi
+  800423:	5f                   	pop    %edi
+  800424:	5d                   	pop    %ebp
+  800425:	c3                   	ret    
+
+00800426 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800426:	55                   	push   %ebp
+  800427:	89 e5                	mov    %esp,%ebp
+  800429:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  80042c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80042f:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800432:	eb 21                	jmp    800455 <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800434:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800437:	0f b6 10             	movzbl (%eax),%edx
+  80043a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80043d:	88 10                	mov    %dl,(%eax)
+  80043f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800442:	0f b6 00             	movzbl (%eax),%eax
+  800445:	84 c0                	test   %al,%al
+  800447:	74 04                	je     80044d <strncpy+0x27>
+            src ++;
+  800449:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  80044d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800451:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800455:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800459:	75 d9                	jne    800434 <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  80045b:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  80045e:	c9                   	leave  
+  80045f:	c3                   	ret    
+
+00800460 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800460:	55                   	push   %ebp
+  800461:	89 e5                	mov    %esp,%ebp
+  800463:	57                   	push   %edi
+  800464:	56                   	push   %esi
+  800465:	83 ec 20             	sub    $0x20,%esp
+  800468:	8b 45 08             	mov    0x8(%ebp),%eax
+  80046b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80046e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800471:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800474:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800477:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80047a:	89 d1                	mov    %edx,%ecx
+  80047c:	89 c2                	mov    %eax,%edx
+  80047e:	89 ce                	mov    %ecx,%esi
+  800480:	89 d7                	mov    %edx,%edi
+  800482:	ac                   	lods   %ds:(%esi),%al
+  800483:	ae                   	scas   %es:(%edi),%al
+  800484:	75 08                	jne    80048e <strcmp+0x2e>
+  800486:	84 c0                	test   %al,%al
+  800488:	75 f8                	jne    800482 <strcmp+0x22>
+  80048a:	31 c0                	xor    %eax,%eax
+  80048c:	eb 04                	jmp    800492 <strcmp+0x32>
+  80048e:	19 c0                	sbb    %eax,%eax
+  800490:	0c 01                	or     $0x1,%al
+  800492:	89 fa                	mov    %edi,%edx
+  800494:	89 f1                	mov    %esi,%ecx
+  800496:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800499:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  80049c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  80049f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  8004a2:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  8004a3:	83 c4 20             	add    $0x20,%esp
+  8004a6:	5e                   	pop    %esi
+  8004a7:	5f                   	pop    %edi
+  8004a8:	5d                   	pop    %ebp
+  8004a9:	c3                   	ret    
+
+008004aa <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  8004aa:	55                   	push   %ebp
+  8004ab:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004ad:	eb 0c                	jmp    8004bb <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  8004af:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  8004b3:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8004b7:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004bb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004bf:	74 1a                	je     8004db <strncmp+0x31>
+  8004c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004c4:	0f b6 00             	movzbl (%eax),%eax
+  8004c7:	84 c0                	test   %al,%al
+  8004c9:	74 10                	je     8004db <strncmp+0x31>
+  8004cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004ce:	0f b6 10             	movzbl (%eax),%edx
+  8004d1:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004d4:	0f b6 00             	movzbl (%eax),%eax
+  8004d7:	38 c2                	cmp    %al,%dl
+  8004d9:	74 d4                	je     8004af <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004db:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004df:	74 18                	je     8004f9 <strncmp+0x4f>
+  8004e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e4:	0f b6 00             	movzbl (%eax),%eax
+  8004e7:	0f b6 d0             	movzbl %al,%edx
+  8004ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ed:	0f b6 00             	movzbl (%eax),%eax
+  8004f0:	0f b6 c0             	movzbl %al,%eax
+  8004f3:	29 c2                	sub    %eax,%edx
+  8004f5:	89 d0                	mov    %edx,%eax
+  8004f7:	eb 05                	jmp    8004fe <strncmp+0x54>
+  8004f9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8004fe:	5d                   	pop    %ebp
+  8004ff:	c3                   	ret    
+
+00800500 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800500:	55                   	push   %ebp
+  800501:	89 e5                	mov    %esp,%ebp
+  800503:	83 ec 04             	sub    $0x4,%esp
+  800506:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800509:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  80050c:	eb 14                	jmp    800522 <strchr+0x22>
+        if (*s == c) {
+  80050e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800511:	0f b6 00             	movzbl (%eax),%eax
+  800514:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800517:	75 05                	jne    80051e <strchr+0x1e>
+            return (char *)s;
+  800519:	8b 45 08             	mov    0x8(%ebp),%eax
+  80051c:	eb 13                	jmp    800531 <strchr+0x31>
+        }
+        s ++;
+  80051e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800522:	8b 45 08             	mov    0x8(%ebp),%eax
+  800525:	0f b6 00             	movzbl (%eax),%eax
+  800528:	84 c0                	test   %al,%al
+  80052a:	75 e2                	jne    80050e <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  80052c:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800531:	c9                   	leave  
+  800532:	c3                   	ret    
+
+00800533 <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800533:	55                   	push   %ebp
+  800534:	89 e5                	mov    %esp,%ebp
+  800536:	83 ec 04             	sub    $0x4,%esp
+  800539:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80053c:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  80053f:	eb 0f                	jmp    800550 <strfind+0x1d>
+        if (*s == c) {
+  800541:	8b 45 08             	mov    0x8(%ebp),%eax
+  800544:	0f b6 00             	movzbl (%eax),%eax
+  800547:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  80054a:	74 10                	je     80055c <strfind+0x29>
+            break;
+        }
+        s ++;
+  80054c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800550:	8b 45 08             	mov    0x8(%ebp),%eax
+  800553:	0f b6 00             	movzbl (%eax),%eax
+  800556:	84 c0                	test   %al,%al
+  800558:	75 e7                	jne    800541 <strfind+0xe>
+  80055a:	eb 01                	jmp    80055d <strfind+0x2a>
+        if (*s == c) {
+            break;
+  80055c:	90                   	nop
+        }
+        s ++;
+    }
+    return (char *)s;
+  80055d:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800560:	c9                   	leave  
+  800561:	c3                   	ret    
+
+00800562 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800562:	55                   	push   %ebp
+  800563:	89 e5                	mov    %esp,%ebp
+  800565:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800568:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  80056f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800576:	eb 04                	jmp    80057c <strtol+0x1a>
+        s ++;
+  800578:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80057c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80057f:	0f b6 00             	movzbl (%eax),%eax
+  800582:	3c 20                	cmp    $0x20,%al
+  800584:	74 f2                	je     800578 <strtol+0x16>
+  800586:	8b 45 08             	mov    0x8(%ebp),%eax
+  800589:	0f b6 00             	movzbl (%eax),%eax
+  80058c:	3c 09                	cmp    $0x9,%al
+  80058e:	74 e8                	je     800578 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800590:	8b 45 08             	mov    0x8(%ebp),%eax
+  800593:	0f b6 00             	movzbl (%eax),%eax
+  800596:	3c 2b                	cmp    $0x2b,%al
+  800598:	75 06                	jne    8005a0 <strtol+0x3e>
+        s ++;
+  80059a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  80059e:	eb 15                	jmp    8005b5 <strtol+0x53>
+    }
+    else if (*s == '-') {
+  8005a0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a3:	0f b6 00             	movzbl (%eax),%eax
+  8005a6:	3c 2d                	cmp    $0x2d,%al
+  8005a8:	75 0b                	jne    8005b5 <strtol+0x53>
+        s ++, neg = 1;
+  8005aa:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005ae:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  8005b5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005b9:	74 06                	je     8005c1 <strtol+0x5f>
+  8005bb:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  8005bf:	75 24                	jne    8005e5 <strtol+0x83>
+  8005c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005c4:	0f b6 00             	movzbl (%eax),%eax
+  8005c7:	3c 30                	cmp    $0x30,%al
+  8005c9:	75 1a                	jne    8005e5 <strtol+0x83>
+  8005cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ce:	83 c0 01             	add    $0x1,%eax
+  8005d1:	0f b6 00             	movzbl (%eax),%eax
+  8005d4:	3c 78                	cmp    $0x78,%al
+  8005d6:	75 0d                	jne    8005e5 <strtol+0x83>
+        s += 2, base = 16;
+  8005d8:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005dc:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005e3:	eb 2a                	jmp    80060f <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005e5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005e9:	75 17                	jne    800602 <strtol+0xa0>
+  8005eb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ee:	0f b6 00             	movzbl (%eax),%eax
+  8005f1:	3c 30                	cmp    $0x30,%al
+  8005f3:	75 0d                	jne    800602 <strtol+0xa0>
+        s ++, base = 8;
+  8005f5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005f9:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800600:	eb 0d                	jmp    80060f <strtol+0xad>
+    }
+    else if (base == 0) {
+  800602:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800606:	75 07                	jne    80060f <strtol+0xad>
+        base = 10;
+  800608:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  80060f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800612:	0f b6 00             	movzbl (%eax),%eax
+  800615:	3c 2f                	cmp    $0x2f,%al
+  800617:	7e 1b                	jle    800634 <strtol+0xd2>
+  800619:	8b 45 08             	mov    0x8(%ebp),%eax
+  80061c:	0f b6 00             	movzbl (%eax),%eax
+  80061f:	3c 39                	cmp    $0x39,%al
+  800621:	7f 11                	jg     800634 <strtol+0xd2>
+            dig = *s - '0';
+  800623:	8b 45 08             	mov    0x8(%ebp),%eax
+  800626:	0f b6 00             	movzbl (%eax),%eax
+  800629:	0f be c0             	movsbl %al,%eax
+  80062c:	83 e8 30             	sub    $0x30,%eax
+  80062f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800632:	eb 48                	jmp    80067c <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800634:	8b 45 08             	mov    0x8(%ebp),%eax
+  800637:	0f b6 00             	movzbl (%eax),%eax
+  80063a:	3c 60                	cmp    $0x60,%al
+  80063c:	7e 1b                	jle    800659 <strtol+0xf7>
+  80063e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800641:	0f b6 00             	movzbl (%eax),%eax
+  800644:	3c 7a                	cmp    $0x7a,%al
+  800646:	7f 11                	jg     800659 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800648:	8b 45 08             	mov    0x8(%ebp),%eax
+  80064b:	0f b6 00             	movzbl (%eax),%eax
+  80064e:	0f be c0             	movsbl %al,%eax
+  800651:	83 e8 57             	sub    $0x57,%eax
+  800654:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800657:	eb 23                	jmp    80067c <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800659:	8b 45 08             	mov    0x8(%ebp),%eax
+  80065c:	0f b6 00             	movzbl (%eax),%eax
+  80065f:	3c 40                	cmp    $0x40,%al
+  800661:	7e 3c                	jle    80069f <strtol+0x13d>
+  800663:	8b 45 08             	mov    0x8(%ebp),%eax
+  800666:	0f b6 00             	movzbl (%eax),%eax
+  800669:	3c 5a                	cmp    $0x5a,%al
+  80066b:	7f 32                	jg     80069f <strtol+0x13d>
+            dig = *s - 'A' + 10;
+  80066d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800670:	0f b6 00             	movzbl (%eax),%eax
+  800673:	0f be c0             	movsbl %al,%eax
+  800676:	83 e8 37             	sub    $0x37,%eax
+  800679:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  80067c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80067f:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800682:	7d 1a                	jge    80069e <strtol+0x13c>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  800684:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800688:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80068b:	0f af 45 10          	imul   0x10(%ebp),%eax
+  80068f:	89 c2                	mov    %eax,%edx
+  800691:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800694:	01 d0                	add    %edx,%eax
+  800696:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800699:	e9 71 ff ff ff       	jmp    80060f <strtol+0xad>
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+            break;
+  80069e:	90                   	nop
+        }
+        s ++, val = (val * base) + dig;
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  80069f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8006a3:	74 08                	je     8006ad <strtol+0x14b>
+        *endptr = (char *) s;
+  8006a5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006a8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006ab:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  8006ad:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  8006b1:	74 07                	je     8006ba <strtol+0x158>
+  8006b3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006b6:	f7 d8                	neg    %eax
+  8006b8:	eb 03                	jmp    8006bd <strtol+0x15b>
+  8006ba:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  8006bd:	c9                   	leave  
+  8006be:	c3                   	ret    
+
+008006bf <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  8006bf:	55                   	push   %ebp
+  8006c0:	89 e5                	mov    %esp,%ebp
+  8006c2:	57                   	push   %edi
+  8006c3:	83 ec 24             	sub    $0x24,%esp
+  8006c6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006c9:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006cc:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006d0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006d3:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006d6:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006d9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006df:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006e2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006e6:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006e9:	89 d7                	mov    %edx,%edi
+  8006eb:	f3 aa                	rep stos %al,%es:(%edi)
+  8006ed:	89 fa                	mov    %edi,%edx
+  8006ef:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8006f2:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  8006f5:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006f8:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  8006f9:	83 c4 24             	add    $0x24,%esp
+  8006fc:	5f                   	pop    %edi
+  8006fd:	5d                   	pop    %ebp
+  8006fe:	c3                   	ret    
+
+008006ff <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  8006ff:	55                   	push   %ebp
+  800700:	89 e5                	mov    %esp,%ebp
+  800702:	57                   	push   %edi
+  800703:	56                   	push   %esi
+  800704:	53                   	push   %ebx
+  800705:	83 ec 30             	sub    $0x30,%esp
+  800708:	8b 45 08             	mov    0x8(%ebp),%eax
+  80070b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80070e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800711:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800714:	8b 45 10             	mov    0x10(%ebp),%eax
+  800717:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  80071a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80071d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800720:	73 42                	jae    800764 <memmove+0x65>
+  800722:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800725:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800728:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80072b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80072e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800731:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800734:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800737:	c1 e8 02             	shr    $0x2,%eax
+  80073a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  80073c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  80073f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800742:	89 d7                	mov    %edx,%edi
+  800744:	89 c6                	mov    %eax,%esi
+  800746:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800748:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  80074b:	83 e1 03             	and    $0x3,%ecx
+  80074e:	74 02                	je     800752 <memmove+0x53>
+  800750:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800752:	89 f0                	mov    %esi,%eax
+  800754:	89 fa                	mov    %edi,%edx
+  800756:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800759:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  80075c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  80075f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  800762:	eb 36                	jmp    80079a <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800764:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800767:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80076a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80076d:	01 c2                	add    %eax,%edx
+  80076f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800772:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800775:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800778:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  80077b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80077e:	89 c1                	mov    %eax,%ecx
+  800780:	89 d8                	mov    %ebx,%eax
+  800782:	89 d6                	mov    %edx,%esi
+  800784:	89 c7                	mov    %eax,%edi
+  800786:	fd                   	std    
+  800787:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800789:	fc                   	cld    
+  80078a:	89 f8                	mov    %edi,%eax
+  80078c:	89 f2                	mov    %esi,%edx
+  80078e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800791:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800794:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800797:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  80079a:	83 c4 30             	add    $0x30,%esp
+  80079d:	5b                   	pop    %ebx
+  80079e:	5e                   	pop    %esi
+  80079f:	5f                   	pop    %edi
+  8007a0:	5d                   	pop    %ebp
+  8007a1:	c3                   	ret    
+
+008007a2 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  8007a2:	55                   	push   %ebp
+  8007a3:	89 e5                	mov    %esp,%ebp
+  8007a5:	57                   	push   %edi
+  8007a6:	56                   	push   %esi
+  8007a7:	83 ec 20             	sub    $0x20,%esp
+  8007aa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8007b0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007b6:	8b 45 10             	mov    0x10(%ebp),%eax
+  8007b9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  8007bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8007bf:	c1 e8 02             	shr    $0x2,%eax
+  8007c2:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  8007c4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007ca:	89 d7                	mov    %edx,%edi
+  8007cc:	89 c6                	mov    %eax,%esi
+  8007ce:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007d0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007d3:	83 e1 03             	and    $0x3,%ecx
+  8007d6:	74 02                	je     8007da <memcpy+0x38>
+  8007d8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007da:	89 f0                	mov    %esi,%eax
+  8007dc:	89 fa                	mov    %edi,%edx
+  8007de:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007e1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007e4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  8007e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007ea:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007eb:	83 c4 20             	add    $0x20,%esp
+  8007ee:	5e                   	pop    %esi
+  8007ef:	5f                   	pop    %edi
+  8007f0:	5d                   	pop    %ebp
+  8007f1:	c3                   	ret    
+
+008007f2 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  8007f2:	55                   	push   %ebp
+  8007f3:	89 e5                	mov    %esp,%ebp
+  8007f5:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  8007f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007fb:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  8007fe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800801:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800804:	eb 30                	jmp    800836 <memcmp+0x44>
+        if (*s1 != *s2) {
+  800806:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800809:	0f b6 10             	movzbl (%eax),%edx
+  80080c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80080f:	0f b6 00             	movzbl (%eax),%eax
+  800812:	38 c2                	cmp    %al,%dl
+  800814:	74 18                	je     80082e <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800816:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800819:	0f b6 00             	movzbl (%eax),%eax
+  80081c:	0f b6 d0             	movzbl %al,%edx
+  80081f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800822:	0f b6 00             	movzbl (%eax),%eax
+  800825:	0f b6 c0             	movzbl %al,%eax
+  800828:	29 c2                	sub    %eax,%edx
+  80082a:	89 d0                	mov    %edx,%eax
+  80082c:	eb 1a                	jmp    800848 <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  80082e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800832:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800836:	8b 45 10             	mov    0x10(%ebp),%eax
+  800839:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80083c:	89 55 10             	mov    %edx,0x10(%ebp)
+  80083f:	85 c0                	test   %eax,%eax
+  800841:	75 c3                	jne    800806 <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800843:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800848:	c9                   	leave  
+  800849:	c3                   	ret    
+
+0080084a <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  80084a:	55                   	push   %ebp
+  80084b:	89 e5                	mov    %esp,%ebp
+  80084d:	83 ec 38             	sub    $0x38,%esp
+  800850:	8b 45 10             	mov    0x10(%ebp),%eax
+  800853:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800856:	8b 45 14             	mov    0x14(%ebp),%eax
+  800859:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80085c:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  80085f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800862:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800865:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800868:	8b 45 18             	mov    0x18(%ebp),%eax
+  80086b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  80086e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800871:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800874:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800877:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  80087a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80087d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800880:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800884:	74 1c                	je     8008a2 <printnum+0x58>
+  800886:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800889:	ba 00 00 00 00       	mov    $0x0,%edx
+  80088e:	f7 75 e4             	divl   -0x1c(%ebp)
+  800891:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800894:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800897:	ba 00 00 00 00       	mov    $0x0,%edx
+  80089c:	f7 75 e4             	divl   -0x1c(%ebp)
+  80089f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008a2:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008a8:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008ab:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8008ae:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8008b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008b4:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8008b7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8008ba:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8008bd:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8008c0:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8008c3:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008c6:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008cb:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008ce:	77 41                	ja     800911 <printnum+0xc7>
+  8008d0:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008d3:	72 05                	jb     8008da <printnum+0x90>
+  8008d5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  8008d8:	77 37                	ja     800911 <printnum+0xc7>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008da:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008dd:	83 e8 01             	sub    $0x1,%eax
+  8008e0:	83 ec 04             	sub    $0x4,%esp
+  8008e3:	ff 75 20             	pushl  0x20(%ebp)
+  8008e6:	50                   	push   %eax
+  8008e7:	ff 75 18             	pushl  0x18(%ebp)
+  8008ea:	ff 75 ec             	pushl  -0x14(%ebp)
+  8008ed:	ff 75 e8             	pushl  -0x18(%ebp)
+  8008f0:	ff 75 0c             	pushl  0xc(%ebp)
+  8008f3:	ff 75 08             	pushl  0x8(%ebp)
+  8008f6:	e8 4f ff ff ff       	call   80084a <printnum>
+  8008fb:	83 c4 20             	add    $0x20,%esp
+  8008fe:	eb 1b                	jmp    80091b <printnum+0xd1>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800900:	83 ec 08             	sub    $0x8,%esp
+  800903:	ff 75 0c             	pushl  0xc(%ebp)
+  800906:	ff 75 20             	pushl  0x20(%ebp)
+  800909:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090c:	ff d0                	call   *%eax
+  80090e:	83 c4 10             	add    $0x10,%esp
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  800911:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  800915:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  800919:	7f e5                	jg     800900 <printnum+0xb6>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  80091b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  80091e:	05 e4 10 80 00       	add    $0x8010e4,%eax
+  800923:	0f b6 00             	movzbl (%eax),%eax
+  800926:	0f be c0             	movsbl %al,%eax
+  800929:	83 ec 08             	sub    $0x8,%esp
+  80092c:	ff 75 0c             	pushl  0xc(%ebp)
+  80092f:	50                   	push   %eax
+  800930:	8b 45 08             	mov    0x8(%ebp),%eax
+  800933:	ff d0                	call   *%eax
+  800935:	83 c4 10             	add    $0x10,%esp
+}
+  800938:	90                   	nop
+  800939:	c9                   	leave  
+  80093a:	c3                   	ret    
+
+0080093b <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  80093b:	55                   	push   %ebp
+  80093c:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  80093e:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800942:	7e 14                	jle    800958 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  800944:	8b 45 08             	mov    0x8(%ebp),%eax
+  800947:	8b 00                	mov    (%eax),%eax
+  800949:	8d 48 08             	lea    0x8(%eax),%ecx
+  80094c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80094f:	89 0a                	mov    %ecx,(%edx)
+  800951:	8b 50 04             	mov    0x4(%eax),%edx
+  800954:	8b 00                	mov    (%eax),%eax
+  800956:	eb 30                	jmp    800988 <getuint+0x4d>
+    }
+    else if (lflag) {
+  800958:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80095c:	74 16                	je     800974 <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  80095e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800961:	8b 00                	mov    (%eax),%eax
+  800963:	8d 48 04             	lea    0x4(%eax),%ecx
+  800966:	8b 55 08             	mov    0x8(%ebp),%edx
+  800969:	89 0a                	mov    %ecx,(%edx)
+  80096b:	8b 00                	mov    (%eax),%eax
+  80096d:	ba 00 00 00 00       	mov    $0x0,%edx
+  800972:	eb 14                	jmp    800988 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  800974:	8b 45 08             	mov    0x8(%ebp),%eax
+  800977:	8b 00                	mov    (%eax),%eax
+  800979:	8d 48 04             	lea    0x4(%eax),%ecx
+  80097c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80097f:	89 0a                	mov    %ecx,(%edx)
+  800981:	8b 00                	mov    (%eax),%eax
+  800983:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800988:	5d                   	pop    %ebp
+  800989:	c3                   	ret    
+
+0080098a <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  80098a:	55                   	push   %ebp
+  80098b:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  80098d:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800991:	7e 14                	jle    8009a7 <getint+0x1d>
+        return va_arg(*ap, long long);
+  800993:	8b 45 08             	mov    0x8(%ebp),%eax
+  800996:	8b 00                	mov    (%eax),%eax
+  800998:	8d 48 08             	lea    0x8(%eax),%ecx
+  80099b:	8b 55 08             	mov    0x8(%ebp),%edx
+  80099e:	89 0a                	mov    %ecx,(%edx)
+  8009a0:	8b 50 04             	mov    0x4(%eax),%edx
+  8009a3:	8b 00                	mov    (%eax),%eax
+  8009a5:	eb 28                	jmp    8009cf <getint+0x45>
+    }
+    else if (lflag) {
+  8009a7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8009ab:	74 12                	je     8009bf <getint+0x35>
+        return va_arg(*ap, long);
+  8009ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b0:	8b 00                	mov    (%eax),%eax
+  8009b2:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009b5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009b8:	89 0a                	mov    %ecx,(%edx)
+  8009ba:	8b 00                	mov    (%eax),%eax
+  8009bc:	99                   	cltd   
+  8009bd:	eb 10                	jmp    8009cf <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  8009bf:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009c2:	8b 00                	mov    (%eax),%eax
+  8009c4:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009c7:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009ca:	89 0a                	mov    %ecx,(%edx)
+  8009cc:	8b 00                	mov    (%eax),%eax
+  8009ce:	99                   	cltd   
+    }
+}
+  8009cf:	5d                   	pop    %ebp
+  8009d0:	c3                   	ret    
+
+008009d1 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009d1:	55                   	push   %ebp
+  8009d2:	89 e5                	mov    %esp,%ebp
+  8009d4:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009d7:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009da:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8009e0:	50                   	push   %eax
+  8009e1:	ff 75 10             	pushl  0x10(%ebp)
+  8009e4:	ff 75 0c             	pushl  0xc(%ebp)
+  8009e7:	ff 75 08             	pushl  0x8(%ebp)
+  8009ea:	e8 06 00 00 00       	call   8009f5 <vprintfmt>
+  8009ef:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8009f2:	90                   	nop
+  8009f3:	c9                   	leave  
+  8009f4:	c3                   	ret    
+
+008009f5 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8009f5:	55                   	push   %ebp
+  8009f6:	89 e5                	mov    %esp,%ebp
+  8009f8:	56                   	push   %esi
+  8009f9:	53                   	push   %ebx
+  8009fa:	83 ec 20             	sub    $0x20,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009fd:	eb 17                	jmp    800a16 <vprintfmt+0x21>
+            if (ch == '\0') {
+  8009ff:	85 db                	test   %ebx,%ebx
+  800a01:	0f 84 8e 03 00 00    	je     800d95 <vprintfmt+0x3a0>
+                return;
+            }
+            putch(ch, putdat);
+  800a07:	83 ec 08             	sub    $0x8,%esp
+  800a0a:	ff 75 0c             	pushl  0xc(%ebp)
+  800a0d:	53                   	push   %ebx
+  800a0e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a11:	ff d0                	call   *%eax
+  800a13:	83 c4 10             	add    $0x10,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a16:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a19:	8d 50 01             	lea    0x1(%eax),%edx
+  800a1c:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a1f:	0f b6 00             	movzbl (%eax),%eax
+  800a22:	0f b6 d8             	movzbl %al,%ebx
+  800a25:	83 fb 25             	cmp    $0x25,%ebx
+  800a28:	75 d5                	jne    8009ff <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a2a:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a2e:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a38:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a3b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a42:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a45:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a48:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a4b:	8d 50 01             	lea    0x1(%eax),%edx
+  800a4e:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a51:	0f b6 00             	movzbl (%eax),%eax
+  800a54:	0f b6 d8             	movzbl %al,%ebx
+  800a57:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a5a:	83 f8 55             	cmp    $0x55,%eax
+  800a5d:	0f 87 05 03 00 00    	ja     800d68 <vprintfmt+0x373>
+  800a63:	8b 04 85 08 11 80 00 	mov    0x801108(,%eax,4),%eax
+  800a6a:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a6c:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a70:	eb d6                	jmp    800a48 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a72:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800a76:	eb d0                	jmp    800a48 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a78:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800a7f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a82:	89 d0                	mov    %edx,%eax
+  800a84:	c1 e0 02             	shl    $0x2,%eax
+  800a87:	01 d0                	add    %edx,%eax
+  800a89:	01 c0                	add    %eax,%eax
+  800a8b:	01 d8                	add    %ebx,%eax
+  800a8d:	83 e8 30             	sub    $0x30,%eax
+  800a90:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800a93:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a96:	0f b6 00             	movzbl (%eax),%eax
+  800a99:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800a9c:	83 fb 2f             	cmp    $0x2f,%ebx
+  800a9f:	7e 39                	jle    800ada <vprintfmt+0xe5>
+  800aa1:	83 fb 39             	cmp    $0x39,%ebx
+  800aa4:	7f 34                	jg     800ada <vprintfmt+0xe5>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800aa6:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  800aaa:	eb d3                	jmp    800a7f <vprintfmt+0x8a>
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800aac:	8b 45 14             	mov    0x14(%ebp),%eax
+  800aaf:	8d 50 04             	lea    0x4(%eax),%edx
+  800ab2:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ab5:	8b 00                	mov    (%eax),%eax
+  800ab7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800aba:	eb 1f                	jmp    800adb <vprintfmt+0xe6>
+
+        case '.':
+            if (width < 0)
+  800abc:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ac0:	79 86                	jns    800a48 <vprintfmt+0x53>
+                width = 0;
+  800ac2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800ac9:	e9 7a ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800ace:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800ad5:	e9 6e ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+            goto process_precision;
+  800ada:	90                   	nop
+        case '#':
+            altflag = 1;
+            goto reswitch;
+
+        process_precision:
+            if (width < 0)
+  800adb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800adf:	0f 89 63 ff ff ff    	jns    800a48 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800ae5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ae8:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800aeb:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800af2:	e9 51 ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800af7:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800afb:	e9 48 ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800b00:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b03:	8d 50 04             	lea    0x4(%eax),%edx
+  800b06:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b09:	8b 00                	mov    (%eax),%eax
+  800b0b:	83 ec 08             	sub    $0x8,%esp
+  800b0e:	ff 75 0c             	pushl  0xc(%ebp)
+  800b11:	50                   	push   %eax
+  800b12:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b15:	ff d0                	call   *%eax
+  800b17:	83 c4 10             	add    $0x10,%esp
+            break;
+  800b1a:	e9 71 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800b1f:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b22:	8d 50 04             	lea    0x4(%eax),%edx
+  800b25:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b28:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b2a:	85 db                	test   %ebx,%ebx
+  800b2c:	79 02                	jns    800b30 <vprintfmt+0x13b>
+                err = -err;
+  800b2e:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b30:	83 fb 18             	cmp    $0x18,%ebx
+  800b33:	7f 0b                	jg     800b40 <vprintfmt+0x14b>
+  800b35:	8b 34 9d 80 10 80 00 	mov    0x801080(,%ebx,4),%esi
+  800b3c:	85 f6                	test   %esi,%esi
+  800b3e:	75 19                	jne    800b59 <vprintfmt+0x164>
+                printfmt(putch, putdat, "error %d", err);
+  800b40:	53                   	push   %ebx
+  800b41:	68 f5 10 80 00       	push   $0x8010f5
+  800b46:	ff 75 0c             	pushl  0xc(%ebp)
+  800b49:	ff 75 08             	pushl  0x8(%ebp)
+  800b4c:	e8 80 fe ff ff       	call   8009d1 <printfmt>
+  800b51:	83 c4 10             	add    $0x10,%esp
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b54:	e9 37 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  800b59:	56                   	push   %esi
+  800b5a:	68 fe 10 80 00       	push   $0x8010fe
+  800b5f:	ff 75 0c             	pushl  0xc(%ebp)
+  800b62:	ff 75 08             	pushl  0x8(%ebp)
+  800b65:	e8 67 fe ff ff       	call   8009d1 <printfmt>
+  800b6a:	83 c4 10             	add    $0x10,%esp
+            }
+            break;
+  800b6d:	e9 1e 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800b72:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b75:	8d 50 04             	lea    0x4(%eax),%edx
+  800b78:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b7b:	8b 30                	mov    (%eax),%esi
+  800b7d:	85 f6                	test   %esi,%esi
+  800b7f:	75 05                	jne    800b86 <vprintfmt+0x191>
+                p = "(null)";
+  800b81:	be 01 11 80 00       	mov    $0x801101,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800b86:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b8a:	7e 76                	jle    800c02 <vprintfmt+0x20d>
+  800b8c:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800b90:	74 70                	je     800c02 <vprintfmt+0x20d>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b92:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b95:	83 ec 08             	sub    $0x8,%esp
+  800b98:	50                   	push   %eax
+  800b99:	56                   	push   %esi
+  800b9a:	e8 17 f8 ff ff       	call   8003b6 <strnlen>
+  800b9f:	83 c4 10             	add    $0x10,%esp
+  800ba2:	89 c2                	mov    %eax,%edx
+  800ba4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ba7:	29 d0                	sub    %edx,%eax
+  800ba9:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800bac:	eb 17                	jmp    800bc5 <vprintfmt+0x1d0>
+                    putch(padc, putdat);
+  800bae:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800bb2:	83 ec 08             	sub    $0x8,%esp
+  800bb5:	ff 75 0c             	pushl  0xc(%ebp)
+  800bb8:	50                   	push   %eax
+  800bb9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bbc:	ff d0                	call   *%eax
+  800bbe:	83 c4 10             	add    $0x10,%esp
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bc1:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800bc5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800bc9:	7f e3                	jg     800bae <vprintfmt+0x1b9>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bcb:	eb 35                	jmp    800c02 <vprintfmt+0x20d>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800bcd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800bd1:	74 1c                	je     800bef <vprintfmt+0x1fa>
+  800bd3:	83 fb 1f             	cmp    $0x1f,%ebx
+  800bd6:	7e 05                	jle    800bdd <vprintfmt+0x1e8>
+  800bd8:	83 fb 7e             	cmp    $0x7e,%ebx
+  800bdb:	7e 12                	jle    800bef <vprintfmt+0x1fa>
+                    putch('?', putdat);
+  800bdd:	83 ec 08             	sub    $0x8,%esp
+  800be0:	ff 75 0c             	pushl  0xc(%ebp)
+  800be3:	6a 3f                	push   $0x3f
+  800be5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800be8:	ff d0                	call   *%eax
+  800bea:	83 c4 10             	add    $0x10,%esp
+  800bed:	eb 0f                	jmp    800bfe <vprintfmt+0x209>
+                }
+                else {
+                    putch(ch, putdat);
+  800bef:	83 ec 08             	sub    $0x8,%esp
+  800bf2:	ff 75 0c             	pushl  0xc(%ebp)
+  800bf5:	53                   	push   %ebx
+  800bf6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bf9:	ff d0                	call   *%eax
+  800bfb:	83 c4 10             	add    $0x10,%esp
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bfe:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c02:	89 f0                	mov    %esi,%eax
+  800c04:	8d 70 01             	lea    0x1(%eax),%esi
+  800c07:	0f b6 00             	movzbl (%eax),%eax
+  800c0a:	0f be d8             	movsbl %al,%ebx
+  800c0d:	85 db                	test   %ebx,%ebx
+  800c0f:	74 26                	je     800c37 <vprintfmt+0x242>
+  800c11:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c15:	78 b6                	js     800bcd <vprintfmt+0x1d8>
+  800c17:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  800c1b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c1f:	79 ac                	jns    800bcd <vprintfmt+0x1d8>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c21:	eb 14                	jmp    800c37 <vprintfmt+0x242>
+                putch(' ', putdat);
+  800c23:	83 ec 08             	sub    $0x8,%esp
+  800c26:	ff 75 0c             	pushl  0xc(%ebp)
+  800c29:	6a 20                	push   $0x20
+  800c2b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2e:	ff d0                	call   *%eax
+  800c30:	83 c4 10             	add    $0x10,%esp
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c33:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c37:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c3b:	7f e6                	jg     800c23 <vprintfmt+0x22e>
+                putch(' ', putdat);
+            }
+            break;
+  800c3d:	e9 4e 01 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c42:	83 ec 08             	sub    $0x8,%esp
+  800c45:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c48:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c4b:	50                   	push   %eax
+  800c4c:	e8 39 fd ff ff       	call   80098a <getint>
+  800c51:	83 c4 10             	add    $0x10,%esp
+  800c54:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c57:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c5d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c60:	85 d2                	test   %edx,%edx
+  800c62:	79 23                	jns    800c87 <vprintfmt+0x292>
+                putch('-', putdat);
+  800c64:	83 ec 08             	sub    $0x8,%esp
+  800c67:	ff 75 0c             	pushl  0xc(%ebp)
+  800c6a:	6a 2d                	push   $0x2d
+  800c6c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c6f:	ff d0                	call   *%eax
+  800c71:	83 c4 10             	add    $0x10,%esp
+                num = -(long long)num;
+  800c74:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c77:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c7a:	f7 d8                	neg    %eax
+  800c7c:	83 d2 00             	adc    $0x0,%edx
+  800c7f:	f7 da                	neg    %edx
+  800c81:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c84:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800c87:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c8e:	e9 9f 00 00 00       	jmp    800d32 <vprintfmt+0x33d>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800c93:	83 ec 08             	sub    $0x8,%esp
+  800c96:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c99:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c9c:	50                   	push   %eax
+  800c9d:	e8 99 fc ff ff       	call   80093b <getuint>
+  800ca2:	83 c4 10             	add    $0x10,%esp
+  800ca5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ca8:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800cab:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cb2:	eb 7e                	jmp    800d32 <vprintfmt+0x33d>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800cb4:	83 ec 08             	sub    $0x8,%esp
+  800cb7:	ff 75 e0             	pushl  -0x20(%ebp)
+  800cba:	8d 45 14             	lea    0x14(%ebp),%eax
+  800cbd:	50                   	push   %eax
+  800cbe:	e8 78 fc ff ff       	call   80093b <getuint>
+  800cc3:	83 c4 10             	add    $0x10,%esp
+  800cc6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cc9:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800ccc:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800cd3:	eb 5d                	jmp    800d32 <vprintfmt+0x33d>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800cd5:	83 ec 08             	sub    $0x8,%esp
+  800cd8:	ff 75 0c             	pushl  0xc(%ebp)
+  800cdb:	6a 30                	push   $0x30
+  800cdd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ce0:	ff d0                	call   *%eax
+  800ce2:	83 c4 10             	add    $0x10,%esp
+            putch('x', putdat);
+  800ce5:	83 ec 08             	sub    $0x8,%esp
+  800ce8:	ff 75 0c             	pushl  0xc(%ebp)
+  800ceb:	6a 78                	push   $0x78
+  800ced:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cf0:	ff d0                	call   *%eax
+  800cf2:	83 c4 10             	add    $0x10,%esp
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800cf5:	8b 45 14             	mov    0x14(%ebp),%eax
+  800cf8:	8d 50 04             	lea    0x4(%eax),%edx
+  800cfb:	89 55 14             	mov    %edx,0x14(%ebp)
+  800cfe:	8b 00                	mov    (%eax),%eax
+  800d00:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d03:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800d0a:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800d11:	eb 1f                	jmp    800d32 <vprintfmt+0x33d>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800d13:	83 ec 08             	sub    $0x8,%esp
+  800d16:	ff 75 e0             	pushl  -0x20(%ebp)
+  800d19:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d1c:	50                   	push   %eax
+  800d1d:	e8 19 fc ff ff       	call   80093b <getuint>
+  800d22:	83 c4 10             	add    $0x10,%esp
+  800d25:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d28:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d2b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d32:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d36:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d39:	83 ec 04             	sub    $0x4,%esp
+  800d3c:	52                   	push   %edx
+  800d3d:	ff 75 e8             	pushl  -0x18(%ebp)
+  800d40:	50                   	push   %eax
+  800d41:	ff 75 f4             	pushl  -0xc(%ebp)
+  800d44:	ff 75 f0             	pushl  -0x10(%ebp)
+  800d47:	ff 75 0c             	pushl  0xc(%ebp)
+  800d4a:	ff 75 08             	pushl  0x8(%ebp)
+  800d4d:	e8 f8 fa ff ff       	call   80084a <printnum>
+  800d52:	83 c4 20             	add    $0x20,%esp
+            break;
+  800d55:	eb 39                	jmp    800d90 <vprintfmt+0x39b>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800d57:	83 ec 08             	sub    $0x8,%esp
+  800d5a:	ff 75 0c             	pushl  0xc(%ebp)
+  800d5d:	53                   	push   %ebx
+  800d5e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d61:	ff d0                	call   *%eax
+  800d63:	83 c4 10             	add    $0x10,%esp
+            break;
+  800d66:	eb 28                	jmp    800d90 <vprintfmt+0x39b>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800d68:	83 ec 08             	sub    $0x8,%esp
+  800d6b:	ff 75 0c             	pushl  0xc(%ebp)
+  800d6e:	6a 25                	push   $0x25
+  800d70:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d73:	ff d0                	call   *%eax
+  800d75:	83 c4 10             	add    $0x10,%esp
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800d78:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d7c:	eb 04                	jmp    800d82 <vprintfmt+0x38d>
+  800d7e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d82:	8b 45 10             	mov    0x10(%ebp),%eax
+  800d85:	83 e8 01             	sub    $0x1,%eax
+  800d88:	0f b6 00             	movzbl (%eax),%eax
+  800d8b:	3c 25                	cmp    $0x25,%al
+  800d8d:	75 ef                	jne    800d7e <vprintfmt+0x389>
+                /* do nothing */;
+            break;
+  800d8f:	90                   	nop
+        }
+    }
+  800d90:	e9 68 fc ff ff       	jmp    8009fd <vprintfmt+0x8>
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+            if (ch == '\0') {
+                return;
+  800d95:	90                   	nop
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  800d96:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  800d99:	5b                   	pop    %ebx
+  800d9a:	5e                   	pop    %esi
+  800d9b:	5d                   	pop    %ebp
+  800d9c:	c3                   	ret    
+
+00800d9d <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800d9d:	55                   	push   %ebp
+  800d9e:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800da0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800da3:	8b 40 08             	mov    0x8(%eax),%eax
+  800da6:	8d 50 01             	lea    0x1(%eax),%edx
+  800da9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dac:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800daf:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db2:	8b 10                	mov    (%eax),%edx
+  800db4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db7:	8b 40 04             	mov    0x4(%eax),%eax
+  800dba:	39 c2                	cmp    %eax,%edx
+  800dbc:	73 12                	jae    800dd0 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800dbe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dc1:	8b 00                	mov    (%eax),%eax
+  800dc3:	8d 48 01             	lea    0x1(%eax),%ecx
+  800dc6:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800dc9:	89 0a                	mov    %ecx,(%edx)
+  800dcb:	8b 55 08             	mov    0x8(%ebp),%edx
+  800dce:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800dd0:	90                   	nop
+  800dd1:	5d                   	pop    %ebp
+  800dd2:	c3                   	ret    
+
+00800dd3 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800dd3:	55                   	push   %ebp
+  800dd4:	89 e5                	mov    %esp,%ebp
+  800dd6:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800dd9:	8d 45 14             	lea    0x14(%ebp),%eax
+  800ddc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800ddf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800de2:	50                   	push   %eax
+  800de3:	ff 75 10             	pushl  0x10(%ebp)
+  800de6:	ff 75 0c             	pushl  0xc(%ebp)
+  800de9:	ff 75 08             	pushl  0x8(%ebp)
+  800dec:	e8 0b 00 00 00       	call   800dfc <vsnprintf>
+  800df1:	83 c4 10             	add    $0x10,%esp
+  800df4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800df7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800dfa:	c9                   	leave  
+  800dfb:	c3                   	ret    
+
+00800dfc <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800dfc:	55                   	push   %ebp
+  800dfd:	89 e5                	mov    %esp,%ebp
+  800dff:	83 ec 18             	sub    $0x18,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800e02:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e05:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e08:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e0b:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800e0e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e11:	01 d0                	add    %edx,%eax
+  800e13:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e16:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800e1d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800e21:	74 0a                	je     800e2d <vsnprintf+0x31>
+  800e23:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800e26:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e29:	39 c2                	cmp    %eax,%edx
+  800e2b:	76 07                	jbe    800e34 <vsnprintf+0x38>
+        return -E_INVAL;
+  800e2d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e32:	eb 20                	jmp    800e54 <vsnprintf+0x58>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e34:	ff 75 14             	pushl  0x14(%ebp)
+  800e37:	ff 75 10             	pushl  0x10(%ebp)
+  800e3a:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800e3d:	50                   	push   %eax
+  800e3e:	68 9d 0d 80 00       	push   $0x800d9d
+  800e43:	e8 ad fb ff ff       	call   8009f5 <vprintfmt>
+  800e48:	83 c4 10             	add    $0x10,%esp
+    // null terminate the buffer
+    *b.buf = '\0';
+  800e4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e4e:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800e51:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e54:	c9                   	leave  
+  800e55:	c3                   	ret    
+
+00800e56 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800e56:	55                   	push   %ebp
+  800e57:	89 e5                	mov    %esp,%ebp
+  800e59:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800e5c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e5f:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800e65:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800e68:	b8 20 00 00 00       	mov    $0x20,%eax
+  800e6d:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800e70:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800e73:	89 c1                	mov    %eax,%ecx
+  800e75:	d3 ea                	shr    %cl,%edx
+  800e77:	89 d0                	mov    %edx,%eax
+}
+  800e79:	c9                   	leave  
+  800e7a:	c3                   	ret    
+
+00800e7b <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800e7b:	55                   	push   %ebp
+  800e7c:	89 e5                	mov    %esp,%ebp
+  800e7e:	57                   	push   %edi
+  800e7f:	56                   	push   %esi
+  800e80:	53                   	push   %ebx
+  800e81:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800e84:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e89:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800e8f:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800e95:	6b f0 05             	imul   $0x5,%eax,%esi
+  800e98:	01 fe                	add    %edi,%esi
+  800e9a:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800e9f:	f7 e7                	mul    %edi
+  800ea1:	01 d6                	add    %edx,%esi
+  800ea3:	89 f2                	mov    %esi,%edx
+  800ea5:	83 c0 0b             	add    $0xb,%eax
+  800ea8:	83 d2 00             	adc    $0x0,%edx
+  800eab:	89 c7                	mov    %eax,%edi
+  800ead:	83 e7 ff             	and    $0xffffffff,%edi
+  800eb0:	89 f9                	mov    %edi,%ecx
+  800eb2:	0f b7 da             	movzwl %dx,%ebx
+  800eb5:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800ebb:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800ec1:	a1 00 20 80 00       	mov    0x802000,%eax
+  800ec6:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ecc:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ed0:	c1 ea 0c             	shr    $0xc,%edx
+  800ed3:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ed6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800ed9:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ee0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ee3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ee6:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ee9:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800eec:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eef:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ef2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ef6:	74 1c                	je     800f14 <rand+0x99>
+  800ef8:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800efb:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f00:	f7 75 dc             	divl   -0x24(%ebp)
+  800f03:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800f06:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f09:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f0e:	f7 75 dc             	divl   -0x24(%ebp)
+  800f11:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800f14:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f17:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800f1a:	f7 75 dc             	divl   -0x24(%ebp)
+  800f1d:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f20:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f23:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f26:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800f29:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f2c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f2f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800f32:	83 c4 24             	add    $0x24,%esp
+  800f35:	5b                   	pop    %ebx
+  800f36:	5e                   	pop    %esi
+  800f37:	5f                   	pop    %edi
+  800f38:	5d                   	pop    %ebp
+  800f39:	c3                   	ret    
+
+00800f3a <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800f3a:	55                   	push   %ebp
+  800f3b:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800f3d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f40:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f45:	a3 00 20 80 00       	mov    %eax,0x802000
+  800f4a:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800f50:	90                   	nop
+  800f51:	5d                   	pop    %ebp
+  800f52:	c3                   	ret    
+
+00800f53 <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  800f53:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  800f57:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f5a:	ff 71 fc             	pushl  -0x4(%ecx)
+  800f5d:	55                   	push   %ebp
+  800f5e:	89 e5                	mov    %esp,%ebp
+  800f60:	51                   	push   %ecx
+  800f61:	83 ec 04             	sub    $0x4,%esp
+    asm volatile("int $14");
+  800f64:	cd 0e                	int    $0xe
+    panic("FAIL: T.T\n");
+  800f66:	83 ec 04             	sub    $0x4,%esp
+  800f69:	68 60 12 80 00       	push   $0x801260
+  800f6e:	6a 07                	push   $0x7
+  800f70:	68 6b 12 80 00       	push   $0x80126b
+  800f75:	e8 a6 f0 ff ff       	call   800020 <__panic>
diff -r -u -P lab7_original/obj/user/softint.d lab7/obj/user/softint.d
--- lab7_original/obj/user/softint.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/softint.d	2016-05-06 21:59:27.586122258 +0800
@@ -0,0 +1,2 @@
+obj/user/softint.o obj/user/softint.d: user/softint.c libs/stdio.h \
+ libs/defs.h libs/stdarg.h user/libs/ulib.h
Binary files lab7_original/obj/user/softint.o and lab7/obj/user/softint.o differ
diff -r -u -P lab7_original/obj/user/softint.sym lab7/obj/user/softint.sym
--- lab7_original/obj/user/softint.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/softint.sym	2016-05-06 21:59:28.662161485 +0800
@@ -0,0 +1,78 @@
+00800020 .text
+00800f80 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202d05 .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b5 syscall
+00000000 ulib.c
+00000000 stdio.c
+008002b4 cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+00801080 error_string
+0080084a printnum
+0080093b getuint
+0080098a getint
+00800d9d sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 softint.c
+008003e6 strcpy
+0080022c yield
+00800213 waitpid
+00800141 sys_yield
+008006ff memmove
+00800dd3 snprintf
+008009f5 vprintfmt
+0080011d sys_fork
+00800301 cprintf
+00800250 getpid
+008007a2 memcpy
+0080028f sleep
+00800278 lab6_set_priority
+00800dfc vsnprintf
+00800375 umain
+00202d04 __STAB_END__
+00800150 sys_kill
+00202d05 __STABSTR_BEGIN__
+00800020 __panic
+008001b7 sys_sleep
+00800562 strtol
+008003b6 strnlen
+0080025d print_pgdir
+0080023a kill
+00800533 strfind
+008001fc wait
+008002a5 _start
+00800e7b rand
+008004aa strncmp
+00800171 sys_putc
+00800426 strncpy
+008007f2 memcmp
+008001ef fork
+008006bf memset
+00800f53 main
+00800f3a srand
+00800e56 hash32
+008009d1 printfmt
+00203b0f __STABSTR_END__
+00800460 strcmp
+0080026b gettime_msec
+00800192 sys_gettime
+008002d8 vcprintf
+0080006e __warn
+00800327 cputs
+008001a1 sys_lab6_set_priority
+008001c9 exit
+0080012c sys_wait
+0080010b sys_exit
+00200010 __STAB_BEGIN__
+0080038e strlen
+00800183 sys_pgdir
+00800500 strchr
+00800162 sys_getpid
diff -r -u -P lab7_original/obj/user/spin.asm lab7/obj/user/spin.asm
--- lab7_original/obj/user/spin.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/spin.asm	2016-05-06 21:59:28.626160168 +0800
@@ -0,0 +1,2702 @@
+
+obj/__user_spin.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 18             	sub    $0x18,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	83 ec 04             	sub    $0x4,%esp
+  80002f:	ff 75 0c             	pushl  0xc(%ebp)
+  800032:	ff 75 08             	pushl  0x8(%ebp)
+  800035:	68 80 10 80 00       	push   $0x801080
+  80003a:	e8 c2 02 00 00       	call   800301 <cprintf>
+  80003f:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800042:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800045:	83 ec 08             	sub    $0x8,%esp
+  800048:	50                   	push   %eax
+  800049:	ff 75 10             	pushl  0x10(%ebp)
+  80004c:	e8 87 02 00 00       	call   8002d8 <vcprintf>
+  800051:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  800054:	83 ec 0c             	sub    $0xc,%esp
+  800057:	68 9a 10 80 00       	push   $0x80109a
+  80005c:	e8 a0 02 00 00       	call   800301 <cprintf>
+  800061:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	83 ec 0c             	sub    $0xc,%esp
+  800067:	6a f6                	push   $0xfffffff6
+  800069:	e8 5b 01 00 00       	call   8001c9 <exit>
+
+0080006e <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80006e:	55                   	push   %ebp
+  80006f:	89 e5                	mov    %esp,%ebp
+  800071:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800074:	8d 45 14             	lea    0x14(%ebp),%eax
+  800077:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007a:	83 ec 04             	sub    $0x4,%esp
+  80007d:	ff 75 0c             	pushl  0xc(%ebp)
+  800080:	ff 75 08             	pushl  0x8(%ebp)
+  800083:	68 9c 10 80 00       	push   $0x80109c
+  800088:	e8 74 02 00 00       	call   800301 <cprintf>
+  80008d:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800090:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800093:	83 ec 08             	sub    $0x8,%esp
+  800096:	50                   	push   %eax
+  800097:	ff 75 10             	pushl  0x10(%ebp)
+  80009a:	e8 39 02 00 00       	call   8002d8 <vcprintf>
+  80009f:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  8000a2:	83 ec 0c             	sub    $0xc,%esp
+  8000a5:	68 9a 10 80 00       	push   $0x80109a
+  8000aa:	e8 52 02 00 00       	call   800301 <cprintf>
+  8000af:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8000b2:	90                   	nop
+  8000b3:	c9                   	leave  
+  8000b4:	c3                   	ret    
+
+008000b5 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b5:	55                   	push   %ebp
+  8000b6:	89 e5                	mov    %esp,%ebp
+  8000b8:	57                   	push   %edi
+  8000b9:	56                   	push   %esi
+  8000ba:	53                   	push   %ebx
+  8000bb:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000be:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cb:	eb 16                	jmp    8000e3 <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8000cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d0:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d3:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d6:	8b 10                	mov    (%eax),%edx
+  8000d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000db:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000df:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8000e3:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e7:	7e e4                	jle    8000cd <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000e9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ec:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000ef:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f2:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f5:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8000f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fb:	cd 80                	int    $0x80
+  8000fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  800100:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800103:	83 c4 20             	add    $0x20,%esp
+  800106:	5b                   	pop    %ebx
+  800107:	5e                   	pop    %esi
+  800108:	5f                   	pop    %edi
+  800109:	5d                   	pop    %ebp
+  80010a:	c3                   	ret    
+
+0080010b <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010b:	55                   	push   %ebp
+  80010c:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_exit, error_code);
+  80010e:	ff 75 08             	pushl  0x8(%ebp)
+  800111:	6a 01                	push   $0x1
+  800113:	e8 9d ff ff ff       	call   8000b5 <syscall>
+  800118:	83 c4 08             	add    $0x8,%esp
+}
+  80011b:	c9                   	leave  
+  80011c:	c3                   	ret    
+
+0080011d <sys_fork>:
+
+int
+sys_fork(void) {
+  80011d:	55                   	push   %ebp
+  80011e:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_fork);
+  800120:	6a 02                	push   $0x2
+  800122:	e8 8e ff ff ff       	call   8000b5 <syscall>
+  800127:	83 c4 04             	add    $0x4,%esp
+}
+  80012a:	c9                   	leave  
+  80012b:	c3                   	ret    
+
+0080012c <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80012c:	55                   	push   %ebp
+  80012d:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_wait, pid, store);
+  80012f:	ff 75 0c             	pushl  0xc(%ebp)
+  800132:	ff 75 08             	pushl  0x8(%ebp)
+  800135:	6a 03                	push   $0x3
+  800137:	e8 79 ff ff ff       	call   8000b5 <syscall>
+  80013c:	83 c4 0c             	add    $0xc,%esp
+}
+  80013f:	c9                   	leave  
+  800140:	c3                   	ret    
+
+00800141 <sys_yield>:
+
+int
+sys_yield(void) {
+  800141:	55                   	push   %ebp
+  800142:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_yield);
+  800144:	6a 0a                	push   $0xa
+  800146:	e8 6a ff ff ff       	call   8000b5 <syscall>
+  80014b:	83 c4 04             	add    $0x4,%esp
+}
+  80014e:	c9                   	leave  
+  80014f:	c3                   	ret    
+
+00800150 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800150:	55                   	push   %ebp
+  800151:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_kill, pid);
+  800153:	ff 75 08             	pushl  0x8(%ebp)
+  800156:	6a 0c                	push   $0xc
+  800158:	e8 58 ff ff ff       	call   8000b5 <syscall>
+  80015d:	83 c4 08             	add    $0x8,%esp
+}
+  800160:	c9                   	leave  
+  800161:	c3                   	ret    
+
+00800162 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800162:	55                   	push   %ebp
+  800163:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_getpid);
+  800165:	6a 12                	push   $0x12
+  800167:	e8 49 ff ff ff       	call   8000b5 <syscall>
+  80016c:	83 c4 04             	add    $0x4,%esp
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_putc, c);
+  800174:	ff 75 08             	pushl  0x8(%ebp)
+  800177:	6a 1e                	push   $0x1e
+  800179:	e8 37 ff ff ff       	call   8000b5 <syscall>
+  80017e:	83 c4 08             	add    $0x8,%esp
+}
+  800181:	c9                   	leave  
+  800182:	c3                   	ret    
+
+00800183 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800183:	55                   	push   %ebp
+  800184:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_pgdir);
+  800186:	6a 1f                	push   $0x1f
+  800188:	e8 28 ff ff ff       	call   8000b5 <syscall>
+  80018d:	83 c4 04             	add    $0x4,%esp
+}
+  800190:	c9                   	leave  
+  800191:	c3                   	ret    
+
+00800192 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  800192:	55                   	push   %ebp
+  800193:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_gettime);
+  800195:	6a 11                	push   $0x11
+  800197:	e8 19 ff ff ff       	call   8000b5 <syscall>
+  80019c:	83 c4 04             	add    $0x4,%esp
+}
+  80019f:	c9                   	leave  
+  8001a0:	c3                   	ret    
+
+008001a1 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001a1:	55                   	push   %ebp
+  8001a2:	89 e5                	mov    %esp,%ebp
+    syscall(SYS_lab6_set_priority, priority);
+  8001a4:	ff 75 08             	pushl  0x8(%ebp)
+  8001a7:	68 ff 00 00 00       	push   $0xff
+  8001ac:	e8 04 ff ff ff       	call   8000b5 <syscall>
+  8001b1:	83 c4 08             	add    $0x8,%esp
+}
+  8001b4:	90                   	nop
+  8001b5:	c9                   	leave  
+  8001b6:	c3                   	ret    
+
+008001b7 <sys_sleep>:
+
+int
+sys_sleep(unsigned int time) {
+  8001b7:	55                   	push   %ebp
+  8001b8:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_sleep, time);
+  8001ba:	ff 75 08             	pushl  0x8(%ebp)
+  8001bd:	6a 0b                	push   $0xb
+  8001bf:	e8 f1 fe ff ff       	call   8000b5 <syscall>
+  8001c4:	83 c4 08             	add    $0x8,%esp
+}
+  8001c7:	c9                   	leave  
+  8001c8:	c3                   	ret    
+
+008001c9 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001c9:	55                   	push   %ebp
+  8001ca:	89 e5                	mov    %esp,%ebp
+  8001cc:	83 ec 08             	sub    $0x8,%esp
+    sys_exit(error_code);
+  8001cf:	83 ec 0c             	sub    $0xc,%esp
+  8001d2:	ff 75 08             	pushl  0x8(%ebp)
+  8001d5:	e8 31 ff ff ff       	call   80010b <sys_exit>
+  8001da:	83 c4 10             	add    $0x10,%esp
+    cprintf("BUG: exit failed.\n");
+  8001dd:	83 ec 0c             	sub    $0xc,%esp
+  8001e0:	68 b8 10 80 00       	push   $0x8010b8
+  8001e5:	e8 17 01 00 00       	call   800301 <cprintf>
+  8001ea:	83 c4 10             	add    $0x10,%esp
+    while (1);
+  8001ed:	eb fe                	jmp    8001ed <exit+0x24>
+
+008001ef <fork>:
+}
+
+int
+fork(void) {
+  8001ef:	55                   	push   %ebp
+  8001f0:	89 e5                	mov    %esp,%ebp
+  8001f2:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8001f5:	e8 23 ff ff ff       	call   80011d <sys_fork>
+}
+  8001fa:	c9                   	leave  
+  8001fb:	c3                   	ret    
+
+008001fc <wait>:
+
+int
+wait(void) {
+  8001fc:	55                   	push   %ebp
+  8001fd:	89 e5                	mov    %esp,%ebp
+  8001ff:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(0, NULL);
+  800202:	83 ec 08             	sub    $0x8,%esp
+  800205:	6a 00                	push   $0x0
+  800207:	6a 00                	push   $0x0
+  800209:	e8 1e ff ff ff       	call   80012c <sys_wait>
+  80020e:	83 c4 10             	add    $0x10,%esp
+}
+  800211:	c9                   	leave  
+  800212:	c3                   	ret    
+
+00800213 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800213:	55                   	push   %ebp
+  800214:	89 e5                	mov    %esp,%ebp
+  800216:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(pid, store);
+  800219:	83 ec 08             	sub    $0x8,%esp
+  80021c:	ff 75 0c             	pushl  0xc(%ebp)
+  80021f:	ff 75 08             	pushl  0x8(%ebp)
+  800222:	e8 05 ff ff ff       	call   80012c <sys_wait>
+  800227:	83 c4 10             	add    $0x10,%esp
+}
+  80022a:	c9                   	leave  
+  80022b:	c3                   	ret    
+
+0080022c <yield>:
+
+void
+yield(void) {
+  80022c:	55                   	push   %ebp
+  80022d:	89 e5                	mov    %esp,%ebp
+  80022f:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800232:	e8 0a ff ff ff       	call   800141 <sys_yield>
+}
+  800237:	90                   	nop
+  800238:	c9                   	leave  
+  800239:	c3                   	ret    
+
+0080023a <kill>:
+
+int
+kill(int pid) {
+  80023a:	55                   	push   %ebp
+  80023b:	89 e5                	mov    %esp,%ebp
+  80023d:	83 ec 08             	sub    $0x8,%esp
+    return sys_kill(pid);
+  800240:	83 ec 0c             	sub    $0xc,%esp
+  800243:	ff 75 08             	pushl  0x8(%ebp)
+  800246:	e8 05 ff ff ff       	call   800150 <sys_kill>
+  80024b:	83 c4 10             	add    $0x10,%esp
+}
+  80024e:	c9                   	leave  
+  80024f:	c3                   	ret    
+
+00800250 <getpid>:
+
+int
+getpid(void) {
+  800250:	55                   	push   %ebp
+  800251:	89 e5                	mov    %esp,%ebp
+  800253:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800256:	e8 07 ff ff ff       	call   800162 <sys_getpid>
+}
+  80025b:	c9                   	leave  
+  80025c:	c3                   	ret    
+
+0080025d <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80025d:	55                   	push   %ebp
+  80025e:	89 e5                	mov    %esp,%ebp
+  800260:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800263:	e8 1b ff ff ff       	call   800183 <sys_pgdir>
+}
+  800268:	90                   	nop
+  800269:	c9                   	leave  
+  80026a:	c3                   	ret    
+
+0080026b <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80026b:	55                   	push   %ebp
+  80026c:	89 e5                	mov    %esp,%ebp
+  80026e:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800271:	e8 1c ff ff ff       	call   800192 <sys_gettime>
+}
+  800276:	c9                   	leave  
+  800277:	c3                   	ret    
+
+00800278 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800278:	55                   	push   %ebp
+  800279:	89 e5                	mov    %esp,%ebp
+  80027b:	83 ec 08             	sub    $0x8,%esp
+    sys_lab6_set_priority(priority);
+  80027e:	83 ec 0c             	sub    $0xc,%esp
+  800281:	ff 75 08             	pushl  0x8(%ebp)
+  800284:	e8 18 ff ff ff       	call   8001a1 <sys_lab6_set_priority>
+  800289:	83 c4 10             	add    $0x10,%esp
+}
+  80028c:	90                   	nop
+  80028d:	c9                   	leave  
+  80028e:	c3                   	ret    
+
+0080028f <sleep>:
+
+int
+sleep(unsigned int time) {
+  80028f:	55                   	push   %ebp
+  800290:	89 e5                	mov    %esp,%ebp
+  800292:	83 ec 08             	sub    $0x8,%esp
+    return sys_sleep(time);
+  800295:	83 ec 0c             	sub    $0xc,%esp
+  800298:	ff 75 08             	pushl  0x8(%ebp)
+  80029b:	e8 17 ff ff ff       	call   8001b7 <sys_sleep>
+  8002a0:	83 c4 10             	add    $0x10,%esp
+}
+  8002a3:	c9                   	leave  
+  8002a4:	c3                   	ret    
+
+008002a5 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  8002a5:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  8002aa:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  8002ad:	e8 c3 00 00 00       	call   800375 <umain>
+1:  jmp 1b
+  8002b2:	eb fe                	jmp    8002b2 <_start+0xd>
+
+008002b4 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8002b4:	55                   	push   %ebp
+  8002b5:	89 e5                	mov    %esp,%ebp
+  8002b7:	83 ec 08             	sub    $0x8,%esp
+    sys_putc(c);
+  8002ba:	83 ec 0c             	sub    $0xc,%esp
+  8002bd:	ff 75 08             	pushl  0x8(%ebp)
+  8002c0:	e8 ac fe ff ff       	call   800171 <sys_putc>
+  8002c5:	83 c4 10             	add    $0x10,%esp
+    (*cnt) ++;
+  8002c8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002cb:	8b 00                	mov    (%eax),%eax
+  8002cd:	8d 50 01             	lea    0x1(%eax),%edx
+  8002d0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002d3:	89 10                	mov    %edx,(%eax)
+}
+  8002d5:	90                   	nop
+  8002d6:	c9                   	leave  
+  8002d7:	c3                   	ret    
+
+008002d8 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002d8:	55                   	push   %ebp
+  8002d9:	89 e5                	mov    %esp,%ebp
+  8002db:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  8002de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002e5:	ff 75 0c             	pushl  0xc(%ebp)
+  8002e8:	ff 75 08             	pushl  0x8(%ebp)
+  8002eb:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  8002ee:	50                   	push   %eax
+  8002ef:	68 b4 02 80 00       	push   $0x8002b4
+  8002f4:	e8 fc 06 00 00       	call   8009f5 <vprintfmt>
+  8002f9:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  8002fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002ff:	c9                   	leave  
+  800300:	c3                   	ret    
+
+00800301 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800301:	55                   	push   %ebp
+  800302:	89 e5                	mov    %esp,%ebp
+  800304:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800307:	8d 45 0c             	lea    0xc(%ebp),%eax
+  80030a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  80030d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800310:	83 ec 08             	sub    $0x8,%esp
+  800313:	50                   	push   %eax
+  800314:	ff 75 08             	pushl  0x8(%ebp)
+  800317:	e8 bc ff ff ff       	call   8002d8 <vcprintf>
+  80031c:	83 c4 10             	add    $0x10,%esp
+  80031f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800322:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800325:	c9                   	leave  
+  800326:	c3                   	ret    
+
+00800327 <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  800327:	55                   	push   %ebp
+  800328:	89 e5                	mov    %esp,%ebp
+  80032a:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  80032d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  800334:	eb 14                	jmp    80034a <cputs+0x23>
+        cputch(c, &cnt);
+  800336:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  80033a:	83 ec 08             	sub    $0x8,%esp
+  80033d:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800340:	52                   	push   %edx
+  800341:	50                   	push   %eax
+  800342:	e8 6d ff ff ff       	call   8002b4 <cputch>
+  800347:	83 c4 10             	add    $0x10,%esp
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  80034a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80034d:	8d 50 01             	lea    0x1(%eax),%edx
+  800350:	89 55 08             	mov    %edx,0x8(%ebp)
+  800353:	0f b6 00             	movzbl (%eax),%eax
+  800356:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800359:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  80035d:	75 d7                	jne    800336 <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  80035f:	83 ec 08             	sub    $0x8,%esp
+  800362:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800365:	50                   	push   %eax
+  800366:	6a 0a                	push   $0xa
+  800368:	e8 47 ff ff ff       	call   8002b4 <cputch>
+  80036d:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  800370:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  800373:	c9                   	leave  
+  800374:	c3                   	ret    
+
+00800375 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800375:	55                   	push   %ebp
+  800376:	89 e5                	mov    %esp,%ebp
+  800378:	83 ec 18             	sub    $0x18,%esp
+    int ret = main();
+  80037b:	e8 d3 0b 00 00       	call   800f53 <main>
+  800380:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  800383:	83 ec 0c             	sub    $0xc,%esp
+  800386:	ff 75 f4             	pushl  -0xc(%ebp)
+  800389:	e8 3b fe ff ff       	call   8001c9 <exit>
+
+0080038e <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  80038e:	55                   	push   %ebp
+  80038f:	89 e5                	mov    %esp,%ebp
+  800391:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800394:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  80039b:	eb 04                	jmp    8003a1 <strlen+0x13>
+        cnt ++;
+  80039d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  8003a1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003a4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003a7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003aa:	0f b6 00             	movzbl (%eax),%eax
+  8003ad:	84 c0                	test   %al,%al
+  8003af:	75 ec                	jne    80039d <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003b4:	c9                   	leave  
+  8003b5:	c3                   	ret    
+
+008003b6 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  8003b6:	55                   	push   %ebp
+  8003b7:	89 e5                	mov    %esp,%ebp
+  8003b9:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003bc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003c3:	eb 04                	jmp    8003c9 <strnlen+0x13>
+        cnt ++;
+  8003c5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  8003c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003cc:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003cf:	73 10                	jae    8003e1 <strnlen+0x2b>
+  8003d1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003d4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003d7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003da:	0f b6 00             	movzbl (%eax),%eax
+  8003dd:	84 c0                	test   %al,%al
+  8003df:	75 e4                	jne    8003c5 <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003e4:	c9                   	leave  
+  8003e5:	c3                   	ret    
+
+008003e6 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  8003e6:	55                   	push   %ebp
+  8003e7:	89 e5                	mov    %esp,%ebp
+  8003e9:	57                   	push   %edi
+  8003ea:	56                   	push   %esi
+  8003eb:	83 ec 20             	sub    $0x20,%esp
+  8003ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003f4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8003f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  8003fa:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800400:	89 d1                	mov    %edx,%ecx
+  800402:	89 c2                	mov    %eax,%edx
+  800404:	89 ce                	mov    %ecx,%esi
+  800406:	89 d7                	mov    %edx,%edi
+  800408:	ac                   	lods   %ds:(%esi),%al
+  800409:	aa                   	stos   %al,%es:(%edi)
+  80040a:	84 c0                	test   %al,%al
+  80040c:	75 fa                	jne    800408 <strcpy+0x22>
+  80040e:	89 fa                	mov    %edi,%edx
+  800410:	89 f1                	mov    %esi,%ecx
+  800412:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800415:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800418:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  80041b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  80041e:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  80041f:	83 c4 20             	add    $0x20,%esp
+  800422:	5e                   	pop    %esi
+  800423:	5f                   	pop    %edi
+  800424:	5d                   	pop    %ebp
+  800425:	c3                   	ret    
+
+00800426 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800426:	55                   	push   %ebp
+  800427:	89 e5                	mov    %esp,%ebp
+  800429:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  80042c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80042f:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800432:	eb 21                	jmp    800455 <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800434:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800437:	0f b6 10             	movzbl (%eax),%edx
+  80043a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80043d:	88 10                	mov    %dl,(%eax)
+  80043f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800442:	0f b6 00             	movzbl (%eax),%eax
+  800445:	84 c0                	test   %al,%al
+  800447:	74 04                	je     80044d <strncpy+0x27>
+            src ++;
+  800449:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  80044d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800451:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800455:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800459:	75 d9                	jne    800434 <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  80045b:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  80045e:	c9                   	leave  
+  80045f:	c3                   	ret    
+
+00800460 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800460:	55                   	push   %ebp
+  800461:	89 e5                	mov    %esp,%ebp
+  800463:	57                   	push   %edi
+  800464:	56                   	push   %esi
+  800465:	83 ec 20             	sub    $0x20,%esp
+  800468:	8b 45 08             	mov    0x8(%ebp),%eax
+  80046b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80046e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800471:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800474:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800477:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80047a:	89 d1                	mov    %edx,%ecx
+  80047c:	89 c2                	mov    %eax,%edx
+  80047e:	89 ce                	mov    %ecx,%esi
+  800480:	89 d7                	mov    %edx,%edi
+  800482:	ac                   	lods   %ds:(%esi),%al
+  800483:	ae                   	scas   %es:(%edi),%al
+  800484:	75 08                	jne    80048e <strcmp+0x2e>
+  800486:	84 c0                	test   %al,%al
+  800488:	75 f8                	jne    800482 <strcmp+0x22>
+  80048a:	31 c0                	xor    %eax,%eax
+  80048c:	eb 04                	jmp    800492 <strcmp+0x32>
+  80048e:	19 c0                	sbb    %eax,%eax
+  800490:	0c 01                	or     $0x1,%al
+  800492:	89 fa                	mov    %edi,%edx
+  800494:	89 f1                	mov    %esi,%ecx
+  800496:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800499:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  80049c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  80049f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  8004a2:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  8004a3:	83 c4 20             	add    $0x20,%esp
+  8004a6:	5e                   	pop    %esi
+  8004a7:	5f                   	pop    %edi
+  8004a8:	5d                   	pop    %ebp
+  8004a9:	c3                   	ret    
+
+008004aa <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  8004aa:	55                   	push   %ebp
+  8004ab:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004ad:	eb 0c                	jmp    8004bb <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  8004af:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  8004b3:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8004b7:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004bb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004bf:	74 1a                	je     8004db <strncmp+0x31>
+  8004c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004c4:	0f b6 00             	movzbl (%eax),%eax
+  8004c7:	84 c0                	test   %al,%al
+  8004c9:	74 10                	je     8004db <strncmp+0x31>
+  8004cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004ce:	0f b6 10             	movzbl (%eax),%edx
+  8004d1:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004d4:	0f b6 00             	movzbl (%eax),%eax
+  8004d7:	38 c2                	cmp    %al,%dl
+  8004d9:	74 d4                	je     8004af <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004db:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004df:	74 18                	je     8004f9 <strncmp+0x4f>
+  8004e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e4:	0f b6 00             	movzbl (%eax),%eax
+  8004e7:	0f b6 d0             	movzbl %al,%edx
+  8004ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ed:	0f b6 00             	movzbl (%eax),%eax
+  8004f0:	0f b6 c0             	movzbl %al,%eax
+  8004f3:	29 c2                	sub    %eax,%edx
+  8004f5:	89 d0                	mov    %edx,%eax
+  8004f7:	eb 05                	jmp    8004fe <strncmp+0x54>
+  8004f9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8004fe:	5d                   	pop    %ebp
+  8004ff:	c3                   	ret    
+
+00800500 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800500:	55                   	push   %ebp
+  800501:	89 e5                	mov    %esp,%ebp
+  800503:	83 ec 04             	sub    $0x4,%esp
+  800506:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800509:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  80050c:	eb 14                	jmp    800522 <strchr+0x22>
+        if (*s == c) {
+  80050e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800511:	0f b6 00             	movzbl (%eax),%eax
+  800514:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800517:	75 05                	jne    80051e <strchr+0x1e>
+            return (char *)s;
+  800519:	8b 45 08             	mov    0x8(%ebp),%eax
+  80051c:	eb 13                	jmp    800531 <strchr+0x31>
+        }
+        s ++;
+  80051e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800522:	8b 45 08             	mov    0x8(%ebp),%eax
+  800525:	0f b6 00             	movzbl (%eax),%eax
+  800528:	84 c0                	test   %al,%al
+  80052a:	75 e2                	jne    80050e <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  80052c:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800531:	c9                   	leave  
+  800532:	c3                   	ret    
+
+00800533 <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800533:	55                   	push   %ebp
+  800534:	89 e5                	mov    %esp,%ebp
+  800536:	83 ec 04             	sub    $0x4,%esp
+  800539:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80053c:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  80053f:	eb 0f                	jmp    800550 <strfind+0x1d>
+        if (*s == c) {
+  800541:	8b 45 08             	mov    0x8(%ebp),%eax
+  800544:	0f b6 00             	movzbl (%eax),%eax
+  800547:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  80054a:	74 10                	je     80055c <strfind+0x29>
+            break;
+        }
+        s ++;
+  80054c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800550:	8b 45 08             	mov    0x8(%ebp),%eax
+  800553:	0f b6 00             	movzbl (%eax),%eax
+  800556:	84 c0                	test   %al,%al
+  800558:	75 e7                	jne    800541 <strfind+0xe>
+  80055a:	eb 01                	jmp    80055d <strfind+0x2a>
+        if (*s == c) {
+            break;
+  80055c:	90                   	nop
+        }
+        s ++;
+    }
+    return (char *)s;
+  80055d:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800560:	c9                   	leave  
+  800561:	c3                   	ret    
+
+00800562 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800562:	55                   	push   %ebp
+  800563:	89 e5                	mov    %esp,%ebp
+  800565:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800568:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  80056f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800576:	eb 04                	jmp    80057c <strtol+0x1a>
+        s ++;
+  800578:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80057c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80057f:	0f b6 00             	movzbl (%eax),%eax
+  800582:	3c 20                	cmp    $0x20,%al
+  800584:	74 f2                	je     800578 <strtol+0x16>
+  800586:	8b 45 08             	mov    0x8(%ebp),%eax
+  800589:	0f b6 00             	movzbl (%eax),%eax
+  80058c:	3c 09                	cmp    $0x9,%al
+  80058e:	74 e8                	je     800578 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800590:	8b 45 08             	mov    0x8(%ebp),%eax
+  800593:	0f b6 00             	movzbl (%eax),%eax
+  800596:	3c 2b                	cmp    $0x2b,%al
+  800598:	75 06                	jne    8005a0 <strtol+0x3e>
+        s ++;
+  80059a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  80059e:	eb 15                	jmp    8005b5 <strtol+0x53>
+    }
+    else if (*s == '-') {
+  8005a0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a3:	0f b6 00             	movzbl (%eax),%eax
+  8005a6:	3c 2d                	cmp    $0x2d,%al
+  8005a8:	75 0b                	jne    8005b5 <strtol+0x53>
+        s ++, neg = 1;
+  8005aa:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005ae:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  8005b5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005b9:	74 06                	je     8005c1 <strtol+0x5f>
+  8005bb:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  8005bf:	75 24                	jne    8005e5 <strtol+0x83>
+  8005c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005c4:	0f b6 00             	movzbl (%eax),%eax
+  8005c7:	3c 30                	cmp    $0x30,%al
+  8005c9:	75 1a                	jne    8005e5 <strtol+0x83>
+  8005cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ce:	83 c0 01             	add    $0x1,%eax
+  8005d1:	0f b6 00             	movzbl (%eax),%eax
+  8005d4:	3c 78                	cmp    $0x78,%al
+  8005d6:	75 0d                	jne    8005e5 <strtol+0x83>
+        s += 2, base = 16;
+  8005d8:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005dc:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005e3:	eb 2a                	jmp    80060f <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005e5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005e9:	75 17                	jne    800602 <strtol+0xa0>
+  8005eb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ee:	0f b6 00             	movzbl (%eax),%eax
+  8005f1:	3c 30                	cmp    $0x30,%al
+  8005f3:	75 0d                	jne    800602 <strtol+0xa0>
+        s ++, base = 8;
+  8005f5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005f9:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800600:	eb 0d                	jmp    80060f <strtol+0xad>
+    }
+    else if (base == 0) {
+  800602:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800606:	75 07                	jne    80060f <strtol+0xad>
+        base = 10;
+  800608:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  80060f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800612:	0f b6 00             	movzbl (%eax),%eax
+  800615:	3c 2f                	cmp    $0x2f,%al
+  800617:	7e 1b                	jle    800634 <strtol+0xd2>
+  800619:	8b 45 08             	mov    0x8(%ebp),%eax
+  80061c:	0f b6 00             	movzbl (%eax),%eax
+  80061f:	3c 39                	cmp    $0x39,%al
+  800621:	7f 11                	jg     800634 <strtol+0xd2>
+            dig = *s - '0';
+  800623:	8b 45 08             	mov    0x8(%ebp),%eax
+  800626:	0f b6 00             	movzbl (%eax),%eax
+  800629:	0f be c0             	movsbl %al,%eax
+  80062c:	83 e8 30             	sub    $0x30,%eax
+  80062f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800632:	eb 48                	jmp    80067c <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800634:	8b 45 08             	mov    0x8(%ebp),%eax
+  800637:	0f b6 00             	movzbl (%eax),%eax
+  80063a:	3c 60                	cmp    $0x60,%al
+  80063c:	7e 1b                	jle    800659 <strtol+0xf7>
+  80063e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800641:	0f b6 00             	movzbl (%eax),%eax
+  800644:	3c 7a                	cmp    $0x7a,%al
+  800646:	7f 11                	jg     800659 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800648:	8b 45 08             	mov    0x8(%ebp),%eax
+  80064b:	0f b6 00             	movzbl (%eax),%eax
+  80064e:	0f be c0             	movsbl %al,%eax
+  800651:	83 e8 57             	sub    $0x57,%eax
+  800654:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800657:	eb 23                	jmp    80067c <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800659:	8b 45 08             	mov    0x8(%ebp),%eax
+  80065c:	0f b6 00             	movzbl (%eax),%eax
+  80065f:	3c 40                	cmp    $0x40,%al
+  800661:	7e 3c                	jle    80069f <strtol+0x13d>
+  800663:	8b 45 08             	mov    0x8(%ebp),%eax
+  800666:	0f b6 00             	movzbl (%eax),%eax
+  800669:	3c 5a                	cmp    $0x5a,%al
+  80066b:	7f 32                	jg     80069f <strtol+0x13d>
+            dig = *s - 'A' + 10;
+  80066d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800670:	0f b6 00             	movzbl (%eax),%eax
+  800673:	0f be c0             	movsbl %al,%eax
+  800676:	83 e8 37             	sub    $0x37,%eax
+  800679:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  80067c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80067f:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800682:	7d 1a                	jge    80069e <strtol+0x13c>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  800684:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800688:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80068b:	0f af 45 10          	imul   0x10(%ebp),%eax
+  80068f:	89 c2                	mov    %eax,%edx
+  800691:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800694:	01 d0                	add    %edx,%eax
+  800696:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800699:	e9 71 ff ff ff       	jmp    80060f <strtol+0xad>
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+            break;
+  80069e:	90                   	nop
+        }
+        s ++, val = (val * base) + dig;
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  80069f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8006a3:	74 08                	je     8006ad <strtol+0x14b>
+        *endptr = (char *) s;
+  8006a5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006a8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006ab:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  8006ad:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  8006b1:	74 07                	je     8006ba <strtol+0x158>
+  8006b3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006b6:	f7 d8                	neg    %eax
+  8006b8:	eb 03                	jmp    8006bd <strtol+0x15b>
+  8006ba:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  8006bd:	c9                   	leave  
+  8006be:	c3                   	ret    
+
+008006bf <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  8006bf:	55                   	push   %ebp
+  8006c0:	89 e5                	mov    %esp,%ebp
+  8006c2:	57                   	push   %edi
+  8006c3:	83 ec 24             	sub    $0x24,%esp
+  8006c6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006c9:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006cc:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006d0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006d3:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006d6:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006d9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006df:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006e2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006e6:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006e9:	89 d7                	mov    %edx,%edi
+  8006eb:	f3 aa                	rep stos %al,%es:(%edi)
+  8006ed:	89 fa                	mov    %edi,%edx
+  8006ef:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8006f2:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  8006f5:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006f8:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  8006f9:	83 c4 24             	add    $0x24,%esp
+  8006fc:	5f                   	pop    %edi
+  8006fd:	5d                   	pop    %ebp
+  8006fe:	c3                   	ret    
+
+008006ff <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  8006ff:	55                   	push   %ebp
+  800700:	89 e5                	mov    %esp,%ebp
+  800702:	57                   	push   %edi
+  800703:	56                   	push   %esi
+  800704:	53                   	push   %ebx
+  800705:	83 ec 30             	sub    $0x30,%esp
+  800708:	8b 45 08             	mov    0x8(%ebp),%eax
+  80070b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80070e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800711:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800714:	8b 45 10             	mov    0x10(%ebp),%eax
+  800717:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  80071a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80071d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800720:	73 42                	jae    800764 <memmove+0x65>
+  800722:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800725:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800728:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80072b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80072e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800731:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800734:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800737:	c1 e8 02             	shr    $0x2,%eax
+  80073a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  80073c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  80073f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800742:	89 d7                	mov    %edx,%edi
+  800744:	89 c6                	mov    %eax,%esi
+  800746:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800748:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  80074b:	83 e1 03             	and    $0x3,%ecx
+  80074e:	74 02                	je     800752 <memmove+0x53>
+  800750:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800752:	89 f0                	mov    %esi,%eax
+  800754:	89 fa                	mov    %edi,%edx
+  800756:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800759:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  80075c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  80075f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  800762:	eb 36                	jmp    80079a <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800764:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800767:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80076a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80076d:	01 c2                	add    %eax,%edx
+  80076f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800772:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800775:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800778:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  80077b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80077e:	89 c1                	mov    %eax,%ecx
+  800780:	89 d8                	mov    %ebx,%eax
+  800782:	89 d6                	mov    %edx,%esi
+  800784:	89 c7                	mov    %eax,%edi
+  800786:	fd                   	std    
+  800787:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800789:	fc                   	cld    
+  80078a:	89 f8                	mov    %edi,%eax
+  80078c:	89 f2                	mov    %esi,%edx
+  80078e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800791:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800794:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800797:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  80079a:	83 c4 30             	add    $0x30,%esp
+  80079d:	5b                   	pop    %ebx
+  80079e:	5e                   	pop    %esi
+  80079f:	5f                   	pop    %edi
+  8007a0:	5d                   	pop    %ebp
+  8007a1:	c3                   	ret    
+
+008007a2 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  8007a2:	55                   	push   %ebp
+  8007a3:	89 e5                	mov    %esp,%ebp
+  8007a5:	57                   	push   %edi
+  8007a6:	56                   	push   %esi
+  8007a7:	83 ec 20             	sub    $0x20,%esp
+  8007aa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8007b0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007b6:	8b 45 10             	mov    0x10(%ebp),%eax
+  8007b9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  8007bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8007bf:	c1 e8 02             	shr    $0x2,%eax
+  8007c2:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  8007c4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007ca:	89 d7                	mov    %edx,%edi
+  8007cc:	89 c6                	mov    %eax,%esi
+  8007ce:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007d0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007d3:	83 e1 03             	and    $0x3,%ecx
+  8007d6:	74 02                	je     8007da <memcpy+0x38>
+  8007d8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007da:	89 f0                	mov    %esi,%eax
+  8007dc:	89 fa                	mov    %edi,%edx
+  8007de:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007e1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007e4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  8007e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007ea:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007eb:	83 c4 20             	add    $0x20,%esp
+  8007ee:	5e                   	pop    %esi
+  8007ef:	5f                   	pop    %edi
+  8007f0:	5d                   	pop    %ebp
+  8007f1:	c3                   	ret    
+
+008007f2 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  8007f2:	55                   	push   %ebp
+  8007f3:	89 e5                	mov    %esp,%ebp
+  8007f5:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  8007f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007fb:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  8007fe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800801:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800804:	eb 30                	jmp    800836 <memcmp+0x44>
+        if (*s1 != *s2) {
+  800806:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800809:	0f b6 10             	movzbl (%eax),%edx
+  80080c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80080f:	0f b6 00             	movzbl (%eax),%eax
+  800812:	38 c2                	cmp    %al,%dl
+  800814:	74 18                	je     80082e <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800816:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800819:	0f b6 00             	movzbl (%eax),%eax
+  80081c:	0f b6 d0             	movzbl %al,%edx
+  80081f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800822:	0f b6 00             	movzbl (%eax),%eax
+  800825:	0f b6 c0             	movzbl %al,%eax
+  800828:	29 c2                	sub    %eax,%edx
+  80082a:	89 d0                	mov    %edx,%eax
+  80082c:	eb 1a                	jmp    800848 <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  80082e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800832:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800836:	8b 45 10             	mov    0x10(%ebp),%eax
+  800839:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80083c:	89 55 10             	mov    %edx,0x10(%ebp)
+  80083f:	85 c0                	test   %eax,%eax
+  800841:	75 c3                	jne    800806 <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800843:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800848:	c9                   	leave  
+  800849:	c3                   	ret    
+
+0080084a <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  80084a:	55                   	push   %ebp
+  80084b:	89 e5                	mov    %esp,%ebp
+  80084d:	83 ec 38             	sub    $0x38,%esp
+  800850:	8b 45 10             	mov    0x10(%ebp),%eax
+  800853:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800856:	8b 45 14             	mov    0x14(%ebp),%eax
+  800859:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80085c:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  80085f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800862:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800865:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800868:	8b 45 18             	mov    0x18(%ebp),%eax
+  80086b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  80086e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800871:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800874:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800877:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  80087a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80087d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800880:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800884:	74 1c                	je     8008a2 <printnum+0x58>
+  800886:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800889:	ba 00 00 00 00       	mov    $0x0,%edx
+  80088e:	f7 75 e4             	divl   -0x1c(%ebp)
+  800891:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800894:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800897:	ba 00 00 00 00       	mov    $0x0,%edx
+  80089c:	f7 75 e4             	divl   -0x1c(%ebp)
+  80089f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008a2:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008a8:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008ab:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8008ae:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8008b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008b4:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8008b7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8008ba:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8008bd:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8008c0:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8008c3:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008c6:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008cb:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008ce:	77 41                	ja     800911 <printnum+0xc7>
+  8008d0:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008d3:	72 05                	jb     8008da <printnum+0x90>
+  8008d5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  8008d8:	77 37                	ja     800911 <printnum+0xc7>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008da:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008dd:	83 e8 01             	sub    $0x1,%eax
+  8008e0:	83 ec 04             	sub    $0x4,%esp
+  8008e3:	ff 75 20             	pushl  0x20(%ebp)
+  8008e6:	50                   	push   %eax
+  8008e7:	ff 75 18             	pushl  0x18(%ebp)
+  8008ea:	ff 75 ec             	pushl  -0x14(%ebp)
+  8008ed:	ff 75 e8             	pushl  -0x18(%ebp)
+  8008f0:	ff 75 0c             	pushl  0xc(%ebp)
+  8008f3:	ff 75 08             	pushl  0x8(%ebp)
+  8008f6:	e8 4f ff ff ff       	call   80084a <printnum>
+  8008fb:	83 c4 20             	add    $0x20,%esp
+  8008fe:	eb 1b                	jmp    80091b <printnum+0xd1>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800900:	83 ec 08             	sub    $0x8,%esp
+  800903:	ff 75 0c             	pushl  0xc(%ebp)
+  800906:	ff 75 20             	pushl  0x20(%ebp)
+  800909:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090c:	ff d0                	call   *%eax
+  80090e:	83 c4 10             	add    $0x10,%esp
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  800911:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  800915:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  800919:	7f e5                	jg     800900 <printnum+0xb6>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  80091b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  80091e:	05 e4 11 80 00       	add    $0x8011e4,%eax
+  800923:	0f b6 00             	movzbl (%eax),%eax
+  800926:	0f be c0             	movsbl %al,%eax
+  800929:	83 ec 08             	sub    $0x8,%esp
+  80092c:	ff 75 0c             	pushl  0xc(%ebp)
+  80092f:	50                   	push   %eax
+  800930:	8b 45 08             	mov    0x8(%ebp),%eax
+  800933:	ff d0                	call   *%eax
+  800935:	83 c4 10             	add    $0x10,%esp
+}
+  800938:	90                   	nop
+  800939:	c9                   	leave  
+  80093a:	c3                   	ret    
+
+0080093b <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  80093b:	55                   	push   %ebp
+  80093c:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  80093e:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800942:	7e 14                	jle    800958 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  800944:	8b 45 08             	mov    0x8(%ebp),%eax
+  800947:	8b 00                	mov    (%eax),%eax
+  800949:	8d 48 08             	lea    0x8(%eax),%ecx
+  80094c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80094f:	89 0a                	mov    %ecx,(%edx)
+  800951:	8b 50 04             	mov    0x4(%eax),%edx
+  800954:	8b 00                	mov    (%eax),%eax
+  800956:	eb 30                	jmp    800988 <getuint+0x4d>
+    }
+    else if (lflag) {
+  800958:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80095c:	74 16                	je     800974 <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  80095e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800961:	8b 00                	mov    (%eax),%eax
+  800963:	8d 48 04             	lea    0x4(%eax),%ecx
+  800966:	8b 55 08             	mov    0x8(%ebp),%edx
+  800969:	89 0a                	mov    %ecx,(%edx)
+  80096b:	8b 00                	mov    (%eax),%eax
+  80096d:	ba 00 00 00 00       	mov    $0x0,%edx
+  800972:	eb 14                	jmp    800988 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  800974:	8b 45 08             	mov    0x8(%ebp),%eax
+  800977:	8b 00                	mov    (%eax),%eax
+  800979:	8d 48 04             	lea    0x4(%eax),%ecx
+  80097c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80097f:	89 0a                	mov    %ecx,(%edx)
+  800981:	8b 00                	mov    (%eax),%eax
+  800983:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800988:	5d                   	pop    %ebp
+  800989:	c3                   	ret    
+
+0080098a <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  80098a:	55                   	push   %ebp
+  80098b:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  80098d:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800991:	7e 14                	jle    8009a7 <getint+0x1d>
+        return va_arg(*ap, long long);
+  800993:	8b 45 08             	mov    0x8(%ebp),%eax
+  800996:	8b 00                	mov    (%eax),%eax
+  800998:	8d 48 08             	lea    0x8(%eax),%ecx
+  80099b:	8b 55 08             	mov    0x8(%ebp),%edx
+  80099e:	89 0a                	mov    %ecx,(%edx)
+  8009a0:	8b 50 04             	mov    0x4(%eax),%edx
+  8009a3:	8b 00                	mov    (%eax),%eax
+  8009a5:	eb 28                	jmp    8009cf <getint+0x45>
+    }
+    else if (lflag) {
+  8009a7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8009ab:	74 12                	je     8009bf <getint+0x35>
+        return va_arg(*ap, long);
+  8009ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b0:	8b 00                	mov    (%eax),%eax
+  8009b2:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009b5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009b8:	89 0a                	mov    %ecx,(%edx)
+  8009ba:	8b 00                	mov    (%eax),%eax
+  8009bc:	99                   	cltd   
+  8009bd:	eb 10                	jmp    8009cf <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  8009bf:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009c2:	8b 00                	mov    (%eax),%eax
+  8009c4:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009c7:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009ca:	89 0a                	mov    %ecx,(%edx)
+  8009cc:	8b 00                	mov    (%eax),%eax
+  8009ce:	99                   	cltd   
+    }
+}
+  8009cf:	5d                   	pop    %ebp
+  8009d0:	c3                   	ret    
+
+008009d1 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009d1:	55                   	push   %ebp
+  8009d2:	89 e5                	mov    %esp,%ebp
+  8009d4:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009d7:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009da:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8009e0:	50                   	push   %eax
+  8009e1:	ff 75 10             	pushl  0x10(%ebp)
+  8009e4:	ff 75 0c             	pushl  0xc(%ebp)
+  8009e7:	ff 75 08             	pushl  0x8(%ebp)
+  8009ea:	e8 06 00 00 00       	call   8009f5 <vprintfmt>
+  8009ef:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8009f2:	90                   	nop
+  8009f3:	c9                   	leave  
+  8009f4:	c3                   	ret    
+
+008009f5 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8009f5:	55                   	push   %ebp
+  8009f6:	89 e5                	mov    %esp,%ebp
+  8009f8:	56                   	push   %esi
+  8009f9:	53                   	push   %ebx
+  8009fa:	83 ec 20             	sub    $0x20,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009fd:	eb 17                	jmp    800a16 <vprintfmt+0x21>
+            if (ch == '\0') {
+  8009ff:	85 db                	test   %ebx,%ebx
+  800a01:	0f 84 8e 03 00 00    	je     800d95 <vprintfmt+0x3a0>
+                return;
+            }
+            putch(ch, putdat);
+  800a07:	83 ec 08             	sub    $0x8,%esp
+  800a0a:	ff 75 0c             	pushl  0xc(%ebp)
+  800a0d:	53                   	push   %ebx
+  800a0e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a11:	ff d0                	call   *%eax
+  800a13:	83 c4 10             	add    $0x10,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a16:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a19:	8d 50 01             	lea    0x1(%eax),%edx
+  800a1c:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a1f:	0f b6 00             	movzbl (%eax),%eax
+  800a22:	0f b6 d8             	movzbl %al,%ebx
+  800a25:	83 fb 25             	cmp    $0x25,%ebx
+  800a28:	75 d5                	jne    8009ff <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a2a:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a2e:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a38:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a3b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a42:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a45:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a48:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a4b:	8d 50 01             	lea    0x1(%eax),%edx
+  800a4e:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a51:	0f b6 00             	movzbl (%eax),%eax
+  800a54:	0f b6 d8             	movzbl %al,%ebx
+  800a57:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a5a:	83 f8 55             	cmp    $0x55,%eax
+  800a5d:	0f 87 05 03 00 00    	ja     800d68 <vprintfmt+0x373>
+  800a63:	8b 04 85 08 12 80 00 	mov    0x801208(,%eax,4),%eax
+  800a6a:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a6c:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a70:	eb d6                	jmp    800a48 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a72:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800a76:	eb d0                	jmp    800a48 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a78:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800a7f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a82:	89 d0                	mov    %edx,%eax
+  800a84:	c1 e0 02             	shl    $0x2,%eax
+  800a87:	01 d0                	add    %edx,%eax
+  800a89:	01 c0                	add    %eax,%eax
+  800a8b:	01 d8                	add    %ebx,%eax
+  800a8d:	83 e8 30             	sub    $0x30,%eax
+  800a90:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800a93:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a96:	0f b6 00             	movzbl (%eax),%eax
+  800a99:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800a9c:	83 fb 2f             	cmp    $0x2f,%ebx
+  800a9f:	7e 39                	jle    800ada <vprintfmt+0xe5>
+  800aa1:	83 fb 39             	cmp    $0x39,%ebx
+  800aa4:	7f 34                	jg     800ada <vprintfmt+0xe5>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800aa6:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  800aaa:	eb d3                	jmp    800a7f <vprintfmt+0x8a>
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800aac:	8b 45 14             	mov    0x14(%ebp),%eax
+  800aaf:	8d 50 04             	lea    0x4(%eax),%edx
+  800ab2:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ab5:	8b 00                	mov    (%eax),%eax
+  800ab7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800aba:	eb 1f                	jmp    800adb <vprintfmt+0xe6>
+
+        case '.':
+            if (width < 0)
+  800abc:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ac0:	79 86                	jns    800a48 <vprintfmt+0x53>
+                width = 0;
+  800ac2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800ac9:	e9 7a ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800ace:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800ad5:	e9 6e ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+            goto process_precision;
+  800ada:	90                   	nop
+        case '#':
+            altflag = 1;
+            goto reswitch;
+
+        process_precision:
+            if (width < 0)
+  800adb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800adf:	0f 89 63 ff ff ff    	jns    800a48 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800ae5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ae8:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800aeb:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800af2:	e9 51 ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800af7:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800afb:	e9 48 ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800b00:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b03:	8d 50 04             	lea    0x4(%eax),%edx
+  800b06:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b09:	8b 00                	mov    (%eax),%eax
+  800b0b:	83 ec 08             	sub    $0x8,%esp
+  800b0e:	ff 75 0c             	pushl  0xc(%ebp)
+  800b11:	50                   	push   %eax
+  800b12:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b15:	ff d0                	call   *%eax
+  800b17:	83 c4 10             	add    $0x10,%esp
+            break;
+  800b1a:	e9 71 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800b1f:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b22:	8d 50 04             	lea    0x4(%eax),%edx
+  800b25:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b28:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b2a:	85 db                	test   %ebx,%ebx
+  800b2c:	79 02                	jns    800b30 <vprintfmt+0x13b>
+                err = -err;
+  800b2e:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b30:	83 fb 18             	cmp    $0x18,%ebx
+  800b33:	7f 0b                	jg     800b40 <vprintfmt+0x14b>
+  800b35:	8b 34 9d 80 11 80 00 	mov    0x801180(,%ebx,4),%esi
+  800b3c:	85 f6                	test   %esi,%esi
+  800b3e:	75 19                	jne    800b59 <vprintfmt+0x164>
+                printfmt(putch, putdat, "error %d", err);
+  800b40:	53                   	push   %ebx
+  800b41:	68 f5 11 80 00       	push   $0x8011f5
+  800b46:	ff 75 0c             	pushl  0xc(%ebp)
+  800b49:	ff 75 08             	pushl  0x8(%ebp)
+  800b4c:	e8 80 fe ff ff       	call   8009d1 <printfmt>
+  800b51:	83 c4 10             	add    $0x10,%esp
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b54:	e9 37 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  800b59:	56                   	push   %esi
+  800b5a:	68 fe 11 80 00       	push   $0x8011fe
+  800b5f:	ff 75 0c             	pushl  0xc(%ebp)
+  800b62:	ff 75 08             	pushl  0x8(%ebp)
+  800b65:	e8 67 fe ff ff       	call   8009d1 <printfmt>
+  800b6a:	83 c4 10             	add    $0x10,%esp
+            }
+            break;
+  800b6d:	e9 1e 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800b72:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b75:	8d 50 04             	lea    0x4(%eax),%edx
+  800b78:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b7b:	8b 30                	mov    (%eax),%esi
+  800b7d:	85 f6                	test   %esi,%esi
+  800b7f:	75 05                	jne    800b86 <vprintfmt+0x191>
+                p = "(null)";
+  800b81:	be 01 12 80 00       	mov    $0x801201,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800b86:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b8a:	7e 76                	jle    800c02 <vprintfmt+0x20d>
+  800b8c:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800b90:	74 70                	je     800c02 <vprintfmt+0x20d>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b92:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b95:	83 ec 08             	sub    $0x8,%esp
+  800b98:	50                   	push   %eax
+  800b99:	56                   	push   %esi
+  800b9a:	e8 17 f8 ff ff       	call   8003b6 <strnlen>
+  800b9f:	83 c4 10             	add    $0x10,%esp
+  800ba2:	89 c2                	mov    %eax,%edx
+  800ba4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ba7:	29 d0                	sub    %edx,%eax
+  800ba9:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800bac:	eb 17                	jmp    800bc5 <vprintfmt+0x1d0>
+                    putch(padc, putdat);
+  800bae:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800bb2:	83 ec 08             	sub    $0x8,%esp
+  800bb5:	ff 75 0c             	pushl  0xc(%ebp)
+  800bb8:	50                   	push   %eax
+  800bb9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bbc:	ff d0                	call   *%eax
+  800bbe:	83 c4 10             	add    $0x10,%esp
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bc1:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800bc5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800bc9:	7f e3                	jg     800bae <vprintfmt+0x1b9>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bcb:	eb 35                	jmp    800c02 <vprintfmt+0x20d>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800bcd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800bd1:	74 1c                	je     800bef <vprintfmt+0x1fa>
+  800bd3:	83 fb 1f             	cmp    $0x1f,%ebx
+  800bd6:	7e 05                	jle    800bdd <vprintfmt+0x1e8>
+  800bd8:	83 fb 7e             	cmp    $0x7e,%ebx
+  800bdb:	7e 12                	jle    800bef <vprintfmt+0x1fa>
+                    putch('?', putdat);
+  800bdd:	83 ec 08             	sub    $0x8,%esp
+  800be0:	ff 75 0c             	pushl  0xc(%ebp)
+  800be3:	6a 3f                	push   $0x3f
+  800be5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800be8:	ff d0                	call   *%eax
+  800bea:	83 c4 10             	add    $0x10,%esp
+  800bed:	eb 0f                	jmp    800bfe <vprintfmt+0x209>
+                }
+                else {
+                    putch(ch, putdat);
+  800bef:	83 ec 08             	sub    $0x8,%esp
+  800bf2:	ff 75 0c             	pushl  0xc(%ebp)
+  800bf5:	53                   	push   %ebx
+  800bf6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bf9:	ff d0                	call   *%eax
+  800bfb:	83 c4 10             	add    $0x10,%esp
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bfe:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c02:	89 f0                	mov    %esi,%eax
+  800c04:	8d 70 01             	lea    0x1(%eax),%esi
+  800c07:	0f b6 00             	movzbl (%eax),%eax
+  800c0a:	0f be d8             	movsbl %al,%ebx
+  800c0d:	85 db                	test   %ebx,%ebx
+  800c0f:	74 26                	je     800c37 <vprintfmt+0x242>
+  800c11:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c15:	78 b6                	js     800bcd <vprintfmt+0x1d8>
+  800c17:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  800c1b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c1f:	79 ac                	jns    800bcd <vprintfmt+0x1d8>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c21:	eb 14                	jmp    800c37 <vprintfmt+0x242>
+                putch(' ', putdat);
+  800c23:	83 ec 08             	sub    $0x8,%esp
+  800c26:	ff 75 0c             	pushl  0xc(%ebp)
+  800c29:	6a 20                	push   $0x20
+  800c2b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2e:	ff d0                	call   *%eax
+  800c30:	83 c4 10             	add    $0x10,%esp
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c33:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c37:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c3b:	7f e6                	jg     800c23 <vprintfmt+0x22e>
+                putch(' ', putdat);
+            }
+            break;
+  800c3d:	e9 4e 01 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c42:	83 ec 08             	sub    $0x8,%esp
+  800c45:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c48:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c4b:	50                   	push   %eax
+  800c4c:	e8 39 fd ff ff       	call   80098a <getint>
+  800c51:	83 c4 10             	add    $0x10,%esp
+  800c54:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c57:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c5d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c60:	85 d2                	test   %edx,%edx
+  800c62:	79 23                	jns    800c87 <vprintfmt+0x292>
+                putch('-', putdat);
+  800c64:	83 ec 08             	sub    $0x8,%esp
+  800c67:	ff 75 0c             	pushl  0xc(%ebp)
+  800c6a:	6a 2d                	push   $0x2d
+  800c6c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c6f:	ff d0                	call   *%eax
+  800c71:	83 c4 10             	add    $0x10,%esp
+                num = -(long long)num;
+  800c74:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c77:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c7a:	f7 d8                	neg    %eax
+  800c7c:	83 d2 00             	adc    $0x0,%edx
+  800c7f:	f7 da                	neg    %edx
+  800c81:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c84:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800c87:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c8e:	e9 9f 00 00 00       	jmp    800d32 <vprintfmt+0x33d>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800c93:	83 ec 08             	sub    $0x8,%esp
+  800c96:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c99:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c9c:	50                   	push   %eax
+  800c9d:	e8 99 fc ff ff       	call   80093b <getuint>
+  800ca2:	83 c4 10             	add    $0x10,%esp
+  800ca5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ca8:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800cab:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cb2:	eb 7e                	jmp    800d32 <vprintfmt+0x33d>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800cb4:	83 ec 08             	sub    $0x8,%esp
+  800cb7:	ff 75 e0             	pushl  -0x20(%ebp)
+  800cba:	8d 45 14             	lea    0x14(%ebp),%eax
+  800cbd:	50                   	push   %eax
+  800cbe:	e8 78 fc ff ff       	call   80093b <getuint>
+  800cc3:	83 c4 10             	add    $0x10,%esp
+  800cc6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cc9:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800ccc:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800cd3:	eb 5d                	jmp    800d32 <vprintfmt+0x33d>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800cd5:	83 ec 08             	sub    $0x8,%esp
+  800cd8:	ff 75 0c             	pushl  0xc(%ebp)
+  800cdb:	6a 30                	push   $0x30
+  800cdd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ce0:	ff d0                	call   *%eax
+  800ce2:	83 c4 10             	add    $0x10,%esp
+            putch('x', putdat);
+  800ce5:	83 ec 08             	sub    $0x8,%esp
+  800ce8:	ff 75 0c             	pushl  0xc(%ebp)
+  800ceb:	6a 78                	push   $0x78
+  800ced:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cf0:	ff d0                	call   *%eax
+  800cf2:	83 c4 10             	add    $0x10,%esp
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800cf5:	8b 45 14             	mov    0x14(%ebp),%eax
+  800cf8:	8d 50 04             	lea    0x4(%eax),%edx
+  800cfb:	89 55 14             	mov    %edx,0x14(%ebp)
+  800cfe:	8b 00                	mov    (%eax),%eax
+  800d00:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d03:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800d0a:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800d11:	eb 1f                	jmp    800d32 <vprintfmt+0x33d>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800d13:	83 ec 08             	sub    $0x8,%esp
+  800d16:	ff 75 e0             	pushl  -0x20(%ebp)
+  800d19:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d1c:	50                   	push   %eax
+  800d1d:	e8 19 fc ff ff       	call   80093b <getuint>
+  800d22:	83 c4 10             	add    $0x10,%esp
+  800d25:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d28:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d2b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d32:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d36:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d39:	83 ec 04             	sub    $0x4,%esp
+  800d3c:	52                   	push   %edx
+  800d3d:	ff 75 e8             	pushl  -0x18(%ebp)
+  800d40:	50                   	push   %eax
+  800d41:	ff 75 f4             	pushl  -0xc(%ebp)
+  800d44:	ff 75 f0             	pushl  -0x10(%ebp)
+  800d47:	ff 75 0c             	pushl  0xc(%ebp)
+  800d4a:	ff 75 08             	pushl  0x8(%ebp)
+  800d4d:	e8 f8 fa ff ff       	call   80084a <printnum>
+  800d52:	83 c4 20             	add    $0x20,%esp
+            break;
+  800d55:	eb 39                	jmp    800d90 <vprintfmt+0x39b>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800d57:	83 ec 08             	sub    $0x8,%esp
+  800d5a:	ff 75 0c             	pushl  0xc(%ebp)
+  800d5d:	53                   	push   %ebx
+  800d5e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d61:	ff d0                	call   *%eax
+  800d63:	83 c4 10             	add    $0x10,%esp
+            break;
+  800d66:	eb 28                	jmp    800d90 <vprintfmt+0x39b>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800d68:	83 ec 08             	sub    $0x8,%esp
+  800d6b:	ff 75 0c             	pushl  0xc(%ebp)
+  800d6e:	6a 25                	push   $0x25
+  800d70:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d73:	ff d0                	call   *%eax
+  800d75:	83 c4 10             	add    $0x10,%esp
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800d78:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d7c:	eb 04                	jmp    800d82 <vprintfmt+0x38d>
+  800d7e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d82:	8b 45 10             	mov    0x10(%ebp),%eax
+  800d85:	83 e8 01             	sub    $0x1,%eax
+  800d88:	0f b6 00             	movzbl (%eax),%eax
+  800d8b:	3c 25                	cmp    $0x25,%al
+  800d8d:	75 ef                	jne    800d7e <vprintfmt+0x389>
+                /* do nothing */;
+            break;
+  800d8f:	90                   	nop
+        }
+    }
+  800d90:	e9 68 fc ff ff       	jmp    8009fd <vprintfmt+0x8>
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+            if (ch == '\0') {
+                return;
+  800d95:	90                   	nop
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  800d96:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  800d99:	5b                   	pop    %ebx
+  800d9a:	5e                   	pop    %esi
+  800d9b:	5d                   	pop    %ebp
+  800d9c:	c3                   	ret    
+
+00800d9d <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800d9d:	55                   	push   %ebp
+  800d9e:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800da0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800da3:	8b 40 08             	mov    0x8(%eax),%eax
+  800da6:	8d 50 01             	lea    0x1(%eax),%edx
+  800da9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dac:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800daf:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db2:	8b 10                	mov    (%eax),%edx
+  800db4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db7:	8b 40 04             	mov    0x4(%eax),%eax
+  800dba:	39 c2                	cmp    %eax,%edx
+  800dbc:	73 12                	jae    800dd0 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800dbe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dc1:	8b 00                	mov    (%eax),%eax
+  800dc3:	8d 48 01             	lea    0x1(%eax),%ecx
+  800dc6:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800dc9:	89 0a                	mov    %ecx,(%edx)
+  800dcb:	8b 55 08             	mov    0x8(%ebp),%edx
+  800dce:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800dd0:	90                   	nop
+  800dd1:	5d                   	pop    %ebp
+  800dd2:	c3                   	ret    
+
+00800dd3 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800dd3:	55                   	push   %ebp
+  800dd4:	89 e5                	mov    %esp,%ebp
+  800dd6:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800dd9:	8d 45 14             	lea    0x14(%ebp),%eax
+  800ddc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800ddf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800de2:	50                   	push   %eax
+  800de3:	ff 75 10             	pushl  0x10(%ebp)
+  800de6:	ff 75 0c             	pushl  0xc(%ebp)
+  800de9:	ff 75 08             	pushl  0x8(%ebp)
+  800dec:	e8 0b 00 00 00       	call   800dfc <vsnprintf>
+  800df1:	83 c4 10             	add    $0x10,%esp
+  800df4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800df7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800dfa:	c9                   	leave  
+  800dfb:	c3                   	ret    
+
+00800dfc <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800dfc:	55                   	push   %ebp
+  800dfd:	89 e5                	mov    %esp,%ebp
+  800dff:	83 ec 18             	sub    $0x18,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800e02:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e05:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e08:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e0b:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800e0e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e11:	01 d0                	add    %edx,%eax
+  800e13:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e16:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800e1d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800e21:	74 0a                	je     800e2d <vsnprintf+0x31>
+  800e23:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800e26:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e29:	39 c2                	cmp    %eax,%edx
+  800e2b:	76 07                	jbe    800e34 <vsnprintf+0x38>
+        return -E_INVAL;
+  800e2d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e32:	eb 20                	jmp    800e54 <vsnprintf+0x58>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e34:	ff 75 14             	pushl  0x14(%ebp)
+  800e37:	ff 75 10             	pushl  0x10(%ebp)
+  800e3a:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800e3d:	50                   	push   %eax
+  800e3e:	68 9d 0d 80 00       	push   $0x800d9d
+  800e43:	e8 ad fb ff ff       	call   8009f5 <vprintfmt>
+  800e48:	83 c4 10             	add    $0x10,%esp
+    // null terminate the buffer
+    *b.buf = '\0';
+  800e4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e4e:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800e51:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e54:	c9                   	leave  
+  800e55:	c3                   	ret    
+
+00800e56 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800e56:	55                   	push   %ebp
+  800e57:	89 e5                	mov    %esp,%ebp
+  800e59:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800e5c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e5f:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800e65:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800e68:	b8 20 00 00 00       	mov    $0x20,%eax
+  800e6d:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800e70:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800e73:	89 c1                	mov    %eax,%ecx
+  800e75:	d3 ea                	shr    %cl,%edx
+  800e77:	89 d0                	mov    %edx,%eax
+}
+  800e79:	c9                   	leave  
+  800e7a:	c3                   	ret    
+
+00800e7b <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800e7b:	55                   	push   %ebp
+  800e7c:	89 e5                	mov    %esp,%ebp
+  800e7e:	57                   	push   %edi
+  800e7f:	56                   	push   %esi
+  800e80:	53                   	push   %ebx
+  800e81:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800e84:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e89:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800e8f:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800e95:	6b f0 05             	imul   $0x5,%eax,%esi
+  800e98:	01 fe                	add    %edi,%esi
+  800e9a:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800e9f:	f7 e7                	mul    %edi
+  800ea1:	01 d6                	add    %edx,%esi
+  800ea3:	89 f2                	mov    %esi,%edx
+  800ea5:	83 c0 0b             	add    $0xb,%eax
+  800ea8:	83 d2 00             	adc    $0x0,%edx
+  800eab:	89 c7                	mov    %eax,%edi
+  800ead:	83 e7 ff             	and    $0xffffffff,%edi
+  800eb0:	89 f9                	mov    %edi,%ecx
+  800eb2:	0f b7 da             	movzwl %dx,%ebx
+  800eb5:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800ebb:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800ec1:	a1 00 20 80 00       	mov    0x802000,%eax
+  800ec6:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ecc:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ed0:	c1 ea 0c             	shr    $0xc,%edx
+  800ed3:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ed6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800ed9:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ee0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ee3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ee6:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ee9:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800eec:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eef:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ef2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ef6:	74 1c                	je     800f14 <rand+0x99>
+  800ef8:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800efb:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f00:	f7 75 dc             	divl   -0x24(%ebp)
+  800f03:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800f06:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f09:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f0e:	f7 75 dc             	divl   -0x24(%ebp)
+  800f11:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800f14:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f17:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800f1a:	f7 75 dc             	divl   -0x24(%ebp)
+  800f1d:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f20:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f23:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f26:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800f29:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f2c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f2f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800f32:	83 c4 24             	add    $0x24,%esp
+  800f35:	5b                   	pop    %ebx
+  800f36:	5e                   	pop    %esi
+  800f37:	5f                   	pop    %edi
+  800f38:	5d                   	pop    %ebp
+  800f39:	c3                   	ret    
+
+00800f3a <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800f3a:	55                   	push   %ebp
+  800f3b:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800f3d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f40:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f45:	a3 00 20 80 00       	mov    %eax,0x802000
+  800f4a:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800f50:	90                   	nop
+  800f51:	5d                   	pop    %ebp
+  800f52:	c3                   	ret    
+
+00800f53 <main>:
+#include <stdio.h>
+#include <ulib.h>
+
+int
+main(void) {
+  800f53:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  800f57:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f5a:	ff 71 fc             	pushl  -0x4(%ecx)
+  800f5d:	55                   	push   %ebp
+  800f5e:	89 e5                	mov    %esp,%ebp
+  800f60:	51                   	push   %ecx
+  800f61:	83 ec 14             	sub    $0x14,%esp
+    int pid, ret;
+    cprintf("I am the parent. Forking the child...\n");
+  800f64:	83 ec 0c             	sub    $0xc,%esp
+  800f67:	68 60 13 80 00       	push   $0x801360
+  800f6c:	e8 90 f3 ff ff       	call   800301 <cprintf>
+  800f71:	83 c4 10             	add    $0x10,%esp
+    pid = fork();
+  800f74:	e8 76 f2 ff ff       	call   8001ef <fork>
+  800f79:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    if (pid== 0) {
+  800f7c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+  800f80:	75 12                	jne    800f94 <main+0x41>
+        cprintf("I am the child. spinning ...\n");
+  800f82:	83 ec 0c             	sub    $0xc,%esp
+  800f85:	68 87 13 80 00       	push   $0x801387
+  800f8a:	e8 72 f3 ff ff       	call   800301 <cprintf>
+  800f8f:	83 c4 10             	add    $0x10,%esp
+        while (1);
+  800f92:	eb fe                	jmp    800f92 <main+0x3f>
+    }else if (pid<0) {
+  800f94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
+  800f98:	79 14                	jns    800fae <main+0x5b>
+        panic("fork child error\n");
+  800f9a:	83 ec 04             	sub    $0x4,%esp
+  800f9d:	68 a5 13 80 00       	push   $0x8013a5
+  800fa2:	6a 0d                	push   $0xd
+  800fa4:	68 b7 13 80 00       	push   $0x8013b7
+  800fa9:	e8 72 f0 ff ff       	call   800020 <__panic>
+    }
+    cprintf("I am the parent. Running the child...\n");
+  800fae:	83 ec 0c             	sub    $0xc,%esp
+  800fb1:	68 c4 13 80 00       	push   $0x8013c4
+  800fb6:	e8 46 f3 ff ff       	call   800301 <cprintf>
+  800fbb:	83 c4 10             	add    $0x10,%esp
+
+    yield();
+  800fbe:	e8 69 f2 ff ff       	call   80022c <yield>
+    yield();
+  800fc3:	e8 64 f2 ff ff       	call   80022c <yield>
+    yield();
+  800fc8:	e8 5f f2 ff ff       	call   80022c <yield>
+    
+    cprintf("I am the parent.  Killing the child...\n");
+  800fcd:	83 ec 0c             	sub    $0xc,%esp
+  800fd0:	68 ec 13 80 00       	push   $0x8013ec
+  800fd5:	e8 27 f3 ff ff       	call   800301 <cprintf>
+  800fda:	83 c4 10             	add    $0x10,%esp
+
+    assert((ret = kill(pid)) == 0);
+  800fdd:	83 ec 0c             	sub    $0xc,%esp
+  800fe0:	ff 75 f4             	pushl  -0xc(%ebp)
+  800fe3:	e8 52 f2 ff ff       	call   80023a <kill>
+  800fe8:	83 c4 10             	add    $0x10,%esp
+  800feb:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800fee:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800ff2:	74 16                	je     80100a <main+0xb7>
+  800ff4:	68 14 14 80 00       	push   $0x801414
+  800ff9:	68 2b 14 80 00       	push   $0x80142b
+  800ffe:	6a 17                	push   $0x17
+  801000:	68 b7 13 80 00       	push   $0x8013b7
+  801005:	e8 16 f0 ff ff       	call   800020 <__panic>
+    cprintf("kill returns %d\n", ret);
+  80100a:	83 ec 08             	sub    $0x8,%esp
+  80100d:	ff 75 f0             	pushl  -0x10(%ebp)
+  801010:	68 40 14 80 00       	push   $0x801440
+  801015:	e8 e7 f2 ff ff       	call   800301 <cprintf>
+  80101a:	83 c4 10             	add    $0x10,%esp
+
+    assert((ret = waitpid(pid, NULL)) == 0);
+  80101d:	83 ec 08             	sub    $0x8,%esp
+  801020:	6a 00                	push   $0x0
+  801022:	ff 75 f4             	pushl  -0xc(%ebp)
+  801025:	e8 e9 f1 ff ff       	call   800213 <waitpid>
+  80102a:	83 c4 10             	add    $0x10,%esp
+  80102d:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  801030:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  801034:	74 16                	je     80104c <main+0xf9>
+  801036:	68 54 14 80 00       	push   $0x801454
+  80103b:	68 2b 14 80 00       	push   $0x80142b
+  801040:	6a 1a                	push   $0x1a
+  801042:	68 b7 13 80 00       	push   $0x8013b7
+  801047:	e8 d4 ef ff ff       	call   800020 <__panic>
+    cprintf("wait returns %d\n", ret);
+  80104c:	83 ec 08             	sub    $0x8,%esp
+  80104f:	ff 75 f0             	pushl  -0x10(%ebp)
+  801052:	68 74 14 80 00       	push   $0x801474
+  801057:	e8 a5 f2 ff ff       	call   800301 <cprintf>
+  80105c:	83 c4 10             	add    $0x10,%esp
+
+    cprintf("spin may pass.\n");
+  80105f:	83 ec 0c             	sub    $0xc,%esp
+  801062:	68 85 14 80 00       	push   $0x801485
+  801067:	e8 95 f2 ff ff       	call   800301 <cprintf>
+  80106c:	83 c4 10             	add    $0x10,%esp
+    return 0;
+  80106f:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  801074:	8b 4d fc             	mov    -0x4(%ebp),%ecx
+  801077:	c9                   	leave  
+  801078:	8d 61 fc             	lea    -0x4(%ecx),%esp
+  80107b:	c3                   	ret    
diff -r -u -P lab7_original/obj/user/spin.d lab7/obj/user/spin.d
--- lab7_original/obj/user/spin.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/spin.d	2016-05-06 21:59:27.602122838 +0800
@@ -0,0 +1,2 @@
+obj/user/spin.o obj/user/spin.d: user/spin.c libs/stdio.h libs/defs.h \
+ libs/stdarg.h user/libs/ulib.h
Binary files lab7_original/obj/user/spin.o and lab7/obj/user/spin.o differ
diff -r -u -P lab7_original/obj/user/spin.sym lab7/obj/user/spin.sym
--- lab7_original/obj/user/spin.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/spin.sym	2016-05-06 21:59:28.658161338 +0800
@@ -0,0 +1,78 @@
+00800020 .text
+00801080 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202e19 .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b5 syscall
+00000000 ulib.c
+00000000 stdio.c
+008002b4 cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+00801180 error_string
+0080084a printnum
+0080093b getuint
+0080098a getint
+00800d9d sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 spin.c
+008003e6 strcpy
+0080022c yield
+00800213 waitpid
+00800141 sys_yield
+008006ff memmove
+00800dd3 snprintf
+008009f5 vprintfmt
+0080011d sys_fork
+00800301 cprintf
+00800250 getpid
+008007a2 memcpy
+0080028f sleep
+00800278 lab6_set_priority
+00800dfc vsnprintf
+00800375 umain
+00202e18 __STAB_END__
+00800150 sys_kill
+00202e19 __STABSTR_BEGIN__
+00800020 __panic
+008001b7 sys_sleep
+00800562 strtol
+008003b6 strnlen
+0080025d print_pgdir
+0080023a kill
+00800533 strfind
+008001fc wait
+008002a5 _start
+00800e7b rand
+008004aa strncmp
+00800171 sys_putc
+00800426 strncpy
+008007f2 memcmp
+008001ef fork
+008006bf memset
+00800f53 main
+00800f3a srand
+00800e56 hash32
+008009d1 printfmt
+00203c2a __STABSTR_END__
+00800460 strcmp
+0080026b gettime_msec
+00800192 sys_gettime
+008002d8 vcprintf
+0080006e __warn
+00800327 cputs
+008001a1 sys_lab6_set_priority
+008001c9 exit
+0080012c sys_wait
+0080010b sys_exit
+00200010 __STAB_BEGIN__
+0080038e strlen
+00800183 sys_pgdir
+00800500 strchr
+00800162 sys_getpid
diff -r -u -P lab7_original/obj/user/testbss.asm lab7/obj/user/testbss.asm
--- lab7_original/obj/user/testbss.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/testbss.asm	2016-05-06 21:59:28.602159289 +0800
@@ -0,0 +1,2704 @@
+
+obj/__user_testbss.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 18             	sub    $0x18,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	83 ec 04             	sub    $0x4,%esp
+  80002f:	ff 75 0c             	pushl  0xc(%ebp)
+  800032:	ff 75 08             	pushl  0x8(%ebp)
+  800035:	68 60 10 80 00       	push   $0x801060
+  80003a:	e8 c2 02 00 00       	call   800301 <cprintf>
+  80003f:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800042:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800045:	83 ec 08             	sub    $0x8,%esp
+  800048:	50                   	push   %eax
+  800049:	ff 75 10             	pushl  0x10(%ebp)
+  80004c:	e8 87 02 00 00       	call   8002d8 <vcprintf>
+  800051:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  800054:	83 ec 0c             	sub    $0xc,%esp
+  800057:	68 7a 10 80 00       	push   $0x80107a
+  80005c:	e8 a0 02 00 00       	call   800301 <cprintf>
+  800061:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	83 ec 0c             	sub    $0xc,%esp
+  800067:	6a f6                	push   $0xfffffff6
+  800069:	e8 5b 01 00 00       	call   8001c9 <exit>
+
+0080006e <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80006e:	55                   	push   %ebp
+  80006f:	89 e5                	mov    %esp,%ebp
+  800071:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800074:	8d 45 14             	lea    0x14(%ebp),%eax
+  800077:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007a:	83 ec 04             	sub    $0x4,%esp
+  80007d:	ff 75 0c             	pushl  0xc(%ebp)
+  800080:	ff 75 08             	pushl  0x8(%ebp)
+  800083:	68 7c 10 80 00       	push   $0x80107c
+  800088:	e8 74 02 00 00       	call   800301 <cprintf>
+  80008d:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800090:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800093:	83 ec 08             	sub    $0x8,%esp
+  800096:	50                   	push   %eax
+  800097:	ff 75 10             	pushl  0x10(%ebp)
+  80009a:	e8 39 02 00 00       	call   8002d8 <vcprintf>
+  80009f:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  8000a2:	83 ec 0c             	sub    $0xc,%esp
+  8000a5:	68 7a 10 80 00       	push   $0x80107a
+  8000aa:	e8 52 02 00 00       	call   800301 <cprintf>
+  8000af:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8000b2:	90                   	nop
+  8000b3:	c9                   	leave  
+  8000b4:	c3                   	ret    
+
+008000b5 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b5:	55                   	push   %ebp
+  8000b6:	89 e5                	mov    %esp,%ebp
+  8000b8:	57                   	push   %edi
+  8000b9:	56                   	push   %esi
+  8000ba:	53                   	push   %ebx
+  8000bb:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000be:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cb:	eb 16                	jmp    8000e3 <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8000cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d0:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d3:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d6:	8b 10                	mov    (%eax),%edx
+  8000d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000db:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000df:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8000e3:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e7:	7e e4                	jle    8000cd <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000e9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ec:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000ef:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f2:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f5:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8000f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fb:	cd 80                	int    $0x80
+  8000fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  800100:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800103:	83 c4 20             	add    $0x20,%esp
+  800106:	5b                   	pop    %ebx
+  800107:	5e                   	pop    %esi
+  800108:	5f                   	pop    %edi
+  800109:	5d                   	pop    %ebp
+  80010a:	c3                   	ret    
+
+0080010b <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010b:	55                   	push   %ebp
+  80010c:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_exit, error_code);
+  80010e:	ff 75 08             	pushl  0x8(%ebp)
+  800111:	6a 01                	push   $0x1
+  800113:	e8 9d ff ff ff       	call   8000b5 <syscall>
+  800118:	83 c4 08             	add    $0x8,%esp
+}
+  80011b:	c9                   	leave  
+  80011c:	c3                   	ret    
+
+0080011d <sys_fork>:
+
+int
+sys_fork(void) {
+  80011d:	55                   	push   %ebp
+  80011e:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_fork);
+  800120:	6a 02                	push   $0x2
+  800122:	e8 8e ff ff ff       	call   8000b5 <syscall>
+  800127:	83 c4 04             	add    $0x4,%esp
+}
+  80012a:	c9                   	leave  
+  80012b:	c3                   	ret    
+
+0080012c <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80012c:	55                   	push   %ebp
+  80012d:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_wait, pid, store);
+  80012f:	ff 75 0c             	pushl  0xc(%ebp)
+  800132:	ff 75 08             	pushl  0x8(%ebp)
+  800135:	6a 03                	push   $0x3
+  800137:	e8 79 ff ff ff       	call   8000b5 <syscall>
+  80013c:	83 c4 0c             	add    $0xc,%esp
+}
+  80013f:	c9                   	leave  
+  800140:	c3                   	ret    
+
+00800141 <sys_yield>:
+
+int
+sys_yield(void) {
+  800141:	55                   	push   %ebp
+  800142:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_yield);
+  800144:	6a 0a                	push   $0xa
+  800146:	e8 6a ff ff ff       	call   8000b5 <syscall>
+  80014b:	83 c4 04             	add    $0x4,%esp
+}
+  80014e:	c9                   	leave  
+  80014f:	c3                   	ret    
+
+00800150 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800150:	55                   	push   %ebp
+  800151:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_kill, pid);
+  800153:	ff 75 08             	pushl  0x8(%ebp)
+  800156:	6a 0c                	push   $0xc
+  800158:	e8 58 ff ff ff       	call   8000b5 <syscall>
+  80015d:	83 c4 08             	add    $0x8,%esp
+}
+  800160:	c9                   	leave  
+  800161:	c3                   	ret    
+
+00800162 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800162:	55                   	push   %ebp
+  800163:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_getpid);
+  800165:	6a 12                	push   $0x12
+  800167:	e8 49 ff ff ff       	call   8000b5 <syscall>
+  80016c:	83 c4 04             	add    $0x4,%esp
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_putc, c);
+  800174:	ff 75 08             	pushl  0x8(%ebp)
+  800177:	6a 1e                	push   $0x1e
+  800179:	e8 37 ff ff ff       	call   8000b5 <syscall>
+  80017e:	83 c4 08             	add    $0x8,%esp
+}
+  800181:	c9                   	leave  
+  800182:	c3                   	ret    
+
+00800183 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800183:	55                   	push   %ebp
+  800184:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_pgdir);
+  800186:	6a 1f                	push   $0x1f
+  800188:	e8 28 ff ff ff       	call   8000b5 <syscall>
+  80018d:	83 c4 04             	add    $0x4,%esp
+}
+  800190:	c9                   	leave  
+  800191:	c3                   	ret    
+
+00800192 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  800192:	55                   	push   %ebp
+  800193:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_gettime);
+  800195:	6a 11                	push   $0x11
+  800197:	e8 19 ff ff ff       	call   8000b5 <syscall>
+  80019c:	83 c4 04             	add    $0x4,%esp
+}
+  80019f:	c9                   	leave  
+  8001a0:	c3                   	ret    
+
+008001a1 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001a1:	55                   	push   %ebp
+  8001a2:	89 e5                	mov    %esp,%ebp
+    syscall(SYS_lab6_set_priority, priority);
+  8001a4:	ff 75 08             	pushl  0x8(%ebp)
+  8001a7:	68 ff 00 00 00       	push   $0xff
+  8001ac:	e8 04 ff ff ff       	call   8000b5 <syscall>
+  8001b1:	83 c4 08             	add    $0x8,%esp
+}
+  8001b4:	90                   	nop
+  8001b5:	c9                   	leave  
+  8001b6:	c3                   	ret    
+
+008001b7 <sys_sleep>:
+
+int
+sys_sleep(unsigned int time) {
+  8001b7:	55                   	push   %ebp
+  8001b8:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_sleep, time);
+  8001ba:	ff 75 08             	pushl  0x8(%ebp)
+  8001bd:	6a 0b                	push   $0xb
+  8001bf:	e8 f1 fe ff ff       	call   8000b5 <syscall>
+  8001c4:	83 c4 08             	add    $0x8,%esp
+}
+  8001c7:	c9                   	leave  
+  8001c8:	c3                   	ret    
+
+008001c9 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001c9:	55                   	push   %ebp
+  8001ca:	89 e5                	mov    %esp,%ebp
+  8001cc:	83 ec 08             	sub    $0x8,%esp
+    sys_exit(error_code);
+  8001cf:	83 ec 0c             	sub    $0xc,%esp
+  8001d2:	ff 75 08             	pushl  0x8(%ebp)
+  8001d5:	e8 31 ff ff ff       	call   80010b <sys_exit>
+  8001da:	83 c4 10             	add    $0x10,%esp
+    cprintf("BUG: exit failed.\n");
+  8001dd:	83 ec 0c             	sub    $0xc,%esp
+  8001e0:	68 98 10 80 00       	push   $0x801098
+  8001e5:	e8 17 01 00 00       	call   800301 <cprintf>
+  8001ea:	83 c4 10             	add    $0x10,%esp
+    while (1);
+  8001ed:	eb fe                	jmp    8001ed <exit+0x24>
+
+008001ef <fork>:
+}
+
+int
+fork(void) {
+  8001ef:	55                   	push   %ebp
+  8001f0:	89 e5                	mov    %esp,%ebp
+  8001f2:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8001f5:	e8 23 ff ff ff       	call   80011d <sys_fork>
+}
+  8001fa:	c9                   	leave  
+  8001fb:	c3                   	ret    
+
+008001fc <wait>:
+
+int
+wait(void) {
+  8001fc:	55                   	push   %ebp
+  8001fd:	89 e5                	mov    %esp,%ebp
+  8001ff:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(0, NULL);
+  800202:	83 ec 08             	sub    $0x8,%esp
+  800205:	6a 00                	push   $0x0
+  800207:	6a 00                	push   $0x0
+  800209:	e8 1e ff ff ff       	call   80012c <sys_wait>
+  80020e:	83 c4 10             	add    $0x10,%esp
+}
+  800211:	c9                   	leave  
+  800212:	c3                   	ret    
+
+00800213 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800213:	55                   	push   %ebp
+  800214:	89 e5                	mov    %esp,%ebp
+  800216:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(pid, store);
+  800219:	83 ec 08             	sub    $0x8,%esp
+  80021c:	ff 75 0c             	pushl  0xc(%ebp)
+  80021f:	ff 75 08             	pushl  0x8(%ebp)
+  800222:	e8 05 ff ff ff       	call   80012c <sys_wait>
+  800227:	83 c4 10             	add    $0x10,%esp
+}
+  80022a:	c9                   	leave  
+  80022b:	c3                   	ret    
+
+0080022c <yield>:
+
+void
+yield(void) {
+  80022c:	55                   	push   %ebp
+  80022d:	89 e5                	mov    %esp,%ebp
+  80022f:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800232:	e8 0a ff ff ff       	call   800141 <sys_yield>
+}
+  800237:	90                   	nop
+  800238:	c9                   	leave  
+  800239:	c3                   	ret    
+
+0080023a <kill>:
+
+int
+kill(int pid) {
+  80023a:	55                   	push   %ebp
+  80023b:	89 e5                	mov    %esp,%ebp
+  80023d:	83 ec 08             	sub    $0x8,%esp
+    return sys_kill(pid);
+  800240:	83 ec 0c             	sub    $0xc,%esp
+  800243:	ff 75 08             	pushl  0x8(%ebp)
+  800246:	e8 05 ff ff ff       	call   800150 <sys_kill>
+  80024b:	83 c4 10             	add    $0x10,%esp
+}
+  80024e:	c9                   	leave  
+  80024f:	c3                   	ret    
+
+00800250 <getpid>:
+
+int
+getpid(void) {
+  800250:	55                   	push   %ebp
+  800251:	89 e5                	mov    %esp,%ebp
+  800253:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800256:	e8 07 ff ff ff       	call   800162 <sys_getpid>
+}
+  80025b:	c9                   	leave  
+  80025c:	c3                   	ret    
+
+0080025d <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80025d:	55                   	push   %ebp
+  80025e:	89 e5                	mov    %esp,%ebp
+  800260:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800263:	e8 1b ff ff ff       	call   800183 <sys_pgdir>
+}
+  800268:	90                   	nop
+  800269:	c9                   	leave  
+  80026a:	c3                   	ret    
+
+0080026b <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80026b:	55                   	push   %ebp
+  80026c:	89 e5                	mov    %esp,%ebp
+  80026e:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800271:	e8 1c ff ff ff       	call   800192 <sys_gettime>
+}
+  800276:	c9                   	leave  
+  800277:	c3                   	ret    
+
+00800278 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800278:	55                   	push   %ebp
+  800279:	89 e5                	mov    %esp,%ebp
+  80027b:	83 ec 08             	sub    $0x8,%esp
+    sys_lab6_set_priority(priority);
+  80027e:	83 ec 0c             	sub    $0xc,%esp
+  800281:	ff 75 08             	pushl  0x8(%ebp)
+  800284:	e8 18 ff ff ff       	call   8001a1 <sys_lab6_set_priority>
+  800289:	83 c4 10             	add    $0x10,%esp
+}
+  80028c:	90                   	nop
+  80028d:	c9                   	leave  
+  80028e:	c3                   	ret    
+
+0080028f <sleep>:
+
+int
+sleep(unsigned int time) {
+  80028f:	55                   	push   %ebp
+  800290:	89 e5                	mov    %esp,%ebp
+  800292:	83 ec 08             	sub    $0x8,%esp
+    return sys_sleep(time);
+  800295:	83 ec 0c             	sub    $0xc,%esp
+  800298:	ff 75 08             	pushl  0x8(%ebp)
+  80029b:	e8 17 ff ff ff       	call   8001b7 <sys_sleep>
+  8002a0:	83 c4 10             	add    $0x10,%esp
+}
+  8002a3:	c9                   	leave  
+  8002a4:	c3                   	ret    
+
+008002a5 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  8002a5:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  8002aa:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  8002ad:	e8 c3 00 00 00       	call   800375 <umain>
+1:  jmp 1b
+  8002b2:	eb fe                	jmp    8002b2 <_start+0xd>
+
+008002b4 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8002b4:	55                   	push   %ebp
+  8002b5:	89 e5                	mov    %esp,%ebp
+  8002b7:	83 ec 08             	sub    $0x8,%esp
+    sys_putc(c);
+  8002ba:	83 ec 0c             	sub    $0xc,%esp
+  8002bd:	ff 75 08             	pushl  0x8(%ebp)
+  8002c0:	e8 ac fe ff ff       	call   800171 <sys_putc>
+  8002c5:	83 c4 10             	add    $0x10,%esp
+    (*cnt) ++;
+  8002c8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002cb:	8b 00                	mov    (%eax),%eax
+  8002cd:	8d 50 01             	lea    0x1(%eax),%edx
+  8002d0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002d3:	89 10                	mov    %edx,(%eax)
+}
+  8002d5:	90                   	nop
+  8002d6:	c9                   	leave  
+  8002d7:	c3                   	ret    
+
+008002d8 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002d8:	55                   	push   %ebp
+  8002d9:	89 e5                	mov    %esp,%ebp
+  8002db:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  8002de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002e5:	ff 75 0c             	pushl  0xc(%ebp)
+  8002e8:	ff 75 08             	pushl  0x8(%ebp)
+  8002eb:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  8002ee:	50                   	push   %eax
+  8002ef:	68 b4 02 80 00       	push   $0x8002b4
+  8002f4:	e8 fc 06 00 00       	call   8009f5 <vprintfmt>
+  8002f9:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  8002fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002ff:	c9                   	leave  
+  800300:	c3                   	ret    
+
+00800301 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800301:	55                   	push   %ebp
+  800302:	89 e5                	mov    %esp,%ebp
+  800304:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800307:	8d 45 0c             	lea    0xc(%ebp),%eax
+  80030a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  80030d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800310:	83 ec 08             	sub    $0x8,%esp
+  800313:	50                   	push   %eax
+  800314:	ff 75 08             	pushl  0x8(%ebp)
+  800317:	e8 bc ff ff ff       	call   8002d8 <vcprintf>
+  80031c:	83 c4 10             	add    $0x10,%esp
+  80031f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800322:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800325:	c9                   	leave  
+  800326:	c3                   	ret    
+
+00800327 <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  800327:	55                   	push   %ebp
+  800328:	89 e5                	mov    %esp,%ebp
+  80032a:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  80032d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  800334:	eb 14                	jmp    80034a <cputs+0x23>
+        cputch(c, &cnt);
+  800336:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  80033a:	83 ec 08             	sub    $0x8,%esp
+  80033d:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800340:	52                   	push   %edx
+  800341:	50                   	push   %eax
+  800342:	e8 6d ff ff ff       	call   8002b4 <cputch>
+  800347:	83 c4 10             	add    $0x10,%esp
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  80034a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80034d:	8d 50 01             	lea    0x1(%eax),%edx
+  800350:	89 55 08             	mov    %edx,0x8(%ebp)
+  800353:	0f b6 00             	movzbl (%eax),%eax
+  800356:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800359:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  80035d:	75 d7                	jne    800336 <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  80035f:	83 ec 08             	sub    $0x8,%esp
+  800362:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800365:	50                   	push   %eax
+  800366:	6a 0a                	push   $0xa
+  800368:	e8 47 ff ff ff       	call   8002b4 <cputch>
+  80036d:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  800370:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  800373:	c9                   	leave  
+  800374:	c3                   	ret    
+
+00800375 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800375:	55                   	push   %ebp
+  800376:	89 e5                	mov    %esp,%ebp
+  800378:	83 ec 18             	sub    $0x18,%esp
+    int ret = main();
+  80037b:	e8 d3 0b 00 00       	call   800f53 <main>
+  800380:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  800383:	83 ec 0c             	sub    $0xc,%esp
+  800386:	ff 75 f4             	pushl  -0xc(%ebp)
+  800389:	e8 3b fe ff ff       	call   8001c9 <exit>
+
+0080038e <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  80038e:	55                   	push   %ebp
+  80038f:	89 e5                	mov    %esp,%ebp
+  800391:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800394:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  80039b:	eb 04                	jmp    8003a1 <strlen+0x13>
+        cnt ++;
+  80039d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  8003a1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003a4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003a7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003aa:	0f b6 00             	movzbl (%eax),%eax
+  8003ad:	84 c0                	test   %al,%al
+  8003af:	75 ec                	jne    80039d <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003b4:	c9                   	leave  
+  8003b5:	c3                   	ret    
+
+008003b6 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  8003b6:	55                   	push   %ebp
+  8003b7:	89 e5                	mov    %esp,%ebp
+  8003b9:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003bc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003c3:	eb 04                	jmp    8003c9 <strnlen+0x13>
+        cnt ++;
+  8003c5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  8003c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003cc:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003cf:	73 10                	jae    8003e1 <strnlen+0x2b>
+  8003d1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003d4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003d7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003da:	0f b6 00             	movzbl (%eax),%eax
+  8003dd:	84 c0                	test   %al,%al
+  8003df:	75 e4                	jne    8003c5 <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003e4:	c9                   	leave  
+  8003e5:	c3                   	ret    
+
+008003e6 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  8003e6:	55                   	push   %ebp
+  8003e7:	89 e5                	mov    %esp,%ebp
+  8003e9:	57                   	push   %edi
+  8003ea:	56                   	push   %esi
+  8003eb:	83 ec 20             	sub    $0x20,%esp
+  8003ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003f4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8003f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  8003fa:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800400:	89 d1                	mov    %edx,%ecx
+  800402:	89 c2                	mov    %eax,%edx
+  800404:	89 ce                	mov    %ecx,%esi
+  800406:	89 d7                	mov    %edx,%edi
+  800408:	ac                   	lods   %ds:(%esi),%al
+  800409:	aa                   	stos   %al,%es:(%edi)
+  80040a:	84 c0                	test   %al,%al
+  80040c:	75 fa                	jne    800408 <strcpy+0x22>
+  80040e:	89 fa                	mov    %edi,%edx
+  800410:	89 f1                	mov    %esi,%ecx
+  800412:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800415:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800418:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  80041b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  80041e:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  80041f:	83 c4 20             	add    $0x20,%esp
+  800422:	5e                   	pop    %esi
+  800423:	5f                   	pop    %edi
+  800424:	5d                   	pop    %ebp
+  800425:	c3                   	ret    
+
+00800426 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800426:	55                   	push   %ebp
+  800427:	89 e5                	mov    %esp,%ebp
+  800429:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  80042c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80042f:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800432:	eb 21                	jmp    800455 <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800434:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800437:	0f b6 10             	movzbl (%eax),%edx
+  80043a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80043d:	88 10                	mov    %dl,(%eax)
+  80043f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800442:	0f b6 00             	movzbl (%eax),%eax
+  800445:	84 c0                	test   %al,%al
+  800447:	74 04                	je     80044d <strncpy+0x27>
+            src ++;
+  800449:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  80044d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800451:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800455:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800459:	75 d9                	jne    800434 <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  80045b:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  80045e:	c9                   	leave  
+  80045f:	c3                   	ret    
+
+00800460 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800460:	55                   	push   %ebp
+  800461:	89 e5                	mov    %esp,%ebp
+  800463:	57                   	push   %edi
+  800464:	56                   	push   %esi
+  800465:	83 ec 20             	sub    $0x20,%esp
+  800468:	8b 45 08             	mov    0x8(%ebp),%eax
+  80046b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80046e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800471:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800474:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800477:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80047a:	89 d1                	mov    %edx,%ecx
+  80047c:	89 c2                	mov    %eax,%edx
+  80047e:	89 ce                	mov    %ecx,%esi
+  800480:	89 d7                	mov    %edx,%edi
+  800482:	ac                   	lods   %ds:(%esi),%al
+  800483:	ae                   	scas   %es:(%edi),%al
+  800484:	75 08                	jne    80048e <strcmp+0x2e>
+  800486:	84 c0                	test   %al,%al
+  800488:	75 f8                	jne    800482 <strcmp+0x22>
+  80048a:	31 c0                	xor    %eax,%eax
+  80048c:	eb 04                	jmp    800492 <strcmp+0x32>
+  80048e:	19 c0                	sbb    %eax,%eax
+  800490:	0c 01                	or     $0x1,%al
+  800492:	89 fa                	mov    %edi,%edx
+  800494:	89 f1                	mov    %esi,%ecx
+  800496:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800499:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  80049c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  80049f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  8004a2:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  8004a3:	83 c4 20             	add    $0x20,%esp
+  8004a6:	5e                   	pop    %esi
+  8004a7:	5f                   	pop    %edi
+  8004a8:	5d                   	pop    %ebp
+  8004a9:	c3                   	ret    
+
+008004aa <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  8004aa:	55                   	push   %ebp
+  8004ab:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004ad:	eb 0c                	jmp    8004bb <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  8004af:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  8004b3:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8004b7:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004bb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004bf:	74 1a                	je     8004db <strncmp+0x31>
+  8004c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004c4:	0f b6 00             	movzbl (%eax),%eax
+  8004c7:	84 c0                	test   %al,%al
+  8004c9:	74 10                	je     8004db <strncmp+0x31>
+  8004cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004ce:	0f b6 10             	movzbl (%eax),%edx
+  8004d1:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004d4:	0f b6 00             	movzbl (%eax),%eax
+  8004d7:	38 c2                	cmp    %al,%dl
+  8004d9:	74 d4                	je     8004af <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004db:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004df:	74 18                	je     8004f9 <strncmp+0x4f>
+  8004e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e4:	0f b6 00             	movzbl (%eax),%eax
+  8004e7:	0f b6 d0             	movzbl %al,%edx
+  8004ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ed:	0f b6 00             	movzbl (%eax),%eax
+  8004f0:	0f b6 c0             	movzbl %al,%eax
+  8004f3:	29 c2                	sub    %eax,%edx
+  8004f5:	89 d0                	mov    %edx,%eax
+  8004f7:	eb 05                	jmp    8004fe <strncmp+0x54>
+  8004f9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8004fe:	5d                   	pop    %ebp
+  8004ff:	c3                   	ret    
+
+00800500 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800500:	55                   	push   %ebp
+  800501:	89 e5                	mov    %esp,%ebp
+  800503:	83 ec 04             	sub    $0x4,%esp
+  800506:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800509:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  80050c:	eb 14                	jmp    800522 <strchr+0x22>
+        if (*s == c) {
+  80050e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800511:	0f b6 00             	movzbl (%eax),%eax
+  800514:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800517:	75 05                	jne    80051e <strchr+0x1e>
+            return (char *)s;
+  800519:	8b 45 08             	mov    0x8(%ebp),%eax
+  80051c:	eb 13                	jmp    800531 <strchr+0x31>
+        }
+        s ++;
+  80051e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800522:	8b 45 08             	mov    0x8(%ebp),%eax
+  800525:	0f b6 00             	movzbl (%eax),%eax
+  800528:	84 c0                	test   %al,%al
+  80052a:	75 e2                	jne    80050e <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  80052c:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800531:	c9                   	leave  
+  800532:	c3                   	ret    
+
+00800533 <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800533:	55                   	push   %ebp
+  800534:	89 e5                	mov    %esp,%ebp
+  800536:	83 ec 04             	sub    $0x4,%esp
+  800539:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80053c:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  80053f:	eb 0f                	jmp    800550 <strfind+0x1d>
+        if (*s == c) {
+  800541:	8b 45 08             	mov    0x8(%ebp),%eax
+  800544:	0f b6 00             	movzbl (%eax),%eax
+  800547:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  80054a:	74 10                	je     80055c <strfind+0x29>
+            break;
+        }
+        s ++;
+  80054c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800550:	8b 45 08             	mov    0x8(%ebp),%eax
+  800553:	0f b6 00             	movzbl (%eax),%eax
+  800556:	84 c0                	test   %al,%al
+  800558:	75 e7                	jne    800541 <strfind+0xe>
+  80055a:	eb 01                	jmp    80055d <strfind+0x2a>
+        if (*s == c) {
+            break;
+  80055c:	90                   	nop
+        }
+        s ++;
+    }
+    return (char *)s;
+  80055d:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800560:	c9                   	leave  
+  800561:	c3                   	ret    
+
+00800562 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800562:	55                   	push   %ebp
+  800563:	89 e5                	mov    %esp,%ebp
+  800565:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800568:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  80056f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800576:	eb 04                	jmp    80057c <strtol+0x1a>
+        s ++;
+  800578:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80057c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80057f:	0f b6 00             	movzbl (%eax),%eax
+  800582:	3c 20                	cmp    $0x20,%al
+  800584:	74 f2                	je     800578 <strtol+0x16>
+  800586:	8b 45 08             	mov    0x8(%ebp),%eax
+  800589:	0f b6 00             	movzbl (%eax),%eax
+  80058c:	3c 09                	cmp    $0x9,%al
+  80058e:	74 e8                	je     800578 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800590:	8b 45 08             	mov    0x8(%ebp),%eax
+  800593:	0f b6 00             	movzbl (%eax),%eax
+  800596:	3c 2b                	cmp    $0x2b,%al
+  800598:	75 06                	jne    8005a0 <strtol+0x3e>
+        s ++;
+  80059a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  80059e:	eb 15                	jmp    8005b5 <strtol+0x53>
+    }
+    else if (*s == '-') {
+  8005a0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a3:	0f b6 00             	movzbl (%eax),%eax
+  8005a6:	3c 2d                	cmp    $0x2d,%al
+  8005a8:	75 0b                	jne    8005b5 <strtol+0x53>
+        s ++, neg = 1;
+  8005aa:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005ae:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  8005b5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005b9:	74 06                	je     8005c1 <strtol+0x5f>
+  8005bb:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  8005bf:	75 24                	jne    8005e5 <strtol+0x83>
+  8005c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005c4:	0f b6 00             	movzbl (%eax),%eax
+  8005c7:	3c 30                	cmp    $0x30,%al
+  8005c9:	75 1a                	jne    8005e5 <strtol+0x83>
+  8005cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ce:	83 c0 01             	add    $0x1,%eax
+  8005d1:	0f b6 00             	movzbl (%eax),%eax
+  8005d4:	3c 78                	cmp    $0x78,%al
+  8005d6:	75 0d                	jne    8005e5 <strtol+0x83>
+        s += 2, base = 16;
+  8005d8:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005dc:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005e3:	eb 2a                	jmp    80060f <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005e5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005e9:	75 17                	jne    800602 <strtol+0xa0>
+  8005eb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ee:	0f b6 00             	movzbl (%eax),%eax
+  8005f1:	3c 30                	cmp    $0x30,%al
+  8005f3:	75 0d                	jne    800602 <strtol+0xa0>
+        s ++, base = 8;
+  8005f5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005f9:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800600:	eb 0d                	jmp    80060f <strtol+0xad>
+    }
+    else if (base == 0) {
+  800602:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800606:	75 07                	jne    80060f <strtol+0xad>
+        base = 10;
+  800608:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  80060f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800612:	0f b6 00             	movzbl (%eax),%eax
+  800615:	3c 2f                	cmp    $0x2f,%al
+  800617:	7e 1b                	jle    800634 <strtol+0xd2>
+  800619:	8b 45 08             	mov    0x8(%ebp),%eax
+  80061c:	0f b6 00             	movzbl (%eax),%eax
+  80061f:	3c 39                	cmp    $0x39,%al
+  800621:	7f 11                	jg     800634 <strtol+0xd2>
+            dig = *s - '0';
+  800623:	8b 45 08             	mov    0x8(%ebp),%eax
+  800626:	0f b6 00             	movzbl (%eax),%eax
+  800629:	0f be c0             	movsbl %al,%eax
+  80062c:	83 e8 30             	sub    $0x30,%eax
+  80062f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800632:	eb 48                	jmp    80067c <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800634:	8b 45 08             	mov    0x8(%ebp),%eax
+  800637:	0f b6 00             	movzbl (%eax),%eax
+  80063a:	3c 60                	cmp    $0x60,%al
+  80063c:	7e 1b                	jle    800659 <strtol+0xf7>
+  80063e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800641:	0f b6 00             	movzbl (%eax),%eax
+  800644:	3c 7a                	cmp    $0x7a,%al
+  800646:	7f 11                	jg     800659 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800648:	8b 45 08             	mov    0x8(%ebp),%eax
+  80064b:	0f b6 00             	movzbl (%eax),%eax
+  80064e:	0f be c0             	movsbl %al,%eax
+  800651:	83 e8 57             	sub    $0x57,%eax
+  800654:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800657:	eb 23                	jmp    80067c <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800659:	8b 45 08             	mov    0x8(%ebp),%eax
+  80065c:	0f b6 00             	movzbl (%eax),%eax
+  80065f:	3c 40                	cmp    $0x40,%al
+  800661:	7e 3c                	jle    80069f <strtol+0x13d>
+  800663:	8b 45 08             	mov    0x8(%ebp),%eax
+  800666:	0f b6 00             	movzbl (%eax),%eax
+  800669:	3c 5a                	cmp    $0x5a,%al
+  80066b:	7f 32                	jg     80069f <strtol+0x13d>
+            dig = *s - 'A' + 10;
+  80066d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800670:	0f b6 00             	movzbl (%eax),%eax
+  800673:	0f be c0             	movsbl %al,%eax
+  800676:	83 e8 37             	sub    $0x37,%eax
+  800679:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  80067c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80067f:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800682:	7d 1a                	jge    80069e <strtol+0x13c>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  800684:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800688:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80068b:	0f af 45 10          	imul   0x10(%ebp),%eax
+  80068f:	89 c2                	mov    %eax,%edx
+  800691:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800694:	01 d0                	add    %edx,%eax
+  800696:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800699:	e9 71 ff ff ff       	jmp    80060f <strtol+0xad>
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+            break;
+  80069e:	90                   	nop
+        }
+        s ++, val = (val * base) + dig;
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  80069f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8006a3:	74 08                	je     8006ad <strtol+0x14b>
+        *endptr = (char *) s;
+  8006a5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006a8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006ab:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  8006ad:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  8006b1:	74 07                	je     8006ba <strtol+0x158>
+  8006b3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006b6:	f7 d8                	neg    %eax
+  8006b8:	eb 03                	jmp    8006bd <strtol+0x15b>
+  8006ba:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  8006bd:	c9                   	leave  
+  8006be:	c3                   	ret    
+
+008006bf <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  8006bf:	55                   	push   %ebp
+  8006c0:	89 e5                	mov    %esp,%ebp
+  8006c2:	57                   	push   %edi
+  8006c3:	83 ec 24             	sub    $0x24,%esp
+  8006c6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006c9:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006cc:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006d0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006d3:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006d6:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006d9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006df:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006e2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006e6:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006e9:	89 d7                	mov    %edx,%edi
+  8006eb:	f3 aa                	rep stos %al,%es:(%edi)
+  8006ed:	89 fa                	mov    %edi,%edx
+  8006ef:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8006f2:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  8006f5:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006f8:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  8006f9:	83 c4 24             	add    $0x24,%esp
+  8006fc:	5f                   	pop    %edi
+  8006fd:	5d                   	pop    %ebp
+  8006fe:	c3                   	ret    
+
+008006ff <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  8006ff:	55                   	push   %ebp
+  800700:	89 e5                	mov    %esp,%ebp
+  800702:	57                   	push   %edi
+  800703:	56                   	push   %esi
+  800704:	53                   	push   %ebx
+  800705:	83 ec 30             	sub    $0x30,%esp
+  800708:	8b 45 08             	mov    0x8(%ebp),%eax
+  80070b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80070e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800711:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800714:	8b 45 10             	mov    0x10(%ebp),%eax
+  800717:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  80071a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80071d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800720:	73 42                	jae    800764 <memmove+0x65>
+  800722:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800725:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800728:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80072b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80072e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800731:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800734:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800737:	c1 e8 02             	shr    $0x2,%eax
+  80073a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  80073c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  80073f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800742:	89 d7                	mov    %edx,%edi
+  800744:	89 c6                	mov    %eax,%esi
+  800746:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800748:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  80074b:	83 e1 03             	and    $0x3,%ecx
+  80074e:	74 02                	je     800752 <memmove+0x53>
+  800750:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800752:	89 f0                	mov    %esi,%eax
+  800754:	89 fa                	mov    %edi,%edx
+  800756:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800759:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  80075c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  80075f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  800762:	eb 36                	jmp    80079a <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800764:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800767:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80076a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80076d:	01 c2                	add    %eax,%edx
+  80076f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800772:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800775:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800778:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  80077b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80077e:	89 c1                	mov    %eax,%ecx
+  800780:	89 d8                	mov    %ebx,%eax
+  800782:	89 d6                	mov    %edx,%esi
+  800784:	89 c7                	mov    %eax,%edi
+  800786:	fd                   	std    
+  800787:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800789:	fc                   	cld    
+  80078a:	89 f8                	mov    %edi,%eax
+  80078c:	89 f2                	mov    %esi,%edx
+  80078e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800791:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800794:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800797:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  80079a:	83 c4 30             	add    $0x30,%esp
+  80079d:	5b                   	pop    %ebx
+  80079e:	5e                   	pop    %esi
+  80079f:	5f                   	pop    %edi
+  8007a0:	5d                   	pop    %ebp
+  8007a1:	c3                   	ret    
+
+008007a2 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  8007a2:	55                   	push   %ebp
+  8007a3:	89 e5                	mov    %esp,%ebp
+  8007a5:	57                   	push   %edi
+  8007a6:	56                   	push   %esi
+  8007a7:	83 ec 20             	sub    $0x20,%esp
+  8007aa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8007b0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007b6:	8b 45 10             	mov    0x10(%ebp),%eax
+  8007b9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  8007bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8007bf:	c1 e8 02             	shr    $0x2,%eax
+  8007c2:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  8007c4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007ca:	89 d7                	mov    %edx,%edi
+  8007cc:	89 c6                	mov    %eax,%esi
+  8007ce:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007d0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007d3:	83 e1 03             	and    $0x3,%ecx
+  8007d6:	74 02                	je     8007da <memcpy+0x38>
+  8007d8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007da:	89 f0                	mov    %esi,%eax
+  8007dc:	89 fa                	mov    %edi,%edx
+  8007de:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007e1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007e4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  8007e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007ea:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007eb:	83 c4 20             	add    $0x20,%esp
+  8007ee:	5e                   	pop    %esi
+  8007ef:	5f                   	pop    %edi
+  8007f0:	5d                   	pop    %ebp
+  8007f1:	c3                   	ret    
+
+008007f2 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  8007f2:	55                   	push   %ebp
+  8007f3:	89 e5                	mov    %esp,%ebp
+  8007f5:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  8007f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007fb:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  8007fe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800801:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800804:	eb 30                	jmp    800836 <memcmp+0x44>
+        if (*s1 != *s2) {
+  800806:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800809:	0f b6 10             	movzbl (%eax),%edx
+  80080c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80080f:	0f b6 00             	movzbl (%eax),%eax
+  800812:	38 c2                	cmp    %al,%dl
+  800814:	74 18                	je     80082e <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800816:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800819:	0f b6 00             	movzbl (%eax),%eax
+  80081c:	0f b6 d0             	movzbl %al,%edx
+  80081f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800822:	0f b6 00             	movzbl (%eax),%eax
+  800825:	0f b6 c0             	movzbl %al,%eax
+  800828:	29 c2                	sub    %eax,%edx
+  80082a:	89 d0                	mov    %edx,%eax
+  80082c:	eb 1a                	jmp    800848 <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  80082e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800832:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800836:	8b 45 10             	mov    0x10(%ebp),%eax
+  800839:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80083c:	89 55 10             	mov    %edx,0x10(%ebp)
+  80083f:	85 c0                	test   %eax,%eax
+  800841:	75 c3                	jne    800806 <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800843:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800848:	c9                   	leave  
+  800849:	c3                   	ret    
+
+0080084a <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  80084a:	55                   	push   %ebp
+  80084b:	89 e5                	mov    %esp,%ebp
+  80084d:	83 ec 38             	sub    $0x38,%esp
+  800850:	8b 45 10             	mov    0x10(%ebp),%eax
+  800853:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800856:	8b 45 14             	mov    0x14(%ebp),%eax
+  800859:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80085c:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  80085f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800862:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800865:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800868:	8b 45 18             	mov    0x18(%ebp),%eax
+  80086b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  80086e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800871:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800874:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800877:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  80087a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80087d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800880:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800884:	74 1c                	je     8008a2 <printnum+0x58>
+  800886:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800889:	ba 00 00 00 00       	mov    $0x0,%edx
+  80088e:	f7 75 e4             	divl   -0x1c(%ebp)
+  800891:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800894:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800897:	ba 00 00 00 00       	mov    $0x0,%edx
+  80089c:	f7 75 e4             	divl   -0x1c(%ebp)
+  80089f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008a2:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008a8:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008ab:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8008ae:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8008b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008b4:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8008b7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8008ba:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8008bd:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8008c0:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8008c3:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008c6:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008cb:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008ce:	77 41                	ja     800911 <printnum+0xc7>
+  8008d0:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008d3:	72 05                	jb     8008da <printnum+0x90>
+  8008d5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  8008d8:	77 37                	ja     800911 <printnum+0xc7>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008da:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008dd:	83 e8 01             	sub    $0x1,%eax
+  8008e0:	83 ec 04             	sub    $0x4,%esp
+  8008e3:	ff 75 20             	pushl  0x20(%ebp)
+  8008e6:	50                   	push   %eax
+  8008e7:	ff 75 18             	pushl  0x18(%ebp)
+  8008ea:	ff 75 ec             	pushl  -0x14(%ebp)
+  8008ed:	ff 75 e8             	pushl  -0x18(%ebp)
+  8008f0:	ff 75 0c             	pushl  0xc(%ebp)
+  8008f3:	ff 75 08             	pushl  0x8(%ebp)
+  8008f6:	e8 4f ff ff ff       	call   80084a <printnum>
+  8008fb:	83 c4 20             	add    $0x20,%esp
+  8008fe:	eb 1b                	jmp    80091b <printnum+0xd1>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800900:	83 ec 08             	sub    $0x8,%esp
+  800903:	ff 75 0c             	pushl  0xc(%ebp)
+  800906:	ff 75 20             	pushl  0x20(%ebp)
+  800909:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090c:	ff d0                	call   *%eax
+  80090e:	83 c4 10             	add    $0x10,%esp
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  800911:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  800915:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  800919:	7f e5                	jg     800900 <printnum+0xb6>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  80091b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  80091e:	05 c4 11 80 00       	add    $0x8011c4,%eax
+  800923:	0f b6 00             	movzbl (%eax),%eax
+  800926:	0f be c0             	movsbl %al,%eax
+  800929:	83 ec 08             	sub    $0x8,%esp
+  80092c:	ff 75 0c             	pushl  0xc(%ebp)
+  80092f:	50                   	push   %eax
+  800930:	8b 45 08             	mov    0x8(%ebp),%eax
+  800933:	ff d0                	call   *%eax
+  800935:	83 c4 10             	add    $0x10,%esp
+}
+  800938:	90                   	nop
+  800939:	c9                   	leave  
+  80093a:	c3                   	ret    
+
+0080093b <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  80093b:	55                   	push   %ebp
+  80093c:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  80093e:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800942:	7e 14                	jle    800958 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  800944:	8b 45 08             	mov    0x8(%ebp),%eax
+  800947:	8b 00                	mov    (%eax),%eax
+  800949:	8d 48 08             	lea    0x8(%eax),%ecx
+  80094c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80094f:	89 0a                	mov    %ecx,(%edx)
+  800951:	8b 50 04             	mov    0x4(%eax),%edx
+  800954:	8b 00                	mov    (%eax),%eax
+  800956:	eb 30                	jmp    800988 <getuint+0x4d>
+    }
+    else if (lflag) {
+  800958:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80095c:	74 16                	je     800974 <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  80095e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800961:	8b 00                	mov    (%eax),%eax
+  800963:	8d 48 04             	lea    0x4(%eax),%ecx
+  800966:	8b 55 08             	mov    0x8(%ebp),%edx
+  800969:	89 0a                	mov    %ecx,(%edx)
+  80096b:	8b 00                	mov    (%eax),%eax
+  80096d:	ba 00 00 00 00       	mov    $0x0,%edx
+  800972:	eb 14                	jmp    800988 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  800974:	8b 45 08             	mov    0x8(%ebp),%eax
+  800977:	8b 00                	mov    (%eax),%eax
+  800979:	8d 48 04             	lea    0x4(%eax),%ecx
+  80097c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80097f:	89 0a                	mov    %ecx,(%edx)
+  800981:	8b 00                	mov    (%eax),%eax
+  800983:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800988:	5d                   	pop    %ebp
+  800989:	c3                   	ret    
+
+0080098a <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  80098a:	55                   	push   %ebp
+  80098b:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  80098d:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800991:	7e 14                	jle    8009a7 <getint+0x1d>
+        return va_arg(*ap, long long);
+  800993:	8b 45 08             	mov    0x8(%ebp),%eax
+  800996:	8b 00                	mov    (%eax),%eax
+  800998:	8d 48 08             	lea    0x8(%eax),%ecx
+  80099b:	8b 55 08             	mov    0x8(%ebp),%edx
+  80099e:	89 0a                	mov    %ecx,(%edx)
+  8009a0:	8b 50 04             	mov    0x4(%eax),%edx
+  8009a3:	8b 00                	mov    (%eax),%eax
+  8009a5:	eb 28                	jmp    8009cf <getint+0x45>
+    }
+    else if (lflag) {
+  8009a7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8009ab:	74 12                	je     8009bf <getint+0x35>
+        return va_arg(*ap, long);
+  8009ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b0:	8b 00                	mov    (%eax),%eax
+  8009b2:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009b5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009b8:	89 0a                	mov    %ecx,(%edx)
+  8009ba:	8b 00                	mov    (%eax),%eax
+  8009bc:	99                   	cltd   
+  8009bd:	eb 10                	jmp    8009cf <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  8009bf:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009c2:	8b 00                	mov    (%eax),%eax
+  8009c4:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009c7:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009ca:	89 0a                	mov    %ecx,(%edx)
+  8009cc:	8b 00                	mov    (%eax),%eax
+  8009ce:	99                   	cltd   
+    }
+}
+  8009cf:	5d                   	pop    %ebp
+  8009d0:	c3                   	ret    
+
+008009d1 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009d1:	55                   	push   %ebp
+  8009d2:	89 e5                	mov    %esp,%ebp
+  8009d4:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009d7:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009da:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8009e0:	50                   	push   %eax
+  8009e1:	ff 75 10             	pushl  0x10(%ebp)
+  8009e4:	ff 75 0c             	pushl  0xc(%ebp)
+  8009e7:	ff 75 08             	pushl  0x8(%ebp)
+  8009ea:	e8 06 00 00 00       	call   8009f5 <vprintfmt>
+  8009ef:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8009f2:	90                   	nop
+  8009f3:	c9                   	leave  
+  8009f4:	c3                   	ret    
+
+008009f5 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8009f5:	55                   	push   %ebp
+  8009f6:	89 e5                	mov    %esp,%ebp
+  8009f8:	56                   	push   %esi
+  8009f9:	53                   	push   %ebx
+  8009fa:	83 ec 20             	sub    $0x20,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009fd:	eb 17                	jmp    800a16 <vprintfmt+0x21>
+            if (ch == '\0') {
+  8009ff:	85 db                	test   %ebx,%ebx
+  800a01:	0f 84 8e 03 00 00    	je     800d95 <vprintfmt+0x3a0>
+                return;
+            }
+            putch(ch, putdat);
+  800a07:	83 ec 08             	sub    $0x8,%esp
+  800a0a:	ff 75 0c             	pushl  0xc(%ebp)
+  800a0d:	53                   	push   %ebx
+  800a0e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a11:	ff d0                	call   *%eax
+  800a13:	83 c4 10             	add    $0x10,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a16:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a19:	8d 50 01             	lea    0x1(%eax),%edx
+  800a1c:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a1f:	0f b6 00             	movzbl (%eax),%eax
+  800a22:	0f b6 d8             	movzbl %al,%ebx
+  800a25:	83 fb 25             	cmp    $0x25,%ebx
+  800a28:	75 d5                	jne    8009ff <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a2a:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a2e:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a38:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a3b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a42:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a45:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a48:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a4b:	8d 50 01             	lea    0x1(%eax),%edx
+  800a4e:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a51:	0f b6 00             	movzbl (%eax),%eax
+  800a54:	0f b6 d8             	movzbl %al,%ebx
+  800a57:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a5a:	83 f8 55             	cmp    $0x55,%eax
+  800a5d:	0f 87 05 03 00 00    	ja     800d68 <vprintfmt+0x373>
+  800a63:	8b 04 85 e8 11 80 00 	mov    0x8011e8(,%eax,4),%eax
+  800a6a:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a6c:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a70:	eb d6                	jmp    800a48 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a72:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800a76:	eb d0                	jmp    800a48 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a78:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800a7f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a82:	89 d0                	mov    %edx,%eax
+  800a84:	c1 e0 02             	shl    $0x2,%eax
+  800a87:	01 d0                	add    %edx,%eax
+  800a89:	01 c0                	add    %eax,%eax
+  800a8b:	01 d8                	add    %ebx,%eax
+  800a8d:	83 e8 30             	sub    $0x30,%eax
+  800a90:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800a93:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a96:	0f b6 00             	movzbl (%eax),%eax
+  800a99:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800a9c:	83 fb 2f             	cmp    $0x2f,%ebx
+  800a9f:	7e 39                	jle    800ada <vprintfmt+0xe5>
+  800aa1:	83 fb 39             	cmp    $0x39,%ebx
+  800aa4:	7f 34                	jg     800ada <vprintfmt+0xe5>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800aa6:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  800aaa:	eb d3                	jmp    800a7f <vprintfmt+0x8a>
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800aac:	8b 45 14             	mov    0x14(%ebp),%eax
+  800aaf:	8d 50 04             	lea    0x4(%eax),%edx
+  800ab2:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ab5:	8b 00                	mov    (%eax),%eax
+  800ab7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800aba:	eb 1f                	jmp    800adb <vprintfmt+0xe6>
+
+        case '.':
+            if (width < 0)
+  800abc:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ac0:	79 86                	jns    800a48 <vprintfmt+0x53>
+                width = 0;
+  800ac2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800ac9:	e9 7a ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800ace:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800ad5:	e9 6e ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+            goto process_precision;
+  800ada:	90                   	nop
+        case '#':
+            altflag = 1;
+            goto reswitch;
+
+        process_precision:
+            if (width < 0)
+  800adb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800adf:	0f 89 63 ff ff ff    	jns    800a48 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800ae5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ae8:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800aeb:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800af2:	e9 51 ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800af7:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800afb:	e9 48 ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800b00:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b03:	8d 50 04             	lea    0x4(%eax),%edx
+  800b06:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b09:	8b 00                	mov    (%eax),%eax
+  800b0b:	83 ec 08             	sub    $0x8,%esp
+  800b0e:	ff 75 0c             	pushl  0xc(%ebp)
+  800b11:	50                   	push   %eax
+  800b12:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b15:	ff d0                	call   *%eax
+  800b17:	83 c4 10             	add    $0x10,%esp
+            break;
+  800b1a:	e9 71 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800b1f:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b22:	8d 50 04             	lea    0x4(%eax),%edx
+  800b25:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b28:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b2a:	85 db                	test   %ebx,%ebx
+  800b2c:	79 02                	jns    800b30 <vprintfmt+0x13b>
+                err = -err;
+  800b2e:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b30:	83 fb 18             	cmp    $0x18,%ebx
+  800b33:	7f 0b                	jg     800b40 <vprintfmt+0x14b>
+  800b35:	8b 34 9d 60 11 80 00 	mov    0x801160(,%ebx,4),%esi
+  800b3c:	85 f6                	test   %esi,%esi
+  800b3e:	75 19                	jne    800b59 <vprintfmt+0x164>
+                printfmt(putch, putdat, "error %d", err);
+  800b40:	53                   	push   %ebx
+  800b41:	68 d5 11 80 00       	push   $0x8011d5
+  800b46:	ff 75 0c             	pushl  0xc(%ebp)
+  800b49:	ff 75 08             	pushl  0x8(%ebp)
+  800b4c:	e8 80 fe ff ff       	call   8009d1 <printfmt>
+  800b51:	83 c4 10             	add    $0x10,%esp
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b54:	e9 37 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  800b59:	56                   	push   %esi
+  800b5a:	68 de 11 80 00       	push   $0x8011de
+  800b5f:	ff 75 0c             	pushl  0xc(%ebp)
+  800b62:	ff 75 08             	pushl  0x8(%ebp)
+  800b65:	e8 67 fe ff ff       	call   8009d1 <printfmt>
+  800b6a:	83 c4 10             	add    $0x10,%esp
+            }
+            break;
+  800b6d:	e9 1e 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800b72:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b75:	8d 50 04             	lea    0x4(%eax),%edx
+  800b78:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b7b:	8b 30                	mov    (%eax),%esi
+  800b7d:	85 f6                	test   %esi,%esi
+  800b7f:	75 05                	jne    800b86 <vprintfmt+0x191>
+                p = "(null)";
+  800b81:	be e1 11 80 00       	mov    $0x8011e1,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800b86:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b8a:	7e 76                	jle    800c02 <vprintfmt+0x20d>
+  800b8c:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800b90:	74 70                	je     800c02 <vprintfmt+0x20d>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b92:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b95:	83 ec 08             	sub    $0x8,%esp
+  800b98:	50                   	push   %eax
+  800b99:	56                   	push   %esi
+  800b9a:	e8 17 f8 ff ff       	call   8003b6 <strnlen>
+  800b9f:	83 c4 10             	add    $0x10,%esp
+  800ba2:	89 c2                	mov    %eax,%edx
+  800ba4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ba7:	29 d0                	sub    %edx,%eax
+  800ba9:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800bac:	eb 17                	jmp    800bc5 <vprintfmt+0x1d0>
+                    putch(padc, putdat);
+  800bae:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800bb2:	83 ec 08             	sub    $0x8,%esp
+  800bb5:	ff 75 0c             	pushl  0xc(%ebp)
+  800bb8:	50                   	push   %eax
+  800bb9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bbc:	ff d0                	call   *%eax
+  800bbe:	83 c4 10             	add    $0x10,%esp
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bc1:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800bc5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800bc9:	7f e3                	jg     800bae <vprintfmt+0x1b9>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bcb:	eb 35                	jmp    800c02 <vprintfmt+0x20d>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800bcd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800bd1:	74 1c                	je     800bef <vprintfmt+0x1fa>
+  800bd3:	83 fb 1f             	cmp    $0x1f,%ebx
+  800bd6:	7e 05                	jle    800bdd <vprintfmt+0x1e8>
+  800bd8:	83 fb 7e             	cmp    $0x7e,%ebx
+  800bdb:	7e 12                	jle    800bef <vprintfmt+0x1fa>
+                    putch('?', putdat);
+  800bdd:	83 ec 08             	sub    $0x8,%esp
+  800be0:	ff 75 0c             	pushl  0xc(%ebp)
+  800be3:	6a 3f                	push   $0x3f
+  800be5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800be8:	ff d0                	call   *%eax
+  800bea:	83 c4 10             	add    $0x10,%esp
+  800bed:	eb 0f                	jmp    800bfe <vprintfmt+0x209>
+                }
+                else {
+                    putch(ch, putdat);
+  800bef:	83 ec 08             	sub    $0x8,%esp
+  800bf2:	ff 75 0c             	pushl  0xc(%ebp)
+  800bf5:	53                   	push   %ebx
+  800bf6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bf9:	ff d0                	call   *%eax
+  800bfb:	83 c4 10             	add    $0x10,%esp
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bfe:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c02:	89 f0                	mov    %esi,%eax
+  800c04:	8d 70 01             	lea    0x1(%eax),%esi
+  800c07:	0f b6 00             	movzbl (%eax),%eax
+  800c0a:	0f be d8             	movsbl %al,%ebx
+  800c0d:	85 db                	test   %ebx,%ebx
+  800c0f:	74 26                	je     800c37 <vprintfmt+0x242>
+  800c11:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c15:	78 b6                	js     800bcd <vprintfmt+0x1d8>
+  800c17:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  800c1b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c1f:	79 ac                	jns    800bcd <vprintfmt+0x1d8>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c21:	eb 14                	jmp    800c37 <vprintfmt+0x242>
+                putch(' ', putdat);
+  800c23:	83 ec 08             	sub    $0x8,%esp
+  800c26:	ff 75 0c             	pushl  0xc(%ebp)
+  800c29:	6a 20                	push   $0x20
+  800c2b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2e:	ff d0                	call   *%eax
+  800c30:	83 c4 10             	add    $0x10,%esp
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c33:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c37:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c3b:	7f e6                	jg     800c23 <vprintfmt+0x22e>
+                putch(' ', putdat);
+            }
+            break;
+  800c3d:	e9 4e 01 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c42:	83 ec 08             	sub    $0x8,%esp
+  800c45:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c48:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c4b:	50                   	push   %eax
+  800c4c:	e8 39 fd ff ff       	call   80098a <getint>
+  800c51:	83 c4 10             	add    $0x10,%esp
+  800c54:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c57:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c5d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c60:	85 d2                	test   %edx,%edx
+  800c62:	79 23                	jns    800c87 <vprintfmt+0x292>
+                putch('-', putdat);
+  800c64:	83 ec 08             	sub    $0x8,%esp
+  800c67:	ff 75 0c             	pushl  0xc(%ebp)
+  800c6a:	6a 2d                	push   $0x2d
+  800c6c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c6f:	ff d0                	call   *%eax
+  800c71:	83 c4 10             	add    $0x10,%esp
+                num = -(long long)num;
+  800c74:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c77:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c7a:	f7 d8                	neg    %eax
+  800c7c:	83 d2 00             	adc    $0x0,%edx
+  800c7f:	f7 da                	neg    %edx
+  800c81:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c84:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800c87:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c8e:	e9 9f 00 00 00       	jmp    800d32 <vprintfmt+0x33d>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800c93:	83 ec 08             	sub    $0x8,%esp
+  800c96:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c99:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c9c:	50                   	push   %eax
+  800c9d:	e8 99 fc ff ff       	call   80093b <getuint>
+  800ca2:	83 c4 10             	add    $0x10,%esp
+  800ca5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ca8:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800cab:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cb2:	eb 7e                	jmp    800d32 <vprintfmt+0x33d>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800cb4:	83 ec 08             	sub    $0x8,%esp
+  800cb7:	ff 75 e0             	pushl  -0x20(%ebp)
+  800cba:	8d 45 14             	lea    0x14(%ebp),%eax
+  800cbd:	50                   	push   %eax
+  800cbe:	e8 78 fc ff ff       	call   80093b <getuint>
+  800cc3:	83 c4 10             	add    $0x10,%esp
+  800cc6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cc9:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800ccc:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800cd3:	eb 5d                	jmp    800d32 <vprintfmt+0x33d>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800cd5:	83 ec 08             	sub    $0x8,%esp
+  800cd8:	ff 75 0c             	pushl  0xc(%ebp)
+  800cdb:	6a 30                	push   $0x30
+  800cdd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ce0:	ff d0                	call   *%eax
+  800ce2:	83 c4 10             	add    $0x10,%esp
+            putch('x', putdat);
+  800ce5:	83 ec 08             	sub    $0x8,%esp
+  800ce8:	ff 75 0c             	pushl  0xc(%ebp)
+  800ceb:	6a 78                	push   $0x78
+  800ced:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cf0:	ff d0                	call   *%eax
+  800cf2:	83 c4 10             	add    $0x10,%esp
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800cf5:	8b 45 14             	mov    0x14(%ebp),%eax
+  800cf8:	8d 50 04             	lea    0x4(%eax),%edx
+  800cfb:	89 55 14             	mov    %edx,0x14(%ebp)
+  800cfe:	8b 00                	mov    (%eax),%eax
+  800d00:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d03:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800d0a:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800d11:	eb 1f                	jmp    800d32 <vprintfmt+0x33d>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800d13:	83 ec 08             	sub    $0x8,%esp
+  800d16:	ff 75 e0             	pushl  -0x20(%ebp)
+  800d19:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d1c:	50                   	push   %eax
+  800d1d:	e8 19 fc ff ff       	call   80093b <getuint>
+  800d22:	83 c4 10             	add    $0x10,%esp
+  800d25:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d28:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d2b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d32:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d36:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d39:	83 ec 04             	sub    $0x4,%esp
+  800d3c:	52                   	push   %edx
+  800d3d:	ff 75 e8             	pushl  -0x18(%ebp)
+  800d40:	50                   	push   %eax
+  800d41:	ff 75 f4             	pushl  -0xc(%ebp)
+  800d44:	ff 75 f0             	pushl  -0x10(%ebp)
+  800d47:	ff 75 0c             	pushl  0xc(%ebp)
+  800d4a:	ff 75 08             	pushl  0x8(%ebp)
+  800d4d:	e8 f8 fa ff ff       	call   80084a <printnum>
+  800d52:	83 c4 20             	add    $0x20,%esp
+            break;
+  800d55:	eb 39                	jmp    800d90 <vprintfmt+0x39b>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800d57:	83 ec 08             	sub    $0x8,%esp
+  800d5a:	ff 75 0c             	pushl  0xc(%ebp)
+  800d5d:	53                   	push   %ebx
+  800d5e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d61:	ff d0                	call   *%eax
+  800d63:	83 c4 10             	add    $0x10,%esp
+            break;
+  800d66:	eb 28                	jmp    800d90 <vprintfmt+0x39b>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800d68:	83 ec 08             	sub    $0x8,%esp
+  800d6b:	ff 75 0c             	pushl  0xc(%ebp)
+  800d6e:	6a 25                	push   $0x25
+  800d70:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d73:	ff d0                	call   *%eax
+  800d75:	83 c4 10             	add    $0x10,%esp
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800d78:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d7c:	eb 04                	jmp    800d82 <vprintfmt+0x38d>
+  800d7e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d82:	8b 45 10             	mov    0x10(%ebp),%eax
+  800d85:	83 e8 01             	sub    $0x1,%eax
+  800d88:	0f b6 00             	movzbl (%eax),%eax
+  800d8b:	3c 25                	cmp    $0x25,%al
+  800d8d:	75 ef                	jne    800d7e <vprintfmt+0x389>
+                /* do nothing */;
+            break;
+  800d8f:	90                   	nop
+        }
+    }
+  800d90:	e9 68 fc ff ff       	jmp    8009fd <vprintfmt+0x8>
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+            if (ch == '\0') {
+                return;
+  800d95:	90                   	nop
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  800d96:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  800d99:	5b                   	pop    %ebx
+  800d9a:	5e                   	pop    %esi
+  800d9b:	5d                   	pop    %ebp
+  800d9c:	c3                   	ret    
+
+00800d9d <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800d9d:	55                   	push   %ebp
+  800d9e:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800da0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800da3:	8b 40 08             	mov    0x8(%eax),%eax
+  800da6:	8d 50 01             	lea    0x1(%eax),%edx
+  800da9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dac:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800daf:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db2:	8b 10                	mov    (%eax),%edx
+  800db4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db7:	8b 40 04             	mov    0x4(%eax),%eax
+  800dba:	39 c2                	cmp    %eax,%edx
+  800dbc:	73 12                	jae    800dd0 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800dbe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dc1:	8b 00                	mov    (%eax),%eax
+  800dc3:	8d 48 01             	lea    0x1(%eax),%ecx
+  800dc6:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800dc9:	89 0a                	mov    %ecx,(%edx)
+  800dcb:	8b 55 08             	mov    0x8(%ebp),%edx
+  800dce:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800dd0:	90                   	nop
+  800dd1:	5d                   	pop    %ebp
+  800dd2:	c3                   	ret    
+
+00800dd3 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800dd3:	55                   	push   %ebp
+  800dd4:	89 e5                	mov    %esp,%ebp
+  800dd6:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800dd9:	8d 45 14             	lea    0x14(%ebp),%eax
+  800ddc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800ddf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800de2:	50                   	push   %eax
+  800de3:	ff 75 10             	pushl  0x10(%ebp)
+  800de6:	ff 75 0c             	pushl  0xc(%ebp)
+  800de9:	ff 75 08             	pushl  0x8(%ebp)
+  800dec:	e8 0b 00 00 00       	call   800dfc <vsnprintf>
+  800df1:	83 c4 10             	add    $0x10,%esp
+  800df4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800df7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800dfa:	c9                   	leave  
+  800dfb:	c3                   	ret    
+
+00800dfc <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800dfc:	55                   	push   %ebp
+  800dfd:	89 e5                	mov    %esp,%ebp
+  800dff:	83 ec 18             	sub    $0x18,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800e02:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e05:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e08:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e0b:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800e0e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e11:	01 d0                	add    %edx,%eax
+  800e13:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e16:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800e1d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800e21:	74 0a                	je     800e2d <vsnprintf+0x31>
+  800e23:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800e26:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e29:	39 c2                	cmp    %eax,%edx
+  800e2b:	76 07                	jbe    800e34 <vsnprintf+0x38>
+        return -E_INVAL;
+  800e2d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e32:	eb 20                	jmp    800e54 <vsnprintf+0x58>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e34:	ff 75 14             	pushl  0x14(%ebp)
+  800e37:	ff 75 10             	pushl  0x10(%ebp)
+  800e3a:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800e3d:	50                   	push   %eax
+  800e3e:	68 9d 0d 80 00       	push   $0x800d9d
+  800e43:	e8 ad fb ff ff       	call   8009f5 <vprintfmt>
+  800e48:	83 c4 10             	add    $0x10,%esp
+    // null terminate the buffer
+    *b.buf = '\0';
+  800e4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e4e:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800e51:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e54:	c9                   	leave  
+  800e55:	c3                   	ret    
+
+00800e56 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800e56:	55                   	push   %ebp
+  800e57:	89 e5                	mov    %esp,%ebp
+  800e59:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800e5c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e5f:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800e65:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800e68:	b8 20 00 00 00       	mov    $0x20,%eax
+  800e6d:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800e70:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800e73:	89 c1                	mov    %eax,%ecx
+  800e75:	d3 ea                	shr    %cl,%edx
+  800e77:	89 d0                	mov    %edx,%eax
+}
+  800e79:	c9                   	leave  
+  800e7a:	c3                   	ret    
+
+00800e7b <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800e7b:	55                   	push   %ebp
+  800e7c:	89 e5                	mov    %esp,%ebp
+  800e7e:	57                   	push   %edi
+  800e7f:	56                   	push   %esi
+  800e80:	53                   	push   %ebx
+  800e81:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800e84:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e89:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800e8f:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800e95:	6b f0 05             	imul   $0x5,%eax,%esi
+  800e98:	01 fe                	add    %edi,%esi
+  800e9a:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800e9f:	f7 e7                	mul    %edi
+  800ea1:	01 d6                	add    %edx,%esi
+  800ea3:	89 f2                	mov    %esi,%edx
+  800ea5:	83 c0 0b             	add    $0xb,%eax
+  800ea8:	83 d2 00             	adc    $0x0,%edx
+  800eab:	89 c7                	mov    %eax,%edi
+  800ead:	83 e7 ff             	and    $0xffffffff,%edi
+  800eb0:	89 f9                	mov    %edi,%ecx
+  800eb2:	0f b7 da             	movzwl %dx,%ebx
+  800eb5:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800ebb:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800ec1:	a1 00 20 80 00       	mov    0x802000,%eax
+  800ec6:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ecc:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ed0:	c1 ea 0c             	shr    $0xc,%edx
+  800ed3:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ed6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800ed9:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ee0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ee3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ee6:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ee9:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800eec:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eef:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ef2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ef6:	74 1c                	je     800f14 <rand+0x99>
+  800ef8:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800efb:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f00:	f7 75 dc             	divl   -0x24(%ebp)
+  800f03:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800f06:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f09:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f0e:	f7 75 dc             	divl   -0x24(%ebp)
+  800f11:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800f14:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f17:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800f1a:	f7 75 dc             	divl   -0x24(%ebp)
+  800f1d:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f20:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f23:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f26:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800f29:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f2c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f2f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800f32:	83 c4 24             	add    $0x24,%esp
+  800f35:	5b                   	pop    %ebx
+  800f36:	5e                   	pop    %esi
+  800f37:	5f                   	pop    %edi
+  800f38:	5d                   	pop    %ebp
+  800f39:	c3                   	ret    
+
+00800f3a <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800f3a:	55                   	push   %ebp
+  800f3b:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800f3d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f40:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f45:	a3 00 20 80 00       	mov    %eax,0x802000
+  800f4a:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800f50:	90                   	nop
+  800f51:	5d                   	pop    %ebp
+  800f52:	c3                   	ret    
+
+00800f53 <main>:
+#define ARRAYSIZE (1024*1024)
+
+uint32_t bigarray[ARRAYSIZE];
+
+int
+main(void) {
+  800f53:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  800f57:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f5a:	ff 71 fc             	pushl  -0x4(%ecx)
+  800f5d:	55                   	push   %ebp
+  800f5e:	89 e5                	mov    %esp,%ebp
+  800f60:	51                   	push   %ecx
+  800f61:	83 ec 14             	sub    $0x14,%esp
+    cprintf("Making sure bss works right...\n");
+  800f64:	83 ec 0c             	sub    $0xc,%esp
+  800f67:	68 40 13 80 00       	push   $0x801340
+  800f6c:	e8 90 f3 ff ff       	call   800301 <cprintf>
+  800f71:	83 c4 10             	add    $0x10,%esp
+    int i;
+    for (i = 0; i < ARRAYSIZE; i ++) {
+  800f74:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  800f7b:	eb 26                	jmp    800fa3 <main+0x50>
+        if (bigarray[i] != 0) {
+  800f7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800f80:	8b 04 85 20 20 80 00 	mov    0x802020(,%eax,4),%eax
+  800f87:	85 c0                	test   %eax,%eax
+  800f89:	74 14                	je     800f9f <main+0x4c>
+            panic("bigarray[%d] isn't cleared!\n", i);
+  800f8b:	ff 75 f4             	pushl  -0xc(%ebp)
+  800f8e:	68 60 13 80 00       	push   $0x801360
+  800f93:	6a 0e                	push   $0xe
+  800f95:	68 7d 13 80 00       	push   $0x80137d
+  800f9a:	e8 81 f0 ff ff       	call   800020 <__panic>
+
+int
+main(void) {
+    cprintf("Making sure bss works right...\n");
+    int i;
+    for (i = 0; i < ARRAYSIZE; i ++) {
+  800f9f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  800fa3:	81 7d f4 ff ff 0f 00 	cmpl   $0xfffff,-0xc(%ebp)
+  800faa:	7e d1                	jle    800f7d <main+0x2a>
+        if (bigarray[i] != 0) {
+            panic("bigarray[%d] isn't cleared!\n", i);
+        }
+    }
+    for (i = 0; i < ARRAYSIZE; i ++) {
+  800fac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  800fb3:	eb 11                	jmp    800fc6 <main+0x73>
+        bigarray[i] = i;
+  800fb5:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800fb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800fbb:	89 14 85 20 20 80 00 	mov    %edx,0x802020(,%eax,4)
+    for (i = 0; i < ARRAYSIZE; i ++) {
+        if (bigarray[i] != 0) {
+            panic("bigarray[%d] isn't cleared!\n", i);
+        }
+    }
+    for (i = 0; i < ARRAYSIZE; i ++) {
+  800fc2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  800fc6:	81 7d f4 ff ff 0f 00 	cmpl   $0xfffff,-0xc(%ebp)
+  800fcd:	7e e6                	jle    800fb5 <main+0x62>
+        bigarray[i] = i;
+    }
+    for (i = 0; i < ARRAYSIZE; i ++) {
+  800fcf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  800fd6:	eb 29                	jmp    801001 <main+0xae>
+        if (bigarray[i] != i) {
+  800fd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800fdb:	8b 14 85 20 20 80 00 	mov    0x802020(,%eax,4),%edx
+  800fe2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800fe5:	39 c2                	cmp    %eax,%edx
+  800fe7:	74 14                	je     800ffd <main+0xaa>
+            panic("bigarray[%d] didn't hold its value!\n", i);
+  800fe9:	ff 75 f4             	pushl  -0xc(%ebp)
+  800fec:	68 8c 13 80 00       	push   $0x80138c
+  800ff1:	6a 16                	push   $0x16
+  800ff3:	68 7d 13 80 00       	push   $0x80137d
+  800ff8:	e8 23 f0 ff ff       	call   800020 <__panic>
+        }
+    }
+    for (i = 0; i < ARRAYSIZE; i ++) {
+        bigarray[i] = i;
+    }
+    for (i = 0; i < ARRAYSIZE; i ++) {
+  800ffd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  801001:	81 7d f4 ff ff 0f 00 	cmpl   $0xfffff,-0xc(%ebp)
+  801008:	7e ce                	jle    800fd8 <main+0x85>
+        if (bigarray[i] != i) {
+            panic("bigarray[%d] didn't hold its value!\n", i);
+        }
+    }
+
+    cprintf("Yes, good.  Now doing a wild write off the end...\n");
+  80100a:	83 ec 0c             	sub    $0xc,%esp
+  80100d:	68 b4 13 80 00       	push   $0x8013b4
+  801012:	e8 ea f2 ff ff       	call   800301 <cprintf>
+  801017:	83 c4 10             	add    $0x10,%esp
+    cprintf("testbss may pass.\n");
+  80101a:	83 ec 0c             	sub    $0xc,%esp
+  80101d:	68 e7 13 80 00       	push   $0x8013e7
+  801022:	e8 da f2 ff ff       	call   800301 <cprintf>
+  801027:	83 c4 10             	add    $0x10,%esp
+
+    bigarray[ARRAYSIZE + 1024] = 0;
+  80102a:	c7 05 20 30 c0 00 00 	movl   $0x0,0xc03020
+  801031:	00 00 00 
+    asm volatile ("int $0x14");
+  801034:	cd 14                	int    $0x14
+    panic("FAIL: T.T\n");
+  801036:	83 ec 04             	sub    $0x4,%esp
+  801039:	68 fa 13 80 00       	push   $0x8013fa
+  80103e:	6a 1f                	push   $0x1f
+  801040:	68 7d 13 80 00       	push   $0x80137d
+  801045:	e8 d6 ef ff ff       	call   800020 <__panic>
diff -r -u -P lab7_original/obj/user/testbss.d lab7/obj/user/testbss.d
--- lab7_original/obj/user/testbss.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/testbss.d	2016-05-06 21:59:27.570121679 +0800
@@ -0,0 +1,2 @@
+obj/user/testbss.o obj/user/testbss.d: user/testbss.c libs/stdio.h \
+ libs/defs.h libs/stdarg.h user/libs/ulib.h
Binary files lab7_original/obj/user/testbss.o and lab7/obj/user/testbss.o differ
diff -r -u -P lab7_original/obj/user/testbss.sym lab7/obj/user/testbss.sym
--- lab7_original/obj/user/testbss.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/testbss.sym	2016-05-06 21:59:28.650161046 +0800
@@ -0,0 +1,80 @@
+00800020 .text
+00801060 .rodata
+00802000 .data
+00802020 .bss
+00200000 .stab_info
+00200010 .stab
+00202e0d .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b5 syscall
+00000000 ulib.c
+00000000 stdio.c
+008002b4 cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+00801160 error_string
+0080084a printnum
+0080093b getuint
+0080098a getint
+00800d9d sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 testbss.c
+008003e6 strcpy
+0080022c yield
+00800213 waitpid
+00800141 sys_yield
+008006ff memmove
+00800dd3 snprintf
+008009f5 vprintfmt
+0080011d sys_fork
+00800301 cprintf
+00800250 getpid
+008007a2 memcpy
+0080028f sleep
+00800278 lab6_set_priority
+00800dfc vsnprintf
+00800375 umain
+00202e0c __STAB_END__
+00800150 sys_kill
+00202e0d __STABSTR_BEGIN__
+00800020 __panic
+008001b7 sys_sleep
+00800562 strtol
+008003b6 strnlen
+00802020 bigarray
+0080025d print_pgdir
+0080023a kill
+00800533 strfind
+008001fc wait
+008002a5 _start
+00800e7b rand
+008004aa strncmp
+00800171 sys_putc
+00800426 strncpy
+008007f2 memcmp
+008001ef fork
+008006bf memset
+00800f53 main
+00800f3a srand
+00800e56 hash32
+008009d1 printfmt
+00203c57 __STABSTR_END__
+00800460 strcmp
+0080026b gettime_msec
+00800192 sys_gettime
+008002d8 vcprintf
+0080006e __warn
+00800327 cputs
+008001a1 sys_lab6_set_priority
+008001c9 exit
+0080012c sys_wait
+0080010b sys_exit
+00200010 __STAB_BEGIN__
+0080038e strlen
+00800183 sys_pgdir
+00800500 strchr
+00800162 sys_getpid
diff -r -u -P lab7_original/obj/user/waitkill.asm lab7/obj/user/waitkill.asm
--- lab7_original/obj/user/waitkill.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/waitkill.asm	2016-05-06 21:59:28.658161338 +0800
@@ -0,0 +1,2767 @@
+
+obj/__user_waitkill.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 18             	sub    $0x18,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	83 ec 04             	sub    $0x4,%esp
+  80002f:	ff 75 0c             	pushl  0xc(%ebp)
+  800032:	ff 75 08             	pushl  0x8(%ebp)
+  800035:	68 00 11 80 00       	push   $0x801100
+  80003a:	e8 c2 02 00 00       	call   800301 <cprintf>
+  80003f:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800042:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800045:	83 ec 08             	sub    $0x8,%esp
+  800048:	50                   	push   %eax
+  800049:	ff 75 10             	pushl  0x10(%ebp)
+  80004c:	e8 87 02 00 00       	call   8002d8 <vcprintf>
+  800051:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  800054:	83 ec 0c             	sub    $0xc,%esp
+  800057:	68 1a 11 80 00       	push   $0x80111a
+  80005c:	e8 a0 02 00 00       	call   800301 <cprintf>
+  800061:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	83 ec 0c             	sub    $0xc,%esp
+  800067:	6a f6                	push   $0xfffffff6
+  800069:	e8 5b 01 00 00       	call   8001c9 <exit>
+
+0080006e <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80006e:	55                   	push   %ebp
+  80006f:	89 e5                	mov    %esp,%ebp
+  800071:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800074:	8d 45 14             	lea    0x14(%ebp),%eax
+  800077:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007a:	83 ec 04             	sub    $0x4,%esp
+  80007d:	ff 75 0c             	pushl  0xc(%ebp)
+  800080:	ff 75 08             	pushl  0x8(%ebp)
+  800083:	68 1c 11 80 00       	push   $0x80111c
+  800088:	e8 74 02 00 00       	call   800301 <cprintf>
+  80008d:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800090:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800093:	83 ec 08             	sub    $0x8,%esp
+  800096:	50                   	push   %eax
+  800097:	ff 75 10             	pushl  0x10(%ebp)
+  80009a:	e8 39 02 00 00       	call   8002d8 <vcprintf>
+  80009f:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  8000a2:	83 ec 0c             	sub    $0xc,%esp
+  8000a5:	68 1a 11 80 00       	push   $0x80111a
+  8000aa:	e8 52 02 00 00       	call   800301 <cprintf>
+  8000af:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8000b2:	90                   	nop
+  8000b3:	c9                   	leave  
+  8000b4:	c3                   	ret    
+
+008000b5 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b5:	55                   	push   %ebp
+  8000b6:	89 e5                	mov    %esp,%ebp
+  8000b8:	57                   	push   %edi
+  8000b9:	56                   	push   %esi
+  8000ba:	53                   	push   %ebx
+  8000bb:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000be:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cb:	eb 16                	jmp    8000e3 <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8000cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d0:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d3:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d6:	8b 10                	mov    (%eax),%edx
+  8000d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000db:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000df:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8000e3:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e7:	7e e4                	jle    8000cd <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000e9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ec:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000ef:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f2:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f5:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8000f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fb:	cd 80                	int    $0x80
+  8000fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  800100:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800103:	83 c4 20             	add    $0x20,%esp
+  800106:	5b                   	pop    %ebx
+  800107:	5e                   	pop    %esi
+  800108:	5f                   	pop    %edi
+  800109:	5d                   	pop    %ebp
+  80010a:	c3                   	ret    
+
+0080010b <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010b:	55                   	push   %ebp
+  80010c:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_exit, error_code);
+  80010e:	ff 75 08             	pushl  0x8(%ebp)
+  800111:	6a 01                	push   $0x1
+  800113:	e8 9d ff ff ff       	call   8000b5 <syscall>
+  800118:	83 c4 08             	add    $0x8,%esp
+}
+  80011b:	c9                   	leave  
+  80011c:	c3                   	ret    
+
+0080011d <sys_fork>:
+
+int
+sys_fork(void) {
+  80011d:	55                   	push   %ebp
+  80011e:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_fork);
+  800120:	6a 02                	push   $0x2
+  800122:	e8 8e ff ff ff       	call   8000b5 <syscall>
+  800127:	83 c4 04             	add    $0x4,%esp
+}
+  80012a:	c9                   	leave  
+  80012b:	c3                   	ret    
+
+0080012c <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80012c:	55                   	push   %ebp
+  80012d:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_wait, pid, store);
+  80012f:	ff 75 0c             	pushl  0xc(%ebp)
+  800132:	ff 75 08             	pushl  0x8(%ebp)
+  800135:	6a 03                	push   $0x3
+  800137:	e8 79 ff ff ff       	call   8000b5 <syscall>
+  80013c:	83 c4 0c             	add    $0xc,%esp
+}
+  80013f:	c9                   	leave  
+  800140:	c3                   	ret    
+
+00800141 <sys_yield>:
+
+int
+sys_yield(void) {
+  800141:	55                   	push   %ebp
+  800142:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_yield);
+  800144:	6a 0a                	push   $0xa
+  800146:	e8 6a ff ff ff       	call   8000b5 <syscall>
+  80014b:	83 c4 04             	add    $0x4,%esp
+}
+  80014e:	c9                   	leave  
+  80014f:	c3                   	ret    
+
+00800150 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800150:	55                   	push   %ebp
+  800151:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_kill, pid);
+  800153:	ff 75 08             	pushl  0x8(%ebp)
+  800156:	6a 0c                	push   $0xc
+  800158:	e8 58 ff ff ff       	call   8000b5 <syscall>
+  80015d:	83 c4 08             	add    $0x8,%esp
+}
+  800160:	c9                   	leave  
+  800161:	c3                   	ret    
+
+00800162 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800162:	55                   	push   %ebp
+  800163:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_getpid);
+  800165:	6a 12                	push   $0x12
+  800167:	e8 49 ff ff ff       	call   8000b5 <syscall>
+  80016c:	83 c4 04             	add    $0x4,%esp
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_putc, c);
+  800174:	ff 75 08             	pushl  0x8(%ebp)
+  800177:	6a 1e                	push   $0x1e
+  800179:	e8 37 ff ff ff       	call   8000b5 <syscall>
+  80017e:	83 c4 08             	add    $0x8,%esp
+}
+  800181:	c9                   	leave  
+  800182:	c3                   	ret    
+
+00800183 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800183:	55                   	push   %ebp
+  800184:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_pgdir);
+  800186:	6a 1f                	push   $0x1f
+  800188:	e8 28 ff ff ff       	call   8000b5 <syscall>
+  80018d:	83 c4 04             	add    $0x4,%esp
+}
+  800190:	c9                   	leave  
+  800191:	c3                   	ret    
+
+00800192 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  800192:	55                   	push   %ebp
+  800193:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_gettime);
+  800195:	6a 11                	push   $0x11
+  800197:	e8 19 ff ff ff       	call   8000b5 <syscall>
+  80019c:	83 c4 04             	add    $0x4,%esp
+}
+  80019f:	c9                   	leave  
+  8001a0:	c3                   	ret    
+
+008001a1 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001a1:	55                   	push   %ebp
+  8001a2:	89 e5                	mov    %esp,%ebp
+    syscall(SYS_lab6_set_priority, priority);
+  8001a4:	ff 75 08             	pushl  0x8(%ebp)
+  8001a7:	68 ff 00 00 00       	push   $0xff
+  8001ac:	e8 04 ff ff ff       	call   8000b5 <syscall>
+  8001b1:	83 c4 08             	add    $0x8,%esp
+}
+  8001b4:	90                   	nop
+  8001b5:	c9                   	leave  
+  8001b6:	c3                   	ret    
+
+008001b7 <sys_sleep>:
+
+int
+sys_sleep(unsigned int time) {
+  8001b7:	55                   	push   %ebp
+  8001b8:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_sleep, time);
+  8001ba:	ff 75 08             	pushl  0x8(%ebp)
+  8001bd:	6a 0b                	push   $0xb
+  8001bf:	e8 f1 fe ff ff       	call   8000b5 <syscall>
+  8001c4:	83 c4 08             	add    $0x8,%esp
+}
+  8001c7:	c9                   	leave  
+  8001c8:	c3                   	ret    
+
+008001c9 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001c9:	55                   	push   %ebp
+  8001ca:	89 e5                	mov    %esp,%ebp
+  8001cc:	83 ec 08             	sub    $0x8,%esp
+    sys_exit(error_code);
+  8001cf:	83 ec 0c             	sub    $0xc,%esp
+  8001d2:	ff 75 08             	pushl  0x8(%ebp)
+  8001d5:	e8 31 ff ff ff       	call   80010b <sys_exit>
+  8001da:	83 c4 10             	add    $0x10,%esp
+    cprintf("BUG: exit failed.\n");
+  8001dd:	83 ec 0c             	sub    $0xc,%esp
+  8001e0:	68 38 11 80 00       	push   $0x801138
+  8001e5:	e8 17 01 00 00       	call   800301 <cprintf>
+  8001ea:	83 c4 10             	add    $0x10,%esp
+    while (1);
+  8001ed:	eb fe                	jmp    8001ed <exit+0x24>
+
+008001ef <fork>:
+}
+
+int
+fork(void) {
+  8001ef:	55                   	push   %ebp
+  8001f0:	89 e5                	mov    %esp,%ebp
+  8001f2:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8001f5:	e8 23 ff ff ff       	call   80011d <sys_fork>
+}
+  8001fa:	c9                   	leave  
+  8001fb:	c3                   	ret    
+
+008001fc <wait>:
+
+int
+wait(void) {
+  8001fc:	55                   	push   %ebp
+  8001fd:	89 e5                	mov    %esp,%ebp
+  8001ff:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(0, NULL);
+  800202:	83 ec 08             	sub    $0x8,%esp
+  800205:	6a 00                	push   $0x0
+  800207:	6a 00                	push   $0x0
+  800209:	e8 1e ff ff ff       	call   80012c <sys_wait>
+  80020e:	83 c4 10             	add    $0x10,%esp
+}
+  800211:	c9                   	leave  
+  800212:	c3                   	ret    
+
+00800213 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800213:	55                   	push   %ebp
+  800214:	89 e5                	mov    %esp,%ebp
+  800216:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(pid, store);
+  800219:	83 ec 08             	sub    $0x8,%esp
+  80021c:	ff 75 0c             	pushl  0xc(%ebp)
+  80021f:	ff 75 08             	pushl  0x8(%ebp)
+  800222:	e8 05 ff ff ff       	call   80012c <sys_wait>
+  800227:	83 c4 10             	add    $0x10,%esp
+}
+  80022a:	c9                   	leave  
+  80022b:	c3                   	ret    
+
+0080022c <yield>:
+
+void
+yield(void) {
+  80022c:	55                   	push   %ebp
+  80022d:	89 e5                	mov    %esp,%ebp
+  80022f:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800232:	e8 0a ff ff ff       	call   800141 <sys_yield>
+}
+  800237:	90                   	nop
+  800238:	c9                   	leave  
+  800239:	c3                   	ret    
+
+0080023a <kill>:
+
+int
+kill(int pid) {
+  80023a:	55                   	push   %ebp
+  80023b:	89 e5                	mov    %esp,%ebp
+  80023d:	83 ec 08             	sub    $0x8,%esp
+    return sys_kill(pid);
+  800240:	83 ec 0c             	sub    $0xc,%esp
+  800243:	ff 75 08             	pushl  0x8(%ebp)
+  800246:	e8 05 ff ff ff       	call   800150 <sys_kill>
+  80024b:	83 c4 10             	add    $0x10,%esp
+}
+  80024e:	c9                   	leave  
+  80024f:	c3                   	ret    
+
+00800250 <getpid>:
+
+int
+getpid(void) {
+  800250:	55                   	push   %ebp
+  800251:	89 e5                	mov    %esp,%ebp
+  800253:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800256:	e8 07 ff ff ff       	call   800162 <sys_getpid>
+}
+  80025b:	c9                   	leave  
+  80025c:	c3                   	ret    
+
+0080025d <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80025d:	55                   	push   %ebp
+  80025e:	89 e5                	mov    %esp,%ebp
+  800260:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800263:	e8 1b ff ff ff       	call   800183 <sys_pgdir>
+}
+  800268:	90                   	nop
+  800269:	c9                   	leave  
+  80026a:	c3                   	ret    
+
+0080026b <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80026b:	55                   	push   %ebp
+  80026c:	89 e5                	mov    %esp,%ebp
+  80026e:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800271:	e8 1c ff ff ff       	call   800192 <sys_gettime>
+}
+  800276:	c9                   	leave  
+  800277:	c3                   	ret    
+
+00800278 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800278:	55                   	push   %ebp
+  800279:	89 e5                	mov    %esp,%ebp
+  80027b:	83 ec 08             	sub    $0x8,%esp
+    sys_lab6_set_priority(priority);
+  80027e:	83 ec 0c             	sub    $0xc,%esp
+  800281:	ff 75 08             	pushl  0x8(%ebp)
+  800284:	e8 18 ff ff ff       	call   8001a1 <sys_lab6_set_priority>
+  800289:	83 c4 10             	add    $0x10,%esp
+}
+  80028c:	90                   	nop
+  80028d:	c9                   	leave  
+  80028e:	c3                   	ret    
+
+0080028f <sleep>:
+
+int
+sleep(unsigned int time) {
+  80028f:	55                   	push   %ebp
+  800290:	89 e5                	mov    %esp,%ebp
+  800292:	83 ec 08             	sub    $0x8,%esp
+    return sys_sleep(time);
+  800295:	83 ec 0c             	sub    $0xc,%esp
+  800298:	ff 75 08             	pushl  0x8(%ebp)
+  80029b:	e8 17 ff ff ff       	call   8001b7 <sys_sleep>
+  8002a0:	83 c4 10             	add    $0x10,%esp
+}
+  8002a3:	c9                   	leave  
+  8002a4:	c3                   	ret    
+
+008002a5 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  8002a5:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  8002aa:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  8002ad:	e8 c3 00 00 00       	call   800375 <umain>
+1:  jmp 1b
+  8002b2:	eb fe                	jmp    8002b2 <_start+0xd>
+
+008002b4 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8002b4:	55                   	push   %ebp
+  8002b5:	89 e5                	mov    %esp,%ebp
+  8002b7:	83 ec 08             	sub    $0x8,%esp
+    sys_putc(c);
+  8002ba:	83 ec 0c             	sub    $0xc,%esp
+  8002bd:	ff 75 08             	pushl  0x8(%ebp)
+  8002c0:	e8 ac fe ff ff       	call   800171 <sys_putc>
+  8002c5:	83 c4 10             	add    $0x10,%esp
+    (*cnt) ++;
+  8002c8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002cb:	8b 00                	mov    (%eax),%eax
+  8002cd:	8d 50 01             	lea    0x1(%eax),%edx
+  8002d0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002d3:	89 10                	mov    %edx,(%eax)
+}
+  8002d5:	90                   	nop
+  8002d6:	c9                   	leave  
+  8002d7:	c3                   	ret    
+
+008002d8 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002d8:	55                   	push   %ebp
+  8002d9:	89 e5                	mov    %esp,%ebp
+  8002db:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  8002de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002e5:	ff 75 0c             	pushl  0xc(%ebp)
+  8002e8:	ff 75 08             	pushl  0x8(%ebp)
+  8002eb:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  8002ee:	50                   	push   %eax
+  8002ef:	68 b4 02 80 00       	push   $0x8002b4
+  8002f4:	e8 fc 06 00 00       	call   8009f5 <vprintfmt>
+  8002f9:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  8002fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002ff:	c9                   	leave  
+  800300:	c3                   	ret    
+
+00800301 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800301:	55                   	push   %ebp
+  800302:	89 e5                	mov    %esp,%ebp
+  800304:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800307:	8d 45 0c             	lea    0xc(%ebp),%eax
+  80030a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  80030d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800310:	83 ec 08             	sub    $0x8,%esp
+  800313:	50                   	push   %eax
+  800314:	ff 75 08             	pushl  0x8(%ebp)
+  800317:	e8 bc ff ff ff       	call   8002d8 <vcprintf>
+  80031c:	83 c4 10             	add    $0x10,%esp
+  80031f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800322:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800325:	c9                   	leave  
+  800326:	c3                   	ret    
+
+00800327 <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  800327:	55                   	push   %ebp
+  800328:	89 e5                	mov    %esp,%ebp
+  80032a:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  80032d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  800334:	eb 14                	jmp    80034a <cputs+0x23>
+        cputch(c, &cnt);
+  800336:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  80033a:	83 ec 08             	sub    $0x8,%esp
+  80033d:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800340:	52                   	push   %edx
+  800341:	50                   	push   %eax
+  800342:	e8 6d ff ff ff       	call   8002b4 <cputch>
+  800347:	83 c4 10             	add    $0x10,%esp
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  80034a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80034d:	8d 50 01             	lea    0x1(%eax),%edx
+  800350:	89 55 08             	mov    %edx,0x8(%ebp)
+  800353:	0f b6 00             	movzbl (%eax),%eax
+  800356:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800359:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  80035d:	75 d7                	jne    800336 <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  80035f:	83 ec 08             	sub    $0x8,%esp
+  800362:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800365:	50                   	push   %eax
+  800366:	6a 0a                	push   $0xa
+  800368:	e8 47 ff ff ff       	call   8002b4 <cputch>
+  80036d:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  800370:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  800373:	c9                   	leave  
+  800374:	c3                   	ret    
+
+00800375 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800375:	55                   	push   %ebp
+  800376:	89 e5                	mov    %esp,%ebp
+  800378:	83 ec 18             	sub    $0x18,%esp
+    int ret = main();
+  80037b:	e8 90 0c 00 00       	call   801010 <main>
+  800380:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  800383:	83 ec 0c             	sub    $0xc,%esp
+  800386:	ff 75 f4             	pushl  -0xc(%ebp)
+  800389:	e8 3b fe ff ff       	call   8001c9 <exit>
+
+0080038e <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  80038e:	55                   	push   %ebp
+  80038f:	89 e5                	mov    %esp,%ebp
+  800391:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800394:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  80039b:	eb 04                	jmp    8003a1 <strlen+0x13>
+        cnt ++;
+  80039d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  8003a1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003a4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003a7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003aa:	0f b6 00             	movzbl (%eax),%eax
+  8003ad:	84 c0                	test   %al,%al
+  8003af:	75 ec                	jne    80039d <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003b4:	c9                   	leave  
+  8003b5:	c3                   	ret    
+
+008003b6 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  8003b6:	55                   	push   %ebp
+  8003b7:	89 e5                	mov    %esp,%ebp
+  8003b9:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003bc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003c3:	eb 04                	jmp    8003c9 <strnlen+0x13>
+        cnt ++;
+  8003c5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  8003c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003cc:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003cf:	73 10                	jae    8003e1 <strnlen+0x2b>
+  8003d1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003d4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003d7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003da:	0f b6 00             	movzbl (%eax),%eax
+  8003dd:	84 c0                	test   %al,%al
+  8003df:	75 e4                	jne    8003c5 <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003e4:	c9                   	leave  
+  8003e5:	c3                   	ret    
+
+008003e6 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  8003e6:	55                   	push   %ebp
+  8003e7:	89 e5                	mov    %esp,%ebp
+  8003e9:	57                   	push   %edi
+  8003ea:	56                   	push   %esi
+  8003eb:	83 ec 20             	sub    $0x20,%esp
+  8003ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003f4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8003f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  8003fa:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800400:	89 d1                	mov    %edx,%ecx
+  800402:	89 c2                	mov    %eax,%edx
+  800404:	89 ce                	mov    %ecx,%esi
+  800406:	89 d7                	mov    %edx,%edi
+  800408:	ac                   	lods   %ds:(%esi),%al
+  800409:	aa                   	stos   %al,%es:(%edi)
+  80040a:	84 c0                	test   %al,%al
+  80040c:	75 fa                	jne    800408 <strcpy+0x22>
+  80040e:	89 fa                	mov    %edi,%edx
+  800410:	89 f1                	mov    %esi,%ecx
+  800412:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800415:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800418:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  80041b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  80041e:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  80041f:	83 c4 20             	add    $0x20,%esp
+  800422:	5e                   	pop    %esi
+  800423:	5f                   	pop    %edi
+  800424:	5d                   	pop    %ebp
+  800425:	c3                   	ret    
+
+00800426 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800426:	55                   	push   %ebp
+  800427:	89 e5                	mov    %esp,%ebp
+  800429:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  80042c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80042f:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800432:	eb 21                	jmp    800455 <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800434:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800437:	0f b6 10             	movzbl (%eax),%edx
+  80043a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80043d:	88 10                	mov    %dl,(%eax)
+  80043f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800442:	0f b6 00             	movzbl (%eax),%eax
+  800445:	84 c0                	test   %al,%al
+  800447:	74 04                	je     80044d <strncpy+0x27>
+            src ++;
+  800449:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  80044d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800451:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800455:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800459:	75 d9                	jne    800434 <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  80045b:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  80045e:	c9                   	leave  
+  80045f:	c3                   	ret    
+
+00800460 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800460:	55                   	push   %ebp
+  800461:	89 e5                	mov    %esp,%ebp
+  800463:	57                   	push   %edi
+  800464:	56                   	push   %esi
+  800465:	83 ec 20             	sub    $0x20,%esp
+  800468:	8b 45 08             	mov    0x8(%ebp),%eax
+  80046b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80046e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800471:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800474:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800477:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80047a:	89 d1                	mov    %edx,%ecx
+  80047c:	89 c2                	mov    %eax,%edx
+  80047e:	89 ce                	mov    %ecx,%esi
+  800480:	89 d7                	mov    %edx,%edi
+  800482:	ac                   	lods   %ds:(%esi),%al
+  800483:	ae                   	scas   %es:(%edi),%al
+  800484:	75 08                	jne    80048e <strcmp+0x2e>
+  800486:	84 c0                	test   %al,%al
+  800488:	75 f8                	jne    800482 <strcmp+0x22>
+  80048a:	31 c0                	xor    %eax,%eax
+  80048c:	eb 04                	jmp    800492 <strcmp+0x32>
+  80048e:	19 c0                	sbb    %eax,%eax
+  800490:	0c 01                	or     $0x1,%al
+  800492:	89 fa                	mov    %edi,%edx
+  800494:	89 f1                	mov    %esi,%ecx
+  800496:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800499:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  80049c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  80049f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  8004a2:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  8004a3:	83 c4 20             	add    $0x20,%esp
+  8004a6:	5e                   	pop    %esi
+  8004a7:	5f                   	pop    %edi
+  8004a8:	5d                   	pop    %ebp
+  8004a9:	c3                   	ret    
+
+008004aa <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  8004aa:	55                   	push   %ebp
+  8004ab:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004ad:	eb 0c                	jmp    8004bb <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  8004af:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  8004b3:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8004b7:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004bb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004bf:	74 1a                	je     8004db <strncmp+0x31>
+  8004c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004c4:	0f b6 00             	movzbl (%eax),%eax
+  8004c7:	84 c0                	test   %al,%al
+  8004c9:	74 10                	je     8004db <strncmp+0x31>
+  8004cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004ce:	0f b6 10             	movzbl (%eax),%edx
+  8004d1:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004d4:	0f b6 00             	movzbl (%eax),%eax
+  8004d7:	38 c2                	cmp    %al,%dl
+  8004d9:	74 d4                	je     8004af <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004db:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004df:	74 18                	je     8004f9 <strncmp+0x4f>
+  8004e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e4:	0f b6 00             	movzbl (%eax),%eax
+  8004e7:	0f b6 d0             	movzbl %al,%edx
+  8004ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ed:	0f b6 00             	movzbl (%eax),%eax
+  8004f0:	0f b6 c0             	movzbl %al,%eax
+  8004f3:	29 c2                	sub    %eax,%edx
+  8004f5:	89 d0                	mov    %edx,%eax
+  8004f7:	eb 05                	jmp    8004fe <strncmp+0x54>
+  8004f9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8004fe:	5d                   	pop    %ebp
+  8004ff:	c3                   	ret    
+
+00800500 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800500:	55                   	push   %ebp
+  800501:	89 e5                	mov    %esp,%ebp
+  800503:	83 ec 04             	sub    $0x4,%esp
+  800506:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800509:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  80050c:	eb 14                	jmp    800522 <strchr+0x22>
+        if (*s == c) {
+  80050e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800511:	0f b6 00             	movzbl (%eax),%eax
+  800514:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800517:	75 05                	jne    80051e <strchr+0x1e>
+            return (char *)s;
+  800519:	8b 45 08             	mov    0x8(%ebp),%eax
+  80051c:	eb 13                	jmp    800531 <strchr+0x31>
+        }
+        s ++;
+  80051e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800522:	8b 45 08             	mov    0x8(%ebp),%eax
+  800525:	0f b6 00             	movzbl (%eax),%eax
+  800528:	84 c0                	test   %al,%al
+  80052a:	75 e2                	jne    80050e <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  80052c:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800531:	c9                   	leave  
+  800532:	c3                   	ret    
+
+00800533 <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800533:	55                   	push   %ebp
+  800534:	89 e5                	mov    %esp,%ebp
+  800536:	83 ec 04             	sub    $0x4,%esp
+  800539:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80053c:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  80053f:	eb 0f                	jmp    800550 <strfind+0x1d>
+        if (*s == c) {
+  800541:	8b 45 08             	mov    0x8(%ebp),%eax
+  800544:	0f b6 00             	movzbl (%eax),%eax
+  800547:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  80054a:	74 10                	je     80055c <strfind+0x29>
+            break;
+        }
+        s ++;
+  80054c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800550:	8b 45 08             	mov    0x8(%ebp),%eax
+  800553:	0f b6 00             	movzbl (%eax),%eax
+  800556:	84 c0                	test   %al,%al
+  800558:	75 e7                	jne    800541 <strfind+0xe>
+  80055a:	eb 01                	jmp    80055d <strfind+0x2a>
+        if (*s == c) {
+            break;
+  80055c:	90                   	nop
+        }
+        s ++;
+    }
+    return (char *)s;
+  80055d:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800560:	c9                   	leave  
+  800561:	c3                   	ret    
+
+00800562 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800562:	55                   	push   %ebp
+  800563:	89 e5                	mov    %esp,%ebp
+  800565:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800568:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  80056f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800576:	eb 04                	jmp    80057c <strtol+0x1a>
+        s ++;
+  800578:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80057c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80057f:	0f b6 00             	movzbl (%eax),%eax
+  800582:	3c 20                	cmp    $0x20,%al
+  800584:	74 f2                	je     800578 <strtol+0x16>
+  800586:	8b 45 08             	mov    0x8(%ebp),%eax
+  800589:	0f b6 00             	movzbl (%eax),%eax
+  80058c:	3c 09                	cmp    $0x9,%al
+  80058e:	74 e8                	je     800578 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800590:	8b 45 08             	mov    0x8(%ebp),%eax
+  800593:	0f b6 00             	movzbl (%eax),%eax
+  800596:	3c 2b                	cmp    $0x2b,%al
+  800598:	75 06                	jne    8005a0 <strtol+0x3e>
+        s ++;
+  80059a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  80059e:	eb 15                	jmp    8005b5 <strtol+0x53>
+    }
+    else if (*s == '-') {
+  8005a0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a3:	0f b6 00             	movzbl (%eax),%eax
+  8005a6:	3c 2d                	cmp    $0x2d,%al
+  8005a8:	75 0b                	jne    8005b5 <strtol+0x53>
+        s ++, neg = 1;
+  8005aa:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005ae:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  8005b5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005b9:	74 06                	je     8005c1 <strtol+0x5f>
+  8005bb:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  8005bf:	75 24                	jne    8005e5 <strtol+0x83>
+  8005c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005c4:	0f b6 00             	movzbl (%eax),%eax
+  8005c7:	3c 30                	cmp    $0x30,%al
+  8005c9:	75 1a                	jne    8005e5 <strtol+0x83>
+  8005cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ce:	83 c0 01             	add    $0x1,%eax
+  8005d1:	0f b6 00             	movzbl (%eax),%eax
+  8005d4:	3c 78                	cmp    $0x78,%al
+  8005d6:	75 0d                	jne    8005e5 <strtol+0x83>
+        s += 2, base = 16;
+  8005d8:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005dc:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005e3:	eb 2a                	jmp    80060f <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005e5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005e9:	75 17                	jne    800602 <strtol+0xa0>
+  8005eb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ee:	0f b6 00             	movzbl (%eax),%eax
+  8005f1:	3c 30                	cmp    $0x30,%al
+  8005f3:	75 0d                	jne    800602 <strtol+0xa0>
+        s ++, base = 8;
+  8005f5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005f9:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800600:	eb 0d                	jmp    80060f <strtol+0xad>
+    }
+    else if (base == 0) {
+  800602:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800606:	75 07                	jne    80060f <strtol+0xad>
+        base = 10;
+  800608:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  80060f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800612:	0f b6 00             	movzbl (%eax),%eax
+  800615:	3c 2f                	cmp    $0x2f,%al
+  800617:	7e 1b                	jle    800634 <strtol+0xd2>
+  800619:	8b 45 08             	mov    0x8(%ebp),%eax
+  80061c:	0f b6 00             	movzbl (%eax),%eax
+  80061f:	3c 39                	cmp    $0x39,%al
+  800621:	7f 11                	jg     800634 <strtol+0xd2>
+            dig = *s - '0';
+  800623:	8b 45 08             	mov    0x8(%ebp),%eax
+  800626:	0f b6 00             	movzbl (%eax),%eax
+  800629:	0f be c0             	movsbl %al,%eax
+  80062c:	83 e8 30             	sub    $0x30,%eax
+  80062f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800632:	eb 48                	jmp    80067c <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800634:	8b 45 08             	mov    0x8(%ebp),%eax
+  800637:	0f b6 00             	movzbl (%eax),%eax
+  80063a:	3c 60                	cmp    $0x60,%al
+  80063c:	7e 1b                	jle    800659 <strtol+0xf7>
+  80063e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800641:	0f b6 00             	movzbl (%eax),%eax
+  800644:	3c 7a                	cmp    $0x7a,%al
+  800646:	7f 11                	jg     800659 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800648:	8b 45 08             	mov    0x8(%ebp),%eax
+  80064b:	0f b6 00             	movzbl (%eax),%eax
+  80064e:	0f be c0             	movsbl %al,%eax
+  800651:	83 e8 57             	sub    $0x57,%eax
+  800654:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800657:	eb 23                	jmp    80067c <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800659:	8b 45 08             	mov    0x8(%ebp),%eax
+  80065c:	0f b6 00             	movzbl (%eax),%eax
+  80065f:	3c 40                	cmp    $0x40,%al
+  800661:	7e 3c                	jle    80069f <strtol+0x13d>
+  800663:	8b 45 08             	mov    0x8(%ebp),%eax
+  800666:	0f b6 00             	movzbl (%eax),%eax
+  800669:	3c 5a                	cmp    $0x5a,%al
+  80066b:	7f 32                	jg     80069f <strtol+0x13d>
+            dig = *s - 'A' + 10;
+  80066d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800670:	0f b6 00             	movzbl (%eax),%eax
+  800673:	0f be c0             	movsbl %al,%eax
+  800676:	83 e8 37             	sub    $0x37,%eax
+  800679:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  80067c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80067f:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800682:	7d 1a                	jge    80069e <strtol+0x13c>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  800684:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800688:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80068b:	0f af 45 10          	imul   0x10(%ebp),%eax
+  80068f:	89 c2                	mov    %eax,%edx
+  800691:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800694:	01 d0                	add    %edx,%eax
+  800696:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800699:	e9 71 ff ff ff       	jmp    80060f <strtol+0xad>
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+            break;
+  80069e:	90                   	nop
+        }
+        s ++, val = (val * base) + dig;
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  80069f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8006a3:	74 08                	je     8006ad <strtol+0x14b>
+        *endptr = (char *) s;
+  8006a5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006a8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006ab:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  8006ad:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  8006b1:	74 07                	je     8006ba <strtol+0x158>
+  8006b3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006b6:	f7 d8                	neg    %eax
+  8006b8:	eb 03                	jmp    8006bd <strtol+0x15b>
+  8006ba:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  8006bd:	c9                   	leave  
+  8006be:	c3                   	ret    
+
+008006bf <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  8006bf:	55                   	push   %ebp
+  8006c0:	89 e5                	mov    %esp,%ebp
+  8006c2:	57                   	push   %edi
+  8006c3:	83 ec 24             	sub    $0x24,%esp
+  8006c6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006c9:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006cc:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006d0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006d3:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006d6:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006d9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006df:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006e2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006e6:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006e9:	89 d7                	mov    %edx,%edi
+  8006eb:	f3 aa                	rep stos %al,%es:(%edi)
+  8006ed:	89 fa                	mov    %edi,%edx
+  8006ef:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8006f2:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  8006f5:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006f8:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  8006f9:	83 c4 24             	add    $0x24,%esp
+  8006fc:	5f                   	pop    %edi
+  8006fd:	5d                   	pop    %ebp
+  8006fe:	c3                   	ret    
+
+008006ff <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  8006ff:	55                   	push   %ebp
+  800700:	89 e5                	mov    %esp,%ebp
+  800702:	57                   	push   %edi
+  800703:	56                   	push   %esi
+  800704:	53                   	push   %ebx
+  800705:	83 ec 30             	sub    $0x30,%esp
+  800708:	8b 45 08             	mov    0x8(%ebp),%eax
+  80070b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80070e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800711:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800714:	8b 45 10             	mov    0x10(%ebp),%eax
+  800717:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  80071a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80071d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800720:	73 42                	jae    800764 <memmove+0x65>
+  800722:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800725:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800728:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80072b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80072e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800731:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800734:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800737:	c1 e8 02             	shr    $0x2,%eax
+  80073a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  80073c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  80073f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800742:	89 d7                	mov    %edx,%edi
+  800744:	89 c6                	mov    %eax,%esi
+  800746:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800748:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  80074b:	83 e1 03             	and    $0x3,%ecx
+  80074e:	74 02                	je     800752 <memmove+0x53>
+  800750:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800752:	89 f0                	mov    %esi,%eax
+  800754:	89 fa                	mov    %edi,%edx
+  800756:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800759:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  80075c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  80075f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  800762:	eb 36                	jmp    80079a <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800764:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800767:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80076a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80076d:	01 c2                	add    %eax,%edx
+  80076f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800772:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800775:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800778:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  80077b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80077e:	89 c1                	mov    %eax,%ecx
+  800780:	89 d8                	mov    %ebx,%eax
+  800782:	89 d6                	mov    %edx,%esi
+  800784:	89 c7                	mov    %eax,%edi
+  800786:	fd                   	std    
+  800787:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800789:	fc                   	cld    
+  80078a:	89 f8                	mov    %edi,%eax
+  80078c:	89 f2                	mov    %esi,%edx
+  80078e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800791:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800794:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800797:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  80079a:	83 c4 30             	add    $0x30,%esp
+  80079d:	5b                   	pop    %ebx
+  80079e:	5e                   	pop    %esi
+  80079f:	5f                   	pop    %edi
+  8007a0:	5d                   	pop    %ebp
+  8007a1:	c3                   	ret    
+
+008007a2 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  8007a2:	55                   	push   %ebp
+  8007a3:	89 e5                	mov    %esp,%ebp
+  8007a5:	57                   	push   %edi
+  8007a6:	56                   	push   %esi
+  8007a7:	83 ec 20             	sub    $0x20,%esp
+  8007aa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8007b0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007b6:	8b 45 10             	mov    0x10(%ebp),%eax
+  8007b9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  8007bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8007bf:	c1 e8 02             	shr    $0x2,%eax
+  8007c2:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  8007c4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007ca:	89 d7                	mov    %edx,%edi
+  8007cc:	89 c6                	mov    %eax,%esi
+  8007ce:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007d0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007d3:	83 e1 03             	and    $0x3,%ecx
+  8007d6:	74 02                	je     8007da <memcpy+0x38>
+  8007d8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007da:	89 f0                	mov    %esi,%eax
+  8007dc:	89 fa                	mov    %edi,%edx
+  8007de:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007e1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007e4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  8007e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007ea:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007eb:	83 c4 20             	add    $0x20,%esp
+  8007ee:	5e                   	pop    %esi
+  8007ef:	5f                   	pop    %edi
+  8007f0:	5d                   	pop    %ebp
+  8007f1:	c3                   	ret    
+
+008007f2 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  8007f2:	55                   	push   %ebp
+  8007f3:	89 e5                	mov    %esp,%ebp
+  8007f5:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  8007f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007fb:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  8007fe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800801:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800804:	eb 30                	jmp    800836 <memcmp+0x44>
+        if (*s1 != *s2) {
+  800806:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800809:	0f b6 10             	movzbl (%eax),%edx
+  80080c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80080f:	0f b6 00             	movzbl (%eax),%eax
+  800812:	38 c2                	cmp    %al,%dl
+  800814:	74 18                	je     80082e <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800816:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800819:	0f b6 00             	movzbl (%eax),%eax
+  80081c:	0f b6 d0             	movzbl %al,%edx
+  80081f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800822:	0f b6 00             	movzbl (%eax),%eax
+  800825:	0f b6 c0             	movzbl %al,%eax
+  800828:	29 c2                	sub    %eax,%edx
+  80082a:	89 d0                	mov    %edx,%eax
+  80082c:	eb 1a                	jmp    800848 <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  80082e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800832:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800836:	8b 45 10             	mov    0x10(%ebp),%eax
+  800839:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80083c:	89 55 10             	mov    %edx,0x10(%ebp)
+  80083f:	85 c0                	test   %eax,%eax
+  800841:	75 c3                	jne    800806 <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800843:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800848:	c9                   	leave  
+  800849:	c3                   	ret    
+
+0080084a <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  80084a:	55                   	push   %ebp
+  80084b:	89 e5                	mov    %esp,%ebp
+  80084d:	83 ec 38             	sub    $0x38,%esp
+  800850:	8b 45 10             	mov    0x10(%ebp),%eax
+  800853:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800856:	8b 45 14             	mov    0x14(%ebp),%eax
+  800859:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80085c:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  80085f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800862:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800865:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800868:	8b 45 18             	mov    0x18(%ebp),%eax
+  80086b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  80086e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800871:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800874:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800877:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  80087a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80087d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800880:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800884:	74 1c                	je     8008a2 <printnum+0x58>
+  800886:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800889:	ba 00 00 00 00       	mov    $0x0,%edx
+  80088e:	f7 75 e4             	divl   -0x1c(%ebp)
+  800891:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800894:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800897:	ba 00 00 00 00       	mov    $0x0,%edx
+  80089c:	f7 75 e4             	divl   -0x1c(%ebp)
+  80089f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008a2:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008a8:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008ab:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8008ae:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8008b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008b4:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8008b7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8008ba:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8008bd:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8008c0:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8008c3:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008c6:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008cb:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008ce:	77 41                	ja     800911 <printnum+0xc7>
+  8008d0:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008d3:	72 05                	jb     8008da <printnum+0x90>
+  8008d5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  8008d8:	77 37                	ja     800911 <printnum+0xc7>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008da:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008dd:	83 e8 01             	sub    $0x1,%eax
+  8008e0:	83 ec 04             	sub    $0x4,%esp
+  8008e3:	ff 75 20             	pushl  0x20(%ebp)
+  8008e6:	50                   	push   %eax
+  8008e7:	ff 75 18             	pushl  0x18(%ebp)
+  8008ea:	ff 75 ec             	pushl  -0x14(%ebp)
+  8008ed:	ff 75 e8             	pushl  -0x18(%ebp)
+  8008f0:	ff 75 0c             	pushl  0xc(%ebp)
+  8008f3:	ff 75 08             	pushl  0x8(%ebp)
+  8008f6:	e8 4f ff ff ff       	call   80084a <printnum>
+  8008fb:	83 c4 20             	add    $0x20,%esp
+  8008fe:	eb 1b                	jmp    80091b <printnum+0xd1>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800900:	83 ec 08             	sub    $0x8,%esp
+  800903:	ff 75 0c             	pushl  0xc(%ebp)
+  800906:	ff 75 20             	pushl  0x20(%ebp)
+  800909:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090c:	ff d0                	call   *%eax
+  80090e:	83 c4 10             	add    $0x10,%esp
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  800911:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  800915:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  800919:	7f e5                	jg     800900 <printnum+0xb6>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  80091b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  80091e:	05 64 12 80 00       	add    $0x801264,%eax
+  800923:	0f b6 00             	movzbl (%eax),%eax
+  800926:	0f be c0             	movsbl %al,%eax
+  800929:	83 ec 08             	sub    $0x8,%esp
+  80092c:	ff 75 0c             	pushl  0xc(%ebp)
+  80092f:	50                   	push   %eax
+  800930:	8b 45 08             	mov    0x8(%ebp),%eax
+  800933:	ff d0                	call   *%eax
+  800935:	83 c4 10             	add    $0x10,%esp
+}
+  800938:	90                   	nop
+  800939:	c9                   	leave  
+  80093a:	c3                   	ret    
+
+0080093b <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  80093b:	55                   	push   %ebp
+  80093c:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  80093e:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800942:	7e 14                	jle    800958 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  800944:	8b 45 08             	mov    0x8(%ebp),%eax
+  800947:	8b 00                	mov    (%eax),%eax
+  800949:	8d 48 08             	lea    0x8(%eax),%ecx
+  80094c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80094f:	89 0a                	mov    %ecx,(%edx)
+  800951:	8b 50 04             	mov    0x4(%eax),%edx
+  800954:	8b 00                	mov    (%eax),%eax
+  800956:	eb 30                	jmp    800988 <getuint+0x4d>
+    }
+    else if (lflag) {
+  800958:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80095c:	74 16                	je     800974 <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  80095e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800961:	8b 00                	mov    (%eax),%eax
+  800963:	8d 48 04             	lea    0x4(%eax),%ecx
+  800966:	8b 55 08             	mov    0x8(%ebp),%edx
+  800969:	89 0a                	mov    %ecx,(%edx)
+  80096b:	8b 00                	mov    (%eax),%eax
+  80096d:	ba 00 00 00 00       	mov    $0x0,%edx
+  800972:	eb 14                	jmp    800988 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  800974:	8b 45 08             	mov    0x8(%ebp),%eax
+  800977:	8b 00                	mov    (%eax),%eax
+  800979:	8d 48 04             	lea    0x4(%eax),%ecx
+  80097c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80097f:	89 0a                	mov    %ecx,(%edx)
+  800981:	8b 00                	mov    (%eax),%eax
+  800983:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800988:	5d                   	pop    %ebp
+  800989:	c3                   	ret    
+
+0080098a <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  80098a:	55                   	push   %ebp
+  80098b:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  80098d:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800991:	7e 14                	jle    8009a7 <getint+0x1d>
+        return va_arg(*ap, long long);
+  800993:	8b 45 08             	mov    0x8(%ebp),%eax
+  800996:	8b 00                	mov    (%eax),%eax
+  800998:	8d 48 08             	lea    0x8(%eax),%ecx
+  80099b:	8b 55 08             	mov    0x8(%ebp),%edx
+  80099e:	89 0a                	mov    %ecx,(%edx)
+  8009a0:	8b 50 04             	mov    0x4(%eax),%edx
+  8009a3:	8b 00                	mov    (%eax),%eax
+  8009a5:	eb 28                	jmp    8009cf <getint+0x45>
+    }
+    else if (lflag) {
+  8009a7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8009ab:	74 12                	je     8009bf <getint+0x35>
+        return va_arg(*ap, long);
+  8009ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b0:	8b 00                	mov    (%eax),%eax
+  8009b2:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009b5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009b8:	89 0a                	mov    %ecx,(%edx)
+  8009ba:	8b 00                	mov    (%eax),%eax
+  8009bc:	99                   	cltd   
+  8009bd:	eb 10                	jmp    8009cf <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  8009bf:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009c2:	8b 00                	mov    (%eax),%eax
+  8009c4:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009c7:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009ca:	89 0a                	mov    %ecx,(%edx)
+  8009cc:	8b 00                	mov    (%eax),%eax
+  8009ce:	99                   	cltd   
+    }
+}
+  8009cf:	5d                   	pop    %ebp
+  8009d0:	c3                   	ret    
+
+008009d1 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009d1:	55                   	push   %ebp
+  8009d2:	89 e5                	mov    %esp,%ebp
+  8009d4:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009d7:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009da:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8009e0:	50                   	push   %eax
+  8009e1:	ff 75 10             	pushl  0x10(%ebp)
+  8009e4:	ff 75 0c             	pushl  0xc(%ebp)
+  8009e7:	ff 75 08             	pushl  0x8(%ebp)
+  8009ea:	e8 06 00 00 00       	call   8009f5 <vprintfmt>
+  8009ef:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8009f2:	90                   	nop
+  8009f3:	c9                   	leave  
+  8009f4:	c3                   	ret    
+
+008009f5 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8009f5:	55                   	push   %ebp
+  8009f6:	89 e5                	mov    %esp,%ebp
+  8009f8:	56                   	push   %esi
+  8009f9:	53                   	push   %ebx
+  8009fa:	83 ec 20             	sub    $0x20,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009fd:	eb 17                	jmp    800a16 <vprintfmt+0x21>
+            if (ch == '\0') {
+  8009ff:	85 db                	test   %ebx,%ebx
+  800a01:	0f 84 8e 03 00 00    	je     800d95 <vprintfmt+0x3a0>
+                return;
+            }
+            putch(ch, putdat);
+  800a07:	83 ec 08             	sub    $0x8,%esp
+  800a0a:	ff 75 0c             	pushl  0xc(%ebp)
+  800a0d:	53                   	push   %ebx
+  800a0e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a11:	ff d0                	call   *%eax
+  800a13:	83 c4 10             	add    $0x10,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a16:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a19:	8d 50 01             	lea    0x1(%eax),%edx
+  800a1c:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a1f:	0f b6 00             	movzbl (%eax),%eax
+  800a22:	0f b6 d8             	movzbl %al,%ebx
+  800a25:	83 fb 25             	cmp    $0x25,%ebx
+  800a28:	75 d5                	jne    8009ff <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a2a:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a2e:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a38:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a3b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a42:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a45:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a48:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a4b:	8d 50 01             	lea    0x1(%eax),%edx
+  800a4e:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a51:	0f b6 00             	movzbl (%eax),%eax
+  800a54:	0f b6 d8             	movzbl %al,%ebx
+  800a57:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a5a:	83 f8 55             	cmp    $0x55,%eax
+  800a5d:	0f 87 05 03 00 00    	ja     800d68 <vprintfmt+0x373>
+  800a63:	8b 04 85 88 12 80 00 	mov    0x801288(,%eax,4),%eax
+  800a6a:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a6c:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a70:	eb d6                	jmp    800a48 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a72:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800a76:	eb d0                	jmp    800a48 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a78:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800a7f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a82:	89 d0                	mov    %edx,%eax
+  800a84:	c1 e0 02             	shl    $0x2,%eax
+  800a87:	01 d0                	add    %edx,%eax
+  800a89:	01 c0                	add    %eax,%eax
+  800a8b:	01 d8                	add    %ebx,%eax
+  800a8d:	83 e8 30             	sub    $0x30,%eax
+  800a90:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800a93:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a96:	0f b6 00             	movzbl (%eax),%eax
+  800a99:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800a9c:	83 fb 2f             	cmp    $0x2f,%ebx
+  800a9f:	7e 39                	jle    800ada <vprintfmt+0xe5>
+  800aa1:	83 fb 39             	cmp    $0x39,%ebx
+  800aa4:	7f 34                	jg     800ada <vprintfmt+0xe5>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800aa6:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  800aaa:	eb d3                	jmp    800a7f <vprintfmt+0x8a>
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800aac:	8b 45 14             	mov    0x14(%ebp),%eax
+  800aaf:	8d 50 04             	lea    0x4(%eax),%edx
+  800ab2:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ab5:	8b 00                	mov    (%eax),%eax
+  800ab7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800aba:	eb 1f                	jmp    800adb <vprintfmt+0xe6>
+
+        case '.':
+            if (width < 0)
+  800abc:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ac0:	79 86                	jns    800a48 <vprintfmt+0x53>
+                width = 0;
+  800ac2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800ac9:	e9 7a ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800ace:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800ad5:	e9 6e ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+            goto process_precision;
+  800ada:	90                   	nop
+        case '#':
+            altflag = 1;
+            goto reswitch;
+
+        process_precision:
+            if (width < 0)
+  800adb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800adf:	0f 89 63 ff ff ff    	jns    800a48 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800ae5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ae8:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800aeb:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800af2:	e9 51 ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800af7:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800afb:	e9 48 ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800b00:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b03:	8d 50 04             	lea    0x4(%eax),%edx
+  800b06:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b09:	8b 00                	mov    (%eax),%eax
+  800b0b:	83 ec 08             	sub    $0x8,%esp
+  800b0e:	ff 75 0c             	pushl  0xc(%ebp)
+  800b11:	50                   	push   %eax
+  800b12:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b15:	ff d0                	call   *%eax
+  800b17:	83 c4 10             	add    $0x10,%esp
+            break;
+  800b1a:	e9 71 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800b1f:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b22:	8d 50 04             	lea    0x4(%eax),%edx
+  800b25:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b28:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b2a:	85 db                	test   %ebx,%ebx
+  800b2c:	79 02                	jns    800b30 <vprintfmt+0x13b>
+                err = -err;
+  800b2e:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b30:	83 fb 18             	cmp    $0x18,%ebx
+  800b33:	7f 0b                	jg     800b40 <vprintfmt+0x14b>
+  800b35:	8b 34 9d 00 12 80 00 	mov    0x801200(,%ebx,4),%esi
+  800b3c:	85 f6                	test   %esi,%esi
+  800b3e:	75 19                	jne    800b59 <vprintfmt+0x164>
+                printfmt(putch, putdat, "error %d", err);
+  800b40:	53                   	push   %ebx
+  800b41:	68 75 12 80 00       	push   $0x801275
+  800b46:	ff 75 0c             	pushl  0xc(%ebp)
+  800b49:	ff 75 08             	pushl  0x8(%ebp)
+  800b4c:	e8 80 fe ff ff       	call   8009d1 <printfmt>
+  800b51:	83 c4 10             	add    $0x10,%esp
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b54:	e9 37 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  800b59:	56                   	push   %esi
+  800b5a:	68 7e 12 80 00       	push   $0x80127e
+  800b5f:	ff 75 0c             	pushl  0xc(%ebp)
+  800b62:	ff 75 08             	pushl  0x8(%ebp)
+  800b65:	e8 67 fe ff ff       	call   8009d1 <printfmt>
+  800b6a:	83 c4 10             	add    $0x10,%esp
+            }
+            break;
+  800b6d:	e9 1e 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800b72:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b75:	8d 50 04             	lea    0x4(%eax),%edx
+  800b78:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b7b:	8b 30                	mov    (%eax),%esi
+  800b7d:	85 f6                	test   %esi,%esi
+  800b7f:	75 05                	jne    800b86 <vprintfmt+0x191>
+                p = "(null)";
+  800b81:	be 81 12 80 00       	mov    $0x801281,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800b86:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b8a:	7e 76                	jle    800c02 <vprintfmt+0x20d>
+  800b8c:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800b90:	74 70                	je     800c02 <vprintfmt+0x20d>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b92:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b95:	83 ec 08             	sub    $0x8,%esp
+  800b98:	50                   	push   %eax
+  800b99:	56                   	push   %esi
+  800b9a:	e8 17 f8 ff ff       	call   8003b6 <strnlen>
+  800b9f:	83 c4 10             	add    $0x10,%esp
+  800ba2:	89 c2                	mov    %eax,%edx
+  800ba4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ba7:	29 d0                	sub    %edx,%eax
+  800ba9:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800bac:	eb 17                	jmp    800bc5 <vprintfmt+0x1d0>
+                    putch(padc, putdat);
+  800bae:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800bb2:	83 ec 08             	sub    $0x8,%esp
+  800bb5:	ff 75 0c             	pushl  0xc(%ebp)
+  800bb8:	50                   	push   %eax
+  800bb9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bbc:	ff d0                	call   *%eax
+  800bbe:	83 c4 10             	add    $0x10,%esp
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bc1:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800bc5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800bc9:	7f e3                	jg     800bae <vprintfmt+0x1b9>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bcb:	eb 35                	jmp    800c02 <vprintfmt+0x20d>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800bcd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800bd1:	74 1c                	je     800bef <vprintfmt+0x1fa>
+  800bd3:	83 fb 1f             	cmp    $0x1f,%ebx
+  800bd6:	7e 05                	jle    800bdd <vprintfmt+0x1e8>
+  800bd8:	83 fb 7e             	cmp    $0x7e,%ebx
+  800bdb:	7e 12                	jle    800bef <vprintfmt+0x1fa>
+                    putch('?', putdat);
+  800bdd:	83 ec 08             	sub    $0x8,%esp
+  800be0:	ff 75 0c             	pushl  0xc(%ebp)
+  800be3:	6a 3f                	push   $0x3f
+  800be5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800be8:	ff d0                	call   *%eax
+  800bea:	83 c4 10             	add    $0x10,%esp
+  800bed:	eb 0f                	jmp    800bfe <vprintfmt+0x209>
+                }
+                else {
+                    putch(ch, putdat);
+  800bef:	83 ec 08             	sub    $0x8,%esp
+  800bf2:	ff 75 0c             	pushl  0xc(%ebp)
+  800bf5:	53                   	push   %ebx
+  800bf6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bf9:	ff d0                	call   *%eax
+  800bfb:	83 c4 10             	add    $0x10,%esp
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bfe:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c02:	89 f0                	mov    %esi,%eax
+  800c04:	8d 70 01             	lea    0x1(%eax),%esi
+  800c07:	0f b6 00             	movzbl (%eax),%eax
+  800c0a:	0f be d8             	movsbl %al,%ebx
+  800c0d:	85 db                	test   %ebx,%ebx
+  800c0f:	74 26                	je     800c37 <vprintfmt+0x242>
+  800c11:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c15:	78 b6                	js     800bcd <vprintfmt+0x1d8>
+  800c17:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  800c1b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c1f:	79 ac                	jns    800bcd <vprintfmt+0x1d8>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c21:	eb 14                	jmp    800c37 <vprintfmt+0x242>
+                putch(' ', putdat);
+  800c23:	83 ec 08             	sub    $0x8,%esp
+  800c26:	ff 75 0c             	pushl  0xc(%ebp)
+  800c29:	6a 20                	push   $0x20
+  800c2b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2e:	ff d0                	call   *%eax
+  800c30:	83 c4 10             	add    $0x10,%esp
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c33:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c37:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c3b:	7f e6                	jg     800c23 <vprintfmt+0x22e>
+                putch(' ', putdat);
+            }
+            break;
+  800c3d:	e9 4e 01 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c42:	83 ec 08             	sub    $0x8,%esp
+  800c45:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c48:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c4b:	50                   	push   %eax
+  800c4c:	e8 39 fd ff ff       	call   80098a <getint>
+  800c51:	83 c4 10             	add    $0x10,%esp
+  800c54:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c57:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c5d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c60:	85 d2                	test   %edx,%edx
+  800c62:	79 23                	jns    800c87 <vprintfmt+0x292>
+                putch('-', putdat);
+  800c64:	83 ec 08             	sub    $0x8,%esp
+  800c67:	ff 75 0c             	pushl  0xc(%ebp)
+  800c6a:	6a 2d                	push   $0x2d
+  800c6c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c6f:	ff d0                	call   *%eax
+  800c71:	83 c4 10             	add    $0x10,%esp
+                num = -(long long)num;
+  800c74:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c77:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c7a:	f7 d8                	neg    %eax
+  800c7c:	83 d2 00             	adc    $0x0,%edx
+  800c7f:	f7 da                	neg    %edx
+  800c81:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c84:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800c87:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c8e:	e9 9f 00 00 00       	jmp    800d32 <vprintfmt+0x33d>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800c93:	83 ec 08             	sub    $0x8,%esp
+  800c96:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c99:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c9c:	50                   	push   %eax
+  800c9d:	e8 99 fc ff ff       	call   80093b <getuint>
+  800ca2:	83 c4 10             	add    $0x10,%esp
+  800ca5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ca8:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800cab:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cb2:	eb 7e                	jmp    800d32 <vprintfmt+0x33d>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800cb4:	83 ec 08             	sub    $0x8,%esp
+  800cb7:	ff 75 e0             	pushl  -0x20(%ebp)
+  800cba:	8d 45 14             	lea    0x14(%ebp),%eax
+  800cbd:	50                   	push   %eax
+  800cbe:	e8 78 fc ff ff       	call   80093b <getuint>
+  800cc3:	83 c4 10             	add    $0x10,%esp
+  800cc6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cc9:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800ccc:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800cd3:	eb 5d                	jmp    800d32 <vprintfmt+0x33d>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800cd5:	83 ec 08             	sub    $0x8,%esp
+  800cd8:	ff 75 0c             	pushl  0xc(%ebp)
+  800cdb:	6a 30                	push   $0x30
+  800cdd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ce0:	ff d0                	call   *%eax
+  800ce2:	83 c4 10             	add    $0x10,%esp
+            putch('x', putdat);
+  800ce5:	83 ec 08             	sub    $0x8,%esp
+  800ce8:	ff 75 0c             	pushl  0xc(%ebp)
+  800ceb:	6a 78                	push   $0x78
+  800ced:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cf0:	ff d0                	call   *%eax
+  800cf2:	83 c4 10             	add    $0x10,%esp
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800cf5:	8b 45 14             	mov    0x14(%ebp),%eax
+  800cf8:	8d 50 04             	lea    0x4(%eax),%edx
+  800cfb:	89 55 14             	mov    %edx,0x14(%ebp)
+  800cfe:	8b 00                	mov    (%eax),%eax
+  800d00:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d03:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800d0a:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800d11:	eb 1f                	jmp    800d32 <vprintfmt+0x33d>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800d13:	83 ec 08             	sub    $0x8,%esp
+  800d16:	ff 75 e0             	pushl  -0x20(%ebp)
+  800d19:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d1c:	50                   	push   %eax
+  800d1d:	e8 19 fc ff ff       	call   80093b <getuint>
+  800d22:	83 c4 10             	add    $0x10,%esp
+  800d25:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d28:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d2b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d32:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d36:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d39:	83 ec 04             	sub    $0x4,%esp
+  800d3c:	52                   	push   %edx
+  800d3d:	ff 75 e8             	pushl  -0x18(%ebp)
+  800d40:	50                   	push   %eax
+  800d41:	ff 75 f4             	pushl  -0xc(%ebp)
+  800d44:	ff 75 f0             	pushl  -0x10(%ebp)
+  800d47:	ff 75 0c             	pushl  0xc(%ebp)
+  800d4a:	ff 75 08             	pushl  0x8(%ebp)
+  800d4d:	e8 f8 fa ff ff       	call   80084a <printnum>
+  800d52:	83 c4 20             	add    $0x20,%esp
+            break;
+  800d55:	eb 39                	jmp    800d90 <vprintfmt+0x39b>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800d57:	83 ec 08             	sub    $0x8,%esp
+  800d5a:	ff 75 0c             	pushl  0xc(%ebp)
+  800d5d:	53                   	push   %ebx
+  800d5e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d61:	ff d0                	call   *%eax
+  800d63:	83 c4 10             	add    $0x10,%esp
+            break;
+  800d66:	eb 28                	jmp    800d90 <vprintfmt+0x39b>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800d68:	83 ec 08             	sub    $0x8,%esp
+  800d6b:	ff 75 0c             	pushl  0xc(%ebp)
+  800d6e:	6a 25                	push   $0x25
+  800d70:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d73:	ff d0                	call   *%eax
+  800d75:	83 c4 10             	add    $0x10,%esp
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800d78:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d7c:	eb 04                	jmp    800d82 <vprintfmt+0x38d>
+  800d7e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d82:	8b 45 10             	mov    0x10(%ebp),%eax
+  800d85:	83 e8 01             	sub    $0x1,%eax
+  800d88:	0f b6 00             	movzbl (%eax),%eax
+  800d8b:	3c 25                	cmp    $0x25,%al
+  800d8d:	75 ef                	jne    800d7e <vprintfmt+0x389>
+                /* do nothing */;
+            break;
+  800d8f:	90                   	nop
+        }
+    }
+  800d90:	e9 68 fc ff ff       	jmp    8009fd <vprintfmt+0x8>
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+            if (ch == '\0') {
+                return;
+  800d95:	90                   	nop
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  800d96:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  800d99:	5b                   	pop    %ebx
+  800d9a:	5e                   	pop    %esi
+  800d9b:	5d                   	pop    %ebp
+  800d9c:	c3                   	ret    
+
+00800d9d <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800d9d:	55                   	push   %ebp
+  800d9e:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800da0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800da3:	8b 40 08             	mov    0x8(%eax),%eax
+  800da6:	8d 50 01             	lea    0x1(%eax),%edx
+  800da9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dac:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800daf:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db2:	8b 10                	mov    (%eax),%edx
+  800db4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db7:	8b 40 04             	mov    0x4(%eax),%eax
+  800dba:	39 c2                	cmp    %eax,%edx
+  800dbc:	73 12                	jae    800dd0 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800dbe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dc1:	8b 00                	mov    (%eax),%eax
+  800dc3:	8d 48 01             	lea    0x1(%eax),%ecx
+  800dc6:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800dc9:	89 0a                	mov    %ecx,(%edx)
+  800dcb:	8b 55 08             	mov    0x8(%ebp),%edx
+  800dce:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800dd0:	90                   	nop
+  800dd1:	5d                   	pop    %ebp
+  800dd2:	c3                   	ret    
+
+00800dd3 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800dd3:	55                   	push   %ebp
+  800dd4:	89 e5                	mov    %esp,%ebp
+  800dd6:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800dd9:	8d 45 14             	lea    0x14(%ebp),%eax
+  800ddc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800ddf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800de2:	50                   	push   %eax
+  800de3:	ff 75 10             	pushl  0x10(%ebp)
+  800de6:	ff 75 0c             	pushl  0xc(%ebp)
+  800de9:	ff 75 08             	pushl  0x8(%ebp)
+  800dec:	e8 0b 00 00 00       	call   800dfc <vsnprintf>
+  800df1:	83 c4 10             	add    $0x10,%esp
+  800df4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800df7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800dfa:	c9                   	leave  
+  800dfb:	c3                   	ret    
+
+00800dfc <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800dfc:	55                   	push   %ebp
+  800dfd:	89 e5                	mov    %esp,%ebp
+  800dff:	83 ec 18             	sub    $0x18,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800e02:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e05:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e08:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e0b:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800e0e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e11:	01 d0                	add    %edx,%eax
+  800e13:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e16:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800e1d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800e21:	74 0a                	je     800e2d <vsnprintf+0x31>
+  800e23:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800e26:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e29:	39 c2                	cmp    %eax,%edx
+  800e2b:	76 07                	jbe    800e34 <vsnprintf+0x38>
+        return -E_INVAL;
+  800e2d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e32:	eb 20                	jmp    800e54 <vsnprintf+0x58>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e34:	ff 75 14             	pushl  0x14(%ebp)
+  800e37:	ff 75 10             	pushl  0x10(%ebp)
+  800e3a:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800e3d:	50                   	push   %eax
+  800e3e:	68 9d 0d 80 00       	push   $0x800d9d
+  800e43:	e8 ad fb ff ff       	call   8009f5 <vprintfmt>
+  800e48:	83 c4 10             	add    $0x10,%esp
+    // null terminate the buffer
+    *b.buf = '\0';
+  800e4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e4e:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800e51:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e54:	c9                   	leave  
+  800e55:	c3                   	ret    
+
+00800e56 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800e56:	55                   	push   %ebp
+  800e57:	89 e5                	mov    %esp,%ebp
+  800e59:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800e5c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e5f:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800e65:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800e68:	b8 20 00 00 00       	mov    $0x20,%eax
+  800e6d:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800e70:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800e73:	89 c1                	mov    %eax,%ecx
+  800e75:	d3 ea                	shr    %cl,%edx
+  800e77:	89 d0                	mov    %edx,%eax
+}
+  800e79:	c9                   	leave  
+  800e7a:	c3                   	ret    
+
+00800e7b <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800e7b:	55                   	push   %ebp
+  800e7c:	89 e5                	mov    %esp,%ebp
+  800e7e:	57                   	push   %edi
+  800e7f:	56                   	push   %esi
+  800e80:	53                   	push   %ebx
+  800e81:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800e84:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e89:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800e8f:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800e95:	6b f0 05             	imul   $0x5,%eax,%esi
+  800e98:	01 fe                	add    %edi,%esi
+  800e9a:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800e9f:	f7 e7                	mul    %edi
+  800ea1:	01 d6                	add    %edx,%esi
+  800ea3:	89 f2                	mov    %esi,%edx
+  800ea5:	83 c0 0b             	add    $0xb,%eax
+  800ea8:	83 d2 00             	adc    $0x0,%edx
+  800eab:	89 c7                	mov    %eax,%edi
+  800ead:	83 e7 ff             	and    $0xffffffff,%edi
+  800eb0:	89 f9                	mov    %edi,%ecx
+  800eb2:	0f b7 da             	movzwl %dx,%ebx
+  800eb5:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800ebb:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800ec1:	a1 00 20 80 00       	mov    0x802000,%eax
+  800ec6:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ecc:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ed0:	c1 ea 0c             	shr    $0xc,%edx
+  800ed3:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ed6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800ed9:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ee0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ee3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ee6:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ee9:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800eec:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eef:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ef2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ef6:	74 1c                	je     800f14 <rand+0x99>
+  800ef8:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800efb:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f00:	f7 75 dc             	divl   -0x24(%ebp)
+  800f03:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800f06:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f09:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f0e:	f7 75 dc             	divl   -0x24(%ebp)
+  800f11:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800f14:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f17:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800f1a:	f7 75 dc             	divl   -0x24(%ebp)
+  800f1d:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f20:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f23:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f26:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800f29:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f2c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f2f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800f32:	83 c4 24             	add    $0x24,%esp
+  800f35:	5b                   	pop    %ebx
+  800f36:	5e                   	pop    %esi
+  800f37:	5f                   	pop    %edi
+  800f38:	5d                   	pop    %ebp
+  800f39:	c3                   	ret    
+
+00800f3a <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800f3a:	55                   	push   %ebp
+  800f3b:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800f3d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f40:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f45:	a3 00 20 80 00       	mov    %eax,0x802000
+  800f4a:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800f50:	90                   	nop
+  800f51:	5d                   	pop    %ebp
+  800f52:	c3                   	ret    
+
+00800f53 <do_yield>:
+#include <ulib.h>
+#include <stdio.h>
+
+void
+do_yield(void) {
+  800f53:	55                   	push   %ebp
+  800f54:	89 e5                	mov    %esp,%ebp
+  800f56:	83 ec 08             	sub    $0x8,%esp
+    yield();
+  800f59:	e8 ce f2 ff ff       	call   80022c <yield>
+    yield();
+  800f5e:	e8 c9 f2 ff ff       	call   80022c <yield>
+    yield();
+  800f63:	e8 c4 f2 ff ff       	call   80022c <yield>
+    yield();
+  800f68:	e8 bf f2 ff ff       	call   80022c <yield>
+    yield();
+  800f6d:	e8 ba f2 ff ff       	call   80022c <yield>
+    yield();
+  800f72:	e8 b5 f2 ff ff       	call   80022c <yield>
+}
+  800f77:	90                   	nop
+  800f78:	c9                   	leave  
+  800f79:	c3                   	ret    
+
+00800f7a <loop>:
+
+int parent, pid1, pid2;
+
+void
+loop(void) {
+  800f7a:	55                   	push   %ebp
+  800f7b:	89 e5                	mov    %esp,%ebp
+  800f7d:	83 ec 08             	sub    $0x8,%esp
+    cprintf("child 1.\n");
+  800f80:	83 ec 0c             	sub    $0xc,%esp
+  800f83:	68 e0 13 80 00       	push   $0x8013e0
+  800f88:	e8 74 f3 ff ff       	call   800301 <cprintf>
+  800f8d:	83 c4 10             	add    $0x10,%esp
+    while (1);
+  800f90:	eb fe                	jmp    800f90 <loop+0x16>
+
+00800f92 <work>:
+}
+
+void
+work(void) {
+  800f92:	55                   	push   %ebp
+  800f93:	89 e5                	mov    %esp,%ebp
+  800f95:	83 ec 08             	sub    $0x8,%esp
+    cprintf("child 2.\n");
+  800f98:	83 ec 0c             	sub    $0xc,%esp
+  800f9b:	68 ea 13 80 00       	push   $0x8013ea
+  800fa0:	e8 5c f3 ff ff       	call   800301 <cprintf>
+  800fa5:	83 c4 10             	add    $0x10,%esp
+    do_yield();
+  800fa8:	e8 a6 ff ff ff       	call   800f53 <do_yield>
+    if (kill(parent) == 0) {
+  800fad:	a1 08 20 80 00       	mov    0x802008,%eax
+  800fb2:	83 ec 0c             	sub    $0xc,%esp
+  800fb5:	50                   	push   %eax
+  800fb6:	e8 7f f2 ff ff       	call   80023a <kill>
+  800fbb:	83 c4 10             	add    $0x10,%esp
+  800fbe:	85 c0                	test   %eax,%eax
+  800fc0:	75 44                	jne    801006 <work+0x74>
+        cprintf("kill parent ok.\n");
+  800fc2:	83 ec 0c             	sub    $0xc,%esp
+  800fc5:	68 f4 13 80 00       	push   $0x8013f4
+  800fca:	e8 32 f3 ff ff       	call   800301 <cprintf>
+  800fcf:	83 c4 10             	add    $0x10,%esp
+        do_yield();
+  800fd2:	e8 7c ff ff ff       	call   800f53 <do_yield>
+        if (kill(pid1) == 0) {
+  800fd7:	a1 10 20 80 00       	mov    0x802010,%eax
+  800fdc:	83 ec 0c             	sub    $0xc,%esp
+  800fdf:	50                   	push   %eax
+  800fe0:	e8 55 f2 ff ff       	call   80023a <kill>
+  800fe5:	83 c4 10             	add    $0x10,%esp
+  800fe8:	85 c0                	test   %eax,%eax
+  800fea:	75 1a                	jne    801006 <work+0x74>
+            cprintf("kill child1 ok.\n");
+  800fec:	83 ec 0c             	sub    $0xc,%esp
+  800fef:	68 05 14 80 00       	push   $0x801405
+  800ff4:	e8 08 f3 ff ff       	call   800301 <cprintf>
+  800ff9:	83 c4 10             	add    $0x10,%esp
+            exit(0);
+  800ffc:	83 ec 0c             	sub    $0xc,%esp
+  800fff:	6a 00                	push   $0x0
+  801001:	e8 c3 f1 ff ff       	call   8001c9 <exit>
+        }
+    }
+    exit(-1);
+  801006:	83 ec 0c             	sub    $0xc,%esp
+  801009:	6a ff                	push   $0xffffffff
+  80100b:	e8 b9 f1 ff ff       	call   8001c9 <exit>
+
+00801010 <main>:
+}
+
+int
+main(void) {
+  801010:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  801014:	83 e4 f0             	and    $0xfffffff0,%esp
+  801017:	ff 71 fc             	pushl  -0x4(%ecx)
+  80101a:	55                   	push   %ebp
+  80101b:	89 e5                	mov    %esp,%ebp
+  80101d:	51                   	push   %ecx
+  80101e:	83 ec 04             	sub    $0x4,%esp
+    parent = getpid();
+  801021:	e8 2a f2 ff ff       	call   800250 <getpid>
+  801026:	a3 08 20 80 00       	mov    %eax,0x802008
+    if ((pid1 = fork()) == 0) {
+  80102b:	e8 bf f1 ff ff       	call   8001ef <fork>
+  801030:	a3 10 20 80 00       	mov    %eax,0x802010
+  801035:	a1 10 20 80 00       	mov    0x802010,%eax
+  80103a:	85 c0                	test   %eax,%eax
+  80103c:	75 05                	jne    801043 <main+0x33>
+        loop();
+  80103e:	e8 37 ff ff ff       	call   800f7a <loop>
+    }
+
+    assert(pid1 > 0);
+  801043:	a1 10 20 80 00       	mov    0x802010,%eax
+  801048:	85 c0                	test   %eax,%eax
+  80104a:	7f 16                	jg     801062 <main+0x52>
+  80104c:	68 16 14 80 00       	push   $0x801416
+  801051:	68 1f 14 80 00       	push   $0x80141f
+  801056:	6a 2c                	push   $0x2c
+  801058:	68 34 14 80 00       	push   $0x801434
+  80105d:	e8 be ef ff ff       	call   800020 <__panic>
+
+    if ((pid2 = fork()) == 0) {
+  801062:	e8 88 f1 ff ff       	call   8001ef <fork>
+  801067:	a3 0c 20 80 00       	mov    %eax,0x80200c
+  80106c:	a1 0c 20 80 00       	mov    0x80200c,%eax
+  801071:	85 c0                	test   %eax,%eax
+  801073:	75 05                	jne    80107a <main+0x6a>
+        work();
+  801075:	e8 18 ff ff ff       	call   800f92 <work>
+    }
+    if (pid2 > 0) {
+  80107a:	a1 0c 20 80 00       	mov    0x80200c,%eax
+  80107f:	85 c0                	test   %eax,%eax
+  801081:	7e 3a                	jle    8010bd <main+0xad>
+        cprintf("wait child 1.\n");
+  801083:	83 ec 0c             	sub    $0xc,%esp
+  801086:	68 44 14 80 00       	push   $0x801444
+  80108b:	e8 71 f2 ff ff       	call   800301 <cprintf>
+  801090:	83 c4 10             	add    $0x10,%esp
+        waitpid(pid1, NULL);
+  801093:	a1 10 20 80 00       	mov    0x802010,%eax
+  801098:	83 ec 08             	sub    $0x8,%esp
+  80109b:	6a 00                	push   $0x0
+  80109d:	50                   	push   %eax
+  80109e:	e8 70 f1 ff ff       	call   800213 <waitpid>
+  8010a3:	83 c4 10             	add    $0x10,%esp
+        panic("waitpid %d returns\n", pid1);
+  8010a6:	a1 10 20 80 00       	mov    0x802010,%eax
+  8010ab:	50                   	push   %eax
+  8010ac:	68 53 14 80 00       	push   $0x801453
+  8010b1:	6a 34                	push   $0x34
+  8010b3:	68 34 14 80 00       	push   $0x801434
+  8010b8:	e8 63 ef ff ff       	call   800020 <__panic>
+    }
+    else {
+        kill(pid1);
+  8010bd:	a1 10 20 80 00       	mov    0x802010,%eax
+  8010c2:	83 ec 0c             	sub    $0xc,%esp
+  8010c5:	50                   	push   %eax
+  8010c6:	e8 6f f1 ff ff       	call   80023a <kill>
+  8010cb:	83 c4 10             	add    $0x10,%esp
+    }
+    panic("FAIL: T.T\n");
+  8010ce:	83 ec 04             	sub    $0x4,%esp
+  8010d1:	68 67 14 80 00       	push   $0x801467
+  8010d6:	6a 39                	push   $0x39
+  8010d8:	68 34 14 80 00       	push   $0x801434
+  8010dd:	e8 3e ef ff ff       	call   800020 <__panic>
diff -r -u -P lab7_original/obj/user/waitkill.d lab7/obj/user/waitkill.d
--- lab7_original/obj/user/waitkill.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/waitkill.d	2016-05-06 21:59:27.630123852 +0800
@@ -0,0 +1,2 @@
+obj/user/waitkill.o obj/user/waitkill.d: user/waitkill.c user/libs/ulib.h \
+ libs/defs.h libs/stdio.h libs/stdarg.h
Binary files lab7_original/obj/user/waitkill.o and lab7/obj/user/waitkill.o differ
diff -r -u -P lab7_original/obj/user/waitkill.sym lab7/obj/user/waitkill.sym
--- lab7_original/obj/user/waitkill.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/waitkill.sym	2016-05-06 21:59:28.682162217 +0800
@@ -0,0 +1,85 @@
+00800020 .text
+00801100 .rodata
+00802000 .data
+00802008 .bss
+00200000 .stab_info
+00200010 .stab
+00202ed9 .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b5 syscall
+00000000 ulib.c
+00000000 stdio.c
+008002b4 cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+00801200 error_string
+0080084a printnum
+0080093b getuint
+0080098a getint
+00800d9d sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 waitkill.c
+008003e6 strcpy
+0080022c yield
+00800213 waitpid
+00800141 sys_yield
+008006ff memmove
+00800dd3 snprintf
+008009f5 vprintfmt
+0080011d sys_fork
+00800301 cprintf
+00800f7a loop
+00800250 getpid
+008007a2 memcpy
+0080028f sleep
+00802008 parent
+00800278 lab6_set_priority
+00800dfc vsnprintf
+00800375 umain
+00202ed8 __STAB_END__
+00800150 sys_kill
+00202ed9 __STABSTR_BEGIN__
+00800020 __panic
+008001b7 sys_sleep
+00800562 strtol
+008003b6 strnlen
+0080025d print_pgdir
+0080023a kill
+0080200c pid2
+00800533 strfind
+008001fc wait
+008002a5 _start
+00800e7b rand
+008004aa strncmp
+00800171 sys_putc
+00800426 strncpy
+008007f2 memcmp
+008001ef fork
+008006bf memset
+00801010 main
+00800f3a srand
+00800e56 hash32
+008009d1 printfmt
+00800f53 do_yield
+00203d35 __STABSTR_END__
+00800460 strcmp
+0080026b gettime_msec
+00800192 sys_gettime
+008002d8 vcprintf
+0080006e __warn
+00800327 cputs
+00802010 pid1
+008001a1 sys_lab6_set_priority
+008001c9 exit
+0080012c sys_wait
+0080010b sys_exit
+00200010 __STAB_BEGIN__
+0080038e strlen
+00800183 sys_pgdir
+00800500 strchr
+00800162 sys_getpid
+00800f92 work
diff -r -u -P lab7_original/obj/user/yield.asm lab7/obj/user/yield.asm
--- lab7_original/obj/user/yield.asm	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/yield.asm	2016-05-06 21:59:28.562157826 +0800
@@ -0,0 +1,2653 @@
+
+obj/__user_yield.out:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00800020 <__panic>:
+#include <stdio.h>
+#include <ulib.h>
+#include <error.h>
+
+void
+__panic(const char *file, int line, const char *fmt, ...) {
+  800020:	55                   	push   %ebp
+  800021:	89 e5                	mov    %esp,%ebp
+  800023:	83 ec 18             	sub    $0x18,%esp
+    // print the 'message'
+    va_list ap;
+    va_start(ap, fmt);
+  800026:	8d 45 14             	lea    0x14(%ebp),%eax
+  800029:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user panic at %s:%d:\n    ", file, line);
+  80002c:	83 ec 04             	sub    $0x4,%esp
+  80002f:	ff 75 0c             	pushl  0xc(%ebp)
+  800032:	ff 75 08             	pushl  0x8(%ebp)
+  800035:	68 e0 0f 80 00       	push   $0x800fe0
+  80003a:	e8 c2 02 00 00       	call   800301 <cprintf>
+  80003f:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800042:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800045:	83 ec 08             	sub    $0x8,%esp
+  800048:	50                   	push   %eax
+  800049:	ff 75 10             	pushl  0x10(%ebp)
+  80004c:	e8 87 02 00 00       	call   8002d8 <vcprintf>
+  800051:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  800054:	83 ec 0c             	sub    $0xc,%esp
+  800057:	68 fa 0f 80 00       	push   $0x800ffa
+  80005c:	e8 a0 02 00 00       	call   800301 <cprintf>
+  800061:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+    exit(-E_PANIC);
+  800064:	83 ec 0c             	sub    $0xc,%esp
+  800067:	6a f6                	push   $0xfffffff6
+  800069:	e8 5b 01 00 00       	call   8001c9 <exit>
+
+0080006e <__warn>:
+}
+
+void
+__warn(const char *file, int line, const char *fmt, ...) {
+  80006e:	55                   	push   %ebp
+  80006f:	89 e5                	mov    %esp,%ebp
+  800071:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    va_start(ap, fmt);
+  800074:	8d 45 14             	lea    0x14(%ebp),%eax
+  800077:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    cprintf("user warning at %s:%d:\n    ", file, line);
+  80007a:	83 ec 04             	sub    $0x4,%esp
+  80007d:	ff 75 0c             	pushl  0xc(%ebp)
+  800080:	ff 75 08             	pushl  0x8(%ebp)
+  800083:	68 fc 0f 80 00       	push   $0x800ffc
+  800088:	e8 74 02 00 00       	call   800301 <cprintf>
+  80008d:	83 c4 10             	add    $0x10,%esp
+    vcprintf(fmt, ap);
+  800090:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800093:	83 ec 08             	sub    $0x8,%esp
+  800096:	50                   	push   %eax
+  800097:	ff 75 10             	pushl  0x10(%ebp)
+  80009a:	e8 39 02 00 00       	call   8002d8 <vcprintf>
+  80009f:	83 c4 10             	add    $0x10,%esp
+    cprintf("\n");
+  8000a2:	83 ec 0c             	sub    $0xc,%esp
+  8000a5:	68 fa 0f 80 00       	push   $0x800ffa
+  8000aa:	e8 52 02 00 00       	call   800301 <cprintf>
+  8000af:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8000b2:	90                   	nop
+  8000b3:	c9                   	leave  
+  8000b4:	c3                   	ret    
+
+008000b5 <syscall>:
+#include <syscall.h>
+
+#define MAX_ARGS            5
+
+static inline int
+syscall(int num, ...) {
+  8000b5:	55                   	push   %ebp
+  8000b6:	89 e5                	mov    %esp,%ebp
+  8000b8:	57                   	push   %edi
+  8000b9:	56                   	push   %esi
+  8000ba:	53                   	push   %ebx
+  8000bb:	83 ec 20             	sub    $0x20,%esp
+    va_list ap;
+    va_start(ap, num);
+  8000be:	8d 45 0c             	lea    0xc(%ebp),%eax
+  8000c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+  8000cb:	eb 16                	jmp    8000e3 <syscall+0x2e>
+        a[i] = va_arg(ap, uint32_t);
+  8000cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  8000d0:	8d 50 04             	lea    0x4(%eax),%edx
+  8000d3:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  8000d6:	8b 10                	mov    (%eax),%edx
+  8000d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8000db:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
+syscall(int num, ...) {
+    va_list ap;
+    va_start(ap, num);
+    uint32_t a[MAX_ARGS];
+    int i, ret;
+    for (i = 0; i < MAX_ARGS; i ++) {
+  8000df:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
+  8000e3:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
+  8000e7:	7e e4                	jle    8000cd <syscall+0x18>
+    asm volatile (
+        "int %1;"
+        : "=a" (ret)
+        : "i" (T_SYSCALL),
+          "a" (num),
+          "d" (a[0]),
+  8000e9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          "c" (a[1]),
+  8000ec:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+          "b" (a[2]),
+  8000ef:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+          "D" (a[3]),
+  8000f2:	8b 7d e0             	mov    -0x20(%ebp),%edi
+          "S" (a[4])
+  8000f5:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+    for (i = 0; i < MAX_ARGS; i ++) {
+        a[i] = va_arg(ap, uint32_t);
+    }
+    va_end(ap);
+
+    asm volatile (
+  8000f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8000fb:	cd 80                	int    $0x80
+  8000fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
+          "c" (a[1]),
+          "b" (a[2]),
+          "D" (a[3]),
+          "S" (a[4])
+        : "cc", "memory");
+    return ret;
+  800100:	8b 45 ec             	mov    -0x14(%ebp),%eax
+}
+  800103:	83 c4 20             	add    $0x20,%esp
+  800106:	5b                   	pop    %ebx
+  800107:	5e                   	pop    %esi
+  800108:	5f                   	pop    %edi
+  800109:	5d                   	pop    %ebp
+  80010a:	c3                   	ret    
+
+0080010b <sys_exit>:
+
+int
+sys_exit(int error_code) {
+  80010b:	55                   	push   %ebp
+  80010c:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_exit, error_code);
+  80010e:	ff 75 08             	pushl  0x8(%ebp)
+  800111:	6a 01                	push   $0x1
+  800113:	e8 9d ff ff ff       	call   8000b5 <syscall>
+  800118:	83 c4 08             	add    $0x8,%esp
+}
+  80011b:	c9                   	leave  
+  80011c:	c3                   	ret    
+
+0080011d <sys_fork>:
+
+int
+sys_fork(void) {
+  80011d:	55                   	push   %ebp
+  80011e:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_fork);
+  800120:	6a 02                	push   $0x2
+  800122:	e8 8e ff ff ff       	call   8000b5 <syscall>
+  800127:	83 c4 04             	add    $0x4,%esp
+}
+  80012a:	c9                   	leave  
+  80012b:	c3                   	ret    
+
+0080012c <sys_wait>:
+
+int
+sys_wait(int pid, int *store) {
+  80012c:	55                   	push   %ebp
+  80012d:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_wait, pid, store);
+  80012f:	ff 75 0c             	pushl  0xc(%ebp)
+  800132:	ff 75 08             	pushl  0x8(%ebp)
+  800135:	6a 03                	push   $0x3
+  800137:	e8 79 ff ff ff       	call   8000b5 <syscall>
+  80013c:	83 c4 0c             	add    $0xc,%esp
+}
+  80013f:	c9                   	leave  
+  800140:	c3                   	ret    
+
+00800141 <sys_yield>:
+
+int
+sys_yield(void) {
+  800141:	55                   	push   %ebp
+  800142:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_yield);
+  800144:	6a 0a                	push   $0xa
+  800146:	e8 6a ff ff ff       	call   8000b5 <syscall>
+  80014b:	83 c4 04             	add    $0x4,%esp
+}
+  80014e:	c9                   	leave  
+  80014f:	c3                   	ret    
+
+00800150 <sys_kill>:
+
+int
+sys_kill(int pid) {
+  800150:	55                   	push   %ebp
+  800151:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_kill, pid);
+  800153:	ff 75 08             	pushl  0x8(%ebp)
+  800156:	6a 0c                	push   $0xc
+  800158:	e8 58 ff ff ff       	call   8000b5 <syscall>
+  80015d:	83 c4 08             	add    $0x8,%esp
+}
+  800160:	c9                   	leave  
+  800161:	c3                   	ret    
+
+00800162 <sys_getpid>:
+
+int
+sys_getpid(void) {
+  800162:	55                   	push   %ebp
+  800163:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_getpid);
+  800165:	6a 12                	push   $0x12
+  800167:	e8 49 ff ff ff       	call   8000b5 <syscall>
+  80016c:	83 c4 04             	add    $0x4,%esp
+}
+  80016f:	c9                   	leave  
+  800170:	c3                   	ret    
+
+00800171 <sys_putc>:
+
+int
+sys_putc(int c) {
+  800171:	55                   	push   %ebp
+  800172:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_putc, c);
+  800174:	ff 75 08             	pushl  0x8(%ebp)
+  800177:	6a 1e                	push   $0x1e
+  800179:	e8 37 ff ff ff       	call   8000b5 <syscall>
+  80017e:	83 c4 08             	add    $0x8,%esp
+}
+  800181:	c9                   	leave  
+  800182:	c3                   	ret    
+
+00800183 <sys_pgdir>:
+
+int
+sys_pgdir(void) {
+  800183:	55                   	push   %ebp
+  800184:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_pgdir);
+  800186:	6a 1f                	push   $0x1f
+  800188:	e8 28 ff ff ff       	call   8000b5 <syscall>
+  80018d:	83 c4 04             	add    $0x4,%esp
+}
+  800190:	c9                   	leave  
+  800191:	c3                   	ret    
+
+00800192 <sys_gettime>:
+
+int
+sys_gettime(void) {
+  800192:	55                   	push   %ebp
+  800193:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_gettime);
+  800195:	6a 11                	push   $0x11
+  800197:	e8 19 ff ff ff       	call   8000b5 <syscall>
+  80019c:	83 c4 04             	add    $0x4,%esp
+}
+  80019f:	c9                   	leave  
+  8001a0:	c3                   	ret    
+
+008001a1 <sys_lab6_set_priority>:
+
+void
+sys_lab6_set_priority(uint32_t priority)
+{
+  8001a1:	55                   	push   %ebp
+  8001a2:	89 e5                	mov    %esp,%ebp
+    syscall(SYS_lab6_set_priority, priority);
+  8001a4:	ff 75 08             	pushl  0x8(%ebp)
+  8001a7:	68 ff 00 00 00       	push   $0xff
+  8001ac:	e8 04 ff ff ff       	call   8000b5 <syscall>
+  8001b1:	83 c4 08             	add    $0x8,%esp
+}
+  8001b4:	90                   	nop
+  8001b5:	c9                   	leave  
+  8001b6:	c3                   	ret    
+
+008001b7 <sys_sleep>:
+
+int
+sys_sleep(unsigned int time) {
+  8001b7:	55                   	push   %ebp
+  8001b8:	89 e5                	mov    %esp,%ebp
+    return syscall(SYS_sleep, time);
+  8001ba:	ff 75 08             	pushl  0x8(%ebp)
+  8001bd:	6a 0b                	push   $0xb
+  8001bf:	e8 f1 fe ff ff       	call   8000b5 <syscall>
+  8001c4:	83 c4 08             	add    $0x8,%esp
+}
+  8001c7:	c9                   	leave  
+  8001c8:	c3                   	ret    
+
+008001c9 <exit>:
+#include <syscall.h>
+#include <stdio.h>
+#include <ulib.h>
+
+void
+exit(int error_code) {
+  8001c9:	55                   	push   %ebp
+  8001ca:	89 e5                	mov    %esp,%ebp
+  8001cc:	83 ec 08             	sub    $0x8,%esp
+    sys_exit(error_code);
+  8001cf:	83 ec 0c             	sub    $0xc,%esp
+  8001d2:	ff 75 08             	pushl  0x8(%ebp)
+  8001d5:	e8 31 ff ff ff       	call   80010b <sys_exit>
+  8001da:	83 c4 10             	add    $0x10,%esp
+    cprintf("BUG: exit failed.\n");
+  8001dd:	83 ec 0c             	sub    $0xc,%esp
+  8001e0:	68 18 10 80 00       	push   $0x801018
+  8001e5:	e8 17 01 00 00       	call   800301 <cprintf>
+  8001ea:	83 c4 10             	add    $0x10,%esp
+    while (1);
+  8001ed:	eb fe                	jmp    8001ed <exit+0x24>
+
+008001ef <fork>:
+}
+
+int
+fork(void) {
+  8001ef:	55                   	push   %ebp
+  8001f0:	89 e5                	mov    %esp,%ebp
+  8001f2:	83 ec 08             	sub    $0x8,%esp
+    return sys_fork();
+  8001f5:	e8 23 ff ff ff       	call   80011d <sys_fork>
+}
+  8001fa:	c9                   	leave  
+  8001fb:	c3                   	ret    
+
+008001fc <wait>:
+
+int
+wait(void) {
+  8001fc:	55                   	push   %ebp
+  8001fd:	89 e5                	mov    %esp,%ebp
+  8001ff:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(0, NULL);
+  800202:	83 ec 08             	sub    $0x8,%esp
+  800205:	6a 00                	push   $0x0
+  800207:	6a 00                	push   $0x0
+  800209:	e8 1e ff ff ff       	call   80012c <sys_wait>
+  80020e:	83 c4 10             	add    $0x10,%esp
+}
+  800211:	c9                   	leave  
+  800212:	c3                   	ret    
+
+00800213 <waitpid>:
+
+int
+waitpid(int pid, int *store) {
+  800213:	55                   	push   %ebp
+  800214:	89 e5                	mov    %esp,%ebp
+  800216:	83 ec 08             	sub    $0x8,%esp
+    return sys_wait(pid, store);
+  800219:	83 ec 08             	sub    $0x8,%esp
+  80021c:	ff 75 0c             	pushl  0xc(%ebp)
+  80021f:	ff 75 08             	pushl  0x8(%ebp)
+  800222:	e8 05 ff ff ff       	call   80012c <sys_wait>
+  800227:	83 c4 10             	add    $0x10,%esp
+}
+  80022a:	c9                   	leave  
+  80022b:	c3                   	ret    
+
+0080022c <yield>:
+
+void
+yield(void) {
+  80022c:	55                   	push   %ebp
+  80022d:	89 e5                	mov    %esp,%ebp
+  80022f:	83 ec 08             	sub    $0x8,%esp
+    sys_yield();
+  800232:	e8 0a ff ff ff       	call   800141 <sys_yield>
+}
+  800237:	90                   	nop
+  800238:	c9                   	leave  
+  800239:	c3                   	ret    
+
+0080023a <kill>:
+
+int
+kill(int pid) {
+  80023a:	55                   	push   %ebp
+  80023b:	89 e5                	mov    %esp,%ebp
+  80023d:	83 ec 08             	sub    $0x8,%esp
+    return sys_kill(pid);
+  800240:	83 ec 0c             	sub    $0xc,%esp
+  800243:	ff 75 08             	pushl  0x8(%ebp)
+  800246:	e8 05 ff ff ff       	call   800150 <sys_kill>
+  80024b:	83 c4 10             	add    $0x10,%esp
+}
+  80024e:	c9                   	leave  
+  80024f:	c3                   	ret    
+
+00800250 <getpid>:
+
+int
+getpid(void) {
+  800250:	55                   	push   %ebp
+  800251:	89 e5                	mov    %esp,%ebp
+  800253:	83 ec 08             	sub    $0x8,%esp
+    return sys_getpid();
+  800256:	e8 07 ff ff ff       	call   800162 <sys_getpid>
+}
+  80025b:	c9                   	leave  
+  80025c:	c3                   	ret    
+
+0080025d <print_pgdir>:
+
+//print_pgdir - print the PDT&PT
+void
+print_pgdir(void) {
+  80025d:	55                   	push   %ebp
+  80025e:	89 e5                	mov    %esp,%ebp
+  800260:	83 ec 08             	sub    $0x8,%esp
+    sys_pgdir();
+  800263:	e8 1b ff ff ff       	call   800183 <sys_pgdir>
+}
+  800268:	90                   	nop
+  800269:	c9                   	leave  
+  80026a:	c3                   	ret    
+
+0080026b <gettime_msec>:
+
+unsigned int
+gettime_msec(void) {
+  80026b:	55                   	push   %ebp
+  80026c:	89 e5                	mov    %esp,%ebp
+  80026e:	83 ec 08             	sub    $0x8,%esp
+    return (unsigned int)sys_gettime();
+  800271:	e8 1c ff ff ff       	call   800192 <sys_gettime>
+}
+  800276:	c9                   	leave  
+  800277:	c3                   	ret    
+
+00800278 <lab6_set_priority>:
+
+void
+lab6_set_priority(uint32_t priority)
+{
+  800278:	55                   	push   %ebp
+  800279:	89 e5                	mov    %esp,%ebp
+  80027b:	83 ec 08             	sub    $0x8,%esp
+    sys_lab6_set_priority(priority);
+  80027e:	83 ec 0c             	sub    $0xc,%esp
+  800281:	ff 75 08             	pushl  0x8(%ebp)
+  800284:	e8 18 ff ff ff       	call   8001a1 <sys_lab6_set_priority>
+  800289:	83 c4 10             	add    $0x10,%esp
+}
+  80028c:	90                   	nop
+  80028d:	c9                   	leave  
+  80028e:	c3                   	ret    
+
+0080028f <sleep>:
+
+int
+sleep(unsigned int time) {
+  80028f:	55                   	push   %ebp
+  800290:	89 e5                	mov    %esp,%ebp
+  800292:	83 ec 08             	sub    $0x8,%esp
+    return sys_sleep(time);
+  800295:	83 ec 0c             	sub    $0xc,%esp
+  800298:	ff 75 08             	pushl  0x8(%ebp)
+  80029b:	e8 17 ff ff ff       	call   8001b7 <sys_sleep>
+  8002a0:	83 c4 10             	add    $0x10,%esp
+}
+  8002a3:	c9                   	leave  
+  8002a4:	c3                   	ret    
+
+008002a5 <_start>:
+.text
+.globl _start
+_start:
+    # set ebp for backtrace
+    movl $0x0, %ebp
+  8002a5:	bd 00 00 00 00       	mov    $0x0,%ebp
+
+    # move down the esp register
+    # since it may cause page fault in backtrace
+    subl $0x20, %esp
+  8002aa:	83 ec 20             	sub    $0x20,%esp
+
+    # call user-program function
+    call umain
+  8002ad:	e8 c3 00 00 00       	call   800375 <umain>
+1:  jmp 1b
+  8002b2:	eb fe                	jmp    8002b2 <_start+0xd>
+
+008002b4 <cputch>:
+/* *
+ * cputch - writes a single character @c to stdout, and it will
+ * increace the value of counter pointed by @cnt.
+ * */
+static void
+cputch(int c, int *cnt) {
+  8002b4:	55                   	push   %ebp
+  8002b5:	89 e5                	mov    %esp,%ebp
+  8002b7:	83 ec 08             	sub    $0x8,%esp
+    sys_putc(c);
+  8002ba:	83 ec 0c             	sub    $0xc,%esp
+  8002bd:	ff 75 08             	pushl  0x8(%ebp)
+  8002c0:	e8 ac fe ff ff       	call   800171 <sys_putc>
+  8002c5:	83 c4 10             	add    $0x10,%esp
+    (*cnt) ++;
+  8002c8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002cb:	8b 00                	mov    (%eax),%eax
+  8002cd:	8d 50 01             	lea    0x1(%eax),%edx
+  8002d0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8002d3:	89 10                	mov    %edx,(%eax)
+}
+  8002d5:	90                   	nop
+  8002d6:	c9                   	leave  
+  8002d7:	c3                   	ret    
+
+008002d8 <vcprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want cprintf() instead.
+ * */
+int
+vcprintf(const char *fmt, va_list ap) {
+  8002d8:	55                   	push   %ebp
+  8002d9:	89 e5                	mov    %esp,%ebp
+  8002db:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  8002de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    vprintfmt((void*)cputch, &cnt, fmt, ap);
+  8002e5:	ff 75 0c             	pushl  0xc(%ebp)
+  8002e8:	ff 75 08             	pushl  0x8(%ebp)
+  8002eb:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  8002ee:	50                   	push   %eax
+  8002ef:	68 b4 02 80 00       	push   $0x8002b4
+  8002f4:	e8 fc 06 00 00       	call   8009f5 <vprintfmt>
+  8002f9:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  8002fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  8002ff:	c9                   	leave  
+  800300:	c3                   	ret    
+
+00800301 <cprintf>:
+ *
+ * The return value is the number of characters which would be
+ * written to stdout.
+ * */
+int
+cprintf(const char *fmt, ...) {
+  800301:	55                   	push   %ebp
+  800302:	89 e5                	mov    %esp,%ebp
+  800304:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  800307:	8d 45 0c             	lea    0xc(%ebp),%eax
+  80030a:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    int cnt = vcprintf(fmt, ap);
+  80030d:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800310:	83 ec 08             	sub    $0x8,%esp
+  800313:	50                   	push   %eax
+  800314:	ff 75 08             	pushl  0x8(%ebp)
+  800317:	e8 bc ff ff ff       	call   8002d8 <vcprintf>
+  80031c:	83 c4 10             	add    $0x10,%esp
+  80031f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+
+    return cnt;
+  800322:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800325:	c9                   	leave  
+  800326:	c3                   	ret    
+
+00800327 <cputs>:
+/* *
+ * cputs- writes the string pointed by @str to stdout and
+ * appends a newline character.
+ * */
+int
+cputs(const char *str) {
+  800327:	55                   	push   %ebp
+  800328:	89 e5                	mov    %esp,%ebp
+  80032a:	83 ec 18             	sub    $0x18,%esp
+    int cnt = 0;
+  80032d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
+    char c;
+    while ((c = *str ++) != '\0') {
+  800334:	eb 14                	jmp    80034a <cputs+0x23>
+        cputch(c, &cnt);
+  800336:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
+  80033a:	83 ec 08             	sub    $0x8,%esp
+  80033d:	8d 55 f0             	lea    -0x10(%ebp),%edx
+  800340:	52                   	push   %edx
+  800341:	50                   	push   %eax
+  800342:	e8 6d ff ff ff       	call   8002b4 <cputch>
+  800347:	83 c4 10             	add    $0x10,%esp
+ * */
+int
+cputs(const char *str) {
+    int cnt = 0;
+    char c;
+    while ((c = *str ++) != '\0') {
+  80034a:	8b 45 08             	mov    0x8(%ebp),%eax
+  80034d:	8d 50 01             	lea    0x1(%eax),%edx
+  800350:	89 55 08             	mov    %edx,0x8(%ebp)
+  800353:	0f b6 00             	movzbl (%eax),%eax
+  800356:	88 45 f7             	mov    %al,-0x9(%ebp)
+  800359:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
+  80035d:	75 d7                	jne    800336 <cputs+0xf>
+        cputch(c, &cnt);
+    }
+    cputch('\n', &cnt);
+  80035f:	83 ec 08             	sub    $0x8,%esp
+  800362:	8d 45 f0             	lea    -0x10(%ebp),%eax
+  800365:	50                   	push   %eax
+  800366:	6a 0a                	push   $0xa
+  800368:	e8 47 ff ff ff       	call   8002b4 <cputch>
+  80036d:	83 c4 10             	add    $0x10,%esp
+    return cnt;
+  800370:	8b 45 f0             	mov    -0x10(%ebp),%eax
+}
+  800373:	c9                   	leave  
+  800374:	c3                   	ret    
+
+00800375 <umain>:
+#include <ulib.h>
+
+int main(void);
+
+void
+umain(void) {
+  800375:	55                   	push   %ebp
+  800376:	89 e5                	mov    %esp,%ebp
+  800378:	83 ec 18             	sub    $0x18,%esp
+    int ret = main();
+  80037b:	e8 d3 0b 00 00       	call   800f53 <main>
+  800380:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    exit(ret);
+  800383:	83 ec 0c             	sub    $0xc,%esp
+  800386:	ff 75 f4             	pushl  -0xc(%ebp)
+  800389:	e8 3b fe ff ff       	call   8001c9 <exit>
+
+0080038e <strlen>:
+ * @s:      the input string
+ *
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+  80038e:	55                   	push   %ebp
+  80038f:	89 e5                	mov    %esp,%ebp
+  800391:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  800394:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (*s ++ != '\0') {
+  80039b:	eb 04                	jmp    8003a1 <strlen+0x13>
+        cnt ++;
+  80039d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * The strlen() function returns the length of string @s.
+ * */
+size_t
+strlen(const char *s) {
+    size_t cnt = 0;
+    while (*s ++ != '\0') {
+  8003a1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003a4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003a7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003aa:	0f b6 00             	movzbl (%eax),%eax
+  8003ad:	84 c0                	test   %al,%al
+  8003af:	75 ec                	jne    80039d <strlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003b4:	c9                   	leave  
+  8003b5:	c3                   	ret    
+
+008003b6 <strnlen>:
+ * The return value is strlen(s), if that is less than @len, or
+ * @len if there is no '\0' character among the first @len characters
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+  8003b6:	55                   	push   %ebp
+  8003b7:	89 e5                	mov    %esp,%ebp
+  8003b9:	83 ec 10             	sub    $0x10,%esp
+    size_t cnt = 0;
+  8003bc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    while (cnt < len && *s ++ != '\0') {
+  8003c3:	eb 04                	jmp    8003c9 <strnlen+0x13>
+        cnt ++;
+  8003c5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+ * pointed by @s.
+ * */
+size_t
+strnlen(const char *s, size_t len) {
+    size_t cnt = 0;
+    while (cnt < len && *s ++ != '\0') {
+  8003c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  8003cc:	3b 45 0c             	cmp    0xc(%ebp),%eax
+  8003cf:	73 10                	jae    8003e1 <strnlen+0x2b>
+  8003d1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003d4:	8d 50 01             	lea    0x1(%eax),%edx
+  8003d7:	89 55 08             	mov    %edx,0x8(%ebp)
+  8003da:	0f b6 00             	movzbl (%eax),%eax
+  8003dd:	84 c0                	test   %al,%al
+  8003df:	75 e4                	jne    8003c5 <strnlen+0xf>
+        cnt ++;
+    }
+    return cnt;
+  8003e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
+}
+  8003e4:	c9                   	leave  
+  8003e5:	c3                   	ret    
+
+008003e6 <strcpy>:
+ * To avoid overflows, the size of array pointed by @dst should be long enough to
+ * contain the same string as @src (including the terminating null character), and
+ * should not overlap in memory with @src.
+ * */
+char *
+strcpy(char *dst, const char *src) {
+  8003e6:	55                   	push   %ebp
+  8003e7:	89 e5                	mov    %esp,%ebp
+  8003e9:	57                   	push   %edi
+  8003ea:	56                   	push   %esi
+  8003eb:	83 ec 20             	sub    $0x20,%esp
+  8003ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  8003f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8003f4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8003f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCPY
+#define __HAVE_ARCH_STRCPY
+static inline char *
+__strcpy(char *dst, const char *src) {
+    int d0, d1, d2;
+    asm volatile (
+  8003fa:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8003fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800400:	89 d1                	mov    %edx,%ecx
+  800402:	89 c2                	mov    %eax,%edx
+  800404:	89 ce                	mov    %ecx,%esi
+  800406:	89 d7                	mov    %edx,%edi
+  800408:	ac                   	lods   %ds:(%esi),%al
+  800409:	aa                   	stos   %al,%es:(%edi)
+  80040a:	84 c0                	test   %al,%al
+  80040c:	75 fa                	jne    800408 <strcpy+0x22>
+  80040e:	89 fa                	mov    %edi,%edx
+  800410:	89 f1                	mov    %esi,%ecx
+  800412:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  800415:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800418:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        "stosb;"
+        "testb %%al, %%al;"
+        "jne 1b;"
+        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
+        : "0" (src), "1" (dst) : "memory");
+    return dst;
+  80041b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCPY
+    return __strcpy(dst, src);
+  80041e:	90                   	nop
+    char *p = dst;
+    while ((*p ++ = *src ++) != '\0')
+        /* nothing */;
+    return dst;
+#endif /* __HAVE_ARCH_STRCPY */
+}
+  80041f:	83 c4 20             	add    $0x20,%esp
+  800422:	5e                   	pop    %esi
+  800423:	5f                   	pop    %edi
+  800424:	5d                   	pop    %ebp
+  800425:	c3                   	ret    
+
+00800426 <strncpy>:
+ * @len:    maximum number of characters to be copied from @src
+ *
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+  800426:	55                   	push   %ebp
+  800427:	89 e5                	mov    %esp,%ebp
+  800429:	83 ec 10             	sub    $0x10,%esp
+    char *p = dst;
+  80042c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80042f:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    while (len > 0) {
+  800432:	eb 21                	jmp    800455 <strncpy+0x2f>
+        if ((*p = *src) != '\0') {
+  800434:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800437:	0f b6 10             	movzbl (%eax),%edx
+  80043a:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  80043d:	88 10                	mov    %dl,(%eax)
+  80043f:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800442:	0f b6 00             	movzbl (%eax),%eax
+  800445:	84 c0                	test   %al,%al
+  800447:	74 04                	je     80044d <strncpy+0x27>
+            src ++;
+  800449:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+        }
+        p ++, len --;
+  80044d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800451:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+ * The return value is @dst
+ * */
+char *
+strncpy(char *dst, const char *src, size_t len) {
+    char *p = dst;
+    while (len > 0) {
+  800455:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800459:	75 d9                	jne    800434 <strncpy+0xe>
+        if ((*p = *src) != '\0') {
+            src ++;
+        }
+        p ++, len --;
+    }
+    return dst;
+  80045b:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  80045e:	c9                   	leave  
+  80045f:	c3                   	ret    
+
+00800460 <strcmp>:
+ * - A value greater than zero indicates that the first character that does
+ *   not match has a greater value in @s1 than in @s2;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+strcmp(const char *s1, const char *s2) {
+  800460:	55                   	push   %ebp
+  800461:	89 e5                	mov    %esp,%ebp
+  800463:	57                   	push   %edi
+  800464:	56                   	push   %esi
+  800465:	83 ec 20             	sub    $0x20,%esp
+  800468:	8b 45 08             	mov    0x8(%ebp),%eax
+  80046b:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  80046e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800471:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_STRCMP
+#define __HAVE_ARCH_STRCMP
+static inline int
+__strcmp(const char *s1, const char *s2) {
+    int d0, d1, ret;
+    asm volatile (
+  800474:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800477:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80047a:	89 d1                	mov    %edx,%ecx
+  80047c:	89 c2                	mov    %eax,%edx
+  80047e:	89 ce                	mov    %ecx,%esi
+  800480:	89 d7                	mov    %edx,%edi
+  800482:	ac                   	lods   %ds:(%esi),%al
+  800483:	ae                   	scas   %es:(%edi),%al
+  800484:	75 08                	jne    80048e <strcmp+0x2e>
+  800486:	84 c0                	test   %al,%al
+  800488:	75 f8                	jne    800482 <strcmp+0x22>
+  80048a:	31 c0                	xor    %eax,%eax
+  80048c:	eb 04                	jmp    800492 <strcmp+0x32>
+  80048e:	19 c0                	sbb    %eax,%eax
+  800490:	0c 01                	or     $0x1,%al
+  800492:	89 fa                	mov    %edi,%edx
+  800494:	89 f1                	mov    %esi,%ecx
+  800496:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800499:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  80049c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        "orb $1, %%al;"
+        "3:"
+        : "=a" (ret), "=&S" (d0), "=&D" (d1)
+        : "1" (s1), "2" (s2)
+        : "memory");
+    return ret;
+  80049f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+#ifdef __HAVE_ARCH_STRCMP
+    return __strcmp(s1, s2);
+  8004a2:	90                   	nop
+    while (*s1 != '\0' && *s1 == *s2) {
+        s1 ++, s2 ++;
+    }
+    return (int)((unsigned char)*s1 - (unsigned char)*s2);
+#endif /* __HAVE_ARCH_STRCMP */
+}
+  8004a3:	83 c4 20             	add    $0x20,%esp
+  8004a6:	5e                   	pop    %esi
+  8004a7:	5f                   	pop    %edi
+  8004a8:	5d                   	pop    %ebp
+  8004a9:	c3                   	ret    
+
+008004aa <strncmp>:
+ * they are equal to each other, it continues with the following pairs until
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+  8004aa:	55                   	push   %ebp
+  8004ab:	89 e5                	mov    %esp,%ebp
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004ad:	eb 0c                	jmp    8004bb <strncmp+0x11>
+        n --, s1 ++, s2 ++;
+  8004af:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  8004b3:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8004b7:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+ * the characters differ, until a terminating null-character is reached, or
+ * until @n characters match in both strings, whichever happens first.
+ * */
+int
+strncmp(const char *s1, const char *s2, size_t n) {
+    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
+  8004bb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004bf:	74 1a                	je     8004db <strncmp+0x31>
+  8004c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004c4:	0f b6 00             	movzbl (%eax),%eax
+  8004c7:	84 c0                	test   %al,%al
+  8004c9:	74 10                	je     8004db <strncmp+0x31>
+  8004cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004ce:	0f b6 10             	movzbl (%eax),%edx
+  8004d1:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004d4:	0f b6 00             	movzbl (%eax),%eax
+  8004d7:	38 c2                	cmp    %al,%dl
+  8004d9:	74 d4                	je     8004af <strncmp+0x5>
+        n --, s1 ++, s2 ++;
+    }
+    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
+  8004db:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8004df:	74 18                	je     8004f9 <strncmp+0x4f>
+  8004e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8004e4:	0f b6 00             	movzbl (%eax),%eax
+  8004e7:	0f b6 d0             	movzbl %al,%edx
+  8004ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8004ed:	0f b6 00             	movzbl (%eax),%eax
+  8004f0:	0f b6 c0             	movzbl %al,%eax
+  8004f3:	29 c2                	sub    %eax,%edx
+  8004f5:	89 d0                	mov    %edx,%eax
+  8004f7:	eb 05                	jmp    8004fe <strncmp+0x54>
+  8004f9:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  8004fe:	5d                   	pop    %ebp
+  8004ff:	c3                   	ret    
+
+00800500 <strchr>:
+ *
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+  800500:	55                   	push   %ebp
+  800501:	89 e5                	mov    %esp,%ebp
+  800503:	83 ec 04             	sub    $0x4,%esp
+  800506:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800509:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  80050c:	eb 14                	jmp    800522 <strchr+0x22>
+        if (*s == c) {
+  80050e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800511:	0f b6 00             	movzbl (%eax),%eax
+  800514:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  800517:	75 05                	jne    80051e <strchr+0x1e>
+            return (char *)s;
+  800519:	8b 45 08             	mov    0x8(%ebp),%eax
+  80051c:	eb 13                	jmp    800531 <strchr+0x31>
+        }
+        s ++;
+  80051e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * The strchr() function returns a pointer to the first occurrence of
+ * character in @s. If the value is not found, the function returns 'NULL'.
+ * */
+char *
+strchr(const char *s, char c) {
+    while (*s != '\0') {
+  800522:	8b 45 08             	mov    0x8(%ebp),%eax
+  800525:	0f b6 00             	movzbl (%eax),%eax
+  800528:	84 c0                	test   %al,%al
+  80052a:	75 e2                	jne    80050e <strchr+0xe>
+        if (*s == c) {
+            return (char *)s;
+        }
+        s ++;
+    }
+    return NULL;
+  80052c:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800531:	c9                   	leave  
+  800532:	c3                   	ret    
+
+00800533 <strfind>:
+ * The strfind() function is like strchr() except that if @c is
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+  800533:	55                   	push   %ebp
+  800534:	89 e5                	mov    %esp,%ebp
+  800536:	83 ec 04             	sub    $0x4,%esp
+  800539:	8b 45 0c             	mov    0xc(%ebp),%eax
+  80053c:	88 45 fc             	mov    %al,-0x4(%ebp)
+    while (*s != '\0') {
+  80053f:	eb 0f                	jmp    800550 <strfind+0x1d>
+        if (*s == c) {
+  800541:	8b 45 08             	mov    0x8(%ebp),%eax
+  800544:	0f b6 00             	movzbl (%eax),%eax
+  800547:	3a 45 fc             	cmp    -0x4(%ebp),%al
+  80054a:	74 10                	je     80055c <strfind+0x29>
+            break;
+        }
+        s ++;
+  80054c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+ * not found in @s, then it returns a pointer to the null byte at the
+ * end of @s, rather than 'NULL'.
+ * */
+char *
+strfind(const char *s, char c) {
+    while (*s != '\0') {
+  800550:	8b 45 08             	mov    0x8(%ebp),%eax
+  800553:	0f b6 00             	movzbl (%eax),%eax
+  800556:	84 c0                	test   %al,%al
+  800558:	75 e7                	jne    800541 <strfind+0xe>
+  80055a:	eb 01                	jmp    80055d <strfind+0x2a>
+        if (*s == c) {
+            break;
+  80055c:	90                   	nop
+        }
+        s ++;
+    }
+    return (char *)s;
+  80055d:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+  800560:	c9                   	leave  
+  800561:	c3                   	ret    
+
+00800562 <strtol>:
+ * an optional "0x" or "0X" prefix.
+ *
+ * The strtol() function returns the converted integral number as a long int value.
+ * */
+long
+strtol(const char *s, char **endptr, int base) {
+  800562:	55                   	push   %ebp
+  800563:	89 e5                	mov    %esp,%ebp
+  800565:	83 ec 10             	sub    $0x10,%esp
+    int neg = 0;
+  800568:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
+    long val = 0;
+  80056f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  800576:	eb 04                	jmp    80057c <strtol+0x1a>
+        s ++;
+  800578:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+strtol(const char *s, char **endptr, int base) {
+    int neg = 0;
+    long val = 0;
+
+    // gobble initial whitespace
+    while (*s == ' ' || *s == '\t') {
+  80057c:	8b 45 08             	mov    0x8(%ebp),%eax
+  80057f:	0f b6 00             	movzbl (%eax),%eax
+  800582:	3c 20                	cmp    $0x20,%al
+  800584:	74 f2                	je     800578 <strtol+0x16>
+  800586:	8b 45 08             	mov    0x8(%ebp),%eax
+  800589:	0f b6 00             	movzbl (%eax),%eax
+  80058c:	3c 09                	cmp    $0x9,%al
+  80058e:	74 e8                	je     800578 <strtol+0x16>
+        s ++;
+    }
+
+    // plus/minus sign
+    if (*s == '+') {
+  800590:	8b 45 08             	mov    0x8(%ebp),%eax
+  800593:	0f b6 00             	movzbl (%eax),%eax
+  800596:	3c 2b                	cmp    $0x2b,%al
+  800598:	75 06                	jne    8005a0 <strtol+0x3e>
+        s ++;
+  80059a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  80059e:	eb 15                	jmp    8005b5 <strtol+0x53>
+    }
+    else if (*s == '-') {
+  8005a0:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005a3:	0f b6 00             	movzbl (%eax),%eax
+  8005a6:	3c 2d                	cmp    $0x2d,%al
+  8005a8:	75 0b                	jne    8005b5 <strtol+0x53>
+        s ++, neg = 1;
+  8005aa:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005ae:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
+    }
+
+    // hex or octal base prefix
+    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
+  8005b5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005b9:	74 06                	je     8005c1 <strtol+0x5f>
+  8005bb:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
+  8005bf:	75 24                	jne    8005e5 <strtol+0x83>
+  8005c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005c4:	0f b6 00             	movzbl (%eax),%eax
+  8005c7:	3c 30                	cmp    $0x30,%al
+  8005c9:	75 1a                	jne    8005e5 <strtol+0x83>
+  8005cb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ce:	83 c0 01             	add    $0x1,%eax
+  8005d1:	0f b6 00             	movzbl (%eax),%eax
+  8005d4:	3c 78                	cmp    $0x78,%al
+  8005d6:	75 0d                	jne    8005e5 <strtol+0x83>
+        s += 2, base = 16;
+  8005d8:	83 45 08 02          	addl   $0x2,0x8(%ebp)
+  8005dc:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
+  8005e3:	eb 2a                	jmp    80060f <strtol+0xad>
+    }
+    else if (base == 0 && s[0] == '0') {
+  8005e5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  8005e9:	75 17                	jne    800602 <strtol+0xa0>
+  8005eb:	8b 45 08             	mov    0x8(%ebp),%eax
+  8005ee:	0f b6 00             	movzbl (%eax),%eax
+  8005f1:	3c 30                	cmp    $0x30,%al
+  8005f3:	75 0d                	jne    800602 <strtol+0xa0>
+        s ++, base = 8;
+  8005f5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  8005f9:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
+  800600:	eb 0d                	jmp    80060f <strtol+0xad>
+    }
+    else if (base == 0) {
+  800602:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
+  800606:	75 07                	jne    80060f <strtol+0xad>
+        base = 10;
+  800608:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)
+
+    // digits
+    while (1) {
+        int dig;
+
+        if (*s >= '0' && *s <= '9') {
+  80060f:	8b 45 08             	mov    0x8(%ebp),%eax
+  800612:	0f b6 00             	movzbl (%eax),%eax
+  800615:	3c 2f                	cmp    $0x2f,%al
+  800617:	7e 1b                	jle    800634 <strtol+0xd2>
+  800619:	8b 45 08             	mov    0x8(%ebp),%eax
+  80061c:	0f b6 00             	movzbl (%eax),%eax
+  80061f:	3c 39                	cmp    $0x39,%al
+  800621:	7f 11                	jg     800634 <strtol+0xd2>
+            dig = *s - '0';
+  800623:	8b 45 08             	mov    0x8(%ebp),%eax
+  800626:	0f b6 00             	movzbl (%eax),%eax
+  800629:	0f be c0             	movsbl %al,%eax
+  80062c:	83 e8 30             	sub    $0x30,%eax
+  80062f:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800632:	eb 48                	jmp    80067c <strtol+0x11a>
+        }
+        else if (*s >= 'a' && *s <= 'z') {
+  800634:	8b 45 08             	mov    0x8(%ebp),%eax
+  800637:	0f b6 00             	movzbl (%eax),%eax
+  80063a:	3c 60                	cmp    $0x60,%al
+  80063c:	7e 1b                	jle    800659 <strtol+0xf7>
+  80063e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800641:	0f b6 00             	movzbl (%eax),%eax
+  800644:	3c 7a                	cmp    $0x7a,%al
+  800646:	7f 11                	jg     800659 <strtol+0xf7>
+            dig = *s - 'a' + 10;
+  800648:	8b 45 08             	mov    0x8(%ebp),%eax
+  80064b:	0f b6 00             	movzbl (%eax),%eax
+  80064e:	0f be c0             	movsbl %al,%eax
+  800651:	83 e8 57             	sub    $0x57,%eax
+  800654:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800657:	eb 23                	jmp    80067c <strtol+0x11a>
+        }
+        else if (*s >= 'A' && *s <= 'Z') {
+  800659:	8b 45 08             	mov    0x8(%ebp),%eax
+  80065c:	0f b6 00             	movzbl (%eax),%eax
+  80065f:	3c 40                	cmp    $0x40,%al
+  800661:	7e 3c                	jle    80069f <strtol+0x13d>
+  800663:	8b 45 08             	mov    0x8(%ebp),%eax
+  800666:	0f b6 00             	movzbl (%eax),%eax
+  800669:	3c 5a                	cmp    $0x5a,%al
+  80066b:	7f 32                	jg     80069f <strtol+0x13d>
+            dig = *s - 'A' + 10;
+  80066d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800670:	0f b6 00             	movzbl (%eax),%eax
+  800673:	0f be c0             	movsbl %al,%eax
+  800676:	83 e8 37             	sub    $0x37,%eax
+  800679:	89 45 f4             	mov    %eax,-0xc(%ebp)
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+  80067c:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  80067f:	3b 45 10             	cmp    0x10(%ebp),%eax
+  800682:	7d 1a                	jge    80069e <strtol+0x13c>
+            break;
+        }
+        s ++, val = (val * base) + dig;
+  800684:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  800688:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80068b:	0f af 45 10          	imul   0x10(%ebp),%eax
+  80068f:	89 c2                	mov    %eax,%edx
+  800691:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  800694:	01 d0                	add    %edx,%eax
+  800696:	89 45 f8             	mov    %eax,-0x8(%ebp)
+        // we don't properly detect overflow!
+    }
+  800699:	e9 71 ff ff ff       	jmp    80060f <strtol+0xad>
+        }
+        else {
+            break;
+        }
+        if (dig >= base) {
+            break;
+  80069e:	90                   	nop
+        }
+        s ++, val = (val * base) + dig;
+        // we don't properly detect overflow!
+    }
+
+    if (endptr) {
+  80069f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8006a3:	74 08                	je     8006ad <strtol+0x14b>
+        *endptr = (char *) s;
+  8006a5:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006a8:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006ab:	89 10                	mov    %edx,(%eax)
+    }
+    return (neg ? -val : val);
+  8006ad:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
+  8006b1:	74 07                	je     8006ba <strtol+0x158>
+  8006b3:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006b6:	f7 d8                	neg    %eax
+  8006b8:	eb 03                	jmp    8006bd <strtol+0x15b>
+  8006ba:	8b 45 f8             	mov    -0x8(%ebp),%eax
+}
+  8006bd:	c9                   	leave  
+  8006be:	c3                   	ret    
+
+008006bf <memset>:
+ * @n:      number of bytes to be set to the value
+ *
+ * The memset() function returns @s.
+ * */
+void *
+memset(void *s, char c, size_t n) {
+  8006bf:	55                   	push   %ebp
+  8006c0:	89 e5                	mov    %esp,%ebp
+  8006c2:	57                   	push   %edi
+  8006c3:	83 ec 24             	sub    $0x24,%esp
+  8006c6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8006c9:	88 45 d8             	mov    %al,-0x28(%ebp)
+#ifdef __HAVE_ARCH_MEMSET
+    return __memset(s, c, n);
+  8006cc:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
+  8006d0:	8b 55 08             	mov    0x8(%ebp),%edx
+  8006d3:	89 55 f8             	mov    %edx,-0x8(%ebp)
+  8006d6:	88 45 f7             	mov    %al,-0x9(%ebp)
+  8006d9:	8b 45 10             	mov    0x10(%ebp),%eax
+  8006dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+#ifndef __HAVE_ARCH_MEMSET
+#define __HAVE_ARCH_MEMSET
+static inline void *
+__memset(void *s, char c, size_t n) {
+    int d0, d1;
+    asm volatile (
+  8006df:	8b 4d f0             	mov    -0x10(%ebp),%ecx
+  8006e2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
+  8006e6:	8b 55 f8             	mov    -0x8(%ebp),%edx
+  8006e9:	89 d7                	mov    %edx,%edi
+  8006eb:	f3 aa                	rep stos %al,%es:(%edi)
+  8006ed:	89 fa                	mov    %edi,%edx
+  8006ef:	89 4d ec             	mov    %ecx,-0x14(%ebp)
+  8006f2:	89 55 e8             	mov    %edx,-0x18(%ebp)
+        "rep; stosb;"
+        : "=&c" (d0), "=&D" (d1)
+        : "0" (n), "a" (c), "1" (s)
+        : "memory");
+    return s;
+  8006f5:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  8006f8:	90                   	nop
+    while (n -- > 0) {
+        *p ++ = c;
+    }
+    return s;
+#endif /* __HAVE_ARCH_MEMSET */
+}
+  8006f9:	83 c4 24             	add    $0x24,%esp
+  8006fc:	5f                   	pop    %edi
+  8006fd:	5d                   	pop    %ebp
+  8006fe:	c3                   	ret    
+
+008006ff <memmove>:
+ * @n:      number of bytes to copy
+ *
+ * The memmove() function returns @dst.
+ * */
+void *
+memmove(void *dst, const void *src, size_t n) {
+  8006ff:	55                   	push   %ebp
+  800700:	89 e5                	mov    %esp,%ebp
+  800702:	57                   	push   %edi
+  800703:	56                   	push   %esi
+  800704:	53                   	push   %ebx
+  800705:	83 ec 30             	sub    $0x30,%esp
+  800708:	8b 45 08             	mov    0x8(%ebp),%eax
+  80070b:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  80070e:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800711:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800714:	8b 45 10             	mov    0x10(%ebp),%eax
+  800717:	89 45 e8             	mov    %eax,-0x18(%ebp)
+
+#ifndef __HAVE_ARCH_MEMMOVE
+#define __HAVE_ARCH_MEMMOVE
+static inline void *
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+  80071a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80071d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
+  800720:	73 42                	jae    800764 <memmove+0x65>
+  800722:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800725:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  800728:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80072b:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  80072e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800731:	89 45 dc             	mov    %eax,-0x24(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  800734:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800737:	c1 e8 02             	shr    $0x2,%eax
+  80073a:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  80073c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  80073f:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800742:	89 d7                	mov    %edx,%edi
+  800744:	89 c6                	mov    %eax,%esi
+  800746:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  800748:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  80074b:	83 e1 03             	and    $0x3,%ecx
+  80074e:	74 02                	je     800752 <memmove+0x53>
+  800750:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800752:	89 f0                	mov    %esi,%eax
+  800754:	89 fa                	mov    %edi,%edx
+  800756:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+  800759:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  80075c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  80075f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMMOVE
+    return __memmove(dst, src, n);
+  800762:	eb 36                	jmp    80079a <memmove+0x9b>
+    asm volatile (
+        "std;"
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+  800764:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800767:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80076a:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  80076d:	01 c2                	add    %eax,%edx
+  80076f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800772:	8d 48 ff             	lea    -0x1(%eax),%ecx
+  800775:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800778:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
+__memmove(void *dst, const void *src, size_t n) {
+    if (dst < src) {
+        return __memcpy(dst, src, n);
+    }
+    int d0, d1, d2;
+    asm volatile (
+  80077b:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  80077e:	89 c1                	mov    %eax,%ecx
+  800780:	89 d8                	mov    %ebx,%eax
+  800782:	89 d6                	mov    %edx,%esi
+  800784:	89 c7                	mov    %eax,%edi
+  800786:	fd                   	std    
+  800787:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  800789:	fc                   	cld    
+  80078a:	89 f8                	mov    %edi,%eax
+  80078c:	89 f2                	mov    %esi,%edx
+  80078e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  800791:	89 55 c8             	mov    %edx,-0x38(%ebp)
+  800794:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+        "rep; movsb;"
+        "cld;"
+        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
+        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
+        : "memory");
+    return dst;
+  800797:	8b 45 f0             	mov    -0x10(%ebp),%eax
+            *d ++ = *s ++;
+        }
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMMOVE */
+}
+  80079a:	83 c4 30             	add    $0x30,%esp
+  80079d:	5b                   	pop    %ebx
+  80079e:	5e                   	pop    %esi
+  80079f:	5f                   	pop    %edi
+  8007a0:	5d                   	pop    %ebp
+  8007a1:	c3                   	ret    
+
+008007a2 <memcpy>:
+ * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
+ * by both @src and @dst, should be at least @n bytes, and should not overlap
+ * (for overlapping memory area, memmove is a safer approach).
+ * */
+void *
+memcpy(void *dst, const void *src, size_t n) {
+  8007a2:	55                   	push   %ebp
+  8007a3:	89 e5                	mov    %esp,%ebp
+  8007a5:	57                   	push   %edi
+  8007a6:	56                   	push   %esi
+  8007a7:	83 ec 20             	sub    $0x20,%esp
+  8007aa:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  8007b0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  8007b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8007b6:	8b 45 10             	mov    0x10(%ebp),%eax
+  8007b9:	89 45 ec             	mov    %eax,-0x14(%ebp)
+        "andl $3, %%ecx;"
+        "jz 1f;"
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+  8007bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  8007bf:	c1 e8 02             	shr    $0x2,%eax
+  8007c2:	89 c1                	mov    %eax,%ecx
+#ifndef __HAVE_ARCH_MEMCPY
+#define __HAVE_ARCH_MEMCPY
+static inline void *
+__memcpy(void *dst, const void *src, size_t n) {
+    int d0, d1, d2;
+    asm volatile (
+  8007c4:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8007c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  8007ca:	89 d7                	mov    %edx,%edi
+  8007cc:	89 c6                	mov    %eax,%esi
+  8007ce:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  8007d0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
+  8007d3:	83 e1 03             	and    $0x3,%ecx
+  8007d6:	74 02                	je     8007da <memcpy+0x38>
+  8007d8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
+  8007da:	89 f0                	mov    %esi,%eax
+  8007dc:	89 fa                	mov    %edi,%edx
+  8007de:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  8007e1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  8007e4:	89 45 e0             	mov    %eax,-0x20(%ebp)
+        "rep; movsb;"
+        "1:"
+        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
+        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
+        : "memory");
+    return dst;
+  8007e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+#ifdef __HAVE_ARCH_MEMCPY
+    return __memcpy(dst, src, n);
+  8007ea:	90                   	nop
+    while (n -- > 0) {
+        *d ++ = *s ++;
+    }
+    return dst;
+#endif /* __HAVE_ARCH_MEMCPY */
+}
+  8007eb:	83 c4 20             	add    $0x20,%esp
+  8007ee:	5e                   	pop    %esi
+  8007ef:	5f                   	pop    %edi
+  8007f0:	5d                   	pop    %ebp
+  8007f1:	c3                   	ret    
+
+008007f2 <memcmp>:
+ *   match in both memory blocks has a greater value in @v1 than in @v2
+ *   as if evaluated as unsigned char values;
+ * - And a value less than zero indicates the opposite.
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+  8007f2:	55                   	push   %ebp
+  8007f3:	89 e5                	mov    %esp,%ebp
+  8007f5:	83 ec 10             	sub    $0x10,%esp
+    const char *s1 = (const char *)v1;
+  8007f8:	8b 45 08             	mov    0x8(%ebp),%eax
+  8007fb:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    const char *s2 = (const char *)v2;
+  8007fe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800801:	89 45 f8             	mov    %eax,-0x8(%ebp)
+    while (n -- > 0) {
+  800804:	eb 30                	jmp    800836 <memcmp+0x44>
+        if (*s1 != *s2) {
+  800806:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800809:	0f b6 10             	movzbl (%eax),%edx
+  80080c:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  80080f:	0f b6 00             	movzbl (%eax),%eax
+  800812:	38 c2                	cmp    %al,%dl
+  800814:	74 18                	je     80082e <memcmp+0x3c>
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+  800816:	8b 45 fc             	mov    -0x4(%ebp),%eax
+  800819:	0f b6 00             	movzbl (%eax),%eax
+  80081c:	0f b6 d0             	movzbl %al,%edx
+  80081f:	8b 45 f8             	mov    -0x8(%ebp),%eax
+  800822:	0f b6 00             	movzbl (%eax),%eax
+  800825:	0f b6 c0             	movzbl %al,%eax
+  800828:	29 c2                	sub    %eax,%edx
+  80082a:	89 d0                	mov    %edx,%eax
+  80082c:	eb 1a                	jmp    800848 <memcmp+0x56>
+        }
+        s1 ++, s2 ++;
+  80082e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
+  800832:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
+ * */
+int
+memcmp(const void *v1, const void *v2, size_t n) {
+    const char *s1 = (const char *)v1;
+    const char *s2 = (const char *)v2;
+    while (n -- > 0) {
+  800836:	8b 45 10             	mov    0x10(%ebp),%eax
+  800839:	8d 50 ff             	lea    -0x1(%eax),%edx
+  80083c:	89 55 10             	mov    %edx,0x10(%ebp)
+  80083f:	85 c0                	test   %eax,%eax
+  800841:	75 c3                	jne    800806 <memcmp+0x14>
+        if (*s1 != *s2) {
+            return (int)((unsigned char)*s1 - (unsigned char)*s2);
+        }
+        s1 ++, s2 ++;
+    }
+    return 0;
+  800843:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800848:	c9                   	leave  
+  800849:	c3                   	ret    
+
+0080084a <printnum>:
+ * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
+ * @padc:       character that padded on the left if the actual width is less than @width
+ * */
+static void
+printnum(void (*putch)(int, void*), void *putdat,
+        unsigned long long num, unsigned base, int width, int padc) {
+  80084a:	55                   	push   %ebp
+  80084b:	89 e5                	mov    %esp,%ebp
+  80084d:	83 ec 38             	sub    $0x38,%esp
+  800850:	8b 45 10             	mov    0x10(%ebp),%eax
+  800853:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  800856:	8b 45 14             	mov    0x14(%ebp),%eax
+  800859:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    unsigned long long result = num;
+  80085c:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  80085f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  800862:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800865:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    unsigned mod = do_div(result, base);
+  800868:	8b 45 18             	mov    0x18(%ebp),%eax
+  80086b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  80086e:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800871:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800874:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800877:	89 55 f0             	mov    %edx,-0x10(%ebp)
+  80087a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  80087d:	89 45 f4             	mov    %eax,-0xc(%ebp)
+  800880:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
+  800884:	74 1c                	je     8008a2 <printnum+0x58>
+  800886:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800889:	ba 00 00 00 00       	mov    $0x0,%edx
+  80088e:	f7 75 e4             	divl   -0x1c(%ebp)
+  800891:	89 55 f4             	mov    %edx,-0xc(%ebp)
+  800894:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800897:	ba 00 00 00 00       	mov    $0x0,%edx
+  80089c:	f7 75 e4             	divl   -0x1c(%ebp)
+  80089f:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  8008a2:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  8008a8:	f7 75 e4             	divl   -0x1c(%ebp)
+  8008ab:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  8008ae:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  8008b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  8008b4:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  8008b7:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  8008ba:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  8008bd:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  8008c0:	89 45 d8             	mov    %eax,-0x28(%ebp)
+
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+  8008c3:	8b 45 18             	mov    0x18(%ebp),%eax
+  8008c6:	ba 00 00 00 00       	mov    $0x0,%edx
+  8008cb:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008ce:	77 41                	ja     800911 <printnum+0xc7>
+  8008d0:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
+  8008d3:	72 05                	jb     8008da <printnum+0x90>
+  8008d5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
+  8008d8:	77 37                	ja     800911 <printnum+0xc7>
+        printnum(putch, putdat, result, base, width - 1, padc);
+  8008da:	8b 45 1c             	mov    0x1c(%ebp),%eax
+  8008dd:	83 e8 01             	sub    $0x1,%eax
+  8008e0:	83 ec 04             	sub    $0x4,%esp
+  8008e3:	ff 75 20             	pushl  0x20(%ebp)
+  8008e6:	50                   	push   %eax
+  8008e7:	ff 75 18             	pushl  0x18(%ebp)
+  8008ea:	ff 75 ec             	pushl  -0x14(%ebp)
+  8008ed:	ff 75 e8             	pushl  -0x18(%ebp)
+  8008f0:	ff 75 0c             	pushl  0xc(%ebp)
+  8008f3:	ff 75 08             	pushl  0x8(%ebp)
+  8008f6:	e8 4f ff ff ff       	call   80084a <printnum>
+  8008fb:	83 c4 20             	add    $0x20,%esp
+  8008fe:	eb 1b                	jmp    80091b <printnum+0xd1>
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+            putch(padc, putdat);
+  800900:	83 ec 08             	sub    $0x8,%esp
+  800903:	ff 75 0c             	pushl  0xc(%ebp)
+  800906:	ff 75 20             	pushl  0x20(%ebp)
+  800909:	8b 45 08             	mov    0x8(%ebp),%eax
+  80090c:	ff d0                	call   *%eax
+  80090e:	83 c4 10             	add    $0x10,%esp
+    // first recursively print all preceding (more significant) digits
+    if (num >= base) {
+        printnum(putch, putdat, result, base, width - 1, padc);
+    } else {
+        // print any needed pad characters before first digit
+        while (-- width > 0)
+  800911:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
+  800915:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
+  800919:	7f e5                	jg     800900 <printnum+0xb6>
+            putch(padc, putdat);
+    }
+    // then print this (the least significant) digit
+    putch("0123456789abcdef"[mod], putdat);
+  80091b:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  80091e:	05 44 11 80 00       	add    $0x801144,%eax
+  800923:	0f b6 00             	movzbl (%eax),%eax
+  800926:	0f be c0             	movsbl %al,%eax
+  800929:	83 ec 08             	sub    $0x8,%esp
+  80092c:	ff 75 0c             	pushl  0xc(%ebp)
+  80092f:	50                   	push   %eax
+  800930:	8b 45 08             	mov    0x8(%ebp),%eax
+  800933:	ff d0                	call   *%eax
+  800935:	83 c4 10             	add    $0x10,%esp
+}
+  800938:	90                   	nop
+  800939:	c9                   	leave  
+  80093a:	c3                   	ret    
+
+0080093b <getuint>:
+ * getuint - get an unsigned int of various possible sizes from a varargs list
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static unsigned long long
+getuint(va_list *ap, int lflag) {
+  80093b:	55                   	push   %ebp
+  80093c:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  80093e:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800942:	7e 14                	jle    800958 <getuint+0x1d>
+        return va_arg(*ap, unsigned long long);
+  800944:	8b 45 08             	mov    0x8(%ebp),%eax
+  800947:	8b 00                	mov    (%eax),%eax
+  800949:	8d 48 08             	lea    0x8(%eax),%ecx
+  80094c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80094f:	89 0a                	mov    %ecx,(%edx)
+  800951:	8b 50 04             	mov    0x4(%eax),%edx
+  800954:	8b 00                	mov    (%eax),%eax
+  800956:	eb 30                	jmp    800988 <getuint+0x4d>
+    }
+    else if (lflag) {
+  800958:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  80095c:	74 16                	je     800974 <getuint+0x39>
+        return va_arg(*ap, unsigned long);
+  80095e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800961:	8b 00                	mov    (%eax),%eax
+  800963:	8d 48 04             	lea    0x4(%eax),%ecx
+  800966:	8b 55 08             	mov    0x8(%ebp),%edx
+  800969:	89 0a                	mov    %ecx,(%edx)
+  80096b:	8b 00                	mov    (%eax),%eax
+  80096d:	ba 00 00 00 00       	mov    $0x0,%edx
+  800972:	eb 14                	jmp    800988 <getuint+0x4d>
+    }
+    else {
+        return va_arg(*ap, unsigned int);
+  800974:	8b 45 08             	mov    0x8(%ebp),%eax
+  800977:	8b 00                	mov    (%eax),%eax
+  800979:	8d 48 04             	lea    0x4(%eax),%ecx
+  80097c:	8b 55 08             	mov    0x8(%ebp),%edx
+  80097f:	89 0a                	mov    %ecx,(%edx)
+  800981:	8b 00                	mov    (%eax),%eax
+  800983:	ba 00 00 00 00       	mov    $0x0,%edx
+    }
+}
+  800988:	5d                   	pop    %ebp
+  800989:	c3                   	ret    
+
+0080098a <getint>:
+ * getint - same as getuint but signed, we can't use getuint because of sign extension
+ * @ap:         a varargs list pointer
+ * @lflag:      determines the size of the vararg that @ap points to
+ * */
+static long long
+getint(va_list *ap, int lflag) {
+  80098a:	55                   	push   %ebp
+  80098b:	89 e5                	mov    %esp,%ebp
+    if (lflag >= 2) {
+  80098d:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
+  800991:	7e 14                	jle    8009a7 <getint+0x1d>
+        return va_arg(*ap, long long);
+  800993:	8b 45 08             	mov    0x8(%ebp),%eax
+  800996:	8b 00                	mov    (%eax),%eax
+  800998:	8d 48 08             	lea    0x8(%eax),%ecx
+  80099b:	8b 55 08             	mov    0x8(%ebp),%edx
+  80099e:	89 0a                	mov    %ecx,(%edx)
+  8009a0:	8b 50 04             	mov    0x4(%eax),%edx
+  8009a3:	8b 00                	mov    (%eax),%eax
+  8009a5:	eb 28                	jmp    8009cf <getint+0x45>
+    }
+    else if (lflag) {
+  8009a7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
+  8009ab:	74 12                	je     8009bf <getint+0x35>
+        return va_arg(*ap, long);
+  8009ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009b0:	8b 00                	mov    (%eax),%eax
+  8009b2:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009b5:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009b8:	89 0a                	mov    %ecx,(%edx)
+  8009ba:	8b 00                	mov    (%eax),%eax
+  8009bc:	99                   	cltd   
+  8009bd:	eb 10                	jmp    8009cf <getint+0x45>
+    }
+    else {
+        return va_arg(*ap, int);
+  8009bf:	8b 45 08             	mov    0x8(%ebp),%eax
+  8009c2:	8b 00                	mov    (%eax),%eax
+  8009c4:	8d 48 04             	lea    0x4(%eax),%ecx
+  8009c7:	8b 55 08             	mov    0x8(%ebp),%edx
+  8009ca:	89 0a                	mov    %ecx,(%edx)
+  8009cc:	8b 00                	mov    (%eax),%eax
+  8009ce:	99                   	cltd   
+    }
+}
+  8009cf:	5d                   	pop    %ebp
+  8009d0:	c3                   	ret    
+
+008009d1 <printfmt>:
+ * @putch:      specified putch function, print a single character
+ * @putdat:     used by @putch function
+ * @fmt:        the format string to use
+ * */
+void
+printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
+  8009d1:	55                   	push   %ebp
+  8009d2:	89 e5                	mov    %esp,%ebp
+  8009d4:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+
+    va_start(ap, fmt);
+  8009d7:	8d 45 14             	lea    0x14(%ebp),%eax
+  8009da:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    vprintfmt(putch, putdat, fmt, ap);
+  8009dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
+  8009e0:	50                   	push   %eax
+  8009e1:	ff 75 10             	pushl  0x10(%ebp)
+  8009e4:	ff 75 0c             	pushl  0xc(%ebp)
+  8009e7:	ff 75 08             	pushl  0x8(%ebp)
+  8009ea:	e8 06 00 00 00       	call   8009f5 <vprintfmt>
+  8009ef:	83 c4 10             	add    $0x10,%esp
+    va_end(ap);
+}
+  8009f2:	90                   	nop
+  8009f3:	c9                   	leave  
+  8009f4:	c3                   	ret    
+
+008009f5 <vprintfmt>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want printfmt() instead.
+ * */
+void
+vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
+  8009f5:	55                   	push   %ebp
+  8009f6:	89 e5                	mov    %esp,%ebp
+  8009f8:	56                   	push   %esi
+  8009f9:	53                   	push   %ebx
+  8009fa:	83 ec 20             	sub    $0x20,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  8009fd:	eb 17                	jmp    800a16 <vprintfmt+0x21>
+            if (ch == '\0') {
+  8009ff:	85 db                	test   %ebx,%ebx
+  800a01:	0f 84 8e 03 00 00    	je     800d95 <vprintfmt+0x3a0>
+                return;
+            }
+            putch(ch, putdat);
+  800a07:	83 ec 08             	sub    $0x8,%esp
+  800a0a:	ff 75 0c             	pushl  0xc(%ebp)
+  800a0d:	53                   	push   %ebx
+  800a0e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800a11:	ff d0                	call   *%eax
+  800a13:	83 c4 10             	add    $0x10,%esp
+    register int ch, err;
+    unsigned long long num;
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+  800a16:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a19:	8d 50 01             	lea    0x1(%eax),%edx
+  800a1c:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a1f:	0f b6 00             	movzbl (%eax),%eax
+  800a22:	0f b6 d8             	movzbl %al,%ebx
+  800a25:	83 fb 25             	cmp    $0x25,%ebx
+  800a28:	75 d5                	jne    8009ff <vprintfmt+0xa>
+            }
+            putch(ch, putdat);
+        }
+
+        // Process a %-escape sequence
+        char padc = ' ';
+  800a2a:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
+        width = precision = -1;
+  800a2e:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+  800a35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800a38:	89 45 e8             	mov    %eax,-0x18(%ebp)
+        lflag = altflag = 0;
+  800a3b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  800a42:	8b 45 dc             	mov    -0x24(%ebp),%eax
+  800a45:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+    reswitch:
+        switch (ch = *(unsigned char *)fmt ++) {
+  800a48:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a4b:	8d 50 01             	lea    0x1(%eax),%edx
+  800a4e:	89 55 10             	mov    %edx,0x10(%ebp)
+  800a51:	0f b6 00             	movzbl (%eax),%eax
+  800a54:	0f b6 d8             	movzbl %al,%ebx
+  800a57:	8d 43 dd             	lea    -0x23(%ebx),%eax
+  800a5a:	83 f8 55             	cmp    $0x55,%eax
+  800a5d:	0f 87 05 03 00 00    	ja     800d68 <vprintfmt+0x373>
+  800a63:	8b 04 85 68 11 80 00 	mov    0x801168(,%eax,4),%eax
+  800a6a:	ff e0                	jmp    *%eax
+
+        // flag to pad on the right
+        case '-':
+            padc = '-';
+  800a6c:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
+            goto reswitch;
+  800a70:	eb d6                	jmp    800a48 <vprintfmt+0x53>
+
+        // flag to pad with 0's instead of spaces
+        case '0':
+            padc = '0';
+  800a72:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
+            goto reswitch;
+  800a76:	eb d0                	jmp    800a48 <vprintfmt+0x53>
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800a78:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+                precision = precision * 10 + ch - '0';
+  800a7f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800a82:	89 d0                	mov    %edx,%eax
+  800a84:	c1 e0 02             	shl    $0x2,%eax
+  800a87:	01 d0                	add    %edx,%eax
+  800a89:	01 c0                	add    %eax,%eax
+  800a8b:	01 d8                	add    %ebx,%eax
+  800a8d:	83 e8 30             	sub    $0x30,%eax
+  800a90:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+                ch = *fmt;
+  800a93:	8b 45 10             	mov    0x10(%ebp),%eax
+  800a96:	0f b6 00             	movzbl (%eax),%eax
+  800a99:	0f be d8             	movsbl %al,%ebx
+                if (ch < '0' || ch > '9') {
+  800a9c:	83 fb 2f             	cmp    $0x2f,%ebx
+  800a9f:	7e 39                	jle    800ada <vprintfmt+0xe5>
+  800aa1:	83 fb 39             	cmp    $0x39,%ebx
+  800aa4:	7f 34                	jg     800ada <vprintfmt+0xe5>
+            padc = '0';
+            goto reswitch;
+
+        // width field
+        case '1' ... '9':
+            for (precision = 0; ; ++ fmt) {
+  800aa6:	83 45 10 01          	addl   $0x1,0x10(%ebp)
+                precision = precision * 10 + ch - '0';
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+  800aaa:	eb d3                	jmp    800a7f <vprintfmt+0x8a>
+            goto process_precision;
+
+        case '*':
+            precision = va_arg(ap, int);
+  800aac:	8b 45 14             	mov    0x14(%ebp),%eax
+  800aaf:	8d 50 04             	lea    0x4(%eax),%edx
+  800ab2:	89 55 14             	mov    %edx,0x14(%ebp)
+  800ab5:	8b 00                	mov    (%eax),%eax
+  800ab7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            goto process_precision;
+  800aba:	eb 1f                	jmp    800adb <vprintfmt+0xe6>
+
+        case '.':
+            if (width < 0)
+  800abc:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ac0:	79 86                	jns    800a48 <vprintfmt+0x53>
+                width = 0;
+  800ac2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+            goto reswitch;
+  800ac9:	e9 7a ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        case '#':
+            altflag = 1;
+  800ace:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
+            goto reswitch;
+  800ad5:	e9 6e ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+                ch = *fmt;
+                if (ch < '0' || ch > '9') {
+                    break;
+                }
+            }
+            goto process_precision;
+  800ada:	90                   	nop
+        case '#':
+            altflag = 1;
+            goto reswitch;
+
+        process_precision:
+            if (width < 0)
+  800adb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800adf:	0f 89 63 ff ff ff    	jns    800a48 <vprintfmt+0x53>
+                width = precision, precision = -1;
+  800ae5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800ae8:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800aeb:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
+            goto reswitch;
+  800af2:	e9 51 ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        // long flag (doubled for long long)
+        case 'l':
+            lflag ++;
+  800af7:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+            goto reswitch;
+  800afb:	e9 48 ff ff ff       	jmp    800a48 <vprintfmt+0x53>
+
+        // character
+        case 'c':
+            putch(va_arg(ap, int), putdat);
+  800b00:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b03:	8d 50 04             	lea    0x4(%eax),%edx
+  800b06:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b09:	8b 00                	mov    (%eax),%eax
+  800b0b:	83 ec 08             	sub    $0x8,%esp
+  800b0e:	ff 75 0c             	pushl  0xc(%ebp)
+  800b11:	50                   	push   %eax
+  800b12:	8b 45 08             	mov    0x8(%ebp),%eax
+  800b15:	ff d0                	call   *%eax
+  800b17:	83 c4 10             	add    $0x10,%esp
+            break;
+  800b1a:	e9 71 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // error message
+        case 'e':
+            err = va_arg(ap, int);
+  800b1f:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b22:	8d 50 04             	lea    0x4(%eax),%edx
+  800b25:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b28:	8b 18                	mov    (%eax),%ebx
+            if (err < 0) {
+  800b2a:	85 db                	test   %ebx,%ebx
+  800b2c:	79 02                	jns    800b30 <vprintfmt+0x13b>
+                err = -err;
+  800b2e:	f7 db                	neg    %ebx
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+  800b30:	83 fb 18             	cmp    $0x18,%ebx
+  800b33:	7f 0b                	jg     800b40 <vprintfmt+0x14b>
+  800b35:	8b 34 9d e0 10 80 00 	mov    0x8010e0(,%ebx,4),%esi
+  800b3c:	85 f6                	test   %esi,%esi
+  800b3e:	75 19                	jne    800b59 <vprintfmt+0x164>
+                printfmt(putch, putdat, "error %d", err);
+  800b40:	53                   	push   %ebx
+  800b41:	68 55 11 80 00       	push   $0x801155
+  800b46:	ff 75 0c             	pushl  0xc(%ebp)
+  800b49:	ff 75 08             	pushl  0x8(%ebp)
+  800b4c:	e8 80 fe ff ff       	call   8009d1 <printfmt>
+  800b51:	83 c4 10             	add    $0x10,%esp
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+            }
+            break;
+  800b54:	e9 37 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+            }
+            if (err > MAXERROR || (p = error_string[err]) == NULL) {
+                printfmt(putch, putdat, "error %d", err);
+            }
+            else {
+                printfmt(putch, putdat, "%s", p);
+  800b59:	56                   	push   %esi
+  800b5a:	68 5e 11 80 00       	push   $0x80115e
+  800b5f:	ff 75 0c             	pushl  0xc(%ebp)
+  800b62:	ff 75 08             	pushl  0x8(%ebp)
+  800b65:	e8 67 fe ff ff       	call   8009d1 <printfmt>
+  800b6a:	83 c4 10             	add    $0x10,%esp
+            }
+            break;
+  800b6d:	e9 1e 02 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // string
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+  800b72:	8b 45 14             	mov    0x14(%ebp),%eax
+  800b75:	8d 50 04             	lea    0x4(%eax),%edx
+  800b78:	89 55 14             	mov    %edx,0x14(%ebp)
+  800b7b:	8b 30                	mov    (%eax),%esi
+  800b7d:	85 f6                	test   %esi,%esi
+  800b7f:	75 05                	jne    800b86 <vprintfmt+0x191>
+                p = "(null)";
+  800b81:	be 61 11 80 00       	mov    $0x801161,%esi
+            }
+            if (width > 0 && padc != '-') {
+  800b86:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800b8a:	7e 76                	jle    800c02 <vprintfmt+0x20d>
+  800b8c:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
+  800b90:	74 70                	je     800c02 <vprintfmt+0x20d>
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800b92:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  800b95:	83 ec 08             	sub    $0x8,%esp
+  800b98:	50                   	push   %eax
+  800b99:	56                   	push   %esi
+  800b9a:	e8 17 f8 ff ff       	call   8003b6 <strnlen>
+  800b9f:	83 c4 10             	add    $0x10,%esp
+  800ba2:	89 c2                	mov    %eax,%edx
+  800ba4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800ba7:	29 d0                	sub    %edx,%eax
+  800ba9:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800bac:	eb 17                	jmp    800bc5 <vprintfmt+0x1d0>
+                    putch(padc, putdat);
+  800bae:	0f be 45 db          	movsbl -0x25(%ebp),%eax
+  800bb2:	83 ec 08             	sub    $0x8,%esp
+  800bb5:	ff 75 0c             	pushl  0xc(%ebp)
+  800bb8:	50                   	push   %eax
+  800bb9:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bbc:	ff d0                	call   *%eax
+  800bbe:	83 c4 10             	add    $0x10,%esp
+        case 's':
+            if ((p = va_arg(ap, char *)) == NULL) {
+                p = "(null)";
+            }
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+  800bc1:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800bc5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800bc9:	7f e3                	jg     800bae <vprintfmt+0x1b9>
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bcb:	eb 35                	jmp    800c02 <vprintfmt+0x20d>
+                if (altflag && (ch < ' ' || ch > '~')) {
+  800bcd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
+  800bd1:	74 1c                	je     800bef <vprintfmt+0x1fa>
+  800bd3:	83 fb 1f             	cmp    $0x1f,%ebx
+  800bd6:	7e 05                	jle    800bdd <vprintfmt+0x1e8>
+  800bd8:	83 fb 7e             	cmp    $0x7e,%ebx
+  800bdb:	7e 12                	jle    800bef <vprintfmt+0x1fa>
+                    putch('?', putdat);
+  800bdd:	83 ec 08             	sub    $0x8,%esp
+  800be0:	ff 75 0c             	pushl  0xc(%ebp)
+  800be3:	6a 3f                	push   $0x3f
+  800be5:	8b 45 08             	mov    0x8(%ebp),%eax
+  800be8:	ff d0                	call   *%eax
+  800bea:	83 c4 10             	add    $0x10,%esp
+  800bed:	eb 0f                	jmp    800bfe <vprintfmt+0x209>
+                }
+                else {
+                    putch(ch, putdat);
+  800bef:	83 ec 08             	sub    $0x8,%esp
+  800bf2:	ff 75 0c             	pushl  0xc(%ebp)
+  800bf5:	53                   	push   %ebx
+  800bf6:	8b 45 08             	mov    0x8(%ebp),%eax
+  800bf9:	ff d0                	call   *%eax
+  800bfb:	83 c4 10             	add    $0x10,%esp
+            if (width > 0 && padc != '-') {
+                for (width -= strnlen(p, precision); width > 0; width --) {
+                    putch(padc, putdat);
+                }
+            }
+            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
+  800bfe:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c02:	89 f0                	mov    %esi,%eax
+  800c04:	8d 70 01             	lea    0x1(%eax),%esi
+  800c07:	0f b6 00             	movzbl (%eax),%eax
+  800c0a:	0f be d8             	movsbl %al,%ebx
+  800c0d:	85 db                	test   %ebx,%ebx
+  800c0f:	74 26                	je     800c37 <vprintfmt+0x242>
+  800c11:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c15:	78 b6                	js     800bcd <vprintfmt+0x1d8>
+  800c17:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
+  800c1b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
+  800c1f:	79 ac                	jns    800bcd <vprintfmt+0x1d8>
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c21:	eb 14                	jmp    800c37 <vprintfmt+0x242>
+                putch(' ', putdat);
+  800c23:	83 ec 08             	sub    $0x8,%esp
+  800c26:	ff 75 0c             	pushl  0xc(%ebp)
+  800c29:	6a 20                	push   $0x20
+  800c2b:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c2e:	ff d0                	call   *%eax
+  800c30:	83 c4 10             	add    $0x10,%esp
+                }
+                else {
+                    putch(ch, putdat);
+                }
+            }
+            for (; width > 0; width --) {
+  800c33:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
+  800c37:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800c3b:	7f e6                	jg     800c23 <vprintfmt+0x22e>
+                putch(' ', putdat);
+            }
+            break;
+  800c3d:	e9 4e 01 00 00       	jmp    800d90 <vprintfmt+0x39b>
+
+        // (signed) decimal
+        case 'd':
+            num = getint(&ap, lflag);
+  800c42:	83 ec 08             	sub    $0x8,%esp
+  800c45:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c48:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c4b:	50                   	push   %eax
+  800c4c:	e8 39 fd ff ff       	call   80098a <getint>
+  800c51:	83 c4 10             	add    $0x10,%esp
+  800c54:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c57:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            if ((long long)num < 0) {
+  800c5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c5d:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c60:	85 d2                	test   %edx,%edx
+  800c62:	79 23                	jns    800c87 <vprintfmt+0x292>
+                putch('-', putdat);
+  800c64:	83 ec 08             	sub    $0x8,%esp
+  800c67:	ff 75 0c             	pushl  0xc(%ebp)
+  800c6a:	6a 2d                	push   $0x2d
+  800c6c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800c6f:	ff d0                	call   *%eax
+  800c71:	83 c4 10             	add    $0x10,%esp
+                num = -(long long)num;
+  800c74:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800c77:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  800c7a:	f7 d8                	neg    %eax
+  800c7c:	83 d2 00             	adc    $0x0,%edx
+  800c7f:	f7 da                	neg    %edx
+  800c81:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800c84:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            }
+            base = 10;
+  800c87:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800c8e:	e9 9f 00 00 00       	jmp    800d32 <vprintfmt+0x33d>
+
+        // unsigned decimal
+        case 'u':
+            num = getuint(&ap, lflag);
+  800c93:	83 ec 08             	sub    $0x8,%esp
+  800c96:	ff 75 e0             	pushl  -0x20(%ebp)
+  800c99:	8d 45 14             	lea    0x14(%ebp),%eax
+  800c9c:	50                   	push   %eax
+  800c9d:	e8 99 fc ff ff       	call   80093b <getuint>
+  800ca2:	83 c4 10             	add    $0x10,%esp
+  800ca5:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800ca8:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 10;
+  800cab:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
+            goto number;
+  800cb2:	eb 7e                	jmp    800d32 <vprintfmt+0x33d>
+
+        // (unsigned) octal
+        case 'o':
+            num = getuint(&ap, lflag);
+  800cb4:	83 ec 08             	sub    $0x8,%esp
+  800cb7:	ff 75 e0             	pushl  -0x20(%ebp)
+  800cba:	8d 45 14             	lea    0x14(%ebp),%eax
+  800cbd:	50                   	push   %eax
+  800cbe:	e8 78 fc ff ff       	call   80093b <getuint>
+  800cc3:	83 c4 10             	add    $0x10,%esp
+  800cc6:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800cc9:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 8;
+  800ccc:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
+            goto number;
+  800cd3:	eb 5d                	jmp    800d32 <vprintfmt+0x33d>
+
+        // pointer
+        case 'p':
+            putch('0', putdat);
+  800cd5:	83 ec 08             	sub    $0x8,%esp
+  800cd8:	ff 75 0c             	pushl  0xc(%ebp)
+  800cdb:	6a 30                	push   $0x30
+  800cdd:	8b 45 08             	mov    0x8(%ebp),%eax
+  800ce0:	ff d0                	call   *%eax
+  800ce2:	83 c4 10             	add    $0x10,%esp
+            putch('x', putdat);
+  800ce5:	83 ec 08             	sub    $0x8,%esp
+  800ce8:	ff 75 0c             	pushl  0xc(%ebp)
+  800ceb:	6a 78                	push   $0x78
+  800ced:	8b 45 08             	mov    0x8(%ebp),%eax
+  800cf0:	ff d0                	call   *%eax
+  800cf2:	83 c4 10             	add    $0x10,%esp
+            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
+  800cf5:	8b 45 14             	mov    0x14(%ebp),%eax
+  800cf8:	8d 50 04             	lea    0x4(%eax),%edx
+  800cfb:	89 55 14             	mov    %edx,0x14(%ebp)
+  800cfe:	8b 00                	mov    (%eax),%eax
+  800d00:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d03:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+            base = 16;
+  800d0a:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+            goto number;
+  800d11:	eb 1f                	jmp    800d32 <vprintfmt+0x33d>
+
+        // (unsigned) hexadecimal
+        case 'x':
+            num = getuint(&ap, lflag);
+  800d13:	83 ec 08             	sub    $0x8,%esp
+  800d16:	ff 75 e0             	pushl  -0x20(%ebp)
+  800d19:	8d 45 14             	lea    0x14(%ebp),%eax
+  800d1c:	50                   	push   %eax
+  800d1d:	e8 19 fc ff ff       	call   80093b <getuint>
+  800d22:	83 c4 10             	add    $0x10,%esp
+  800d25:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800d28:	89 55 f4             	mov    %edx,-0xc(%ebp)
+            base = 16;
+  800d2b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
+        number:
+            printnum(putch, putdat, num, base, width, padc);
+  800d32:	0f be 55 db          	movsbl -0x25(%ebp),%edx
+  800d36:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800d39:	83 ec 04             	sub    $0x4,%esp
+  800d3c:	52                   	push   %edx
+  800d3d:	ff 75 e8             	pushl  -0x18(%ebp)
+  800d40:	50                   	push   %eax
+  800d41:	ff 75 f4             	pushl  -0xc(%ebp)
+  800d44:	ff 75 f0             	pushl  -0x10(%ebp)
+  800d47:	ff 75 0c             	pushl  0xc(%ebp)
+  800d4a:	ff 75 08             	pushl  0x8(%ebp)
+  800d4d:	e8 f8 fa ff ff       	call   80084a <printnum>
+  800d52:	83 c4 20             	add    $0x20,%esp
+            break;
+  800d55:	eb 39                	jmp    800d90 <vprintfmt+0x39b>
+
+        // escaped '%' character
+        case '%':
+            putch(ch, putdat);
+  800d57:	83 ec 08             	sub    $0x8,%esp
+  800d5a:	ff 75 0c             	pushl  0xc(%ebp)
+  800d5d:	53                   	push   %ebx
+  800d5e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d61:	ff d0                	call   *%eax
+  800d63:	83 c4 10             	add    $0x10,%esp
+            break;
+  800d66:	eb 28                	jmp    800d90 <vprintfmt+0x39b>
+
+        // unrecognized escape sequence - just print it literally
+        default:
+            putch('%', putdat);
+  800d68:	83 ec 08             	sub    $0x8,%esp
+  800d6b:	ff 75 0c             	pushl  0xc(%ebp)
+  800d6e:	6a 25                	push   $0x25
+  800d70:	8b 45 08             	mov    0x8(%ebp),%eax
+  800d73:	ff d0                	call   *%eax
+  800d75:	83 c4 10             	add    $0x10,%esp
+            for (fmt --; fmt[-1] != '%'; fmt --)
+  800d78:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d7c:	eb 04                	jmp    800d82 <vprintfmt+0x38d>
+  800d7e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
+  800d82:	8b 45 10             	mov    0x10(%ebp),%eax
+  800d85:	83 e8 01             	sub    $0x1,%eax
+  800d88:	0f b6 00             	movzbl (%eax),%eax
+  800d8b:	3c 25                	cmp    $0x25,%al
+  800d8d:	75 ef                	jne    800d7e <vprintfmt+0x389>
+                /* do nothing */;
+            break;
+  800d8f:	90                   	nop
+        }
+    }
+  800d90:	e9 68 fc ff ff       	jmp    8009fd <vprintfmt+0x8>
+    int base, width, precision, lflag, altflag;
+
+    while (1) {
+        while ((ch = *(unsigned char *)fmt ++) != '%') {
+            if (ch == '\0') {
+                return;
+  800d95:	90                   	nop
+            for (fmt --; fmt[-1] != '%'; fmt --)
+                /* do nothing */;
+            break;
+        }
+    }
+}
+  800d96:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  800d99:	5b                   	pop    %ebx
+  800d9a:	5e                   	pop    %esi
+  800d9b:	5d                   	pop    %ebp
+  800d9c:	c3                   	ret    
+
+00800d9d <sprintputch>:
+ * sprintputch - 'print' a single character in a buffer
+ * @ch:         the character will be printed
+ * @b:          the buffer to place the character @ch
+ * */
+static void
+sprintputch(int ch, struct sprintbuf *b) {
+  800d9d:	55                   	push   %ebp
+  800d9e:	89 e5                	mov    %esp,%ebp
+    b->cnt ++;
+  800da0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800da3:	8b 40 08             	mov    0x8(%eax),%eax
+  800da6:	8d 50 01             	lea    0x1(%eax),%edx
+  800da9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dac:	89 50 08             	mov    %edx,0x8(%eax)
+    if (b->buf < b->ebuf) {
+  800daf:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db2:	8b 10                	mov    (%eax),%edx
+  800db4:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800db7:	8b 40 04             	mov    0x4(%eax),%eax
+  800dba:	39 c2                	cmp    %eax,%edx
+  800dbc:	73 12                	jae    800dd0 <sprintputch+0x33>
+        *b->buf ++ = ch;
+  800dbe:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800dc1:	8b 00                	mov    (%eax),%eax
+  800dc3:	8d 48 01             	lea    0x1(%eax),%ecx
+  800dc6:	8b 55 0c             	mov    0xc(%ebp),%edx
+  800dc9:	89 0a                	mov    %ecx,(%edx)
+  800dcb:	8b 55 08             	mov    0x8(%ebp),%edx
+  800dce:	88 10                	mov    %dl,(%eax)
+    }
+}
+  800dd0:	90                   	nop
+  800dd1:	5d                   	pop    %ebp
+  800dd2:	c3                   	ret    
+
+00800dd3 <snprintf>:
+ * @str:        the buffer to place the result into
+ * @size:       the size of buffer, including the trailing null space
+ * @fmt:        the format string to use
+ * */
+int
+snprintf(char *str, size_t size, const char *fmt, ...) {
+  800dd3:	55                   	push   %ebp
+  800dd4:	89 e5                	mov    %esp,%ebp
+  800dd6:	83 ec 18             	sub    $0x18,%esp
+    va_list ap;
+    int cnt;
+    va_start(ap, fmt);
+  800dd9:	8d 45 14             	lea    0x14(%ebp),%eax
+  800ddc:	89 45 f0             	mov    %eax,-0x10(%ebp)
+    cnt = vsnprintf(str, size, fmt, ap);
+  800ddf:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800de2:	50                   	push   %eax
+  800de3:	ff 75 10             	pushl  0x10(%ebp)
+  800de6:	ff 75 0c             	pushl  0xc(%ebp)
+  800de9:	ff 75 08             	pushl  0x8(%ebp)
+  800dec:	e8 0b 00 00 00       	call   800dfc <vsnprintf>
+  800df1:	83 c4 10             	add    $0x10,%esp
+  800df4:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    va_end(ap);
+    return cnt;
+  800df7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800dfa:	c9                   	leave  
+  800dfb:	c3                   	ret    
+
+00800dfc <vsnprintf>:
+ *
+ * Call this function if you are already dealing with a va_list.
+ * Or you probably want snprintf() instead.
+ * */
+int
+vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
+  800dfc:	55                   	push   %ebp
+  800dfd:	89 e5                	mov    %esp,%ebp
+  800dff:	83 ec 18             	sub    $0x18,%esp
+    struct sprintbuf b = {str, str + size - 1, 0};
+  800e02:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e05:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800e08:	8b 45 0c             	mov    0xc(%ebp),%eax
+  800e0b:	8d 50 ff             	lea    -0x1(%eax),%edx
+  800e0e:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e11:	01 d0                	add    %edx,%eax
+  800e13:	89 45 f0             	mov    %eax,-0x10(%ebp)
+  800e16:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+    if (str == NULL || b.buf > b.ebuf) {
+  800e1d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
+  800e21:	74 0a                	je     800e2d <vsnprintf+0x31>
+  800e23:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800e26:	8b 45 f0             	mov    -0x10(%ebp),%eax
+  800e29:	39 c2                	cmp    %eax,%edx
+  800e2b:	76 07                	jbe    800e34 <vsnprintf+0x38>
+        return -E_INVAL;
+  800e2d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
+  800e32:	eb 20                	jmp    800e54 <vsnprintf+0x58>
+    }
+    // print the string to the buffer
+    vprintfmt((void*)sprintputch, &b, fmt, ap);
+  800e34:	ff 75 14             	pushl  0x14(%ebp)
+  800e37:	ff 75 10             	pushl  0x10(%ebp)
+  800e3a:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  800e3d:	50                   	push   %eax
+  800e3e:	68 9d 0d 80 00       	push   $0x800d9d
+  800e43:	e8 ad fb ff ff       	call   8009f5 <vprintfmt>
+  800e48:	83 c4 10             	add    $0x10,%esp
+    // null terminate the buffer
+    *b.buf = '\0';
+  800e4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  800e4e:	c6 00 00             	movb   $0x0,(%eax)
+    return b.cnt;
+  800e51:	8b 45 f4             	mov    -0xc(%ebp),%eax
+}
+  800e54:	c9                   	leave  
+  800e55:	c3                   	ret    
+
+00800e56 <hash32>:
+ * @bits:   the number of bits in a return value
+ *
+ * High bits are more random, so we use them.
+ * */
+uint32_t
+hash32(uint32_t val, unsigned int bits) {
+  800e56:	55                   	push   %ebp
+  800e57:	89 e5                	mov    %esp,%ebp
+  800e59:	83 ec 10             	sub    $0x10,%esp
+    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
+  800e5c:	8b 45 08             	mov    0x8(%ebp),%eax
+  800e5f:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
+  800e65:	89 45 fc             	mov    %eax,-0x4(%ebp)
+    return (hash >> (32 - bits));
+  800e68:	b8 20 00 00 00       	mov    $0x20,%eax
+  800e6d:	2b 45 0c             	sub    0xc(%ebp),%eax
+  800e70:	8b 55 fc             	mov    -0x4(%ebp),%edx
+  800e73:	89 c1                	mov    %eax,%ecx
+  800e75:	d3 ea                	shr    %cl,%edx
+  800e77:	89 d0                	mov    %edx,%eax
+}
+  800e79:	c9                   	leave  
+  800e7a:	c3                   	ret    
+
+00800e7b <rand>:
+ * rand - returns a pseudo-random integer
+ *
+ * The rand() function return a value in the range [0, RAND_MAX].
+ * */
+int
+rand(void) {
+  800e7b:	55                   	push   %ebp
+  800e7c:	89 e5                	mov    %esp,%ebp
+  800e7e:	57                   	push   %edi
+  800e7f:	56                   	push   %esi
+  800e80:	53                   	push   %ebx
+  800e81:	83 ec 24             	sub    $0x24,%esp
+    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
+  800e84:	a1 00 20 80 00       	mov    0x802000,%eax
+  800e89:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800e8f:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
+  800e95:	6b f0 05             	imul   $0x5,%eax,%esi
+  800e98:	01 fe                	add    %edi,%esi
+  800e9a:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
+  800e9f:	f7 e7                	mul    %edi
+  800ea1:	01 d6                	add    %edx,%esi
+  800ea3:	89 f2                	mov    %esi,%edx
+  800ea5:	83 c0 0b             	add    $0xb,%eax
+  800ea8:	83 d2 00             	adc    $0x0,%edx
+  800eab:	89 c7                	mov    %eax,%edi
+  800ead:	83 e7 ff             	and    $0xffffffff,%edi
+  800eb0:	89 f9                	mov    %edi,%ecx
+  800eb2:	0f b7 da             	movzwl %dx,%ebx
+  800eb5:	89 0d 00 20 80 00    	mov    %ecx,0x802000
+  800ebb:	89 1d 04 20 80 00    	mov    %ebx,0x802004
+    unsigned long long result = (next >> 12);
+  800ec1:	a1 00 20 80 00       	mov    0x802000,%eax
+  800ec6:	8b 15 04 20 80 00    	mov    0x802004,%edx
+  800ecc:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
+  800ed0:	c1 ea 0c             	shr    $0xc,%edx
+  800ed3:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800ed6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+    return (int)do_div(result, RAND_MAX + 1);
+  800ed9:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
+  800ee0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  800ee3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  800ee6:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800ee9:	89 55 e8             	mov    %edx,-0x18(%ebp)
+  800eec:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800eef:	89 45 ec             	mov    %eax,-0x14(%ebp)
+  800ef2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
+  800ef6:	74 1c                	je     800f14 <rand+0x99>
+  800ef8:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800efb:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f00:	f7 75 dc             	divl   -0x24(%ebp)
+  800f03:	89 55 ec             	mov    %edx,-0x14(%ebp)
+  800f06:	8b 45 e8             	mov    -0x18(%ebp),%eax
+  800f09:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f0e:	f7 75 dc             	divl   -0x24(%ebp)
+  800f11:	89 45 e8             	mov    %eax,-0x18(%ebp)
+  800f14:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f17:	8b 55 ec             	mov    -0x14(%ebp),%edx
+  800f1a:	f7 75 dc             	divl   -0x24(%ebp)
+  800f1d:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  800f20:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  800f23:	8b 45 d8             	mov    -0x28(%ebp),%eax
+  800f26:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  800f29:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  800f2c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  800f2f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+}
+  800f32:	83 c4 24             	add    $0x24,%esp
+  800f35:	5b                   	pop    %ebx
+  800f36:	5e                   	pop    %esi
+  800f37:	5f                   	pop    %edi
+  800f38:	5d                   	pop    %ebp
+  800f39:	c3                   	ret    
+
+00800f3a <srand>:
+/* *
+ * srand - seed the random number generator with the given number
+ * @seed:   the required seed number
+ * */
+void
+srand(unsigned int seed) {
+  800f3a:	55                   	push   %ebp
+  800f3b:	89 e5                	mov    %esp,%ebp
+    next = seed;
+  800f3d:	8b 45 08             	mov    0x8(%ebp),%eax
+  800f40:	ba 00 00 00 00       	mov    $0x0,%edx
+  800f45:	a3 00 20 80 00       	mov    %eax,0x802000
+  800f4a:	89 15 04 20 80 00    	mov    %edx,0x802004
+}
+  800f50:	90                   	nop
+  800f51:	5d                   	pop    %ebp
+  800f52:	c3                   	ret    
+
+00800f53 <main>:
+#include <ulib.h>
+#include <stdio.h>
+
+int
+main(void) {
+  800f53:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+  800f57:	83 e4 f0             	and    $0xfffffff0,%esp
+  800f5a:	ff 71 fc             	pushl  -0x4(%ecx)
+  800f5d:	55                   	push   %ebp
+  800f5e:	89 e5                	mov    %esp,%ebp
+  800f60:	51                   	push   %ecx
+  800f61:	83 ec 14             	sub    $0x14,%esp
+    int i;
+    cprintf("Hello, I am process %d.\n", getpid());
+  800f64:	e8 e7 f2 ff ff       	call   800250 <getpid>
+  800f69:	83 ec 08             	sub    $0x8,%esp
+  800f6c:	50                   	push   %eax
+  800f6d:	68 c0 12 80 00       	push   $0x8012c0
+  800f72:	e8 8a f3 ff ff       	call   800301 <cprintf>
+  800f77:	83 c4 10             	add    $0x10,%esp
+    for (i = 0; i < 5; i ++) {
+  800f7a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  800f81:	eb 22                	jmp    800fa5 <main+0x52>
+        yield();
+  800f83:	e8 a4 f2 ff ff       	call   80022c <yield>
+        cprintf("Back in process %d, iteration %d.\n", getpid(), i);
+  800f88:	e8 c3 f2 ff ff       	call   800250 <getpid>
+  800f8d:	83 ec 04             	sub    $0x4,%esp
+  800f90:	ff 75 f4             	pushl  -0xc(%ebp)
+  800f93:	50                   	push   %eax
+  800f94:	68 dc 12 80 00       	push   $0x8012dc
+  800f99:	e8 63 f3 ff ff       	call   800301 <cprintf>
+  800f9e:	83 c4 10             	add    $0x10,%esp
+
+int
+main(void) {
+    int i;
+    cprintf("Hello, I am process %d.\n", getpid());
+    for (i = 0; i < 5; i ++) {
+  800fa1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
+  800fa5:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
+  800fa9:	7e d8                	jle    800f83 <main+0x30>
+        yield();
+        cprintf("Back in process %d, iteration %d.\n", getpid(), i);
+    }
+    cprintf("All done in process %d.\n", getpid());
+  800fab:	e8 a0 f2 ff ff       	call   800250 <getpid>
+  800fb0:	83 ec 08             	sub    $0x8,%esp
+  800fb3:	50                   	push   %eax
+  800fb4:	68 ff 12 80 00       	push   $0x8012ff
+  800fb9:	e8 43 f3 ff ff       	call   800301 <cprintf>
+  800fbe:	83 c4 10             	add    $0x10,%esp
+    cprintf("yield pass.\n");
+  800fc1:	83 ec 0c             	sub    $0xc,%esp
+  800fc4:	68 18 13 80 00       	push   $0x801318
+  800fc9:	e8 33 f3 ff ff       	call   800301 <cprintf>
+  800fce:	83 c4 10             	add    $0x10,%esp
+    return 0;
+  800fd1:	b8 00 00 00 00       	mov    $0x0,%eax
+}
+  800fd6:	8b 4d fc             	mov    -0x4(%ebp),%ecx
+  800fd9:	c9                   	leave  
+  800fda:	8d 61 fc             	lea    -0x4(%ecx),%esp
+  800fdd:	c3                   	ret    
diff -r -u -P lab7_original/obj/user/yield.d lab7/obj/user/yield.d
--- lab7_original/obj/user/yield.d	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/yield.d	2016-05-06 21:59:27.618123417 +0800
@@ -0,0 +1,2 @@
+obj/user/yield.o obj/user/yield.d: user/yield.c user/libs/ulib.h \
+ libs/defs.h libs/stdio.h libs/stdarg.h
Binary files lab7_original/obj/user/yield.o and lab7/obj/user/yield.o differ
diff -r -u -P lab7_original/obj/user/yield.sym lab7/obj/user/yield.sym
--- lab7_original/obj/user/yield.sym	1970-01-01 08:00:00.000000000 +0800
+++ lab7/obj/user/yield.sym	2016-05-06 21:59:28.610159582 +0800
@@ -0,0 +1,78 @@
+00800020 .text
+00800fe0 .rodata
+00802000 .data
+00200000 .stab_info
+00200010 .stab
+00202d95 .stabstr
+00000000 panic.c
+00000000 syscall.c
+008000b5 syscall
+00000000 ulib.c
+00000000 stdio.c
+008002b4 cputch
+00000000 umain.c
+00000000 string.c
+00000000 printfmt.c
+008010e0 error_string
+0080084a printnum
+0080093b getuint
+0080098a getint
+00800d9d sprintputch
+00000000 hash.c
+00000000 rand.c
+00802000 next
+00000000 yield.c
+008003e6 strcpy
+0080022c yield
+00800213 waitpid
+00800141 sys_yield
+008006ff memmove
+00800dd3 snprintf
+008009f5 vprintfmt
+0080011d sys_fork
+00800301 cprintf
+00800250 getpid
+008007a2 memcpy
+0080028f sleep
+00800278 lab6_set_priority
+00800dfc vsnprintf
+00800375 umain
+00202d94 __STAB_END__
+00800150 sys_kill
+00202d95 __STABSTR_BEGIN__
+00800020 __panic
+008001b7 sys_sleep
+00800562 strtol
+008003b6 strnlen
+0080025d print_pgdir
+0080023a kill
+00800533 strfind
+008001fc wait
+008002a5 _start
+00800e7b rand
+008004aa strncmp
+00800171 sys_putc
+00800426 strncpy
+008007f2 memcmp
+008001ef fork
+008006bf memset
+00800f53 main
+00800f3a srand
+00800e56 hash32
+008009d1 printfmt
+00203b9d __STABSTR_END__
+00800460 strcmp
+0080026b gettime_msec
+00800192 sys_gettime
+008002d8 vcprintf
+0080006e __warn
+00800327 cputs
+008001a1 sys_lab6_set_priority
+008001c9 exit
+0080012c sys_wait
+0080010b sys_exit
+00200010 __STAB_BEGIN__
+0080038e strlen
+00800183 sys_pgdir
+00800500 strchr
+00800162 sys_getpid
Binary files lab7_original/obj/__user_badarg.out and lab7/obj/__user_badarg.out differ
Binary files lab7_original/obj/__user_badsegment.out and lab7/obj/__user_badsegment.out differ
Binary files lab7_original/obj/__user_divzero.out and lab7/obj/__user_divzero.out differ
Binary files lab7_original/obj/__user_exit.out and lab7/obj/__user_exit.out differ
Binary files lab7_original/obj/__user_faultreadkernel.out and lab7/obj/__user_faultreadkernel.out differ
Binary files lab7_original/obj/__user_faultread.out and lab7/obj/__user_faultread.out differ
Binary files lab7_original/obj/__user_forktest.out and lab7/obj/__user_forktest.out differ
Binary files lab7_original/obj/__user_forktree.out and lab7/obj/__user_forktree.out differ
Binary files lab7_original/obj/__user_hello.out and lab7/obj/__user_hello.out differ
Binary files lab7_original/obj/__user_matrix.out and lab7/obj/__user_matrix.out differ
Binary files lab7_original/obj/__user_pgdir.out and lab7/obj/__user_pgdir.out differ
Binary files lab7_original/obj/__user_priority.out and lab7/obj/__user_priority.out differ
Binary files lab7_original/obj/__user_sleepkill.out and lab7/obj/__user_sleepkill.out differ
Binary files lab7_original/obj/__user_sleep.out and lab7/obj/__user_sleep.out differ
Binary files lab7_original/obj/__user_softint.out and lab7/obj/__user_softint.out differ
Binary files lab7_original/obj/__user_spin.out and lab7/obj/__user_spin.out differ
Binary files lab7_original/obj/__user_testbss.out and lab7/obj/__user_testbss.out differ
Binary files lab7_original/obj/__user_waitkill.out and lab7/obj/__user_waitkill.out differ
Binary files lab7_original/obj/__user_yield.out and lab7/obj/__user_yield.out differ
diff -r -u -P lab7_original/.pgdir.log lab7/.pgdir.log
--- lab7_original/.pgdir.log	1970-01-01 08:00:00.000000000 +0800
+++ lab7/.pgdir.log	2016-05-06 21:59:49.342937983 +0800
@@ -0,0 +1,331 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc010cc7c (phys)
+  edata  0xc01c22c4 (phys)
+  end    0xc01c5584 (phys)
+Kernel executable memory footprint: 790KB
+ebp:0xc0130f48 eip:0xc0100b4f args:0x00010094 0x00010094 0xc0130f78 0xc01000c5 
+    kern/debug/kdebug.c:352: print_stackframe+21
+ebp:0xc0130f58 eip:0xc0100e49 args:0x00000000 0x00000000 0x00000000 0xc0130fc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0130f78 eip:0xc01000c5 args:0x00000000 0xc0130fa0 0xffff0000 0xc0130fa4 
+    kern/init/init.c:59: grade_backtrace2+19
+ebp:0xc0130f98 eip:0xc01000e7 args:0x00000000 0xffff0000 0xc0130fc4 0x0000002a 
+    kern/init/init.c:64: grade_backtrace1+27
+ebp:0xc0130fb8 eip:0xc0100104 args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:69: grade_backtrace0+19
+ebp:0xc0130fd8 eip:0xc0100125 args:0x00000000 0x00000000 0x00000000 0xc010cc80 
+    kern/init/init.c:74: grade_backtrace+26
+ebp:0xc0130ff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:33: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31798
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+I am No.4 philosopher_condvar
+Iter 1, No.4 philosopher_condvar is thinking
+I am No.3 philosopher_condvar
+Iter 1, No.3 philosopher_condvar is thinking
+I am No.2 philosopher_condvar
+Iter 1, No.2 philosopher_condvar is thinking
+I am No.1 philosopher_condvar
+Iter 1, No.1 philosopher_condvar is thinking
+I am No.0 philosopher_condvar
+Iter 1, No.0 philosopher_condvar is thinking
+I am No.4 philosopher_sema
+Iter 1, No.4 philosopher_sema is thinking
+I am No.3 philosopher_sema
+Iter 1, No.3 philosopher_sema is thinking
+I am No.2 philosopher_sema
+Iter 1, No.2 philosopher_sema is thinking
+I am No.1 philosopher_sema
+Iter 1, No.1 philosopher_sema is thinking
+I am No.0 philosopher_sema
+Iter 1, No.0 philosopher_sema is thinking
+kernel_execve: pid = 2, name = "pgdir".
+I am 2, print pgdir.
+-------------------- BEGIN --------------------
+PDE(001) 00000000-00400000 00400000 urw
+  |-- PTE(00004) 00200000-00204000 00004000 urw
+PDE(001) 00800000-00c00000 00400000 urw
+  |-- PTE(00002) 00800000-00802000 00002000 ur-
+  |-- PTE(00001) 00802000-00803000 00001000 urw
+PDE(001) afc00000-b0000000 00400000 urw
+  |-- PTE(00004) afffc000-b0000000 00004000 urw
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(00001) fac00000-fac01000 00001000 urw
+  |-- PTE(00001) fac02000-fac03000 00001000 urw
+  |-- PTE(00001) faebf000-faec0000 00001000 urw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+pgdir pass.
+Iter 1, No.0 philosopher_sema is eating
+Iter 1, No.2 philosopher_sema is eating
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 1, No.0 philosopher_condvar is eating
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 1, No.2 philosopher_condvar is eating
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.3 philosopher_condvar is eating
+Iter 2, No.2 philosopher_sema is thinking
+Iter 1, No.3 philosopher_sema is eating
+Iter 2, No.0 philosopher_sema is thinking
+Iter 1, No.1 philosopher_sema is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.2 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.0 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+Iter 2, No.1 philosopher_sema is thinking
+Iter 2, No.0 philosopher_sema is eating
+Iter 2, No.3 philosopher_sema is thinking
+Iter 2, No.2 philosopher_sema is eating
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.1 philosopher_condvar is thinking
+Iter 2, No.3 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.2 philosopher_condvar is eating
+Iter 3, No.2 philosopher_sema is thinking
+Iter 2, No.3 philosopher_sema is eating
+Iter 3, No.0 philosopher_sema is thinking
+Iter 2, No.1 philosopher_sema is eating
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.4 philosopher_condvar is eating
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.0 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.2 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.2 philosopher_condvar is eating
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.1 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.1 philosopher_sema is thinking
+Iter 3, No.0 philosopher_sema is eating
+Iter 3, No.3 philosopher_sema is thinking
+Iter 3, No.2 philosopher_sema is eating
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.4 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+Iter 4, No.2 philosopher_sema is thinking
+Iter 4, No.0 philosopher_sema is thinking
+Iter 3, No.1 philosopher_sema is eating
+Iter 1, No.4 philosopher_sema is eating
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.3 philosopher_condvar is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.2 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.0 philosopher_condvar is thinking
+Iter 4, No.1 philosopher_sema is thinking
+Iter 4, No.2 philosopher_sema is eating
+Iter 2, No.4 philosopher_sema is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+Iter 4, No.0 philosopher_sema is eating
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.1 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.2 philosopher_condvar is eating
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.3 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 1, cvp->owner->next_count 0
+No.2 philosopher_sema quit
+Iter 3, No.3 philosopher_sema is eating
+cond_wait end:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.4 philosopher_condvar is eating
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+No.0 philosopher_condvar quit
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+No.0 philosopher_sema quit
+Iter 4, No.1 philosopher_sema is eating
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+No.2 philosopher_condvar quit
+No.1 philosopher_condvar quit
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.3 philosopher_condvar is eating
+No.1 philosopher_sema quit
+Iter 4, No.3 philosopher_sema is thinking
+Iter 2, No.4 philosopher_sema is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.4 philosopher_condvar is thinking
+Iter 3, No.4 philosopher_sema is thinking
+Iter 4, No.3 philosopher_condvar is thinking
+Iter 4, No.3 philosopher_sema is eating
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.4 philosopher_condvar is eating
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+No.3 philosopher_sema quit
+Iter 3, No.4 philosopher_sema is eating
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.3 philosopher_condvar is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.4 philosopher_condvar is thinking
+Iter 4, No.4 philosopher_sema is thinking
+No.3 philosopher_condvar quit
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.4 philosopher_condvar is eating
+Iter 4, No.4 philosopher_sema is eating
+No.4 philosopher_condvar quit
+No.4 philosopher_sema quit
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:476:
+    initproc exit.
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
diff -r -u -P lab7_original/.priority.log lab7/.priority.log
--- lab7_original/.priority.log	1970-01-01 08:00:00.000000000 +0800
+++ lab7/.priority.log	2016-05-06 22:00:27.384372578 +0800
@@ -0,0 +1,327 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc010cc7c (phys)
+  edata  0xc01c22c4 (phys)
+  end    0xc01c5584 (phys)
+Kernel executable memory footprint: 790KB
+ebp:0xc0130f48 eip:0xc0100b4f args:0x00010094 0x00010094 0xc0130f78 0xc01000c5 
+    kern/debug/kdebug.c:352: print_stackframe+21
+ebp:0xc0130f58 eip:0xc0100e49 args:0x00000000 0x00000000 0x00000000 0xc0130fc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0130f78 eip:0xc01000c5 args:0x00000000 0xc0130fa0 0xffff0000 0xc0130fa4 
+    kern/init/init.c:59: grade_backtrace2+19
+ebp:0xc0130f98 eip:0xc01000e7 args:0x00000000 0xffff0000 0xc0130fc4 0x0000002a 
+    kern/init/init.c:64: grade_backtrace1+27
+ebp:0xc0130fb8 eip:0xc0100104 args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:69: grade_backtrace0+19
+ebp:0xc0130fd8 eip:0xc0100125 args:0x00000000 0x00000000 0x00000000 0xc010cc80 
+    kern/init/init.c:74: grade_backtrace+26
+ebp:0xc0130ff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:33: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31798
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+I am No.4 philosopher_condvar
+Iter 1, No.4 philosopher_condvar is thinking
+I am No.3 philosopher_condvar
+Iter 1, No.3 philosopher_condvar is thinking
+I am No.2 philosopher_condvar
+Iter 1, No.2 philosopher_condvar is thinking
+I am No.1 philosopher_condvar
+Iter 1, No.1 philosopher_condvar is thinking
+I am No.0 philosopher_condvar
+Iter 1, No.0 philosopher_condvar is thinking
+I am No.4 philosopher_sema
+Iter 1, No.4 philosopher_sema is thinking
+I am No.3 philosopher_sema
+Iter 1, No.3 philosopher_sema is thinking
+I am No.2 philosopher_sema
+Iter 1, No.2 philosopher_sema is thinking
+I am No.1 philosopher_sema
+Iter 1, No.1 philosopher_sema is thinking
+I am No.0 philosopher_sema
+Iter 1, No.0 philosopher_sema is thinking
+kernel_execve: pid = 2, name = "priority".
+priority process will sleep 400 ticks
+Iter 1, No.0 philosopher_sema is eating
+Iter 1, No.2 philosopher_sema is eating
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 1, No.0 philosopher_condvar is eating
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 1, No.2 philosopher_condvar is eating
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.3 philosopher_condvar is eating
+Iter 2, No.2 philosopher_sema is thinking
+Iter 1, No.3 philosopher_sema is eating
+Iter 2, No.0 philosopher_sema is thinking
+Iter 1, No.1 philosopher_sema is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.2 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.0 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+Iter 2, No.1 philosopher_sema is thinking
+Iter 2, No.0 philosopher_sema is eating
+Iter 2, No.3 philosopher_sema is thinking
+Iter 2, No.2 philosopher_sema is eating
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.1 philosopher_condvar is thinking
+Iter 2, No.3 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.2 philosopher_condvar is eating
+Iter 3, No.2 philosopher_sema is thinking
+Iter 2, No.3 philosopher_sema is eating
+Iter 3, No.0 philosopher_sema is thinking
+Iter 2, No.1 philosopher_sema is eating
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.4 philosopher_condvar is eating
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.0 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.2 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.2 philosopher_condvar is eating
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.1 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.1 philosopher_sema is thinking
+Iter 3, No.0 philosopher_sema is eating
+Iter 3, No.3 philosopher_sema is thinking
+Iter 3, No.2 philosopher_sema is eating
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.4 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+Iter 4, No.2 philosopher_sema is thinking
+Iter 4, No.0 philosopher_sema is thinking
+Iter 3, No.1 philosopher_sema is eating
+Iter 1, No.4 philosopher_sema is eating
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.3 philosopher_condvar is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.2 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.0 philosopher_condvar is thinking
+Iter 4, No.1 philosopher_sema is thinking
+Iter 4, No.2 philosopher_sema is eating
+Iter 2, No.4 philosopher_sema is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+Iter 4, No.0 philosopher_sema is eating
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.1 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.2 philosopher_condvar is eating
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.3 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 1, cvp->owner->next_count 0
+No.2 philosopher_sema quit
+Iter 3, No.3 philosopher_sema is eating
+cond_wait end:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.4 philosopher_condvar is eating
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+No.0 philosopher_condvar quit
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+No.0 philosopher_sema quit
+Iter 4, No.1 philosopher_sema is eating
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+No.2 philosopher_condvar quit
+No.1 philosopher_condvar quit
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.3 philosopher_condvar is eating
+No.1 philosopher_sema quit
+Iter 4, No.3 philosopher_sema is thinking
+Iter 2, No.4 philosopher_sema is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.4 philosopher_condvar is thinking
+Iter 3, No.4 philosopher_sema is thinking
+Iter 4, No.3 philosopher_condvar is thinking
+Iter 4, No.3 philosopher_sema is eating
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.4 philosopher_condvar is eating
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+No.3 philosopher_sema quit
+Iter 3, No.4 philosopher_sema is eating
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.3 philosopher_condvar is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.4 philosopher_condvar is thinking
+Iter 4, No.4 philosopher_sema is thinking
+No.3 philosopher_condvar quit
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.4 philosopher_condvar is eating
+Iter 4, No.4 philosopher_sema is eating
+No.4 philosopher_condvar quit
+No.4 philosopher_sema quit
+main: fork ok,now need to wait pids.
+child pid 16, acc 1584000, time 1401
+child pid 17, acc 1952000, time 1401
+child pid 15, acc 1180000, time 1401
+child pid 14, acc 792000, time 1401
+child pid 13, acc 416000, time 1402
+main: pid 13, acc 416000, time 1402
+main: pid 14, acc 792000, time 1402
+main: pid 15, acc 1180000, time 1402
+main: pid 16, acc 1584000, time 1402
+main: pid 17, acc 1952000, time 1402
+main: wait pids over
+stride sched correct result: 1 2 3 4 5
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:476:
+    initproc exit.
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P lab7_original/.project lab7/.project
--- lab7_original/.project	1970-01-01 08:00:00.000000000 +0800
+++ lab7/.project	2016-04-30 19:47:56.718326517 +0800
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>lab6</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.cdt.managedbuilder.core.genmakebuilder</name>
+			<triggers>clean,full,incremental,</triggers>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.cdt.managedbuilder.core.ScannerConfigBuilder</name>
+			<triggers>full,incremental,</triggers>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.cdt.core.cnature</nature>
+		<nature>org.eclipse.cdt.core.ccnature</nature>
+		<nature>org.eclipse.cdt.managedbuilder.core.managedBuildNature</nature>
+		<nature>org.eclipse.cdt.managedbuilder.core.ScannerConfigNature</nature>
+	</natures>
+</projectDescription>
diff -r -u -P lab7_original/.qemu.out lab7/.qemu.out
--- lab7_original/.qemu.out	1970-01-01 08:00:00.000000000 +0800
+++ lab7/.qemu.out	2016-05-06 22:00:54.221374239 +0800
@@ -0,0 +1,351 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc010cc7c (phys)
+  edata  0xc01c22c4 (phys)
+  end    0xc01c5584 (phys)
+Kernel executable memory footprint: 790KB
+ebp:0xc0130f48 eip:0xc0100b4f args:0x00010094 0x00010094 0xc0130f78 0xc01000c5 
+    kern/debug/kdebug.c:352: print_stackframe+21
+ebp:0xc0130f58 eip:0xc0100e49 args:0x00000000 0x00000000 0x00000000 0xc0130fc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0130f78 eip:0xc01000c5 args:0x00000000 0xc0130fa0 0xffff0000 0xc0130fa4 
+    kern/init/init.c:59: grade_backtrace2+19
+ebp:0xc0130f98 eip:0xc01000e7 args:0x00000000 0xffff0000 0xc0130fc4 0x0000002a 
+    kern/init/init.c:64: grade_backtrace1+27
+ebp:0xc0130fb8 eip:0xc0100104 args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:69: grade_backtrace0+19
+ebp:0xc0130fd8 eip:0xc0100125 args:0x00000000 0x00000000 0x00000000 0xc010cc80 
+    kern/init/init.c:74: grade_backtrace+26
+ebp:0xc0130ff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:33: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31798
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+I am No.4 philosopher_condvar
+Iter 1, No.4 philosopher_condvar is thinking
+I am No.3 philosopher_condvar
+Iter 1, No.3 philosopher_condvar is thinking
+I am No.2 philosopher_condvar
+Iter 1, No.2 philosopher_condvar is thinking
+I am No.1 philosopher_condvar
+Iter 1, No.1 philosopher_condvar is thinking
+I am No.0 philosopher_condvar
+Iter 1, No.0 philosopher_condvar is thinking
+I am No.4 philosopher_sema
+Iter 1, No.4 philosopher_sema is thinking
+I am No.3 philosopher_sema
+Iter 1, No.3 philosopher_sema is thinking
+I am No.2 philosopher_sema
+Iter 1, No.2 philosopher_sema is thinking
+I am No.1 philosopher_sema
+Iter 1, No.1 philosopher_sema is thinking
+I am No.0 philosopher_sema
+Iter 1, No.0 philosopher_sema is thinking
+kernel_execve: pid = 2, name = "matrix".
+fork ok.
+pid 13 is running (1000 times)!.
+pid 13 done!.
+pid 15 is running (1100 times)!.
+pid 15 done!.
+pid 17 is running (4600 times)!.
+Iter 1, No.0 philosopher_sema is eating
+Iter 1, No.2 philosopher_sema is eating
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 1, No.0 philosopher_condvar is eating
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 1, No.2 philosopher_condvar is eating
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+pid 14 is running (1000 times)!.
+pid 14 done!.
+pid 19 is running (20600 times)!.
+pid 21 is running (2600 times)!.
+pid 23 is running (37100 times)!.
+pid 25 is running (23500 times)!.
+pid 27 is running (23500 times)!.
+pid 16 is running (1900 times)!.
+pid 18 is running (11000 times)!.
+pid 20 is running (37100 times)!.
+pid 29 is running (33400 times)!.
+pid 31 is running (2600 times)!.
+pid 32 is running (26600 times)!.
+pid 22 is running (13100 times)!.
+pid 24 is running (4600 times)!.
+pid 26 is running (2600 times)!.
+pid 28 is running (4600 times)!.
+pid 30 is running (13100 times)!.
+pid 33 is running (13100 times)!.
+pid 26 done!.
+pid 16 done!.
+Iter 2, No.2 philosopher_sema is thinking
+Iter 1, No.3 philosopher_sema is eating
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.3 philosopher_condvar is eating
+pid 31 done!.
+pid 21 done!.
+Iter 2, No.0 philosopher_sema is thinking
+Iter 1, No.1 philosopher_sema is eating
+Iter 2, No.1 philosopher_sema is thinking
+Iter 2, No.0 philosopher_sema is eating
+Iter 2, No.3 philosopher_sema is thinking
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.2 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.1 philosopher_condvar is eating
+Iter 2, No.2 philosopher_sema is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.0 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 1, cvp->owner->next_count 0
+pid 24 done!.
+Iter 3, No.0 philosopher_sema is thinking
+pid 17 done!.
+pid 28 done!.
+cond_wait end:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.4 philosopher_condvar is eating
+Iter 1, No.4 philosopher_sema is eating
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.3 philosopher_condvar is thinking
+Iter 2, No.1 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.2 philosopher_condvar is eating
+Iter 3, No.2 philosopher_sema is thinking
+Iter 2, No.1 philosopher_sema is eating
+Iter 2, No.4 philosopher_sema is thinking
+Iter 2, No.3 philosopher_sema is eating
+Iter 3, No.3 philosopher_sema is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.1 philosopher_sema is thinking
+Iter 3, No.0 philosopher_sema is eating
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.0 philosopher_condvar is eating
+Iter 4, No.0 philosopher_sema is thinking
+Iter 3, No.2 philosopher_sema is eating
+Iter 2, No.4 philosopher_sema is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.4 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.3 philosopher_condvar is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.2 philosopher_condvar is thinking
+Iter 4, No.2 philosopher_sema is thinking
+Iter 3, No.1 philosopher_sema is eating
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+Iter 3, No.4 philosopher_sema is thinking
+Iter 3, No.3 philosopher_sema is eating
+Iter 4, No.3 philosopher_sema is thinking
+Iter 4, No.1 philosopher_sema is thinking
+Iter 4, No.0 philosopher_sema is eating
+Iter 4, No.2 philosopher_sema is eating
+pid 18 done!.
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.0 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 1, cvp->owner->next_count 0
+No.2 philosopher_sema quit
+pid 30 done!.
+No.0 philosopher_sema quit
+pid 33 done!.
+pid 22 done!.
+Iter 4, No.1 philosopher_sema is eating
+Iter 3, No.4 philosopher_sema is eating
+cond_wait end:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.4 philosopher_condvar is eating
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.3 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+No.1 philosopher_sema quit
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.2 philosopher_condvar is eating
+Iter 4, No.4 philosopher_sema is thinking
+Iter 4, No.3 philosopher_sema is eating
+No.3 philosopher_sema quit
+Iter 4, No.4 philosopher_sema is eating
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.1 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.0 philosopher_condvar is eating
+No.4 philosopher_sema quit
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.4 philosopher_condvar is thinking
+Iter 4, No.2 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.3 philosopher_condvar is eating
+Iter 4, No.0 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.1 philosopher_condvar is eating
+Iter 4, No.3 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.4 philosopher_condvar is eating
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+pid 19 done!.
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.2 philosopher_condvar is eating
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.1 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.0 philosopher_condvar is eating
+pid 25 done!.
+pid 27 done!.
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.4 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.3 philosopher_condvar is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+No.2 philosopher_condvar quit
+No.0 philosopher_condvar quit
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.1 philosopher_condvar is eating
+No.3 philosopher_condvar quit
+pid 32 done!.
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.4 philosopher_condvar is eating
+No.1 philosopher_condvar quit
+No.4 philosopher_condvar quit
+pid 29 done!.
+pid 23 done!.
+pid 20 done!.
+matrix pass.
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:476:
+    initproc exit.
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P lab7_original/.sleepkill.log lab7/.sleepkill.log
--- lab7_original/.sleepkill.log	1970-01-01 08:00:00.000000000 +0800
+++ lab7/.sleepkill.log	2016-05-06 22:00:42.304927034 +0800
@@ -0,0 +1,314 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc010cc7c (phys)
+  edata  0xc01c22c4 (phys)
+  end    0xc01c5584 (phys)
+Kernel executable memory footprint: 790KB
+ebp:0xc0130f48 eip:0xc0100b4f args:0x00010094 0x00010094 0xc0130f78 0xc01000c5 
+    kern/debug/kdebug.c:352: print_stackframe+21
+ebp:0xc0130f58 eip:0xc0100e49 args:0x00000000 0x00000000 0x00000000 0xc0130fc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0130f78 eip:0xc01000c5 args:0x00000000 0xc0130fa0 0xffff0000 0xc0130fa4 
+    kern/init/init.c:59: grade_backtrace2+19
+ebp:0xc0130f98 eip:0xc01000e7 args:0x00000000 0xffff0000 0xc0130fc4 0x0000002a 
+    kern/init/init.c:64: grade_backtrace1+27
+ebp:0xc0130fb8 eip:0xc0100104 args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:69: grade_backtrace0+19
+ebp:0xc0130fd8 eip:0xc0100125 args:0x00000000 0x00000000 0x00000000 0xc010cc80 
+    kern/init/init.c:74: grade_backtrace+26
+ebp:0xc0130ff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:33: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31798
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+I am No.4 philosopher_condvar
+Iter 1, No.4 philosopher_condvar is thinking
+I am No.3 philosopher_condvar
+Iter 1, No.3 philosopher_condvar is thinking
+I am No.2 philosopher_condvar
+Iter 1, No.2 philosopher_condvar is thinking
+I am No.1 philosopher_condvar
+Iter 1, No.1 philosopher_condvar is thinking
+I am No.0 philosopher_condvar
+Iter 1, No.0 philosopher_condvar is thinking
+I am No.4 philosopher_sema
+Iter 1, No.4 philosopher_sema is thinking
+I am No.3 philosopher_sema
+Iter 1, No.3 philosopher_sema is thinking
+I am No.2 philosopher_sema
+Iter 1, No.2 philosopher_sema is thinking
+I am No.1 philosopher_sema
+Iter 1, No.1 philosopher_sema is thinking
+I am No.0 philosopher_sema
+Iter 1, No.0 philosopher_sema is thinking
+kernel_execve: pid = 2, name = "sleepkill".
+Iter 1, No.0 philosopher_sema is eating
+Iter 1, No.2 philosopher_sema is eating
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 1, No.0 philosopher_condvar is eating
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 1, No.2 philosopher_condvar is eating
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.3 philosopher_condvar is eating
+Iter 2, No.2 philosopher_sema is thinking
+Iter 1, No.3 philosopher_sema is eating
+Iter 2, No.0 philosopher_sema is thinking
+Iter 1, No.1 philosopher_sema is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.2 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.0 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+Iter 2, No.1 philosopher_sema is thinking
+Iter 2, No.0 philosopher_sema is eating
+Iter 2, No.3 philosopher_sema is thinking
+Iter 2, No.2 philosopher_sema is eating
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.1 philosopher_condvar is thinking
+Iter 2, No.3 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.2 philosopher_condvar is eating
+Iter 3, No.2 philosopher_sema is thinking
+Iter 2, No.3 philosopher_sema is eating
+Iter 3, No.0 philosopher_sema is thinking
+Iter 2, No.1 philosopher_sema is eating
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.4 philosopher_condvar is eating
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.0 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.2 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.2 philosopher_condvar is eating
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.1 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.1 philosopher_sema is thinking
+Iter 3, No.0 philosopher_sema is eating
+Iter 3, No.3 philosopher_sema is thinking
+Iter 3, No.2 philosopher_sema is eating
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.4 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+Iter 4, No.2 philosopher_sema is thinking
+Iter 4, No.0 philosopher_sema is thinking
+Iter 3, No.1 philosopher_sema is eating
+Iter 1, No.4 philosopher_sema is eating
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.3 philosopher_condvar is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.2 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.0 philosopher_condvar is thinking
+Iter 4, No.1 philosopher_sema is thinking
+Iter 4, No.2 philosopher_sema is eating
+Iter 2, No.4 philosopher_sema is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+Iter 4, No.0 philosopher_sema is eating
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.1 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.2 philosopher_condvar is eating
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.3 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 1, cvp->owner->next_count 0
+No.2 philosopher_sema quit
+Iter 3, No.3 philosopher_sema is eating
+cond_wait end:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.4 philosopher_condvar is eating
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+No.0 philosopher_condvar quit
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+No.0 philosopher_sema quit
+Iter 4, No.1 philosopher_sema is eating
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+No.2 philosopher_condvar quit
+No.1 philosopher_condvar quit
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.3 philosopher_condvar is eating
+No.1 philosopher_sema quit
+Iter 4, No.3 philosopher_sema is thinking
+Iter 2, No.4 philosopher_sema is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.4 philosopher_condvar is thinking
+Iter 3, No.4 philosopher_sema is thinking
+Iter 4, No.3 philosopher_condvar is thinking
+Iter 4, No.3 philosopher_sema is eating
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.4 philosopher_condvar is eating
+sleepkill pass.
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+No.3 philosopher_sema quit
+Iter 3, No.4 philosopher_sema is eating
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.3 philosopher_condvar is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.4 philosopher_condvar is thinking
+Iter 4, No.4 philosopher_sema is thinking
+No.3 philosopher_condvar quit
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.4 philosopher_condvar is eating
+Iter 4, No.4 philosopher_sema is eating
+No.4 philosopher_condvar quit
+No.4 philosopher_sema quit
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:476:
+    initproc exit.
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P lab7_original/.sleep.log lab7/.sleep.log
--- lab7_original/.sleep.log	1970-01-01 08:00:00.000000000 +0800
+++ lab7/.sleep.log	2016-05-06 22:00:39.148808683 +0800
@@ -0,0 +1,325 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc010cc7c (phys)
+  edata  0xc01c22c4 (phys)
+  end    0xc01c5584 (phys)
+Kernel executable memory footprint: 790KB
+ebp:0xc0130f48 eip:0xc0100b4f args:0x00010094 0x00010094 0xc0130f78 0xc01000c5 
+    kern/debug/kdebug.c:352: print_stackframe+21
+ebp:0xc0130f58 eip:0xc0100e49 args:0x00000000 0x00000000 0x00000000 0xc0130fc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0130f78 eip:0xc01000c5 args:0x00000000 0xc0130fa0 0xffff0000 0xc0130fa4 
+    kern/init/init.c:59: grade_backtrace2+19
+ebp:0xc0130f98 eip:0xc01000e7 args:0x00000000 0xffff0000 0xc0130fc4 0x0000002a 
+    kern/init/init.c:64: grade_backtrace1+27
+ebp:0xc0130fb8 eip:0xc0100104 args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:69: grade_backtrace0+19
+ebp:0xc0130fd8 eip:0xc0100125 args:0x00000000 0x00000000 0x00000000 0xc010cc80 
+    kern/init/init.c:74: grade_backtrace+26
+ebp:0xc0130ff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:33: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31798
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+I am No.4 philosopher_condvar
+Iter 1, No.4 philosopher_condvar is thinking
+I am No.3 philosopher_condvar
+Iter 1, No.3 philosopher_condvar is thinking
+I am No.2 philosopher_condvar
+Iter 1, No.2 philosopher_condvar is thinking
+I am No.1 philosopher_condvar
+Iter 1, No.1 philosopher_condvar is thinking
+I am No.0 philosopher_condvar
+Iter 1, No.0 philosopher_condvar is thinking
+I am No.4 philosopher_sema
+Iter 1, No.4 philosopher_sema is thinking
+I am No.3 philosopher_sema
+Iter 1, No.3 philosopher_sema is thinking
+I am No.2 philosopher_sema
+Iter 1, No.2 philosopher_sema is thinking
+I am No.1 philosopher_sema
+Iter 1, No.1 philosopher_sema is thinking
+I am No.0 philosopher_sema
+Iter 1, No.0 philosopher_sema is thinking
+kernel_execve: pid = 2, name = "sleep".
+Iter 1, No.0 philosopher_sema is eating
+Iter 1, No.2 philosopher_sema is eating
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 1, No.0 philosopher_condvar is eating
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 1, No.2 philosopher_condvar is eating
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.3 philosopher_condvar is eating
+Iter 2, No.2 philosopher_sema is thinking
+Iter 1, No.3 philosopher_sema is eating
+Iter 2, No.0 philosopher_sema is thinking
+Iter 1, No.1 philosopher_sema is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.2 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.0 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+Iter 2, No.1 philosopher_sema is thinking
+Iter 2, No.0 philosopher_sema is eating
+Iter 2, No.3 philosopher_sema is thinking
+Iter 2, No.2 philosopher_sema is eating
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.1 philosopher_condvar is thinking
+Iter 2, No.3 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.2 philosopher_condvar is eating
+Iter 3, No.2 philosopher_sema is thinking
+Iter 2, No.3 philosopher_sema is eating
+Iter 3, No.0 philosopher_sema is thinking
+Iter 2, No.1 philosopher_sema is eating
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.4 philosopher_condvar is eating
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.0 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.2 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.2 philosopher_condvar is eating
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.1 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.1 philosopher_sema is thinking
+Iter 3, No.0 philosopher_sema is eating
+Iter 3, No.3 philosopher_sema is thinking
+Iter 3, No.2 philosopher_sema is eating
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.4 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+Iter 4, No.2 philosopher_sema is thinking
+Iter 4, No.0 philosopher_sema is thinking
+Iter 3, No.1 philosopher_sema is eating
+Iter 1, No.4 philosopher_sema is eating
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.3 philosopher_condvar is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.2 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.0 philosopher_condvar is thinking
+Iter 4, No.1 philosopher_sema is thinking
+Iter 4, No.2 philosopher_sema is eating
+Iter 2, No.4 philosopher_sema is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+Iter 4, No.0 philosopher_sema is eating
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.1 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.2 philosopher_condvar is eating
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.3 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 1, cvp->owner->next_count 0
+No.2 philosopher_sema quit
+Iter 3, No.3 philosopher_sema is eating
+cond_wait end:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.4 philosopher_condvar is eating
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+No.0 philosopher_condvar quit
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+No.0 philosopher_sema quit
+Iter 4, No.1 philosopher_sema is eating
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+No.2 philosopher_condvar quit
+No.1 philosopher_condvar quit
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.3 philosopher_condvar is eating
+No.1 philosopher_sema quit
+Iter 4, No.3 philosopher_sema is thinking
+Iter 2, No.4 philosopher_sema is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.4 philosopher_condvar is thinking
+Iter 3, No.4 philosopher_sema is thinking
+Iter 4, No.3 philosopher_condvar is thinking
+Iter 4, No.3 philosopher_sema is eating
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.4 philosopher_condvar is eating
+sleep 1 x 100 slices.
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+No.3 philosopher_sema quit
+Iter 3, No.4 philosopher_sema is eating
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.3 philosopher_condvar is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.4 philosopher_condvar is thinking
+Iter 4, No.4 philosopher_sema is thinking
+No.3 philosopher_condvar quit
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.4 philosopher_condvar is eating
+Iter 4, No.4 philosopher_sema is eating
+No.4 philosopher_condvar quit
+No.4 philosopher_sema quit
+sleep 2 x 100 slices.
+sleep 3 x 100 slices.
+sleep 4 x 100 slices.
+sleep 5 x 100 slices.
+sleep 6 x 100 slices.
+sleep 7 x 100 slices.
+sleep 8 x 100 slices.
+sleep 9 x 100 slices.
+sleep 10 x 100 slices.
+use 1000 msecs.
+sleep pass.
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:476:
+    initproc exit.
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P lab7_original/.softint.log lab7/.softint.log
--- lab7_original/.softint.log	1970-01-01 08:00:00.000000000 +0800
+++ lab7/.softint.log	2016-05-06 21:59:37.798502676 +0800
@@ -0,0 +1,333 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc010cc7c (phys)
+  edata  0xc01c22c4 (phys)
+  end    0xc01c5584 (phys)
+Kernel executable memory footprint: 790KB
+ebp:0xc0130f48 eip:0xc0100b4f args:0x00010094 0x00010094 0xc0130f78 0xc01000c5 
+    kern/debug/kdebug.c:352: print_stackframe+21
+ebp:0xc0130f58 eip:0xc0100e49 args:0x00000000 0x00000000 0x00000000 0xc0130fc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0130f78 eip:0xc01000c5 args:0x00000000 0xc0130fa0 0xffff0000 0xc0130fa4 
+    kern/init/init.c:59: grade_backtrace2+19
+ebp:0xc0130f98 eip:0xc01000e7 args:0x00000000 0xffff0000 0xc0130fc4 0x0000002a 
+    kern/init/init.c:64: grade_backtrace1+27
+ebp:0xc0130fb8 eip:0xc0100104 args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:69: grade_backtrace0+19
+ebp:0xc0130fd8 eip:0xc0100125 args:0x00000000 0x00000000 0x00000000 0xc010cc80 
+    kern/init/init.c:74: grade_backtrace+26
+ebp:0xc0130ff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:33: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31798
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+I am No.4 philosopher_condvar
+Iter 1, No.4 philosopher_condvar is thinking
+I am No.3 philosopher_condvar
+Iter 1, No.3 philosopher_condvar is thinking
+I am No.2 philosopher_condvar
+Iter 1, No.2 philosopher_condvar is thinking
+I am No.1 philosopher_condvar
+Iter 1, No.1 philosopher_condvar is thinking
+I am No.0 philosopher_condvar
+Iter 1, No.0 philosopher_condvar is thinking
+I am No.4 philosopher_sema
+Iter 1, No.4 philosopher_sema is thinking
+I am No.3 philosopher_sema
+Iter 1, No.3 philosopher_sema is thinking
+I am No.2 philosopher_sema
+Iter 1, No.2 philosopher_sema is thinking
+I am No.1 philosopher_sema
+Iter 1, No.1 philosopher_sema is thinking
+I am No.0 philosopher_sema
+Iter 1, No.0 philosopher_sema is thinking
+kernel_execve: pid = 2, name = "softint".
+trapframe at 0xc03b0fb4
+  edi  0x00000000
+  esi  0x00000000
+  ebp  0xafffffa8
+  oesp 0xc03b0fd4
+  ebx  0x00000000
+  edx  0x00000000
+  ecx  0xafffffc0
+  eax  0x00000000
+  ds   0x----0023
+  es   0x----0023
+  fs   0x----0000
+  gs   0x----0000
+  trap 0x0000000d General Protection
+  err  0x00000072
+  eip  0x00800f64
+  cs   0x----001b
+  flag 0x00000286 PF,SF,IF,IOPL=0
+  esp  0xafffffa0
+  ss   0x----0023
+unhandled trap.
+Iter 1, No.0 philosopher_sema is eating
+Iter 1, No.2 philosopher_sema is eating
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 1, No.0 philosopher_condvar is eating
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 1, No.2 philosopher_condvar is eating
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.3 philosopher_condvar is eating
+Iter 2, No.2 philosopher_sema is thinking
+Iter 1, No.3 philosopher_sema is eating
+Iter 2, No.0 philosopher_sema is thinking
+Iter 1, No.1 philosopher_sema is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.2 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.0 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+Iter 2, No.1 philosopher_sema is thinking
+Iter 2, No.0 philosopher_sema is eating
+Iter 2, No.3 philosopher_sema is thinking
+Iter 2, No.2 philosopher_sema is eating
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.1 philosopher_condvar is thinking
+Iter 2, No.3 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.2 philosopher_condvar is eating
+Iter 3, No.2 philosopher_sema is thinking
+Iter 2, No.3 philosopher_sema is eating
+Iter 3, No.0 philosopher_sema is thinking
+Iter 2, No.1 philosopher_sema is eating
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.4 philosopher_condvar is eating
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.0 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.2 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.2 philosopher_condvar is eating
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.1 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.1 philosopher_sema is thinking
+Iter 3, No.0 philosopher_sema is eating
+Iter 3, No.3 philosopher_sema is thinking
+Iter 3, No.2 philosopher_sema is eating
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.4 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+Iter 4, No.2 philosopher_sema is thinking
+Iter 4, No.0 philosopher_sema is thinking
+Iter 3, No.1 philosopher_sema is eating
+Iter 1, No.4 philosopher_sema is eating
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.3 philosopher_condvar is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.2 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.0 philosopher_condvar is thinking
+Iter 4, No.1 philosopher_sema is thinking
+Iter 4, No.2 philosopher_sema is eating
+Iter 2, No.4 philosopher_sema is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+Iter 4, No.0 philosopher_sema is eating
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.1 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.2 philosopher_condvar is eating
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.3 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 1, cvp->owner->next_count 0
+No.2 philosopher_sema quit
+Iter 3, No.3 philosopher_sema is eating
+cond_wait end:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.4 philosopher_condvar is eating
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+No.0 philosopher_condvar quit
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+No.0 philosopher_sema quit
+Iter 4, No.1 philosopher_sema is eating
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+No.2 philosopher_condvar quit
+No.1 philosopher_condvar quit
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.3 philosopher_condvar is eating
+No.1 philosopher_sema quit
+Iter 4, No.3 philosopher_sema is thinking
+Iter 2, No.4 philosopher_sema is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.4 philosopher_condvar is thinking
+Iter 3, No.4 philosopher_sema is thinking
+Iter 4, No.3 philosopher_condvar is thinking
+Iter 4, No.3 philosopher_sema is eating
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.4 philosopher_condvar is eating
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+No.3 philosopher_sema quit
+Iter 3, No.4 philosopher_sema is eating
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.3 philosopher_condvar is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.4 philosopher_condvar is thinking
+Iter 4, No.4 philosopher_sema is thinking
+No.3 philosopher_condvar quit
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.4 philosopher_condvar is eating
+Iter 4, No.4 philosopher_sema is eating
+No.4 philosopher_condvar quit
+No.4 philosopher_sema quit
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:476:
+    initproc exit.
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
diff -r -u -P lab7_original/.spin.log lab7/.spin.log
--- lab7_original/.spin.log	1970-01-01 08:00:00.000000000 +0800
+++ lab7/.spin.log	2016-05-06 22:00:01.883411125 +0800
@@ -0,0 +1,324 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc010cc7c (phys)
+  edata  0xc01c22c4 (phys)
+  end    0xc01c5584 (phys)
+Kernel executable memory footprint: 790KB
+ebp:0xc0130f48 eip:0xc0100b4f args:0x00010094 0x00010094 0xc0130f78 0xc01000c5 
+    kern/debug/kdebug.c:352: print_stackframe+21
+ebp:0xc0130f58 eip:0xc0100e49 args:0x00000000 0x00000000 0x00000000 0xc0130fc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0130f78 eip:0xc01000c5 args:0x00000000 0xc0130fa0 0xffff0000 0xc0130fa4 
+    kern/init/init.c:59: grade_backtrace2+19
+ebp:0xc0130f98 eip:0xc01000e7 args:0x00000000 0xffff0000 0xc0130fc4 0x0000002a 
+    kern/init/init.c:64: grade_backtrace1+27
+ebp:0xc0130fb8 eip:0xc0100104 args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:69: grade_backtrace0+19
+ebp:0xc0130fd8 eip:0xc0100125 args:0x00000000 0x00000000 0x00000000 0xc010cc80 
+    kern/init/init.c:74: grade_backtrace+26
+ebp:0xc0130ff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:33: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31798
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+I am No.4 philosopher_condvar
+Iter 1, No.4 philosopher_condvar is thinking
+I am No.3 philosopher_condvar
+Iter 1, No.3 philosopher_condvar is thinking
+I am No.2 philosopher_condvar
+Iter 1, No.2 philosopher_condvar is thinking
+I am No.1 philosopher_condvar
+Iter 1, No.1 philosopher_condvar is thinking
+I am No.0 philosopher_condvar
+Iter 1, No.0 philosopher_condvar is thinking
+I am No.4 philosopher_sema
+Iter 1, No.4 philosopher_sema is thinking
+I am No.3 philosopher_sema
+Iter 1, No.3 philosopher_sema is thinking
+I am No.2 philosopher_sema
+Iter 1, No.2 philosopher_sema is thinking
+I am No.1 philosopher_sema
+Iter 1, No.1 philosopher_sema is thinking
+I am No.0 philosopher_sema
+Iter 1, No.0 philosopher_sema is thinking
+kernel_execve: pid = 2, name = "spin".
+I am the parent. Forking the child...
+I am the parent. Running the child...
+I am the child. spinning ...
+Iter 1, No.0 philosopher_sema is eating
+Iter 1, No.2 philosopher_sema is eating
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 1, No.0 philosopher_condvar is eating
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 1, No.2 philosopher_condvar is eating
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.3 philosopher_condvar is eating
+Iter 2, No.2 philosopher_sema is thinking
+Iter 1, No.3 philosopher_sema is eating
+Iter 2, No.0 philosopher_sema is thinking
+Iter 1, No.1 philosopher_sema is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.2 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.1 philosopher_condvar is eating
+I am the parent.  Killing the child...
+kill returns 0
+wait returns 0
+spin may pass.
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.0 philosopher_condvar is thinking
+Iter 2, No.1 philosopher_sema is thinking
+Iter 2, No.0 philosopher_sema is eating
+Iter 2, No.3 philosopher_sema is thinking
+Iter 2, No.2 philosopher_sema is eating
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.4 philosopher_condvar is eating
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.3 philosopher_condvar is thinking
+Iter 2, No.1 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.2 philosopher_condvar is eating
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.4 philosopher_condvar is thinking
+Iter 3, No.2 philosopher_sema is thinking
+Iter 2, No.3 philosopher_sema is eating
+Iter 3, No.0 philosopher_sema is thinking
+Iter 2, No.1 philosopher_sema is eating
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.3 philosopher_condvar is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.2 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.1 philosopher_condvar is eating
+Iter 3, No.1 philosopher_sema is thinking
+Iter 3, No.3 philosopher_sema is thinking
+Iter 3, No.2 philosopher_sema is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.0 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.0 philosopher_sema is eating
+cond_wait begin:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.4 philosopher_condvar is eating
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.3 philosopher_condvar is thinking
+Iter 4, No.2 philosopher_sema is thinking
+Iter 3, No.3 philosopher_sema is eating
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.2 philosopher_condvar is eating
+Iter 4, No.0 philosopher_sema is thinking
+Iter 3, No.1 philosopher_sema is eating
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.1 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.4 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.1 philosopher_sema is thinking
+Iter 4, No.0 philosopher_sema is eating
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+Iter 4, No.3 philosopher_sema is thinking
+Iter 4, No.2 philosopher_sema is eating
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.3 philosopher_condvar is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.2 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.0 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+No.2 philosopher_sema quit
+Iter 4, No.3 philosopher_sema is eating
+cond_wait begin:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 1, cvp->owner->next_count 0
+No.0 philosopher_sema quit
+Iter 4, No.1 philosopher_sema is eating
+cond_wait end:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.4 philosopher_condvar is eating
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.3 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.2 philosopher_condvar is eating
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.1 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.0 philosopher_condvar is eating
+No.3 philosopher_sema quit
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.4 philosopher_condvar is thinking
+No.1 philosopher_sema quit
+Iter 1, No.4 philosopher_sema is eating
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.3 philosopher_condvar is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+No.2 philosopher_condvar quit
+cond_wait begin:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.4 philosopher_sema is thinking
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+No.0 philosopher_condvar quit
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.4 philosopher_condvar is eating
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+No.3 philosopher_condvar quit
+No.1 philosopher_condvar quit
+Iter 2, No.4 philosopher_sema is eating
+No.4 philosopher_condvar quit
+Iter 3, No.4 philosopher_sema is thinking
+Iter 3, No.4 philosopher_sema is eating
+Iter 4, No.4 philosopher_sema is thinking
+Iter 4, No.4 philosopher_sema is eating
+No.4 philosopher_sema quit
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:476:
+    initproc exit.
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P lab7_original/.testbss.log lab7/.testbss.log
--- lab7_original/.testbss.log	1970-01-01 08:00:00.000000000 +0800
+++ lab7/.testbss.log	2016-05-06 21:59:46.166818162 +0800
@@ -0,0 +1,146 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc010cc7c (phys)
+  edata  0xc01c22c4 (phys)
+  end    0xc01c5584 (phys)
+Kernel executable memory footprint: 790KB
+ebp:0xc0130f48 eip:0xc0100b4f args:0x00010094 0x00010094 0xc0130f78 0xc01000c5 
+    kern/debug/kdebug.c:352: print_stackframe+21
+ebp:0xc0130f58 eip:0xc0100e49 args:0x00000000 0x00000000 0x00000000 0xc0130fc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0130f78 eip:0xc01000c5 args:0x00000000 0xc0130fa0 0xffff0000 0xc0130fa4 
+    kern/init/init.c:59: grade_backtrace2+19
+ebp:0xc0130f98 eip:0xc01000e7 args:0x00000000 0xffff0000 0xc0130fc4 0x0000002a 
+    kern/init/init.c:64: grade_backtrace1+27
+ebp:0xc0130fb8 eip:0xc0100104 args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:69: grade_backtrace0+19
+ebp:0xc0130fd8 eip:0xc0100125 args:0x00000000 0x00000000 0x00000000 0xc010cc80 
+    kern/init/init.c:74: grade_backtrace+26
+ebp:0xc0130ff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:33: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31798
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+I am No.4 philosopher_condvar
+Iter 1, No.4 philosopher_condvar is thinking
+I am No.3 philosopher_condvar
+Iter 1, No.3 philosopher_condvar is thinking
+I am No.2 philosopher_condvar
+Iter 1, No.2 philosopher_condvar is thinking
+I am No.1 philosopher_condvar
+Iter 1, No.1 philosopher_condvar is thinking
+I am No.0 philosopher_condvar
+Iter 1, No.0 philosopher_condvar is thinking
+I am No.4 philosopher_sema
+Iter 1, No.4 philosopher_sema is thinking
+I am No.3 philosopher_sema
+Iter 1, No.3 philosopher_sema is thinking
+I am No.2 philosopher_sema
+Iter 1, No.2 philosopher_sema is thinking
+I am No.1 philosopher_sema
+Iter 1, No.1 philosopher_sema is thinking
+I am No.0 philosopher_sema
+Iter 1, No.0 philosopher_sema is thinking
+kernel_execve: pid = 2, name = "testbss".
+Making sure bss works right...
+Yes, good.  Now doing a wild write off the end...
+testbss may pass.
+not valid addr c03020, and  can not find it in vma
+trapframe at 0xc03b0fb4
+  edi  0x00000000
+  esi  0x00000000
+  ebp  0xafffffa8
+  oesp 0xc03b0fd4
+  ebx  0x00000000
+  edx  0x008013fa
+  ecx  0xaffffed8
+  eax  0x00000012
+  ds   0x----0023
+  es   0x----0023
+  fs   0x----0000
+  gs   0x----0000
+  trap 0x0000000e Page Fault
+  err  0x00000006
+  eip  0x0080102a
+  cs   0x----001b
+  flag 0x00000286 PF,SF,IF,IOPL=0
+  esp  0xafffff90
+  ss   0x----0023
+killed by kernel.
+kernel panic at kern/trap/trap.c:212:
+    handle user mode pgfault failed. ret=-3
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P lab7_original/tools/gdbinit~ lab7/tools/gdbinit~
--- lab7_original/tools/gdbinit~	1970-01-01 08:00:00.000000000 +0800
+++ lab7/tools/gdbinit~	2016-04-30 19:47:56.722326517 +0800
@@ -0,0 +1,3 @@
+file bin/kernel_nopage
+target remote :1234
+break kern_init
diff -r -u -P lab7_original/.waitkill.log lab7/.waitkill.log
--- lab7_original/.waitkill.log	1970-01-01 08:00:00.000000000 +0800
+++ lab7/.waitkill.log	2016-05-06 22:00:05.603551486 +0800
@@ -0,0 +1,308 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc010cc7c (phys)
+  edata  0xc01c22c4 (phys)
+  end    0xc01c5584 (phys)
+Kernel executable memory footprint: 790KB
+ebp:0xc0130f48 eip:0xc0100b4f args:0x00010094 0x00010094 0xc0130f78 0xc01000c5 
+    kern/debug/kdebug.c:352: print_stackframe+21
+ebp:0xc0130f58 eip:0xc0100e49 args:0x00000000 0x00000000 0x00000000 0xc0130fc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0130f78 eip:0xc01000c5 args:0x00000000 0xc0130fa0 0xffff0000 0xc0130fa4 
+    kern/init/init.c:59: grade_backtrace2+19
+ebp:0xc0130f98 eip:0xc01000e7 args:0x00000000 0xffff0000 0xc0130fc4 0x0000002a 
+    kern/init/init.c:64: grade_backtrace1+27
+ebp:0xc0130fb8 eip:0xc0100104 args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:69: grade_backtrace0+19
+ebp:0xc0130fd8 eip:0xc0100125 args:0x00000000 0x00000000 0x00000000 0xc010cc80 
+    kern/init/init.c:74: grade_backtrace+26
+ebp:0xc0130ff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:33: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31798
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+I am No.4 philosopher_condvar
+Iter 1, No.4 philosopher_condvar is thinking
+I am No.3 philosopher_condvar
+Iter 1, No.3 philosopher_condvar is thinking
+I am No.2 philosopher_condvar
+Iter 1, No.2 philosopher_condvar is thinking
+I am No.1 philosopher_condvar
+Iter 1, No.1 philosopher_condvar is thinking
+I am No.0 philosopher_condvar
+Iter 1, No.0 philosopher_condvar is thinking
+I am No.4 philosopher_sema
+Iter 1, No.4 philosopher_sema is thinking
+I am No.3 philosopher_sema
+Iter 1, No.3 philosopher_sema is thinking
+I am No.2 philosopher_sema
+Iter 1, No.2 philosopher_sema is thinking
+I am No.1 philosopher_sema
+Iter 1, No.1 philosopher_sema is thinking
+I am No.0 philosopher_sema
+Iter 1, No.0 philosopher_sema is thinking
+kernel_execve: pid = 2, name = "waitkill".
+wait child 1.
+child 2.
+child 1.
+Iter 1, No.0 philosopher_sema is eating
+Iter 1, No.2 philosopher_sema is eating
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 1, No.0 philosopher_condvar is eating
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 1, No.2 philosopher_condvar is eating
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.3 philosopher_condvar is eating
+Iter 2, No.2 philosopher_sema is thinking
+Iter 1, No.3 philosopher_sema is eating
+Iter 2, No.0 philosopher_sema is thinking
+Iter 1, No.1 philosopher_sema is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.2 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.1 philosopher_condvar is eating
+Iter 2, No.1 philosopher_sema is thinking
+Iter 2, No.0 philosopher_sema is eating
+Iter 2, No.3 philosopher_sema is thinking
+Iter 2, No.2 philosopher_sema is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.0 philosopher_condvar is thinking
+Iter 2, No.1 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.4 philosopher_condvar is eating
+Iter 3, No.2 philosopher_sema is thinking
+Iter 2, No.3 philosopher_sema is eating
+Iter 3, No.0 philosopher_sema is thinking
+Iter 2, No.1 philosopher_sema is eating
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.3 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.2 philosopher_condvar is eating
+Iter 2, No.4 philosopher_condvar is thinking
+Iter 3, No.1 philosopher_sema is thinking
+Iter 3, No.0 philosopher_sema is eating
+Iter 3, No.3 philosopher_sema is thinking
+Iter 3, No.2 philosopher_sema is eating
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.0 philosopher_condvar is eating
+cond_wait begin:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.2 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.3 philosopher_condvar is eating
+kill parent ok.
+Iter 4, No.2 philosopher_sema is thinking
+Iter 3, No.3 philosopher_sema is eating
+Iter 4, No.0 philosopher_sema is thinking
+Iter 3, No.1 philosopher_sema is eating
+Iter 3, No.3 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.4 philosopher_condvar is eating
+Iter 4, No.1 philosopher_sema is thinking
+Iter 4, No.0 philosopher_sema is eating
+Iter 4, No.3 philosopher_sema is thinking
+Iter 4, No.2 philosopher_sema is eating
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.1 philosopher_condvar is eating
+No.2 philosopher_sema quit
+Iter 4, No.3 philosopher_sema is eating
+No.0 philosopher_sema quit
+Iter 4, No.1 philosopher_sema is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.0 philosopher_condvar is thinking
+No.1 philosopher_sema quit
+No.3 philosopher_sema quit
+Iter 1, No.4 philosopher_sema is eating
+cond_wait begin:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.4 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.3 philosopher_condvar is eating
+Iter 3, No.1 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.0 philosopher_condvar is eating
+Iter 2, No.4 philosopher_sema is thinking
+kill child1 ok.
+Iter 4, No.0 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.1 philosopher_condvar is eating
+Iter 4, No.3 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.4 philosopher_condvar is eating
+Iter 2, No.4 philosopher_sema is eating
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.4 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+Iter 3, No.4 philosopher_sema is thinking
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.2 philosopher_condvar is eating
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.1 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+Iter 3, No.4 philosopher_sema is eating
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.3 philosopher_condvar is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.2 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+No.0 philosopher_condvar quit
+Iter 4, No.4 philosopher_sema is thinking
+No.1 philosopher_condvar quit
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.4 philosopher_condvar is eating
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+No.3 philosopher_condvar quit
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.2 philosopher_condvar is eating
+No.2 philosopher_condvar quit
+No.4 philosopher_condvar quit
+Iter 4, No.4 philosopher_sema is eating
+No.4 philosopher_sema quit
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:476:
+    initproc exit.
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
diff -r -u -P lab7_original/.yield.log lab7/.yield.log
--- lab7_original/.yield.log	1970-01-01 08:00:00.000000000 +0800
+++ lab7/.yield.log	2016-05-06 21:59:52.363051926 +0800
@@ -0,0 +1,321 @@
+(THU.CST) os is loading ...
+
+Special kernel symbols:
+  entry  0xc010002a (phys)
+  etext  0xc010cc7c (phys)
+  edata  0xc01c22c4 (phys)
+  end    0xc01c5584 (phys)
+Kernel executable memory footprint: 790KB
+ebp:0xc0130f48 eip:0xc0100b4f args:0x00010094 0x00010094 0xc0130f78 0xc01000c5 
+    kern/debug/kdebug.c:352: print_stackframe+21
+ebp:0xc0130f58 eip:0xc0100e49 args:0x00000000 0x00000000 0x00000000 0xc0130fc8 
+    kern/debug/kmonitor.c:129: mon_backtrace+10
+ebp:0xc0130f78 eip:0xc01000c5 args:0x00000000 0xc0130fa0 0xffff0000 0xc0130fa4 
+    kern/init/init.c:59: grade_backtrace2+19
+ebp:0xc0130f98 eip:0xc01000e7 args:0x00000000 0xffff0000 0xc0130fc4 0x0000002a 
+    kern/init/init.c:64: grade_backtrace1+27
+ebp:0xc0130fb8 eip:0xc0100104 args:0x00000000 0xc010002a 0xffff0000 0xc010006d 
+    kern/init/init.c:69: grade_backtrace0+19
+ebp:0xc0130fd8 eip:0xc0100125 args:0x00000000 0x00000000 0x00000000 0xc010cc80 
+    kern/init/init.c:74: grade_backtrace+26
+ebp:0xc0130ff8 eip:0xc010007a args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
+    kern/init/init.c:33: kern_init+79
+memory management: default_pmm_manager
+e820map:
+  memory: 0009fc00, [00000000, 0009fbff], type = 1.
+  memory: 00000400, [0009fc00, 0009ffff], type = 2.
+  memory: 00010000, [000f0000, 000fffff], type = 2.
+  memory: 07ee0000, [00100000, 07fdffff], type = 1.
+  memory: 00020000, [07fe0000, 07ffffff], type = 2.
+  memory: 00040000, [fffc0000, ffffffff], type = 2.
+check_alloc_page() succeeded!
+check_pgdir() succeeded!
+check_boot_pgdir() succeeded!
+-------------------- BEGIN --------------------
+PDE(0e0) c0000000-f8000000 38000000 urw
+  |-- PTE(38000) c0000000-f8000000 38000000 -rw
+PDE(001) fac00000-fb000000 00400000 -rw
+  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
+  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
+--------------------- END ---------------------
+use SLOB allocator
+kmalloc_init() succeeded!
+check_vma_struct() succeeded!
+page fault at 0x00000100: K/W [no page found].
+check_pgfault() succeeded!
+check_vmm() succeeded.
+sched class: stride_scheduler
+ide 0:      10000(sectors), 'QEMU HARDDISK'.
+ide 1:     262144(sectors), 'QEMU HARDDISK'.
+SWAP: manager = fifo swap manager
+BEGIN check_swap: count 1, total 31798
+setup Page Table for vaddr 0X1000, so alloc a page
+setup Page Table vaddr 0~4MB OVER!
+set up init env for check_swap begin!
+page fault at 0x00001000: K/W [no page found].
+page fault at 0x00002000: K/W [no page found].
+page fault at 0x00003000: K/W [no page found].
+page fault at 0x00004000: K/W [no page found].
+set up init env for check_swap over!
+write Virt Page c in fifo_check_swap
+write Virt Page a in fifo_check_swap
+write Virt Page d in fifo_check_swap
+write Virt Page b in fifo_check_swap
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+write Virt Page b in fifo_check_swap
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+write Virt Page b in fifo_check_swap
+page fault at 0x00002000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
+swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
+write Virt Page c in fifo_check_swap
+page fault at 0x00003000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
+swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
+write Virt Page d in fifo_check_swap
+page fault at 0x00004000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
+swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
+write Virt Page e in fifo_check_swap
+page fault at 0x00005000: K/W [no page found].
+swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
+swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
+write Virt Page a in fifo_check_swap
+page fault at 0x00001000: K/R [no page found].
+swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
+swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
+count is 0, total is 5
+check_swap() succeeded!
+++ setup timer interrupts
+I am No.4 philosopher_condvar
+Iter 1, No.4 philosopher_condvar is thinking
+I am No.3 philosopher_condvar
+Iter 1, No.3 philosopher_condvar is thinking
+I am No.2 philosopher_condvar
+Iter 1, No.2 philosopher_condvar is thinking
+I am No.1 philosopher_condvar
+Iter 1, No.1 philosopher_condvar is thinking
+I am No.0 philosopher_condvar
+Iter 1, No.0 philosopher_condvar is thinking
+I am No.4 philosopher_sema
+Iter 1, No.4 philosopher_sema is thinking
+I am No.3 philosopher_sema
+Iter 1, No.3 philosopher_sema is thinking
+I am No.2 philosopher_sema
+Iter 1, No.2 philosopher_sema is thinking
+I am No.1 philosopher_sema
+Iter 1, No.1 philosopher_sema is thinking
+I am No.0 philosopher_sema
+Iter 1, No.0 philosopher_sema is thinking
+kernel_execve: pid = 2, name = "yield".
+Hello, I am process 2.
+Back in process 2, iteration 0.
+Back in process 2, iteration 1.
+Back in process 2, iteration 2.
+Back in process 2, iteration 3.
+Back in process 2, iteration 4.
+All done in process 2.
+yield pass.
+Iter 1, No.0 philosopher_sema is eating
+Iter 1, No.2 philosopher_sema is eating
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 1, No.0 philosopher_condvar is eating
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 1, No.2 philosopher_condvar is eating
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.3 philosopher_condvar is eating
+Iter 2, No.2 philosopher_sema is thinking
+Iter 1, No.3 philosopher_sema is eating
+Iter 2, No.0 philosopher_sema is thinking
+Iter 1, No.1 philosopher_sema is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.2 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.0 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+Iter 2, No.1 philosopher_sema is thinking
+Iter 2, No.0 philosopher_sema is eating
+Iter 2, No.3 philosopher_sema is thinking
+Iter 2, No.2 philosopher_sema is eating
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.1 philosopher_condvar is thinking
+Iter 2, No.3 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.2 philosopher_condvar is eating
+Iter 3, No.2 philosopher_sema is thinking
+Iter 2, No.3 philosopher_sema is eating
+Iter 3, No.0 philosopher_sema is thinking
+Iter 2, No.1 philosopher_sema is eating
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 1
+Iter 1, No.4 philosopher_condvar is eating
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.0 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.2 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.2 philosopher_condvar is eating
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.1 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.1 philosopher_sema is thinking
+Iter 3, No.0 philosopher_sema is eating
+Iter 3, No.3 philosopher_sema is thinking
+Iter 3, No.2 philosopher_sema is eating
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 2, No.4 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+Iter 4, No.2 philosopher_sema is thinking
+Iter 4, No.0 philosopher_sema is thinking
+Iter 3, No.1 philosopher_sema is eating
+Iter 1, No.4 philosopher_sema is eating
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.3 philosopher_condvar is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.2 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.0 philosopher_condvar is thinking
+Iter 4, No.1 philosopher_sema is thinking
+Iter 4, No.2 philosopher_sema is eating
+Iter 2, No.4 philosopher_sema is thinking
+cond_wait begin:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+cond_wait begin:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[0] will eating
+phi_test_condvar: signal self_cv[0] 
+cond_signal begin: cvp c03a7688, cvp->count 1, cvp->owner->next_count 0
+Iter 4, No.0 philosopher_sema is eating
+cond_wait end:  cvp c03a7688, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.0 philosopher_condvar is eating
+cond_signal end: cvp c03a7688, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.1 philosopher_condvar is thinking
+phi_test_condvar: state_condvar[2] will eating
+phi_test_condvar: signal self_cv[2] 
+cond_signal begin: cvp c03a76b0, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76b0, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.2 philosopher_condvar is eating
+cond_signal end: cvp c03a76b0, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.3 philosopher_condvar is thinking
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 1, cvp->owner->next_count 0
+No.2 philosopher_sema quit
+Iter 3, No.3 philosopher_sema is eating
+cond_wait end:  cvp c03a76d8, cvp->count 0, cvp->owner->next_count 1
+Iter 2, No.4 philosopher_condvar is eating
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+No.0 philosopher_condvar quit
+cond_wait begin:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[1] will eating
+phi_test_condvar: signal self_cv[1] 
+cond_signal begin: cvp c03a769c, cvp->count 1, cvp->owner->next_count 0
+No.0 philosopher_sema quit
+Iter 4, No.1 philosopher_sema is eating
+cond_wait end:  cvp c03a769c, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.1 philosopher_condvar is eating
+cond_signal end: cvp c03a769c, cvp->count 0, cvp->owner->next_count 0
+No.2 philosopher_condvar quit
+No.1 philosopher_condvar quit
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 3, No.3 philosopher_condvar is eating
+No.1 philosopher_sema quit
+Iter 4, No.3 philosopher_sema is thinking
+Iter 2, No.4 philosopher_sema is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.4 philosopher_condvar is thinking
+Iter 3, No.4 philosopher_sema is thinking
+Iter 4, No.3 philosopher_condvar is thinking
+Iter 4, No.3 philosopher_sema is eating
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 3, No.4 philosopher_condvar is eating
+cond_wait begin:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+phi_test_condvar: state_condvar[3] will eating
+phi_test_condvar: signal self_cv[3] 
+cond_signal begin: cvp c03a76c4, cvp->count 1, cvp->owner->next_count 0
+No.3 philosopher_sema quit
+Iter 3, No.4 philosopher_sema is eating
+cond_wait end:  cvp c03a76c4, cvp->count 0, cvp->owner->next_count 1
+Iter 4, No.3 philosopher_condvar is eating
+cond_signal end: cvp c03a76c4, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.4 philosopher_condvar is thinking
+Iter 4, No.4 philosopher_sema is thinking
+No.3 philosopher_condvar quit
+phi_test_condvar: state_condvar[4] will eating
+phi_test_condvar: signal self_cv[4] 
+cond_signal begin: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+cond_signal end: cvp c03a76d8, cvp->count 0, cvp->owner->next_count 0
+Iter 4, No.4 philosopher_condvar is eating
+Iter 4, No.4 philosopher_sema is eating
+No.4 philosopher_condvar quit
+No.4 philosopher_sema quit
+all user-mode processes have quit.
+init check memory pass.
+kernel panic at kern/process/proc.c:476:
+    initproc exit.
+
+Welcome to the kernel debug monitor!!
+Type 'help' for a list of commands.
+K> 
\ No newline at end of file
